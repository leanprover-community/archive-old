[
    {
        "content": "<p>And this uses category theory</p>",
        "id": 207612276,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598000167
    },
    {
        "content": "<p>And I'm pretty sure that they're not at the point where we can start doing this</p>",
        "id": 207612314,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598000199
    },
    {
        "content": "<p>Surely there is lots of work on schemes that can come to mathlib now, before anyone runs into needing sheaves of modules over a sheaf of rings...</p>",
        "id": 207612334,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598000212
    },
    {
        "content": "<p>We can't even define a scheme I don't think Scott</p>",
        "id": 207612358,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598000236
    },
    {
        "content": "<p>You're saying that checking the sheaf condition on a basis is the blocker?</p>",
        "id": 207612483,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598000314
    },
    {
        "content": "<p>ok, so i can</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">code</span> <span class=\"o\">[</span><span class=\"n\">anything</span> <span class=\"n\">i</span> <span class=\"n\">want</span><span class=\"o\">]</span>\n</code></pre></div>\n\n\n<p>and if i import a file it will be from the version of mathlib that i have in my lean directory?</p>",
        "id": 207612488,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1598000317
    },
    {
        "content": "<p>Damiano read how to install projects on the community website</p>",
        "id": 207612508,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598000340
    },
    {
        "content": "<p>That's good to know, I'll try to make that happen. I didn't realise anyone was yet waiting on that.</p>",
        "id": 207612509,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598000342
    },
    {
        "content": "<p>Scott here's the issue</p>",
        "id": 207612514,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598000348
    },
    {
        "content": "<p>A scheme is a ringed space locally isomorphic to Spec R</p>",
        "id": 207612545,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598000378
    },
    {
        "content": "<p>The isomorphism takes place in the category of spaces equipped with a presheaf of rings</p>",
        "id": 207612554,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598000397
    },
    {
        "content": "<p>But putting the presheaf of rings on Spec R is not as easy as it sounds because of non affine opens</p>",
        "id": 207612614,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598000430
    },
    {
        "content": "<p>In Lean-scheme we put the presheaf on a basis</p>",
        "id": 207612637,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598000451
    },
    {
        "content": "<p>Then proved it was a sheaf (although sheafifying would also work)</p>",
        "id": 207612661,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598000477
    },
    {
        "content": "<p>And then proved that sheaves on X were the same as sheaves on a basis</p>",
        "id": 207612680,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598000498
    },
    {
        "content": "<p>By hand</p>",
        "id": 207612683,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598000501
    },
    {
        "content": "<p>In our particular case</p>",
        "id": 207612696,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598000511
    },
    {
        "content": "<p>My understanding is that <span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span> has a bunch of this stuff in the topos repo but he also has a thesis to write</p>",
        "id": 207612757,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598000560
    },
    {
        "content": "<p>I wish I knew whether we should be doing this with sites. Or just presheaves on <code>opens X</code>.</p>",
        "id": 207612813,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598000622
    },
    {
        "content": "<p>The construction I sketched needs the concept of sheaf on something more general than opens X</p>",
        "id": 207612888,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598000654
    },
    {
        "content": "<p>One could make the construction in a completely different way of course</p>",
        "id": 207612915,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598000685
    },
    {
        "content": "<p>I think Hartshorne does it totally differently</p>",
        "id": 207612934,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598000700
    },
    {
        "content": "<p>Are you just saying you want to check the sheaf condition only for covers consisting of opens in the basis?</p>",
        "id": 207612980,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598000738
    },
    {
        "content": "<p>That's easy to do in the current setup.</p>",
        "id": 207612994,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598000750
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> IIRC Hartshorne defines the sheaf of rings on Spec R directly by looking at functions on U taking values in some crazy disjoint union of rings</p>",
        "id": 207613072,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598000780
    },
    {
        "content": "<p>This might be a way to proceed</p>",
        "id": 207613084,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598000788
    },
    {
        "content": "<p>I think Harshorne basically defined the stalks first, and then recover the sheaf using \"continuous\" sections of the stalks;</p>",
        "id": 207613115,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1598000822
    },
    {
        "content": "<p>Scott I'm just saying that the way we did it pre category followed the stacks project approach which needed the concept of a presheaf and sheaf on a basis</p>",
        "id": 207613145,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598000847
    },
    {
        "content": "<p>And my understanding is that these are not yet in mathlib</p>",
        "id": 207613211,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598000887
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/invalid.20import/near/207613084\">said</a>:</p>\n<blockquote>\n<p>This might be a way to proceed</p>\n</blockquote>\n<p>I think that he mentions <em>espaces étalés</em> somewhere, but it might be only in an exercise</p>",
        "id": 207613241,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1598000912
    },
    {
        "content": "<p>We should move this thread to #maths and call it current status of schemes</p>",
        "id": 207613261,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598000930
    },
    {
        "content": "<p><a href=\"https://stacks.math.columbia.edu/tag/009H\">https://stacks.math.columbia.edu/tag/009H</a></p>",
        "id": 207613263,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598000933
    },
    {
        "content": "<p>Damiano I'm talking about the definition Hartshorne gives of the sheaf of rings on Spec R</p>",
        "id": 207613284,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598000960
    },
    {
        "content": "<p>This topic was moved here from <a class=\"stream-topic\" data-stream-id=\"113489\" href=\"/#narrow/stream/113489-new-members/topic/invalid.20import\">#new members &gt; invalid import</a> by <span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span></p>",
        "id": 207613291,
        "sender_full_name": "Notification Bot",
        "timestamp": 1598000963
    },
    {
        "content": "<p>Yes Scott we formalised stuff like that.</p>",
        "id": 207613353,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598001014
    },
    {
        "content": "<p>In a hands on way</p>",
        "id": 207613367,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598001022
    },
    {
        "content": "<p>With sheaves modelled as dependent functions taking values in Type</p>",
        "id": 207613399,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598001067
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/status.20of.20schemes/near/207613284\">said</a>:</p>\n<blockquote>\n<p>Damiano I'm talking about the definition Hartshorne gives of the sheaf of rings on Spec R</p>\n</blockquote>\n<p>Yes, he uses \"continuous sections\" by mapping to the disjoint union over all primes of the localizations</p>",
        "id": 207613472,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1598001124
    },
    {
        "content": "<p>One way to proceed here would be to deviate from the stacks project and use Hartshorne's definition, which is essentially applying the sheafification functor by hand</p>",
        "id": 207613473,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598001125
    },
    {
        "content": "<p>I suspect that, in the long run, using sites might be a more robust approach</p>",
        "id": 207613510,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1598001159
    },
    {
        "content": "<p>Right Damiano. One could work in current mathlib and define this presheaf of rings</p>",
        "id": 207613516,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598001163
    },
    {
        "content": "<p>If one went this way then there would be no need for sites</p>",
        "id": 207613534,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598001182
    },
    {
        "content": "<p>after all, all this discussion is heavily founded on the notion of open sets and covers, which sites already contain in their definitions</p>",
        "id": 207613537,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1598001185
    },
    {
        "content": "<p>Sure, but you see in this game you always have to decide where to stop</p>",
        "id": 207613558,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598001207
    },
    {
        "content": "<p>ok, I see!</p>",
        "id": 207613573,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1598001217
    },
    {
        "content": "<p>I could just as easily argue that schemes should not be formalised because they're a special case of stacks</p>",
        "id": 207613592,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598001234
    },
    {
        "content": "<p>Or that we should just concentrate on making the topos</p>",
        "id": 207613657,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598001261
    },
    {
        "content": "<p>which indeed is where i was going!  ahahaha</p>",
        "id": 207613659,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1598001263
    },
    {
        "content": "<p>:-)</p>",
        "id": 207613669,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598001271
    },
    {
        "content": "<p>I think that there's no obstruction to just making the sheaf directly a la Hartshorne</p>",
        "id": 207613709,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598001313
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/status.20of.20schemes/near/207612508\">said</a>:</p>\n<blockquote>\n<p>Damiano read how to install projects on the community website</p>\n</blockquote>\n<p>(In the meantime, I have managed to create my own version of the current version of mathlib!  thanks!)</p>",
        "id": 207613728,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1598001336
    },
    {
        "content": "<p><code>leanproject get mathlib</code></p>",
        "id": 207613748,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598001356
    },
    {
        "content": "<p>In there there's an algebraic geometry directory</p>",
        "id": 207613798,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598001371
    },
    {
        "content": "<p>You could make a new file called spec</p>",
        "id": 207613817,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598001387
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/status.20of.20schemes/near/207613709\">said</a>:</p>\n<blockquote>\n<p>I think that there's no obstruction to just making the sheaf directly a la Hartshorne</p>\n</blockquote>\n<p>I just wanted to point out that, defining schemes à la Hartshorne also seems a great goal!</p>",
        "id": 207613825,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1598001393
    },
    {
        "content": "<p>.lean</p>",
        "id": 207613828,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598001395
    },
    {
        "content": "<p>And then try to define the sheaf of rings on Spec R, following Hartshorne</p>",
        "id": 207613861,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598001437
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/status.20of.20schemes/near/207613817\">said</a>:</p>\n<blockquote>\n<p>You could make a new file called spec</p>\n</blockquote>\n<p>(ok, i did something similar and, hopefully, equivalent: i typed </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">leanproject</span> <span class=\"n\">new</span> <span class=\"n\">Chevalley</span>\n</code></pre></div>\n\n\n<p>and now i am working in there)</p>",
        "id": 207613876,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1598001460
    },
    {
        "content": "<p>Now you have a new project</p>",
        "id": 207613937,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598001492
    },
    {
        "content": "<p>The issue is not making schemes</p>",
        "id": 207613967,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598001525
    },
    {
        "content": "<p>The issue is getting schemes into mathlib</p>",
        "id": 207613972,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598001532
    },
    {
        "content": "<p>So really the work defining the presheaf of rings should be done in a clone of mathlib, not in a new repo</p>",
        "id": 207614022,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598001583
    },
    {
        "content": "<p>Once we have the presheaf of rings on Spec R it will be easy to make schemes</p>",
        "id": 207614100,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598001634
    },
    {
        "content": "<p>I have a little time, maybe I can just start this now</p>",
        "id": 207614128,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598001659
    },
    {
        "content": "<p>After all, I'm only working on three other projects</p>",
        "id": 207614142,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598001669
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> I think that if I could shadow your progress, then I would be asking many fewer silly questions here on the chat: is there a way for me to \"peek\" what it is that you are doing?</p>",
        "id": 207614294,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1598001834
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> you could do a screen share with someone</p>",
        "id": 207614485,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598002013
    },
    {
        "content": "<p>Kenny regularly streams what he is doing</p>",
        "id": 207614492,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598002020
    },
    {
        "content": "<p>someone is streaming at this very moment!</p>",
        "id": 207614587,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1598002094
    },
    {
        "content": "<p>ah, where are the streams?</p>",
        "id": 207614666,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1598002197
    },
    {
        "content": "<p>the same channel where we talked last time</p>",
        "id": 207614752,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1598002245
    },
    {
        "content": "<p>in discord, to be clear</p>",
        "id": 207614760,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1598002256
    },
    {
        "content": "<p>Ah, ok!  i was looking here...</p>",
        "id": 207614776,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1598002273
    },
    {
        "content": "<p>it seems they have stopped streaming now</p>",
        "id": 207614788,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1598002286
    },
    {
        "content": "<p>hmm... thinking about it, I fear we want <code>prop_limits</code> to land before we define sites...</p>",
        "id": 207614815,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598002319
    },
    {
        "content": "<p>I'll stream in discord</p>",
        "id": 207614816,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598002319
    },
    {
        "content": "<p>limits of propositions?</p>",
        "id": 207614871,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1598002344
    },
    {
        "content": "<p>limits <em>as</em> propositions.</p>",
        "id": 207614897,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1598002373
    },
    {
        "content": "<p>(The <code>has_limit</code> typeclass should be in <code>Prop</code>, rather than carrying non-subsingleton data.)</p>",
        "id": 207615270,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598002685
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> and whoever else is interested (because I know that at least one other person was talking about schemes -- I forget who :-(  ) -- if people want to do scheme stuff right now then probably the way to proceed is to define the sheaf on Spec(R) following Hartshorne (i.e. building it explicitly as functions from U to disjoint union of R_P for P in U) rather than following the stacks project. I have started a branch of mathlib called <code>spec-of-a-ring</code> which starts on this. I have filled in a lot of the data, but I have sorried all the theorems.</p>",
        "id": 207624500,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598010034
    },
    {
        "content": "<p>You can see the file online <a href=\"https://github.com/leanprover-community/mathlib/blob/spec-of-a-ring/src/algebraic_geometry/structure_sheaf.lean\">here</a> . To get it on your computer, just go into your local copy of mathlib in a terminal and type</p>\n<div class=\"codehilite\"><pre><span></span><code>git pull\ngit checkout spec-of-a-ring\n</code></pre></div>\n\n\n<p>and you should be able to now find the file in the algebraic_geometry directory. Feel free to start filling in the <code>sorry</code>s! You can do them all in begin/end blocks; other people can tidy up later.</p>",
        "id": 207624696,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598010235
    },
    {
        "content": "<p>If you ignore <code>is_locally_allowable</code> for a second, then we've already got the presheaf of dependent functions (sections of the bundle with fibres <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>R</mi><mi>p</mi></msub></mrow><annotation encoding=\"application/x-tex\">R_p</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.969438em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139200000000003em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">p</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span></span></span></span>), and indeed the fact that this forms a sheaf.</p>\n<p>We don't have the general machinery for this yet, but I think the right thing to do is next notice that <code>is_locally_allowable</code> is a local condition, and the sub-presheaf consisting of dependent functions satisfying some local condition is always a sub-sheaf.</p>",
        "id": 207625581,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598011046
    },
    {
        "content": "<p>i.e. I think we should define a suitable <code>T : prime_spectrum R -&gt; Type</code>, and obtain a presheaf of all dependent functions as <code>presheaf.to_Types T</code> and the sheaf condition as <code>sheaf_condition.to_Types T</code>.  Then do some abstract nonsense about \"local conditions\".</p>",
        "id": 207625860,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598011246
    },
    {
        "content": "<p>Kenny was really focused on the idea that the sheaf of dependent functions was the important idea -- the big sheaf</p>",
        "id": 207626786,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598011993
    },
    {
        "content": "<p>Something like:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">sheaves</span><span class=\"bp\">.</span><span class=\"n\">sheaf_of_functions</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">Top</span><span class=\"o\">}</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">topological_space</span>\n\n<span class=\"n\">def</span> <span class=\"n\">condition_restricts</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">opens</span> <span class=\"n\">X</span><span class=\"o\">},</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">T</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">opens</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">U</span> <span class=\"err\">⟶</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">T</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">f</span><span class=\"o\">),</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n\n<span class=\"n\">def</span> <span class=\"n\">condition_is_local</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">opens</span> <span class=\"n\">X</span><span class=\"o\">},</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">T</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">opens</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">T</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">opens</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"err\">⟶</span> <span class=\"n\">U</span><span class=\"o\">),</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">U</span><span class=\"o\">))),</span> <span class=\"n\">P</span> <span class=\"n\">f</span>\n</code></pre></div>",
        "id": 207627176,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598012303
    },
    {
        "content": "<p>hopefully if <code>P</code> satisfies both <code>condition_restricts</code> and <code>condition_is_local</code> then the dependent functions satisfying the predicate P form a presheaf and a sheaf, respectively.</p>",
        "id": 207627260,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598012383
    },
    {
        "content": "<p>Then it's just a matter of verifying these for <code>is_locally_allowable</code>.</p>",
        "id": 207627322,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598012409
    },
    {
        "content": "<p>(but I have very low confidence in any of this... please shoot it down!)</p>",
        "id": 207627367,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598012449
    },
    {
        "content": "<p>So the presheaf part is easy:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">sheaves</span><span class=\"bp\">.</span><span class=\"n\">sheaf_of_functions</span>\n\n<span class=\"kn\">universe</span> <span class=\"n\">v</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">Top</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}}</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">topological_space</span>\n<span class=\"kn\">open</span> <span class=\"n\">opposite</span>\n\n<span class=\"n\">def</span> <span class=\"n\">condition_restricts</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">opens</span> <span class=\"n\">X</span><span class=\"o\">},</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">T</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">U</span> <span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">opens</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">U</span> <span class=\"err\">⟶</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">T</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">f</span><span class=\"o\">),</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n\n<span class=\"n\">def</span> <span class=\"n\">condition_is_local</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">opens</span> <span class=\"n\">X</span><span class=\"o\">},</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">T</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">opens</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">T</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">opens</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"err\">⟶</span> <span class=\"n\">U</span><span class=\"o\">),</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">U</span><span class=\"o\">))),</span> <span class=\"n\">P</span> <span class=\"n\">f</span>\n\n<span class=\"n\">def</span> <span class=\"n\">presheaf_of_dependent_functions_satisfying_condition</span>\n  <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">opens</span> <span class=\"n\">X</span><span class=\"o\">},</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">T</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">condition_restricts</span> <span class=\"bp\">@</span><span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">opens</span> <span class=\"n\">X</span><span class=\"o\">)</span><span class=\"err\">ᵒᵖ</span> <span class=\"err\">⥤</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">unop</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">T</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">P</span> <span class=\"n\">f</span> <span class=\"o\">},</span>\n  <span class=\"n\">map</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">U</span> <span class=\"n\">V</span> <span class=\"n\">i</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"bp\">⟨λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"n\">unop</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"n\">w</span> <span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"n\">unop</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">⟩</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 207627938,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598012863
    },
    {
        "content": "<p>I think I'm going to go to bed before attempting the sheaf condition (wimping out!), but it hopefully is just an abstraction of the existing <a href=\"https://leanprover-community.github.io/mathlib_docs/find/Top.sheaf_condition.to_Top/src\">src#Top.sheaf_condition.to_Top</a> that Johan and I wrote.</p>",
        "id": 207628148,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598012993
    },
    {
        "content": "<p>I might have to go to the beach but hopefully I can get to this later when sanity has been restored</p>",
        "id": 207628747,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598013359
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\">- We enforce here that the open cover is actually contained in the given set. -/</span>\n<span class=\"n\">def</span> <span class=\"n\">down_closed_open_cover</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">opens</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">opens</span> <span class=\"n\">X</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">V</span> <span class=\"err\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">V</span> <span class=\"bp\">≤</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">V</span> <span class=\"err\">∈</span> <span class=\"n\">S</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n\n<span class=\"kn\">variable</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">opens</span> <span class=\"n\">X</span><span class=\"o\">)</span><span class=\"err\">ᵒᵖ</span> <span class=\"err\">⥤</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">restrict_presheaf</span> <span class=\"o\">{</span><span class=\"n\">U</span> <span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">opens</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">≤</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"o\">(</span><span class=\"n\">opposite</span><span class=\"bp\">.</span><span class=\"n\">op</span> <span class=\"n\">U</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">P</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"o\">(</span><span class=\"n\">opposite</span><span class=\"bp\">.</span><span class=\"n\">op</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">P</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">hom_of_le</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">op</span> <span class=\"n\">s</span>\n\n<span class=\"n\">def</span> <span class=\"n\">locality</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">opens</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">down_closed_open_cover</span> <span class=\"n\">U</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"o\">(</span><span class=\"n\">opposite</span><span class=\"bp\">.</span><span class=\"n\">op</span> <span class=\"n\">U</span><span class=\"o\">)),</span>\n    <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">Ui</span> <span class=\"err\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">restrict_presheaf</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">Ui</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">restrict_presheaf</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">Ui</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">t</span>\n\n<span class=\"n\">def</span> <span class=\"n\">gluing</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">opens</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">down_closed_open_cover</span> <span class=\"n\">U</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">Ui</span> <span class=\"err\">∈</span> <span class=\"n\">S</span><span class=\"o\">),</span> <span class=\"n\">P</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"o\">(</span><span class=\"n\">opposite</span><span class=\"bp\">.</span><span class=\"n\">op</span> <span class=\"n\">Ui</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">Ui</span> <span class=\"n\">Uj</span> <span class=\"err\">∈</span> <span class=\"n\">S</span><span class=\"o\">),</span> <span class=\"n\">restrict_presheaf</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">lattice</span><span class=\"bp\">.</span><span class=\"n\">inf_le_left</span> <span class=\"bp\">_</span> <span class=\"n\">Uj</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s&#39;</span> <span class=\"bp\">_</span> <span class=\"err\">‹</span><span class=\"bp\">_</span><span class=\"err\">›</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">restrict_presheaf</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">lattice</span><span class=\"bp\">.</span><span class=\"n\">inf_le_right</span> <span class=\"n\">Ui</span> <span class=\"n\">Uj</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s&#39;</span> <span class=\"bp\">_</span> <span class=\"err\">‹</span><span class=\"bp\">_</span><span class=\"err\">›</span><span class=\"o\">)),</span>\n    <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"o\">(</span><span class=\"n\">opposite</span><span class=\"bp\">.</span><span class=\"n\">op</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"bp\">//</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">Ui</span> <span class=\"err\">∈</span> <span class=\"n\">S</span><span class=\"o\">),</span> <span class=\"n\">restrict_presheaf</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">_</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">s&#39;</span> <span class=\"bp\">_</span> <span class=\"n\">H</span><span class=\"o\">}</span>\n</code></pre></div>\n\n\n<p>I'd put together this, which might be useful - a sheaf is then just a presheaf with locality and gluing axioms</p>",
        "id": 207630587,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1598014654
    },
    {
        "content": "<p>(I only made this to make sure my abstract sheaf axioms were the same thing as the ones on wikipedia, I'm not claiming these are the best for mathlib)</p>",
        "id": 207630653,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1598014690
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/status.20of.20schemes/near/207611505\">said</a>:</p>\n<blockquote>\n<p><code>algebraic_geometry/prime_spectrum</code></p>\n</blockquote>\n<p>Dear Johan,</p>\n<p>I am trying to use your <code>prime_spectrum</code> file, and I believe that the following should be true, but I am having lots of trouble proving it: am I misunderstanding something?  Is this already proved in your file?  I tried searching for something along these lines, but was unable to find anything</p>\n<p>Thank you very much!</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">polynomial</span><span class=\"bp\">.</span><span class=\"n\">induction</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebraic_geometry</span><span class=\"bp\">.</span><span class=\"n\">prime_spectrum</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">prime_spectrum</span>\n\n<span class=\"n\">universes</span> <span class=\"n\">u</span>\n\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">prime_spectrum</span> <span class=\"o\">(</span><span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">))</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">def</span> <span class=\"n\">Cstar</span> <span class=\"o\">:=</span> <span class=\"n\">prime_spectrum</span><span class=\"bp\">.</span><span class=\"n\">comap</span> <span class=\"o\">(</span><span class=\"n\">polynomial</span><span class=\"bp\">.</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→+*</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">incl</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">prime_spectrum</span> <span class=\"o\">(</span><span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">))</span>\n <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">p</span> <span class=\"err\">∈</span> <span class=\"o\">(</span><span class=\"n\">Cstar</span> <span class=\"n\">I</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">,</span> <span class=\"n\">polynomial</span><span class=\"bp\">.</span><span class=\"n\">C</span> <span class=\"n\">p</span> <span class=\"err\">∈</span> <span class=\"n\">I</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n\n    <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 207645029,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1598022333
    },
    {
        "content": "<p>(Although I do not need this at the moment, basically what I am interested in is that if the ring map A --&gt; B is an inclusion, then, in terms of sets rather than types, the induced map on spectra is simply the intersection of an ideal in the larger ring B with the smaller ring A.)</p>",
        "id": 207645631,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1598022633
    },
    {
        "content": "<p>Tell me try</p>",
        "id": 207645704,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598022692
    },
    {
        "content": "<p>sure!  and no rush: I will have to leave soon, and I am not sure that I will have time to seriously look at this over the weekend.  I will be definitely looking at it on Monday, though!</p>",
        "id": 207645798,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1598022744
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">incl</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">prime_spectrum</span> <span class=\"o\">(</span><span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">))</span>\n <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">p</span> <span class=\"err\">∈</span> <span class=\"o\">(</span><span class=\"n\">Cstar</span> <span class=\"n\">I</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">as_ideal</span> <span class=\"o\">,</span> <span class=\"n\">polynomial</span><span class=\"bp\">.</span><span class=\"n\">C</span> <span class=\"n\">p</span> <span class=\"err\">∈</span> <span class=\"n\">I</span><span class=\"bp\">.</span><span class=\"n\">as_ideal</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">intros</span> <span class=\"n\">p</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n    <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">Cstar</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 207645854,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598022773
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">incl</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">prime_spectrum</span> <span class=\"o\">(</span><span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">))</span>\n <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">p</span> <span class=\"err\">∈</span> <span class=\"o\">(</span><span class=\"n\">Cstar</span> <span class=\"n\">I</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">as_ideal</span> <span class=\"o\">,</span> <span class=\"n\">polynomial</span><span class=\"bp\">.</span><span class=\"n\">C</span> <span class=\"n\">p</span> <span class=\"err\">∈</span> <span class=\"n\">I</span><span class=\"bp\">.</span><span class=\"n\">as_ideal</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">intros</span> <span class=\"n\">p</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 207645898,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598022796
    },
    {
        "content": "<p>really?!  this quick?</p>\n<p>Let me use it!  Ahaah</p>",
        "id": 207645901,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1598022796
    },
    {
        "content": "<p>Thank you very much!</p>",
        "id": 207646098,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1598022903
    },
    {
        "content": "<p>In other words, <code>hp</code> is by definition the thing that you wanted to prove (-;</p>",
        "id": 207646119,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598022915
    },
    {
        "content": "<p>Yes, I can see that, although it was not clear to me that this was the case...  Lean is very good at understanding its own code!  And so are you!</p>",
        "id": 207646918,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1598023246
    },
    {
        "content": "<p>Thank you very much!</p>",
        "id": 207646929,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1598023250
    },
    {
        "content": "<p>I need to go now, but I will continue on Monday!</p>",
        "id": 207647016,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1598023298
    },
    {
        "content": "<p>Ciao!</p>",
        "id": 207647235,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598023412
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>, I pushed the \"local predicate\" construction as <a href=\"https://github.com/leanprover-community/mathlib/issues/3906\">#3906</a>.</p>",
        "id": 207705591,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598067840
    },
    {
        "content": "<p>Now I think all that is required to build the sheaf on <code>prime_spectrum R</code> is to package <code>is_locally_allowable</code> as a <code>local_predicate</code>. Hopefully that is easy from the definition.</p>",
        "id": 207705642,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598067909
    },
    {
        "content": "<p>(Putting the ring structure on is orthogonal --- because of <a href=\"https://github.com/leanprover-community/mathlib/issues/3609\">#3609</a>, we can ignore the ring structure while checking the sheaf condition.)</p>",
        "id": 207705688,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598067979
    },
    {
        "content": "<p>Nice!</p>",
        "id": 207705807,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598068242
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113488-general/topic/status.20of.20schemes/near/207705642\">said</a>:</p>\n<blockquote>\n<p>Now I think all that is required to build the sheaf on <code>prime_spectrum R</code> is to package <code>is_locally_allowable</code> as a <code>local_predicate</code>. Hopefully that is easy from the definition.</p>\n</blockquote>\n<p>We also need a presheaf to start with, right?</p>",
        "id": 207706100,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598068826
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113488-general/topic/status.20of.20schemes/near/207705688\">said</a>:</p>\n<blockquote>\n<p>(Putting the ring structure on is orthogonal --- because of <a href=\"https://github.com/leanprover-community/mathlib/issues/3609\">#3609</a>, we can ignore the ring structure while checking the sheaf condition.)</p>\n</blockquote>\n<p>Looks good! I left a review with some typos I found.</p>",
        "id": 207706378,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598069377
    },
    {
        "content": "<p>I was starting to look at <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>'s <code>spec-of-a-ring</code> branch, and getting worried because his definition of <a href=\"https://github.com/leanprover-community/mathlib/blob/spec-of-a-ring/src/algebraic_geometry/structure_sheaf.lean#L15\"><code>is_locally_allowable</code></a> isn't obviously local in the sense of <a href=\"https://github.com/leanprover-community/mathlib/issues/3906\">#3906</a>.</p>\n<p>However when I go look at Hartshorne (p.70) <a href=\"/user_uploads/3121/-Rhp_cRgfQr6HUlLitqe0vXB/File-Aug-22-15-28-25.jpeg\">File-Aug-22-15-28-25.jpeg</a> I get happier, because the definition there is obviously local in my sense, but also sadder, because it's not obvious to me that this is equivalent to the definition Kevin gave. If anyone wants to help me sort this out that would be great. :-)</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/-Rhp_cRgfQr6HUlLitqe0vXB/File-Aug-22-15-28-25.jpeg\" title=\"File-Aug-22-15-28-25.jpeg\"><img src=\"/user_uploads/3121/-Rhp_cRgfQr6HUlLitqe0vXB/File-Aug-22-15-28-25.jpeg\"></a></div>",
        "id": 207708825,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598074261
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> Sure! Let's try to figure this out.</p>",
        "id": 207708894,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598074388
    },
    {
        "content": "<p>Let me grab a copy of Kevin's branch</p>",
        "id": 207708898,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598074403
    },
    {
        "content": "<p>(I'm happy to do a screen share if that's the easiest way --- just let me know when you've had a look)</p>",
        "id": 207708944,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598074453
    },
    {
        "content": "<p>Ok, I have the branch open</p>",
        "id": 207709011,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598074618
    },
    {
        "content": "<p>I guess we'll have breakfast in 15 a 30 minutes, but we can try a quick screenshare</p>",
        "id": 207709016,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598074638
    },
    {
        "content": "<p>I did some more work after we finished, <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>, and it seems to work well.</p>",
        "id": 207711614,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598079818
    },
    {
        "content": "<p>I have the structure sheaf on Spec R (although not the ring structure).</p>",
        "id": 207711617,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598079834
    },
    {
        "content": "<p>That shouldn't be too hard, right?</p>",
        "id": 207711728,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598080018
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/3907\">#3907</a>, if anyone wants to look at it.</p>",
        "id": 207711742,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598080071
    },
    {
        "content": "<p>No, the ring structure is hopefully straightforward, but it is going to be a little messy because we need to check that the ring operations interact properly with <code>locally_quotient</code>.</p>",
        "id": 207711789,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598080124
    },
    {
        "content": "<p>Let's define schemes today (-;</p>",
        "id": 207711906,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598080324
    },
    {
        "content": "<p>Okay, so what comes next? Should we just do the ring structure?</p>",
        "id": 207712000,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598080543
    },
    {
        "content": "<p>Morning. If my definition is not the same as Hartshorne then I messed up because it was supposed to be</p>",
        "id": 207712002,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598080555
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>, notice your condition never talks about any smaller open sets inside <code>U</code>.</p>",
        "id": 207712045,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598080577
    },
    {
        "content": "<p>You've just asked for functions on <code>U</code> which are, on <code>U</code>, a quotient.</p>",
        "id": 207712055,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598080639
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> I left a minor review</p>",
        "id": 207712057,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598080652
    },
    {
        "content": "<p>Next steps:</p>\n<ol start=\"0\">\n<li>ring structure</li>\n<li>compute stalks</li>\n<li>define LRS</li>\n<li>show that comap is a hom of LRS</li>\n</ol>",
        "id": 207712099,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598080687
    },
    {
        "content": "<p>How does the computation of stalks go?</p>",
        "id": 207712123,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598080788
    },
    {
        "content": "<p>Clearly there is a map from the stalk to <code>stalks x</code></p>",
        "id": 207712172,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598080826
    },
    {
        "content": "<p>Show that it is bijective</p>",
        "id": 207712174,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598080834
    },
    {
        "content": "<p>We are definitely exceeding my level of studiousness when reading Hartshorne 20 years ago. :-)</p>",
        "id": 207712175,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598080834
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span>  Want to screenshare again?</p>",
        "id": 207712313,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598081141
    },
    {
        "content": "<p>Sure!</p>",
        "id": 207712356,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598081164
    },
    {
        "content": "<p>Same room?</p>",
        "id": 207712360,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598081179
    },
    {
        "content": "<p>Finished the ring structure, but not yet that the restriction maps are ring_homs</p>",
        "id": 207715747,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598087810
    },
    {
        "content": "<p>Okay, that was trivial, all worked by <code>rfl</code>.</p>",
        "id": 207715863,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598088041
    },
    {
        "content": "<p>We have the structure sheaf on Spec R, as a sheaf of commutative rings!</p>",
        "id": 207715866,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598088055
    },
    {
        "content": "<p>Awesome!</p>",
        "id": 207716161,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598088608
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> did you push?</p>",
        "id": 207716242,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598088775
    },
    {
        "content": "<p>up next is the iso to stalks?</p>",
        "id": 207716246,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598088785
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> I pushed a tiny tweak</p>",
        "id": 207716459,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598089130
    },
    {
        "content": "<p>(Most of what I did was duplicate)</p>",
        "id": 207716462,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598089136
    },
    {
        "content": "<p>I am spending the day travelling so might not be much help. Remember that the local isomorphism in the definition of schemes is only an isomorphism of spaces equipped with a presheaf of rings and because affine schemes are locally ringed spaces you only need to say that a scheme is a ringed space which is locally affine</p>",
        "id": 207716740,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598089665
    },
    {
        "content": "<p>Can we pull back a presheaf of rings on a space to an open subspace?</p>",
        "id": 207716787,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598089706
    },
    {
        "content": "<p>No, we don't have pullback to an open yet.</p>",
        "id": 207717373,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598090878
    },
    {
        "content": "<p>I'm thinking of a reform. I want a definition (i.e. implementation) that is best suited for Lean. Here is what I have come up with:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebraic_geometry</span><span class=\"bp\">.</span><span class=\"n\">prime_spectrum</span>\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">localization</span>\n\n<span class=\"n\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">theory</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- How far can I go avoiding partial functions and sigma types?</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">- set (Σ x, S x) = Π x, set (S x)  -/</span>\n<span class=\"kn\">structure</span> <span class=\"n\">stalk_topology</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">is_open</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"c1\">-- TODO : univ, inter, sUnion</span>\n\n<span class=\"c1\">-- TODO : add the hypothesis of them forming a basis</span>\n<span class=\"n\">def</span> <span class=\"n\">stalk_topology</span><span class=\"bp\">.</span><span class=\"n\">generate_from_basis</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"n\">x</span><span class=\"o\">)))</span> <span class=\"o\">:</span> <span class=\"n\">stalk_topology</span> <span class=\"n\">X</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">is_open</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">S</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">s</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n    <span class=\"bp\">∃</span> <span class=\"n\">b</span> <span class=\"err\">∈</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">exact</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">b</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"n\">x</span> <span class=\"err\">⊆</span> <span class=\"n\">s</span> <span class=\"n\">x</span> <span class=\"o\">}</span>\n\n\n<span class=\"n\">def</span> <span class=\"n\">espace_etale</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">prime_spectrum</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"o\">:=</span>\n<span class=\"n\">localization</span><span class=\"bp\">.</span><span class=\"n\">at_prime</span> <span class=\"n\">P</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n\n<span class=\"c1\">-- I claim that this contains exactly the same information.</span>\n<span class=\"n\">def</span> <span class=\"n\">structure_sheaf</span> <span class=\"o\">:</span> <span class=\"n\">stalk_topology</span> <span class=\"o\">(</span><span class=\"n\">prime_spectrum</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">espace_etale</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">stalk_topology</span><span class=\"bp\">.</span><span class=\"n\">generate_from_basis</span>\n  <span class=\"o\">{</span> <span class=\"n\">s</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">prime_spectrum</span> <span class=\"n\">R</span><span class=\"o\">,</span>\n      <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"err\">∈</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"k\">then</span> <span class=\"err\">∅</span> <span class=\"k\">else</span> <span class=\"o\">{</span><span class=\"n\">localization</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">a</span> <span class=\"bp\">⟨</span><span class=\"n\">f</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n        <span class=\"k\">show</span> <span class=\"n\">f</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"err\">∈</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"bp\">.</span><span class=\"n\">prime_compl</span><span class=\"bp\">.</span><span class=\"n\">carrier</span><span class=\"o\">,</span>\n        <span class=\"k\">from</span> <span class=\"n\">mt</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"n\">mem_of_pow_mem</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">H</span><span class=\"bp\">⟩</span><span class=\"o\">})</span>\n    <span class=\"bp\">=</span> <span class=\"n\">s</span> <span class=\"n\">x</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 207717635,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1598091315
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/status.20of.20schemes/near/207612757\">said</a>:</p>\n<blockquote>\n<p>My understanding is that <span class=\"user-mention silent\" data-user-id=\"246273\">Bhavik Mehta</span> has a bunch of this stuff in the topos repo but he also has a thesis to write</p>\n</blockquote>\n<p>Yeah, I'm in the process of slowly PR-ing the preliminary stuff though</p>",
        "id": 207722446,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1598099689
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>, I'm done for the day I think, but I just pushed <code>LRS</code>, which includes a definition of <code>Scheme</code>. There are no sorries in that file, but there are sorries elsewhere!</p>",
        "id": 207723842,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598101686
    },
    {
        "content": "<p>At least to get to the definition, all we need now is restricting a <code>PresheafedSpace</code> / <code>SheafedSpace</code> / <code>LocallyRingedSpace</code> to an open subset.</p>",
        "id": 207723848,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598101725
    },
    {
        "content": "<p>Those restrictions are stubbed out in their respective files, but the actual content is not there.</p>",
        "id": 207723853,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598101741
    },
    {
        "content": "<p>Ok, thanks for all you've done!</p>",
        "id": 207724017,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598102025
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> what do you think of my idea?</p>",
        "id": 207724215,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1598102321
    },
    {
        "content": "<p>My intuition <span aria-label=\"stuck out tongue wink\" class=\"emoji emoji-1f61c\" role=\"img\" title=\"stuck out tongue wink\">:stuck_out_tongue_wink:</span> likes the categorical approach</p>",
        "id": 207724451,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598102665
    },
    {
        "content": "<p>But maybe Lean doesn't...</p>",
        "id": 207724455,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598102676
    },
    {
        "content": "<p>I'm trying to find it out</p>",
        "id": 207724458,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598102681
    },
    {
        "content": "<p>I guess your idea would also work, but then we shift the problem to next year, when we want to discuss etale sheaves.</p>",
        "id": 207724480,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598102738
    },
    {
        "content": "<p>I'm not saying this is the right approach, but the etale topos does have enough points, so the espace etale approach \"could\" work in the etale topology as well.</p>",
        "id": 207725286,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1598103970
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> when the dust has settled it will be interesting to see which approach can glue schemes together. Making projective 1 space by glueing two affine 1 spaces will be a key exercise</p>",
        "id": 207726848,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598106562
    },
    {
        "content": "<p>So I think that at least one of the remaining sorries on the way to the definition of <code>Scheme</code> deserves to wait until we get <code>prop_limits</code> right. When definining <code>LocallyRingedSpace.restrict</code>, we need to check that a stalk of the restriction to some <code>U</code> is the stalk of the original LRS. The right way to do this is to show that neighbourhoods inside <code>U</code> are cofinal in all neighbourhoods.</p>\n<p>But I don't really want to define <code>cofinal</code> until I know how we're fixing <code>has_limit</code> and friends.</p>",
        "id": 207744941,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598135620
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span>, naive question -- is the definition <code>local_predicate</code>in <a href=\"https://github.com/leanprover-community/mathlib/issues/3906\">#3906</a> equivalent to the 1st + 3rd axioms in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/structure_groupoid.local_invariant_prop\">docs#structure_groupoid.local_invariant_prop</a>?</p>",
        "id": 207745045,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1598135812
    },
    {
        "content": "<p>I can't quite understand what <code>local_invariant_prop</code> is saying, but I don't think so. For one, in <code>local_predicate</code> there is only a single topological space anywhere in the picture, but <code>local_invariant_prop</code> has two.</p>",
        "id": 207745185,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598136056
    },
    {
        "content": "<p>Certainly <code>local_predicate</code> is more general -- I guess I'm asking if <code>local_invariant_prop</code> could be rewritten to extend it.</p>",
        "id": 207745242,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1598136157
    },
    {
        "content": "<p>Easier question, perhaps -- is the first axiom of <code>local_invariant_prop</code> the same as <a href=\"https://github.com/leanprover-community/mathlib/issues/3906\">#3906</a> 's <code>prelocal_predicate</code>?</p>",
        "id": 207745297,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1598136246
    },
    {
        "content": "<p>No, I still don't think so. <code>local_invariant_prop.local</code> seems much more specific. It says that it suffices to check the property on any open neighbourhood of the point <code>x</code>.</p>",
        "id": 207745305,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598136288
    },
    {
        "content": "<p><code>prelocal_predicate</code> only says that it's necessary that the property also hold on a smaller nbhd, if it holds on a big nbhd.</p>",
        "id": 207745321,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598136327
    },
    {
        "content": "<p>Ah -- so in fact, it is more akin to <code>local_predicate</code> than <code>prelocal_predicate</code>?</p>",
        "id": 207745326,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1598136353
    },
    {
        "content": "<p>well, but <code>local_predicate</code> still doesn't care about any particular point</p>",
        "id": 207745373,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598136381
    },
    {
        "content": "<p>it says that if at every point in the <code>U</code> of definition you can find a nbhd <code>V</code> where the property holds, the property holds for the function on all of <code>U</code>.</p>",
        "id": 207745383,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598136421
    },
    {
        "content": "<p>so still I think there's an incompatible order of quantifiers difference between the two</p>",
        "id": 207745393,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598136454
    },
    {
        "content": "<p>(I still haven't got my head around a canonical example of <code>local_invariant_prop</code>, however, so I may just be wrong.)</p>",
        "id": 207745395,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598136479
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113488-general/topic/status.20of.20schemes/near/207745395\">said</a>:</p>\n<blockquote>\n<p>(I still haven't got my head around a canonical example of <code>local_invariant_prop</code>, however, so I may just be wrong.)</p>\n</blockquote>\n<p>(<code>local_invariant_prop</code> is for classes of functions between manifolds which are (1) characterized locally and (2) are basically expressed in terms of the model space, for example smoothness)</p>",
        "id": 207745442,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1598136559
    },
    {
        "content": "<p>Regardless of the logical relation between them, a big mismatch between them is going to be that <code>local_invariant_prop</code> uses total functions, while <code>local_predicate</code> is all in terms of functions defined only on some <code>U : opens X</code>. (Possibly this is a bad idea, but it seems to work.)</p>",
        "id": 207745503,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598136664
    },
    {
        "content": "<p>I can have a look later to see if I can reformulate <code>local_predicate</code> more like this... The first step would be to change the predicate to take a third argument, a particular point. This is making an assumption about the form the predicates take, but I think in all examples this holds.</p>",
        "id": 207745558,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598136810
    },
    {
        "content": "<p>But I'm not certain this is a good idea --- the current design is meant to be \"exactly what you need to check so that a subset of dependent functions forms a presheaf / sheaf\".</p>",
        "id": 207745601,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598136851
    },
    {
        "content": "<p>Certainly I think if it is possible to provide some glue going from <code>local_invariant_prop</code> to <code>local_predicate</code> that would be great.</p>",
        "id": 207745609,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598136911
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113488-general/topic/status.20of.20schemes/near/207745609\">said</a>:</p>\n<blockquote>\n<p>Certainly I think if it is possible to provide some glue going from <code>local_invariant_prop</code> to <code>local_predicate</code> that would be great.</p>\n</blockquote>\n<p>Yep, that's exactly what I would hope for, I don't think it matters if the definitional organizations differ.</p>",
        "id": 207745621,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1598136949
    },
    {
        "content": "<p>We do want to be able to effortlessly say \"the rings of smooth functions on open sets form a sheaf, because smoothness is a local property\"</p>",
        "id": 207745623,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598136951
    },
    {
        "content": "<p>(not, in case Patrick is watching, that I have any desire to infect differential geometry with sheaves --- just for the sake of the exercise :-)</p>",
        "id": 207745672,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598137026
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> could you point me to the instance of <code>local_invariant_prop</code> for C^\\infty smoothness? I can try to add this as an example.</p>",
        "id": 207746733,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598139016
    },
    {
        "content": "<p>I would be very interested to see this!  <a href=\"https://leanprover-community.github.io/mathlib_docs/find/times_cont_diff_within_at_local_invariant_prop\">docs#times_cont_diff_within_at_local_invariant_prop</a></p>",
        "id": 207746746,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1598139089
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> sorry if I missed this in the discussion above and/or the code... do you have a way of restricting a <code>(pre)local_predicate</code> to an open set?</p>",
        "id": 207747353,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1598140356
    },
    {
        "content": "<p>That's the <a href=\"https://github.com/leanprover-community/mathlib/pull/3906/files#diff-48a768093d7f785d9d94cce5a6b93a0eR51\"><code>res</code></a> field.</p>",
        "id": 207747361,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598140410
    },
    {
        "content": "<p>I mean taking, say, a <code>prelocal_predicate T</code> where T is a dependent function on X, and and open set U in X, and obtaining a <code>prelocal_predicate T'</code> where T' is the restriction of T to U.</p>",
        "id": 207747464,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1598140596
    },
    {
        "content": "<p>I'm thinking about how to make the sheafification with this approach</p>",
        "id": 207747469,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1598140633
    },
    {
        "content": "<p>No, I don't have that.</p>",
        "id": 207747474,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598140661
    },
    {
        "content": "<p>I.e. the left adjoint of the forgetful functor from <code>local_predicate</code> to <code>prelocal_predicate</code></p>",
        "id": 207747477,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1598140664
    },
    {
        "content": "<p>Do you mean define the sheafification as the subsheaf of dependent functions into the stalks, given by the <code>local_predicate</code> of being locally induced by something from the presheaf? (i.e. Proposition-Definition II.1.2 of Hartshorne)</p>",
        "id": 207747633,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598140883
    },
    {
        "content": "<p>Exactly</p>",
        "id": 207747639,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1598140903
    },
    {
        "content": "<p>(I assume, I don't have Hartshorne in front of me)</p>",
        "id": 207747663,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1598140922
    },
    {
        "content": "<p>But I don't see how that relates to restricting?</p>",
        "id": 207747679,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598140924
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/RzBqZBDKh5gOgI8lhKxjyuRR/File-Aug-23-10-02-33.jpeg\">Proposition-Definition II.1.2 of Hartshorne</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/RzBqZBDKh5gOgI8lhKxjyuRR/File-Aug-23-10-02-33.jpeg\" title=\"Proposition-Definition II.1.2 of Hartshorne\"><img src=\"/user_uploads/3121/RzBqZBDKh5gOgI8lhKxjyuRR/File-Aug-23-10-02-33.jpeg\"></a></div>",
        "id": 207747695,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598141020
    },
    {
        "content": "<p>I'd be happy to give this a go, it does sounds like a good test of <code>local_predicate</code>. Let me know if you're already doing it!</p>",
        "id": 207747930,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598141400
    },
    {
        "content": "<p>You're right this should be easy to write down. I was thinking of using covers of U</p>",
        "id": 207747939,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1598141402
    },
    {
        "content": "<p>I was planning on trying it out, but I won't be able to do much until a few hours from now</p>",
        "id": 207748047,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1598141588
    },
    {
        "content": "<p>great, okay!</p>",
        "id": 207748049,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598141611
    },
    {
        "content": "<p>I pushed a start on this to <code>sheafification</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">sheaves</span><span class=\"bp\">.</span><span class=\"n\">local_predicate</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">sheaves</span><span class=\"bp\">.</span><span class=\"n\">stalks</span>\n\n<span class=\"n\">universes</span> <span class=\"n\">v</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">theory</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Top</span>\n<span class=\"kn\">open</span> <span class=\"n\">topological_space</span>\n<span class=\"kn\">open</span> <span class=\"n\">opposite</span>\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">limits</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">Top</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}}</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">presheaf</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">sheafification</span>\n\n<span class=\"n\">def</span> <span class=\"n\">stalks</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">stalk</span> <span class=\"n\">x</span>\n\n<span class=\"c1\">-- TODO it seems all `local_predicate`s have `pred` starting with:</span>\n<span class=\"c1\">-- `λ U f, ∀ x : U, ∃ (V : opens X) (m : x.1 ∈ V) (i : V ⟶ U) ...`</span>\n<span class=\"c1\">-- Make a definition of this shape, and make it easier to prove `res` and `locality`?</span>\n\n<span class=\"n\">def</span> <span class=\"n\">predicate</span> <span class=\"o\">:</span> <span class=\"n\">local_predicate</span> <span class=\"o\">(</span><span class=\"n\">stalks</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">pred</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">U</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">opens</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"err\">∈</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"err\">⟶</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">V</span><span class=\"o\">)),</span>\n    <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">colimit</span><span class=\"bp\">.</span><span class=\"n\">ι</span> <span class=\"o\">((</span><span class=\"n\">open_nhds</span><span class=\"bp\">.</span><span class=\"n\">inclusion</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">op</span> <span class=\"err\">⋙</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"bp\">⟨</span><span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">m</span><span class=\"bp\">⟩</span><span class=\"o\">)</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"c1\">-- TODO define `germ`!</span>\n  <span class=\"n\">res</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">locality</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">sheafification</span>\n\n<span class=\"n\">def</span> <span class=\"n\">sheafification</span> <span class=\"o\">:</span> <span class=\"n\">sheaf</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">X</span> <span class=\"o\">:=</span>\n<span class=\"n\">subsheaf_to_Types</span> <span class=\"o\">(</span><span class=\"n\">sheafification</span><span class=\"bp\">.</span><span class=\"n\">predicate</span> <span class=\"n\">F</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- TODO check the stalks are correct</span>\n<span class=\"c1\">-- TODO functoriality</span>\n</code></pre></div>",
        "id": 207748586,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598142733
    },
    {
        "content": "<p>Nice! I was thinking even more low-level... something like this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">sheafify</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">prelocal_predicate</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">local_predicate</span> <span class=\"n\">T</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">pred</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">U</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">U</span><span class=\"o\">),</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">opens</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">mem</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"err\">∈</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"err\">⟶</span> <span class=\"n\">U</span><span class=\"o\">),</span>\n    <span class=\"n\">P</span><span class=\"bp\">.</span><span class=\"n\">pred</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">U</span><span class=\"o\">)),</span>\n  <span class=\"n\">res</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">locality</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 207748871,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1598143384
    },
    {
        "content": "<p>oh!</p>",
        "id": 207749392,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598144516
    },
    {
        "content": "<p>Neat!</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">sheafify</span> <span class=\"o\">{</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">prelocal_predicate</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">local_predicate</span> <span class=\"n\">T</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">pred</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">U</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">opens</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"err\">∈</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"err\">⟶</span> <span class=\"n\">U</span><span class=\"o\">),</span> <span class=\"n\">P</span><span class=\"bp\">.</span><span class=\"n\">pred</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">U</span><span class=\"o\">)),</span>\n  <span class=\"n\">res</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">V</span> <span class=\"n\">U</span> <span class=\"n\">i</span> <span class=\"n\">f</span> <span class=\"n\">w</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"k\">begin</span>\n    <span class=\"n\">specialize</span> <span class=\"n\">w</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">w</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span><span class=\"n\">V&#39;</span><span class=\"o\">,</span> <span class=\"n\">m&#39;</span><span class=\"o\">,</span> <span class=\"n\">i&#39;</span><span class=\"o\">,</span> <span class=\"n\">p</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"n\">V</span> <span class=\"err\">⊓</span> <span class=\"n\">V&#39;</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">m&#39;</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"n\">opens</span><span class=\"bp\">.</span><span class=\"n\">inf_le_left</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">convert</span> <span class=\"n\">P</span><span class=\"bp\">.</span><span class=\"n\">res</span> <span class=\"o\">(</span><span class=\"n\">opens</span><span class=\"bp\">.</span><span class=\"n\">inf_le_right</span> <span class=\"n\">V</span> <span class=\"n\">V&#39;</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n  <span class=\"kn\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">locality</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">U</span> <span class=\"n\">f</span> <span class=\"n\">w</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"k\">begin</span>\n    <span class=\"n\">specialize</span> <span class=\"n\">w</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">w</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span><span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">p</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n    <span class=\"n\">specialize</span> <span class=\"n\">p</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">m</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">p</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span><span class=\"n\">V&#39;</span><span class=\"o\">,</span> <span class=\"n\">m&#39;</span><span class=\"o\">,</span> <span class=\"n\">i&#39;</span><span class=\"o\">,</span> <span class=\"n\">p&#39;</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"n\">V&#39;</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"n\">m&#39;</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"n\">i&#39;</span> <span class=\"err\">≫</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">p&#39;</span><span class=\"o\">,</span>\n  <span class=\"kn\">end</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 207751621,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598149102
    },
    {
        "content": "<p>Golfed a little bit:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">sheafify</span> <span class=\"o\">{</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">prelocal_predicate</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">local_predicate</span> <span class=\"n\">T</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">pred</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">U</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">opens</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"err\">∈</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"err\">⟶</span> <span class=\"n\">U</span><span class=\"o\">),</span> <span class=\"n\">P</span><span class=\"bp\">.</span><span class=\"n\">pred</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">U</span><span class=\"o\">)),</span>\n  <span class=\"n\">res</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">V</span> <span class=\"n\">U</span> <span class=\"n\">i</span> <span class=\"n\">f</span> <span class=\"n\">w</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"k\">begin</span>\n    <span class=\"n\">specialize</span> <span class=\"n\">w</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">w</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span><span class=\"n\">V&#39;</span><span class=\"o\">,</span> <span class=\"n\">m&#39;</span><span class=\"o\">,</span> <span class=\"n\">i&#39;</span><span class=\"o\">,</span> <span class=\"n\">p</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"bp\">⟨</span><span class=\"n\">V</span> <span class=\"err\">⊓</span> <span class=\"n\">V&#39;</span><span class=\"o\">,</span><span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"n\">m&#39;</span><span class=\"bp\">⟩</span><span class=\"o\">,</span><span class=\"n\">opens</span><span class=\"bp\">.</span><span class=\"n\">inf_le_left</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span><span class=\"bp\">_⟩</span><span class=\"o\">,</span>\n    <span class=\"n\">convert</span> <span class=\"n\">P</span><span class=\"bp\">.</span><span class=\"n\">res</span> <span class=\"o\">(</span><span class=\"n\">opens</span><span class=\"bp\">.</span><span class=\"n\">inf_le_right</span> <span class=\"n\">V</span> <span class=\"n\">V&#39;</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n  <span class=\"kn\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">locality</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">U</span> <span class=\"n\">f</span> <span class=\"n\">w</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"k\">begin</span>\n    <span class=\"n\">specialize</span> <span class=\"n\">w</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">w</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span><span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">p</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n    <span class=\"n\">specialize</span> <span class=\"n\">p</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">m</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">p</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span><span class=\"n\">V&#39;</span><span class=\"o\">,</span> <span class=\"n\">m&#39;</span><span class=\"o\">,</span> <span class=\"n\">i&#39;</span><span class=\"o\">,</span> <span class=\"n\">p&#39;</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"bp\">⟨</span><span class=\"n\">V&#39;</span><span class=\"o\">,</span><span class=\"n\">m&#39;</span><span class=\"o\">,</span><span class=\"n\">i&#39;</span> <span class=\"err\">≫</span> <span class=\"n\">i</span><span class=\"o\">,</span><span class=\"n\">p&#39;</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"kn\">end</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 207752373,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1598150529
    },
    {
        "content": "<p>I don't know if this is worth doing, but there is a natural category structure on \"dependent functions\", and it's possible to build a category of local_predicates on top of that. Sheaves (of sets on a topological space) as a category should be essentially this. </p>\n<p>Here's a little sketch of the category of dependent functions:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">category</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span>\n\n<span class=\"kn\">variable</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">depfun</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"err\">Σ</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">},</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"n\">G</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">depfun</span>\n\n<span class=\"kn\">variable</span> <span class=\"o\">{</span><span class=\"n\">X</span><span class=\"o\">}</span>\n<span class=\"n\">def</span> <span class=\"n\">hom</span> <span class=\"o\">(</span><span class=\"n\">T1</span> <span class=\"n\">T2</span> <span class=\"o\">:</span> <span class=\"n\">depfun</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">},</span> <span class=\"n\">T1</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">T2</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">T1</span><span class=\"bp\">.</span><span class=\"n\">snd</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">T2</span><span class=\"bp\">.</span><span class=\"n\">snd</span> <span class=\"n\">x</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">hom</span>\n\n<span class=\"n\">def</span> <span class=\"n\">id</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">depfun</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">depfun</span><span class=\"bp\">.</span><span class=\"n\">hom</span> <span class=\"n\">T</span> <span class=\"n\">T</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">id</span><span class=\"o\">,</span>\n  <span class=\"n\">property</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">tauto</span> <span class=\"o\">}</span>\n\n<span class=\"n\">def</span> <span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">T1</span> <span class=\"n\">T2</span> <span class=\"n\">T3</span> <span class=\"o\">:</span> <span class=\"n\">depfun</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">hom</span> <span class=\"n\">T1</span> <span class=\"n\">T2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">hom</span> <span class=\"n\">T2</span> <span class=\"n\">T3</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">hom</span> <span class=\"n\">T1</span> <span class=\"n\">T3</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"err\">$</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"n\">property</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">hom</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">category</span> <span class=\"o\">(</span><span class=\"n\">depfun</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">hom</span> <span class=\"o\">:=</span> <span class=\"n\">depfun</span><span class=\"bp\">.</span><span class=\"n\">hom</span><span class=\"o\">,</span>\n  <span class=\"n\">id</span> <span class=\"o\">:=</span> <span class=\"n\">depfun</span><span class=\"bp\">.</span><span class=\"n\">hom</span><span class=\"bp\">.</span><span class=\"n\">id</span><span class=\"o\">,</span>\n  <span class=\"n\">comp</span> <span class=\"o\">:=</span> <span class=\"n\">depfun</span><span class=\"bp\">.</span><span class=\"n\">hom</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span> <span class=\"n\">depfun</span>\n</code></pre></div>",
        "id": 207753435,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1598152570
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span>, I've refactored the <code>spec</code> branch (<a href=\"https://github.com/leanprover-community/mathlib/issues/3907\">#3907</a>) to use <code>prelocal_predicate.sheafify</code>. It's nice!</p>",
        "id": 207755879,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598157179
    },
    {
        "content": "<p>Note that Bhavik already did sheafification in an arbitrary topos</p>",
        "id": 207755998,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598157450
    },
    {
        "content": "<p>Right but it's not in mathlib</p>",
        "id": 207759550,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598165227
    },
    {
        "content": "<p>Actually defining the sheafification is now delightfully easy --- just a couple of lines:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">is_germ</span> <span class=\"o\">:</span> <span class=\"n\">prelocal_predicate</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">stalk</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">pred</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">U</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">U</span><span class=\"o\">)),</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">germ</span> <span class=\"n\">x</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n  <span class=\"n\">res</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">V</span> <span class=\"n\">U</span> <span class=\"n\">i</span> <span class=\"n\">f</span> <span class=\"bp\">⟨</span><span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">p</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"n\">op</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">x</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">germ_res</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n\n<span class=\"n\">def</span> <span class=\"n\">is_locally_germ</span> <span class=\"o\">:</span> <span class=\"n\">local_predicate</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">stalk</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">is_germ</span> <span class=\"n\">F</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sheafify</span>\n\n<span class=\"n\">def</span> <span class=\"n\">sheafify</span> <span class=\"o\">:</span> <span class=\"n\">sheaf</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">X</span> <span class=\"o\">:=</span>\n<span class=\"n\">subsheaf_to_Types</span> <span class=\"o\">(</span><span class=\"n\">sheafify</span><span class=\"bp\">.</span><span class=\"n\">is_locally_germ</span> <span class=\"n\">F</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>I'm trying to prove that the stalks are the original stalks, and I can do the constructions, but checking well-definedness I'm in <code>classical.some</code> hell.</p>",
        "id": 207759603,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598165398
    },
    {
        "content": "<p>Yeah I'm in the process of putting it in mathlib though</p>",
        "id": 207768046,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1598181114
    },
    {
        "content": "<p>The sheafification I was playing with today is not that important. It was just a spin-off of what we've been doing on Spec R in the last few days.</p>",
        "id": 207768393,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598181684
    },
    {
        "content": "<p>I don't know if it would be worth investigating other constructions of sheafification though - for instance if there's a particular construction which gives nice defeq properties for geometers then it could be worthwhile to use that version as the definition, and since it should be isomorphic to my version (once the sheafify-forget adjunction is done for some other version) properties like being a geometric morphism of topoi would drop out: this is a question for the geometers really</p>",
        "id": 207769684,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1598184094
    },
    {
        "content": "<p>We should experiment!</p>",
        "id": 207772530,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598188455
    },
    {
        "content": "<p>Regardless what the definition is, we would need the theorem that the stalks of the sheafification agree with those of the presheaf, and an \"extensionality\" principle that a map of sheaves is an iso iff it is an iso on all stalks. This makes me think that the disjoint union of stalks definition has a good chance of being useful in practice.</p>",
        "id": 207773168,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1598189192
    },
    {
        "content": "<p>I'm just trying to catch up on all this stuff today</p>",
        "id": 207776285,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598193429
    },
    {
        "content": "<p>How far are we from sheaves of modules on a ringed space? From bundled locally ringed spaces?</p>",
        "id": 207787909,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598211355
    },
    {
        "content": "<p>Have we isolated some kind of concept of a \"concrete sheaf\" on a topological space, as being a subsheaf of the sections of a dependent pi type? And the theory of sheafification is nice and straightforward here. Is this what has happened?</p>",
        "id": 207788389,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598212149
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>, there is a branch <a href=\"https://github.com/leanprover-community/mathlib/tree/LRS\">branch#LRS</a> that Johan and I have been working on that defines a bundled <code>LocallyRingedSpace</code>, as well as a bundled <code>Scheme</code>.</p>",
        "id": 207796433,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598225239
    },
    {
        "content": "<p>It has two major sorries:</p>\n<ol>\n<li>checking that when you pull back a presheaf along an open embedding, you don't change the stalks</li>\n<li>checking that the stalks of <code>Spec R</code> are the localizations</li>\n</ol>",
        "id": 207796487,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598225291
    },
    {
        "content": "<p>For 1., the thorough way to do this would be to set up the theory of cofinal functors. (Because the inclusion of \"nbhds of x within U\" into \"nbhds of x\" is cofinal, so colimits are the same.)</p>",
        "id": 207796511,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598225346
    },
    {
        "content": "<p>We're pretty well set up to do this, because <span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span> made a nice API for connected categories. I thought about this a little, but struggled getting my head around doing the construction without ever inducting on zigzags... I think instead you want to use the characterisation \"functors out of a connected category to a discrete category are constant\" directly.</p>",
        "id": 207796572,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598225429
    },
    {
        "content": "<p>For 2. as far as I can see it is just a matter of copying and pasting the relevant page of Hartshorne. I haven't started this yet, but would be happy to either do it, or screen share with someone and see if we can hack it out. I don't see any particular obstruction.</p>",
        "id": 207796588,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598225478
    },
    {
        "content": "<blockquote>\n<p>How far are we from sheaves of modules on a ringed space? </p>\n</blockquote>\n<p>I haven't made any progress on this. One thing I would like to try is modelling a sheaf of rings as an internal ring object in sheaves, and then talking about a sheaf of modules as an internal module object. However, the \"internal objects\" development that exists so far is largely incompatible with the changes we really ought to make to get <code>prop_limits</code> (making the currently evil <code>has_limit</code> typeclass into a Prop) merged.</p>\n<p>So I've stopped working on / thinking about internal objects, until we get that done.</p>",
        "id": 207796699,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598225655
    },
    {
        "content": "<p>The two main blockers on the <code>prop_limits</code> branch are now:</p>\n<ol>\n<li>fixing the construction of a monoidal category from a category with binary products, so it's possible to specify which binary products you want to use,</li>\n<li>the file <a href=\"https://leanprover-community.github.io/mathlib_docs/find/Top.sheaf_condition.to_Types/src\">src#Top.sheaf_condition.to_Types</a> uses an \"it's obvious\" step that relied on Lean knowing the definition of limits in <code>Type</code>, and this is currently broken on the <code>prop_limits</code> branch, and every time I look at it my head hurts.</li>\n</ol>",
        "id": 207796825,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598225883
    },
    {
        "content": "<p>That said, it may be that <span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> has other ideas besides the <code>prop_limits</code> branch about how to resolve the <code>has_limit</code> issue, but I'm not sure where his thinking is on this.</p>",
        "id": 207796846,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598225963
    },
    {
        "content": "<p>The PR <a href=\"https://github.com/leanprover-community/mathlib/issues/3873\">#3873</a>, already merged into <code>prop_limits</code> takes care of one of the other obstructions, namely getting all the constructions of limits in concrete categories working compatibly with a propositional <code>has_limit</code> typeclass. (I think this obstruction is where <span class=\"user-mention\" data-user-id=\"260921\">@Markus Himmel</span> originally paused when he started the <code>prop_limits</code> branch.)</p>",
        "id": 207796903,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598226043
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113488-general/topic/status.20of.20schemes/near/207796699\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>How far are we from sheaves of modules on a ringed space? </p>\n</blockquote>\n<p>modelling a sheaf of rings as an internal ring object in sheaves</p>\n</blockquote>\n<p>I think this is a useful thing to have as well</p>",
        "id": 207797024,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1598226263
    },
    {
        "content": "<p>I think one thing which will help the <code>has_limit</code> issue yet also be useful for <code>prop_limits</code> would be to have basically everything stated in terms of <code>is_limit</code> rather than \"the\" limit</p>",
        "id": 207797043,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1598226332
    },
    {
        "content": "<p>Yes. I understand that this is better, but it's also usually really painful. :-)</p>",
        "id": 207797292,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598226724
    },
    {
        "content": "<p>I'm still playing around with these local predicates: here's an idea for sheaves of modules using <code>local_predicate</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">sheaves</span><span class=\"bp\">.</span><span class=\"n\">local_predicate</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Top</span>\n<span class=\"kn\">open</span> <span class=\"n\">topological_space</span>\n<span class=\"kn\">universe</span> <span class=\"n\">v</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">Top</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}}</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">local_ring_predicate</span> <span class=\"kn\">extends</span> <span class=\"n\">local_predicate</span> <span class=\"n\">T</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">fibre_ring</span> <span class=\"o\">(</span><span class=\"n\">x</span>  <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ring</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">is_subring</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">opens</span> <span class=\"n\">X</span><span class=\"o\">},</span> <span class=\"n\">is_subring</span> <span class=\"o\">(</span><span class=\"n\">pred</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">U</span><span class=\"o\">),</span> <span class=\"n\">T</span> <span class=\"n\">x</span><span class=\"o\">)))</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">local_module_predicate</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">local_ring_predicate</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"n\">local_predicate</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">fibre_add_comm_group</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_group</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">fibre_module</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">letI</span> <span class=\"o\">:=</span> <span class=\"n\">A</span><span class=\"bp\">.</span><span class=\"n\">fibre_ring</span> <span class=\"n\">x</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">module</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">is_submodule</span> <span class=\"o\">:</span> <span class=\"n\">sorry</span><span class=\"o\">)</span> <span class=\"c1\">-- is_submodule doesn&#39;t exist in mathlib, but you get the idea.</span>\n</code></pre></div>\n\n\n<p>Of course, this is different from the categorical approach that <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> and <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> have used.</p>",
        "id": 207799947,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1598231180
    },
    {
        "content": "<p>Yes, I know that I shouldn't use <code>is_subring</code> :)</p>",
        "id": 207800020,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1598231310
    },
    {
        "content": "<p>Wouldn't it make more sense to parametrise by <code>fibre_ring</code>, rather than bundle it?</p>",
        "id": 207800039,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598231381
    },
    {
        "content": "<p>Oh yeah, good point. I guess that way the instance will be found in the second definition.</p>",
        "id": 207800087,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1598231433
    },
    {
        "content": "<p>one way to deal with the deprecation of <code>is_subring</code> would be to rename <code>local_predicate.pred</code> to <code>local_predicate.carrier</code>, and have <code>local_ring_predicate</code> extend <code>subring</code>... not sure if this actually makes sense.</p>",
        "id": 207800094,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598231464
    },
    {
        "content": "<p>(the idea being to force <code>.pred</code> and <code>.carrier</code> to agree by having them be the same thing)</p>",
        "id": 207800103,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598231515
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">sheaves</span><span class=\"bp\">.</span><span class=\"n\">local_predicate</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Top</span>\n<span class=\"kn\">open</span> <span class=\"n\">topological_space</span>\n<span class=\"kn\">universe</span> <span class=\"n\">v</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">Top</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}}</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">local_ring_predicate</span> <span class=\"o\">[</span><span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"n\">ring</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"n\">x</span><span class=\"o\">)]</span> <span class=\"kn\">extends</span> <span class=\"n\">local_predicate</span> <span class=\"n\">T</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">is_subring</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">opens</span> <span class=\"n\">X</span><span class=\"o\">},</span> <span class=\"n\">is_subring</span> <span class=\"o\">(</span><span class=\"n\">pred</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">U</span><span class=\"o\">),</span> <span class=\"n\">T</span> <span class=\"n\">x</span><span class=\"o\">)))</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">local_module_predicate</span> <span class=\"o\">[</span><span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"n\">ring</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"n\">x</span><span class=\"o\">)]</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">local_ring_predicate</span> <span class=\"n\">T</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"n\">add_comm_group</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"n\">x</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"n\">module</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"n\">x</span><span class=\"o\">)]</span> <span class=\"kn\">extends</span> <span class=\"n\">local_predicate</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">is_submodule</span> <span class=\"o\">:</span> <span class=\"n\">sorry</span><span class=\"o\">)</span> <span class=\"c1\">-- is_submodule doesn&#39;t exist in mathlib, but you get the idea.</span>\n</code></pre></div>",
        "id": 207800142,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1598231532
    },
    {
        "content": "<p>In another direction, <span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span>, do you know of an abstract condition on <code> prelocal_predicate</code> that ensures that the stalk of its sheafification is the original fibre?</p>",
        "id": 207800164,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598231625
    },
    {
        "content": "<p>I was trying to do this in the <code>sheafification</code> branch, where the <code>prelocal_predicate</code> is just <code>is_germ</code>. I ran into trouble with <code>classical.some</code>.</p>",
        "id": 207800222,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598231693
    },
    {
        "content": "<p>I think finishing off that isomorphism in the <code>sheafification</code> branch is a good test of this <code>local_predicate</code> setup.</p>",
        "id": 207800234,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598231750
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113488-general/topic/status.20of.20schemes/near/207800164\">said</a>:</p>\n<blockquote>\n<p>In another direction, <span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span>, do you know of an abstract condition on <code> prelocal_predicate</code> that ensures that the stalk of its sheafification is the original fibre?</p>\n</blockquote>\n<p>Yes, you can just say that for every element <code>z</code> of <code>T x</code>, there is some neighborhood <code>U</code> of <code>x</code>, and some section <code>w</code> over U, where Z and w agree over x.</p>",
        "id": 207800301,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1598231850
    },
    {
        "content": "<p>Doesn't that only give a (presumably surjective) map from the fibre to the stalk?</p>",
        "id": 207800721,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598232586
    },
    {
        "content": "<p>I don't think so... The union of the sections over the neighborhoods is the colimit in the category of sets, and the sections over the open sets are already defined as subsets of the union of the fibres.</p>",
        "id": 207800833,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1598232736
    },
    {
        "content": "<p>Oh actually I think you're right.</p>",
        "id": 207800898,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1598232865
    },
    {
        "content": "<p>E.g. think about SpecZ, and put the fibre over a prime of Z to be the residue field of that point.</p>",
        "id": 207800917,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1598232944
    },
    {
        "content": "<p>But I think we can get around this by imposing some injectivity</p>",
        "id": 207800964,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1598233003
    },
    {
        "content": "<p>Ah but even that is too restrictive in general!</p>",
        "id": 207800973,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1598233031
    },
    {
        "content": "<p>Yeah I don't see how to make it work in general <span aria-label=\"frown\" class=\"emoji emoji-1f641\" role=\"img\" title=\"frown\">:frown:</span></p>",
        "id": 207801035,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1598233184
    },
    {
        "content": "<p>The only way I see how to do it is by saying that the canonical map from the union to the fibre is a bijection.</p>",
        "id": 207801147,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1598233327
    },
    {
        "content": "<p>Do you have any idea how to proceed at <a href=\"https://github.com/leanprover-community/mathlib/blob/sheafification/src/topology/sheaves/sheafify.lean#L55\">https://github.com/leanprover-community/mathlib/blob/sheafification/src/topology/sheaves/sheafify.lean#L55</a>?</p>",
        "id": 207801162,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598233424
    },
    {
        "content": "<p>Ok so you can take the condition i mentioned above (which is equiv to surjectivity) and add another condition saying that whenever <code>z</code> is in <code>T x</code> and <code>wi</code> is a section over <code>Ui</code>, i=1,2, mapping to z, there is a neighborhood V contained in the intersection of U1 and U2, such that w1 and w2 agree everywhere over V. This is an ugly condition, but still elementary</p>",
        "id": 207801270,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1598233587
    },
    {
        "content": "<p>Hmm I'm on mobile now, but I'll try to look at that file a little later if I have time (tomorrow for sure)</p>",
        "id": 207801350,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1598233797
    },
    {
        "content": "<p>Even with this approach, <code>classical.some</code> will still be used to pass from a bijection to an isomorphism <span aria-label=\"oh no\" class=\"emoji emoji-1f615\" role=\"img\" title=\"oh no\">:oh_no:</span></p>",
        "id": 207801882,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1598234854
    },
    {
        "content": "<p>Okay, I think something like this should work:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">structure</span> <span class=\"n\">compat_local_predicate</span> <span class=\"kn\">extends</span> <span class=\"n\">prelocal_predicate</span> <span class=\"n\">T</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">surj</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">opens</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">U</span><span class=\"o\">),</span> <span class=\"n\">T</span> <span class=\"n\">u</span><span class=\"o\">),</span> <span class=\"n\">pred</span> <span class=\"n\">w</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">w</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">m</span><span class=\"bp\">⟩</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">inj</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">U₁</span> <span class=\"n\">U₂</span> <span class=\"o\">:</span> <span class=\"n\">opens</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m₁</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">U₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m₂</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">U₂</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">w₁</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">u₁</span> <span class=\"o\">:</span> <span class=\"n\">U₁</span><span class=\"o\">),</span> <span class=\"n\">T</span> <span class=\"n\">u₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">w₂</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">u₂</span> <span class=\"o\">:</span> <span class=\"n\">U₂</span><span class=\"o\">),</span> <span class=\"n\">T</span> <span class=\"n\">u₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">pred</span> <span class=\"n\">w₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">pred</span> <span class=\"n\">w₂</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">e₁</span> <span class=\"o\">:</span> <span class=\"n\">w₁</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">m₁</span><span class=\"bp\">⟩</span> <span class=\"bp\">=</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e₂</span> <span class=\"o\">:</span> <span class=\"n\">w₂</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">m₂</span><span class=\"bp\">⟩</span> <span class=\"bp\">=</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">opens</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i₁</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"err\">⟶</span> <span class=\"n\">U₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i₂</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"err\">⟶</span> <span class=\"n\">U₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">),</span> <span class=\"n\">T</span> <span class=\"n\">v</span><span class=\"o\">),</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">),</span> <span class=\"n\">w₁</span> <span class=\"o\">(</span><span class=\"n\">i₁</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">w</span> <span class=\"n\">v</span> <span class=\"bp\">∧</span> <span class=\"n\">w₂</span> <span class=\"o\">(</span><span class=\"n\">i₂</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">w</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 207803319,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1598237592
    },
    {
        "content": "<p>almost there with the proof that this give injectivity...</p>",
        "id": 207804242,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598239320
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> Concerning <code>sheafify.foo</code>, I think the (pen-and-paper) correct way to define this is using the universal property of the colimit. I'm not sure how to phrase this using the colimits from mathlib though.</p>",
        "id": 207804288,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1598239368
    },
    {
        "content": "<p>Okay, injectivity and surjectivity from these condition are now proved in <a href=\"https://github.com/leanprover-community/mathlib/issues/3906\">#3906</a>.</p>",
        "id": 207804679,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598240148
    },
    {
        "content": "<p>Hopefully this will be useful both for sheafify, and for calculating the stalks of Spec R.</p>",
        "id": 207804913,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598240588
    },
    {
        "content": "<p>Oh ... hmm, maybe I'm not sure if the injectivity condition applies for Spec R.</p>",
        "id": 207804920,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598240618
    },
    {
        "content": "<p>I guess it does... this is exactly Hartshorne's argument, just factored out a bit strangely.</p>",
        "id": 207804968,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598240650
    },
    {
        "content": "<p>with a bit of work to construct the <code>V</code> in Adam's language.</p>",
        "id": 207804978,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598240676
    },
    {
        "content": "<p><code>sheafify.foo</code> on the sheafification branch is now just <code>stalk_to_fiber</code>, defined in <a href=\"https://github.com/leanprover-community/mathlib/issues/3906\">#3906</a> (and constructed, as you said, Adam, using <code>colimit.desc</code>.)</p>",
        "id": 207805159,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598241023
    },
    {
        "content": "<p>Yeah it should all be fine for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi><mi>p</mi><mi>e</mi><mi>c</mi><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">Spec R</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span>. Here's the \"pen-and-paper\" proof I would give in a commutative algebra class :) </p>\n<p>If <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"fraktur\">p</mi></mrow><annotation encoding=\"application/x-tex\">\\mathfrak{p}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.71302em;vertical-align:-0.18906em;\"></span><span class=\"mord\"><span class=\"mord mathfrak\">p</span></span></span></span></span> is a prime and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mi mathvariant=\"normal\">/</mi><mi>f</mi><mo>∈</mo><msub><mi>R</mi><mi mathvariant=\"fraktur\">p</mi></msub></mrow><annotation encoding=\"application/x-tex\">a/f \\in R_{\\mathfrak{p}}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mord\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.965672em;vertical-align:-0.282342em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.21677199999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathfrak mtight\">p</span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.282342em;\"><span></span></span></span></span></span></span></span></span></span>, then just think of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mi mathvariant=\"normal\">/</mi><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">a/f</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mord\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span></span></span></span> as a section over the standard open set <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>U</mi><mi>f</mi></msub></mrow><annotation encoding=\"application/x-tex\">U_f</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.969438em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361079999999999em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10764em;\">f</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span></span></span></span>, and this gives surjectivity. And if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>U</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><msub><mi>U</mi><mn>2</mn></msub></mrow><annotation encoding=\"application/x-tex\">U_1,U_2</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> are neighborhoods of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"fraktur\">p</mi></mrow><annotation encoding=\"application/x-tex\">\\mathfrak{p}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.71302em;vertical-align:-0.18906em;\"></span><span class=\"mord\"><span class=\"mord mathfrak\">p</span></span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>w</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">w_i</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> are sections which agree in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>R</mi><mi mathvariant=\"fraktur\">p</mi></msub></mrow><annotation encoding=\"application/x-tex\">R_\\mathfrak{p}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.965672em;vertical-align:-0.282342em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.21677199999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathfrak mtight\">p</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.282342em;\"><span></span></span></span></span></span></span></span></span></span>, then first  make <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>U</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">U_1</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>U</mi><mn>2</mn></msub></mrow><annotation encoding=\"application/x-tex\">U_2</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> a bit smaller to assume they're standard opens <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>U</mi><msub><mi>f</mi><mn>1</mn></msub></msub></mrow><annotation encoding=\"application/x-tex\">U_{f_1}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.969438em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361079999999999em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31731428571428577em;\"><span style=\"top:-2.357em;margin-left:-0.10764em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>U</mi><msub><mi>f</mi><mn>2</mn></msub></msub></mrow><annotation encoding=\"application/x-tex\">U_{f_2}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.969438em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361079999999999em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31731428571428577em;\"><span style=\"top:-2.357em;margin-left:-0.10764em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span></span></span></span> (this is fine since the standard opens form a basis for the topology), so WLOG <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>w</mi><mi>i</mi></msub><mo>=</mo><msub><mi>a</mi><mi>i</mi></msub><mi mathvariant=\"normal\">/</mi><msub><mi>f</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">w_i = a_i/f_i</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\">/</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> (really, I should say <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub><mi mathvariant=\"normal\">/</mi><mo stretchy=\"false\">(</mo><msub><mi>f</mi><mi>i</mi></msub><msup><mo stretchy=\"false\">)</mo><msub><mi>n</mi><mi>i</mi></msub></msup></mrow><annotation encoding=\"application/x-tex\">a_i/(f_i)^{n_i}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\">/</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3280857142857143em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span>, but then just replace <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>f</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">f_i</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><msub><mi>f</mi><mi>i</mi></msub><msup><mo stretchy=\"false\">)</mo><msub><mi>n</mi><mi>i</mi></msub></msup></mrow><annotation encoding=\"application/x-tex\">(f_i)^{n_i}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3280857142857143em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span>). Saying they're equal in the localization at <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"fraktur\">p</mi></mrow><annotation encoding=\"application/x-tex\">\\mathfrak{p}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.71302em;vertical-align:-0.18906em;\"></span><span class=\"mord\"><span class=\"mord mathfrak\">p</span></span></span></span></span> means that there is some <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi><mo mathvariant=\"normal\">∉</mo><mi mathvariant=\"fraktur\">p</mi></mrow><annotation encoding=\"application/x-tex\">s \\notin \\mathfrak{p}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\"><span class=\"mord\"><span class=\"mrel\">∈</span></span><span class=\"mord vbox\"><span class=\"thinbox\"><span class=\"llap\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"inner\"><span class=\"mord\"><span class=\"mord\">/</span><span class=\"mspace\" style=\"margin-right:0.05555555555555555em;\"></span></span></span><span class=\"fix\"></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.71302em;vertical-align:-0.18906em;\"></span><span class=\"mord\"><span class=\"mord mathfrak\">p</span></span></span></span></span> such that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>a</mi><mn>1</mn></msub><mo>⋅</mo><msub><mi>f</mi><mn>2</mn></msub><mo>⋅</mo><mi>s</mi><mo>=</mo><msub><mi>a</mi><mn>2</mn></msub><mo>⋅</mo><msub><mi>f</mi><mn>1</mn></msub><mo>⋅</mo><mi>s</mi></mrow><annotation encoding=\"application/x-tex\">a_1 \\cdot f_2 \\cdot s = a_2 \\cdot f_1 \\cdot s</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.59445em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.59445em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">s</span></span></span></span>. Take <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>V</mi></mrow><annotation encoding=\"application/x-tex\">V</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span></span></span></span> to be the intersection <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>U</mi><msub><mi>f</mi><mn>1</mn></msub></msub><mo>∩</mo><msub><mi>U</mi><msub><mi>f</mi><mn>2</mn></msub></msub><mo>∩</mo><msub><mi>U</mi><mi>s</mi></msub><mo>=</mo><msub><mi>U</mi><mrow><msub><mi>f</mi><mn>1</mn></msub><mo>⋅</mo><msub><mi>f</mi><mn>2</mn></msub><mo>⋅</mo><mi>s</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">U_{f_1} \\cap U_{f_2} \\cap U_{s} = U_{f_1 \\cdot f_2 \\cdot s}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.969438em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361079999999999em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31731428571428577em;\"><span style=\"top:-2.357em;margin-left:-0.10764em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∩</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.969438em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361079999999999em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31731428571428577em;\"><span style=\"top:-2.357em;margin-left:-0.10764em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∩</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">s</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.969438em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361079999999999em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31731428571428577em;\"><span style=\"top:-2.357em;margin-left:-0.10764em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span><span class=\"mbin mtight\">⋅</span><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31731428571428577em;\"><span style=\"top:-2.357em;margin-left:-0.10764em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span><span class=\"mbin mtight\">⋅</span><span class=\"mord mathnormal mtight\">s</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span></span></span></span>, etc.</p>",
        "id": 207805838,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1598242266
    },
    {
        "content": "<p>Of course, I'm assuming you take <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>R</mi><mi mathvariant=\"fraktur\">p</mi></msub></mrow><annotation encoding=\"application/x-tex\">R_\\mathfrak{p}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.965672em;vertical-align:-0.282342em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.21677199999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathfrak mtight\">p</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.282342em;\"><span></span></span></span></span></span></span></span></span></span> to be the fibre over <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"fraktur\">p</mi></mrow><annotation encoding=\"application/x-tex\">\\mathfrak{p}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.71302em;vertical-align:-0.18906em;\"></span><span class=\"mord\"><span class=\"mord mathfrak\">p</span></span></span></span></span>. </p>\n<p>It's actually quite interesting that in some cases (I guess reduced schemes would be enough?) you can take the residue field as the fibre, and define the structure sheaf using a <code>local_predicate</code>. This should satisfy the surjectivity condition but not injectivity, but should yield the same sheaf!</p>",
        "id": 207805954,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1598242477
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> What's up next?</p>",
        "id": 207822274,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598260573
    },
    {
        "content": "<p>So, in the <code>sheafification</code> branch (which is a bit of a sideshow, but I think an excellent exercise of the machinery), we now have that the stalks are correct, except that there's a sorry:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">germ_eq</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"bp\">.</span><span class=\"n\">presheaf</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">))</span> <span class=\"o\">{</span><span class=\"n\">U</span> <span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">opens</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">mU</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">mV</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">U</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">V</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">germ</span> <span class=\"n\">F</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">mU</span><span class=\"bp\">⟩</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">germ</span> <span class=\"n\">F</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">mV</span><span class=\"bp\">⟩</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"n\">opens</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">W</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">iU</span> <span class=\"o\">:</span> <span class=\"n\">W</span> <span class=\"err\">⟶</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">iV</span> <span class=\"o\">:</span> <span class=\"n\">W</span> <span class=\"err\">⟶</span> <span class=\"n\">V</span><span class=\"o\">),</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">iU</span><span class=\"bp\">.</span><span class=\"n\">op</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">iV</span><span class=\"bp\">.</span><span class=\"n\">op</span> <span class=\"n\">t</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 207825690,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598263130
    },
    {
        "content": "<p>Now that we have good machinery for checking that <code>stalk_to_fiber</code> is a bijection, we should sit down and write the proof that the stalks of Spec R are correct. (e.g. following Hartshorne, or close to isomorphically the proof Adam wrote above).</p>",
        "id": 207825739,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598263185
    },
    {
        "content": "<p>I would like to do <code>germ_eq</code>, but it's hard to get at!</p>",
        "id": 207825834,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598263238
    },
    {
        "content": "<p>The problem is just that we don't have much machinery for filtered / directed colimits.</p>",
        "id": 207825904,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598263295
    },
    {
        "content": "<p>I just pushed a proof of <code>local_ring.of_ring_equiv</code></p>",
        "id": 207826037,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598263402
    },
    {
        "content": "<p>The maths proof would say \"If two points in a colimit are equal, they are related by some zigzag of morphisms in the indexing diagram. Since we're looking at open sets (which form a directed set), we can just take the intersection of all the open sets appearing in that zigzag, and in fact the two points are related by a single V shape in the indexing diagram. That's the <code>W</code> in the goal.\"</p>",
        "id": 207826172,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598263486
    },
    {
        "content": "<p>But I don't want to actually have a zigzag appear, and I don't think we have the right induction principle to hand. :-(</p>",
        "id": 207826215,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598263517
    },
    {
        "content": "<p>Right</p>",
        "id": 207826244,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598263557
    },
    {
        "content": "<p>We could leave that for now, and just do the stalks in Spec R calculation. Starting in about 90 minutes I'd be happy to screenshare that. (What's the verb for pair-programming remotely?)</p>",
        "id": 207826322,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598263615
    },
    {
        "content": "<p>remogramming?</p>",
        "id": 207826438,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598263692
    },
    {
        "content": "<p>These are filtered colimits -- surely this makes things easier. We surely don't need zigzags.</p>",
        "id": 207828148,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598265126
    },
    {
        "content": "<p>If it helps, I think <a href=\"https://github.com/leanprover-community/mathlib/commit/bc457fb5716fbffe63cbcc10b4ce7a253c720f84\">this</a> is an old proof of what you're looking for</p>",
        "id": 207828908,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598265797
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113488-general/topic/status.20of.20schemes/near/207828908\">said</a>:</p>\n<blockquote>\n<p>If it helps, I think <a href=\"https://github.com/leanprover-community/mathlib/commit/bc457fb5716fbffe63cbcc10b4ce7a253c720f84\">this</a> is an old proof of what you're looking for</p>\n</blockquote>\n<p>Perfect! I had seen this before, but forgotten it. I've just taken the liberty of merging <code>master</code> into <a href=\"https://github.com/leanprover-community/mathlib/tree/filtered-colimits-2\">branch#filtered-colimits-2</a>, and making the necessary changes.</p>\n<p>Could you make a PR out of it? I only made small changes, so on the assumption I didn't botch anything it looks straightforward to me. I can make the PR if you'd prefer, too.</p>",
        "id": 207919404,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598322467
    },
    {
        "content": "<p>All you need to be able to do to make schemes, are</p>\n<ul>\n<li>the definition of a sheaf of rings on a topological space,</li>\n<li>ability to pull back a presheaf of rings along an open immersion,</li>\n<li>ability to talk about an isomorphism of presheaves of rings on a fixed space, and</li>\n<li>The definition of the canonical presheaf of rings on Spec(R).</li>\n</ul>\n<p>How close are we to these four things?</p>",
        "id": 208264477,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598556421
    },
    {
        "content": "<p>Other things are interesting for the API but not needed for the definition.</p>",
        "id": 208264542,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598556456
    },
    {
        "content": "<p>We have all those 4 things</p>",
        "id": 208265329,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598556857
    },
    {
        "content": "<p>so we can define schemes in mathlib, right?</p>",
        "id": 208265376,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598556885
    },
    {
        "content": "<p>Yup, everything is already PR'd</p>",
        "id": 208265422,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598556910
    },
    {
        "content": "<p>But we want to know that Spec(R) is a functor to schemes.</p>",
        "id": 208265443,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598556922
    },
    {
        "content": "<p>we want to know all sorts of things, but it would be wonderful actually get the definition of a scheme into mathlib</p>",
        "id": 208265761,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598557102
    },
    {
        "content": "<p>this is the milestone</p>",
        "id": 208265768,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598557109
    },
    {
        "content": "<p>not that some map is a functor</p>",
        "id": 208265780,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598557116
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/status.20of.20schemes/near/208265329\">said</a>:</p>\n<blockquote>\n<p>We have all those 4 things</p>\n</blockquote>\n<p>How do I pull back a presheaf of rings along an open immersion?</p>",
        "id": 208268054,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598558322
    },
    {
        "content": "<p>I was under the impression that restriction of sheaves to open sets was not done yet.</p>",
        "id": 208268145,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1598558373
    },
    {
        "content": "<p>Sure, but presheaves is easier</p>",
        "id": 208268585,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598558553
    },
    {
        "content": "<p>Is it done for preseheaves?</p>",
        "id": 208268623,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1598558577
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> one of the PRs contains a way to turn an <code>h : open_embedding f</code> into a functor <code>opens U \\func opens X</code>.</p>",
        "id": 208268664,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598558602
    },
    {
        "content": "<p>And then you simply compose with the <code>\\op</code> of that.</p>",
        "id": 208268684,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598558613
    },
    {
        "content": "<p>How do I search for this? I want to see a recent PR which contained a commit which mentions <code>open_embedding</code>. How do I look for this?</p>",
        "id": 208268958,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598558732
    },
    {
        "content": "<p>I haven't been looking at the PR's</p>",
        "id": 208268985,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598558745
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/search?q=open_embedding&amp;type=Issues\">https://github.com/leanprover-community/mathlib/search?q=open_embedding&amp;type=Issues</a></p>",
        "id": 208269084,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1598558769
    },
    {
        "content": "<p>I can't find it. I need precisely what you said Johan.</p>",
        "id": 208269489,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598558983
    },
    {
        "content": "<p>1 sec, finding the link</p>",
        "id": 208269791,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598559141
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/blob/LRS/src/topology/category/Top/opens.lean#L172\">https://github.com/leanprover-community/mathlib/blob/LRS/src/topology/category/Top/opens.lean#L172</a></p>",
        "id": 208269879,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598559199
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> <span aria-label=\"up\" class=\"emoji emoji-2b06\" role=\"img\" title=\"up\">:up:</span></p>",
        "id": 208269888,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598559204
    },
    {
        "content": "<p>Note that <a href=\"https://github.com/leanprover-community/mathlib/tree/LRS\">branch#LRS</a> which Johan just linked to is not yet a PR!</p>",
        "id": 208290529,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598572767
    },
    {
        "content": "<p>Sorry, maybe I'm missing something, but I don't we need more than what Kevin has said?</p>",
        "id": 208291082,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598573195
    },
    {
        "content": "<p>In particular, in the definition of <code>Scheme</code> we want a cover by opens on each of which our sheaf of local rings is isomorphic <strong>as a locally ringed space</strong> to some Spec R.</p>",
        "id": 208291124,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598573253
    },
    {
        "content": "<p>(That is, it's not good enough to just say that the presheaf of local rings on <code>U</code>  is isomorphic as a presheaf to the presheaf on some Spec R.)</p>",
        "id": 208291182,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598573290
    },
    {
        "content": "<p>The point being that locally ringed spaces are not a full subcategory of <code>SheafedSpace</code>, but rather have an extra condition about the maximal ideals.</p>",
        "id": 208291202,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598573326
    },
    {
        "content": "<p>So we're still missing </p>\n<ol>\n<li>that <code>Spec R</code> is a locally ringed space</li>\n<li>that the restriction of a locally ringed space along an open embedding is a locally ringed space.</li>\n</ol>",
        "id": 208291210,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598573338
    },
    {
        "content": "<p>So far we have only <code>Spec R</code> as a <code>SheafedSpace</code>.</p>",
        "id": 208291334,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598573486
    },
    {
        "content": "<p>We know that the underlying type of the stalk at a point <code>x : prime_spectrum R</code> is isomorphic to the localization of <code>R</code> at <code>x</code>. But we don't yet have that this isomorphism is an isomorphism of rings.</p>",
        "id": 208291412,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598573554
    },
    {
        "content": "<p>This is the sorry at <a href=\"https://github.com/leanprover-community/mathlib/blob/LRS/src/algebraic_geometry/structure_sheaf.lean#L311\">https://github.com/leanprover-community/mathlib/blob/LRS/src/algebraic_geometry/structure_sheaf.lean#L311</a></p>",
        "id": 208291587,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598573736
    },
    {
        "content": "<p>To prove this, I would like to first prove that the <code>forget CommRing</code> preserves filtered colimits, and hence that the stalk (as a <code>CommRing</code>) at <code>x</code> is the same as the stalk (as a <code>Type</code>) at <code>x</code>, and so the isomorphism of rings can use the existing isomorphism of types.</p>\n<p>We'll then need to check that it is actually a morphism of rings, but I think this part will not be hard.</p>",
        "id": 208291730,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598573862
    },
    {
        "content": "<p>There is a WIP branch <code>preserves_filtered_colimits</code> that is doing this, but I having got into the woods a bit, I think I would like to redo this branch, and actually prove that filtered colimits commute with finite limits, and then use this framework when showing forgetful functors preserve filtered colimits. It's more work if we're just racing to <code>Scheme</code>, but I think it will be nicer in the long run, and you basically do most of the work along the way in any case. If anyone wants a category-theoretic task to work on, I know how to chop up this goal into some separate subunits and would be happy to have help / have someone do it!</p>",
        "id": 208291948,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598574042
    },
    {
        "content": "<p>For 2. (restricting a locally ringed space along an open embedding to get another LRS), what we already have is that you can restrict a <code>PresheafedSpace</code> or a <code>SheafedSpace</code>.</p>",
        "id": 208292023,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598574125
    },
    {
        "content": "<p>See in particular <a href=\"https://github.com/leanprover-community/mathlib/blob/LRS/src/algebraic_geometry/sheafed_space.lean#L97\">https://github.com/leanprover-community/mathlib/blob/LRS/src/algebraic_geometry/sheafed_space.lean#L97</a>, with no sorries.</p>",
        "id": 208292034,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598574153
    },
    {
        "content": "<p>However what we don't have yet is</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">restrict_stalk_iso</span> <span class=\"o\">{</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">Top</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">PresheafedSpace</span> <span class=\"n\">C</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">U</span> <span class=\"err\">⟶</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">Top</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}))</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">open_embedding</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">X</span><span class=\"bp\">.</span><span class=\"n\">restrict</span> <span class=\"n\">f</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">stalk</span> <span class=\"n\">x</span> <span class=\"err\">≅</span> <span class=\"n\">X</span><span class=\"bp\">.</span><span class=\"n\">stalk</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 208292070,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598574218
    },
    {
        "content": "<p>This should not be hard: the correct way to do this is to define cofinal functors (easy), show that \"open neighbourhoods of x within U\" is cofinal inside \"open neighbourhoods of x\" (easy), and show that precomposing with a cofinal functor doesn't change the colimit (should not be hard, but hasn't been done yet, and requires looking at from the right angle before it's easy!)</p>",
        "id": 208292263,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598574399
    },
    {
        "content": "<p>This is also on my agenda, but I haven't made any start on it, so again if anyone would like to jump in and do any of those three steps (obviously the definition of cofinal functor comes first, but it's just a one-liner, in terms of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.connected/src\">src#category_theory.connected</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.over/src\">src#category_theory.over</a>) please do so!</p>",
        "id": 208292330,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598574482
    },
    {
        "content": "<p>I think the point is that an isomorphism of ringed spaces induces isomorphisms on stalks, and an isomorphism of local rings is a local morphism (since the unique maximal ideals are preserved). But schemes are not interesting. What is interesting are <strong>morphisms</strong> of schemes, and everything that Scott has said is necessary for this.</p>",
        "id": 208297381,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1598580292
    },
    {
        "content": "<p>Hmm --- but maybe we should do this later?</p>",
        "id": 208297742,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598580583
    },
    {
        "content": "<p>So yes, a scheme is \"just\" a <em>ringed</em> space which is locally isomorphic to Spec, but you really do want an isomorphism of locally ringed spaces for all the actually interesting properties of schemes <span aria-label=\"smiling face\" class=\"emoji emoji-263a\" role=\"img\" title=\"smiling face\">:smiling_face:</span>️</p>",
        "id": 208297812,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1598580644
    },
    {
        "content": "<p>So give the definition just asking for an isomorphism on each <code>U</code> to Spec R as a PresheafedSpace</p>",
        "id": 208297850,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598580697
    },
    {
        "content": "<p>and then give a theorem later that these isomorphisms are in fact automatically isomorphisms as LocallyRingedSpace?</p>",
        "id": 208297864,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598580717
    },
    {
        "content": "<p>That sounds reasonable!</p>",
        "id": 208297975,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1598580784
    },
    {
        "content": "<p>This has the advantage also of slicing into smaller PRs. And I can get the one up to the definition of <code>Scheme</code> out the door quite quickly if I make this change.</p>",
        "id": 208298032,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598580820
    },
    {
        "content": "<p>and I guess it is what Kevin had in mind all along.</p>",
        "id": 208298055,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598580839
    },
    {
        "content": "<p>Actually, even for morphisms of schemes, why is what I've been talking about necessary?</p>",
        "id": 208298220,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598580925
    },
    {
        "content": "<p>For this you really do need to know that the maps on stalks are local morphisms.</p>",
        "id": 208298270,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1598580963
    },
    {
        "content": "<p>E.g. it's necessary to prove the spec gamma adjunction</p>",
        "id": 208298287,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1598580979
    },
    {
        "content": "<p>Yes, but that's in the definition of <code>LocallyRingedSpace</code></p>",
        "id": 208298291,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598580985
    },
    {
        "content": "<p>there's nothing in the definition of morphisms that asks for compatibility with the cover by affines?</p>",
        "id": 208298320,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598581011
    },
    {
        "content": "<p>Could you link the definition of <code>LocallyRingedSpace</code>?</p>",
        "id": 208298337,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1598581035
    },
    {
        "content": "<p>Yeah the category of schemes is a full subcategory of locally ringed spaces</p>",
        "id": 208298347,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1598581055
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/blob/LRS/src/algebraic_geometry/locally_ringed_space.lean\">https://github.com/leanprover-community/mathlib/blob/LRS/src/algebraic_geometry/locally_ringed_space.lean</a></p>",
        "id": 208298349,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598581056
    },
    {
        "content": "<p>Thanks <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 208298359,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1598581066
    },
    {
        "content": "<p>The key line is <a href=\"https://github.com/leanprover-community/mathlib/blob/LRS/src/algebraic_geometry/locally_ringed_space.lean#L109\">https://github.com/leanprover-community/mathlib/blob/LRS/src/algebraic_geometry/locally_ringed_space.lean#L109</a></p>",
        "id": 208298401,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598581103
    },
    {
        "content": "<p>So yeah, as long as we can get schemes to be an object in this category, we should be fine</p>",
        "id": 208298421,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1598581140
    },
    {
        "content": "<p>Okay, I'll rip out the sorries and make the PR, in that case!</p>",
        "id": 208298516,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598581233
    },
    {
        "content": "<p>And this boils down to proving the map we were discussing before is a ring isomorphism, and that <code>is_local_ring</code> is preserved under isomorphisms</p>",
        "id": 208298517,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1598581233
    },
    {
        "content": "<p>The compatibility with affines for morphisms of schemes is \"just\" the statement that the global sections of the structure sheaf of Spec R is \"just\" R.</p>",
        "id": 208298644,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1598581426
    },
    {
        "content": "<p>Oh, and the fact that the basic opens for affine schemes are a basis for the topology, which is just some simple commutative algebra</p>",
        "id": 208298701,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1598581477
    },
    {
        "content": "<p>There's a notion of an <em>affine</em> morphism of schemes, which says additionally that the preimage of any affine open is again an affine open, but this is an additional property.</p>",
        "id": 208298818,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1598581616
    },
    {
        "content": "<p>Okay! The <a href=\"https://github.com/leanprover-community/mathlib/tree/LRS\">branch#LRS</a> has no sorries, and a definition of <code>Scheme</code> that I think is correct. :-)</p>",
        "id": 208300074,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598583200
    },
    {
        "content": "<p>I'll polish things a bit, but will make it a PR shortly.</p>",
        "id": 208300079,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598583218
    },
    {
        "content": "<p>Wait... is the isomorphism here <a href=\"https://github.com/leanprover-community/mathlib/blob/93f74f255d8788c7bfb9b714f5be76a8fb4cd1ce/src/algebraic_geometry/Scheme.lean#L27\">https://github.com/leanprover-community/mathlib/blob/93f74f255d8788c7bfb9b714f5be76a8fb4cd1ce/src/algebraic_geometry/Scheme.lean#L27</a> an isomorphism of ringed spaces?</p>",
        "id": 208300634,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1598583858
    },
    {
        "content": "<p>yes</p>",
        "id": 208300668,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598583917
    },
    {
        "content": "<p>an isomorphism in <code>SheafedSpace CommRing</code>.</p>",
        "id": 208300675,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598583933
    },
    {
        "content": "<p>Ah ok.</p>",
        "id": 208300683,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1598583941
    },
    {
        "content": "<p>I will make that more obvious by replacing one of the <code>_</code> with <code>CommRing</code> :-)</p>",
        "id": 208300692,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598583957
    },
    {
        "content": "<p>and add a comment while I'm at it!</p>",
        "id": 208300731,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598583972
    },
    {
        "content": "<p>added</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\">-</span>\n<span class=\"cm\">We define `Scheme` as a `X : LocallyRingedSpace`,</span>\n<span class=\"cm\">along with a proof that every point has an open neighbourhood `U`</span>\n<span class=\"cm\">so that that the restriction of `X` to `U` is isomorphic, as a space with a sheaf of commutative rings,</span>\n<span class=\"cm\">to `Spec.SheafedSpace R` for some `R : CommRing`.</span>\n\n<span class=\"cm\">(Note we&#39;re not asking in the definition that this is an isomorphism as locally ringed spaces,</span>\n<span class=\"cm\">although that is a consequence.)</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 208300866,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598584171
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>, <a href=\"https://github.com/leanprover-community/mathlib/issues/3961\">#3961</a>!</p>",
        "id": 208301766,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598585478
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> Thanks a lot!</p>",
        "id": 208303702,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598588328
    },
    {
        "content": "<p>We could even check the iso in <code>*Pre*SheafedSpace CommRing</code></p>",
        "id": 208303762,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598588402
    },
    {
        "content": "<p>That's mathematically easier, but you might need to jump throught extra projections in Lean</p>",
        "id": 208303809,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598588422
    },
    {
        "content": "<p>it's not actually any easier, because <code>SheafedSpace CommRing</code> is a full subcategory of <code>PresheafedSpace CommRing</code>.</p>",
        "id": 208303898,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598588562
    },
    {
        "content": "<p>so in fact it's even definitionally the same</p>",
        "id": 208303902,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598588570
    },
    {
        "content": "<p>but I agree that it still might be conceptually easier :-)</p>",
        "id": 208303907,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598588591
    },
    {
        "content": "<p>it costs one additional projection</p>",
        "id": 208303910,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598588600
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> It is easier, because it means that to build a scheme you don't need to check any sheaf condition</p>",
        "id": 208304233,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598589071
    },
    {
        "content": "<p>oh...</p>",
        "id": 208304299,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598589149
    },
    {
        "content": "<p>but then we would not want to extend <code>LocallyRingedSpace</code></p>",
        "id": 208304313,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598589159
    },
    {
        "content": "<p>perhaps it is better to leave the definition as is (perhaps in future make it even stronger!) but provide an alternative constructor that starts with just a <code>PresheafedSpace CommRing</code>, and the data for <code>affine</code></p>",
        "id": 208304338,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598589214
    },
    {
        "content": "<p>Right... so my initial idea was to just build an extra constructor.</p>",
        "id": 208304339,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598589219
    },
    {
        "content": "<p>we need gluing of sheaves first! :-)</p>",
        "id": 208304388,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598589245
    },
    {
        "content": "<p>You do need to check the sheaf condition on the whole space X.</p>",
        "id": 208304391,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1598589247
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> but the point is you know the sheaf condition on each affine (because it's Spec R, which satisfies the sheaf condition)</p>",
        "id": 208304406,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598589279
    },
    {
        "content": "<p>No, that doesn't follow.</p>",
        "id": 208304420,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1598589296
    },
    {
        "content": "<p>oh...</p>",
        "id": 208304428,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598589304
    },
    {
        "content": "<p>indeed</p>",
        "id": 208304429,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598589305
    },
    {
        "content": "<p>E.g. take a disjoint union of specs</p>",
        "id": 208304432,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1598589307
    },
    {
        "content": "<p>because we have nothing in the definition about the overlaps, which you would need for gluing</p>",
        "id": 208304440,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598589319
    },
    {
        "content": "<p>I see, so the best you could hope for is a constructor that takes a <code>PresheafedSpace CommRing</code>, and the data for affine, and some extra data about compatibility between the affines?</p>",
        "id": 208304496,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598589380
    },
    {
        "content": "<p>Ooops, I guess I messed up.</p>",
        "id": 208304503,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598589401
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> what you said originally is fine, it's the isomorphisms between the specs and the members of the open cover that can be iso's of presheaved spaces.</p>",
        "id": 208304538,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1598589460
    },
    {
        "content": "<p>in any case, if anyone wants to pair-program attempt gluing of sheaves at some point, let me know :-)</p>",
        "id": 208304581,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598589493
    },
    {
        "content": "<p>I guess I should first review a bunch of PRs</p>",
        "id": 208304590,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598589520
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> could you have a look at <a href=\"https://github.com/leanprover-community/mathlib/issues/3907\">#3907</a>? The diff is way too large</p>",
        "id": 208306863,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598592395
    },
    {
        "content": "<p>Fixed</p>",
        "id": 208306994,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598592590
    },
    {
        "content": "<p>The linter report on <a href=\"https://github.com/leanprover-community/mathlib/issues/3961\">#3961</a>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"> TYPES ARE MISSING INHABITED INSTANCES: -/</span>\n<span class=\"c1\">-- algebraic_geometry/Scheme.lean</span>\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">algebraic_geometry</span><span class=\"bp\">.</span><span class=\"n\">Scheme</span> <span class=\"c\">/-</span><span class=\"cm\"> inhabited instance missing -/</span>\n\n<span class=\"c1\">-- algebraic_geometry/locally_ringed_space.lean</span>\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">algebraic_geometry</span><span class=\"bp\">.</span><span class=\"n\">LocallyRingedSpace</span> <span class=\"c\">/-</span><span class=\"cm\"> inhabited instance missing -/</span>\n\n<span class=\"c1\">-- algebraic_geometry/sheafed_space.lean</span>\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">algebraic_geometry</span><span class=\"bp\">.</span><span class=\"n\">SheafedSpace</span> <span class=\"c\">/-</span><span class=\"cm\"> inhabited instance missing -/</span>\n</code></pre></div>",
        "id": 208339057,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598619784
    },
    {
        "content": "<p>It has a point. You can't really say you defined <code>Scheme</code> if you don't have a single example.</p>",
        "id": 208339215,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1598619849
    },
    {
        "content": "<p>I can make a stupid instance of <code>SheafedSpace</code> easily enough.</p>",
        "id": 208339224,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598619855
    },
    {
        "content": "<p>The empty scheme?</p>",
        "id": 208339651,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1598620090
    },
    {
        "content": "<p>Aka Spec 0</p>",
        "id": 208339982,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1598620226
    },
    {
        "content": "<p>I can't say we didn't use this trick for perfectoid spaces...</p>",
        "id": 208340120,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1598620291
    },
    {
        "content": "<p>The default CommRing is the trivial ring right? So this actually \"makes sense\".</p>",
        "id": 208340552,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1598620489
    },
    {
        "content": "<p>Does <code>CommRing</code> have a default instance? TIL</p>",
        "id": 208340710,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598620562
    },
    {
        "content": "<p>I mean <code>inhabited</code>.</p>",
        "id": 208340754,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1598620581
    },
    {
        "content": "<p>Well, we don't yet know that <code>Spec R</code> is a scheme...</p>",
        "id": 208341535,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598621001
    },
    {
        "content": "<p>The real message is you can put <code>@[nolint ...]</code> but getting <code>Spec R</code> has a scheme will be really urgent.</p>",
        "id": 208341649,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1598621051
    },
    {
        "content": "<p>The empty scheme should be fine, since the scheme condition is for all x in  X, blah blah.</p>",
        "id": 208342190,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1598621347
    },
    {
        "content": "<p>checking the sheaf condition is not as easy as it should be :-)</p>",
        "id": 208343190,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598621798
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> We have <code>Spec_as_LRS (CommRing.of pempty)</code></p>",
        "id": 208343317,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598621859
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> <span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> If you are interested, Kevin seems to be live streaming a review of these PRs on Discord...</p>",
        "id": 208343405,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598621891
    },
    {
        "content": "<p>no, that relies on sorries, we only have <code>Spec.SheafedSpace</code>. But that will do!</p>",
        "id": 208343429,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598621906
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> So you can use that LRS, and check it is a scheme.</p>",
        "id": 208343431,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598621906
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/status.20of.20schemes/near/208343317\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> We have <code>Spec_as_LRS (CommRing.of pempty)</code></p>\n</blockquote>\n<p>Thanks for the heads up!</p>",
        "id": 208343449,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1598621918
    },
    {
        "content": "<p>Ooh, you are right!</p>",
        "id": 208343452,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598621919
    },
    {
        "content": "<p>so I just need <code>prime_spectrum punit \\equiv pempty</code></p>",
        "id": 208343703,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598622047
    },
    {
        "content": "<p>I just realized that I don't know how to use discord...</p>",
        "id": 208344287,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1598622344
    },
    {
        "content": "<p>Oooh, that's just because you're too old <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span> <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span></p>",
        "id": 208344637,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598622484
    },
    {
        "content": "<p>It's designed for 14 year old kids that are addicted to video gaming</p>",
        "id": 208344666,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598622502
    },
    {
        "content": "<p>Sounds about right.... and I think I've aged 20 years over the last 5 months...</p>",
        "id": 208344684,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1598622516
    },
    {
        "content": "<p>But since Lean is just as addictive as a video game...</p>",
        "id": 208344703,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598622528
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/113488-general/topic/status.20of.20schemes/near/208344684\">said</a>:</p>\n<blockquote>\n<p>Sounds about right.... and I think I've aged 20 years over the last 5 months...</p>\n</blockquote>\n<p>Ooof, you shouldn't do that too often</p>",
        "id": 208344739,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598622554
    },
    {
        "content": "<p>It <em>is</em> a video game. But we have progress to make on graphics.</p>",
        "id": 208344749,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1598622559
    },
    {
        "content": "<p>yay, I have <code>inhabited Scheme</code>.</p>",
        "id": 208345872,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598623088
    },
    {
        "content": "<p>Is there a <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∅</mi></mrow><annotation encoding=\"application/x-tex\">\\varnothing</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66334em;vertical-align:-0.08167em;\"></span><span class=\"mord amsrm\">∅</span></span></span></span> emoji? <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 208346196,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1598623241
    },
    {
        "content": "<p>Now you can make one, we are allowed custom emojis.</p>",
        "id": 208346268,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1598623272
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/status.20of.20schemes/near/208343405\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> If you are interested, Kevin seems to be live streaming a review of these PRs on Discord...</p>\n</blockquote>\n<p>Sorry, I got distracted by Sylow's theorems...</p>",
        "id": 208365255,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598632235
    },
    {
        "content": "<p>We shouldn't need that Spec(zero ring) = empty to prove that the empty scheme is a scheme, right?</p>",
        "id": 208365400,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598632316
    },
    {
        "content": "<p>no, but you do need to do some work (even the empty space has a nontrivial covering family, namely the empty cover of the empty set)</p>",
        "id": 208366388,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598632820
    },
    {
        "content": "<p>The structure sheaf is now in mathlib</p>",
        "id": 208451302,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598731305
    },
    {
        "content": "<p>We should have the category of schemes this weekend!</p>",
        "id": 208451341,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598731323
    },
    {
        "content": "<p>That would be a really nice milestone!</p>",
        "id": 208451355,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1598731365
    },
    {
        "content": "<p>Next step will be to port our definition of perfectoid spaces to mathlib...</p>",
        "id": 208451530,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1598731671
    },
    {
        "content": "<p>This is certainly looking much closer to being feasible than a few weeks ago.</p>",
        "id": 208455861,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598738138
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/3961\">#3961</a> ... LGTM</p>",
        "id": 208516592,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598843849
    },
    {
        "content": "<p>Bryan had a few more comments, which I've just addressed.</p>",
        "id": 208519910,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598848571
    },
    {
        "content": "<p>Thanks! I just added one more tiny comment.</p>",
        "id": 208520349,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1598849457
    },
    {
        "content": "<p>I hit the commit button on that tiny comment (-;</p>",
        "id": 208520735,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598850195
    },
    {
        "content": "<p>And I told bors what I think about all this.</p>",
        "id": 208521000,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1598850668
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/leanprover-community.github.io/pull/122\">https://github.com/leanprover-community/leanprover-community.github.io/pull/122</a><br>\nPlease feel free to make this PR to the overview page more complete</p>",
        "id": 208521694,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598851925
    },
    {
        "content": "<p>(The build should pass after <a href=\"https://github.com/leanprover-community/mathlib/issues/3961\">#3961</a> lands.)</p>",
        "id": 208522721,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1598853686
    },
    {
        "content": "<p>I would prefer  a top-level \"Geometry\" with bot the affine stuff, manifolds and algebraic geometry.</p>",
        "id": 208523147,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1598854214
    },
    {
        "content": "<p>\"Differentiable manifolds\" in analysis is already very weird, putting schemes in general  algebra may be even worse.</p>",
        "id": 208523165,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1598854260
    },
    {
        "content": "<p>Ok, let's reorganise a bit</p>",
        "id": 208523184,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598854287
    },
    {
        "content": "<p>Could you do it Johan?</p>",
        "id": 208523264,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1598854372
    },
    {
        "content": "<p>Yup, I just did <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span></p>",
        "id": 208523350,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598854488
    },
    {
        "content": "<p>Could you fix it somehow ?</p>",
        "id": 208525673,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1598857438
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> I think we should just rerun. Because schemes are now in mathlib</p>",
        "id": 208526128,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598857809
    },
    {
        "content": "<p>\"Pull requests that have a failing status can’t be merged on a phone. \"</p>",
        "id": 208526195,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1598857896
    },
    {
        "content": "<p>Ah, I think we have to wait for the docs to build again since the site build uses the exported JSON from there.</p>",
        "id": 208526290,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1598857953
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span> Can we cheat and make it build faster on this day?</p>",
        "id": 208526314,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598857988
    },
    {
        "content": "<p>Or do we have to wait until the bot thinks it is time?</p>",
        "id": 208526318,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598857998
    },
    {
        "content": "<p>If we can have this go live in 15 minutes, then <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> can demo this in his talk (-;</p>",
        "id": 208526334,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598858016
    },
    {
        "content": "<p>No pressure <span aria-label=\"stuck out tongue wink\" class=\"emoji emoji-1f61c\" role=\"img\" title=\"stuck out tongue wink\">:stuck_out_tongue_wink:</span></p>",
        "id": 208526360,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598858037
    },
    {
        "content": "<p>Let me try re-running one of the doc build actions here: <a href=\"https://github.com/leanprover-community/doc-gen/actions\">https://github.com/leanprover-community/doc-gen/actions</a></p>",
        "id": 208526436,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1598858082
    },
    {
        "content": "<p>The docs seem to take a random amount of time between 5 and 20 minutes to build, so I'm not sure if we'll make it <span aria-label=\"sweat\" class=\"emoji emoji-1f613\" role=\"img\" title=\"sweat\">:sweat:</span></p>",
        "id": 208526568,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1598858199
    },
    {
        "content": "<p>It sometimes also takes 10-20 minutes for github to update the docs website.</p>",
        "id": 208526610,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1598858271
    },
    {
        "content": "<p>Well, I guess Patrick will have to see halfway his talk whether it's done or not (-;</p>",
        "id": 208526669,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598858318
    },
    {
        "content": "<p>You are too fast with restarting the CI.</p>",
        "id": 208527436,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1598858994
    },
    {
        "content": "<p>Yeah, the doc build finished, but the website hasn't updated yet.</p>",
        "id": 208527471,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1598859003
    },
    {
        "content": "<p>Oh, it looks like it should work now.</p>",
        "id": 208527500,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1598859029
    },
    {
        "content": "<p>Yeah it built!!!</p>",
        "id": 208528092,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1598859577
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib-overview.html\">The new overview is live!</a></p>",
        "id": 208528248,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1598859756
    },
    {
        "content": "<p>We did all the effort for... <em>two</em> words on this page?</p>",
        "id": 208528266,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1598859782
    },
    {
        "content": "<p>It was reorganized so that there's a new section \"Geometry\", I think.</p>",
        "id": 208528350,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1598859852
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span> <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> Thanks a lot!</p>",
        "id": 208528631,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598860088
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> good luck with your talk</p>",
        "id": 208528638,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598860096
    },
    {
        "content": "<p>You know what? I was running out of time and didn't have time to show the overview page... <span aria-label=\"blushing\" class=\"emoji emoji-1f633\" role=\"img\" title=\"blushing\">:blushing:</span></p>",
        "id": 208533780,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1598864191
    },
    {
        "content": "<p>...</p>",
        "id": 208535357,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598865419
    },
    {
        "content": "<p>The order in the new section is a bit surprising, maybe we should go up and list things as \"Affine and Euclidean geometry\", \"Algebraic geometry\" and \"Differential geometry\".</p>",
        "id": 208535698,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1598865639
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112165\">rss-bot</span> <a href=\"#narrow/stream/116290-rss/topic/Recent.20Commits.20to.20mathlib.3Amaster/near/209921649\">said</a>:</p>\n<blockquote>\n<p><strong><a href=\"https://github.com/leanprover-community/mathlib/commit/5d35e626086c4e1639e49cd7cf574bc48592f554\">feat(algebraic_geometry/*): Gamma the global sections functor (#4126)</a></strong><br>\nfeat(algebraic_geometry/*): Gamma the global sections functor (<a href=\"https://github.com/leanprover-community/mathlib/issues/4126\">#4126</a>)<br>\n<a href=\"https://github.com/leanprover-community/mathlib/commit/5d35e626086c4e1639e49cd7cf574bc48592f554\">https://github.com/leanprover-community/mathlib/commit/5d35e626086c4e1639e49cd7cf574bc48592f554</a></p>\n</blockquote>",
        "id": 209924968,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1599994145
    },
    {
        "content": "<p>Hey, it's been a while. So happy to see that schemes are finally in mathlib and done properly, using the category theory library.</p>",
        "id": 214162686,
        "sender_full_name": "Ramon Fernandez Mir",
        "timestamp": 1603358984
    },
    {
        "content": "<p>Is anyone working on making Spec a functor? Was thinking of giving it a go</p>",
        "id": 214162850,
        "sender_full_name": "Ramon Fernandez Mir",
        "timestamp": 1603359071
    },
    {
        "content": "<p>I don't think anyone is actively working on it atm</p>",
        "id": 214163520,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603359478
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132858\">@Ramon Fernandez Mir</span> Also, welcome back!</p>",
        "id": 214163562,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603359485
    },
    {
        "content": "<p>Fantastic!</p>",
        "id": 214253494,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1603404104
    },
    {
        "content": "<p>I've been gearing up to prove that morphisms of sheaves are epi/mono/iso iff they are stalkwise, on the way to doing sheafification properly, but there's been a bit of hiatus in the progress.</p>",
        "id": 214253585,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1603404145
    },
    {
        "content": "<p>I also proved a while back that filtered colimits commute with finite limits, and wanted to use this to show that the forgetful functors (in particular, from CommRing to Type) preserved stalks, but again I have stalled on this for a while.</p>",
        "id": 214253669,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1603404209
    },
    {
        "content": "<p>We do now have cofinal functors, although I don't think I got around to stating that open neighbourhoods of x within U were cofinal in open nhds of x.</p>",
        "id": 214253781,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1603404281
    },
    {
        "content": "<p>This is probably essential somewhere soon. :-)</p>",
        "id": 214253793,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1603404290
    },
    {
        "content": "<p>I might try some of the exercises in chapter 2 of Hartshorne when my course is done (1 week to go) but we need sheafification of presheaves of abelian groups to state a lot of them</p>",
        "id": 214278490,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1603434940
    },
    {
        "content": "<p>I take the liberty to revive this thread: I'm currently working on the adjunction between Spec and Gamma, following the approach in the stacks project <a href=\"https://stacks.math.columbia.edu/tag/01HX\">here</a>. I realized that in order to prove <a href=\"https://stacks.math.columbia.edu/tag/01HZ\">this lemma</a>, I need a version of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/Top.presheaf.germ_exist\">docs#Top.presheaf.germ_exist</a> for CommRing-valued sheaves. For that, it would suffice to know that the forgetful functor of CommRing preserves stalks (or more generally, filtered colimits). Have you ever gotten around to prove this <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> ? If not, I could try to adopt this project if that's okay. Is the code on <a href=\"https://github.com/leanprover-community/mathlib/tree/preserves_filtered_colimits\">branch#preserves_filtered_colimits</a> the latest attempt? Any advice on how to continue from here would be helpful!</p>",
        "id": 252005927,
        "sender_full_name": "Justus Springer",
        "timestamp": 1630767234
    },
    {
        "content": "<p>Sorry, I didn't make further progress.</p>",
        "id": 252040085,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1630805588
    }
]