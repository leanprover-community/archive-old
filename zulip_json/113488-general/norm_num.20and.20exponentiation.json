[
    {
        "content": "<p>This is very slow without the <code>change</code>, and fast (~1s) with it. I don't really understand <code>norm_num</code> so I'm at a loss as to why.<br>\nThe slow version finishes the tactic quickly, but then it seems that the resulting proof is expensive to check.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"mi\">2</span><span class=\"err\">^</span><span class=\"mi\">36</span> <span class=\"bp\">=</span> <span class=\"mi\">68719476736</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n  <span class=\"c1\">-- change 1*2*2*2*2*2*2*2*2*2*2*2*2*2*2*2*2*2*2*2*2*2*2*2*2*2*2*2*2*2*2*2*2*2*2*2*2 = _,</span>\n  <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 172250816,
        "sender_full_name": "Reid Barton",
        "timestamp": 1564686267
    },
    {
        "content": "<p>It's doing kernel computation when it shouldn't -- it's instant if you do it in an arbitrary ring instead of <code>nat</code>. Not sure why.</p>",
        "id": 172251417,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1564686641
    },
    {
        "content": "<p>No support for <code>nat.pow</code> I guess. The <code>pow</code>instance for nat is not <code>monoid.pow</code></p>",
        "id": 172251599,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1564686741
    },
    {
        "content": "<p>I don't think that's it. <code>norm_num</code> finds the same proof for both <code>nat</code> and the arbitrary ring.</p>",
        "id": 172251918,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1564686946
    }
]