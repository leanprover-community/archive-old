[
    {
        "content": "<p>Are there people here that think the following is a nice game to play?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>  <span class=\"o\">[</span><span class=\"n\">linear_order</span> <span class=\"n\">α</span><span class=\"o\">]</span>  <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span>  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span>   <span class=\"o\">:</span>\n  <span class=\"n\">Icc</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"err\">\\</span> <span class=\"n\">Ioo</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span>\n</code></pre></div>",
        "id": 205267330,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1595958183
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">don&#39;t</span> <span class=\"n\">know</span> <span class=\"n\">how</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">placeholder</span>\n<span class=\"kn\">context</span><span class=\"o\">:</span>\n<span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"err\">?</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">linear_order</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n<span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n<span class=\"err\">⊢</span> <span class=\"kt\">Type</span> <span class=\"err\">?</span>\n</code></pre></div>\n\n\n<p>after</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">intervals</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n</code></pre></div>",
        "id": 205267711,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595958367
    },
    {
        "content": "<p>I'm sorry, Johan, I can't reproduce that.</p>",
        "id": 205267879,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1595958469
    },
    {
        "content": "<p>And I'm also sorry for not including the import and open.</p>",
        "id": 205267944,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1595958489
    },
    {
        "content": "<p>Same as Johan.</p>",
        "id": 205267945,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1595958489
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">intervals</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>  <span class=\"o\">[</span><span class=\"n\">linear_order</span> <span class=\"n\">α</span><span class=\"o\">]</span>  <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span>  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span>   <span class=\"o\">:</span>\n  <span class=\"n\">Icc</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"err\">\\</span> <span class=\"n\">Ioo</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 205267984,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1595958514
    },
    {
        "content": "<p>This works here.</p>",
        "id": 205267997,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1595958526
    },
    {
        "content": "<p>On mathlib 9e841c81756b12d797f96baed2158ad12233e414</p>",
        "id": 205268043,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1595958556
    },
    {
        "content": "<p>Putting a type ascription on the RHS solves it for me</p>",
        "id": 205268187,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595958621
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>  <span class=\"o\">[</span><span class=\"n\">linear_order</span> <span class=\"n\">α</span><span class=\"o\">]</span>  <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span>  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span>  <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">Icc</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"err\">\\</span> <span class=\"n\">Ioo</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"o\">({</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">h&#39;</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h&#39;</span><span class=\"o\">,</span> <span class=\"n\">ne_of_gt</span> <span class=\"n\">h&#39;</span><span class=\"o\">],</span>\n    <span class=\"n\">split</span><span class=\"bp\">;</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">le_antisymm_iff</span><span class=\"o\">,</span> <span class=\"n\">le_of_lt</span> <span class=\"n\">h&#39;</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">contextual</span> <span class=\"o\">:=</span> <span class=\"n\">tt</span><span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">push_neg</span> <span class=\"n\">at</span> <span class=\"n\">h&#39;</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h&#39;</span><span class=\"o\">,</span> <span class=\"n\">ne_of_lt</span> <span class=\"o\">(</span><span class=\"n\">lt_of_le_of_lt</span> <span class=\"n\">h&#39;</span> <span class=\"n\">h</span><span class=\"o\">),</span> <span class=\"n\">le_trans</span> <span class=\"n\">h&#39;</span> <span class=\"o\">(</span><span class=\"n\">le_of_lt</span> <span class=\"n\">h</span><span class=\"o\">)],</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">le_antisymm_iff</span><span class=\"o\">,</span> <span class=\"n\">h&#39;</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 205268692,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1595958911
    },
    {
        "content": "<p>Thank you very much Sébastien. It's very depressing to see, but helpful.</p>",
        "id": 205268856,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1595959006
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>  <span class=\"o\">[</span><span class=\"n\">linear_order</span> <span class=\"n\">α</span><span class=\"o\">]</span>  <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span>  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span>  <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">Icc</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"err\">\\</span> <span class=\"n\">Ioo</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"o\">({</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">classical</span><span class=\"o\">,</span> <span class=\"c1\">-- because, duh</span>\n  <span class=\"c1\">-- tidy says:</span>\n  <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">fsplit</span><span class=\"o\">,</span> <span class=\"n\">work_on_goal</span> <span class=\"mi\">0</span> <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">a_1</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">a_1</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">a_1_left</span> <span class=\"o\">},</span> <span class=\"n\">work_on_goal</span> <span class=\"mi\">1</span> <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">a_1</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">a_1</span><span class=\"o\">,</span> <span class=\"n\">work_on_goal</span> <span class=\"mi\">0</span> <span class=\"o\">{</span> <span class=\"n\">induction</span> <span class=\"n\">a_1</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">fsplit</span><span class=\"o\">,</span> <span class=\"n\">work_on_goal</span> <span class=\"mi\">0</span> <span class=\"o\">{</span> <span class=\"n\">refl</span> <span class=\"o\">}</span> <span class=\"o\">},</span> <span class=\"n\">work_on_goal</span> <span class=\"mi\">1</span> <span class=\"o\">{</span> <span class=\"n\">induction</span> <span class=\"n\">a_1</span><span class=\"o\">,</span> <span class=\"n\">fsplit</span><span class=\"o\">,</span> <span class=\"n\">work_on_goal</span> <span class=\"mi\">0</span> <span class=\"o\">{</span> <span class=\"n\">fsplit</span><span class=\"o\">,</span> <span class=\"n\">work_on_goal</span> <span class=\"mi\">1</span> <span class=\"o\">{</span> <span class=\"n\">refl</span> <span class=\"o\">}</span> <span class=\"o\">},</span> <span class=\"n\">work_on_goal</span> <span class=\"mi\">1</span> <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">a_1</span><span class=\"o\">,</span> <span class=\"n\">refl</span> <span class=\"o\">}</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">or_iff_not_imp_left</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span> <span class=\"n\">a_1</span><span class=\"o\">,</span> <span class=\"c1\">-- tidy says: -- :sad:</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">refine</span> <span class=\"n\">lt_of_le_of_ne</span> <span class=\"n\">a_1_left_left</span> <span class=\"o\">(</span><span class=\"n\">ne</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"n\">a_1</span><span class=\"o\">),</span> <span class=\"c1\">-- library_search</span>\n    <span class=\"c1\">-- tidy says: no progress</span>\n    <span class=\"n\">apply</span> <span class=\"n\">le_antisymm</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">assumption</span><span class=\"o\">,</span> <span class=\"o\">},</span> <span class=\"c1\">-- tidy</span>\n    <span class=\"o\">{</span> <span class=\"c1\">-- tidy takes a looooong time</span>\n      <span class=\"n\">solve_by_elim</span><span class=\"o\">,</span> <span class=\"o\">},</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"n\">le_of_lt</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">},</span> <span class=\"c1\">-- library_search</span>\n  <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"n\">le_of_lt</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">},</span> <span class=\"c1\">-- library_search</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 205269011,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595959097
    },
    {
        "content": "<p>Out of curiousity... is there a reason for double spacing the assumptions?</p>",
        "id": 205269214,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595959209
    },
    {
        "content": "<p>I have a much better proof:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">auto_is_strong</span><span class=\"o\">:</span>\n  <span class=\"n\">fixes</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">x</span><span class=\"bp\">::</span><span class=\"s2\">&quot;&#39;a::linorder&quot;</span>\n  <span class=\"n\">assumes</span> <span class=\"s2\">&quot;a &lt; b&quot;</span>\n  <span class=\"n\">shows</span> <span class=\"s2\">&quot;(x ∈ ({a .. b} - {a &lt;..&lt; b})) ⟷ (x ∈ {a, b})&quot;</span>\n<span class=\"kn\">using</span> <span class=\"err\">‹</span><span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"err\">›</span> <span class=\"k\">by</span> <span class=\"n\">auto</span>\n</code></pre></div>",
        "id": 205269270,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1595959243
    },
    {
        "content": "<p>Is auto not just relying on a lemma that is already in the library?</p>",
        "id": 205269367,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595959296
    },
    {
        "content": "<p>All the interval lemmas in Isabelle library are proved by auto like this, and none of them is marked simp or whatever.</p>",
        "id": 205269458,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1595959329
    },
    {
        "content": "<p>It's a bit sad that <code>solve_by_elim [le_antisymm]</code> failed after my <code>have</code> statement</p>",
        "id": 205269740,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595959456
    },
    {
        "content": "<p>I almost asked the Isabelle question explicitly but I thought it was clear. I means there is hope.</p>",
        "id": 205269859,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1595959532
    },
    {
        "content": "<p>I understand why all those Isabelle people at the CICM conference are laughing at us. But we can hope that Lean will improve in this direction whereas they have no hope to get rid of their foundational issues, so let's wait.</p>",
        "id": 205270016,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1595959602
    },
    {
        "content": "<p>Slightly \"better\" version:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>  <span class=\"o\">[</span><span class=\"n\">linear_order</span> <span class=\"n\">α</span><span class=\"o\">]</span>  <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span>  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span>  <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">Icc</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"err\">\\</span> <span class=\"n\">Ioo</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"o\">({</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">classical</span><span class=\"o\">,</span> <span class=\"c1\">-- because, duh</span>\n  <span class=\"c1\">-- tidy says:</span>\n  <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">fsplit</span><span class=\"o\">,</span> <span class=\"n\">work_on_goal</span> <span class=\"mi\">0</span> <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">a_1</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">a_1</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">a_1_left</span> <span class=\"o\">},</span> <span class=\"n\">work_on_goal</span> <span class=\"mi\">1</span> <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">a_1</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">a_1</span><span class=\"o\">,</span> <span class=\"n\">work_on_goal</span> <span class=\"mi\">0</span> <span class=\"o\">{</span> <span class=\"n\">induction</span> <span class=\"n\">a_1</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">fsplit</span><span class=\"o\">,</span> <span class=\"n\">work_on_goal</span> <span class=\"mi\">0</span> <span class=\"o\">{</span> <span class=\"n\">refl</span> <span class=\"o\">}</span> <span class=\"o\">},</span> <span class=\"n\">work_on_goal</span> <span class=\"mi\">1</span> <span class=\"o\">{</span> <span class=\"n\">induction</span> <span class=\"n\">a_1</span><span class=\"o\">,</span> <span class=\"n\">fsplit</span><span class=\"o\">,</span> <span class=\"n\">work_on_goal</span> <span class=\"mi\">0</span> <span class=\"o\">{</span> <span class=\"n\">fsplit</span><span class=\"o\">,</span> <span class=\"n\">work_on_goal</span> <span class=\"mi\">1</span> <span class=\"o\">{</span> <span class=\"n\">refl</span> <span class=\"o\">}</span> <span class=\"o\">},</span> <span class=\"n\">work_on_goal</span> <span class=\"mi\">1</span> <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">a_1</span><span class=\"o\">,</span> <span class=\"n\">refl</span> <span class=\"o\">}</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">or_iff_not_imp_left</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span> <span class=\"n\">a_1</span><span class=\"o\">,</span> <span class=\"c1\">-- tidy -- :sad:</span>\n    <span class=\"n\">apply</span> <span class=\"n\">le_antisymm</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">solve_by_elim</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"c1\">-- solve_by_elim fails</span>\n      <span class=\"n\">apply_assumption</span><span class=\"o\">,</span>\n      <span class=\"n\">refine</span> <span class=\"n\">lt_of_le_of_ne</span> <span class=\"n\">a_1_left_left</span> <span class=\"o\">(</span><span class=\"n\">ne</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"n\">a_1</span><span class=\"o\">),</span> <span class=\"c1\">-- library_search</span>\n       <span class=\"o\">},</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"n\">le_of_lt</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">},</span> <span class=\"c1\">-- library_search</span>\n  <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"n\">le_of_lt</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">},</span> <span class=\"c1\">-- library_search</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 205270038,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595959618
    },
    {
        "content": "<p>I'm sorry, trying to put that lemma in the proper place in mathlib, I realized it's already there <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span>. So it's again automation failure. The point is my inequality is too strong, a less or equal is enough.</p>",
        "id": 205270181,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1595959694
    },
    {
        "content": "<p>And also <code>set.intervals.basic</code> is missing a <em>lot</em> of <code>simp</code> attributes.</p>",
        "id": 205270280,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1595959746
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">intervals</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_order</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">Icc</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"err\">\\</span> <span class=\"n\">Ioo</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"n\">Icc_diff_Ioo_same</span> <span class=\"err\">$</span> <span class=\"n\">le_of_lt</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 205308580,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1595985094
    }
]