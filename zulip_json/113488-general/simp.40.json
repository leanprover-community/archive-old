[
    {
        "content": "<p>Sometimes simp lemmas need local assumptions for applicability, and what I've usually done is add them to the simp set manually. I remembered today that there's also the <code>discharger</code> option, which you can supply with a tactic that's run to deal with extra goals that crop up.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- fails</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"n\">m'</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n\n<span class=\"c1\">-- succeeds</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"n\">m'</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"n\">m'</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">{</span> <span class=\"n\">discharger</span> <span class=\"o\">:=</span> <span class=\"n\">tactic.assumption</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p><span class=\"user-mention\" data-user-id=\"374083\">@Scott Kovach</span> and I thought it might be interesting if this were more accessible, so we added a <code>@</code> flag to join <code>!</code> and <code>?</code>: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- succeeds</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"n\">m'</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">mysimp</span><span class=\"bp\">@</span>\n</code></pre></div>\n<p>In addition to setting the discharger, it also sets <code>contextual := tt</code>, since these are sort of like additional assumptions.</p>\n<p>Is this a good idea to have in <code>simp</code>? Or is it just a step down the road of inscrutability?</p>",
        "id": 265233883,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1639696696
    },
    {
        "content": "<p>Implementation:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">interactive</span>\n<span class=\"n\">setup_tactic_parser</span>\n\n<span class=\"kd\">@[derive [has_reflect, decidable_eq]</span><span class=\"o\">]</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">mysimp_flags</span>\n<span class=\"bp\">|</span> <span class=\"n\">use_iota_eqn</span>\n<span class=\"bp\">|</span> <span class=\"n\">discharge_assumptions</span>\n<span class=\"bp\">|</span> <span class=\"n\">trace_lemmas</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">mysimp_flags.apply</span> <span class=\"o\">:</span> <span class=\"n\">mysimp_flags</span> <span class=\"bp\">→</span> <span class=\"n\">simp_config_ext</span> <span class=\"bp\">→</span> <span class=\"n\">simp_config_ext</span>\n<span class=\"bp\">|</span> <span class=\"n\">mysimp_flags.use_iota_eqn</span> <span class=\"n\">cfg</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">iota_eqn</span> <span class=\"o\">:=</span> <span class=\"n\">tt</span><span class=\"o\">,</span> <span class=\"bp\">..</span><span class=\"n\">cfg</span> <span class=\"o\">}</span>\n<span class=\"bp\">|</span> <span class=\"n\">mysimp_flags.discharge_assumptions</span> <span class=\"n\">cfg</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">contextual</span> <span class=\"o\">:=</span> <span class=\"n\">tt</span><span class=\"o\">,</span> <span class=\"n\">discharger</span> <span class=\"o\">:=</span> <span class=\"n\">tactic.assumption</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">cfg.discharger</span><span class=\"o\">,</span> <span class=\"bp\">..</span><span class=\"n\">cfg</span> <span class=\"o\">}</span>\n<span class=\"bp\">|</span> <span class=\"n\">mysimp_flags.trace_lemmas</span> <span class=\"n\">cfg</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">trace_lemmas</span> <span class=\"o\">:=</span> <span class=\"n\">tt</span><span class=\"o\">,</span> <span class=\"bp\">..</span><span class=\"n\">cfg</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">mysimp</span>\n  <span class=\"o\">(</span><span class=\"n\">flags</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"bp\">$</span>\n    <span class=\"o\">((</span><span class=\"n\">with_desc</span> <span class=\"s2\">\"!\"</span> <span class=\"bp\">$</span> <span class=\"n\">tk</span> <span class=\"s2\">\"!\"</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">pure</span> <span class=\"n\">mysimp_flags.use_iota_eqn</span><span class=\"o\">)</span>\n    <span class=\"bp\">&lt;|&gt;</span> <span class=\"o\">(</span><span class=\"n\">with_desc</span> <span class=\"s2\">\"@\"</span> <span class=\"bp\">$</span> <span class=\"n\">tk</span> <span class=\"s2\">\"@\"</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">pure</span> <span class=\"n\">mysimp_flags.discharge_assumptions</span><span class=\"o\">)</span>\n    <span class=\"bp\">&lt;|&gt;</span> <span class=\"o\">(</span><span class=\"n\">with_desc</span> <span class=\"s2\">\"?\"</span> <span class=\"bp\">$</span> <span class=\"n\">tk</span> <span class=\"s2\">\"?\"</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">pure</span> <span class=\"n\">mysimp_flags.trace_lemmas</span><span class=\"o\">))</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">no_dflt</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">only_flag</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">simp_arg_list</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">attr_names</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">with_ident_list</span><span class=\"o\">)</span>\n              <span class=\"o\">(</span><span class=\"n\">locat</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">location</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">cfg</span> <span class=\"o\">:</span> <span class=\"n\">simp_config_ext</span> <span class=\"o\">:=</span> <span class=\"o\">{})</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"k\">let</span> <span class=\"n\">cfg</span> <span class=\"o\">:=</span> <span class=\"n\">flags.foldr</span> <span class=\"n\">mysimp_flags.apply</span> <span class=\"n\">cfg</span> <span class=\"k\">in</span>\n<span class=\"n\">propagate_tags</span> <span class=\"bp\">$</span>\n<span class=\"k\">do</span> <span class=\"n\">lms</span> <span class=\"bp\">←</span> <span class=\"n\">simp_core</span> <span class=\"n\">cfg.to_simp_config</span> <span class=\"n\">cfg.discharger</span> <span class=\"n\">no_dflt</span> <span class=\"n\">hs</span> <span class=\"n\">attr_names</span> <span class=\"n\">locat</span><span class=\"o\">,</span>\n  <span class=\"k\">if</span> <span class=\"n\">cfg.trace_lemmas</span> <span class=\"k\">then</span>\n    <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">flags.mem</span> <span class=\"n\">mysimp_flags.discharge_assumptions</span> <span class=\"k\">then</span> <span class=\"s2\">\"@\"</span> <span class=\"k\">else</span> <span class=\"s2\">\"\"</span>\n    <span class=\"k\">in</span> <span class=\"n\">trace</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"s2\">\"Try this: mysimp\"</span> <span class=\"bp\">++</span> <span class=\"n\">a</span> <span class=\"bp\">++</span> <span class=\"s2\">\" only \"</span><span class=\"o\">)</span> <span class=\"bp\">++</span> <span class=\"n\">to_fmt</span> <span class=\"n\">lms.to_list</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"n\">skip</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">interactive</span>\n<span class=\"kd\">end</span> <span class=\"n\">tactic</span>\n</code></pre></div>",
        "id": 265233898,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1639696707
    },
    {
        "content": "<p>Is <code>simp { discharger := tactic.assumption }</code> different to <code>simp [*]</code>?</p>",
        "id": 265234067,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639696833
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> Good point, I didn't realize <code>[*]</code> and <code>simp only</code> interacted correctly. (Or rather, I think I might have forgotten about <code>[*]</code>.)</p>",
        "id": 265234909,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1639697416
    },
    {
        "content": "<p>I'm not sure what the differences between <code>simp {discharger := tactic.assumption}</code> and <code>simp [*]</code> might be, if any.</p>",
        "id": 265235001,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1639697472
    },
    {
        "content": "<p>IIRC simp uses simp as the default discharger, so <code>simp [*]</code> will usually prove a bit more than <code>simp {discharger:=assumption}</code>.</p>",
        "id": 265535394,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1639990133
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> As I understand it, simp effectively uses <code>discharger &lt;|&gt; simp</code> to discharge goals, and since the default value for <code>discharger</code> is <code>tactic.fail</code> it generally works the way you describe, though <code>simp [*] {discharger := tactic.assumption}</code> should prove at least as much as <code>simp [*]</code> (and possibly exactly as much).</p>",
        "id": 265610424,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1640031025
    }
]