[
    {
        "content": "<p>Is there a name in Lean for the list (or multiset, or finset)<code>[a,a+1,a+2,...,b-1]</code>?</p>",
        "id": 124393624,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522374708
    },
    {
        "content": "<p>python <code>range(a,b)</code></p>",
        "id": 124393662,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522374726
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>def range : nat → nat → list nat\n| a 0     := []\n| 0 1     := [0]\n| a 1     := []\n| a (b+2) := if b+1 &lt; a then [] else range a (b+1) ++ [nat.succ b]\n</pre></div>",
        "id": 124393957,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522375327
    },
    {
        "content": "<p>You will notice that most of the properties of <code>list.range</code> are proven by using an auxiliary definition <code>list.range'</code>, which is very similar to the list you have described. <code>list.range' s n</code> is the list <code>[s, s+1, ..., s+n-1]</code>, so your <code>range</code> function is <code>list.range' a (b-a)</code>. The definition of range' using start and length instead of start and end is of course because it has better properties wrt induction - it's not possible to have a range that goes to a value less than it starts with, and it's best to encode that directly in the definition</p>",
        "id": 124394370,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522376311
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>def range : nat → nat → list nat\n| a 0     := []\n| a (b+1) := if b &lt; a then [] else range a b ++ [b]\n</pre></div>",
        "id": 124394477,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522376594
    }
]