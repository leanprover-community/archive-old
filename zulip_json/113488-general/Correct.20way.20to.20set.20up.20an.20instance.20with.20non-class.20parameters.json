[
    {
        "content": "<p>I'm currently trying to prove the following theorem </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory.adjoin_root</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">polynomial</span> <span class=\"n\">localization</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">]</span>\n   <span class=\"o\">[</span><span class=\"n\">is_domain</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_integrally_closed</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">is_integral</span> <span class=\"n\">R</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">minpoly</span> <span class=\"o\">(</span><span class=\"n\">fraction_ring</span> <span class=\"n\">R</span><span class=\"o\">)</span>  <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">S</span>\n <span class=\"o\">(</span><span class=\"n\">fraction_ring</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"n\">a</span><span class=\"o\">)</span>  <span class=\"bp\">âˆ£</span> <span class=\"o\">(</span><span class=\"n\">map_ring_hom</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">fraction_ring</span> <span class=\"n\">R</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">minpoly</span> <span class=\"n\">R</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>but for the statement to work  I need the instance <code>algebra (fraction_ring R ) (fraction_ring S)</code>. I wasn't able to find it in mathlib so I've tried to make my own, which yields the following MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory.adjoin_root</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">polynomial</span> <span class=\"n\">localization</span>\n\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">]</span>\n   <span class=\"o\">[</span><span class=\"n\">is_domain</span> <span class=\"n\">S</span><span class=\"o\">]</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">frac_algebra_of_inj</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">function.injective</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">)):</span>\n  <span class=\"n\">algebra</span> <span class=\"o\">(</span><span class=\"n\">fraction_ring</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fraction_ring</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">ring_hom.to_algebra</span> <span class=\"o\">(</span><span class=\"n\">is_fraction_ring.map</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">instance</span> <span class=\"n\">problematic_instance</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">function.injective</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">)):</span>\n  <span class=\"n\">algebra</span> <span class=\"o\">(</span><span class=\"n\">fraction_ring</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fraction_ring</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">frac_algebra_of_inj</span> <span class=\"n\">h</span>\n\n<span class=\"bp\">#</span><span class=\"n\">lint</span> <span class=\"c\">/-</span><span class=\"cm\"> IMPOSSIBLE INSTANCES FOUND.</span>\n<span class=\"cm\">These instances have an argument that cannot be found during type-class resolution,</span>\n<span class=\"cm\">and therefore can never succeed. Either mark the arguments with square brackets</span>\n<span class=\"cm\">(if it is a class), or don't make it an instance. -/</span>\n</code></pre></div>\n<p>Since this instance is wrong according to <code>lint</code>, what should I do?</p>",
        "id": 316611170,
        "sender_full_name": "Paul Lezeau",
        "timestamp": 1671380756
    },
    {
        "content": "<p>Change <code>h</code> to a <code>fact</code></p>",
        "id": 316611455,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671380935
    },
    {
        "content": "<p>But note that this instance <em>might</em> bad for reasons not found by the linter; it likely creates a diamond for the action of <code>fraction_ring R</code> on <code>fraction_ring (fraction_ring R))</code></p>",
        "id": 316611661,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671381049
    },
    {
        "content": "<p>If anyone ever creates <code>fraction_ring (fraction_ring R))</code> then they deserve the pain.</p>",
        "id": 316611823,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671381134
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/Correct.20way.20to.20set.20up.20an.20instance.20with.20non-class.20parameters/near/316611455\">said</a>:</p>\n<blockquote>\n<p>Change <code>h</code> to a <code>fact</code></p>\n</blockquote>\n<p>Ok thanks, I'll try that!</p>",
        "id": 316612328,
        "sender_full_name": "Paul Lezeau",
        "timestamp": 1671381422
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/Correct.20way.20to.20set.20up.20an.20instance.20with.20non-class.20parameters/near/316611661\">said</a>:</p>\n<blockquote>\n<p>But note that this instance <em>might</em> bad for reasons not found by the linter; it likely creates a diamond for the action of <code>fraction_ring R</code> on <code>fraction_ring (fraction_ring R))</code></p>\n</blockquote>\n<p>Yeah I was planning on making it into a local attribute once I managed to get it work!</p>",
        "id": 316612400,
        "sender_full_name": "Paul Lezeau",
        "timestamp": 1671381462
    }
]