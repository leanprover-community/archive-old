[
    {
        "content": "<p>Under what conditions is the quotient  <code>G ⧸ N</code> of a uniform group <code>G</code> by a normal subgroup <code>N</code> itself a uniform group? Does mathlib know this somewhere? To un- <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a>, I'm trying to prove that the quotient of a complete metrizable group <code>G</code> by a closed normal subgroup <code>N</code> is complete, and the first step in Bourbaki is to show that the quotient is metrizable so that you can reduce to the problem to Cauchy sequences. I would have a proof of metrizability modulo knowing that <code>G / N</code> is a uniform group, and then I can tackle completeness.</p>",
        "id": 296382441,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1661962387
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> I figure you might know this off the top of your head.</p>",
        "id": 296407857,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1661965180
    },
    {
        "content": "<p>We have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/quotient_group.quotient.topological_space\">docs#quotient_group.quotient.topological_space</a>  so it shouldn't be difficult.</p>",
        "id": 296415137,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1661967334
    },
    {
        "content": "<p>Sorry, I don't understand why this is particularly easy. I'm not claiming it isn't, only that I don't see it.</p>",
        "id": 296454434,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1661982021
    },
    {
        "content": "<p>Let me say something possibly stupid: the quotient has a topology making it a topological group and hence a uniform group. Does this help?</p>",
        "id": 296454881,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1661982243
    },
    {
        "content": "<p>Oh this can't help because I don't know whether I'm using the left uniformity or the right one</p>",
        "id": 296457097,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1661983289
    },
    {
        "content": "<p>It has a topology making it into a <code>uniform_space</code> (via <a href=\"https://leanprover-community.github.io/mathlib_docs/find/topological_group.to_uniform_space\">docs#topological_group.to_uniform_space</a>), but not into a <a href=\"https://leanprover-community.github.io/mathlib_docs/find/uniform_group\">docs#uniform_group</a>, as mentioned in the docstring to the former (because of possibly different left and right uniformities). So sure you can get the uniform space structure for free I guess, but then I don't immediately see how to get the uniform group structure.</p>",
        "id": 296457110,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1661983297
    },
    {
        "content": "<p>I started trying to construct it directly from the uniform structure on the prequotient, but I'm not yet too comfortable with uniformities in mathlib, so I got stuck; and maybe this isn't the right way to go anyway.</p>",
        "id": 296457522,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1661983526
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.algebra.uniform_group</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">uniform_space</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">uniform_group</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">is_closed</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">G</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">subgroup.normal</span> <span class=\"n\">S</span><span class=\"o\">]</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">quotient_group.quotient.uniform_space</span> <span class=\"o\">:</span> <span class=\"n\">uniform_space</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"bp\">⧸</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">uniformity</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">uniformity</span> <span class=\"n\">G</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">quotient_group.mk'</span> <span class=\"n\">S</span> <span class=\"n\">g.fst</span><span class=\"o\">,</span> <span class=\"n\">quotient_group.mk'</span> <span class=\"n\">S</span> <span class=\"n\">g.snd</span><span class=\"o\">)),</span>\n  <span class=\"n\">refl</span> <span class=\"o\">:=</span> <span class=\"n\">filter.le_map</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">s</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">filter.mem_principal</span><span class=\"o\">,</span> <span class=\"n\">id_rel_subset</span><span class=\"o\">,</span> <span class=\"n\">set.mem_image</span><span class=\"o\">,</span> <span class=\"n\">prod.mk.inj_iff</span><span class=\"o\">,</span> <span class=\"n\">prod.exists</span><span class=\"o\">],</span>\n    <span class=\"n\">intros</span> <span class=\"n\">gs</span><span class=\"o\">,</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">quotient_group.mk_surjective</span> <span class=\"n\">gs</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">refl_mem_uniformity</span> <span class=\"n\">hs</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">symm</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">s</span> <span class=\"n\">hs</span><span class=\"o\">,</span> <span class=\"n\">symm_le_uniformity</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n  <span class=\"n\">comp</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">is_open_uniformity</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">quotient_group.quotient.uniform_group</span> <span class=\"o\">:</span> <span class=\"n\">uniform_group</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"bp\">⧸</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 296457617,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1661983568
    },
    {
        "content": "<p>I had a PR related to this relatively recently which I closed because I turned out not to need it and I needed to focus on other things. I doubt it's useful but here it is anyway: <a href=\"https://github.com/leanprover-community/mathlib/pull/16011\">#16011</a></p>\n<p>I realise this does not address your actual question (I don't know the answer and haven't thought about it but I suspect the answer is \"always\")</p>",
        "id": 296530032,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1662016879
    },
    {
        "content": "<p>I am not sure at all that the answer is \"always\". Bourbaki makes no claim about it, right?</p>",
        "id": 296535856,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1662019530
    },
    {
        "content": "<p>Indeed Bourbaki seems not to. I could be wrong!</p>",
        "id": 296535969,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1662019581
    },
    {
        "content": "<p>Hence only \"suspect\".</p>",
        "id": 296535980,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1662019586
    },
    {
        "content": "<p>Looking at the proof of what Jireh wants in Bourbaki, they don’t seem to be using that the quotient is a uniform group. They basically use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/topological_space.metrizable_space_of_t3_second_countable\">docs#topological_space.metrizable_space_of_t3_second_countable</a> right?</p>",
        "id": 296536502,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1662019840
    },
    {
        "content": "<p>Oh not really because apparently you only need the uniformity to be countably generated</p>",
        "id": 296537048,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1662020113
    },
    {
        "content": "<p>Which we have! This is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/uniform_space.metrizable_space\">docs#uniform_space.metrizable_space</a></p>",
        "id": 296545234,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1662023209
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.metric_space.metrizable_uniformity</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">topological_space</span> <span class=\"n\">filter</span> <span class=\"n\">set</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">topological_space</span> <span class=\"n\">uniformity</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">filter.map.is_countably_generated</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">l.is_countably_generated</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"n\">l</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">is_countably_generated</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">unfreezingI</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">is_countably_generated_iff_exists_antitone_basis</span> <span class=\"n\">at</span> <span class=\"bp\">*;</span> <span class=\"n\">rcases</span> <span class=\"n\">H</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">hu</span><span class=\"o\">⟩},</span>\n  <span class=\"n\">exact</span> <span class=\"o\">⟨(</span><span class=\"n\">image</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">∘</span> <span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">hu.to_has_basis.map</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">monotone_image.comp_antitone</span> <span class=\"n\">hu.antitone</span><span class=\"o\">⟩⟩</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">quotient_group.nhds_eq</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">topological_group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"n\">G</span><span class=\"o\">}(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">𝓝</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">⧸</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">map</span> <span class=\"n\">coe</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">le_antisymm</span> <span class=\"o\">((</span><span class=\"n\">quotient_group.is_open_map_coe</span> <span class=\"n\">N</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">nhds_le</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">continuous_quot_mk.continuous_at</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">quotient_metrizable</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">metrizable_space</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">topological_group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"n\">G</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">N.normal</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_closed</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">G</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n  <span class=\"n\">metrizable_space</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"bp\">⧸</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"n\">uniform_space</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"bp\">⧸</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">topological_group.to_uniform_space</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"bp\">⧸</span> <span class=\"n\">N</span><span class=\"o\">),</span>\n  <span class=\"n\">haveI</span> <span class=\"o\">:</span> <span class=\"n\">is_countably_generated</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">⧸</span> <span class=\"n\">N</span><span class=\"o\">)),</span>\n  <span class=\"o\">{</span> <span class=\"n\">change</span> <span class=\"n\">is_countably_generated</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">⧸</span> <span class=\"n\">N</span><span class=\"o\">)),</span>\n    <span class=\"n\">rw</span> <span class=\"n\">quotient_group.nhds_eq</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">filter.map.is_countably_generated</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">},</span>\n  <span class=\"n\">haveI</span> <span class=\"o\">:</span> <span class=\"n\">is_countably_generated</span> <span class=\"o\">(</span><span class=\"bp\">𝓤</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"bp\">⧸</span> <span class=\"n\">N</span><span class=\"o\">)),</span>\n  <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"n\">comap.is_countably_generated</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"n\">refine</span> <span class=\"n\">uniform_space.metrizable_space</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 296556080,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1662027540
    },
    {
        "content": "<p>Thanks Anatole!</p>",
        "id": 296621226,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1662047044
    },
    {
        "content": "<p>I was trying to use the <code>is_countably_generated</code> API, but the lemma I was trying to use for it needed uniform group.</p>",
        "id": 296639603,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1662047217
    },
    {
        "content": "<p>I must admit that it was trickier than I expected, because neighborhoods in the quotient are not always the <code>filter.map</code> of neighborhoods in the original space. The thing that makes things work is really <a href=\"https://leanprover-community.github.io/mathlib_docs/find/quotient_group.is_open_map_coe\">docs#quotient_group.is_open_map_coe</a></p>",
        "id": 296647484,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1662048099
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 296647667,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1662048142
    },
    {
        "content": "<p>Yes, I saw that the fact that is was an open map was key too, but couldn't quite make it work. Also, fun fact, you only need to assume <code>[first_countable_topology G]</code> instead of <code>[metrizable_space G]</code> (for the same reason).</p>",
        "id": 296648292,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1662048338
    },
    {
        "content": "<p>Oh yeah, I was following a lecture at the same time so I didn’t try too hard to minimize assumptions</p>",
        "id": 296648590,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1662048440
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"268315\">Anatole Dedecker</span> <a href=\"#narrow/stream/113488-general/topic/quotient.20group.20is.20uniform/near/296648590\">said</a>:</p>\n<blockquote>\n<p>Oh yeah, I was following a lecture at the same time so I didn’t try too hard to minimize assumptions</p>\n</blockquote>\n<p>Don't you fear someone could tell your study program supervisor that you're playing video-games instead of focusing on lectures?</p>",
        "id": 296668315,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1662054632
    },
    {
        "content": "<p>I know I know, but I just love filters and point-set topology way too much <span aria-label=\"grimacing\" class=\"emoji emoji-1f62c\" role=\"img\" title=\"grimacing\">:grimacing:</span></p>",
        "id": 296783713,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1662112071
    }
]