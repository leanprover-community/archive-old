[
    {
        "content": "<p>Can someone remind me what the preferred simp normal form should be in this example?</p>\n<p>Say I have a <code>s : subalgebra R A</code>. Is <code>((s : subsemiring A) : set A)</code> better, or <code>(s : set A)</code> directly?</p>\n<p>(Currently mathlib seems to like the former in some places, and I'm wondering if it should be changed.)</p>",
        "id": 231131454,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616228169
    },
    {
        "content": "<p>Actually this is terrible. There's a diamond, because we can also do <code>((s : submodule R A) : set A)</code>.</p>",
        "id": 231131695,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616228511
    },
    {
        "content": "<p>ugh</p>",
        "id": 231131824,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616228660
    },
    {
        "content": "<p>And of course <code>coe_coe</code> unpacks the direct coercion...</p>",
        "id": 231131838,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616228677
    },
    {
        "content": "<p>I would think that the direct coercion is SNF</p>",
        "id": 231132315,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616229336
    },
    {
        "content": "<p>Except that <code>coe_coe</code> is marked as a simp lemma.</p>",
        "id": 231132835,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616230051
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Add an instance to \"undo\" coercion transitivity into a chain of coercions, because</span>\n<span class=\"sd\">   most simp lemmas are stated with respect to simple coercions and will not match when</span>\n<span class=\"sd\">   part of a chain. -/</span>\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">coe_coe</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_coe</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_coe_t</span> <span class=\"n\">β</span> <span class=\"n\">γ</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 231132882,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616230088
    },
    {
        "content": "<p>So I guess we're meant to cope with these diamonds... I seem to have done so in my local situation.</p>",
        "id": 231132897,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616230107
    },
    {
        "content": "<p>Yeah, I see why <code>coe_coe</code> should be simp</p>",
        "id": 231132916,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616230158
    },
    {
        "content": "<p>But I'm not sure what the principled approach to dealing with these diamonds is</p>",
        "id": 231132927,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616230191
    },
    {
        "content": "<p>I'm adding a direct coercion from subalgebra to set in <a href=\"https://github.com/leanprover-community/mathlib/issues/6768\">#6768</a></p>",
        "id": 231133579,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616230950
    },
    {
        "content": "<p>Which is consistent with how all the other subobjects work</p>",
        "id": 231133670,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616231057
    },
    {
        "content": "<p>Ah, cool, thanks!</p>",
        "id": 231133710,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616231133
    },
    {
        "content": "<p>We deal with diamonds in the same way with bundled homs</p>",
        "id": 231133871,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616231326
    },
    {
        "content": "<p>Split to <a href=\"https://github.com/leanprover-community/mathlib/issues/6800\">#6800</a>, that PR grew too much</p>",
        "id": 231224945,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616342794
    }
]