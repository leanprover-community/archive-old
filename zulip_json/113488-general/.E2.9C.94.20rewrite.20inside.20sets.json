[
    {
        "content": "<p>The following code</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.seminorm</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"bp\">ùïú</span> <span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">normed_field</span> <span class=\"bp\">ùïú</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"bp\">ùïú</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">seminorm</span> <span class=\"bp\">ùïú</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"bp\">‚àà</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">|</span> <span class=\"n\">y</span> <span class=\"bp\">‚àà</span> <span class=\"n\">q.ball</span> <span class=\"mi\">0</span> <span class=\"n\">r</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">q.mem_ball_zero</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>fails with the message</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rewrite</span> <span class=\"n\">tactic</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">did</span> <span class=\"n\">not</span> <span class=\"n\">find</span> <span class=\"kd\">instance</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">pattern</span> <span class=\"k\">in</span> <span class=\"n\">the</span> <span class=\"n\">target</span> <span class=\"n\">expression</span>\n  <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">‚àà</span> <span class=\"n\">q.ball</span> <span class=\"mi\">0</span> <span class=\"bp\">?</span><span class=\"n\">m_2</span>\n</code></pre></div>\n<p>and I don't really understand why (I am guessing that <code>{ y : E | y ‚àà P}</code> is just syntactic sugar and there is no <code>p ‚àà P</code>) and how to do the rewrite correctly.</p>",
        "id": 267510277,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1641853465
    },
    {
        "content": "<p>could you provide a full <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> with imports/variables?</p>",
        "id": 267510408,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1641853523
    },
    {
        "content": "<p>edited in the import and variables</p>",
        "id": 267510893,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1641853789
    },
    {
        "content": "<p>oh, you need <code>simp_rw</code></p>",
        "id": 267511720,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1641854266
    },
    {
        "content": "<p><code>rw</code> is sometimes not powerful enough to rewrite under things like forall or exists, didn't know set notation was the same but there we are</p>",
        "id": 267511794,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1641854290
    },
    {
        "content": "<p>you can also do <code>rw set.mem_set_of_eq</code> first to remove the set notation</p>",
        "id": 267511945,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1641854371
    },
    {
        "content": "<p>perfect, thanks</p>",
        "id": 267512739,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1641854844
    },
    {
        "content": "<p><code>rw set.mem_set_of_eq</code> does not help in my actual case, otherwise I am usually doing that</p>",
        "id": 267512836,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1641854898
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"412682\">Moritz Doll</span> has marked this topic as resolved.</p>",
        "id": 267512880,
        "sender_full_name": "Notification Bot",
        "timestamp": 1641854918
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/113488-general/topic/.E2.9C.94.20rewrite.20inside.20sets/near/267511794\">said</a>:</p>\n<blockquote>\n<p>didn't know set notation was the same but there we are</p>\n</blockquote>\n<p>(If we lived in an alternate universe where lambda notation were instead <code>[x : X | f x]</code> for <code>Œª x : X, f x</code>, we probably wouldn't find it to be so surprising that <code>{x : X | p x}</code> behaved similarly. Interestingly, the programming language Smalltalk used this notation, minus the types.)</p>",
        "id": 267513475,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1641855273
    },
    {
        "content": "<p>all I seem to hear about smalltalk is how many things it got right tbh</p>",
        "id": 267513875,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1641855547
    },
    {
        "content": "<p><code>{ x | p x}</code> is notation for <code>set_of (Œª x, p x)</code> (<a href=\"https://leanprover-community.github.io/mathlib_docs/find/set_of/src\">src#set_of</a>), so the normal rules for rewriting under bindings apply.</p>",
        "id": 267519307,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1641859163
    }
]