[
    {
        "content": "<p>I spent some time with Chris at Xena last night trying to get to the bottom of <code>no_confusion</code>.  I seem to have a slightly simpler approach which gives what looks to me like everything we need for a proof of the idea that two nats are equal iff they were constructed using the same constructors in the same order.</p>",
        "id": 124130895,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521847356
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>inductive  xnat\n| zero : xnat\n| succ : xnat → xnat\n\nopen xnat\n\ndef  xnat_no_confusion_prop (s : xnat) (t : xnat) : Prop  :=\nxnat.rec (xnat.rec true (λ _ _,false) t) (λ m _,(xnat.rec false (λ n _,(m=n)) t)) s\n\nvariables m n : xnat\n#reduce xnat_no_confusion_prop zero zero -- true\n#reduce xnat_no_confusion_prop (succ m) zero -- false\n#reduce xnat_no_confusion_prop zero (succ n) -- false\n#reduce xnat_no_confusion_prop (succ m) (succ n) -- (m = n)\n\ndef  xnat_no_confusion&#39; (s t : xnat) (H : s = t) : xnat_no_confusion_prop s t :=\nbegin\nrw H,\ncases t with n,\nexact trivial, -- t = 0\nshow (n=n), -- t = succ n\nrefl,\nend\n\nexample : succ m = succ n → m = n :=  λ H, xnat_no_confusion&#39; _ _ H\nexample : ¬ succ m = zero :=  λ H, xnat_no_confusion&#39; _ _ H\n ```\n</pre></div>",
        "id": 124130903,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521847385
    },
    {
        "content": "<p>Here I prove injectivity of <code>xnat.succ</code> and also that <code>zero</code> is not a <code>succ</code> using an easier variant of the <code>no_confusion</code> / <code>no_confusion_type</code> strategy, where instead of carrying round a general sort <code>P</code> I just use the relevant props.</p>",
        "id": 124130959,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521847484
    },
    {
        "content": "<p>Are there other applications of <code>no_confusion_type</code> lemmas which go beyond this sort of \"instance of inductive type is uniquely determined by how it was constructed\" sort of thing? Or am I missing something else? Why is this sort <code>P</code> used?</p>",
        "id": 124130970,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521847552
    },
    {
        "content": "<p>I'm writing a blog post about all this <code>no_confusion</code> stuff and I was somehow expecting for this to come out in the wash but it didn't, so I need to think of something coherent to say about why the general sort P is involved before I post.</p>",
        "id": 124131025,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521847639
    },
    {
        "content": "<p>was mcbride's paper on <code>no confusion</code> not helpful?</p>",
        "id": 124131971,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1521849372
    },
    {
        "content": "<p>I either don't know this paper, or I looked at it before and at the time it was too much for me. Having actually spent some time thinking about no_confusion_type now perhaps I can ask you for a link to this paper in the hope that I can get something from it?</p>",
        "id": 124132023,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521849515
    },
    {
        "content": "<p><a href=\"https://pdfs.semanticscholar.org/d224/e96c59a81a471625faf87118b6299094e1e4.pdf\" target=\"_blank\" title=\"https://pdfs.semanticscholar.org/d224/e96c59a81a471625faf87118b6299094e1e4.pdf\">https://pdfs.semanticscholar.org/d224/e96c59a81a471625faf87118b6299094e1e4.pdf</a> section 7.3</p>",
        "id": 124132027,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1521849542
    },
    {
        "content": "<p><a href=\"http://strictlypositive.org/thesis.pdf\" target=\"_blank\" title=\"http://strictlypositive.org/thesis.pdf\">http://strictlypositive.org/thesis.pdf</a> page 136</p>",
        "id": 124132032,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1521849550
    },
    {
        "content": "<p>mcbride's phd thesis is definitely hard going</p>",
        "id": 124132207,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1521849884
    },
    {
        "content": "<p>i had to sit and stare at it for awhile, and i still don't fully understand it <span class=\"emoji emoji-1f605\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 124132233,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1521849961
    },
    {
        "content": "<p>Well I am not an expert but it seems to me that what McBride is defining on p136ff is what is implemented in Lean.</p>",
        "id": 124132336,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521850123
    },
    {
        "content": "<p>Maybe I should just post my blog post. Hang on.</p>",
        "id": 124132337,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521850135
    },
    {
        "content": "<p>I think the reason <code>no_confusion</code> uses a general sort instead of using the consequent <code>m = n</code> directly is because the number of conclusions varies with the constructors, so that for <code>list</code> it would be something like <code>cons a l = cons a' l' -&gt; a = a' /\\ l = l'</code>, which is a bit less natural to define inductively since the 0-ary case gets special consideration, and it also relies on the definition <code>and</code> which may not be available yet. As it is defined normally <code>no_confusion</code> for an arbitrary type needs nothing except the basics of DTT, plus <code>eq</code> and <code>heq</code> (which comes up when there are dependencies, for example <code>sigma.mk a b = sigma.mk a' b' -&gt; a = a' /\\ b == b'</code> where the latter equality involves <code>b : B a</code> and <code>b' : B a'</code> which are different types.</p>",
        "id": 124132589,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1521850693
    },
    {
        "content": "<p><a href=\"https://xenaproject.wordpress.com/2018/03/24/no-confusion-over-no_confusion/\" target=\"_blank\" title=\"https://xenaproject.wordpress.com/2018/03/24/no-confusion-over-no_confusion/\">https://xenaproject.wordpress.com/2018/03/24/no-confusion-over-no_confusion/</a></p>",
        "id": 124132771,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521851114
    },
    {
        "content": "<p>I'll perhaps add some comments about what you said above, later.</p>",
        "id": 124132788,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521851144
    },
    {
        "content": "<p>Here's another interesting story to do with no_confusion:</p>\n<div class=\"codehilite\"><pre><span></span>inductive {u} mystery : Sort u\n| A : mystery\n| B : mystery\n\ndef confused : Type := mystery\ndef confused.A : confused := mystery.A\ndef confused.B : confused := mystery.B\nopen confused\n\ntheorem A_ne_B_attempt_1 : A ≠ B :=\nλ h, mystery.no_confusion h --fails: no_confusion not defined\n\ntheorem A_ne_B_attempt_2 : A ≠ B :=\nλ h, by cases h -- now I have to prove ⊢ false?\n\ntheorem A_ne_B_attempt_3.no_confusion_type : mystery → mystery → Type\n| mystery.A mystery.A := _ -- already fails, can&#39;t case on mystery\n| mystery.B mystery.A := _\n| mystery.A mystery.B := _\n| mystery.A mystery.B := _\n\n#print mystery.rec\n-- protected eliminator tc.mystery.rec : ∀ {C : mystery → Prop},\n-- C mystery.A → C mystery.B → ∀ (n : mystery), C n\n--\n-- Hm, the recursor only eliminates to Prop, so we can&#39;t\n-- define functions like no_confusion_type\n\n-- Maybe we can prove they are equal instead? If it was a Prop\n-- they would be equal by proof irrelevance...\ntheorem A_eq_B_attempt_1 : A = B := rfl --nope\n</pre></div>",
        "id": 124133073,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1521851842
    },
    {
        "content": "<p>The punch line is that <code>confused</code> is a type with two elements <code>A</code> and <code>B</code>, for which it is impossible to prove whether they are equal or not</p>",
        "id": 124133116,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1521851949
    },
    {
        "content": "<p>By the way in the blog post you could have defined <code>mytype_equal</code> like so:</p>\n<div class=\"codehilite\"><pre><span></span>def  mytype_equal : mytype → mytype →  Prop\n| mytype.AA mytype.AA := true\n| mytype.AA mytype.ZZ := false\n| mytype.ZZ mytype.AA := false\n| mytype.ZZ mytype.ZZ := true\n</pre></div>\n\n\n<p>Not sure if you were deliberately showing off other ways to construct it</p>",
        "id": 124133271,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1521852333
    },
    {
        "content": "<p>Re: the one-sided inverse, that approach actually does work in general, as a \"partial projection\". So for example you could define <code>head l : option A</code> when <code>l : list A</code>, to return <code>none</code> on the empty list and <code>a</code> on <code>a::l</code>. In general, you have an inductive type with several constructors, each of which has several arguments, and you can project each element of each constructor in an <code>option</code>, returning <code>none</code> if the wrong constructor is passed in and <code>some a</code> where <code>a</code> is the appropriate argument to the constructor otherwise. You can reconstruct the <code>cases_on</code> theorem using all these projections.</p>",
        "id": 124133419,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1521852697
    },
    {
        "content": "<p>Aah excellent, I will beef up the post tomorrow</p>",
        "id": 124133808,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521853512
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 124133809,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521853519
    },
    {
        "content": "<p>PS Do you think I'm wasting my time trying to get to the bottom of things like this? I am currently thinking about getting to the bottom of something else I've always been confused by -- \"using-well-founded\" (the error you get when you try and define something by recursion but things are slightly too convoluted for the elaborator(?) to figure out that what you're doing will definitely terminate after a finite time). Currently the only way I know how to figure stuff out is to look at the source code and then work stuff out by experimenting. My plan, like the no-confusion post, would be to work out some simple examples, and basically write some docs and either PR them to mathlib docs or blog about them. But when Lean 4 comes is there every chance that everything I write about these sorts of \"obscure\" parts of Lean will be no longer relevant?</p>",
        "id": 124155749,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521909007
    },
    {
        "content": "<p>I think I'm right in saying that using_well_founded is not mentioned in either the reference manual or TPIL (like no_confusion).</p>",
        "id": 124155850,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521909250
    },
    {
        "content": "<p>Re : <code>mystery</code> -- why is it any different to <code>bool</code>? It clearly is:</p>",
        "id": 124156198,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521910172
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>inductive {u} mystery : Sort u\n| A : mystery\n| B : mystery\n\n#print  prefix mystery\n\ninductive  bool&#39;\n| TT : bool&#39;\n| FF : bool&#39;\n\n#print  prefix bool&#39;\n</pre></div>",
        "id": 124156199,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521910183
    },
    {
        "content": "<p>we get <code>bool'.no_confusion</code> but no <code>mystery.no_confusion</code>; and <code>bool.rec</code> eliminates to any Sort whereas <code>mystery.rec</code> only eliminates to <code>Prop</code>. Why is this?</p>",
        "id": 124156251,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521910261
    },
    {
        "content": "<p>Because <code>mystery</code> can inhabit multiple types including <code>Prop</code> and when it does, it's a bit like <code>or</code>. If you could eliminate to anything other than <code>Prop</code>, you could affect the behavior of a program with just a proof</p>",
        "id": 124156307,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1521910427
    },
    {
        "content": "<p>for example:</p>\n<div class=\"codehilite\"><pre><span></span>def prog : mystery.{0} -&gt; nat\n | A := 0\n | B := 1\n</pre></div>\n\n\n<p>wouldn't make sense because of proof irrelevance</p>",
        "id": 124156364,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1521910532
    },
    {
        "content": "<p>I see. The whole point is that mystery is allowed to be a Prop so everything is paranoid. You guys should get classical.</p>",
        "id": 124156746,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521911310
    },
    {
        "content": "<p>it's not a waste of time. some version of well-founded recursion will be in lean 4</p>",
        "id": 124156753,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1521911347
    },
    {
        "content": "<p>what might change is the exact syntax / <code>using_well_founded</code>, so perhaps you could discuss doing it manually using <code>well_founded.fix</code></p>",
        "id": 124156755,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1521911373
    },
    {
        "content": "<p>I know even less about <code>well_founded.fix</code>.</p>",
        "id": 124156804,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521911409
    },
    {
        "content": "<p>i don't know much either about the fixed points of functions, so i would avidly read your blog post :)</p>",
        "id": 124156818,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1521911475
    },
    {
        "content": "<p>it's a way of expressing well-founded induction</p>",
        "id": 124156820,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1521911487
    },
    {
        "content": "<p>You should use Coq, everything seems to be defined using Fixpoint there.</p>",
        "id": 124156821,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521911500
    },
    {
        "content": "<p>Hey, I now realise I don't even understand Lean's definition of nat.div and I am supposed to be a  professor of number theory :-/</p>",
        "id": 124156862,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521911553
    },
    {
        "content": "<p>Maybe this was mentioned in TPIL...</p>",
        "id": 124156863,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521911583
    },
    {
        "content": "<p>Maybe it's time I read TPIL Chapter 8 again in fact.</p>",
        "id": 124156919,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521911708
    },
    {
        "content": "<p>Coq just uses the keyword <code>Fixpoint</code> to express <code>Definition</code> that can recurse, there's not much difference from Lean's <code>def</code></p>",
        "id": 124157073,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1521912105
    },
    {
        "content": "<p>The big difference is that Lean takes care of well founded recursion for you</p>",
        "id": 124157175,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1521912333
    },
    {
        "content": "<p>regarding the div example in TPIL, I wish jeremy had pattern matched on y, it would have been clearer then IMO</p>",
        "id": 124157269,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1521912568
    },
    {
        "content": "<p>Except for when it doesn't and then you're stuck with quoted tactics and such :(.</p>",
        "id": 124157270,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1521912574
    },
    {
        "content": "<p>Coq has a better solution to provin gtermination.</p>",
        "id": 124157271,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1521912584
    },
    {
        "content": "<p>Not to mention that Coq can in some cases help you show your relation is well founded. Then you're left with proof of termination only.</p>",
        "id": 124157332,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1521912677
    },
    {
        "content": "<p>Right -- this is what I see with <code>using_well_founded</code> -- I am having to actually write a tactic (or know about the \"`[\" trick)</p>",
        "id": 124157333,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521912709
    },
    {
        "content": "<p>I don't know whether as a mathematician I should care about this</p>",
        "id": 124157372,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521912729
    },
    {
        "content": "<p>The reason I currently care is that I have been reading software foundations</p>",
        "id": 124157373,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521912741
    },
    {
        "content": "<p>and I defined a positive integer as an inductive type using binary notation: three constructors <code>one</code>, <code>double x</code> and <code>double_and_then_add_one x</code></p>",
        "id": 124157376,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521912765
    },
    {
        "content": "<p>and when I tried to define addition on these things, I have trouble doing (2x+1)+(2y+1)</p>",
        "id": 124157377,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521912782
    },
    {
        "content": "<blockquote>\n<p>regarding the div example in TPIL, I wish jeremy had pattern matched on y, it would have been clearer then IMO</p>\n</blockquote>\n<p>A clearer way to present that definition of division can be found:</p>\n<p><a href=\"https://github.com/leanprover/lean/blob/bb9e3ddae2396b574b8ab62976bd4db9520d525d/tests/lean/run/conv_tac1.lean#L8-L13\" target=\"_blank\" title=\"https://github.com/leanprover/lean/blob/bb9e3ddae2396b574b8ab62976bd4db9520d525d/tests/lean/run/conv_tac1.lean#L8-L13\">https://github.com/leanprover/lean/blob/bb9e3ddae2396b574b8ab62976bd4db9520d525d/tests/lean/run/conv_tac1.lean#L8-L13</a></p>\n<p>I believe <code>nat</code> has access to very little tactic machinery so they have to be frugal there.</p>",
        "id": 124157440,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1521912889
    },
    {
        "content": "<p>i think it's worth caring about using <code>well_founded.fix</code> by hand, just like <code>no_confusion</code></p>",
        "id": 124157564,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1521913157
    },
    {
        "content": "<p>it's applicable whenever you're doing complicated induction</p>",
        "id": 124157565,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1521913177
    },
    {
        "content": "<p>Coq just asks for proofs of well foundedness and termination (according some decreasing measure).</p>",
        "id": 124157664,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1521913339
    },
    {
        "content": "<p>Yes, as an end user I forget all about this \"what is the actual state of Lean when this object is being made\" stuff. For example with no_confusion I was thinking \"why not just return a=a' and L=L'\" for <code>list.no_confusion_type (a::L) (a'::L')</code></p>",
        "id": 124157665,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521913345
    },
    {
        "content": "<p>Lean has this weird way of requiring tactics.</p>",
        "id": 124157666,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1521913346
    },
    {
        "content": "<p>and then Mario points out that <code>and</code> might not be defined at this point. Oops.</p>",
        "id": 124157667,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521913363
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110027\">@Moses Schönfinkel</span> Is it only weird because you are used to the Coq way? i.e. are you saying \"I don't like it because I know Coq and Lean is different\", or \"I don't like it because I know Coq and Lean is worse for this sort of thing\"</p>",
        "id": 124157672,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521913422
    },
    {
        "content": "<p>It's worse because you can barely see the state of what you're proving, given it's in a tactic monad. All your feedback is nested exceptions from within the quoted tactics block.</p>",
        "id": 124157879,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1521913919
    },
    {
        "content": "<p>In Coq those are first-class proofs.</p>",
        "id": 124157916,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1521913924
    },
    {
        "content": "<p>So instead of a type you need to find a term for, in Lean you're asked to provide tactics.</p>",
        "id": 124157976,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1521914090
    },
    {
        "content": "<p>yes, i agree, i always end up writing out everything using <code>well_founded.fix</code> just so it's easier to read</p>",
        "id": 124158146,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1521914426
    },
    {
        "content": "<p>i'm glad it's not just my poor Lean programming skills, haha</p>",
        "id": 124158155,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1521914483
    },
    {
        "content": "<p>Would defining addition on that binary type I mentioned above be easier in Coq? How hard is it in Lean?</p>",
        "id": 124158400,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521915107
    },
    {
        "content": "<p>(the inductive type with constructors one, double and double_then_add_one)</p>",
        "id": 124158441,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521915179
    },
    {
        "content": "<p>i remember doing that exercise and trying to solve it by defining a coercion to nat. the trouble is you can have an infinite sequence of <code>doub doub doub doub doub zero</code> and you need to normalize the expression before you can do so</p>",
        "id": 124158546,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1521915460
    },
    {
        "content": "<p>I decided that zero was a bad thing to have, I started at one</p>",
        "id": 124158589,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521915522
    },
    {
        "content": "<p>then every positive integer is uniquely represented</p>",
        "id": 124158590,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521915535
    },
    {
        "content": "<p>and there is no confusion</p>",
        "id": 124158592,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521915538
    },
    {
        "content": "<p>that's cheating! haha</p>",
        "id": 124158597,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1521915548
    },
    {
        "content": "<p>the same problem arises in the construction of the integers, where the pair (1,0) is the same as (2,1), but you need some way to say they are equivalent</p>",
        "id": 124158659,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1521915706
    },
    {
        "content": "<p>I remember doing it in Coq, I am not sure if it would be at all more difficult to do in Lean.</p>",
        "id": 124158710,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1521915833
    },
    {
        "content": "<p>I solved the problem Kevin and Andrew were talking about.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span>  <span class=\"n\">sizeof_pos</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">pint</span><span class=\"o\">,</span> <span class=\"mi\">0</span>  <span class=\"bp\">&lt;</span> <span class=\"n\">pint</span><span class=\"bp\">.</span><span class=\"n\">sizeof</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"n\">dec_trivial</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:=</span>  <span class=\"k\">by</span> <span class=\"n\">unfold</span> <span class=\"n\">pint</span><span class=\"bp\">.</span><span class=\"n\">sizeof</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"n\">add_comm</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">succ_pos</span> <span class=\"bp\">_</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">da</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:=</span>  <span class=\"k\">by</span> <span class=\"n\">unfold</span> <span class=\"n\">pint</span><span class=\"bp\">.</span><span class=\"n\">sizeof</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"n\">add_comm</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">succ_pos</span> <span class=\"bp\">_</span>\n\n<span class=\"n\">def</span>  <span class=\"n\">padd2</span> <span class=\"o\">:</span> <span class=\"n\">pint</span> <span class=\"bp\">→</span> <span class=\"n\">pint</span> <span class=\"bp\">→</span> <span class=\"n\">pint</span>\n<span class=\"bp\">|</span> <span class=\"n\">one</span> <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"n\">d</span> <span class=\"n\">one</span>\n<span class=\"bp\">|</span> <span class=\"n\">one</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">da</span> <span class=\"n\">m</span>\n<span class=\"bp\">|</span> <span class=\"n\">one</span> <span class=\"o\">(</span><span class=\"n\">da</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">d</span> <span class=\"o\">(</span><span class=\"n\">padd2</span> <span class=\"n\">one</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"n\">da</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">d</span> <span class=\"o\">(</span><span class=\"n\">padd2</span> <span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">da</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">da</span> <span class=\"o\">(</span><span class=\"n\">padd2</span> <span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">da</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"n\">d</span> <span class=\"o\">(</span><span class=\"n\">padd2</span> <span class=\"n\">n</span> <span class=\"n\">one</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">da</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">da</span> <span class=\"o\">(</span><span class=\"n\">padd2</span> <span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">da</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">da</span> <span class=\"n\">m</span><span class=\"o\">):=</span>  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span>  <span class=\"bp\">&lt;</span> <span class=\"n\">pint</span><span class=\"bp\">.</span><span class=\"n\">sizeof</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">sizeof_pos</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n<span class=\"n\">d</span> <span class=\"o\">(</span><span class=\"n\">padd2</span> <span class=\"n\">one</span> <span class=\"o\">(</span><span class=\"n\">padd2</span> <span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">))</span>\n</pre></div>\n\n\n<p>The order of arguments in the final case matters, I think because in the default well-founded relation on <code>Σ' p : pint, pint</code> , <code>⟨one, padd2 n m⟩ ≺ ⟨da n, da m⟩</code> , but not necessarily <code>⟨padd2 n m, one⟩ ≺ ⟨da n, da m⟩</code> I'm not sure why it wanted me to prove <code>sizeof n</code> was pos however, but that was the goal that came up in the error message.</p>",
        "id": 124159648,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1521917919
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> You should look at mathlib <code>num</code> type, which is binary naturals just as you are describing. You don't need wf recursion for any of the definitions</p>",
        "id": 124162751,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1521925015
    },
    {
        "content": "<p>yeah, iirc that exercise asks you to define <code>nat_to_bin</code> and <code>bin_to_nat</code>. Once you've proven there is a bijection between the binary naturals and the\"traditional\" naturals, you can use nat addition on the binary numbers</p>",
        "id": 124163808,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1521927185
    },
    {
        "content": "<p>this is hard to do if you don't have zero</p>",
        "id": 124163818,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1521927213
    },
    {
        "content": "<p>it's harder to do if you do have zero</p>",
        "id": 124163981,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521927494
    },
    {
        "content": "<p>because double double double zero is zero</p>",
        "id": 124163982,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521927501
    },
    {
        "content": "<p>so bijectivity fails much worse</p>",
        "id": 124163983,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521927505
    },
    {
        "content": "<p>bijective binary to the rescue</p>",
        "id": 124163994,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1521927566
    },
    {
        "content": "<p>ok it's literally inside the name</p>",
        "id": 124163995,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1521927590
    },
    {
        "content": "<p>yeah, handling the <code>doub doub doub zero</code> case is the real trick to the problem</p>",
        "id": 124164046,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1521927654
    },
    {
        "content": "<p>or you can just surject to the naturals and quotient</p>",
        "id": 124164057,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1521927691
    },
    {
        "content": "<p>i solved it a long time ago, let me see if i can find my solution, maybe...</p>",
        "id": 124164058,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1521927692
    },
    {
        "content": "<p>literally a~b iff f(a)=f(b)</p>",
        "id": 124164060,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1521927701
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 124164107,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1521927764
    },
    {
        "content": "<p>I only defined the map one way. Did it ask you for the other way later on?</p>",
        "id": 124164118,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521927817
    },
    {
        "content": "<p>so, it seems they've made many of the exercises different / a little easier in the new edition</p>",
        "id": 124164156,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1521927844
    },
    {
        "content": "<p>the original problem was a 4 star advanced take you all day to complete if you're a learner hair-raiser</p>",
        "id": 124164176,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1521927940
    },
    {
        "content": "<p>at least it was for me</p>",
        "id": 124164179,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1521927955
    },
    {
        "content": "<p>which is why i remember some of the details about it</p>",
        "id": 124164237,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1521928049
    },
    {
        "content": "<p>They dumbed down for the kids?</p>",
        "id": 124164281,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521928113
    },
    {
        "content": "<p>not too badly! and i agree with dumbing it down, it's an introductory text</p>",
        "id": 124164293,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1521928171
    },
    {
        "content": "<p>i can't imagine teaching yourself from the original software foundations without guidance or help</p>",
        "id": 124164348,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1521928210
    },
    {
        "content": "<p>i eventually found somebody's homework solutions online and figured out how to solve it</p>",
        "id": 124164360,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1521928243
    },
    {
        "content": "<p>ahh, yes</p>",
        "id": 124164557,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1521928623
    },
    {
        "content": "<p><a href=\"http://staff.ustc.edu.cn/~bjhua/courses/theory/2012/slides/lec1notes.html\" target=\"_blank\" title=\"http://staff.ustc.edu.cn/~bjhua/courses/theory/2012/slides/lec1notes.html\">http://staff.ustc.edu.cn/~bjhua/courses/theory/2012/slides/lec1notes.html</a></p>",
        "id": 124164562,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1521928631
    },
    {
        "content": "<p>once you've normalized your binary number, then you can create a bijection, and life is good again</p>",
        "id": 124164617,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1521928726
    },
    {
        "content": "<blockquote>\n<p>literally a~b iff f(a)=f(b)</p>\n</blockquote>\n<p>if only i had known at the time. they didn't talk much about equivalence relations in engineering school</p>",
        "id": 124169245,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1521938217
    },
    {
        "content": "<p>and if SF had started talking about how <code>bin_to_nat</code> was onto but not one-to-one, I doubt many undergraduates would know what that really meant</p>",
        "id": 124169303,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1521938347
    },
    {
        "content": "<p>That's funny. I teach that to maths undergraduates in year 1 term 1. And equivalence relations.</p>",
        "id": 124169359,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521938419
    },
    {
        "content": "<p>I remember learning that in first year of university too, in discrete math</p>",
        "id": 124169369,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1521938514
    },
    {
        "content": "<p>i never had to take discrete math, I was an electrical engineer</p>",
        "id": 124169410,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1521938545
    },
    {
        "content": "<p>(I did CS and not engineering though, if that makes a difference)</p>",
        "id": 124169411,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1521938552
    },
    {
        "content": "<p>instead there was a 2 semester sequence on fourier transforms</p>",
        "id": 124169412,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1521938560
    },
    {
        "content": "<p>where we basically learned very little theory and a lot of how to compute various integrals</p>",
        "id": 124169419,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1521938593
    },
    {
        "content": "<p>i may have mentioned this before but i have issues with how they teach math in engineering school :)</p>",
        "id": 124169421,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1521938605
    },
    {
        "content": "<p>It seems common that people who like math don't get enough of it in engineering school.</p>",
        "id": 124169534,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1521938831
    },
    {
        "content": "<p>yes, we get a lot of boring computation instead</p>",
        "id": 124169556,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1521938883
    },
    {
        "content": "<p>my linear algebra class was basically doing a lot of gauss-jordan elimination and calculating eigenvectors by hand</p>",
        "id": 124169584,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1521938915
    },
    {
        "content": "<p>which ends up being completely a waste of time since no working engineer would ever do these things without a computer</p>",
        "id": 124169601,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1521938952
    },
    {
        "content": "<p>Mine was like that too. I've never missed my calculator more than in that class</p>",
        "id": 124169659,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1521939039
    },
    {
        "content": "<p>The follow up class was about numerical methods for linear algebra so I guess I should have been happy to do some implementation. I was not easy to satisfy I guess</p>",
        "id": 124169720,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1521939136
    }
]