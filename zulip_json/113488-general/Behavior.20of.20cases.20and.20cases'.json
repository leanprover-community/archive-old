[
    {
        "content": "<p>Consider:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"n\">xs</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">[</span><span class=\"n\">e</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>If I <code>cases (id xs)</code>, I will get:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">case</span> <span class=\"n\">list.nil</span>\n<span class=\"n\">xs</span><span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℕ</span>\n<span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">list.nil.length</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">list.nil</span> <span class=\"bp\">=</span> <span class=\"o\">[</span><span class=\"n\">e</span><span class=\"o\">]</span>\n<span class=\"n\">case</span> <span class=\"n\">list.cons</span>\n<span class=\"n\">xs</span><span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℕ</span>\n<span class=\"n\">hd</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"n\">tl</span><span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℕ</span>\n<span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">hd</span> <span class=\"o\">::</span> <span class=\"n\">tl</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">hd</span> <span class=\"o\">::</span> <span class=\"n\">tl</span> <span class=\"bp\">=</span> <span class=\"o\">[</span><span class=\"n\">e</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>So that's great. <code>id xs</code> is replaced uniformly throughout context and goal.</p>\n<p>But suppose I <code>cases h' : id xs</code> instead, I will get:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">case</span> <span class=\"n\">list.nil</span>\n<span class=\"n\">xs</span><span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℕ</span>\n<span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"n\">xs</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n<span class=\"n\">h'</span><span class=\"o\">:</span> <span class=\"n\">id</span> <span class=\"n\">xs</span> <span class=\"bp\">=</span> <span class=\"n\">list.nil</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">list.nil</span> <span class=\"bp\">=</span> <span class=\"o\">[</span><span class=\"n\">e</span><span class=\"o\">]</span>\n<span class=\"n\">case</span> <span class=\"n\">list.cons</span>\n<span class=\"n\">xs</span><span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℕ</span>\n<span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"n\">xs</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n<span class=\"n\">hd</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"n\">tl</span><span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℕ</span>\n<span class=\"n\">h'</span><span class=\"o\">:</span> <span class=\"n\">id</span> <span class=\"n\">xs</span> <span class=\"bp\">=</span> <span class=\"n\">hd</span> <span class=\"o\">::</span> <span class=\"n\">tl</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">hd</span> <span class=\"o\">::</span> <span class=\"n\">tl</span> <span class=\"bp\">=</span> <span class=\"o\">[</span><span class=\"n\">e</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>Judging from the documentation, which says:</p>\n<blockquote>\n<p>cases h : e, where e is a variable or an expression, performs cases on e as above, but also adds a hypothesis h : e = ... to each hypothesis, where ... is the constructor instance for that particular case.</p>\n</blockquote>\n<p>I was led to believe that <code>cases h' : id xs</code> should be the same as <code>cases (id xs)</code>, except that a hypothesis <code>h': id xs = ...</code> is added. This is clearly not the case. Is it the expected behavior? </p>\n<p>(Yes, I can <code>rewrite h' at *</code> afterward, but it's kinda annoying that I need to do that. For now, I write a tactic to perform this additional step, but I hope that I don't need that).</p>\n<p><code>cases' (id xs)</code>, on the other hand, doesn't replace <code>id xs</code> in the context at all:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">case</span> <span class=\"n\">list.nil</span>\n<span class=\"n\">xs</span><span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℕ</span>\n<span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"n\">xs</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">list.nil</span> <span class=\"bp\">=</span> <span class=\"o\">[</span><span class=\"n\">e</span><span class=\"o\">]</span>\n<span class=\"n\">case</span> <span class=\"n\">list.cons</span>\n<span class=\"n\">xs</span><span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℕ</span>\n<span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"n\">xs</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n<span class=\"n\">hd</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">hd</span> <span class=\"o\">::</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">[</span><span class=\"n\">e</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>And <code>cases' h' : (id xs)</code> gives the same result as <code>cases h' : (id xs)</code>.</p>",
        "id": 223081344,
        "sender_full_name": "Sorawee Porncharoenwase",
        "timestamp": 1610946228
    },
    {
        "content": "<p>what's the point of the equality if you are replacing all instances of the variable?</p>",
        "id": 223081422,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1610946358
    },
    {
        "content": "<p>If you want more control over this you should use <code>generalize_hyp</code> + <code>cases e</code></p>",
        "id": 223081474,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1610946401
    },
    {
        "content": "<blockquote>\n<p>what's the point of the equality if you are replacing all instances of the variable?</p>\n</blockquote>\n<p>Yes, there would be no point for a _variable_. But my issue is with an arbitrary _expression_. For expressions, a case analysis without the equality hypothesis could lose information. Consider for example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">id2</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">xs</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"n\">xs</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">id2</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">[</span><span class=\"n\">e</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>If I split on <code>id xs</code> without generating the equality hypothesis, I would not be able to prove the example.</p>\n<blockquote>\n<p>If you want more control over this you should use generalize_hyp + cases e</p>\n</blockquote>\n<p>Thanks. I suppose that would work, in the same way that <code>cases h' : e; rewrite h' at *</code> would work. I guess I'm not really asking how to solve the problem because I do have a solution already, but just want to ask if the current behavior of <code>cases</code> and <code>cases'</code> is considered a bug.</p>",
        "id": 223082175,
        "sender_full_name": "Sorawee Porncharoenwase",
        "timestamp": 1610947494
    },
    {
        "content": "<p>The nonreplacement behavior of <code>cases' e</code> sounds like a bug, but I've never used it so I'm not sure what it's trying to address. I don't think that it's necessarily a problem that some actions require a combination of two tactics; adding lots of bells and whistles on one tactic doesn't decrease the complexity budget at all, so if that sequence of tactics has the desired effect then I would say just use that</p>",
        "id": 223082793,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1610948387
    },
    {
        "content": "<p>If you need the presence of the hypothesis to solve the goal, it is possible you'll need the hypothesis at a point even after initial global replacement. Consider the tactic proof for <a href=\"https://leanprover-community.github.io/mathlib_docs/find/parser.bind_eq_done\">docs#parser.bind_eq_done</a>, if the hypothesis on the case of the parser wasn't around, the newly appearing case of the parser after following the relevant bind branch wouldn't be dischargeable.</p>",
        "id": 223084826,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1610951403
    },
    {
        "content": "<p>The <code>cases'</code> behaviour definitely looks like a bug. I'll check what's going on.</p>",
        "id": 223129439,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1610981787
    }
]