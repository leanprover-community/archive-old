[
    {
        "content": "<p>After my experiments documented over at:<br>\n<a href=\"#narrow/stream/113488-general/topic/moving.20algebra.20out.20of.20core\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/moving.20algebra.20out.20of.20core</a><br>\nI'm wondering: should we carve out a well-designed and stable stdlib that sits between core and mathlib?<br>\nI can imagine that for a lot of CS applications, you don't want to have all of mathlib as a dependency. On the other hand, having maths locked into core is really annoying.</p>\n<p>So maybe we can have some <code>gcd(CS, math)</code> in a stdlib, that involves <code>nat</code>, <code>int</code>, <code>list</code>, <code>rbtree</code>, and a bit more.</p>",
        "id": 197182732,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589220184
    },
    {
        "content": "<p>The benefit would be that it would still be relatively easy to change things, if necessary.</p>",
        "id": 197182802,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589220218
    },
    {
        "content": "<p>oh yeah that well-known mathematical object <code>rbtree</code></p>",
        "id": 197182819,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589220232
    },
    {
        "content": "<p>Ok, maybe I shouldn't have said <code>gcd(CS, math)</code></p>",
        "id": 197182945,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589220283
    },
    {
        "content": "<p>maybe you should have just told me it was a tree :-)</p>",
        "id": 197183007,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589220325
    },
    {
        "content": "<p>Having three tightly coupled but formally independent projects imho sounds worse than having two. Counterproposal: Leave the 'general interest' stuff in core and move related code from mathlib to core. (Also, a well-designed and stable stdlib is a pretty large undertaking. The Agda standard library has 50k lines of code and many parts of it only became good after a few iterations.)</p>\n<p>Counter-counterproposal: Wait for Lean 4 and don't spend too much time prettifying a soon-to-be-legacy codebase.</p>",
        "id": 197186152,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1589222027
    },
    {
        "content": "<p>I think Johan's proposal would be good for an ideal world but, in practice, we don't have any stable layer at all at this point.</p>",
        "id": 197187018,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589222476
    },
    {
        "content": "<p>+1 for counter-counterproposal.</p>",
        "id": 197187259,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589222594
    },
    {
        "content": "<p>For purely practical reasons, I think that until Lean 4 comes we're most productive moving as much as possible into mathlib.</p>",
        "id": 197187260,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1589222596
    },
    {
        "content": "<p>For me that's completely fine. I still don't have a good idea of what lean is used for besides mathlib... we can always think about this idea if people start complaining that core has too little...</p>",
        "id": 197199250,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589228304
    },
    {
        "content": "<p>Do the people at Galois use it? <span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> do you know what goes on there? And do MS use Lean 3 for anything or are they all on Lean 4 now?</p>",
        "id": 197210658,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589234781
    },
    {
        "content": "<p>As far as I'm aware, the people at Galois are working with Lean 4. And all the 2 people at MS are using Lean 4 too</p>",
        "id": 197210865,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1589234932
    },
    {
        "content": "<p>Who is Galois?</p>",
        "id": 197212867,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589236051
    },
    {
        "content": "<p>(<a href=\"https://galois.capital/\">Is it these people?</a> It's hard to search for groups named galois... i literally typed galois group into google and was disappointed)</p>",
        "id": 197213078,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589236153
    },
    {
        "content": "<p><a href=\"https://galois.com/\">https://galois.com/</a></p>",
        "id": 197213115,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589236175
    },
    {
        "content": "<p>thanks that makes a lot more sense</p>",
        "id": 197213186,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589236203
    },
    {
        "content": "<p>Galois is a R&amp;D company doing a lot of formal methods work. They are known as a big user of Haskell and this is where I learned to use Lean</p>",
        "id": 197213203,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1589236212
    },
    {
        "content": "<p>I think that for the time being we should assume that any use of community lean 3 is going via mathlib. Even if most of mathlib is not a requirement, it can be trimmed down based on file inclusion for those that need to. But organizationally it's definitely easier to keep everything in one repo.</p>",
        "id": 197237111,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589264067
    }
]