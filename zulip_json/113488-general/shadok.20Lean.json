[
    {
        "content": "<p>Is it me or Lean being weird?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">ga</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">},</span> <span class=\"n\">true</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">bu</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"bp\">→</span> <span class=\"n\">ga</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">trivial</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">zo</span> <span class=\"o\">:</span> <span class=\"n\">ga</span> <span class=\"bp\">→</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">trivial</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">@</span><span class=\"n\">bu</span>     <span class=\"c1\">-- true → ga</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">trivial</span>    <span class=\"c1\">-- true</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">bu</span> <span class=\"n\">trivial</span>  <span class=\"c1\">-- true  ?!?</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">meu</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">zo</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- exact bu trivial, -- invalid type ascription, term has type true but is expected to have type ga</span>\n  <span class=\"n\">apply</span> <span class=\"n\">bu</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">trivial</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>Note that switching from implicit argument to explicit in the first definition makes everything work as (I) expected.</p>",
        "id": 193613214,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586550027
    },
    {
        "content": "<p>I think this is a job for <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span></p>",
        "id": 193613315,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586550119
    },
    {
        "content": "<p>Is this a reducibility problem?  What happens if you put an <code>@[reducible]</code> on <code>ga</code>?</p>",
        "id": 193613361,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1586550139
    },
    {
        "content": "<p>It changes nothing</p>",
        "id": 193613389,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586550174
    },
    {
        "content": "<p><del>Ah, then it is the typical \"stuff is different when there is an expected type\":</del></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"o\">(</span><span class=\"n\">bu</span> <span class=\"n\">trivial</span> <span class=\"o\">:</span> <span class=\"n\">ga</span><span class=\"o\">)</span>  <span class=\"c1\">-- invalid type ascription</span>\n</pre></div>",
        "id": 193613630,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1586550323
    },
    {
        "content": "<p>Actually I'm not really sure what you expected.  The implicit argument in <code>ga</code> is being applied, this is the purpose of implicit arguments.  If you don't want this, use <code>⦃⦄</code>.</p>",
        "id": 193614027,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1586550555
    },
    {
        "content": "<p>Isn't this Lean program meant to follow somehow the typing rules lambda calculus?</p>",
        "id": 193614049,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586550562
    },
    {
        "content": "<p>Being applied to what?</p>",
        "id": 193614203,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586550615
    },
    {
        "content": "<p>This is the magic of implicit arguments.  The function <code>bu</code> has one explicit argument and one implicit argument, so when you write <code>bu trivial</code>, the implicit argument is added <em>implicitly</em>.</p>",
        "id": 193614207,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1586550617
    },
    {
        "content": "<p>But what is it applied to?</p>",
        "id": 193614281,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586550661
    },
    {
        "content": "<p>A meta-variable?</p>",
        "id": 193614297,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586550668
    },
    {
        "content": "<p>Right!</p>",
        "id": 193614307,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1586550674
    },
    {
        "content": "<p>This is crazy.</p>",
        "id": 193614474,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586550753
    },
    {
        "content": "<p>Regarding <code>⦃⦄</code>: if you look at the definitions of <code>transitive</code>, <code>reflexive</code>, etc., you will see that they also use the strict implicit binders for exactly the reason that you've just noticed.</p>",
        "id": 193614511,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1586550773
    },
    {
        "content": "<p>I never really managed to remember what those {{ and }} are meant for.</p>",
        "id": 193614518,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586550778
    },
    {
        "content": "<p>Let me now try on my real problem.</p>",
        "id": 193614698,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586550882
    },
    {
        "content": "<p>If you have <code>f : ∀ α {β} γ ⦃δ⦄ ε, ρ</code>, then:</p>\n<div class=\"codehilite\"><pre><span></span>f          becomes    @f\nf a        becomes    @f a _\nf a g      becomes    @f a _ g\nf a g e    becomes    @f a _ g _ e\n</pre></div>",
        "id": 193614794,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1586550938
    },
    {
        "content": "<p>The difference is whether Lean will eagerly add underscores or not.</p>",
        "id": 193614914,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1586550998
    },
    {
        "content": "<p>Thanks Gabriel! It even work in my real use case!</p>",
        "id": 193614982,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586551035
    }
]