[
    {
        "content": "<p>The Haar measure is currently only defined for multiplicative groups. I tried using the <code>@[to_additive]</code> attribute to also transfer it to additive groups (which is useful to e.g. define the Lebesgue measure using Haar measure), but I have problems.</p>\n<ul>\n<li>Currently, the naming doesn't have <code>mul</code> or anything in it (and I'd like to keep it that way), so I have to write <code>@[to_additive add_haar_measure]</code> or something. This is a little annoying, but something I can definitely live with.</li>\n<li>More importantly, many of my lemmas use multiplication that I don't want to transfer to addition. Usually this is in the form of multiplication on <code>ennreal</code>, which should <em>still</em> be multiplication in the additive version of the theorem. One way around it is to state the theorem for additive groups, and then add the attribute afterwards:</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">lintegral_eq_zero_of_is_mul_left_invariant</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">hμ</span> <span class=\"o\">:</span> <span class=\"n\">regular</span> <span class=\"n\">μ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h2μ</span> <span class=\"o\">:</span> <span class=\"n\">is_mul_left_invariant</span> <span class=\"n\">μ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h3μ</span> <span class=\"o\">:</span> <span class=\"n\">μ</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">ennreal</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∫⁻</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">∂</span><span class=\"n\">μ</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">↔</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"o\">[</span><span class=\"n\">long</span> <span class=\"n\">proof</span> <span class=\"n\">involving</span> <span class=\"n\">multiplication</span> <span class=\"n\">on</span> <span class=\"bp\">`</span><span class=\"n\">ennreal</span><span class=\"bp\">`</span><span class=\"o\">]</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">lintegral_eq_zero_of_is_add_left_invariant</span> <span class=\"o\">[</span><span class=\"n\">add_group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_add_group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">hμ</span> <span class=\"o\">:</span> <span class=\"n\">regular</span> <span class=\"n\">μ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h2μ</span> <span class=\"o\">:</span> <span class=\"n\">is_add_left_invariant</span> <span class=\"n\">μ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h3μ</span> <span class=\"o\">:</span> <span class=\"n\">μ</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">ennreal</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∫⁻</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">∂</span><span class=\"n\">μ</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">↔</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"bp\">@</span><span class=\"n\">lintegral_eq_zero_of_is_mul_left_invariant</span> <span class=\"o\">(</span><span class=\"n\">multiplicative</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"n\">_inst_1</span> <span class=\"n\">_inst_2</span> <span class=\"n\">_inst_3</span>\n  <span class=\"n\">μ</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">hμ</span> <span class=\"n\">h2μ</span> <span class=\"n\">h3μ</span> <span class=\"n\">f</span> <span class=\"n\">hf</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">to_additive</span><span class=\"o\">]</span> <span class=\"n\">lintegral_eq_zero_of_is_mul_left_invariant</span>\n</code></pre></div>\n<p>This is fine if it happens once or twice, but in the Haar measure file, I expect this to happen 10-100 times. And note that <code>@[to_additive]</code> is not helping me at all in the above example.</p>\n<p>Is there a trick I'm missing?</p>",
        "id": 222012272,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1610059322
    },
    {
        "content": "<p>You can fix <a href=\"https://github.com/leanprover-community/mathlib/issues/4210\">#4210</a> ;)</p>",
        "id": 222016781,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1610062239
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/expr.apply_replacement_fun\">docs#expr.apply_replacement_fun</a></p>",
        "id": 222016938,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1610062329
    },
    {
        "content": "<p>A possible heuristic is to skip subexpressions of the form <code>@anyfunction (t : Type*)</code> where <code>t</code> is one of the \"bad\" types.</p>",
        "id": 222017004,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1610062376
    },
    {
        "content": "<p>I think, all non-variable types should be considered \"bad\"</p>",
        "id": 222017030,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1610062394
    },
    {
        "content": "<p>Thanks for the link to that issue. Yeah, something like that would be helpful.</p>",
        "id": 222017887,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1610063070
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/113488-general/topic/additive.20haar.20measure/near/222017030\">said</a>:</p>\n<blockquote>\n<p>I think, all non-variable types should be considered \"bad\"</p>\n</blockquote>\n<p>I just posted a comment that confers something similar: all fixed types (i.e. something that is <code>expr.const</code>) should be \"bad\". However, something like <code>prod G H</code> is probably not bad.</p>",
        "id": 222017985,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1610063153
    },
    {
        "content": "<p>Note that <code>equiv.perm α</code> is \"bad\"</p>",
        "id": 222021027,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1610065678
    },
    {
        "content": "<p>Also <code>matrix</code> has <code>has_zero</code> and <code>has_one</code> iirc.</p>",
        "id": 222021243,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1610065831
    },
    {
        "content": "<p>If you ban constant types, this would be better than the current situation.</p>",
        "id": 222021303,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1610065897
    }
]