[
    {
        "content": "<p>How do you do a <code>mk_fresh_name</code> at the file global scope in order to create a new variable name that hasn't been used?</p>",
        "id": 174417641,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1567044433
    },
    {
        "content": "<p>Also, I need to be able to print that name or somehow return it from Lean back to VSCode TypeScript extension (which I'm modifying), which will then forward it to BananaCats.  If this can't be done yet.  That is okay :)  I can keep track of Bancats-created variable names on the Bancats Pyqt5 app's end.</p>",
        "id": 174417719,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1567044591
    },
    {
        "content": "<p>I then have regex code to generate the next greek or indexed greek / latin variable (in LaTeX) which can then be translated to Lean code.</p>",
        "id": 174417848,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1567044773
    },
    {
        "content": "<p>there is another function with a similar name that gives you globally unique names</p>",
        "id": 174418688,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567046246
    },
    {
        "content": "<p>oh wait no, <code>mk_fresh_name</code> does that</p>",
        "id": 174418748,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567046383
    },
    {
        "content": "<p>Would it be listed here? <a href=\"https://leanprover.github.io/tutorial/A1_Quick_Reference.html\" target=\"_blank\" title=\"https://leanprover.github.io/tutorial/A1_Quick_Reference.html\">https://leanprover.github.io/tutorial/A1_Quick_Reference.html</a></p>",
        "id": 174418749,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1567046384
    },
    {
        "content": "<p>How do you do that then?</p>",
        "id": 174418750,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1567046392
    },
    {
        "content": "<p>I was thinking of <code>get_unused_name</code></p>",
        "id": 174418792,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567046408
    },
    {
        "content": "<p>*create a global variable named mk_fresh_name ?</p>",
        "id": 174418793,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1567046410
    },
    {
        "content": "<p>?</p>",
        "id": 174418794,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567046426
    },
    {
        "content": "<p>You call <code>mk_fresh_name</code> as a tactic</p>",
        "id": 174418798,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567046436
    },
    {
        "content": "<p>it's not a global variable, it's a globally unique variable name</p>",
        "id": 174418803,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567046457
    },
    {
        "content": "<p><code>get_unused_name</code> is only fresh relative to the current context and is used for making human readable local variable names</p>",
        "id": 174418820,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567046519
    },
    {
        "content": "<p>I'm not seeing the helloworld example to either of those calls anywhere</p>",
        "id": 174418865,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1567046540
    },
    {
        "content": "<p>E.g.</p>",
        "id": 174418878,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1567046589
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">do</span> <span class=\"n\">n</span> <span class=\"err\">←</span> <span class=\"n\">mk_fresh_name</span><span class=\"o\">,</span>\n<span class=\"n\">intro</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n<span class=\"n\">hyp</span> <span class=\"err\">←</span> <span class=\"n\">get_local</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n<span class=\"n\">exact</span> <span class=\"n\">hyp</span>\n</pre></div>",
        "id": 174418879,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1567046600
    },
    {
        "content": "<p>Doesn't work on my machine</p>",
        "id": 174418882,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1567046606
    },
    {
        "content": "<p><a href=\"https://leanprover.github.io/programming_in_lean/programming_in_lean.pdf\" target=\"_blank\" title=\"https://leanprover.github.io/programming_in_lean/programming_in_lean.pdf\">https://leanprover.github.io/programming_in_lean/programming_in_lean.pdf</a> (page 32)</p>",
        "id": 174418886,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1567046633
    },
    {
        "content": "<p>that's correct except you need <code>open tactic</code> at the start</p>",
        "id": 174418935,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567046682
    },
    {
        "content": "<p>most non-interactive tactics are in the <code>tactic</code> namespace</p>",
        "id": 174418949,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567046706
    },
    {
        "content": "<blockquote>\n<p>Would it be listed here? <a href=\"https://leanprover.github.io/tutorial/A1_Quick_Reference.html\" target=\"_blank\" title=\"https://leanprover.github.io/tutorial/A1_Quick_Reference.html\">https://leanprover.github.io/tutorial/A1_Quick_Reference.html</a></p>\n</blockquote>\n<p>Just to note that this page describes Lean 2 not Lean 3.</p>",
        "id": 174431757,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1567065358
    }
]