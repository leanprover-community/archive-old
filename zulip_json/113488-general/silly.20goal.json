[
    {
        "content": "<p>surely there should be a one-word tactic for this?<br>\n<code>example {n : ℕ} (m : ℕ) : m.succ + n = 1 + (m + n) := sorry</code></p>",
        "id": 206210706,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596757579
    },
    {
        "content": "<p>actually, no: what I really want is an induction principle for <code>nat</code> that uses <code>m+1</code> rather than <code>m.succ</code></p>",
        "id": 206210841,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596757724
    },
    {
        "content": "<p>PR?</p>",
        "id": 206210968,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596757861
    },
    {
        "content": "<p>I also find <code>m+1</code> more useful at times</p>",
        "id": 206210977,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596757872
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113488-general/topic/silly.20goal/near/206210706\">said</a>:</p>\n<blockquote>\n<p>surely there should be a one-word tactic for this?<br>\n<code>example {n : ℕ} (m : ℕ) : m.succ + n = 1 + (m + n) := sorry</code></p>\n</blockquote>\n<p>does <code>omega</code> work?</p>",
        "id": 206210994,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596757899
    },
    {
        "content": "<p>we should have that induction principle, and we should also make a tag for the induction tactic that lets you specify a default induction principle for each type</p>",
        "id": 206211157,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1596758039
    },
    {
        "content": "<p><code>omega</code> did work, thanks</p>",
        "id": 206212073,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596758831
    },
    {
        "content": "<p><code>induction using</code>?</p>",
        "id": 206212897,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596759721
    },
    {
        "content": "<p>right. I essentially always want <code>induction n using nat.induction_on'</code>, where <code>induction_on'</code> is the version with <code>+1</code> instead of <code>.succ</code>. The idea I'm proposing is an attribute <code>@[induction] with priority k</code>, so that <code>induction n</code> actually means <code>induction n using h</code> where <code>h</code> is the lemma with the highest priority induction attribute.</p>",
        "id": 206213260,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1596760152
    },
    {
        "content": "<p>(maybe this \"induction with the right default induction principle\" is instead a new tactic <code>induction'</code> or <code>by_induction</code>)</p>",
        "id": 206213372,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1596760308
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"252300\">@Jalex Stark</span> I think that's a good idea. That would be pretty useful for my datatype project.</p>",
        "id": 206219535,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1596768654
    }
]