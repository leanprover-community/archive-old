[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">HC</span> <span class=\"o\">:</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">finite</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">finite</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>",
        "id": 125096226,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523759849
    },
    {
        "content": "<p>I see <code>fintype_range</code>, an instance proving that the range of a function with fintype domain is a fintype, but I have never worked with finite sets/types before. Should I be switching to and fro between finite sets and fintypes? Should I be letting type class inference and/or automation do the work for me? This stuff looks pretty easy in maths so hopefully isn't too painless here.</p>",
        "id": 125096272,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523759946
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>import data.set\n\nlocal attribute [instance] classical.prop_decidable\n\nexample (X Y : Type) (C : set X) (HC : set.finite C) (f : C → Y) : set.finite (set.range f) :=\nHC.rec $ λ HF, nonempty.intro $ @set.fintype_range _ _ _ f HF\n</pre></div>",
        "id": 125096454,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523760470
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>import data.set\n\nlocal attribute [instance] classical.prop_decidable\n\nexample (X Y : Type) (C : set X) (HC : set.finite C) (f : C → Y) : set.finite (set.range f) :=\nlet ⟨HF⟩ := HC in ⟨@set.fintype_range _ _ _ f HF⟩\n</pre></div>",
        "id": 125096493,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523760531
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>import data.set\n\nlocal attribute [instance] classical.prop_decidable\n\nexample (X Y : Type) (C : set X) (f : C → Y) : set.finite C → set.finite (set.range f)\n| ⟨HF⟩ := ⟨@set.fintype_range _ _ _ f HF⟩\n</pre></div>",
        "id": 125096591,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523760782
    },
    {
        "content": "<p>Thanks Kenny. I have spent all evening reducing the statement that Spec(R) is compact to the case of covers by a basis ;-)</p>",
        "id": 125096597,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523760811
    },
    {
        "content": "<p>nice</p>",
        "id": 125096598,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523760820
    }
]