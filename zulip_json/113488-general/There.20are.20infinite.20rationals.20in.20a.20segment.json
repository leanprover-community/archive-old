[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">A2</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">altb</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">infinite</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span> <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">set.Ioo</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>How to prove this?<br>\nI come across 2 difficulties. How to use Lean's infinite? (version 3.48.0) How to prove for all a, b s.t. b - a &gt; 1, there is an integer in (a, b)?</p>",
        "id": 298699271,
        "sender_full_name": "Jiatong Yang",
        "timestamp": 1663128210
    },
    {
        "content": "<p>For your second question, can you write an <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>?</p>",
        "id": 298715119,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1663139720
    },
    {
        "content": "<p>For the second one, one approach is floor(a+1), all the lemmas will be there.</p>",
        "id": 298716626,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1663140455
    },
    {
        "content": "<p>Slightly easier with <code>(floor a) + 1</code> in terms of lemmas</p>",
        "id": 298718701,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1663141448
    },
    {
        "content": "<p>For the first you could use that the rationals are archimedean as in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/rat.archimedean\">docs#rat.archimedean</a> to construct two rationals <code>y&lt;x</code> such that <code>a&lt;y&lt;x&lt;b</code>. Then you can define the function <code>f : ℕ → ℚ</code> sending <code>n</code> to <code>y+(x-y)/2+(x-y)/2n=y+(n+1)(x-y)/2</code> and prove it is injective and takes values inside your interval. Finally, use that a set receiving an injective function from an infinite set is itself infinite, as in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/infinite.of_injective\">docs#infinite.of_injective</a>.</p>",
        "id": 298720363,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1663142270
    },
    {
        "content": "<p>You could also split that approach in two steps:</p>\n<ul>\n<li>prove that <code>(0,1)</code> is infinite</li>\n<li>construct a bijection between <code>(a,b)</code> and <code>(0,1)</code></li>\n</ul>",
        "id": 298721579,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1663142820
    },
    {
        "content": "<p>Probably the correct generality is nonempty open sets intersect (topologically) dense sets in infinitely many points?</p>",
        "id": 298724355,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1663144021
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/There.20are.20infinite.20rationals.20in.20a.20segment/near/298721579\">said</a>:</p>\n<blockquote>\n<p>You could also split that approach in two steps:</p>\n<ul>\n<li>prove that <code>(0,1)</code> is infinite</li>\n<li>construct a bijection between <code>(a,b)</code> and <code>(0,1)</code></li>\n</ul>\n</blockquote>\n<p>The natural bijection won't preserve rationality :-( My instinct was to prove that there was a rational in each of the regions (a+di/n, a+d(i+1)/n) with d=b-a but this will also be a pain</p>",
        "id": 298741185,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1663150938
    },
    {
        "content": "<p>My thought was to prove by induction that there is a strictly decreasing sequence of rats by using <code>exists_rat_btwn</code></p>",
        "id": 298741295,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663150997
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> that's not true for finite top spaces. I think you need to know that the open set is infinite, and also the space is T0 so that you can take a finite set of points out while keeping it open</p>",
        "id": 298741829,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663151223
    },
    {
        "content": "<p>Aah, of course it doesn't preserve rationality. But scaling and translating by rationals does.</p>",
        "id": 298742950,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1663151642
    },
    {
        "content": "<p>So you scale and translate <code>(a,b)</code> until it contains <code>(0,1)</code>.</p>",
        "id": 298743002,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1663151657
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/There.20are.20infinite.20rationals.20in.20a.20segment/near/298741185\">said</a>:</p>\n<blockquote>\n<p>The natural bijection won't preserve rationality :-( My instinct was to prove that there was a rational in each of the regions (a+di/n, a+d(i+1)/n) with d=b-a but this will also be a pain</p>\n</blockquote>\n<p>This can be made to work, though, if you prove it for $a, b$ rational and then show that there are two rationals between every distinct pair of reals, to deal with the irrational case</p>",
        "id": 298824249,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1663179260
    },
    {
        "content": "<p>Thank you all very much! I have written down a proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">A2</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">altb</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">infinite</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span> <span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"o\">(</span><span class=\"n\">exists_rat_btwn</span> <span class=\"n\">altb</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">l</span> <span class=\"n\">hl</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"o\">(</span><span class=\"n\">exists_rat_btwn</span> <span class=\"n\">hl.2</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">r</span> <span class=\"n\">hr</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">lltr</span> <span class=\"o\">:</span> <span class=\"n\">l</span> <span class=\"bp\">&lt;</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"n\">real.rat_cast_lt.mp</span> <span class=\"n\">hr.left</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">l</span> <span class=\"bp\">&lt;</span> <span class=\"n\">l</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">-</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">∧</span> <span class=\"n\">l</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">-</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">≤</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">intro</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">sp1</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"o\">((</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">nat.one_div_pos_of_nat</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">sp2</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"o\">((</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">one_le_div</span> <span class=\"n\">sp1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">),</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">-</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">mul_pos</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">linarith</span><span class=\"o\">)</span> <span class=\"n\">sp1</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">-</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">-</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n      <span class=\"n\">conv_rhs</span> <span class=\"o\">{</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">mul_one</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">-</span> <span class=\"n\">l</span><span class=\"o\">)],</span>\n      <span class=\"o\">},</span>\n      <span class=\"n\">mono</span><span class=\"bp\">;</span> <span class=\"n\">linarith</span><span class=\"o\">,</span>\n    <span class=\"kd\">end</span><span class=\"o\">,</span>\n    <span class=\"n\">split</span><span class=\"bp\">;</span> <span class=\"n\">linarith</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"o\">(⟨</span><span class=\"n\">l</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">-</span> <span class=\"n\">l</span><span class=\"o\">)</span><span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)),</span> <span class=\"n\">p</span> <span class=\"n\">n</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">l</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">r</span><span class=\"o\">}),</span>\n  <span class=\"k\">have</span> <span class=\"n\">injf</span> <span class=\"o\">:</span> <span class=\"n\">function.injective</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">intros</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">H</span><span class=\"bp\">;</span> <span class=\"n\">linarith</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">lrinf</span> <span class=\"o\">:</span> <span class=\"n\">infinite</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">l</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">r</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"n\">infinite.of_injective</span> <span class=\"n\">f</span> <span class=\"n\">injf</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">l</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">r</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span> <span class=\"bp\">//</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">rat.cast_lt.mpr</span> <span class=\"n\">h.left</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"n\">rat.cast_le.mpr</span> <span class=\"n\">h.right</span><span class=\"o\">,</span>\n    <span class=\"n\">split</span><span class=\"bp\">;</span> <span class=\"n\">linarith</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">⟩,</span>\n  <span class=\"k\">have</span> <span class=\"n\">injg</span> <span class=\"o\">:</span> <span class=\"n\">function.injective</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">rintros</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"o\">⟩</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">subtype.ext</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"n\">exact</span> <span class=\"bp\">@</span><span class=\"n\">infinite.of_injective</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">lrinf</span> <span class=\"n\">g</span> <span class=\"n\">injg</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>But it is too long. Is there any way to improve?</p>",
        "id": 298882907,
        "sender_full_name": "Jiatong Yang",
        "timestamp": 1663199552
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 298890900,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1663207388
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 298891038,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1663207529
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 298891156,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1663207650
    },
    {
        "content": "<p>nvm, misread the problem</p>",
        "id": 298891800,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1663208248
    },
    {
        "content": "<p>I still need help to improve the proof. <span aria-label=\"rose\" class=\"emoji emoji-1f339\" role=\"img\" title=\"rose\">:rose:</span></p>",
        "id": 298919865,
        "sender_full_name": "Jiatong Yang",
        "timestamp": 1663228712
    },
    {
        "content": "<p>your proof is missing some imports?</p>",
        "id": 298919995,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663228771
    },
    {
        "content": "<p>Here's a shorter proof, following Matt's idea:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">A2</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">altb</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">infinite</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span> <span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"n\">infinite.of_not_finite</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"n\">H</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">finite.exists_min</span> <span class=\"n\">_</span> <span class=\"n\">ℝ</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">nonempty_subtype.2</span> <span class=\"o\">(</span><span class=\"n\">exists_rat_btwn</span> <span class=\"n\">altb</span><span class=\"o\">))</span> <span class=\"n\">_</span> <span class=\"n\">coe</span><span class=\"o\">,</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">q'</span><span class=\"o\">,</span> <span class=\"n\">hq'₁</span><span class=\"o\">,</span> <span class=\"n\">hq'₂</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">exists_rat_btwn</span> <span class=\"n\">q.2.1</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">not_lt.2</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">⟨</span><span class=\"n\">q'</span><span class=\"o\">,</span> <span class=\"n\">hq'₁</span><span class=\"o\">,</span> <span class=\"n\">hq'₂.trans</span> <span class=\"n\">q.2.2</span><span class=\"o\">⟩)</span> <span class=\"n\">hq'₂</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 298921502,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663229430
    },
    {
        "content": "<p>So great! Which version do you use? It cannot be compiled in the newest version for the absence of infinite.of_not_finite.</p>",
        "id": 298934218,
        "sender_full_name": "Jiatong Yang",
        "timestamp": 1663234894
    },
    {
        "content": "<p>Now we should use <code>not_finite_iff_infinite.mp</code> instead. (I have no idea why mathlib changed the definition of finite and infinite recently)</p>",
        "id": 298934985,
        "sender_full_name": "Jiatong Yang",
        "timestamp": 1663235244
    },
    {
        "content": "<p>Thank you a lot! I wrote on paper using minimum too, but I didn't find the api. <span aria-label=\"sob\" class=\"emoji emoji-1f62d\" role=\"img\" title=\"sob\">:sob:</span></p>",
        "id": 298935280,
        "sender_full_name": "Jiatong Yang",
        "timestamp": 1663235365
    }
]