[
    {
        "content": "<p>This looks like it should be obvious, but I'm stuck with a goal state of <code>⊢ {value := a.value, proof := _} = a</code>, where the type is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">aux</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">free_algebra</span> <span class=\"n\">R</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">grade_proof</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">value</span> <span class=\"o\">:</span> <span class=\"n\">free_algebra</span> <span class=\"n\">R</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">proof</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"n\">value</span><span class=\"o\">)</span>\n</code></pre></div>\n\n<p>How do I invoke proof-irrelevance to close this?</p>",
        "id": 211735422,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1601458429
    },
    {
        "content": "<p>Does <code>by { cases a, refl }</code> work?</p>",
        "id": 211735501,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1601458470
    },
    {
        "content": "<p>Yes, it does - thanks</p>",
        "id": 211735550,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1601458513
    },
    {
        "content": "<p>These kinds of properties are sometimes called <code>eta</code>, see e.g. <code>prod.mk.eta</code>.</p>",
        "id": 211735567,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1601458530
    },
    {
        "content": "<p>Is there any way to make <code>simp</code> handle this?</p>",
        "id": 211735640,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1601458567
    },
    {
        "content": "<p>(for this specific struct)</p>",
        "id": 211735653,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1601458579
    },
    {
        "content": "<p><code>@[simp] lemma aux.eta := by { cases a, refl }</code>? <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 211735672,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1601458597
    },
    {
        "content": "<p>My rule of thumb is that <code>project_a (mk a b)</code> is easily reduced and <code>mk (project_a x) (project_b x)</code> needs some help from <code>cases</code>.</p>",
        "id": 211735859,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1601458711
    },
    {
        "content": "<p>Many definitions of basic objects in the library are followed almost immediately by an eta lemma with proof by cases e.g. <a href=\"https://github.com/leanprover-community/mathlib/blob/743f82ca17c1690fead4ce0f882c590b37cb2842/src/data/complex/basic.lean#L37-L38\">https://github.com/leanprover-community/mathlib/blob/743f82ca17c1690fead4ce0f882c590b37cb2842/src/data/complex/basic.lean#L37-L38</a></p>",
        "id": 211735870,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601458718
    },
    {
        "content": "<p>In Lean, project (mk) is often rfl but mk (project) is not, because this was some design decision. It's called eta reduction and we have to do it by hand and add it as a simp lemma.</p>",
        "id": 211735962,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601458770
    },
    {
        "content": "<p>On a similar note, is there any way to automate</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_mul</span><span class=\"o\">(</span><span class=\"n\">grade_proof.aux</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">a.value</span> <span class=\"bp\">*</span> <span class=\"n\">b.value</span><span class=\"o\">,</span> <span class=\"n\">p.mul</span> <span class=\"n\">a.proof</span> <span class=\"n\">b.proof</span><span class=\"o\">⟩⟩</span>\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">mul_def</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">aux</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"o\">⟨</span><span class=\"n\">a.value</span> <span class=\"bp\">*</span> <span class=\"n\">b.value</span><span class=\"o\">,</span> <span class=\"n\">p.mul</span> <span class=\"n\">a.proof</span> <span class=\"n\">b.proof</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 211737046,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1601459390
    },
    {
        "content": "<p>Specifically to avoid writing the same expression twice in both the lemma and the instance</p>",
        "id": 211737151,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1601459439
    },
    {
        "content": "<p>For structures <code>@[simps]</code> does exactly that.  I'm not sure how well it works for type class instances.</p>",
        "id": 211737201,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1601459486
    },
    {
        "content": "<p>Doesn't seem to work unfortunately</p>",
        "id": 211737374,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1601459616
    },
    {
        "content": "<p>It does!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.simps</span>\n<span class=\"kd\">@[simps]</span> <span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_mul</span> <span class=\"n\">bool</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">band</span><span class=\"o\">⟩</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">b₁</span> <span class=\"n\">b₂</span> <span class=\"o\">:</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">b₁</span> <span class=\"bp\">*</span> <span class=\"n\">b₂</span> <span class=\"bp\">=</span> <span class=\"n\">band</span> <span class=\"n\">b₁</span> <span class=\"n\">b₂</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n</code></pre></div>\n\n<p>It hasn't been tested a lot though.</p>",
        "id": 211737388,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1601459625
    },
    {
        "content": "<p>If it doesn't, please post a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>",
        "id": 211737430,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1601459644
    },
    {
        "content": "<p>I'm unfortunately quite a way off an mwe, so for now I'll stick with the anecdotal claim that one of my <code>simp</code> proof works with <code>add_def</code> and not <code>simps</code></p>",
        "id": 211737581,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1601459740
    },
    {
        "content": "<p>If <code>grade_proof.aux</code> is a structure, it is possible that <code>@[simps]</code> tries to apply projections recursively. Can you try <code>@[simps mul]</code>?</p>",
        "id": 211737703,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1601459811
    },
    {
        "content": "<p>If that doesn't work, the output of <code>set_option trace.simps.verbose true</code> just before using the <code>@[simps]</code> attribute would also be helpful (you don't have to minimize the example).</p>",
        "id": 211737805,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1601459872
    },
    {
        "content": "<p><code>simps mul</code> did the trick</p>",
        "id": 211737881,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1601459901
    },
    {
        "content": "<p>I now have a <code>semiring</code> instance where almost every field is <code>by simp</code> :)</p>",
        "id": 211738075,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1601460011
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/4335\">#4335</a> is the result, any tips for golfing would be appreciated :)</p>",
        "id": 211742734,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1601463167
    }
]