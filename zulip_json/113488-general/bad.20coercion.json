[
    {
        "content": "<p>Would this function be a bad coercion? Do I have to use <code>has_coe_t</code> or something for this?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">to_matrix</span> <span class=\"o\">[</span><span class=\"n\">has_one</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">pequiv</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">R</span>\n<span class=\"bp\">|</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">j</span> <span class=\"err\">âˆˆ</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"k\">then</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"mi\">0</span>\n</pre></div>",
        "id": 170518627,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1562743536
    },
    {
        "content": "<p>why don't you use projection</p>",
        "id": 170519834,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1562744873
    },
    {
        "content": "<p>I do, but then I write <code>.to_matrix</code> everywhere, and everything is long and unreadable.</p>",
        "id": 170519920,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1562744967
    },
    {
        "content": "<p>Can you make it a definition and add local instances where you find yourself frequently writing <code>to_matrix</code>?  The main question I have with coercision instances is whether you always want them to spread to modules that import the module that are in even indirectly.</p>",
        "id": 170529332,
        "sender_full_name": "Joe Hendrix",
        "timestamp": 1562754137
    },
    {
        "content": "<p>The difficulty with that is I need all the theorems to be stated with whichever one I'm using.</p>",
        "id": 170529857,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1562754819
    },
    {
        "content": "<p>That's true, but you could still define the coe_t, just not make it an instance.</p>\n<p>What I had in mind was something like</p>\n<div class=\"codehilite\"><pre><span></span>def to_mat_coe : coe_t (pequiv m n) (matrix m n R) := &lt;to_matrix&gt;\nlocal [instance] to_mat_coe\n</pre></div>\n\n\n<p>Then other modules that want the coercions just write <code>local [instance] to_mat_coe</code>.</p>\n<p>Note that the above syntax may not be exactly right, it's been a while since I used Lean 3.</p>",
        "id": 170531122,
        "sender_full_name": "Joe Hendrix",
        "timestamp": 1562756139
    },
    {
        "content": "<p>That will create a bunch of theorems of the form <code>@coe _ _ (to_mat_coe) foo = bar</code>, which will not be usable after the coercion goes away</p>",
        "id": 170531970,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562757144
    },
    {
        "content": "<p>This can't be a coe because <code>R</code> is an out parameter</p>",
        "id": 170532008,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562757201
    }
]