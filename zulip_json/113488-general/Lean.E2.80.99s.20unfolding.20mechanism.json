[
    {
        "content": "<p>Hi there, </p>\n<p>Is Lean’s unfolding of mutually recursive definitions any different than the unfolding of ‚normal‘ definitions?</p>\n<p>I defined a mutually recursive function and have some equality which should hold definitionally, but the proof term doesn’t type. If I do the proof by hand, reflexivity or simp won’t solve the equation and I need an extra unfolding step of the mutually recursive definition. Tagging the definition with a reducible-attribute doesn’t change anything.</p>\n<p>However, the proof goes through without the unfolding in a simpler setting without indexed types.</p>\n<p>Is there a way to work around this? As I am using proof terms, it would also be helpful to know how to do the unfolding in a proof term.</p>\n<p>Thanks in advance!<br>\nSarah</p>",
        "id": 126219226,
        "sender_full_name": "Sarah Mameche",
        "timestamp": 1525705655
    },
    {
        "content": "<p>Definitions by mutual recursion are compiled to well founded recursions, and the generated equations are not guaranteed to be definitional. The equation compiler generates equations for all the match branches; they are used automatically if you <code>rw [T]</code> or <code>simp [T]</code> where <code>T</code>is your definition.</p>",
        "id": 126249977,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525758223
    }
]