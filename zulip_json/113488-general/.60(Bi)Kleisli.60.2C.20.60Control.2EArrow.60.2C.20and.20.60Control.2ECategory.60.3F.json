[
    {
        "content": "<p>Ultimately, I'd like to represent BiKleisli transformations as a type class in Lean 4. </p>\n<p>(See e.g. <a href=\"https://www.cl.cam.ac.uk/techreports/UCAM-CL-TR-854.pdf\">Ch. 5 §2 of Orchard 2014</a>, <a href=\"http://blog.sigfpe.com/2008/03/transforming-comonad-with-monad.html\">this blog post</a>, <a href=\"https://www.jucs.org/jucs_11_7/signals_and_comonads/jucs_11_7_1311_1327_vene.pdf\">p. 1323 of Uustalu &amp; Vene 2005</a>, or <a href=\"https://hackage.haskell.org/package/category-extras-0.53.5.1/src/src/Control/Arrow/BiKleisli.hs\">this Haskell definition</a> for context on BiKleislis.)</p>\n<p>I'm basically trying to translate from the Haskell code that's available, and I'm having trouble translating <code>Control.Arrow</code>s +/- <code>Control.Category</code> to Lean4 in a way that works with the standard library's definition of monad and the analogous definition for comonad that I have. Below is what I have so far (<code>Category</code> + instances are mostly c/o <span class=\"user-mention\" data-user-id=\"455674\">@Matej Penciak</span> ) with my questions bolded inline, and ending with an incomplete and not quite typechecking definition/partial instances for <code>Arrow</code>. (Everything up to that point checks out.)</p>",
        "id": 307029136,
        "sender_full_name": "Eric Meinhardt",
        "timestamp": 1667185065
    },
    {
        "content": "<p><strong><code>Comonad</code> and <code>Distributes</code></strong></p>\n<p>The (condensed) definitions for <code>Comonad</code> (i.e. collapsing separate classes for each of the methods of a comonad - <code>Extend</code>, etc. that would be useful for inferring instances) and <code>Distributes</code> that I have are</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- minor extension to `Monad`: not necessary, but parallel to `Arrow.arr`, as noted below</span>\n<span class=\"c\">/-</span><span class=\"cm\"> Lifts a pure function into a monad m -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">Monad.liftFM</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"n\">β</span>\n  <span class=\"bp\">|</span> <span class=\"n\">f</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">pure</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n\n\n<span class=\"c1\">-- basic comonad definitions</span>\n<span class=\"kd\">class</span> <span class=\"n\">Comonad</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Functor</span> <span class=\"n\">w</span> <span class=\"n\">where</span>\n  <span class=\"sd\">/-- AKA coreturn or counit or copure -/</span>\n  <span class=\"n\">extract</span> <span class=\"o\">:</span> <span class=\"n\">w</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n\n  <span class=\"sd\">/-- AKA cojoin -/</span>\n  <span class=\"n\">duplicate</span> <span class=\"o\">:</span> <span class=\"n\">w</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">w</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n  <span class=\"sd\">/-- AKA cobind aka coflatmap aka (&lt;&lt;=)</span>\n<span class=\"sd\">  NB this matches the argument order of `Bind.bindLeft`.</span>\n<span class=\"sd\">  (Why is `bind.bindLeft` `...Left`? \\shrug). -/</span>\n  <span class=\"n\">extend</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">w</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">w</span> <span class=\"n\">β</span>\n\n<span class=\"sd\">/-- AKA (=&gt;&gt;). Same as `Comonad.extend` but with arguments swapped.</span>\n<span class=\"sd\">  This matchs the argument order of `Bind.bind` / its operator (&gt;&gt;=) -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">Comonad.extendRight</span> <span class=\"o\">[</span><span class=\"n\">Comonad</span> <span class=\"n\">w</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">w</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">w</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"n\">flip</span> <span class=\"n\">Comonad.extend</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> left/right association and weights are consistent with `Bind.bind`, etc. +</span>\n<span class=\"cm\">the Haskell on which existing code is based -/</span>\n<span class=\"kd\">@[inheritDoc]</span> <span class=\"kd\">infixr</span><span class=\"o\">:</span><span class=\"mi\">55</span>  <span class=\"s2\">\" &lt;&lt;= \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Comonad.extend</span>\n<span class=\"kd\">@[inheritDoc]</span> <span class=\"kd\">infixl</span><span class=\"o\">:</span><span class=\"mi\">55</span>  <span class=\"s2\">\" =&gt;&gt; \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Comonad.extendRight</span>\n\n<span class=\"sd\">/-- Lifts a function into a comonad. Cf `Monad.liftFM` above. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">Comonad.liftFW</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Comonad</span> <span class=\"n\">w</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">w</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"c1\">-- extend (f ∘ extract)</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">∘</span> <span class=\"n\">extract</span> <span class=\"bp\">&lt;&lt;=</span> <span class=\"bp\">·</span><span class=\"o\">)</span>        <span class=\"c1\">-- equivalent to the above</span>\n\n<span class=\"sd\">/-- Left-to-right cokleisli composition (=&gt;=)</span>\n<span class=\"sd\">Why does L→R composition end with `Right`? because that matches `Bind.bindRight`.</span>\n<span class=\"sd\">Why is `Bind.bindRight` that way? \\shrug -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">Comonad.cokleisliRight</span> <span class=\"o\">[</span><span class=\"n\">Comonad</span> <span class=\"n\">w</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">w</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">w</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">wa</span> <span class=\"o\">:</span> <span class=\"n\">w</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"o\">:=</span>\n  <span class=\"c1\">-- g ∘ extend f $ wa  -- equivalent</span>\n  <span class=\"c1\">-- g $ f &lt;&lt;= wa      -- equivalent</span>\n  <span class=\"n\">wa</span> <span class=\"bp\">=&gt;&gt;</span> <span class=\"n\">f</span> <span class=\"bp\">|&gt;</span> <span class=\"n\">g</span>        <span class=\"c1\">-- equivalent; computation flows left-to-right</span>\n\n<span class=\"sd\">/-- Right-to-left cokleisli composition (=&lt;=) -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">Comonad.cokleisliLeft</span> <span class=\"o\">[</span><span class=\"n\">Comonad</span> <span class=\"n\">w</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">w</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">w</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">wa</span> <span class=\"o\">:</span> <span class=\"n\">w</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"o\">:=</span>\n  <span class=\"c1\">-- g ∘ extend f $ wa -- equivalent</span>\n  <span class=\"n\">g</span> <span class=\"bp\">$</span> <span class=\"n\">f</span> <span class=\"bp\">&lt;&lt;=</span> <span class=\"n\">wa</span>        <span class=\"c1\">-- equivalent; computation flows right-to-left</span>\n  <span class=\"c1\">-- wa =&gt;&gt; f |&gt; g    -- equivalent</span>\n\n<span class=\"kd\">@[inheritDoc]</span> <span class=\"kd\">infixr</span><span class=\"o\">:</span><span class=\"mi\">55</span>  <span class=\"s2\">\" =&gt;= \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Comonad.cokleisliRight</span>\n<span class=\"kd\">@[inheritDoc]</span> <span class=\"kd\">infixr</span><span class=\"o\">:</span><span class=\"mi\">55</span>  <span class=\"s2\">\" =&lt;= \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Comonad.cokleisliLeft</span>\n\n\n\n<span class=\"c1\">-- basic bikleisli definitions</span>\n<span class=\"kd\">class</span> <span class=\"n\">Distributes</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">dist</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n\n<span class=\"sd\">/-- Left-to-right biKleisli composition (would be &gt;&gt;&gt; in Haskell arrow notation if f,g were Arrows).</span>\n<span class=\"sd\">Why did I put this in the `Distributes` namespace? \\shrug -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">Distributes.biKleisliRight</span> <span class=\"o\">[</span><span class=\"n\">Comonad</span> <span class=\"n\">w</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Distributes</span> <span class=\"n\">w</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">w</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"n\">β</span> <span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">w</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">w</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"n\">γ</span> <span class=\"o\">:=</span>\n  <span class=\"c1\">-- (· &gt;&gt;= g) ∘ Distributes.dist ∘ Comonad.extend f -- perhaps the easiest to read, at first</span>\n  <span class=\"c1\">-- (g =&lt;&lt; ·) ∘ Distributes.dist ∘ (f &lt;&lt;= ·)        -- equivalent; computation flows right-to-left</span>\n  <span class=\"n\">g</span> <span class=\"bp\">&lt;=&lt;</span> <span class=\"n\">Distributes.dist</span> <span class=\"bp\">∘</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">&lt;&lt;=</span> <span class=\"bp\">·</span><span class=\"o\">)</span>                <span class=\"c1\">-- equivalent; marginally more point-free</span>\n\n<span class=\"sd\">/-- Right-to-left biKleisli composition (would be &lt;&lt;&lt; in Haskell arrow notation if f,g were Arrows).</span>\n<span class=\"sd\">Why did I put this in the `Distributes` namespace? \\shrug -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">Distributes.biKleisliLeft</span> <span class=\"o\">[</span><span class=\"n\">Comonad</span> <span class=\"n\">w</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Distributes</span> <span class=\"n\">w</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">w</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">w</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"n\">β</span> <span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">w</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"n\">γ</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">∘</span> <span class=\"n\">Distributes.dist</span> <span class=\"bp\">∘</span> <span class=\"n\">Comonad.extend</span> <span class=\"n\">f</span>\n\n\n\n<span class=\"c1\">-- henceforth the following abbreviations should be useful</span>\n\n<span class=\"n\">abbrev</span>   <span class=\"n\">Kleisli</span>   <span class=\"n\">m</span>             <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span>   <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n<span class=\"n\">abbrev</span> <span class=\"n\">CoKleisli</span> <span class=\"n\">w</span>   <span class=\"o\">[</span><span class=\"n\">Comonad</span> <span class=\"n\">w</span><span class=\"o\">]</span>           <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">w</span> <span class=\"n\">a</span> <span class=\"bp\">→</span>   <span class=\"n\">b</span><span class=\"o\">)</span>\n<span class=\"n\">abbrev</span> <span class=\"n\">BiKleisli</span> <span class=\"n\">w</span> <span class=\"n\">m</span> <span class=\"o\">[</span><span class=\"n\">Comonad</span> <span class=\"n\">w</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">w</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I'd like to be able to be able to use combinators like those associated with <code>Category</code> and <code>Arrow</code> in the code I'm translating from <a href=\"https://hackage.haskell.org/package/base-4.17.0.0/docs/Control-Arrow.html\">Control.Arrow</a>+ <a href=\"https://hackage.haskell.org/package/base-4.17.0.0/docs/Control-Category.html\">Control.Category</a> but don't expect a 1:1 translation into Lean. <br>\n<strong>Q1: What should reasonable definitions for Lean4 analogues of <code>Control.Category</code> +/- <code>Control.Arrow</code> look like?</strong></p>",
        "id": 307029212,
        "sender_full_name": "Eric Meinhardt",
        "timestamp": 1667185131
    },
    {
        "content": "<p><strong>One possible candidate for <code>Category</code> with four instances </strong></p>\n<p><span class=\"user-mention\" data-user-id=\"455674\">@Matej Penciak</span>  arrived at the following definition for <code>Category</code> that looks pretty similar to <code>Control.Category</code> with instances that seem OK ( =typecheck + are pretty similar to the Haskell analogues) for <code>(·→·)</code>,<code>Kleisli m</code>, <code>CoKleisli w</code>, and <code>BiKleisli w m</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Category</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">morph</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">id</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">morph</span> <span class=\"n\">a</span> <span class=\"n\">a</span>\n  <span class=\"n\">comp</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">morph</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">morph</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">morph</span> <span class=\"n\">a</span> <span class=\"n\">c</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Category</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">→</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">id</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">id</span> <span class=\"n\">a</span>\n  <span class=\"n\">comp</span> <span class=\"n\">g</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">Function.comp</span> <span class=\"n\">g</span> <span class=\"n\">f</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Category</span> <span class=\"o\">(</span><span class=\"n\">Kleisli</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">id</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">pure</span>\n  <span class=\"n\">comp</span> <span class=\"n\">g</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">g</span> <span class=\"bp\">&lt;=&lt;</span> <span class=\"n\">f</span>\n  <span class=\"c1\">-- comp g f := Bind.kleisliLeft g f -- equivalent</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Comonad</span> <span class=\"n\">w</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Category</span> <span class=\"o\">(</span><span class=\"n\">CoKleisli</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">id</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">Comonad.extract</span>\n  <span class=\"n\">comp</span> <span class=\"n\">g</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">g</span> <span class=\"bp\">=&lt;=</span> <span class=\"n\">f</span>\n  <span class=\"c1\">-- comp g f := Comonad.cokleisliLeft g f -- equivalent</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">Comonad</span> <span class=\"n\">w</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Distributes</span> <span class=\"n\">w</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Category</span> <span class=\"o\">(</span><span class=\"n\">BiKleisli</span> <span class=\"n\">w</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">id</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">pure</span> <span class=\"bp\">∘</span> <span class=\"n\">Comonad.extract</span>\n  <span class=\"n\">comp</span> <span class=\"n\">g</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">Distributes.biKleisliLeft</span> <span class=\"n\">g</span> <span class=\"n\">f</span>\n</code></pre></div>\n<p><strong>Q2: Are there other plausible directions for <code>Category</code> definitions or <code>Monad</code> instances that might be more idiomatic in Lean4 or lend themselves better to defining combinators like those in <code>Control.Arrow</code>?</strong></p>",
        "id": 307029281,
        "sender_full_name": "Eric Meinhardt",
        "timestamp": 1667185213
    },
    {
        "content": "<p><strong> Incomplete <code>Arrow</code> definition/instances that don't typecheck yet </strong></p>\n<p>Continuing from the definition of <code>Category</code>, the four running instances above, and my best effort at translating <code>Control.Arrow</code>, here's an incomplete definition for an <code>Arrow</code> typeclass that doesn't quite typecheck on the way <code>Arrow</code> is defined + <code>arr</code> is partially defined:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"> Incomplete Arrow definition; doesn't typecheck as-is. Relevant starts of</span>\n<span class=\"cm\">instances follow -/</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> See https://hackage.haskell.org/package/base-4.17.0.0/docs/Control-Arrow.html#g:1 -/</span>\n<span class=\"kd\">class</span> <span class=\"n\">Arrow</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Category</span> <span class=\"n\">f</span> <span class=\"n\">where</span>\n  <span class=\"c\">/-</span><span class=\"cm\"> 'arr' should lift a function to an arrow -/</span>\n  <span class=\"n\">arr</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">b</span>  <span class=\"c1\">-- type error: `type expected; failed to synthesize instance CoeSort α ?m.32178`</span>\n  <span class=\"c1\">-- arr : (a → b) → (f a b)</span>\n\n  <span class=\"c1\">-- ...</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> See https://hackage.haskell.org/package/base-4.17.0.0/docs/src/Control.Arrow.html#line-144 -/</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Arrow</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">→</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">arr</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">f</span>\n\n  <span class=\"c1\">-- ...</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> See https://hackage.haskell.org/package/base-4.17.0.0/docs/src/Control.Arrow.html#line-201 -/</span>\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Arrow</span> <span class=\"o\">(</span><span class=\"n\">Kleisli</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"c1\">-- should be comparable to `Monad.liftFM` above</span>\n  <span class=\"n\">arr</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">pure</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span>\n\n  <span class=\"c1\">-- ...</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> See https://hackage.haskell.org/package/comonad-5.0.8/docs/src/Control.Comonad.html#line-387 -/</span>\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">Comonad</span> <span class=\"n\">w</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Arrow</span> <span class=\"o\">(</span><span class=\"n\">Cokleisli</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"c1\">-- should be comparable to `Comonad.liftFW` above</span>\n  <span class=\"n\">arr</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"bp\">∘</span> <span class=\"n\">Comonad.extract</span>\n\n  <span class=\"c1\">-- ...</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">Comonad</span> <span class=\"n\">w</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Distributes</span> <span class=\"n\">w</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Arrow</span> <span class=\"o\">(</span><span class=\"n\">BiKleisli</span> <span class=\"n\">w</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">arr</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">pure</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span> <span class=\"bp\">∘</span> <span class=\"n\">Comonad.extract</span>\n\n  <span class=\"c1\">-- ...</span>\n</code></pre></div>",
        "id": 307029343,
        "sender_full_name": "Eric Meinhardt",
        "timestamp": 1667185321
    },
    {
        "content": "<p><code>Arrow</code> and friends only really make sense when your category has <code>Type</code> as its objects, since the purpose is to relate <code>Type</code> to your category somehow.</p>",
        "id": 307039722,
        "sender_full_name": "Reid Barton",
        "timestamp": 1667195274
    },
    {
        "content": "<p>Specifically, <code>(a → b)</code> in <code>arr {a b : α} : (a → b) → f a b</code> doesn't make sense when <code>a b : α</code> for a general type <code>α</code>.</p>",
        "id": 307039792,
        "sender_full_name": "Reid Barton",
        "timestamp": 1667195312
    },
    {
        "content": "<p>I would tend to think that it would make more sense to redesign <code>Arrow</code> from scratch in the context of Lean, with the advantage of 20 years hindsight and the ability to define your own <code>proc</code>-like notation(s).</p>",
        "id": 307039976,
        "sender_full_name": "Reid Barton",
        "timestamp": 1667195466
    }
]