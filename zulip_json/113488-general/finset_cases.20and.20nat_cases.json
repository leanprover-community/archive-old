[
    {
        "content": "<p>I was thinking while walking the dog this morning about how to implement a <code>nat_cases</code> tactic.</p>\n<p>It seems best to do something more general first, and write a <code>finset_cases</code> tactic, so that <code>finset_cases h</code> takes a hypothesis of the form <code>h : x \\mem A</code>, where <code>A</code> is an \"explicitly known\" <code>finset</code>, and explodes into multiple goals, one for each element of <code>A</code>.</p>\n<p>After that, I'd write a <code>nat_cases n a b</code>, which gives you a goal with the hypothesis <code>n &lt; a</code>, individual goals for each value of <code>n \\mem Ico a b</code> (implemented using <code>finset_cases</code>), and another goal with <code>n \\geq b</code>.</p>\n<p>Finally we'd add <code>nat_cases n</code>, which collects hypotheses which are \"obviously\" linear inequalities solely in <code>n</code>, and calculates the relevant lower and upper bounds <code>a</code> and <code>b</code>. Now we'll call <code>nat_cases n a b</code>, and follow up by discharging the two goals with inequalities using <code>linarith</code> (passing to <code>linarith</code> just the collected relevant hypotheses, and the new hypothesis, so it should be fast).</p>",
        "id": 159557799,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1551305708
    },
    {
        "content": "<p>I haven't yet thought too hard about what it means for a tactic to decide that a <code>finset</code> is \"explicitly known\", so maybe there is a problem here.</p>",
        "id": 159557825,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1551305738
    },
    {
        "content": "<p>Any criticisms before I get started (maybe not today), welcome!</p>",
        "id": 159557846,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1551305762
    },
    {
        "content": "<p>I think there is a tactic to determine if a formula is \"closed\", i.e. \"explicitly known\"</p>",
        "id": 159558220,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1551306032
    },
    {
        "content": "<p>Let's say you've got some horrible finset like <code>(univ : finset (perm (fin 2 -&gt; fin 2)))</code>. You have to do some clever unfolding to work out what the expression for each element is I think. Maybe if the type has a <code>has_reflect</code> instance it will be easier.</p>",
        "id": 159558367,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1551306126
    },
    {
        "content": "<p>In fact a <code>has_reflect</code> instance is probably a good definition of \"explicitly known\"</p>",
        "id": 159558464,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1551306225
    },
    {
        "content": "<p>bingo:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c\">/-</span><span class=\"cm\">- (eval_expr α e) evaluates &#39;e&#39; IF &#39;e&#39; has type &#39;α&#39;. -/</span>\n<span class=\"n\">meta</span> <span class=\"kn\">constant</span> <span class=\"n\">eval_expr</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">reflected</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"n\">α</span>\n</pre></div>",
        "id": 159558546,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1551306260
    },
    {
        "content": "<p>(used in <code>tactic.fin_cases</code>)</p>",
        "id": 159558554,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1551306268
    },
    {
        "content": "<p>case in point:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">true</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">n</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">fin_cases</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">invalid eval_expr, expression must be closed</span>\n<span class=\"cm\">state:</span>\n<span class=\"cm\">n : ℕ,</span>\n<span class=\"cm\">k : fin n</span>\n<span class=\"cm\">⊢ true</span>\n<span class=\"cm\">-/</span> <span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 159558735,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1551306366
    },
    {
        "content": "<p>Yeah, I suspect <code>eval_expr</code> on <code>finset.sort</code> will be the way to get your hands on the underlying list.</p>",
        "id": 159558849,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1551306408
    },
    {
        "content": "<p>(Note, \"closed\" and \"explicitly known\" aren't quite synonyms. Closed means something like it has no local constants, which isn't enough to guarantee that it evaluates to a value. E.g. <code>(λ x : ℝ, if x = 0 then 0 else 1) 0</code> is a closed <code>nat</code> that won't evaluate.)</p>",
        "id": 159559643,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1551306602
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">invalid</span> <span class=\"n\">eval_expr</span><span class=\"o\">,</span> <span class=\"n\">expression</span> <span class=\"n\">must</span> <span class=\"n\">be</span> <span class=\"n\">closed</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"bp\">_</span><span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">),</span> <span class=\"n\">decidable</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n<span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"bp\">ℕ</span> <span class=\"bp\">=</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"err\">⊢</span> <span class=\"n\">true</span>\n</pre></div>",
        "id": 159559762,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1551306705
    },
    {
        "content": "<p><code>eval_expr</code> can tell just fine</p>",
        "id": 159559770,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1551306714
    },
    {
        "content": "<p>Just following up here: it turns out <code>eval_expr</code> and <code>finset.sort</code> aren't even needed; <code>cases</code> is already awesome enough. <a href=\"https://github.com/leanprover-community/mathlib/pull/775\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/pull/775\">https://github.com/leanprover-community/mathlib/pull/775</a> has an implemenation of <code>fin_cases</code>.</p>",
        "id": 159818207,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1551566052
    },
    {
        "content": "<p><code>nat_cases</code> and <code>int_cases</code> are still in progress.</p>",
        "id": 159818211,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1551566079
    }
]