[
    {
        "content": "<p>Could the <code>transitivity</code> tactic be enhanced, so that (here <code>≤</code> could be any transitive relation) if I have <code>foo : b ≤ c</code> and the goal is <code>a ≤ c</code>, then <code>transitivity foo</code> turns the goal into <code>a ≤ b</code>?<br>\nIn other words, this could be a more readable version of <code>refine le_trans _ foo</code>.</p>",
        "id": 165958905,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1558156306
    },
    {
        "content": "<p>but what if you wanted to prove <code>a &lt;= foo</code> and <code>foo &lt;= c</code> instead? :P</p>",
        "id": 165960190,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558158567
    },
    {
        "content": "<p>Sorry, I don't understand what you mean...</p>",
        "id": 165962267,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1558162653
    },
    {
        "content": "<p>The tactic could inspect the type of <code>foo</code> and be smart, right?</p>",
        "id": 165962269,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1558162671
    },
    {
        "content": "<p>If <code>foo</code> is a <code>Prop</code> do what I suggest, if <code>foo</code> has the same type as <code>a</code> and <code>c</code>, do what Mario says (i.e. what it currently does).</p>",
        "id": 165962315,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1558162715
    },
    {
        "content": "<p>If you have <code>h1: b&lt;=c</code> and <code>h2: d&lt;=c</code> and the goal is <code>a&lt;=c</code>, then what? ;-)</p>",
        "id": 165967140,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1558171727
    },
    {
        "content": "<p>I don't understand what the problem is here.... you would either write <code>transitivity h1</code> or <code>transitivity h2</code> depending on which one you want to use. I'm not asking for any automation here.</p>",
        "id": 165971197,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1558179557
    },
    {
        "content": "<p><code>transitivity e</code> already means something (use <code>e</code> as the middle expression), but perhaps <code>transitivity using e</code>?</p>",
        "id": 165971433,
        "sender_full_name": "Reid Barton",
        "timestamp": 1558180004
    },
    {
        "content": "<p>That would also work, yes.</p>",
        "id": 165971442,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1558180031
    },
    {
        "content": "<p>I know that <code>transitivity e</code> already means something. But I thought that the tactic could nevertheless be smart, depending on the type of <code>e</code>. But your suggestion is even better</p>",
        "id": 165971447,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1558180065
    },
    {
        "content": "<p>Has anyone noticed <code>transitivity</code> acting strange sometimes? Sometimes, I want to prove <code>a ≤ b</code> and transitivity will fail because it doesn't match <code>? ≤ ? -&gt; ? ≤ ? -&gt; ? ≤ ?</code>. Right now, I'm working on a <code>semilattice_inf_bot</code>. Could it be a type class issue?</p>",
        "id": 166528732,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1558793139
    },
    {
        "content": "<p>I faced this issue yesterday.</p>",
        "id": 166528805,
        "sender_full_name": "Koundinya Vajjha",
        "timestamp": 1558793248
    },
    {
        "content": "<p>Did you manage to solve it?</p>",
        "id": 166529041,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1558793641
    },
    {
        "content": "<p>No I couldn't figure it out so I just worked around it.</p>",
        "id": 166529291,
        "sender_full_name": "Koundinya Vajjha",
        "timestamp": 1558794051
    },
    {
        "content": "<p>I'm thinking it might have something to do with <code>apply</code>. It manages to find the right lemma but then applying it goes wrong. If you replace <code>transitivity</code> with <code>apply le_trans</code> (or the appropriate lemma) does it also fail?</p>",
        "id": 166529356,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1558794133
    },
    {
        "content": "<p><code>apply le_trans</code> fails, but <code>convert le_trans _ _</code> seems to match something</p>",
        "id": 166529425,
        "sender_full_name": "Koundinya Vajjha",
        "timestamp": 1558794279
    },
    {
        "content": "<p>Which makes me think it's a type class issue?</p>",
        "id": 166529428,
        "sender_full_name": "Koundinya Vajjha",
        "timestamp": 1558794297
    },
    {
        "content": "<p><code>refine le_trans _ _</code> would probably work too and <code>apply le_trans _ _</code> also.</p>",
        "id": 166529504,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1558794396
    },
    {
        "content": "<p>yes they both work.</p>",
        "id": 166529532,
        "sender_full_name": "Koundinya Vajjha",
        "timestamp": 1558794464
    },
    {
        "content": "<p>I'm thinking it has to do with type classes because <code>le_trans</code> is probably the most used transitivity lemma and people seem to be able to use it via <code>transitivity</code> pretty well in mathlib</p>",
        "id": 166529533,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1558794465
    },
    {
        "content": "<p>sounds like the apply bug</p>",
        "id": 166529678,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558794700
    },
    {
        "content": "<p>is your <code>&lt;=</code> definitionally a pi?</p>",
        "id": 166529683,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558794721
    },
    {
        "content": "<p>it's the <code>le</code> on <code>ennreal</code>...</p>",
        "id": 166529750,
        "sender_full_name": "Koundinya Vajjha",
        "timestamp": 1558794804
    },
    {
        "content": "<p>which comes from <code>with_top</code> which is a pi</p>",
        "id": 166529829,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558794942
    },
    {
        "content": "<p>mine is the subset relation</p>",
        "id": 166529831,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1558794952
    },
    {
        "content": "<p>Oh!</p>",
        "id": 166529833,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1558794960
    },
    {
        "content": "<p>Do you have a fix for that?</p>",
        "id": 166529880,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1558794977
    },
    {
        "content": "<p>what does that mean?</p>",
        "id": 166529881,
        "sender_full_name": "Koundinya Vajjha",
        "timestamp": 1558794980
    },
    {
        "content": "<p>The type of your lemma may look like: <code>? ≤ ? -&gt; ? ≤ ? -&gt; ? ≤ ?</code> which would suggest that the head of the type is <code>? ≤ ?</code> but that part is a <code>pi</code> too so you can keep applying arguments to it and <code>apply</code> does</p>",
        "id": 166529950,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1558795089
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/order/bounded_lattice.lean#L503\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/src/order/bounded_lattice.lean#L503\">https://github.com/leanprover-community/mathlib/blob/master/src/order/bounded_lattice.lean#L503</a></p>",
        "id": 166529951,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558795101
    },
    {
        "content": "<blockquote>\n<p>sounds like the apply bug</p>\n</blockquote>\n<p>What's \"the apply bug\"? Someone mentioned this the other day. The bug itself has passed me by though.</p>",
        "id": 166530193,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1558795532
    },
    {
        "content": "<p>It's stymied things like <code>apply continuous.comp</code> in the past</p>",
        "id": 166530221,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558795562
    },
    {
        "content": "<p>basically <code>apply foo</code> gives an error even if <code>foo</code> applies, but the consequent of <code>foo</code> is a pi after <em>completely</em> reducing it</p>",
        "id": 166530266,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558795642
    },
    {
        "content": "<blockquote>\n<p><a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/order/bounded_lattice.lean#L503\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/src/order/bounded_lattice.lean#L503\">https://github.com/leanprover-community/mathlib/blob/master/src/order/bounded_lattice.lean#L503</a></p>\n</blockquote>\n<p>This fancy-schmancy definition could be replaced with a simple case split.</p>",
        "id": 166530324,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1558795705
    },
    {
        "content": "<p>But then it would get ugly</p>",
        "id": 166530353,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1558795758
    },
    {
        "content": "<p>yeah I knew that this suggestion would come up</p>",
        "id": 166530358,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558795766
    },
    {
        "content": "<p>What's wrong with it?</p>",
        "id": 166530365,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1558795783
    },
    {
        "content": "<p>I really don't like the idea of lean bugs changing the way I write my definitions</p>",
        "id": 166530371,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558795799
    },
    {
        "content": "<p>For sure</p>",
        "id": 166530424,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1558795811
    },
    {
        "content": "<p>but the case split definition sounds easier to work with to me</p>",
        "id": 166530431,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1558795828
    },
    {
        "content": "<p>it's one case vs 4</p>",
        "id": 166530436,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558795844
    },
    {
        "content": "<p>Case splits have a way of multiplying</p>",
        "id": 166530459,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1558795886
    },
    {
        "content": "<p>If I make a <code>apply</code> and <code>transitivity</code> that do not suffer from the same problems, should I call them <code>apply'</code> and <code>transitivity'</code>?</p>",
        "id": 166530515,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1558795969
    },
    {
        "content": "<p>I think ideally, it should be a flag in <code>apply_cfg</code> but I think it needs to go into mathlib until we officially switch to 3.5.*c</p>",
        "id": 166530544,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1558796035
    },
    {
        "content": "<p>or we could just fix the bug</p>",
        "id": 166530688,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558796198
    },
    {
        "content": "<p>I'm not sure Leo sees it as a bug. I remember him introducing the feature and it seemed to be what he actually intended</p>",
        "id": 166531304,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1558797173
    },
    {
        "content": "<p>But we can change Lean 3.5.*c. Do we not want a fix until then?</p>",
        "id": 166531320,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1558797233
    },
    {
        "content": "<p>It's clearly computing something wrong - it is unfolding in two different ways at different times and messes up the expected arity</p>",
        "id": 166532070,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558798362
    },
    {
        "content": "<p>also the unfolding of irreducible definitions is <em>extremely</em> suspicious, given the lengths that Leo has gone to thread reducibility args through all the tactics</p>",
        "id": 166532088,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558798414
    },
    {
        "content": "<p>Can we make <code>transitivity</code> smarter? Currently <code>transitivity 0</code> fails if I have a goal that is not about <code>nat</code>. But lean knows exactly which <code>0</code> I mean, because the goal is something like <code>@has_le.le R _ _ _</code>, so I'm talking about <code>0 : R</code>.</p>",
        "id": 203596864,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594474390
    }
]