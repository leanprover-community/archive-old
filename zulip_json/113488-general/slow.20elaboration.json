[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">group_ring_action</span> <span class=\"n\">linear_algebra</span><span class=\"bp\">.</span><span class=\"n\">basis</span> <span class=\"n\">field_theory</span><span class=\"bp\">.</span><span class=\"n\">subfield</span>\n\n<span class=\"n\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">mul_semiring_action</span> <span class=\"n\">G</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">fixed</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">F</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"bp\">∀</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"err\">•</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">is_subfield</span> <span class=\"o\">(</span><span class=\"n\">fixed</span> <span class=\"n\">G</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">- Embedding induced by action. -/</span>\n<span class=\"n\">def</span> <span class=\"n\">mul_action</span><span class=\"bp\">.</span><span class=\"n\">to_fun</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"err\">↪</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨λ</span> <span class=\"n\">x</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"err\">•</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">one_smul</span> <span class=\"n\">G</span> <span class=\"n\">x</span> <span class=\"bp\">▸</span> <span class=\"n\">one_smul</span> <span class=\"n\">G</span> <span class=\"n\">y</span> <span class=\"bp\">▸</span> <span class=\"k\">by</span> <span class=\"n\">convert</span> <span class=\"n\">congr_fun</span> <span class=\"n\">H</span> <span class=\"mi\">1</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">linear_independent_smul_of_linear_independent</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">F</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">linear_independent</span> <span class=\"o\">(</span><span class=\"n\">fixed</span> <span class=\"n\">G</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"err\">↑</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">F</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)))</span> <span class=\"o\">:</span>\n  <span class=\"n\">linear_independent</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"err\">$</span> <span class=\"n\">mul_action</span><span class=\"bp\">.</span><span class=\"n\">to_fun</span> <span class=\"n\">G</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">F</span><span class=\"o\">)),</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">F</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span>\n</code></pre></div>",
        "id": 198648425,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590397550
    },
    {
        "content": "<p>the statement of the theorem is slow to elaborate</p>",
        "id": 198648431,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590397557
    },
    {
        "content": "<p>but <code>profiler</code> doesn't show any abnormality</p>",
        "id": 198648475,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590397569
    },
    {
        "content": "<p>if I use <code>trace.class_instances</code> there is this mysterious search for:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">has_coe_to_fun</span> <span class=\"err\">↥↑</span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">mul_action</span><span class=\"bp\">.</span><span class=\"n\">to_fun</span> <span class=\"n\">G</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"n\">F</span> <span class=\"bp\">_</span><span class=\"n\">inst_2</span> <span class=\"bp\">_</span><span class=\"n\">inst_3</span><span class=\"o\">)</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 198648505,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590397609
    },
    {
        "content": "<p>which I cannot find in the <code>pp.all</code> <code>#print</code></p>",
        "id": 198648513,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590397620
    },
    {
        "content": "<p>is there anyway to somehow track the elaboration?</p>",
        "id": 198648525,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590397634
    },
    {
        "content": "<p>Does </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">set_option</span> <span class=\"n\">trace</span><span class=\"bp\">.</span><span class=\"n\">type_context</span><span class=\"bp\">.</span><span class=\"n\">is_def_eq</span> <span class=\"n\">true</span>\n<span class=\"kn\">set_option</span> <span class=\"n\">trace</span><span class=\"bp\">.</span><span class=\"n\">type_context</span><span class=\"bp\">.</span><span class=\"n\">is_def_eq_detail</span> <span class=\"n\">true</span>\n</code></pre></div>\n\n\n<p>help?</p>",
        "id": 198649085,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590398124
    },
    {
        "content": "<p>Wait, what version of Lean are you on? Everything is instant for me on 3.13.2</p>",
        "id": 198649162,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590398181
    },
    {
        "content": "<p><code>(3, (14, 0))</code></p>",
        "id": 198649248,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590398277
    },
    {
        "content": "<p>I do have some crazy search for the coercion though:</p>\n<div class=\"codehilite\"><pre><span></span><code>[class_instances] (2) ?x_104 : has_coe ↥↑(@finset.map F (G → F) (@mul_action.to_fun G _inst_1 F _inst_2 _inst_3) s) ?x_101 := @list.bin_tree_to_list ?x_205\nfailed is_def_eq\n[class_instances] (2) ?x_104 : has_coe ↥↑(@finset.map F (G → F) (@mul_action.to_fun G _inst_1 F _inst_2 _inst_3) s) ?x_101 := smt_tactic.has_coe ?x_206\nfailed is_def_eq\n[class_instances] (2) ?x_104 : has_coe ↥↑(@finset.map F (G → F) (@mul_action.to_fun G _inst_1 F _inst_2 _inst_3) s) ?x_101 := @lean.parser.has_coe ?x_207\nfailed is_def_eq\n[class_instances] (2) ?x_104 : has_coe ↥↑(@finset.map F (G → F) (@mul_action.to_fun G _inst_1 F _inst_2 _inst_3) s) ?x_101 := @tactic.ex_to_tac ?x_208\nfailed is_def_eq\n[class_instances] (2) ?x_104 : has_coe ↥↑(@finset.map F (G → F) (@mul_action.to_fun G _inst_1 F _inst_2 _inst_3) s) ?x_101 := @tactic.opt_to_tac ?x_209\nfailed is_def_eq\n[class_instances] (2) ?x_104 : has_coe ↥↑(@finset.map F (G → F) (@mul_action.to_fun G _inst_1 F _inst_2 _inst_3) s) ?x_101 := @expr.has_coe ?x_210 ?x_211\nfailed is_def_eq\n[class_instances] (2) ?x_104 : has_coe ↥↑(@finset.map F (G → F) (@mul_action.to_fun G _inst_1 F _inst_2 _inst_3) s) ?x_101 := string_to_format\nfailed is_def_eq\n[class_instances] (2) ?x_104 : has_coe ↥↑(@finset.map F (G → F) (@mul_action.to_fun G _inst_1 F _inst_2 _inst_3) s) ?x_101 := nat_to_format\nfailed is_def_eq\n[class_instances] (2) ?x_104 : has_coe ↥↑(@finset.map F (G → F) (@mul_action.to_fun G _inst_1 F _inst_2 _inst_3) s) ?x_101 := string_to_name\nfailed is_def_eq\n</code></pre></div>\n\n\n<p>etc</p>",
        "id": 198649319,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590398301
    },
    {
        "content": "<p>I've never used those so I don't know what to look for</p>",
        "id": 198649376,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590398378
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>elaboration of linear_independent_smul_of_linear_independent took 0.0389ms\n</code></pre></div>",
        "id": 198649394,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590398399
    },
    {
        "content": "<p>yeah <code>profiler</code> shows nothing</p>",
        "id": 198649443,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590398407
    },
    {
        "content": "<p>but I can see the orange bar</p>",
        "id": 198649458,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590398413
    },
    {
        "content": "<p>takes about 4 seconds for the orange bar to disappear</p>",
        "id": 198649479,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590398438
    },
    {
        "content": "<p>so maybe 1 second for you</p>",
        "id": 198649483,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590398440
    },
    {
        "content": "<p>It takes well under a second for mine to disappear. I'll upgrade to 3.14.</p>",
        "id": 198649504,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590398461
    },
    {
        "content": "<p>The trace output was huge though</p>",
        "id": 198649666,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590398618
    },
    {
        "content": "<p>Still fast for me</p>",
        "id": 198649815,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590398733
    },
    {
        "content": "<p>I upgraded mathlib and now it only takes 2 seconds for the orange bar to disappear</p>",
        "id": 198650535,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590399296
    },
    {
        "content": "<p>so this should be 0.5 seconds for you</p>",
        "id": 198650542,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590399302
    },
    {
        "content": "<p>which I guess would still be visible</p>",
        "id": 198650586,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590399339
    },
    {
        "content": "<p>Oh I see it, I can believe it's about a third of a second</p>",
        "id": 198652529,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590400852
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">group_ring_action</span> <span class=\"n\">field_theory</span><span class=\"bp\">.</span><span class=\"n\">subfield</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">polynomial</span>\n<span class=\"kn\">import</span> <span class=\"n\">field_theory</span><span class=\"bp\">.</span><span class=\"n\">minimal_polynomial</span> <span class=\"n\">field_theory</span><span class=\"bp\">.</span><span class=\"n\">splitting_field</span>\n\n<span class=\"n\">local</span> <span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">instance</span><span class=\"o\">]</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">dec</span>\n\n<span class=\"n\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">mul_semiring_action</span> <span class=\"n\">G</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">fixed</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">F</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"bp\">∀</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"err\">•</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">fixed</span><span class=\"bp\">.</span><span class=\"n\">is_subfield</span> <span class=\"o\">:</span> <span class=\"n\">is_subfield</span> <span class=\"o\">(</span><span class=\"n\">fixed</span> <span class=\"n\">G</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"o\">(</span><span class=\"n\">fixed</span> <span class=\"n\">G</span> <span class=\"n\">F</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 199156980,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590760491
    },
    {
        "content": "<p>the <code>check</code> takes 3 to 4 seconds</p>",
        "id": 199156992,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590760501
    },
    {
        "content": "<p>I can't do anything if I can't even talk about <code>1</code></p>",
        "id": 199157002,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590760507
    },
    {
        "content": "<p>Elaboration of the <code>inhabited</code> instance in <a href=\"https://github.com/leanprover-community/mathlib/issues/2897\">#2897</a> takes ~10s with <code>lean -j1</code> on my laptop. It's more than the rest of the file.</p>",
        "id": 199533741,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1591122587
    },
    {
        "content": "<p>What happened to our <span aria-label=\"racecar\" class=\"emoji emoji-1f3ce\" role=\"img\" title=\"racecar\">:racecar:</span> fast lean?</p>",
        "id": 199536171,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591123737
    },
    {
        "content": "<p>I took a quick look.  The following reduces the runtime from 8.5s to 2s on my laptop:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">local</span> <span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">instance</span><span class=\"o\">,</span> <span class=\"n\">priority</span> <span class=\"mi\">1001</span><span class=\"o\">]</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">prop_decidable</span>\n</code></pre></div>",
        "id": 199536249,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1591123784
    },
    {
        "content": "<p>The reason is that <code>split_if</code> uses <code>by_cases</code>, which uses <code>decidable</code> even if the goal is a prop.</p>",
        "id": 199536353,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1591123819
    },
    {
        "content": "<p>Aah, so would <code>open_locale classical</code> have avoided this problem?</p>",
        "id": 199536490,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591123883
    },
    {
        "content": "<p>There is already an <code>open_locale classical</code>.</p>",
        "id": 199536620,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1591123940
    },
    {
        "content": "<p>I have <code>open_locale classical</code> but it adds <code>classical.prop_decidable</code> as a low prio instance.</p>",
        "id": 199536625,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1591123941
    },
    {
        "content": "<p>Gabriel explains that I need to make it a high priority instance.</p>",
        "id": 199536680,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1591123968
    },
    {
        "content": "<p>priorities are hard</p>",
        "id": 199536688,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591123973
    },
    {
        "content": "<p>And/or fix <code>by_cases</code>.</p>",
        "id": 199536704,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1591123979
    },
    {
        "content": "<p>Ooh... I was still looking at Kenny's code</p>",
        "id": 199536740,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591123996
    },
    {
        "content": "<p>Is it the same problem?</p>",
        "id": 199536762,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591124004
    },
    {
        "content": "<p>I somehow assumed that Yury's post was a semireply to Kenny</p>",
        "id": 199536783,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591124017
    },
    {
        "content": "<p>I have a good one. The beginning of the file <code>analysis/specific_functions/pow.lean</code> (after imports) is</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">open_locale</span> <span class=\"n\">classical</span> <span class=\"n\">real</span> <span class=\"n\">topological_space</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">complex</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">- The complex power function `x^y`, given by `x^y = exp(y log x)` (where `log` is the principal</span>\n<span class=\"cm\">determination of the logarithm), unless `x = 0` where one sets `0^0 = 1` and `0^y = 0` for</span>\n<span class=\"cm\">`y ≠ 0`. -/</span>\n<span class=\"n\">noncomputable</span> <span class=\"n\">def</span> <span class=\"n\">cpow</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span>\n<span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n  <span class=\"k\">then</span> <span class=\"k\">if</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n    <span class=\"k\">then</span> <span class=\"mi\">1</span>\n    <span class=\"k\">else</span> <span class=\"mi\">0</span>\n  <span class=\"k\">else</span> <span class=\"n\">exp</span> <span class=\"o\">(</span><span class=\"n\">log</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_pow</span> <span class=\"n\">ℂ</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">cpow</span><span class=\"bp\">⟩</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">cpow_eq_pow</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">cpow</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">cpow_def</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">y</span> <span class=\"bp\">=</span>\n  <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n    <span class=\"k\">then</span> <span class=\"k\">if</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n      <span class=\"k\">then</span> <span class=\"mi\">1</span>\n      <span class=\"k\">else</span> <span class=\"mi\">0</span>\n    <span class=\"k\">else</span> <span class=\"n\">exp</span> <span class=\"o\">(</span><span class=\"n\">log</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n\n\n<p>With <code>profiler</code> on, I get 17.3s to elaborate <code>cpow</code> (and my computer is pretty fast, so I guess Kenny couldn't even open this file). Then, for <code>cpow_def</code>, the profiler tells me that it is less than one second, but the bar stays orange also for roughly 20s, so something is hidden here.</p>",
        "id": 199542063,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1591126511
    },
    {
        "content": "<p>What on earth is so hard about <code>cpow</code>?</p>",
        "id": 199543059,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591127055
    },
    {
        "content": "<p>Probably it tries many <code>decidable</code> instances before using <code>classical</code> fallback.</p>",
        "id": 199543224,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1591127150
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> Did you try to make <code>classical</code> a high priority instance?</p>",
        "id": 199543336,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1591127190
    },
    {
        "content": "<p>Exactly. If you set <code>local attribute [instance, priority 1001] classical.prop_decidable</code>, everything becomes instant.</p>",
        "id": 199543339,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1591127191
    },
    {
        "content": "<p>This also makes it instant:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">decidable_eq</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">prop_decidable</span> <span class=\"bp\">_</span>\n</code></pre></div>",
        "id": 199543499,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1591127288
    },
    {
        "content": "<p>That's crazy...</p>",
        "id": 199543518,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591127301
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> Does this also fix your problems in this thread?</p>",
        "id": 199543579,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591127339
    },
    {
        "content": "<p>Should we add these instance for real and complex numbers?</p>",
        "id": 199543589,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1591127346
    },
    {
        "content": "<p>Wow, this is also instant:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">decidable_eq</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span>\n</code></pre></div>",
        "id": 199543723,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1591127415
    },
    {
        "content": "<p>Don't look at the instance trace, it is definitely not for kids. with things like</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"err\">?</span><span class=\"n\">x_33</span> <span class=\"o\">:</span> <span class=\"n\">nonneg_ring</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">linear_nonneg_ring</span><span class=\"bp\">.</span><span class=\"n\">to_nonneg_ring</span> <span class=\"err\">?</span><span class=\"n\">x_34</span> <span class=\"err\">?</span><span class=\"n\">x_35</span>\n</code></pre></div>\n\n\n<p>What's a <code>nonneg_ring</code>?!</p>",
        "id": 199543977,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1591127535
    },
    {
        "content": "<p>The cause for this decidable tarpit is the <code>eq.decidable</code> instance, which derives <code>decidable_eq α</code> from <code>decidable_linear_order α</code>.  And this searches through half of the tc hierarchy.</p>",
        "id": 199543997,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1591127550
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/113488-general/topic/slow.20elaboration/near/199543997\">said</a>:</p>\n<blockquote>\n<p>The cause for this decidable tarpit is the <code>eq.decidable</code> instance, which derives <code>decidable_eq α</code> from <code>decidable_linear_order α</code>.  And this searches through half of the tc hierarchy.</p>\n</blockquote>\n<p>oh!</p>",
        "id": 199544413,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1591127763
    },
    {
        "content": "<p>Should we downgrade its priority to 90 and put <code>classical</code> at 95?</p>",
        "id": 199544837,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1591127968
    },
    {
        "content": "<p>What would happen if we completely unbundle all <code>decidable</code> stuff? So you only have <code>decidable_{eq,prop}</code> and <code>linear_order</code>, but not <code>decidable_linear_order</code>.</p>",
        "id": 199544840,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591127972
    },
    {
        "content": "<p>For a long time, I have wanted to kill <code>decidable_linear_order</code>, but this in core, alas. Oh, wait :)</p>",
        "id": 199544995,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1591128036
    },
    {
        "content": "<blockquote>\n<p>Oh, wait :)</p>\n</blockquote>\n<p>Is that a promise?</p>",
        "id": 199545096,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591128083
    },
    {
        "content": "<p><code>nonneg_ring</code> should not be a class, that was a mistake</p>",
        "id": 199549947,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591130238
    },
    {
        "content": "<p>and <code>eq.decidable</code> should be a local instance</p>",
        "id": 199550052,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591130286
    },
    {
        "content": "<p>I'm just catching up on this now. Is there a PR for this (in progress)? If not, can someone summarize what needs to be done?</p>",
        "id": 199563344,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1591138486
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/slow.20elaboration/near/199544840\">said</a>:</p>\n<blockquote>\n<p>What would happen if we completely unbundle all <code>decidable</code> stuff? So you only have <code>decidable_{eq,prop}</code> and <code>linear_order</code>, but not <code>decidable_linear_order</code>.</p>\n</blockquote>\n<p>I really have no idea if this is feasable. But <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> gave a <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span>, so I think we can/should try this.</p>",
        "id": 199580184,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591160628
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">monoid_algebra</span>\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">algebra</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">invertible</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">char_p</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra</span><span class=\"bp\">.</span><span class=\"n\">basis</span>\n\n<span class=\"n\">universes</span> <span class=\"n\">u</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">theory</span>\n<span class=\"kn\">open</span> <span class=\"n\">module</span>\n<span class=\"kn\">open</span> <span class=\"n\">monoid_algebra</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"o\">(</span><span class=\"n\">monoid_algebra</span> <span class=\"n\">k</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">W</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"o\">(</span><span class=\"n\">monoid_algebra</span> <span class=\"n\">k</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"n\">W</span><span class=\"o\">]</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">apply_instance</span> <span class=\"o\">:</span> <span class=\"n\">semimodule</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">restrict_scalars</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">monoid_algebra</span> <span class=\"n\">k</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"n\">W</span><span class=\"o\">))</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">@</span><span class=\"n\">linear_map</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">u</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">restrict_scalars</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">monoid_algebra</span> <span class=\"n\">k</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"n\">W</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">restrict_scalars</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">monoid_algebra</span> <span class=\"n\">k</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span>\n<span class=\"c\">/-</span><span class=\"cm\"> restrict_scalars k (monoid_algebra k G) W →ₗ[k] restrict_scalars k (monoid_algebra k G) V :</span>\n<span class=\"cm\">  Π [_inst_4 : semimodule k (restrict_scalars k (monoid_algebra k G) W)]</span>\n<span class=\"cm\">  [_inst_5 : semimodule k (restrict_scalars k (monoid_algebra k G) V)], Type u</span>\n</code></pre></div>",
        "id": 200228178,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1591709957
    },
    {
        "content": "<p>Hi everyone, it's Kenny \"Slow Elaboration\" Lau again</p>",
        "id": 200228187,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1591709962
    },
    {
        "content": "<p>the elaboration speed is ok here</p>",
        "id": 200228237,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1591709988
    },
    {
        "content": "<p>until one puts two more underscores at the end to tell Lean to find the remaining instances</p>",
        "id": 200228305,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1591710007
    },
    {
        "content": "<p>note how the first check tells you that Lean can find the instance in \"normal\" speed</p>",
        "id": 200228333,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1591710018
    },
    {
        "content": "<p>but for some reason Lean is slow if I put the underscore at the end</p>",
        "id": 200228377,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1591710033
    },
    {
        "content": "<p>so I cannot seem to isolate the problem</p>",
        "id": 200228462,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1591710065
    },
    {
        "content": "<p>both <code>#check</code>s are near instant for me</p>",
        "id": 200234595,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591712379
    },
    {
        "content": "<p>that's on a slightly older version of mathlib though, maybe something changed recently</p>",
        "id": 200234735,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591712424
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> even when you add two underscores at the end?</p>",
        "id": 200235521,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1591712729
    },
    {
        "content": "<p>oh I misunderstood</p>",
        "id": 200235668,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591712774
    },
    {
        "content": "<p>Okay I can replicate.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"c1\">-- fast</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">@</span><span class=\"n\">linear_map</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">u</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">k</span>\n  <span class=\"o\">(</span><span class=\"n\">restrict_scalars</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">monoid_algebra</span> <span class=\"n\">k</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"n\">W</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">restrict_scalars</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">monoid_algebra</span> <span class=\"n\">k</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span>\n  <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">apply_instance</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">apply_instance</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- slow</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">@</span><span class=\"n\">linear_map</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">u</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">k</span>\n  <span class=\"o\">(</span><span class=\"n\">restrict_scalars</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">monoid_algebra</span> <span class=\"n\">k</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"n\">W</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">restrict_scalars</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">monoid_algebra</span> <span class=\"n\">k</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span>\n  <span class=\"bp\">_</span> <span class=\"bp\">_</span>\n</code></pre></div>",
        "id": 200236204,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591712977
    },
    {
        "content": "<p>that's just fascinating</p>",
        "id": 200236340,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1591713016
    },
    {
        "content": "<p>what's happening?</p>",
        "id": 200236345,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1591713020
    },
    {
        "content": "<p>This looks like it will require a C++ deep dive. I don't know what could make this happen besides elaboration order shenanigans as a result of using <code>by</code></p>",
        "id": 200236653,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591713140
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"c1\">-- fast</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">@</span><span class=\"n\">linear_map</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">u</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">k</span>\n  <span class=\"o\">(</span><span class=\"n\">restrict_scalars</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">monoid_algebra</span> <span class=\"n\">k</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"n\">W</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">restrict_scalars</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">monoid_algebra</span> <span class=\"n\">k</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span>\n  <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">apply_instance</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- slow</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">@</span><span class=\"n\">linear_map</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">u</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">k</span>\n  <span class=\"o\">(</span><span class=\"n\">restrict_scalars</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">monoid_algebra</span> <span class=\"n\">k</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"n\">W</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">restrict_scalars</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">monoid_algebra</span> <span class=\"n\">k</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span>\n  <span class=\"n\">infer_instance</span>\n</code></pre></div>",
        "id": 200236808,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1591713203
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"c1\">-- fast</span>\n<span class=\"kn\">example</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">linear_map</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">u</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">k</span>\n  <span class=\"o\">(</span><span class=\"n\">restrict_scalars</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">monoid_algebra</span> <span class=\"n\">k</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"n\">W</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">restrict_scalars</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">monoid_algebra</span> <span class=\"n\">k</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span>\n\n<span class=\"c1\">-- slow</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">@</span><span class=\"n\">linear_map</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">u</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">k</span>\n  <span class=\"o\">(</span><span class=\"n\">restrict_scalars</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">monoid_algebra</span> <span class=\"n\">k</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"n\">W</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">restrict_scalars</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">monoid_algebra</span> <span class=\"n\">k</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span>\n</code></pre></div>",
        "id": 200237342,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591713396
    },
    {
        "content": "<p>what :o</p>",
        "id": 200237442,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1591713433
    },
    {
        "content": "<p>interesting</p>",
        "id": 200237601,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1591713488
    },
    {
        "content": "<p>what if you make the <code>example</code> a <code>def</code>, and <code>#check</code> it?</p>",
        "id": 200238295,
        "sender_full_name": "Reid Barton",
        "timestamp": 1591713747
    },
    {
        "content": "<p>changing the example to a def makes it slow, in Mario's example. Kenny's last example freaks me out a bit more</p>",
        "id": 200252178,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591718720
    },
    {
        "content": "<p>kenny's version makes sense to me only in the sense that it's testing the same thing as my example before that. There is something about switching to tactic mode here using <code>by</code> that makes it work out</p>",
        "id": 200266839,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591725309
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">char_p</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">polynomial</span>\n\n<span class=\"kn\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">polynomial</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">C_nat_cast</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"n\">ring_hom</span><span class=\"bp\">.</span><span class=\"n\">map_nat_cast</span> <span class=\"n\">C</span><span class=\"bp\">.</span><span class=\"n\">to_ring_hom</span> <span class=\"n\">n</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">char_p</span> <span class=\"n\">R</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">char_p</span> <span class=\"o\">(</span><span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"k\">let</span> <span class=\"bp\">⟨</span><span class=\"n\">h</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"k\">in</span> <span class=\"bp\">⟨λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">C_nat_cast</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">C_0</span><span class=\"o\">,</span> <span class=\"n\">C_inj</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">]</span><span class=\"bp\">⟩</span>\n\n<span class=\"c1\">-- fast</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">frobenius_eq</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">prime</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">char_p</span> <span class=\"n\">R</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">@</span><span class=\"n\">frobenius</span> <span class=\"o\">(</span><span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"n\">p</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">polynomial</span><span class=\"bp\">.</span><span class=\"n\">char_p</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">eval₂</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span>\n\n<span class=\"c1\">-- slow</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">frobenius_eq</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">prime</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">char_p</span> <span class=\"n\">R</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">@</span><span class=\"n\">frobenius</span> <span class=\"o\">(</span><span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"n\">p</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">eval₂</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span>\n\n<span class=\"c1\">-- fast</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">frobenius_eq&#39;&#39;</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">prime</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">char_p</span> <span class=\"n\">R</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"k\">by</span> <span class=\"n\">exact</span> <span class=\"bp\">@</span><span class=\"n\">frobenius</span> <span class=\"o\">(</span><span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"n\">p</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">eval₂</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">polynomial</span>\n</code></pre></div>",
        "id": 201938346,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1593069271
    },
    {
        "content": "<p>is this the same bug?</p>",
        "id": 201938348,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1593069274
    },
    {
        "content": "<p>(btw the theorem is false)</p>",
        "id": 201938354,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1593069281
    },
    {
        "content": "<p>(edit: I guess I found the workaround)</p>",
        "id": 201938456,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1593069375
    },
    {
        "content": "<p>What's going on with <code>C_nat_cast</code>? Shouldn't there be <code>alg_hom.nat_cast</code> instead?</p>",
        "id": 201938506,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593069456
    },
    {
        "content": "<p>right</p>",
        "id": 201938607,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1593069559
    }
]