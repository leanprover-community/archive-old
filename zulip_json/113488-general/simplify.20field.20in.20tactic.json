[
    {
        "content": "<p>Trivial question: I've got an instance <code>s</code> of some structure which has a <code>nat</code>-valued field <code>f</code>. In tactic mode I have as a hypothesis <code>v : nat := s.f</code>. What can I do to replace v with with its actual <code>nat</code> value? Sorry for the noise</p>",
        "id": 133639356,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1536557498
    },
    {
        "content": "<p>what do you mean? If you are in tactic mode, you aren't proving anything so it doesn't matter</p>",
        "id": 133639619,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536558003
    },
    {
        "content": "<p>or do you mean that <code>v : nat := s.f</code> is in the local context of the proof state?</p>",
        "id": 133639634,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536558031
    },
    {
        "content": "<p>You can use <code>dsimp only [v] {zeta := tt}</code> to zeta expand <code>v</code></p>",
        "id": 133639640,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536558081
    },
    {
        "content": "<p>Hi Mario, I think that's what I mean. If I understand you right, are you saying something like this:</p>\n<div class=\"codehilite\"><pre><span></span>structure my_struct :=\n(f : ℕ)\n\nexample : false := begin\n  let s : my_struct := ⟨42⟩,\n  let v := s.f,\n  dsimp only [v] {zeta := tt},\n  admit\nend\n</pre></div>\n\n\n<p>should work? Weirdly, the <code>dsimp</code> line fails with</p>\n<div class=\"codehilite\"><pre><span></span>dsimplify tactic failed to simplify\nstate:\ns : my_struct := {f := 42},\nv : ℕ := s.f\n⊢ false\n</pre></div>\n\n\n<p>:'(</p>",
        "id": 133639833,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1536558473
    },
    {
        "content": "<p>Does <code>v</code> occur in the goal?</p>",
        "id": 133639884,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1536558525
    },
    {
        "content": "<p>No, well secretly I'm trying to write a function which I can pass an <code>expr</code> and get back a \"simplified\" <code>expr</code>; in this case hopefully <code>s.f</code> will become <code>42</code>.</p>",
        "id": 133640190,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1536559054
    },
    {
        "content": "<p>Is there anything which does something like this? Maybe even just like <code>1 + 1</code> -&gt; <code>2</code></p>",
        "id": 133640248,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1536559154
    },
    {
        "content": "<p>from my experience, not many tactics know about definitions (i.e. <code>:=</code>)</p>",
        "id": 133640374,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536559328
    },
    {
        "content": "<p>which is quite annoying</p>",
        "id": 133640378,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536559344
    },
    {
        "content": "<p>You can have a look at <code>tactic.dsimp_target</code> in <code>init/meta/simp_tactic.lean</code> to do that. But if your variable <code>v</code> does not occur in the expression, it will fail. You may have to enclose it in <code>try</code></p>",
        "id": 133640385,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1536559363
    },
    {
        "content": "<p>oh and you'll never change the definition of <code>v</code> using any tactic.</p>",
        "id": 133640455,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536559500
    },
    {
        "content": "<p>just literally no tactic can rewrite definition (things to the right of <code>:=</code>) in hypothesis, in my experience</p>",
        "id": 133640463,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536559517
    },
    {
        "content": "<p>my workaround:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">structure</span> <span class=\"n\">my_struct</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">my_struct</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"mi\">42</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">v</span> <span class=\"o\">:=</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hv</span> <span class=\"o\">:</span> <span class=\"n\">v</span> <span class=\"bp\">=</span> <span class=\"mi\">42</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n  <span class=\"n\">admit</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 133640468,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536559539
    },
    {
        "content": "<p>No, you can do some manipulation</p>",
        "id": 133640484,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1536559563
    },
    {
        "content": "<p>in <code>tactic.basic</code>, in <code>mathlib</code>, you can use <code>local_def_value</code> to get the value of a definition. Then you can rewrite that experience, create a new definition and clear the old one</p>",
        "id": 133640526,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1536559679
    },
    {
        "content": "<p>Thanks, yeah I was poking around in <code>simp_target</code> and <code>simplify</code> before and was wondering why it was failing. I note that</p>\n<div class=\"codehilite\"><pre><span></span>structure my_struct :=\n(f : ℕ)\n\ndef s : my_struct := ⟨42⟩\n\n#reduce s.f\n</pre></div>\n\n\n<p>(obviously) prints <code>42</code>. Is there any way to capture the result like this? I see that in the kernel reduce calls <code>normalize(...)</code> which returns an <code>expr</code>, is there away to get it to do that and capture the result myself?</p>",
        "id": 133640746,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1536560033
    },
    {
        "content": "<p>Are you trying to evaluate the expression? If it's an arithmetic expression, you can use norm_num. Otherwise, whnf should take you part of the way there</p>",
        "id": 133640862,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1536560273
    },
    {
        "content": "<p>Also, do you mean <code>normalize</code> from <code>ring.lean</code>?</p>",
        "id": 133640973,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1536560450
    },
    {
        "content": "<p>Thanks I'll dig in and read about <code>whnf</code> for a bit. I don't think so, there's this file <code>src/library/normalize.cpp</code> which <code>normalize</code>s <code>expr</code>s you give it.</p>",
        "id": 133641053,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1536560595
    },
    {
        "content": "<p>Actually, I think:</p>\n<div class=\"codehilite\"><pre><span></span>meta def dme : tactic unit := do\n  let no_dflt := ff,\n  let attr_names : list name := [],\n  let hs : list simp_arg_type := [],\n  (s, to_unfold) ← mk_simp_set no_dflt attr_names hs,\n  e ← s.dsimplify to_unfold `({ my_struct . f := 42 }.f),\n  trace e\n\n#eval dme\n</pre></div>\n\n\n<p>might do what I want!</p>",
        "id": 133641194,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1536560800
    }
]