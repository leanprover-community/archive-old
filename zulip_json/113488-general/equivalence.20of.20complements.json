[
    {
        "content": "<p>The following definition works but it is slow.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.equiv.basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">equiv</span>\n\n<span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">compl</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_pred</span> <span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_pred</span> <span class=\"n\">t</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">e₀</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">≃</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">≃</span> <span class=\"n\">β</span> <span class=\"bp\">//</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">e</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">e₀</span> <span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"bp\">≃</span> <span class=\"o\">((</span><span class=\"n\">s</span><span class=\"bp\">ᶜ</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">≃</span> <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"bp\">ᶜ</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">e.1.subtype_congr</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">not_congr</span> <span class=\"bp\">$</span>\n    <span class=\"kd\">begin</span>\n      <span class=\"n\">rcases</span> <span class=\"n\">e</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">he</span><span class=\"o\">⟩,</span> <span class=\"n\">dsimp</span><span class=\"o\">,</span>\n      <span class=\"n\">split</span><span class=\"bp\">;</span> <span class=\"n\">intro</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">subtype.coe_mk</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">he</span><span class=\"o\">],</span> <span class=\"n\">exact</span> <span class=\"n\">subtype.coe_prop</span> <span class=\"n\">_</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">he</span> <span class=\"o\">(</span><span class=\"n\">e₀.symm</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">⟩),</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">e₀.apply_symm_apply</span><span class=\"o\">,</span> <span class=\"n\">subtype.coe_mk</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">e.injective</span> <span class=\"n\">this</span><span class=\"o\">],</span>\n        <span class=\"n\">exact</span> <span class=\"n\">subtype.coe_prop</span> <span class=\"n\">_</span> <span class=\"o\">}</span>\n    <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n    <span class=\"o\">⟨(</span><span class=\"n\">equiv.set.univ</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm.trans</span> <span class=\"bp\">$</span> <span class=\"o\">(</span><span class=\"n\">set.of_eq</span> <span class=\"bp\">$</span> <span class=\"n\">union_compl_self</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm.trans</span> <span class=\"bp\">$</span>\n      <span class=\"o\">(</span><span class=\"n\">equiv.set.union</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">and_imp.2</span> <span class=\"n\">absurd</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"bp\">$</span> <span class=\"o\">(</span><span class=\"n\">e₀.sum_congr</span> <span class=\"n\">e</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"bp\">$</span>\n      <span class=\"o\">(</span><span class=\"n\">equiv.set.union</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">and_imp.2</span> <span class=\"n\">absurd</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm.trans</span> <span class=\"bp\">$</span> <span class=\"o\">(</span><span class=\"n\">set.of_eq</span> <span class=\"bp\">$</span> <span class=\"n\">union_compl_self</span> <span class=\"n\">t</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span>\n      <span class=\"o\">(</span><span class=\"n\">equiv.set.univ</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">⟩,</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">union_apply_left</span><span class=\"o\">,</span> <span class=\"bp\">*</span><span class=\"o\">]</span> <span class=\"o\">}⟩,</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">⟨</span><span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">he</span><span class=\"o\">⟩,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">ext</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">by_cases</span> <span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">union_apply_left</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">he</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">change</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"bp\">ᶜ</span> <span class=\"n\">at</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">dsimp</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">union_apply_right</span><span class=\"o\">],</span>\n      <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">subtype_congr</span><span class=\"o\">]</span> <span class=\"o\">},</span> <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">hx</span> <span class=\"o\">}</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">ext</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">⟩,</span> <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">subtype_congr</span><span class=\"o\">],</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">union_apply_right</span><span class=\"o\">],</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">refl</span> <span class=\"o\">}</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 213128903,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1602580430
    },
    {
        "content": "<p>Any ideas how I can make it faster?</p>",
        "id": 213129027,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1602580482
    },
    {
        "content": "<p>I didn't measure parse time but Emacs shows they busy indicator  for a few seconds.</p>",
        "id": 213129082,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1602580522
    },
    {
        "content": "<p>What commit are you on? This doesn't quite work for me, looks like <code>set</code> namespacing maybe? <code>open set</code> doesn't quite fix it.</p>",
        "id": 213129425,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1602580721
    },
    {
        "content": "<p>import data.equiv.basic</p>\n<p>open equiv set </p>\n<p>@[simp] lemma set.sum_compl_symm_apply {α : Type*} {s : set α} [decidable_pred s] {x : s} : <br>\n  (equiv.set.sum_compl s).symm x = sum.inl x :=<br>\nby cases x with x hx; exact set.sum_compl_symm_apply_of_mem hx</p>\n<p>@[simp] lemma set.sum_compl_symm_apply_compl {α : Type*} {s : set α} <br>\n  [decidable_pred s] {x : sᶜ} : (equiv.set.sum_compl s).symm x = sum.inr x :=<br>\nby cases x with x hx; exact set.sum_compl_symm_apply_of_not_mem hx</p>\n<p>@[simp] lemma subtype_congr_apply {α : Sort<em>} {β : Sort</em>} {p : α → Prop} {q : β → Prop} (e : α ≃ β)<br>\n  (h : ∀ (a : α), p a ↔ q (e a)) (x : {x // p x}) : e.subtype_congr h x = ⟨e x, (h _).1 x.2⟩ := rfl</p>\n<p>protected def compl {α β : Type*} {s : set α} {t : set β} [decidable_pred s] [decidable_pred t]<br>\n  (e₀ : s ≃ t) : {e : α ≃ β // ∀ x : s, e x = e₀ x} ≃ ((sᶜ : set α) ≃ (tᶜ : set β)) :=<br>\n{ to_fun := λ e, subtype_congr e <br>\n    (λ a, not_congr $ iff.intro <br>\n      (λ ha, by rw [← subtype.coe_mk a ha, e.prop ⟨a, ha⟩]; exact (e₀ ⟨a, ha⟩).prop)<br>\n      (λ ha, calc a = (e : α ≃ β).symm (e a) : by simp only [symm_apply_apply, coe_fn_coe_base]<br>\n                ... = e₀.symm ⟨e a, ha⟩ : (e : α ≃ β).injective <br>\n                  (by { rw [e.prop (e₀.symm ⟨e a, ha⟩)],<br>\n                        simp only [apply_symm_apply, subtype.coe_mk] })<br>\n                ... ∈ s : (e₀.symm ⟨_, ha⟩).prop)),<br>\n  inv_fun := λ e₁, <br>\n<a href=\"http://subtype.mk\">subtype.mk</a> <br>\n      (calc α ≃ s ⊕ (sᶜ : set α) : (set.sum_compl s).symm<br>\n          ... ≃ t ⊕ (tᶜ : set β) : equiv.sum_congr e₀ e₁<br>\n          ... ≃ β : set.sum_compl t)<br>\n      (λ x, by simp only [sum.map_inl, trans_apply, sum_congr_apply, <br>\n        set.sum_compl_apply_inl, set.sum_compl_symm_apply]),<br>\n  left_inv := λ e, <br>\n    begin <br>\n      ext x,<br>\n      by_cases hx : x ∈ s,<br>\n      { simp only [set.sum_compl_symm_apply_of_mem hx, ←e.prop ⟨x, hx⟩, <br>\n          sum.map_inl, sum_congr_apply, trans_apply,<br>\n          subtype.coe_mk, set.sum_compl_apply_inl] },<br>\n      { simp only [set.sum_compl_symm_apply_of_not_mem hx, sum.map_inr, <br>\n          subtype_congr_apply, set.sum_compl_apply_inr, trans_apply,<br>\n          sum_congr_apply, subtype.coe_mk] },<br>\n    end,<br>\n  right_inv := λ e, equiv.ext $ λ x, by simp only [sum.map_inr, subtype_congr_apply, <br>\n    set.sum_compl_apply_inr, function.comp_app, sum_congr_apply, equiv.coe_trans,<br>\n    subtype.coe_eta, subtype.coe_mk, set.sum_compl_symm_apply_compl] }</p>",
        "id": 213152080,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1602595054
    },
    {
        "content": "<p>In the process of doing this I noticed a duplicate definition. <code>equiv.sum_compl</code> and <code>equiv.set.sum_compl</code></p>",
        "id": 213152157,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1602595083
    },
    {
        "content": "<p>Sorry, I've asked a question and fell asleep. Indeed, I forgot that I've added a couple of <code>simp</code> lemmas to make it compile.</p>",
        "id": 213162740,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1602599350
    }
]