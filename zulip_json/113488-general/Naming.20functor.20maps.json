[
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/with_zero.map\">docs#with_zero.map</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/with_one.map\">docs#with_one.map</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/add_units.map\">docs#add_units.map</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/units.map\">docs#units.map</a>, etc... are all bundlings of a functor map. I would have liked them to be called <code>add_hom.with_zero</code>, <code>mul_hom.with_one</code>,<code>add_hom.units</code>, <code>mul_hom.units</code> and indeed I see two problems with the current names:</p>\n<ul>\n<li>There are several ways of bundling those maps, and the current ones only have the merit to be the most common. Consider this:</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">mul_one_class</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">mul_one_class</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n\n<span class=\"sd\">/-- Turn a `monoid_hom` into a `monoid_with_zero_hom` by adjoining a `0` to the domain and codomain.</span>\n<span class=\"sd\">-/</span>\n<span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">with_zero.map_as_well</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→*</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">with_zero</span> <span class=\"n\">α</span> <span class=\"bp\">→*₀</span> <span class=\"n\">with_zero</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"n\">option.map</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"bp\">...</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>The current convention would be to name this... <code>with_zero.map</code>. I can't seem to justify such ambiguity when a more explicit convention exists (namely, <code>add_hom.with_zero</code> for the existing <code>with_zero.map</code> and <code>monoid_hom.with_zero</code> for the above).</p>\n<ul>\n<li>For <code>with_zero</code> and <code>with_one</code> specifically, the names conflict with a missing definition. Namely, the adaptation of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/option.map\">docs#option.map</a>. <code>with_zero</code>/<code>with_one</code> being irreducible, this definition is necessary.</li>\n</ul>",
        "id": 273839474,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1646240415
    },
    {
        "content": "<p>My proposition is not perfect, as it de-emphasizes the fact that those bundlings really are functor maps and because it creates ambiguity with the case where only one side is mapped. See those two definitions from <a href=\"https://github.com/leanprover-community/mathlib/pull/11677\">#11677</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semilattice_sup</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semilattice_sup</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n\n<span class=\"kd\">@[simps]</span> <span class=\"kn\">protected</span> <span class=\"kd\">def</span>  <span class=\"n\">sup_hom.with_bot</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">sup_hom</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">sup_hom</span> <span class=\"o\">(</span><span class=\"n\">with_bot</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">with_bot</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"n\">option.map</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"bp\">...</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">@[simps]</span> <span class=\"kd\">def</span>  <span class=\"n\">sup_hom.with_bot'</span> <span class=\"o\">[</span><span class=\"n\">order_bot</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">sup_hom</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">sup_hom</span> <span class=\"o\">(</span><span class=\"n\">with_bot</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">a.elim</span> <span class=\"bp\">⊥</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"bp\">...</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 273839534,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1646240423
    },
    {
        "content": "<p>This conversation applies to a lesser extent to maps of equivs, eg <a href=\"https://leanprover-community.github.io/mathlib_docs/find/equiv.option_congr\">docs#equiv.option_congr</a>.</p>",
        "id": 273839658,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1646240429
    },
    {
        "content": "<p>People who might have an opinion: <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span>, <span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span>, <span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span></p>",
        "id": 273839713,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1646240447
    },
    {
        "content": "<p>I agree that the current names with the type before the dot are not ideal.</p>",
        "id": 273841442,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1646241064
    },
    {
        "content": "<p><code>sup_hom.with_bot'</code> looks a bit like what I would expect <code>with_bot.lift_sup_hom</code> to be called</p>",
        "id": 273841617,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1646241124
    },
    {
        "content": "<p>Overall I think we should de-emphasize the domain/codomain and emphasize the mapped type in these names.</p>",
        "id": 273846580,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1646242812
    },
    {
        "content": "<p>Out-there option: some sort of <code>has_map</code> typeclass?</p>",
        "id": 273846642,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1646242830
    },
    {
        "content": "<p>There's also the issue that monoid homs are group homs too so they map submonoids to submonoids and subgroups to subgroups</p>",
        "id": 273847428,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1646243084
    }
]