[
    {
        "content": "<p>Hi! Is this a proper channel for asking (elementary) questions?</p>",
        "id": 150700590,
        "sender_full_name": "Marcus Klaas",
        "timestamp": 1543705932
    },
    {
        "content": "<p>I'm stuck trying to prove the following trivial statement:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">func_as_set</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"err\">∈</span> <span class=\"n\">func_as_set</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>",
        "id": 150700592,
        "sender_full_name": "Marcus Klaas",
        "timestamp": 1543705961
    },
    {
        "content": "<p>Refl and Simp tactics don't seem to work, unfortunately</p>",
        "id": 150700597,
        "sender_full_name": "Marcus Klaas",
        "timestamp": 1543706021
    },
    {
        "content": "<p>Did you try <code>rfl</code>?</p>",
        "id": 150700700,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1543706273
    },
    {
        "content": "<p>I don't think so. I will do it now.</p>",
        "id": 150700743,
        "sender_full_name": "Marcus Klaas",
        "timestamp": 1543706332
    },
    {
        "content": "<p><code>refl</code> works for any reflexive relation, and I guess the elaborator looks for a proof that <code>∈</code> is reflexive. <code>rfl</code> is only for equality.</p>",
        "id": 150700744,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1543706334
    },
    {
        "content": "<p>omg that worked. Thanks for the elaboration too. Very useful to know!!</p>",
        "id": 150700750,
        "sender_full_name": "Marcus Klaas",
        "timestamp": 1543706377
    },
    {
        "content": "<p>PS</p>\n<blockquote>\n<p>Hi! Is this a proper channel for asking (elementary) questions?</p>\n</blockquote>\n<p>Here is fine, although most of the elementary questions get asked in <a class=\"stream\" data-stream-id=\"113489\" href=\"/#narrow/stream/113489-new-members\">#new members</a> . There are no hard and fast rules though.</p>",
        "id": 150701125,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1543707099
    },
    {
        "content": "<p>Cool, thanks</p>",
        "id": 150701289,
        "sender_full_name": "Marcus Klaas",
        "timestamp": 1543707396
    },
    {
        "content": "<p>In that case, I have another trivial follow up ;-) How does one go from a hypothesis in this form</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">x</span> <span class=\"err\">∈</span><span class=\"o\">{</span> <span class=\"n\">y</span> <span class=\"bp\">|</span> <span class=\"n\">P</span> <span class=\"n\">y</span> <span class=\"o\">}</span>\n</pre></div>\n\n\n<p>to</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">P</span> <span class=\"n\">x</span>\n</pre></div>\n\n\n<p>?</p>",
        "id": 150701337,
        "sender_full_name": "Marcus Klaas",
        "timestamp": 1543707498
    },
    {
        "content": "<p>Again isn't that <code>rfl</code>?</p>",
        "id": 150701352,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1543707581
    },
    {
        "content": "<p><code>rw set.mem_set_of_eq</code> also works. That lemma does not have a good name.</p>",
        "id": 150701400,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1543707611
    },
    {
        "content": "<p>but you can't use that when it's a hypothesis, right?</p>",
        "id": 150701402,
        "sender_full_name": "Marcus Klaas",
        "timestamp": 1543707622
    },
    {
        "content": "<p><code>rw _ at h</code></p>",
        "id": 150701405,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1543707639
    },
    {
        "content": "<p>right - trying now</p>",
        "id": 150701406,
        "sender_full_name": "Marcus Klaas",
        "timestamp": 1543707646
    },
    {
        "content": "<p>Are you in tactic mode or term mode?</p>",
        "id": 150701407,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1543707651
    },
    {
        "content": "<p>if <code>h</code> is your hypothesis.</p>",
        "id": 150701409,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1543707654
    },
    {
        "content": "<p>tactic mode</p>",
        "id": 150701412,
        "sender_full_name": "Marcus Klaas",
        "timestamp": 1543707662
    },
    {
        "content": "<p>you can just change it</p>",
        "id": 150701420,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1543707670
    },
    {
        "content": "<p>or pretend that it's already in that form</p>",
        "id": 150701422,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1543707678
    },
    {
        "content": "<p>depending on what you're trying to do</p>",
        "id": 150701424,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1543707682
    },
    {
        "content": "<p>You could do <code>change P x at h</code> as well</p>",
        "id": 150701425,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1543707683
    },
    {
        "content": "<p>oooh, that's useful<br>\nthanks folks!</p>",
        "id": 150701431,
        "sender_full_name": "Marcus Klaas",
        "timestamp": 1543707699
    },
    {
        "content": "<p>Because the two terms are definitionally equal you might not even need to change it</p>",
        "id": 150701435,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1543707713
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> my proposition is an equality in this case. i need it for a rewrite. doesnt seem to work without an explicit change</p>",
        "id": 150701602,
        "sender_full_name": "Marcus Klaas",
        "timestamp": 1543707982
    },
    {
        "content": "<p>with the change, it does! :-)</p>",
        "id": 150701605,
        "sender_full_name": "Marcus Klaas",
        "timestamp": 1543708017
    },
    {
        "content": "<p>Post some working code?</p>",
        "id": 150701611,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1543708025
    },
    {
        "content": "<p>But yes, <code>rw</code> needs things to be unravelled explicitly.</p>",
        "id": 150701615,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1543708077
    }
]