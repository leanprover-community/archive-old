[
    {
        "content": "<p>In the middle of defining a big structure, I have <code>(λ (a : X), sorry)</code>, where X is some explicit structure which takes four...erm...inputs or whatever they're called. Everything typechecks fine. The moment I replace <code>(λ (a : X), sorry)</code> with <code>(λ (⟨U,BU,Hx,s⟩ : X),sorry)</code> I get three errors on the <code>⟨</code> (and plenty more errors too) -- <code>invalid binder, identifier expected</code>, <code>invalid match/convoy expression, expected type is not known</code> and <code>invalid type ascription, term has type\n  Π (_x : ?m_1), ?m_2[_x] : Sort (imax ? ?)\nbut is expected to have type\n  X : Type u</code>. What is going on? If I try to fill in some more sorries, are things likely to get better or worse?</p>",
        "id": 126741686,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526637599
    },
    {
        "content": "<p>You can't add types to a lambda match</p>",
        "id": 126741736,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526637646
    },
    {
        "content": "<p>the syntax is literally <code>λ ⟨U,BU,Hx,s⟩, term</code></p>",
        "id": 126741743,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526637669
    },
    {
        "content": "<p>stuff like <code>λ (⟨U,BU,Hx,s⟩ : X), term</code> or <code>λ ⟨U,BU,Hx,(s:t)⟩, term</code> is not well formed</p>",
        "id": 126741748,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526637703
    },
    {
        "content": "<p>Oh!</p>",
        "id": 126741942,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526638082
    },
    {
        "content": "<p>And there was me trying to be helpful</p>",
        "id": 126741966,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526638098
    },
    {
        "content": "<p>Thanks Mario.</p>",
        "id": 126741971,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526638133
    },
    {
        "content": "<p>What is the logic behind that?</p>",
        "id": 126741976,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526638162
    },
    {
        "content": "<p>it's just the way the syntax is. I would appreciate more space to give type ascriptions (and in particular to provide explicit types which are defeq to the \"default\" types), but that's a lean issue.</p>",
        "id": 126742103,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526638371
    },
    {
        "content": "<p>The moment I take this away I am faced with <code>invalid match/convoy expression, expected type is not known</code> errors</p>",
        "id": 126742169,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526638548
    },
    {
        "content": "<p>You will often not be able to use lambda match for this reason, since it requires type information fairly early in the elaboration process. Typing <code>by exact λ ⟨U,BU,Hx,s⟩, term</code> may help, and you can also use type ascription for the whole lambda, i.e. <code>(λ ⟨U,BU,Hx,s⟩, term : X -&gt; Y)</code></p>",
        "id": 126742283,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526638697
    },
    {
        "content": "<p>I tried type ascription for the whole lambda and it didn't seem to fix the problem.</p>",
        "id": 126742363,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526638919
    },
    {
        "content": "<p>Maybe I should get on with some marking and come back to this later on. Thanks for the tips.</p>",
        "id": 126742410,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526638953
    },
    {
        "content": "<p>If I still struggle I will attempt to minimise and ask again.</p>",
        "id": 126742415,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526638968
    },
    {
        "content": "<p><code>context: 'eliminator' elaboration is not used for 'quotient.lift' because resulting type is not of the expected form</code></p>",
        "id": 126743335,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526640801
    },
    {
        "content": "<p>whatever that means</p>",
        "id": 126743336,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526640805
    },
    {
        "content": "<p>I have explicitly written the type of everything</p>",
        "id": 126743340,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526640836
    },
    {
        "content": "<p>and I replace <code>lam  (b : X), ...</code></p>",
        "id": 126743379,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526640847
    },
    {
        "content": "<p>with <code>lam \\&lt;A,B,C,D\\&gt;,...</code></p>",
        "id": 126743380,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526640868
    },
    {
        "content": "<p>and I am dead</p>",
        "id": 126743381,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526640870
    },
    {
        "content": "<p>and everything after the ... has been given an explicit type etc</p>",
        "id": 126743382,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526640886
    },
    {
        "content": "<p>aah</p>",
        "id": 126743393,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526640945
    },
    {
        "content": "<p>and now the <code>by exact</code> trick works</p>",
        "id": 126743396,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526640953
    },
    {
        "content": "<p>so in fact I had to use both <code>by exact</code> and type ascription for the whole lambda. What a struggle! Thanks Mario as ever.</p>",
        "id": 126743439,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526640990
    },
    {
        "content": "<p>The URL for this topic is <code>.../topic/.CE.BB.20(.E2.9F.A8U.2CBU.2CHx.2Cs.E2.9F.A9</code></p>",
        "id": 126743454,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526641059
    },
    {
        "content": "<p>:-)</p>",
        "id": 126743455,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526641062
    },
    {
        "content": "<p>The other irritation was that after almost every edit in VS Code, I had to drag the file up and down to see what the actual errors, if any, were. Somehow the localised \"just try and process the bit the user is working on\" thing worked very poorly in this instance.</p>",
        "id": 126743576,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526641215
    },
    {
        "content": "<p>You can click on the <code>Lean: (checking ...)</code> status bar item on the bottom to change what parts of the file are being checked.</p>",
        "id": 126743921,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1526641898
    },
    {
        "content": "<p>Oh this is news to me -- and helpful news too! Thanks Gabriel.</p>",
        "id": 126797317,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526739373
    }
]