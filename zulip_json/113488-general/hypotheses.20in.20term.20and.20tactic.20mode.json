[
    {
        "content": "<p>Consider:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">day</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">mon</span> <span class=\"o\">:</span> <span class=\"n\">day</span>\n<span class=\"bp\">|</span> <span class=\"n\">tues</span> <span class=\"o\">:</span> <span class=\"n\">day</span>\n<span class=\"bp\">|</span> <span class=\"n\">wed</span> <span class=\"o\">:</span> <span class=\"n\">day</span>\n<span class=\"bp\">|</span> <span class=\"n\">thu</span> <span class=\"o\">:</span> <span class=\"n\">day</span>\n<span class=\"bp\">|</span> <span class=\"n\">fri</span> <span class=\"o\">:</span> <span class=\"n\">day</span>\n<span class=\"bp\">|</span> <span class=\"n\">sat</span> <span class=\"o\">:</span> <span class=\"n\">day</span>\n<span class=\"bp\">|</span> <span class=\"n\">sun</span> <span class=\"o\">:</span> <span class=\"n\">day</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">day</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"n\">day.sun</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"n\">d</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"gr\">sorry</span>\n  <span class=\"kd\">end</span>\n</code></pre></div>\n<p>Is there a way to get the fact that <code>d</code> is not <code>day.sun</code> at <code>sorry</code>?</p>\n<p>Similarly:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">13</span> <span class=\"k\">then</span>\n    <span class=\"kd\">begin</span>\n      <span class=\"gr\">sorry</span>\n    <span class=\"kd\">end</span>\n  <span class=\"k\">else</span>\n    <span class=\"mi\">42</span>\n</code></pre></div>\n<p>Is there a way to get the fact that <code>n &gt; 13</code> at <code>sorry</code>?</p>\n<p>My workaround for both issues to to write the entire thing in the tactic mode. For the first one, I can use <code>cases</code>, and deal with all non <code>day.sun</code> with <code>all_goals</code> while retaining the hypothesis that <code>d</code> is not <code>day.sun</code>. For the second one, I can use <code>by_cases</code> to get the desired hypothesis. However, it would be nice if there is a better way to do things.</p>",
        "id": 237437877,
        "sender_full_name": "Sorawee Porncharoenwase",
        "timestamp": 1620187741
    },
    {
        "content": "<p>If you do <code>if h : d = day.sun then _ else _</code> in the <code>then</code> case you should be able to use <code>foo.no_confusion</code> to generate whatever you need using the <code>h</code> hypothesis</p>",
        "id": 237438117,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1620187958
    },
    {
        "content": "<p>In the <code>def foo</code> case, by writing <code>if h : n &gt; 13 then _ else 42</code>, the dependent hypothesis <code>h : n &gt; 13</code> will be available in the <code>then</code> case. In the <code>else</code> case, you'll have the negation of that hypothesis</p>",
        "id": 237438155,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1620188016
    },
    {
        "content": "<p>thanks! :)</p>",
        "id": 237438218,
        "sender_full_name": "Sorawee Porncharoenwase",
        "timestamp": 1620188062
    },
    {
        "content": "<p><code>if c then p else q</code> statements get interpreted as <code>ite c p q</code>. The dependent <code>if h : c ...</code> instead get interpreted as <code>dite c ...</code>.</p>",
        "id": 237438245,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1620188101
    },
    {
        "content": "<p>well, that solves the second issue, but for the first one, my above example is probably too minimal. It would be very inconvenient if I can't use pattern matching, since the function is something like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">sth</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">sth.a</span> <span class=\"o\">(</span><span class=\"n\">a.b</span> <span class=\"o\">(</span><span class=\"n\">b.c</span> <span class=\"n\">x</span><span class=\"o\">)))</span> <span class=\"o\">:=</span> <span class=\"n\">x</span>\n<span class=\"bp\">|</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"c1\">-- deal with sth.a (a.c ...), sth.a (a.d ...), sth.b ..., sth.c ...</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 237438523,
        "sender_full_name": "Sorawee Porncharoenwase",
        "timestamp": 1620188365
    },
    {
        "content": "<p>The usual workaround I use for this is to use <code>cases</code> and then <code>all_goals { proof }</code> in all the cases other than the main one. That way you have access to the fact that <code>y</code> is some particular constructor different from <code>sth.a</code> and so on</p>",
        "id": 237440806,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620190323
    },
    {
        "content": "<p>the short answer is \"no, lean does not provide a way to know that <code>y</code> is not <code>sth.a</code> in the wildcard case\"</p>",
        "id": 237440896,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620190382
    }
]