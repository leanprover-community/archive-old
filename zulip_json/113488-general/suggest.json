[
    {
        "content": "<p>These lemmas seem to always drift to the top of <code>suggest</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">Try</span> <span class=\"n\">this</span><span class=\"o\">:</span> <span class=\"n\">refine</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"bp\">_</span>\n<span class=\"n\">Try</span> <span class=\"n\">this</span><span class=\"o\">:</span> <span class=\"n\">refine</span> <span class=\"n\">eq_comm</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"bp\">_</span>\n<span class=\"n\">Try</span> <span class=\"n\">this</span><span class=\"o\">:</span> <span class=\"n\">refine</span> <span class=\"n\">eq_of_heq</span> <span class=\"bp\">_</span>\n<span class=\"n\">Try</span> <span class=\"n\">this</span><span class=\"o\">:</span> <span class=\"n\">refine</span> <span class=\"n\">heq_iff_eq</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"bp\">_</span>\n<span class=\"n\">Try</span> <span class=\"n\">this</span><span class=\"o\">:</span> <span class=\"n\">refine</span> <span class=\"n\">plift</span><span class=\"bp\">.</span><span class=\"n\">up</span><span class=\"bp\">.</span><span class=\"n\">inj</span> <span class=\"bp\">_</span>\n<span class=\"n\">Try</span> <span class=\"n\">this</span><span class=\"o\">:</span> <span class=\"n\">refine</span> <span class=\"n\">ulift</span><span class=\"bp\">.</span><span class=\"n\">up</span><span class=\"bp\">.</span><span class=\"n\">inj</span> <span class=\"bp\">_</span>\n</code></pre></div>\n\n\n<p>That's probably because the don't need anything (hypothesis-wise), but they also accomplish \"nothing\" (goal-wise).<br>\nCould <code>suggest</code> have a \"blacklist\" of lemmas that it will only suggest if they actually close the goal?</p>",
        "id": 196286414,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588671549
    },
    {
        "content": "<p>good luck closing a goal with <code>eq.symm</code> :-) Actually, I guess <code>eq.symm zero_add</code> might solve something, but would <code>suggest</code> spot this?</p>",
        "id": 196287863,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588672562
    },
    {
        "content": "<p>If you have assumption <code>h : x = y</code>, and goal <code>y = x</code>, then <code>suggest</code> should reply <code>exact eq.symm h</code>.</p>",
        "id": 196288237,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588672887
    },
    {
        "content": "<p>But if you don't have such a hypothesis, it should not reply <code>refine eq.symm _</code></p>",
        "id": 196288266,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588672906
    },
    {
        "content": "<p>If <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> doesn't want to do this right now, I can have a bit of a think about it.</p>\n<p>I'd probably only take Scott about half an hour to do it though. It'll take me a little longer.</p>",
        "id": 196372730,
        "sender_full_name": "Lucas Allen",
        "timestamp": 1588715309
    },
    {
        "content": "<p>I'd prefer not to blacklist, but instead tweak the sorting algorithm, which is still quite dumb.</p>",
        "id": 196380178,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1588720632
    },
    {
        "content": "<p>Currently we sort by (lexicographic ordering on) the pair: \"number of resulting goals\", \"(negative) number of local hypotheses appearing in the partial proof term\".</p>",
        "id": 196380210,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1588720675
    },
    {
        "content": "<p>A known problem is that \"appearing in the partial proof term\" is not really what we want to count; at the moment we really just count appearances as subexpressions. Instead it would be better to count \"voluntary\" uses, i.e. actual occasions when <code>solve_by_elim</code> choose to use a hypothesis to fill a blank, and ignore the \"involuntary\" ones through dependencies.</p>",
        "id": 196380370,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1588720809
    },
    {
        "content": "<p>I'm not sure either how to make to that precise, or do the counting without creating spaghetti.</p>",
        "id": 196380386,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1588720824
    },
    {
        "content": "<p>By this counting, <code>eq.symm</code> will always create exactly one goal, and count as \"hypotheses used\" exactly those that implicitly appeared in the goal to begin with.</p>",
        "id": 196380450,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1588720883
    },
    {
        "content": "<p>But in any case --- what I'm really saying is let's not say \"please make <code>suggest</code> never report these\", but instead say \"please make <code>suggest</code> report these alternatives with higher priority\"</p>",
        "id": 196380540,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1588720948
    },
    {
        "content": "<p>and then we can think about how to tweak the sorting algorithm to achieve this.</p>",
        "id": 196380548,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1588720959
    }
]