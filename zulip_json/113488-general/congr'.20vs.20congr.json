[
    {
        "content": "<p>I have a goal state where <code>congr' 3</code> closes the goal, but <code>congr</code> gives me an awful <code>a == b</code> goal where <code>a</code> and <code>b</code> are <code>smul_comm_class</code> objects. Does this mean that there's more to <code>congr'</code> than just \" stop after n steps\"?</p>",
        "id": 222083345,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1610118853
    },
    {
        "content": "<p>The line in question is <a href=\"https://github.com/leanprover-community/mathlib/pull/5269/files#diff-48c4d86a6f8902ed17b9728588594da05839379ca05b4dcabc31a3999850cf65R749\">https://github.com/leanprover-community/mathlib/pull/5269/files#diff-48c4d86a6f8902ed17b9728588594da05839379ca05b4dcabc31a3999850cf65R749</a></p>",
        "id": 222083502,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1610118953
    },
    {
        "content": "<p><code>congr</code> doesn't always check at each subexpression if the sides of the equality are already defeq:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">const</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">x</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">const</span> <span class=\"mi\">0</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">const</span> <span class=\"mi\">0</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">congr</span> <span class=\"c1\">-- Unsolved goals: ⊢ m = n</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">id</span> <span class=\"o\">(</span><span class=\"n\">const</span> <span class=\"mi\">0</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">id</span> <span class=\"o\">(</span><span class=\"n\">const</span> <span class=\"mi\">0</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">congr</span> <span class=\"c1\">-- Succeeds</span>\n</code></pre></div>",
        "id": 222086396,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1610120336
    },
    {
        "content": "<p>Not sure that that is the same thing as your issue, just something interesting I found when investigating it.</p>",
        "id": 222086479,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1610120377
    },
    {
        "content": "<p>I don't understand what's going on in your example at all, but it's quite likely the same as my problem</p>",
        "id": 222087110,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1610120742
    }
]