[
    {
        "content": "<p>I'm sure this has been raised in a thread somewhere, but I can't find it.</p>\n<p>Is there a good reason we can't consider redefining <code>finsupp</code> like so?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">finsupp</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">to_fun</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">finite_support'</span> <span class=\"o\">:</span> <span class=\"n\">to_fun.support.finite</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Some experimentation with using it suggests that it's perfectly workable. <a href=\"https://gist.github.com/linesthatinterlace/6d3fcc10df7ea2716a82a2a260a47c9f\">https://gist.github.com/linesthatinterlace/6d3fcc10df7ea2716a82a2a260a47c9f</a></p>\n<p>But I don't see why you require the current construction where it is a finset and a function along with a proof that the finset is the support of that function. It seems like that instantly makes computable definitions of operations on it a headache.</p>\n<p>Obviously the <code>set.finite</code> predicate is relatively new. But this feels so obvious that I'm sure there's some good reason why it hasn't happened. But is that reason \"it is not technically desirable\" or \"it would be a lot of work\" or something else? Currently I'm always a little wary of using finsupp, precisely because it's this big noncomputable theory and so anything you build from it is also noncomputable.</p>",
        "id": 306294128,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1666805833
    },
    {
        "content": "<p>The change you're suggesting makes summing over the support noncomputable</p>",
        "id": 306310875,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1666811094
    },
    {
        "content": "<p>Right now that's computable, but addition isn't (for silly reasons not related to the definition of finsupp)</p>",
        "id": 306311029,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1666811149
    },
    {
        "content": "<p>Pretty much all the \"finsupp operations are not computable\" cases are actually \"finsupp chose to use classical.decidable instead of taking the necessary instance as an argument\", which was done to make some things less painful</p>",
        "id": 306311372,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1666811261
    },
    {
        "content": "<p>Does it make it noncomputable even when you sum over a set with decidable mem (such as a coerced finset)?</p>",
        "id": 306312077,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1666811498
    },
    {
        "content": "<p>Like if you have a way of constructing finsupps from finsets.</p>",
        "id": 306345685,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1666824222
    },
    {
        "content": "<p>There's no way to write <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finsupp.sum\">docs#finsupp.sum</a> in a computable way under your proposal, because you're removing the data it needs</p>",
        "id": 306346188,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1666824519
    },
    {
        "content": "<p>Right right</p>",
        "id": 306388863,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1666855199
    },
    {
        "content": "<p>That does make sense - and I can see why we want that to be computable. It just feels so weird that there's no way to make both of them so.</p>",
        "id": 306388975,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1666855235
    },
    {
        "content": "<p>It's not that \"there's no way\". It's just that keeping things computable requires additional plumbing, getting decidability instances to the correct places (and uniformly, i.e. so we don't have defeq problems with instances preventing lemma firing). And since mathlib is classical, we decided not to do this plumbing.</p>",
        "id": 306389236,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1666855349
    },
    {
        "content": "<p>Right, so there's no theoretical barrier.</p>",
        "id": 306389389,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1666855422
    },
    {
        "content": "<p>I understand that - I do think it makes it a bit hard to build certain things which feel like they ought to be computable, and to a degree I don't then see why it's then something you bother caring about at all (if it is intended to be a classical library).</p>",
        "id": 306389865,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1666855632
    },
    {
        "content": "<p>My understanding is that the decision is stronger than \"we didn't want to do the plumbing\"; it's \"we didn't want mathematicians to have to think about connecting to the plumbing\"</p>",
        "id": 306402095,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1666860513
    },
    {
        "content": "<p>Having worked with concrete polynomials a bit I now believe this was the wrong decision, and being able to evaluate coeffs/degrees by refl would be more useful.</p>",
        "id": 306402223,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1666860580
    },
    {
        "content": "<p>A big problem here is that there are many different reasonable representations of \"computable polynomials\", and different representations are better for different purposes. Our plan has been to do all the theory with classical polynomials, but without this necessarily obstructing (much) narrower developments of computational representations for particular purposes.</p>\n<p>It's tempting to imagine we might have in parallel a development of computable polynomials with all the (highly infectious?) plumbing that requires, and also a development of classical polynomials with all that plumbing removed. But we can't realistically redevelop everything for all the different relevant representations; it wouldn't be one parallel development but many.</p>",
        "id": 306403128,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1666860912
    },
    {
        "content": "<p>I may as well make plain where I was thinking about this - I've been reading some of Brett Jacob's probability work as a result of this thread. <a href=\"#narrow/stream/113488-general/topic/elementary.20probability.20advice\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/elementary.20probability.20advice</a> and I was thinking that if we wanted to build a formalization of his \"structured probablistic reasoning\" one would probably end up doing it off of finsupp, but then you lose much of the nice computability that should otherwise be inherent in the theory.</p>",
        "id": 306405328,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1666861746
    },
    {
        "content": "<p>It seems this tension might exist in multiple places, really - between computable representations and classical ones, where the latter are much easier/better for developing abstract theory on.</p>",
        "id": 306405509,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1666861804
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> does that imply that you'd also like to see some form of computable finsupp, or rather implement polynomials in a different way?</p>",
        "id": 306405601,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1666861844
    },
    {
        "content": "<p>I think this also depends on what we mean by \"compute.\"</p>\n<ul>\n<li>There's Lean-computable, which means <code>rfl</code> might work (well-founded recursion or different <code>eq.rec</code>s can inhibit this though)</li>\n<li>There's the same Lean-computable, which means the VM compiler ought to work (modulo bugs), but this is for writing programs and the results are not formally verified.</li>\n<li>There's computable in the symbolic sense, where for example <code>norm_num</code> or <code>simp</code> can take a symbolic expression and put it into (ideally) a normal form.</li>\n</ul>\n<p>For the third, there's no need for the backing type to have any nice computability properties.</p>\n<p>When it comes to polynomials and computation, don't we mostly mean \"take this symbolic expression and put it into a normal form\"? One could write \"data structures\" that are special constructors for polynomials (for example dense representations, or sparse representations) and have tactics that efficiently operate on these constructors.</p>",
        "id": 306406653,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1666862246
    },
    {
        "content": "<p>I wrote some implementations of computable polynomials over Int in Lean 4, but that was because I was just using it as a programming language to get some large unverified computations done. I'm not sure how useful these implementations would be for computing inside proofs.</p>",
        "id": 306407208,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1666862452
    },
    {
        "content": "<p>I suppose for something like finsupp, what I mean is that if I have f and g finsupps, I should be able to evaluate (f + g) at any point. Perhaps that's already possible, but then I don't understand what noncomputable actually means, perhaps.</p>",
        "id": 306407237,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1666862470
    },
    {
        "content": "<p>and indeed, I suppose, find (f + g).support, though I appreciate that is harder/the sticking point.</p>",
        "id": 306407405,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1666862532
    },
    {
        "content": "<p>I guess a pertinent question is what you specifically mean by having f and g finsupps and what output you'd want from evaluating (f + g).</p>",
        "id": 306407485,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1666862578
    },
    {
        "content": "<p>Do you think that <code>finsupp.sum</code> should be computable? Folds over a finsupp are important to a lot of applications that use them, for example you take the sum of a finsupp to calculate the degree of a monomial</p>",
        "id": 306407692,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666862659
    },
    {
        "content": "<p>and that means that <code>finsupp.support</code> needs to be data, not just an assertion of finiteness</p>",
        "id": 306407806,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666862696
    },
    {
        "content": "<p>I definitely agree - as Eric pointed out to me above - that it is <em>more</em> important that <code>finsupp.sum</code> is computable for exactly the reason you say.</p>",
        "id": 306408251,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1666862835
    },
    {
        "content": "<p>And I hadn't appreciated that that would of course need the support to be data.</p>",
        "id": 306408297,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1666862858
    },
    {
        "content": "<p>Evaluating (f + g) at a point is already possible using the function part</p>",
        "id": 306408475,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666862932
    },
    {
        "content": "<p>but calculating the support requires decidable equality of the codomain so that you can remove all the zeroes</p>",
        "id": 306408566,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666862972
    },
    {
        "content": "<p>Right.</p>",
        "id": 306408584,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1666862978
    },
    {
        "content": "<p>Alternatively, you could relax that by saying that the provided list doesn't have to be the real support but only some superset of it, and then take a quotient</p>",
        "id": 306408779,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666863039
    },
    {
        "content": "<p>Yes, superset is I think the obvious \"next idea\". But that surely runs into other issues.</p>",
        "id": 306408834,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1666863067
    },
    {
        "content": "<p>I think it comes back to \"what do you actually want from the type\"</p>",
        "id": 306408900,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666863099
    },
    {
        "content": "<p>Yeah. And that might be quite different depending on the type.</p>",
        "id": 306408933,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1666863113
    },
    {
        "content": "<p>for computational purposes a closure + a linked list is really not a good representation at all</p>",
        "id": 306408995,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666863124
    },
    {
        "content": "<p>(Or rather, on the thing you are building from the type.)</p>",
        "id": 306409106,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1666863166
    },
    {
        "content": "<p>I think something that I might want is for the following to output \"3\"</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">polynomial.C</span> <span class=\"mi\">1</span>\n<span class=\"kd\">def</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">polynomial.C</span> <span class=\"mi\">2</span>\n<span class=\"kd\">def</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">c.eval</span> <span class=\"mi\">17</span>\n</code></pre></div>\n<p>Does the quotient way of doing this allow both for this as well as keeping <code>finsupp.sum</code> computable?</p>",
        "id": 306409668,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1666863381
    },
    {
        "content": "<p>To check, when you say you want to <code>#eval</code> this, is it because you just want the number and you are OK with it being unproved?</p>",
        "id": 306409836,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1666863460
    },
    {
        "content": "<p>Would you also be happy with <code>#simp c.eval 17</code> returning <code>3</code>?</p>",
        "id": 306409889,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1666863482
    },
    {
        "content": "<p>or <code>#norm_num c.eval 17</code></p>",
        "id": 306410022,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1666863528
    },
    {
        "content": "<p>Hmm, let me think</p>",
        "id": 306410234,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1666863607
    },
    {
        "content": "<p>I was trying to produce a simple example of what I wanted but in actuality I might want to be doing more complicated operations than just adding two known polynomials. The cryptographic algorithm is a bit complicated but what it does is to take as input a polynomial like <code>a + b X + c X^3 + d X^4</code> and \"split\" it into two polynomials <code>a + c X</code> and <code>b + d X</code>, make a linear combination those two polynomials <code>(a + cX) + k(b + dX)</code>, and then evaluate that and return an output.</p>",
        "id": 306411290,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1666864050
    },
    {
        "content": "<p>I suppose what the \"noncomputable <code>finsupp.sum</code>\" would look like under my original proposal is \"shockingly and suspiciously similar to the already-existing <code>finsum</code>\".</p>",
        "id": 306412030,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1666864342
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/Computability.20and.20finsupp.20and.20finite/near/306408779\">said</a>:</p>\n<blockquote>\n<p>Alternatively, you could relax that by saying that the provided list doesn't have to be the real support but only some superset of it, and then take a quotient</p>\n</blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"330967\">Wrenna Robson</span> <a href=\"#narrow/stream/113488-general/topic/Computability.20and.20finsupp.20and.20finite/near/306408834\">said</a>:</p>\n<blockquote>\n<p>Yes, superset is I think the obvious \"next idea\". But that surely runs into other issues.</p>\n</blockquote>\n<p>Note this approach to computability already exists in mathlib, it's <a href=\"https://leanprover-community.github.io/mathlib_docs/find/dfinsupp\">docs#dfinsupp</a></p>",
        "id": 306412154,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1666864394
    },
    {
        "content": "<p>\"finsupp takes an altogether different approach here; it uses classical.decidable and declares finsupp.has_add as noncomputable. This design difference is independent of the fact that dfinsupp is dependently-typed and finsupp is not; in future, we may want to align these two definitions, or introduce two more definitions for the other combinations of decisions.\"</p>",
        "id": 306412235,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1666864439
    },
    {
        "content": "<p>Well that's uh.</p>",
        "id": 306412286,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1666864444
    },
    {
        "content": "<p>I did not realise this. So <code>finsupp</code> and <code>dfinsupp</code> are different in ways other than the fact that one is dependent. I didn't realise this (you would not know it from the name).</p>",
        "id": 306412359,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1666864484
    },
    {
        "content": "<p>I have a branch somewhere that redefined <code>finsupp</code> as a special case of <code>dfinsupp</code></p>",
        "id": 306412467,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1666864538
    },
    {
        "content": "<p>I mean it <em>looks</em> like the approach of <code>dfinsupp</code> is very clever and nice.</p>",
        "id": 306412473,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1666864539
    },
    {
        "content": "<p>So - right. Yes, that sounds good.</p>",
        "id": 306412478,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1666864545
    },
    {
        "content": "<p>Like, call me silly but that's what I'd do.</p>",
        "id": 306412559,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1666864570
    },
    {
        "content": "<p>That does mean I can increment my \"number of ways to do finite sums in mathlib\" counter by one.</p>",
        "id": 306412727,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1666864659
    },
    {
        "content": "<p>Because it sounds like <code>dfinsupp.sum</code>, <code>finsupp.sum</code>, <code>finsum</code>, <code>finset.sum</code> and <code>tsum</code> are all different.</p>",
        "id": 306412852,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1666864711
    },
    {
        "content": "<p><em>slaps \\Sigma</em> this bad boy can contain so many different notions of summation</p>",
        "id": 306412910,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1666864736
    },
    {
        "content": "<p>See also <a href=\"https://leanprover-community.github.io/mathlib_docs/find/dfinsupp.sum_add_hom\">docs#dfinsupp.sum_add_hom</a> which removes the decidability requirement in exchange for a proof that it's not needed</p>",
        "id": 306416554,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1666866000
    },
    {
        "content": "<p>Oh true, I should count that too ;P</p>",
        "id": 306417063,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1666866185
    },
    {
        "content": "<p>That is really nice, honestly.</p>",
        "id": 306417095,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1666866202
    },
    {
        "content": "<p>Was there any particular issue with replacing finsupp with a special case of dfinsupp?</p>",
        "id": 306417284,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1666866276
    },
    {
        "content": "<p>Refactors are hard</p>",
        "id": 306421095,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1666867862
    },
    {
        "content": "<p><em>looks sadly at my floor_order refactor</em> yes</p>",
        "id": 306422376,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1666868393
    }
]