[
    {
        "content": "<p>I am struggling to write a super-basic tactic (see <a href=\"https://github.com/leanprover-community/mathlib/issues/1792\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/1792\">#1792</a>). Given a string <code>e</code> of the form <code>\"simp [-one_div_eq_inv, hx, hy] with field_simps\"</code>, say, is there a command to convert it to something one can execute? (I tried <code>[``e]</code> and variations of this, to no avail). </p>\n<p>It may well be an instance of an XY problem, so here is a little bit more context: I want <code>field_simp [hx]</code> to call <code>simp [-one_eq_div_inv, hx] with field_simps</code> (and I don't want to fiddle with <code>simp</code>parsing options are there are just too many of them). My current attempt looks like</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">namespace</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">field_simp</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">pexpr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"s2\">&quot;simp [-one_div_eq_inv, &quot;</span> <span class=\"bp\">++</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">to_string_aux</span> <span class=\"n\">tt</span> <span class=\"n\">hs</span> <span class=\"bp\">++</span> <span class=\"s2\">&quot;] with field_simps&quot;</span> <span class=\"k\">in</span>\n<span class=\"n\">trace</span> <span class=\"n\">e</span><span class=\"bp\">;</span> <span class=\"n\">skip</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">interactive</span>\n<span class=\"kn\">open</span> <span class=\"n\">interactive</span> <span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">types</span> <span class=\"n\">expr</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">field_simp</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">pexpr_list_or_texpr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">field_simp</span> <span class=\"n\">hs</span>\n<span class=\"kn\">end</span> <span class=\"n\">interactive</span>\n<span class=\"kn\">end</span> <span class=\"n\">tactic</span>\n</pre></div>",
        "id": 183147411,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1576063195
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 183149325,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1576064917
    },
    {
        "content": "<p>I don't think there's any way to parse a string into an expression inside a tactic.  I think you should just call <code>tactic.interactive.simp</code> directly (it's just a regular function after all).</p>",
        "id": 183149445,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1576065061
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> I was hoping to find time to try the field_simp tactic today -- it should only take a few lines of code. Not 100% sure I'll have a chance, but if not, I can do it tomorrow. As Gabriel says, the easiest way to do it is just to put together the right information to give to <code>tactic.interactive.simp</code>, or maybe using the definition of <code>tactic.interactive.simp</code> with very minor changes.</p>",
        "id": 183149624,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1576065280
    },
    {
        "content": "<p>Okay, here's a sketch of how it would look:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">core</span>\n<span class=\"kn\">open</span> <span class=\"n\">tactic</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span>\n\n<span class=\"n\">mk_simp_attribute</span> <span class=\"n\">newattr</span> <span class=\"n\">none</span>\n<span class=\"n\">setup_tactic_parser</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">newattr</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">priority</span> <span class=\"mi\">20000</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">badsimp</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">simp_with</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">simp_arg_list</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">attr_names</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">with_ident_list</span><span class=\"o\">)</span>\n              <span class=\"o\">(</span><span class=\"n\">locat</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">location</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">cfg</span> <span class=\"o\">:</span> <span class=\"n\">simp_config_ext</span> <span class=\"o\">:=</span> <span class=\"o\">{})</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"k\">let</span> <span class=\"n\">attr_names</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"n\">newattr</span> <span class=\"bp\">::</span> <span class=\"n\">attr_names</span><span class=\"o\">,</span>\n    <span class=\"n\">hs</span> <span class=\"o\">:=</span> <span class=\"n\">simp_arg_type</span><span class=\"bp\">.</span><span class=\"n\">except</span> <span class=\"bp\">`</span><span class=\"n\">badsimp</span> <span class=\"bp\">::</span> <span class=\"n\">hs</span> <span class=\"k\">in</span>\n<span class=\"n\">propagate_tags</span> <span class=\"o\">(</span><span class=\"n\">simp_core</span> <span class=\"n\">cfg</span><span class=\"bp\">.</span><span class=\"n\">to_simp_config</span> <span class=\"n\">cfg</span><span class=\"bp\">.</span><span class=\"n\">discharger</span> <span class=\"n\">ff</span> <span class=\"n\">hs</span> <span class=\"n\">attr_names</span> <span class=\"n\">locat</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- fail</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span> <span class=\"n\">simp</span> <span class=\"k\">with</span> <span class=\"n\">newattr</span><span class=\"o\">,</span>  <span class=\"kn\">end</span>\n\n<span class=\"c1\">-- work</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"n\">badsimp</span><span class=\"o\">]</span> <span class=\"k\">with</span> <span class=\"n\">newattr</span><span class=\"o\">,</span>  <span class=\"kn\">end</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span> <span class=\"n\">simp_with</span> <span class=\"kn\">end</span>\n</pre></div>",
        "id": 183155798,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1576070653
    },
    {
        "content": "<p>I removed the option to write <code>simp_with only [...]</code> because I'm not sure how <code>simp only [-badsimp]</code> behaves. It's probably fine and you could add it back.</p>",
        "id": 183155849,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1576070697
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 183157179,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1576071662
    }
]