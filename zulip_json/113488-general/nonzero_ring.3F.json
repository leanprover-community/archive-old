[
    {
        "content": "<p>We have <code>nonzero_comm_ring</code> and <code>nonzero_comm_semiring</code> and <code>nonzero_semiring</code> but not <code>nonzero_ring</code>. Is this deliberate?</p>",
        "id": 198865210,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590569470
    },
    {
        "content": "<p>Probably not</p>",
        "id": 198865416,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590569584
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/blob/2792c93ac5ad99a82945caad1110e6e284fd6ff7/src/algebra/ring.lean#L669-L676\">https://github.com/leanprover-community/mathlib/blob/2792c93ac5ad99a82945caad1110e6e284fd6ff7/src/algebra/ring.lean#L669-L676</a></p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\">- Predicate for semirings in which zero does not equal one. -/</span>\n<span class=\"n\">class</span> <span class=\"n\">nonzero_semiring</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"n\">semiring</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">zero_ne_one_class</span> <span class=\"n\">α</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">- Predicate for commutative semirings in which zero does not equal one. -/</span>\n<span class=\"n\">class</span> <span class=\"n\">nonzero_comm_semiring</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"n\">comm_semiring</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">zero_ne_one_class</span> <span class=\"n\">α</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">- Predicate for commutative rings in which zero does not equal one. -/</span>\n<span class=\"n\">class</span> <span class=\"n\">nonzero_comm_ring</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"n\">comm_ring</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">zero_ne_one_class</span> <span class=\"n\">α</span>\n</code></pre></div>",
        "id": 198865893,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590569862
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/2595/files#diff-997c56fe87e1352880681d783e610a7f\">https://github.com/leanprover-community/mathlib/pull/2595/files#diff-997c56fe87e1352880681d783e610a7f</a></p>",
        "id": 198866194,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590570017
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/2595\">#2595</a> created <code>nonzero_semiring</code> but not <code>nonzero_ring</code></p>",
        "id": 198866209,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590570025
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/2839\">#2839</a></p>",
        "id": 198867722,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590571073
    },
    {
        "content": "<p>The point of the commutative versions was to deal with polynomials. Nobody's found a point of the non commutative versions yet.</p>",
        "id": 198874800,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1590576186
    },
    {
        "content": "<p>Is this related to codewars? I wanted this class for a Kata.</p>",
        "id": 198874896,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1590576243
    },
    {
        "content": "<p>no, I want to refactor <code>linear_algebra.basic</code></p>",
        "id": 198875169,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590576451
    },
    {
        "content": "<p>there are a lot of theorems with rings and 0 ne 1 assumption</p>",
        "id": 198875180,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590576459
    },
    {
        "content": "<p>Shouldn't <code>zero_ne_one_class</code> be a prop?</p>",
        "id": 198875263,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590576507
    },
    {
        "content": "<p>We could have a class <code>[nonzero R]</code>, and then we can get rid of <code>nonzero_*</code> for all versions of <code>*</code>.</p>",
        "id": 198875311,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590576566
    },
    {
        "content": "<p>zero_ne_one_class is one of the things we need to delete</p>",
        "id": 198875318,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590576575
    },
    {
        "content": "<p>it makes sense for an algebraic hierarchy that isn't mathlib's</p>",
        "id": 198875374,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590576602
    },
    {
        "content": "<p>If you use mixins for making classes, a la the mathcomp hierarchy, it makes sense</p>",
        "id": 198875465,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590576682
    },
    {
        "content": "<p>We want a <code>non_subsingleton</code> class :-)</p>",
        "id": 198875708,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590576862
    },
    {
        "content": "<p>are those always the same thing in all classes where zero_ne_one makes sense?</p>",
        "id": 198875785,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590576935
    },
    {
        "content": "<p>I guess it's true as long as <code>0 * x = 0</code> and <code>1 * x = x</code></p>",
        "id": 198875908,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590577002
    },
    {
        "content": "<p>which seem like pretty safe bets in an algebraic class with a thing called 0</p>",
        "id": 198875933,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590577029
    },
    {
        "content": "<p>Is it true in <code>with_zero \\a</code> if <code>\\a</code> is an <code>ordered_add_comm_monoid</code>?</p>",
        "id": 198875975,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590577062
    },
    {
        "content": "<p>To bad... we don't have a 1 there <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 198875989,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590577079
    },
    {
        "content": "<p>so 1 is definitely not 0, because we have two of those!</p>",
        "id": 198876042,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590577098
    },
    {
        "content": "<p>It's not true in a <code>add_monoid</code> <code>has_one</code>, which is the context where <code>nat.cast</code> is stated</p>",
        "id": 198876054,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590577118
    },
    {
        "content": "<p>Johan's class should be an instance of <code>zero_ne_zero_class</code></p>",
        "id": 198876081,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590577138
    },
    {
        "content": "<p>that's the <code>to_additive</code> of <code>zero_ne_one_class</code> right?</p>",
        "id": 198876218,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590577221
    },
    {
        "content": "<p>I feel like it should be possible to <code>to_additive</code> a semiring and get a tropical ring</p>",
        "id": 198876256,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590577264
    },
    {
        "content": "<p>Back on topic: what do we do with <code>nonzero_*</code>?</p>",
        "id": 198876405,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590577344
    },
    {
        "content": "<p>I wouldn't want to waste Kenny's refactor energy</p>",
        "id": 198876417,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590577356
    },
    {
        "content": "<p>I think your idea is a good one</p>",
        "id": 198876420,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590577359
    },
    {
        "content": "<p>although I think that we should still have things like <code>domain</code> and <code>field</code> containing nonzero as part of the structure</p>",
        "id": 198876544,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590577451
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> what do you think of just using <code>[fact (0:R) ≠ 1]</code> whenever we need it, and adding an instance for this <code>fact</code> for <code>[domain R]</code>?</p>",
        "id": 198950938,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590612395
    },
    {
        "content": "<p>Then we can remove all the <code>nonzero_*</code> classes completely</p>",
        "id": 198950974,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590612415
    },
    {
        "content": "<p>You can do this kind of encoding for anything. The big downside is that all <code>fact</code>s end up in a single class, which means that typeclass inference is going to have to sort through all <code>fact</code>s in all contexts when trying to prove this. So no, I think we should try to not have any instances of <code>fact</code> other than local instances and hypotheses</p>",
        "id": 198952171,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590612969
    },
    {
        "content": "<p>so what should we do?</p>",
        "id": 198953925,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590613863
    },
    {
        "content": "<p>have a <code>nonzero R</code> class, which was Johan's original suggestion</p>",
        "id": 198953988,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590613915
    },
    {
        "content": "<p>for semiring?</p>",
        "id": 198954056,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590613944
    },
    {
        "content": "<p><code>class nonzero (R) [has_zero R] [has_one R] := (zero_ne_one : 0 != 1)</code></p>",
        "id": 198954093,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590613980
    },
    {
        "content": "<p>it could also be <code>class nonzero (R) [semiring R]</code></p>",
        "id": 198954121,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590614000
    },
    {
        "content": "<p>do we have <code>monoid_with_zero</code>?</p>",
        "id": 198954347,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590614063
    },
    {
        "content": "<p>Yes we do</p>",
        "id": 198954367,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590614082
    },
    {
        "content": "<p>ah, I should get in the habit of using that for stuff with 0 and 1</p>",
        "id": 198954397,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590614104
    },
    {
        "content": "<p>But a <code>monoid_with_zero</code> is always <code>nonzero</code></p>",
        "id": 198954436,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590614123
    },
    {
        "content": "<p>So I vote for your first option</p>",
        "id": 198954455,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590614137
    },
    {
        "content": "<p>say what?</p>",
        "id": 198954457,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590614138
    },
    {
        "content": "<p>that's definitely the wrong choice</p>",
        "id": 198954474,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590614155
    },
    {
        "content": "<p>Well, it worked for my one application...</p>",
        "id": 198954552,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590614183
    },
    {
        "content": "<p>If <code>monoid_with_zero</code> is to <code>group_with_zero</code> as <code>ring</code> is to <code>division_ring</code> then it shouldn't have <code>nonzero</code></p>",
        "id": 198954566,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590614194
    },
    {
        "content": "<p>In particular I would like semirings to be <code>monoid_with_zero</code></p>",
        "id": 198954600,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590614220
    },
    {
        "content": "<p>Yup, but I'm not sure that analogy should hold</p>",
        "id": 198954605,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590614222
    },
    {
        "content": "<p>Apparently in tropical geometry people study <code>monoid_with_zero M</code>s and they are all <code>nonzero</code> by assumption.</p>",
        "id": 198954654,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590614255
    },
    {
        "content": "<p>That's why I included that assumption.</p>",
        "id": 198954662,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590614262
    },
    {
        "content": "<p>But it's probably a 2-line refactor to drop that assumption from mathlib</p>",
        "id": 198954694,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590614277
    },
    {
        "content": "<p>luckily we now have a way to say this :)</p>",
        "id": 198954696,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590614278
    },
    {
        "content": "<p><code>s/now/almost/</code></p>",
        "id": 198954770,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590614299
    },
    {
        "content": "<p>I need to refill my 'refactor-mathlib' battery. So I would like to take a pass on this one.</p>",
        "id": 198954834,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590614329
    },
    {
        "content": "<p>It seems awkward that <code>group_with_zero</code> and <code>semiring</code> currently have no greatest lower bound</p>",
        "id": 198954838,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590614332
    },
    {
        "content": "<p>The mathematical world is still reeling from the introduction of this new <code>group_with_zero</code> concept</p>",
        "id": 198954893,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590614364
    },
    {
        "content": "<p>But a complete refactor of the algebraic hierarchy... I wouldn't want to do that without more supporting tools</p>",
        "id": 198954905,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590614373
    },
    {
        "content": "<p>we haven't yet decided how much further it goes</p>",
        "id": 198954921,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590614378
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/nonzero_ring.3F/near/198954905\">said</a>:</p>\n<blockquote>\n<p>But a complete refactor of the algebraic hierarchy... I wouldn't want to do that without more supporting tools</p>\n</blockquote>\n<p>It's not a complete refactor, just one new class</p>",
        "id": 198955008,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590614412
    },
    {
        "content": "<p>some theorems will transfer to the weaker assumption, other stuff won't</p>",
        "id": 198955048,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590614449
    },
    {
        "content": "<p>since it's a GLB class there will be no conflicts</p>",
        "id": 198955056,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590614459
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/nonzero_ring.3F/near/198954093\">said</a>:</p>\n<blockquote>\n<p><code>class nonzero (R) [has_zero R] [has_one R] := (zero_ne_one : 0 != 1)</code></p>\n</blockquote>\n<p><a href=\"https://github.com/leanprover-community/mathlib/commit/d1df1780ff89b8c023847b97119411601448f74c\">https://github.com/leanprover-community/mathlib/commit/d1df1780ff89b8c023847b97119411601448f74c</a><br>\n<a href=\"https://github.com/leanprover-community/mathlib/tree/nonzero\">https://github.com/leanprover-community/mathlib/tree/nonzero</a></p>",
        "id": 198990779,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590651122
    },
    {
        "content": "<p>Every sentence a verb</p>",
        "id": 198990963,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590651282
    },
    {
        "content": "<p>In other words: what the point?</p>",
        "id": 198990988,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590651323
    },
    {
        "content": "<p>I have started this refactor on the <code>nonzero</code> branch</p>",
        "id": 198990991,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590651331
    },
    {
        "content": "<p>[nonzero_semiring α] becomes [semiring α] [nonzero α]<br>\n[nonzero_comm_semiring α] becomes [comm_semiring α] [nonzero α]<br>\n[nonzero_comm_ring α] becomes [comm_ring α] [nonzero α]</p>",
        "id": 198991489,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590651766
    },
    {
        "content": "<p>(is there a place where I can put information like this?)</p>",
        "id": 198991497,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590651773
    },
    {
        "content": "<p>The commit message?</p>",
        "id": 198991546,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590651823
    },
    {
        "content": "<p>Note that when you make a PR, the contents of the first post become the commit message of the final squashed and merged commit.</p>",
        "id": 198991685,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1590651924
    },
    {
        "content": "<p>along with the title?</p>",
        "id": 198991792,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590651996
    },
    {
        "content": "<p>When you create the PR it suggests a title, but it's usually crappy. It might also suggest a message, but you might want to change it.</p>",
        "id": 198991833,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590652036
    },
    {
        "content": "<p>I'm just asking whether the title also becomes the commit message</p>",
        "id": 198991903,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590652084
    },
    {
        "content": "<p>i.e. whether <a href=\"https://github.com/leanprover-community/mathlib/issues/2847\">#2847</a> is correct</p>",
        "id": 198991923,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590652108
    },
    {
        "content": "<p>The title becomes the first line of the message, and will afterwards typically be formatted as a title.</p>",
        "id": 198991940,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590652137
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110064\">Kenny Lau</span> <a href=\"#narrow/stream/113488-general/topic/nonzero_ring.3F/near/198991923\">said</a>:</p>\n<blockquote>\n<p>i.e. whether <a href=\"https://github.com/leanprover-community/mathlib/issues/2847\">#2847</a> is correct</p>\n</blockquote>\n<p>Yup, looks fine to me</p>",
        "id": 198991978,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590652154
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">ancestor</span> <span class=\"n\">has_mul</span> <span class=\"n\">has_zero</span><span class=\"o\">]</span>\n<span class=\"n\">class</span> <span class=\"n\">no_zero_divisors</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"n\">has_mul</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">has_zero</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">eq_zero_or_eq_zero_of_mul_eq_zero</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 198992077,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590652220
    },
    {
        "content": "<p>can we make this a Prop?</p>",
        "id": 198992083,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590652223
    },
    {
        "content": "<p>(by moving has_mul and has_zero before extends)</p>",
        "id": 198992094,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590652235
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">class</span> <span class=\"n\">domain</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"n\">ring</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">no_zero_divisors</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">nonzero</span> <span class=\"n\">α</span>\n</code></pre></div>",
        "id": 198992105,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590652245
    },
    {
        "content": "<p>because the <code>nonzero</code> is problematic in \"old_str_cmd true\" and the <code>no_zero_divisors</code> is problematic in \"false\"</p>",
        "id": 198992127,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590652266
    },
    {
        "content": "<p>Yup, I would like that one to become a prop as well</p>",
        "id": 198992141,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590652290
    },
    {
        "content": "<p>no_zero_divisors looks about as useful as zero_ne_one_class and distrib</p>",
        "id": 198992150,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590652296
    },
    {
        "content": "<p>Unbundling FTW!</p>",
        "id": 198992208,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590652340
    },
    {
        "content": "<p>I think it should just be deleted (and merged into <code>domain</code>)</p>",
        "id": 198992211,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590652347
    },
    {
        "content": "<p>But <code>group_with_zero</code>!</p>",
        "id": 198992220,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590652358
    },
    {
        "content": "<p>aha, is that a thing?</p>",
        "id": 198992253,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590652395
    },
    {
        "content": "<p>Never heard of them before</p>",
        "id": 198992260,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590652406
    },
    {
        "content": "<p>pre-domain</p>",
        "id": 198992267,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590652420
    },
    {
        "content": "<p>quasi-pseudo-demi-domain</p>",
        "id": 198992282,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590652441
    },
    {
        "content": "<p>splitting semimonoid</p>",
        "id": 198992322,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590652447
    },
    {
        "content": "<p>gotta keep them guessing</p>",
        "id": 198992331,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590652466
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112165\">rss-bot</span> <a href=\"#narrow/stream/116290-rss/topic/Recent.20Commits.20to.20mathlib.3Amaster/near/199226836\">said</a>:</p>\n<blockquote>\n<p><strong><a href=\"https://github.com/leanprover-community/mathlib/commit/f95e8090d8a02dc89c451adfa8ca10df94a56bd8\">chore(algebra): displace zero_ne_one_class with nonzero and make no_z…</a></strong><br>\nchore(algebra): displace zero_ne_one_class with nonzero and make no_zero_divisors a Prop (<a href=\"https://github.com/leanprover-community/mathlib/issues/2847\">#2847</a>)</p>\n<ul>\n<li><code>[nonzero_semiring α]</code> becomes <code>[semiring α] [nonzero α]</code></li>\n<li><code>[nonzero_comm_semiring α]</code> becomes <code>[comm_semiring α] [nonzero α]</code></li>\n<li><code>[nonzero_comm_ring α]</code> becomes <code>[comm_ring α] [nonzero α]</code></li>\n<li><code>no_zero_divisors</code> is now a <code>Prop</code></li>\n<li><code>units.ne_zero</code> (originally for <code>domain</code>) merges into <code>units.coe_ne_zero</code> (originally for <code>nonzero_comm_semiring</code>)<br>\n<a href=\"https://github.com/leanprover-community/mathlib/commit/f95e8090d8a02dc89c451adfa8ca10df94a56bd8\">https://github.com/leanprover-community/mathlib/commit/f95e8090d8a02dc89c451adfa8ca10df94a56bd8</a></li>\n</ul>\n</blockquote>",
        "id": 199242620,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590821712
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span></p>",
        "id": 199243233,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590822740
    }
]