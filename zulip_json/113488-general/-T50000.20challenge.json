[
    {
        "content": "<p>I just tried compiling mathlib with the timeout flag set to T50000 and it doesn't compile -- there are some deterministic timeouts.</p>\n<p>Why do this? Well, when making the perfectoid project there were times when we were really battling against timeouts; for example check out </p>\n<p><a href=\"https://github.com/leanprover-community/lean-perfectoid-spaces/blob/c1fec0fe89a6bac395935c759b8387316df0e3a6/src/valuation/field.lean#L653\" target=\"_blank\" title=\"https://github.com/leanprover-community/lean-perfectoid-spaces/blob/c1fec0fe89a6bac395935c759b8387316df0e3a6/src/valuation/field.lean#L653\">https://github.com/leanprover-community/lean-perfectoid-spaces/blob/c1fec0fe89a6bac395935c759b8387316df0e3a6/src/valuation/field.lean#L653</a></p>\n<p>which should be a one line term mode proof but Lean would time out at -T100000 (the default time-out value) so we had to tread really carefully to make the proof compile. At the time I thought that we were pushing Lean to the edge -- but since Mario responded in the timeout thread and showed us some more tricks I realise now that actually we were simply not getting Lean to unify efficiently. <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I don't know whether a judicious <code>: _</code> fixes that proof, but definitely a judicious bunch of <code>let</code>s makes the proof compile instantly -- I've made this happen myself.</p>\n<p>Compiling mathlib with <code>-T50000</code> might show up some more instances where people have written code which takes several seconds to compile instead of several tenths of a second because of similar issues. The first issue I ran into is</p>\n<div class=\"codehilite\"><pre><span></span>mathlib-community-master/src/category_theory/equivalence.lean:124:33: error: (deterministic) timeout\nmathlib-community-master/src/category_theory/equivalence.lean:124:30: error: (deterministic) timeout\nmathlib-community-master/src/category_theory/equivalence.lean:124:30: error: (deterministic) timeout\nmathlib-community-master/src/category_theory/equivalence.lean:123:2: error: (deterministic) timeout\nmathlib-community-master/src/category_theory/equivalence.lean:122:23: error: (deterministic) timeout\n</pre></div>\n\n\n<p>with code</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">adjointify_Œ∑</span> <span class=\"o\">:</span> <span class=\"mi\">ùü≠</span> <span class=\"n\">C</span> <span class=\"err\">‚âÖ</span> <span class=\"n\">F</span> <span class=\"err\">‚ãô</span> <span class=\"n\">G</span> <span class=\"o\">:=</span>\n<span class=\"n\">Œ∑</span> <span class=\"err\">‚â™‚â´</span> <span class=\"n\">iso_whisker_left</span> <span class=\"n\">F</span> <span class=\"o\">((</span><span class=\"n\">left_unitor</span> <span class=\"n\">G</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"err\">‚â™‚â´</span>\n  <span class=\"n\">iso_whisker_right</span> <span class=\"n\">Œµ</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"err\">‚â™‚â´</span> <span class=\"n\">iso_whisker_right</span> <span class=\"n\">Œ∑</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"err\">‚ãô</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>Is there some way of making Lean unify this more quickly? </p>\n<p>NB the easiest way to play along at home is to open mathlib in VS Code, File -&gt; Preferences -&gt; Settings, search for Lean and find the timeout value and change it from 100000 to 50000, and then add and remove a character from equivalence.lean to make it recompile.</p>",
        "id": 165857644,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1558048657
    },
    {
        "content": "<p>Yeah, I can imagine that that definition is a stress test on Lean. So for functors the associator <code>(F ‚ãô G) ‚ãô H ‚âÖ F ‚ãô (G ‚ãô H</code> is true by reflexivity and the unitors <code>1 ‚ãô F ‚âÖ F</code> are true by reflexivity as long as <code>F</code> is of the form <code>‚ü®_, _, _, _‚ü©</code> (usually this is the case if <code>F</code> is anything other than a variable). In the category theory library we can use/abuse this, by not explicitly writing down these associators and unitors, but at the cost of making Lean do (a lot of) extra work. We maybe should decide that we want to avoid doing these rules silently. However, this would change the definitions of natural isomorphisms we are defining, which might make future proofs more finicky. See also the discussion below this comment:<br>\n<a href=\"https://github.com/leanprover-community/mathlib/pull/1018#discussion_r283978240\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/pull/1018#discussion_r283978240\">https://github.com/leanprover-community/mathlib/pull/1018#discussion_r283978240</a></p>\n<p>In this particular case I think there are two silent associators and one silent left unitor (and 1 non-silent one). We should probably include them explicitly. <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span></p>",
        "id": 165858601,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1558049527
    },
    {
        "content": "<p>I agree this is a problem, and perhaps it indicates we should go back to your original construction for <code>adjointify</code>, which explicitly provided the components, at the expense of needing to check naturality.</p>",
        "id": 165858733,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1558049684
    },
    {
        "content": "<p>Actually, what we really should do is both.</p>",
        "id": 165858738,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1558049690
    },
    {
        "content": "<p>Define <code>adjointify</code> so that it is obviously natural, but inserting unitors and associators so elaboration fast</p>",
        "id": 165858761,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1558049711
    },
    {
        "content": "<p>and then give a simp lemma that says the components are what you want them to be.</p>",
        "id": 165858770,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1558049726
    },
    {
        "content": "<p>Out of interest, when we compiled the perfectoid project at -T50000 there were problems in four places. Two were fixed with Mario's <code>: _</code> trick, one was a <code>use</code> which we changed to <code>existsi</code>, and one was <code>embedding f</code> which had a potential overload and was fixed by changing it to <code>_root_.embedding f</code>. In all four cases elaboration time dropped dramatically from \"takes several seconds to compile\" to \"compiles instantly\".</p>",
        "id": 165858864,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1558049800
    },
    {
        "content": "<p>But is this associator thing yet another kind of problem?</p>",
        "id": 165858894,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1558049822
    },
    {
        "content": "<blockquote>\n<p>Actually, what we really should do is both.</p>\n</blockquote>\n<p>I wanted to also suggest that. That is basically what I did in the Lean 2 HoTT library:<br>\n<a href=\"https://github.com/leanprover/lean2/blob/master/hott/algebra/category/functor/equivalence.hlean#L82-L102\" target=\"_blank\" title=\"https://github.com/leanprover/lean2/blob/master/hott/algebra/category/functor/equivalence.hlean#L82-L102\">https://github.com/leanprover/lean2/blob/master/hott/algebra/category/functor/equivalence.hlean#L82-L102</a><br>\nI defined the new <code>Œ∑</code> first on components, and to show naturality I showed that it was equal to the map of a natural transformation, defined fully explicit.</p>",
        "id": 165858943,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1558049869
    },
    {
        "content": "<p>What I feel I learnt from this experiment was that long elaboration times are not always inevitable -- sometimes persuading Lean to elaborate the same thing slightly differently can have a massively beneficial effect and perhaps even teach us something.</p>",
        "id": 165859067,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1558049988
    },
    {
        "content": "<blockquote>\n<p>But is this associator thing yet another kind of problem?</p>\n</blockquote>\n<p>Yes, but we're basically abusing the Lean type checker. We have an expression <code>(F ‚ãô ((G ‚ãô F) ‚ãô G)</code> which we need to match with <code>(F ‚ãô G) ‚ãô (F ‚ãô G)</code>. We should really rewrite one expression to the other (using natural isomorphisms), but we proof it \"by reflexivity\". This is true, but only if Lean unfolds all occurrences of <code>‚ãô</code> (and likely gets a huge term in the process).<br>\nIt's roughly similar to proving <code>1000 + 1000 = 2000</code> by <code>refl</code> instead of <code>norm_num</code>.</p>",
        "id": 165859297,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1558050213
    },
    {
        "content": "<p>Oh that's a very clear explanation Floris, thanks!</p>",
        "id": 165877926,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1558076641
    },
    {
        "content": "<p>The next one is this, from <code>src/data/complex/exponential.lean:456:0</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">cos_add</span> <span class=\"o\">:</span> <span class=\"n\">cos</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">cos</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">cos</span> <span class=\"n\">y</span> <span class=\"bp\">-</span> <span class=\"n\">sin</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">sin</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">‚Üê</span> <span class=\"n\">domain</span><span class=\"bp\">.</span><span class=\"n\">mul_left_inj</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">two_ne_zero&#39;</span> <span class=\"n\">‚ÑÇ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">),</span>\n      <span class=\"err\">‚Üê</span> <span class=\"n\">domain</span><span class=\"bp\">.</span><span class=\"n\">mul_left_inj</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">two_ne_zero&#39;</span> <span class=\"n\">‚ÑÇ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)],</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"n\">add_mul</span><span class=\"o\">,</span> <span class=\"n\">mul_sub</span><span class=\"o\">,</span> <span class=\"n\">sub_mul</span><span class=\"o\">,</span> <span class=\"n\">exp_add</span><span class=\"o\">,</span> <span class=\"n\">div_mul_div</span><span class=\"o\">,</span>\n    <span class=\"n\">div_add_div_same</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">div_div_eq_div_mul</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span>\n    <span class=\"n\">mul_div_cancel&#39;</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">two_ne_zero&#39;</span> <span class=\"n\">‚ÑÇ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">),</span> <span class=\"n\">sin</span><span class=\"o\">,</span> <span class=\"n\">cos</span><span class=\"o\">],</span>\n  <span class=\"n\">apply</span> <span class=\"n\">complex</span><span class=\"bp\">.</span><span class=\"n\">ext</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"n\">add_mul</span><span class=\"o\">,</span> <span class=\"n\">exp_add</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">ring</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>Times out at -T50000.</p>",
        "id": 165877990,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1558076704
    },
    {
        "content": "<p>This one is a bit perplexing. Consider the following proof of <code>sin_add</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">two_sin</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">sin</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">exp</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">exp</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">I</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"n\">I</span> <span class=\"o\">:=</span>\n<span class=\"n\">mul_div_cancel&#39;</span> <span class=\"bp\">_</span> <span class=\"n\">two_ne_zero&#39;</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">two_cos</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">cos</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">exp</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">exp</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">mul_div_cancel&#39;</span> <span class=\"bp\">_</span> <span class=\"n\">two_ne_zero&#39;</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">sin_add</span> <span class=\"o\">:</span> <span class=\"n\">sin</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">sin</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">cos</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">cos</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">sin</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">‚Üê</span> <span class=\"n\">domain</span><span class=\"bp\">.</span><span class=\"n\">mul_left_inj</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">two_ne_zero&#39;</span> <span class=\"n\">‚ÑÇ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">),</span> <span class=\"n\">two_sin</span><span class=\"o\">,</span>\n      <span class=\"n\">neg_add</span><span class=\"o\">,</span> <span class=\"n\">add_mul</span><span class=\"o\">,</span> <span class=\"n\">exp_add</span><span class=\"o\">,</span> <span class=\"n\">add_mul</span><span class=\"o\">,</span> <span class=\"n\">exp_add</span><span class=\"o\">,</span> <span class=\"n\">eq_comm</span><span class=\"o\">,</span>\n      <span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"err\">‚Üê</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">two_sin</span><span class=\"o\">,</span> <span class=\"n\">mul_left_comm</span><span class=\"o\">,</span> <span class=\"n\">two_sin</span><span class=\"o\">,</span>\n      <span class=\"err\">‚Üê</span> <span class=\"n\">domain</span><span class=\"bp\">.</span><span class=\"n\">mul_left_inj</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">two_ne_zero&#39;</span> <span class=\"n\">‚ÑÇ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">),</span> <span class=\"n\">mul_add</span><span class=\"o\">,</span>\n      <span class=\"n\">mul_left_comm</span><span class=\"o\">,</span> <span class=\"n\">two_cos</span><span class=\"o\">,</span> <span class=\"err\">‚Üê</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">two_cos</span><span class=\"o\">],</span> <span class=\"n\">ring</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>The <code>rw</code> part of the proof is instantaneous (less than 150ms if you replace <code>ring</code> by <code>sorry</code>). The <code>ring</code> tactic is also fast (a fraction of a second). The kernel is also quickly able to check the proof. Yet the <em>elaborator</em> spends a whopping 30s on... something... coming from the <code>ring</code>  tactic, despite the fact that <code>ring</code> produces fully elaborated proof terms.</p>",
        "id": 165881328,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558081078
    },
    {
        "content": "<p>Bizarrely, this takes a long time...</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">sin_add</span> <span class=\"o\">:</span> <span class=\"n\">sin</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">sin</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">cos</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">cos</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">sin</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">‚Üê</span> <span class=\"n\">domain</span><span class=\"bp\">.</span><span class=\"n\">mul_left_inj</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">two_ne_zero&#39;</span> <span class=\"n\">‚ÑÇ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">),</span> <span class=\"n\">two_sin</span><span class=\"o\">,</span>\n      <span class=\"n\">neg_add</span><span class=\"o\">,</span> <span class=\"n\">add_mul</span><span class=\"o\">,</span> <span class=\"n\">exp_add</span><span class=\"o\">,</span> <span class=\"n\">add_mul</span><span class=\"o\">,</span> <span class=\"n\">exp_add</span><span class=\"o\">,</span> <span class=\"n\">eq_comm</span><span class=\"o\">,</span>\n      <span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"err\">‚Üê</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">two_sin</span><span class=\"o\">,</span> <span class=\"n\">mul_left_comm</span><span class=\"o\">,</span> <span class=\"n\">two_sin</span><span class=\"o\">,</span>\n      <span class=\"err\">‚Üê</span> <span class=\"n\">domain</span><span class=\"bp\">.</span><span class=\"n\">mul_left_inj</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">two_ne_zero&#39;</span> <span class=\"n\">‚ÑÇ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">),</span> <span class=\"n\">mul_add</span><span class=\"o\">,</span>\n      <span class=\"n\">mul_left_comm</span><span class=\"o\">,</span> <span class=\"n\">two_cos</span><span class=\"o\">,</span> <span class=\"err\">‚Üê</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">two_cos</span><span class=\"o\">],</span>\n  <span class=\"n\">generalize</span><span class=\"o\">:</span> <span class=\"n\">exp</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">generalize</span><span class=\"o\">:</span> <span class=\"n\">exp</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"n\">generalize</span><span class=\"o\">:</span> <span class=\"n\">exp</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">generalize</span><span class=\"o\">:</span> <span class=\"n\">exp</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">d</span><span class=\"o\">,</span>\n  <span class=\"n\">ring</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>because <code>generalize</code> takes 6s</p>",
        "id": 165881647,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558081436
    },
    {
        "content": "<p>I'm glad that this slightly frivolous challenge is throwing up interesting questions!</p>",
        "id": 165882367,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1558082152
    },
    {
        "content": "<blockquote>\n<p>The <code>rw</code> part of the proof is instantaneous (less than 150ms if you replace <code>ring</code> by <code>sorry</code>). The <code>ring</code> tactic is also fast (a fraction of a second). The kernel is also quickly able to check the proof. Yet the <em>elaborator</em> spends a whopping 30s on... something... coming from the <code>ring</code>  tactic, despite the fact that <code>ring</code> produces fully elaborated proof terms.</p>\n</blockquote>\n<p>This is really strange. There's something going on in the <code>is_def_eq</code> call in <code>add_atom</code>. The profiler says <code>ring</code> is spending 6 seconds there. But each call is a fraction of a millisecond and there are only a couple dozen calls.</p>",
        "id": 165891888,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1558092773
    },
    {
        "content": "<p>I used this to profile:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">time_defeq</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"n\">e&#39;</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"n\">pe</span> <span class=\"err\">‚Üê</span> <span class=\"n\">pp</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n   <span class=\"n\">pe&#39;</span> <span class=\"err\">‚Üê</span> <span class=\"n\">pp</span> <span class=\"n\">e&#39;</span><span class=\"o\">,</span>\n   <span class=\"n\">timeit</span> <span class=\"o\">(</span><span class=\"s2\">&quot;defeq</span><span class=\"se\">\\n</span><span class=\"s2\">&quot;</span> <span class=\"bp\">++</span> <span class=\"n\">to_string</span> <span class=\"n\">pe</span> <span class=\"bp\">++</span> <span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">&quot;</span> <span class=\"bp\">++</span> <span class=\"n\">to_string</span> <span class=\"n\">pe&#39;</span><span class=\"bp\">++</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">&quot;</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">sleep</span> <span class=\"mi\">1</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">is_def_eq</span> <span class=\"n\">e</span> <span class=\"n\">e&#39;</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p><code>ring</code> spends 6500 ms in <code>time_defeq</code>, 18 in <code>pp</code>, and 1 in <code>timeit</code>.</p>",
        "id": 165891918,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1558092837
    },
    {
        "content": "<p>Hmm, but this profiling is wrong, increasing the sleep time doesn't change the profile time of <code>timeit</code>?</p>",
        "id": 165892003,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1558092918
    },
    {
        "content": "<p>ah, <code>timeit</code> doesn't time tactics</p>",
        "id": 165892285,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1558093239
    },
    {
        "content": "<p>I think you're timing how long it takes to build the monad or something</p>",
        "id": 165892289,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1558093255
    },
    {
        "content": "<p>(I think)</p>",
        "id": 165892293,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1558093259
    },
    {
        "content": "<p>Isn't there a tactic version</p>",
        "id": 165892303,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1558093266
    },
    {
        "content": "<p>You're right, it's <code>timetac</code>, not <code>timeit</code>. Getting my timers mixed up.</p>",
        "id": 165892318,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1558093313
    },
    {
        "content": "<p>Would it be safe to set <code>complex.exp</code> to be irreducible at the end of <code>complex/exponential.lean</code>?</p>",
        "id": 165892467,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1558093460
    },
    {
        "content": "<p>This is the culprit. <code>is_def_eq</code> is unfolding that and getting lost.</p>",
        "id": 165892478,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1558093481
    },
    {
        "content": "<p>yeah, that makes sense</p>",
        "id": 165892483,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558093491
    },
    {
        "content": "<p>We should probably back off on <code>is_def_eq</code> as well though</p>",
        "id": 165892502,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558093508
    },
    {
        "content": "<p>use some reducibility setting</p>",
        "id": 165892518,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558093520
    },
    {
        "content": "<p>I'm not sure if syntactic eq is enough there, it might be. But I guess a weaker <code>is_def_eq</code> probably is.</p>",
        "id": 165892721,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1558093704
    },
    {
        "content": "<p>it is enough for this goal, but of course not for some goals</p>",
        "id": 165893518,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558094261
    },
    {
        "content": "<p>Hmm, no, this goes back to the discussion we had a few months ago about <code>ring</code> and <code>linarith</code> handling defeq atoms. Weakening that check means <code>linarith</code> fails to prove <code>id x ‚â• x</code>.</p>",
        "id": 165893527,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1558094266
    },
    {
        "content": "<p>but I definitely want to avoid a cost for unfolding defeq when it's not even necessary. <code>assumption</code> has the same problem</p>",
        "id": 165893618,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558094303
    },
    {
        "content": "<p>it's triggering because it wants to find out if <code>exp x =?= exp (-x)</code> and other variations</p>",
        "id": 165893703,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558094357
    },
    {
        "content": "<p>Instead of using <code>is_def_eq</code> less, maybe we should be marking more things <code>irreducible</code>.</p>",
        "id": 165893838,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1558094416
    },
    {
        "content": "<p>This is what reducibility settings are for</p>",
        "id": 165893863,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558094431
    },
    {
        "content": "<p>like how <code>rw</code> tries <code>refl</code> but not really hard in case it's not true</p>",
        "id": 165893881,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558094447
    },
    {
        "content": "<p>I guess that's not enough to get <code>id x &gt;= x</code> though</p>",
        "id": 165894094,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558094571
    },
    {
        "content": "<p>because <code>id</code> is semireducible</p>",
        "id": 165894116,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558094585
    },
    {
        "content": "<p>how about giving <code>linarith</code> and <code>ring</code> a reducibility config option? I think the default should be unfold reducible</p>",
        "id": 165894254,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558094665
    },
    {
        "content": "<p>Exactly. Same thing in the example here: <a href=\"#narrow/stream/144837-PR-reviews/topic/.23878.20.20remove.20dependencies\" title=\"#narrow/stream/144837-PR-reviews/topic/.23878.20.20remove.20dependencies\">https://leanprover.zulipchat.com/#narrow/stream/144837-PR-reviews/topic/.23878.20.20remove.20dependencies</a> . Matching up to defeq lets <code>ring</code> and <code>linarith</code> unify two different coercions, which is sensible to do. But I'm pretty sure those coercions are semireducible.</p>",
        "id": 165894366,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1558094740
    },
    {
        "content": "<p>That would work.</p>",
        "id": 165894376,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1558094758
    },
    {
        "content": "<p>Linarith already has a bunch of config options. I worry this one would be pretty obscure.</p>",
        "id": 165894432,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1558094778
    },
    {
        "content": "<p>On the other hand, they were both using syntactic eq for a while with no issues. It wouldn't be a big loss to go half a step back and add a config option.</p>",
        "id": 165894462,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1558094828
    },
    {
        "content": "<p>Regardless, I think we should also be a bit more aggressive about marking things irreducible.</p>",
        "id": 165894625,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1558094928
    },
    {
        "content": "<p>So this one has actually now been fixed by the latest PR! Nice!</p>\n<p>The next one is I think one of <span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> 's:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"n\">stone_cech</span><span class=\"bp\">.</span><span class=\"n\">t2_space</span> <span class=\"o\">:</span> <span class=\"n\">t2_space</span> <span class=\"o\">(</span><span class=\"n\">stone_cech</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">t2_iff_ultrafilter</span><span class=\"o\">,</span>\n  <span class=\"n\">rintros</span> <span class=\"n\">g</span> <span class=\"bp\">‚ü®</span><span class=\"n\">x</span><span class=\"bp\">‚ü©</span> <span class=\"bp\">‚ü®</span><span class=\"n\">y</span><span class=\"bp\">‚ü©</span> <span class=\"n\">u</span> <span class=\"n\">gx</span> <span class=\"n\">gy</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">sound</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">Œ≥</span> <span class=\"n\">tŒ≥</span> <span class=\"n\">h‚ÇÅ</span> <span class=\"n\">h‚ÇÇ</span> <span class=\"n\">f</span> <span class=\"n\">hf</span><span class=\"o\">,</span>\n  <span class=\"n\">resetI</span><span class=\"o\">,</span>\n  <span class=\"n\">change</span> <span class=\"n\">stone_cech_extend</span> <span class=\"n\">hf</span> <span class=\"err\">‚ü¶</span><span class=\"n\">x</span><span class=\"err\">‚üß</span> <span class=\"bp\">=</span> <span class=\"n\">stone_cech_extend</span> <span class=\"n\">hf</span> <span class=\"err\">‚ü¶</span><span class=\"n\">y</span><span class=\"err\">‚üß</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"n\">tendsto_nhds_unique</span> <span class=\"n\">u</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">stone_cech_extend</span> <span class=\"n\">hf</span> <span class=\"o\">},</span>\n  <span class=\"n\">all_goals</span>\n  <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"n\">le_trans</span> <span class=\"o\">(</span><span class=\"n\">map_mono</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"n\">continuous_stone_cech_extend</span> <span class=\"n\">hf</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">tendsto</span> <span class=\"bp\">_</span><span class=\"o\">),</span>\n    <span class=\"n\">assumption</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>Times out at -T50000. It's in <code>src/topology/stone_cech.lean</code>, <a href=\"https://github.com/leanprover-community/mathlib/blob/f633c948ff523b9a47b3b41bc1dc0b1b4b2be5c4/src/topology/stone_cech.lean#L253\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/f633c948ff523b9a47b3b41bc1dc0b1b4b2be5c4/src/topology/stone_cech.lean#L253\">line 253</a>.</p>",
        "id": 165911267,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1558107976
    },
    {
        "content": "<p>I think Patrick sent me a faster version of this proof at some point, let me check whether it got merged...</p>",
        "id": 165911320,
        "sender_full_name": "Reid Barton",
        "timestamp": 1558108032
    },
    {
        "content": "<p>Indeed this is still the old version</p>",
        "id": 165911620,
        "sender_full_name": "Reid Barton",
        "timestamp": 1558108219
    },
    {
        "content": "<p>Did Patrick figure out why it was slow?</p>",
        "id": 165911914,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1558108398
    },
    {
        "content": "<p>I think it's kind of important that we understand the various reasons that code ends up running slowly, because if we're not careful then slow code can turn into code which doesn't compile.</p>",
        "id": 165912091,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1558108508
    },
    {
        "content": "<p>I don't know.</p>",
        "id": 165912131,
        "sender_full_name": "Reid Barton",
        "timestamp": 1558108539
    },
    {
        "content": "<p>The problem is solving the very last goal <code>g ‚â§ nhds ‚ü¶y‚üß</code>, the second branch of the <code>all_goals</code>. It succeeds with the assumption <code>gy : g ‚â§ nhds (quot.mk setoid.r y)</code> but first it tries <code>gx : g ‚â§ nhds (quot.mk setoid.r x)</code> and takes ages to fail.</p>",
        "id": 165912285,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1558108654
    },
    {
        "content": "<p>Did we not have a variant of <code>assumption</code> that takes a reducibility setting?</p>",
        "id": 165912459,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1558108785
    },
    {
        "content": "<p>Oh, this is a little more subtle, the goal and <code>gy</code> don't unify with only reducible.</p>",
        "id": 165912854,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1558109056
    },
    {
        "content": "<p>The other issue is when when I'm writing code, if something turned out super-slow then it makes it very painful to continue writing after that point. One thing I've learnt from this exercise is that sometimes if you understand what's going on then you can actually fix things up and the code compiles quickly and the pain goes away.</p>",
        "id": 165912926,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1558109107
    },
    {
        "content": "<p>The easy patch is</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"n\">stone_cech</span><span class=\"bp\">.</span><span class=\"n\">t2_space</span> <span class=\"o\">:</span> <span class=\"n\">t2_space</span> <span class=\"o\">(</span><span class=\"n\">stone_cech</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">t2_iff_ultrafilter</span><span class=\"o\">,</span>\n  <span class=\"n\">rintros</span> <span class=\"n\">g</span> <span class=\"bp\">‚ü®</span><span class=\"n\">x</span><span class=\"bp\">‚ü©</span> <span class=\"bp\">‚ü®</span><span class=\"n\">y</span><span class=\"bp\">‚ü©</span> <span class=\"n\">u</span> <span class=\"n\">gx</span> <span class=\"n\">gy</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">sound</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">Œ≥</span> <span class=\"n\">tŒ≥</span> <span class=\"n\">h‚ÇÅ</span> <span class=\"n\">h‚ÇÇ</span> <span class=\"n\">f</span> <span class=\"n\">hf</span><span class=\"o\">,</span>\n  <span class=\"n\">resetI</span><span class=\"o\">,</span>\n  <span class=\"n\">change</span> <span class=\"n\">stone_cech_extend</span> <span class=\"n\">hf</span> <span class=\"err\">‚ü¶</span><span class=\"n\">x</span><span class=\"err\">‚üß</span> <span class=\"bp\">=</span> <span class=\"n\">stone_cech_extend</span> <span class=\"n\">hf</span> <span class=\"err\">‚ü¶</span><span class=\"n\">y</span><span class=\"err\">‚üß</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"n\">tendsto_nhds_unique</span> <span class=\"n\">u</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">stone_cech_extend</span> <span class=\"n\">hf</span> <span class=\"o\">},</span>\n  <span class=\"n\">all_goals</span>\n  <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"n\">le_trans</span> <span class=\"o\">(</span><span class=\"n\">map_mono</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"n\">continuous_stone_cech_extend</span> <span class=\"n\">hf</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">tendsto</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">gx</span> <span class=\"o\">},</span> <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">gy</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 165913036,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1558109167
    },
    {
        "content": "<p>I'm not sure what can be made irreducible to speed up the failure to unify <code>gx</code>.</p>",
        "id": 165913064,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1558109205
    },
    {
        "content": "<p><code>attribute [irreducible] nhds</code> works but I suspect that will break things.</p>",
        "id": 165913184,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1558109307
    },
    {
        "content": "<p>I made a PR with Patrick's proof: <a href=\"https://github.com/leanprover-community/mathlib/pull/1042\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/pull/1042\">https://github.com/leanprover-community/mathlib/pull/1042</a></p>",
        "id": 165914221,
        "sender_full_name": "Reid Barton",
        "timestamp": 1558110125
    },
    {
        "content": "<p>It looks like making <code>nhds</code> irreducible at the end of <code>topology/order.lean</code> is safe, and this salvages the original proof.</p>",
        "id": 165914996,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1558110790
    },
    {
        "content": "<p>Meaning, the original proof is basically instant.</p>",
        "id": 165915012,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1558110807
    },
    {
        "content": "<p>This is probably a good abstraction barrier too. I assumed it was broken more, but it seems like not.</p>",
        "id": 165915081,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1558110850
    },
    {
        "content": "<p>Is Patrick's change preferable to the old one if the old one is equally fast?</p>",
        "id": 165915111,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1558110899
    },
    {
        "content": "<p>The next one is in <code>data/polynomial.lean</code> and it's <code>card_nth_roots</code>.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">card_nth_roots</span> <span class=\"o\">{</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">integral_domain</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">‚Ñï</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">nth_roots</span> <span class=\"n\">n</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"bp\">‚â§</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">letI</span> <span class=\"o\">:=</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">prop_decidable</span><span class=\"bp\">;</span> <span class=\"n\">exact</span>\n<span class=\"k\">if</span> <span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n<span class=\"k\">then</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"err\">^</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">C</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n  <span class=\"k\">then</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">zero_le</span><span class=\"o\">,</span> <span class=\"n\">nth_roots</span><span class=\"o\">,</span> <span class=\"n\">roots</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">dif_pos</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">card_empty</span><span class=\"o\">]</span>\n  <span class=\"k\">else</span> <span class=\"n\">with_bot</span><span class=\"bp\">.</span><span class=\"n\">coe_le_coe</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">le_trans</span> <span class=\"o\">(</span><span class=\"n\">card_roots</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hn</span><span class=\"o\">,</span> <span class=\"n\">pow_zero</span><span class=\"o\">,</span> <span class=\"err\">‚Üê</span> <span class=\"bp\">@</span><span class=\"n\">C_1</span> <span class=\"n\">Œ±</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"err\">‚Üê</span> <span class=\"n\">is_ring_hom</span><span class=\"bp\">.</span><span class=\"n\">map_sub</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">C</span> <span class=\"n\">Œ±</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)]</span><span class=\"bp\">;</span>\n      <span class=\"n\">exact</span> <span class=\"n\">degree_C_le</span><span class=\"o\">))</span>\n<span class=\"k\">else</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">‚Üê</span> <span class=\"n\">with_bot</span><span class=\"bp\">.</span><span class=\"n\">coe_le_coe</span><span class=\"o\">,</span> <span class=\"err\">‚Üê</span> <span class=\"n\">degree_X_pow_sub_C</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">pos_of_ne_zero</span> <span class=\"n\">hn</span><span class=\"o\">)</span> <span class=\"n\">a</span><span class=\"o\">]</span><span class=\"bp\">;</span>\n  <span class=\"n\">exact</span> <span class=\"n\">card_roots</span> <span class=\"o\">(</span><span class=\"n\">X_pow_sub_C_ne_zero</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">pos_of_ne_zero</span> <span class=\"n\">hn</span><span class=\"o\">)</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>It's a whopping <a href=\"https://github.com/leanprover-community/mathlib/blob/0b350228544244f2861ec8afc84dad0c27113a73/src/data/polynomial.lean#L1770\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/0b350228544244f2861ec8afc84dad0c27113a73/src/data/polynomial.lean#L1770\">1770 lines in</a>, and given the amount that Kenny complained about timings for polynomials it's a miracle that Chris managed to make it so long without going insane ;-) Is there an official or unofficial max length for mathlib files? For some reason I thought we were unkeen on going over 1000 lines.</p>",
        "id": 165919009,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1558113770
    },
    {
        "content": "<p>ha ha this lemma is true because the zero polynomial is defined to have no roots :D</p>",
        "id": 165919229,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1558113916
    },
    {
        "content": "<p>How do people actually debug these things? I throw them out and then Rob or Mario says something like \"eew this specific thing is happening\". I have no idea how to check what is going on at all, other than just setting -T50000 on VS Code and then randomly inserting lines of the form <code>sorry end #exit</code> until I find the problematic line, and even that tells me much less than the things the CS people come up with within minutes.</p>",
        "id": 165919436,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1558114069
    },
    {
        "content": "<p>I mean, that's basically it. Sometimes certain lines look suspicious and you start looking there. <code>assumption</code> and <code>convert</code> are likely candidates for this particular kind of problem.</p>",
        "id": 165919924,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1558114383
    },
    {
        "content": "<p><code>set_option profiler true</code> can show if a particular tactic is misbehaving.</p>",
        "id": 165919948,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1558114404
    },
    {
        "content": "<p>Aah I'd forgotten about the profiler.</p>\n<p>I am very familiar with some <code>set_option</code> things -- the ones I use relatively regularly like <code>pp.all true</code> or implict or proofs or the one that turns on simp lemmas, but the ones I've only used a couple of times I forget about; there should be a list of options ordered by usefulness rather than alphabetically ;-)</p>",
        "id": 165920078,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1558114499
    },
    {
        "content": "<p>Well, the #exit strategy seems to indicate that it's the <code>    rw [hn, pow_zero, ‚Üê @C_1 Œ± _ _, ‚Üê is_ring_hom.map_sub (@C Œ± _ _)]</code> line</p>",
        "id": 165920559,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1558114893
    },
    {
        "content": "<p>Yep, and in particular, the <code>map_sub</code>.</p>",
        "id": 165920627,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1558114937
    },
    {
        "content": "<p>And the profiler informs us</p>\n<div class=\"codehilite\"><pre><span></span>polynomial.lean:1771:6: information\nparsing took 27.7ms\npolynomial.lean:1771:6: information\ntype checking of card_nth_roots took 0.0746ms\npolynomial.lean:1771:6: information\ndecl post-processing of card_nth_roots took 0.00477ms\n</pre></div>\n\n\n<p>and then there's a very long pause and it adds</p>\n<div class=\"codehilite\"><pre><span></span>polynomial.lean:1771:6: information\nelaboration of card_nth_roots took 12.8s\n</pre></div>",
        "id": 165921035,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1558115240
    },
    {
        "content": "<p>(and that's with <code>sorry end)) else sorry #exit</code> just after the rewrite)</p>",
        "id": 165921055,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1558115258
    },
    {
        "content": "<p>I think this is another reason in favour of bundled homs.</p>",
        "id": 165921079,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1558115273
    },
    {
        "content": "<p>In the same direction, I would be happy to make <code>continuous</code> irreducible (as it is a Pi type, it is complicated to unify).</p>",
        "id": 165921114,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1558115282
    },
    {
        "content": "<p>I keep convincing myself this has already happened</p>",
        "id": 165921147,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558115301
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>11363ms   100.0%   _private.3200700535.rw_goal._lambda_4\n11354ms    99.9%   tactic.to_expr\n11354ms    99.9%   tactic.interactive.to_expr&#39;\n    9ms     0.1%   tactic.rewrite_target\n    8ms     0.1%   tactic.rewrite_core\n    8ms     0.1%   tactic.rewrite\n    1ms     0.0%   tactic.assert\n</pre></div>\n\n\n<p>if this helps</p>",
        "id": 165921185,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1558115334
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> Due to a bug in lean, marking <code>continuous</code> as irreducible won't fix the issue with <code>apply</code></p>",
        "id": 165921208,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558115355
    },
    {
        "content": "<p>Even in Lean 3.5c? :)</p>",
        "id": 165921391,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1558115480
    },
    {
        "content": "<p>I haven't looked into it in detail, but I think it should not be hard to fix</p>",
        "id": 165921424,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558115505
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>is_ring_hom.map_sub : ‚àÄ {Œ± Œ≤ : Type u_1} [_inst_1 : ring Œ±] [_inst_2 : ring Œ≤] (f : Œ± ‚Üí Œ≤) [_inst_3 : is_ring_hom f] {x y : Œ±}, f (x - y) = f x - f y\n</pre></div>\n\n\n<p>Chris is saying that <code>is_ring_hom</code> should be bundled?</p>",
        "id": 165921562,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1558115588
    },
    {
        "content": "<p>Is that one of those PR's where you break 20 files and then fix them all and then PR it and pray that it gets accepted quickly?</p>",
        "id": 165921687,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1558115655
    },
    {
        "content": "<p>It should do some nice damage to the perfectoid project too ;-)</p>",
        "id": 165921706,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1558115672
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>class is_linear_map (Œ± : Type u) {Œ≤ : Type v} {Œ≥ : Type w}\n  [ring Œ±] [add_comm_group Œ≤] [add_comm_group Œ≥] [module Œ± Œ≤] [module Œ± Œ≥]\n  (f : Œ≤ ‚Üí Œ≥) : Prop :=\n(add  : ‚àÄx y, f (x + y) = f x + f y)\n(smul : ‚àÄ(c : Œ±) x, f (c ‚Ä¢ x) = c ‚Ä¢ f x)\n</pre></div>\n\n\n<p>That doesn't look bundled to me. What is a bundled example of a property of maps?</p>",
        "id": 165924231,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1558117458
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> There is also <code>linear_map</code></p>",
        "id": 165924318,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1558117506
    },
    {
        "content": "<p><code>is_linear_map</code> is kind of deprecated</p>",
        "id": 165924346,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1558117527
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">structure</span> <span class=\"n\">linear_map</span> <span class=\"o\">(</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Œ≤</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Œ≥</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">Œ≤</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">Œ≥</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">Œ±</span> <span class=\"n\">Œ≤</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">Œ±</span> <span class=\"n\">Œ≥</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">to_fun</span> <span class=\"o\">:</span> <span class=\"n\">Œ≤</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Œ≥</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">add</span>  <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">to_fun</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">to_fun</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">to_fun</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">smul</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span><span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">to_fun</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"err\">‚Ä¢</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"err\">‚Ä¢</span> <span class=\"n\">to_fun</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>Aah yes -- immediately afterwards, in fact! So we have both? Will one be removed one day? Or are they both useful?</p>",
        "id": 165924387,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1558117552
    },
    {
        "content": "<blockquote>\n<p><code>is_linear_map</code> is kind of deprecated</p>\n</blockquote>\n<p>I see.</p>",
        "id": 165924446,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1558117565
    },
    {
        "content": "<p>Well there are 499 instances of <code>is_ring_hom</code> in mathlib...</p>",
        "id": 165924679,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1558117719
    },
    {
        "content": "<p>Do you think we can fix this with a regular expression?</p>",
        "id": 165924742,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1558117756
    },
    {
        "content": "<p>There were more issues. I think Chris spent some time looking into this</p>",
        "id": 165924866,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1558117831
    },
    {
        "content": "<p>More seriously, is it the sort of thing that can be done half-heartedly? Someone makes <code>ring_hom</code>, and then every now and then when someone is bored they change a few problematic <code>is_ring_hom</code>s to <code>ring_hom</code>s? Or doesn't life work like that?</p>",
        "id": 165924873,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1558117833
    },
    {
        "content": "<p>I guess more generally, is it now believed by the community that <code>is_ring_hom</code> should be deprecated and replaced by a bundled <code>ring_hom</code>, and the only reason it hasn't been done is that it is a non-trivial thing to do which will involve changing 47 files? If so, is there a roadmap for getting it done? Can one start by just adding the definition and trying to change one file? Or does this then involve changing the 5 files it depends on, and then this breaks all the remaining 40-odd files?</p>",
        "id": 165925891,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1558118583
    },
    {
        "content": "<p>Does it have to be done quickly? If there is a <code>ring_hom</code> branch then is it the case that if it's left for a week then it inevitably has merge conflicts?</p>",
        "id": 165926033,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1558118685
    },
    {
        "content": "<p>Or actually is the jury still out on whether it should be done at all?</p>",
        "id": 165926047,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1558118700
    },
    {
        "content": "<p>Sorry to ask such basic questions; I have 0 experience maintaining large projects.</p>",
        "id": 165926097,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1558118752
    },
    {
        "content": "<p>See also <a href=\"https://github.com/leanprover-community/mathlib/issues/717\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/717\">#717</a></p>",
        "id": 165926180,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1558118810
    },
    {
        "content": "<p>Oh so field and and ring and group homs all go hand in hand. I'm sorry, I never look at the PRs for mathlib, I only ever scan the ones that get merged.</p>",
        "id": 165926374,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1558118945
    },
    {
        "content": "<p>Thanks for the link!</p>",
        "id": 165926382,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1558118955
    },
    {
        "content": "<p>I can now see Kenny's logic -- do field homs first, because that will be the smallest number of changes.</p>",
        "id": 165926492,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1558119033
    },
    {
        "content": "<p>and monoid homs and add_monoid homs and add_group homs and mul_homs and add_homs and .....</p>",
        "id": 165926532,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1558119074
    },
    {
        "content": "<p>We need <a href=\"https://www.xkcd.com/208/\" target=\"_blank\" title=\"https://www.xkcd.com/208/\">https://www.xkcd.com/208/</a></p>",
        "id": 165926631,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1558119127
    },
    {
        "content": "<p>OK I opened an issue for this one: <a href=\"https://github.com/leanprover-community/mathlib/issues/1044\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/1044\">#1044</a> . That way hopefully I can understand better what is going on here.</p>",
        "id": 165929272,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1558121043
    },
    {
        "content": "<p>OK, next one is one of the jewels in the crown of mathlib -- <code>prod_filter_range_p_mul_q_div_two_eq_prod_product</code>.</p>",
        "id": 165930262,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1558121902
    },
    {
        "content": "<p>It's pretty long: </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">prod_filter_range_p_mul_q_div_two_eq_prod_product</span> <span class=\"o\">:</span>\n  <span class=\"o\">((</span><span class=\"n\">range</span> <span class=\"o\">((</span><span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">filter</span> <span class=\"o\">(</span><span class=\"n\">coprime</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">q</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"n\">prod</span>\n    <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">zmodp</span> <span class=\"n\">q</span> <span class=\"n\">hq</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">‚â§</span> <span class=\"n\">q</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"k\">then</span> <span class=\"o\">((</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">zmodp</span> <span class=\"n\">p</span> <span class=\"n\">hp</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">zmodp</span> <span class=\"n\">q</span> <span class=\"n\">hq</span><span class=\"o\">))</span>\n      <span class=\"k\">else</span> <span class=\"bp\">-</span><span class=\"o\">((</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">zmodp</span> <span class=\"n\">p</span> <span class=\"n\">hp</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">zmodp</span> <span class=\"n\">q</span> <span class=\"n\">hq</span><span class=\"o\">)))</span> <span class=\"bp\">=</span>\n  <span class=\"o\">(((</span><span class=\"n\">range</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">erase</span> <span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">product</span> <span class=\"o\">((</span><span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">erase</span> <span class=\"mi\">0</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">prod</span>\n    <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">((</span><span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">zmodp</span> <span class=\"n\">p</span> <span class=\"n\">hp</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">zmodp</span> <span class=\"n\">q</span> <span class=\"n\">hq</span><span class=\"o\">)))</span> <span class=\"o\">:=</span>\n<span class=\"k\">have</span> <span class=\"n\">hpqpnat</span> <span class=\"o\">:</span> <span class=\"o\">(((</span><span class=\"bp\">‚ü®</span><span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"n\">mul_pos</span> <span class=\"n\">hp</span><span class=\"bp\">.</span><span class=\"n\">pos</span> <span class=\"n\">hq</span><span class=\"bp\">.</span><span class=\"n\">pos</span><span class=\"bp\">‚ü©</span> <span class=\"o\">:</span> <span class=\"bp\">‚Ñï+</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">‚Ñï</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">‚Ñ§</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"bp\">‚Ñ§</span><span class=\"o\">),</span> <span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">hpqpnat&#39;</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"bp\">‚ü®</span><span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"n\">mul_pos</span> <span class=\"n\">hp</span><span class=\"bp\">.</span><span class=\"n\">pos</span> <span class=\"n\">hq</span><span class=\"bp\">.</span><span class=\"n\">pos</span><span class=\"bp\">‚ü©</span> <span class=\"o\">:</span> <span class=\"bp\">‚Ñï+</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">‚Ñï</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">hpq1</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"bp\">‚ü®</span><span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"n\">mul_pos</span> <span class=\"n\">hp</span><span class=\"bp\">.</span><span class=\"n\">pos</span> <span class=\"n\">hq</span><span class=\"bp\">.</span><span class=\"n\">pos</span><span class=\"bp\">‚ü©</span> <span class=\"o\">:</span> <span class=\"bp\">‚Ñï+</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">‚Ñï</span><span class=\"o\">)</span> <span class=\"err\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"k\">from</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">odd_mul_odd</span> <span class=\"n\">hp1</span> <span class=\"n\">hq1</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">hpq1&#39;</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">q</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">one_lt_mul</span> <span class=\"n\">hp</span><span class=\"bp\">.</span><span class=\"n\">pos</span> <span class=\"n\">hq</span><span class=\"bp\">.</span><span class=\"n\">gt_one</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">hhq0</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">‚Ñï</span><span class=\"o\">,</span> <span class=\"n\">coprime</span> <span class=\"n\">q</span> <span class=\"n\">a</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">a</span> <span class=\"bp\">‚â†</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"k\">from</span> <span class=\"bp\">Œª</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">imp_not_comm</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"err\">$</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hq</span><span class=\"bp\">.</span><span class=\"n\">coprime_iff_not_dvd</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">contextual</span> <span class=\"o\">:=</span> <span class=\"n\">tt</span><span class=\"o\">},</span>\n<span class=\"k\">have</span> <span class=\"n\">hpq0</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">q</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">div_pos</span> <span class=\"o\">(</span><span class=\"n\">succ_le_of_lt</span> <span class=\"err\">$</span> <span class=\"n\">one_lt_mul</span> <span class=\"n\">hp</span><span class=\"bp\">.</span><span class=\"n\">pos</span> <span class=\"n\">hq</span><span class=\"bp\">.</span><span class=\"n\">gt_one</span><span class=\"o\">)</span> <span class=\"n\">dec_trivial</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">hinj</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">a‚ÇÅ</span> <span class=\"n\">a‚ÇÇ</span> <span class=\"o\">:</span> <span class=\"bp\">‚Ñï</span><span class=\"o\">,</span>\n    <span class=\"n\">a‚ÇÅ</span> <span class=\"err\">‚àà</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">q</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">filter</span> <span class=\"o\">(</span><span class=\"n\">coprime</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">q</span><span class=\"o\">))</span> <span class=\"bp\">‚Üí</span>\n    <span class=\"n\">a‚ÇÇ</span> <span class=\"err\">‚àà</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">q</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">filter</span> <span class=\"o\">(</span><span class=\"n\">coprime</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">q</span><span class=\"o\">))</span> <span class=\"bp\">‚Üí</span>\n    <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">a‚ÇÅ</span> <span class=\"o\">:</span> <span class=\"n\">zmodp</span> <span class=\"n\">q</span> <span class=\"n\">hq</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">‚â§</span> <span class=\"n\">q</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"k\">then</span> <span class=\"o\">((</span><span class=\"n\">a‚ÇÅ</span> <span class=\"o\">:</span> <span class=\"n\">zmodp</span> <span class=\"n\">p</span> <span class=\"n\">hp</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">a‚ÇÅ</span> <span class=\"o\">:</span> <span class=\"n\">zmodp</span> <span class=\"n\">q</span> <span class=\"n\">hq</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n      <span class=\"k\">else</span> <span class=\"o\">((</span><span class=\"bp\">-</span><span class=\"n\">a‚ÇÅ</span> <span class=\"o\">:</span> <span class=\"n\">zmodp</span> <span class=\"n\">p</span> <span class=\"n\">hp</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">a‚ÇÅ</span> <span class=\"o\">:</span> <span class=\"n\">zmodp</span> <span class=\"n\">q</span> <span class=\"n\">hq</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">=</span>\n    <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">a‚ÇÇ</span> <span class=\"o\">:</span> <span class=\"n\">zmodp</span> <span class=\"n\">q</span> <span class=\"n\">hq</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">‚â§</span> <span class=\"n\">q</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"k\">then</span> <span class=\"o\">((</span><span class=\"n\">a‚ÇÇ</span> <span class=\"o\">:</span> <span class=\"n\">zmodp</span> <span class=\"n\">p</span> <span class=\"n\">hp</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">a‚ÇÇ</span> <span class=\"o\">:</span> <span class=\"n\">zmodp</span> <span class=\"n\">q</span> <span class=\"n\">hq</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n      <span class=\"k\">else</span> <span class=\"o\">((</span><span class=\"bp\">-</span><span class=\"n\">a‚ÇÇ</span> <span class=\"o\">:</span> <span class=\"n\">zmodp</span> <span class=\"n\">p</span> <span class=\"n\">hp</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">a‚ÇÇ</span> <span class=\"o\">:</span> <span class=\"n\">zmodp</span> <span class=\"n\">q</span> <span class=\"n\">hq</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">a‚ÇÅ</span> <span class=\"bp\">=</span> <span class=\"n\">a‚ÇÇ</span><span class=\"o\">,</span>\n  <span class=\"k\">from</span> <span class=\"bp\">Œª</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">ha</span> <span class=\"n\">hb</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">ha&#39;</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">‚â§</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">‚àß</span> <span class=\"n\">coprime</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n      <span class=\"k\">by</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">lt_succ_iff</span><span class=\"o\">]</span> <span class=\"kn\">using</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">hapq&#39;</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"o\">((</span><span class=\"bp\">‚ü®</span><span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"n\">mul_pos</span> <span class=\"n\">hp</span><span class=\"bp\">.</span><span class=\"n\">pos</span> <span class=\"n\">hq</span><span class=\"bp\">.</span><span class=\"n\">pos</span><span class=\"bp\">‚ü©</span> <span class=\"o\">:</span> <span class=\"bp\">‚Ñï+</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">‚Ñï</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n      <span class=\"n\">lt_of_le_of_lt</span> <span class=\"n\">ha&#39;</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">div_lt_self</span> <span class=\"o\">(</span><span class=\"n\">mul_pos</span> <span class=\"n\">hp</span><span class=\"bp\">.</span><span class=\"n\">pos</span> <span class=\"n\">hq</span><span class=\"bp\">.</span><span class=\"n\">pos</span><span class=\"o\">)</span> <span class=\"n\">dec_trivial</span><span class=\"o\">),</span>\n    <span class=\"k\">have</span> <span class=\"n\">hb&#39;</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">‚â§</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">‚àß</span> <span class=\"n\">coprime</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n      <span class=\"k\">by</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">lt_succ_iff</span><span class=\"o\">,</span> <span class=\"n\">coprime_mul_iff_left</span><span class=\"o\">]</span> <span class=\"kn\">using</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">hbpq&#39;</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"o\">((</span><span class=\"bp\">‚ü®</span><span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"n\">mul_pos</span> <span class=\"n\">hp</span><span class=\"bp\">.</span><span class=\"n\">pos</span> <span class=\"n\">hq</span><span class=\"bp\">.</span><span class=\"n\">pos</span><span class=\"bp\">‚ü©</span> <span class=\"o\">:</span> <span class=\"bp\">‚Ñï+</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">‚Ñï</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n      <span class=\"n\">lt_of_le_of_lt</span> <span class=\"n\">hb&#39;</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">div_lt_self</span> <span class=\"o\">(</span><span class=\"n\">mul_pos</span> <span class=\"n\">hp</span><span class=\"bp\">.</span><span class=\"n\">pos</span> <span class=\"n\">hq</span><span class=\"bp\">.</span><span class=\"n\">pos</span><span class=\"o\">)</span> <span class=\"n\">dec_trivial</span><span class=\"o\">),</span>\n    <span class=\"k\">have</span> <span class=\"n\">val_inj</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">‚Ñï</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">prime</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">zmodp</span> <span class=\"n\">p</span> <span class=\"n\">hp</span><span class=\"o\">),</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">‚Üî</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n      <span class=\"k\">from</span> <span class=\"bp\">Œª</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"bp\">‚ü®</span><span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">eq_of_veq</span><span class=\"o\">,</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">veq_of_eq</span><span class=\"bp\">‚ü©</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">hbpq0</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"o\">(</span><span class=\"bp\">‚ü®</span><span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"n\">mul_pos</span> <span class=\"n\">hp</span><span class=\"bp\">.</span><span class=\"n\">pos</span> <span class=\"n\">hq</span><span class=\"bp\">.</span><span class=\"n\">pos</span><span class=\"bp\">‚ü©</span><span class=\"o\">))</span> <span class=\"bp\">‚â†</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n      <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ne</span><span class=\"bp\">.</span><span class=\"n\">def</span><span class=\"o\">,</span> <span class=\"n\">zmod</span><span class=\"bp\">.</span><span class=\"n\">eq_zero_iff_dvd_nat</span><span class=\"o\">]</span><span class=\"bp\">;</span>\n        <span class=\"n\">exact</span> <span class=\"bp\">Œª</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">not_coprime_of_dvd_of_dvd</span> <span class=\"n\">hpq1&#39;</span> <span class=\"o\">(</span><span class=\"n\">dvd_refl</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">q</span><span class=\"o\">))</span> <span class=\"n\">h</span> <span class=\"n\">hb&#39;</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">habneg</span> <span class=\"o\">:</span> <span class=\"bp\">¬¨</span><span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">zmodp</span> <span class=\"n\">p</span> <span class=\"n\">hp</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"n\">b</span> <span class=\"bp\">‚àß</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">zmodp</span> <span class=\"n\">q</span> <span class=\"n\">hq</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"n\">b</span><span class=\"o\">),</span>\n      <span class=\"k\">begin</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">‚Üê</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">cast_coe_nat</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"err\">‚Üê</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">cast_coe_nat</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"err\">‚Üê</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">cast_coe_nat</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"err\">‚Üê</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">cast_coe_nat</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n          <span class=\"err\">‚Üê</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">cast_neg</span><span class=\"o\">,</span> <span class=\"err\">‚Üê</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">cast_neg</span><span class=\"o\">,</span> <span class=\"n\">zmodp</span><span class=\"bp\">.</span><span class=\"n\">eq_iff_modeq_int</span><span class=\"o\">,</span> <span class=\"n\">zmodp</span><span class=\"bp\">.</span><span class=\"n\">eq_iff_modeq_int</span><span class=\"o\">,</span>\n          <span class=\"bp\">@</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">modeq</span><span class=\"bp\">.</span><span class=\"n\">modeq_and_modeq_iff_modeq_mul</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">((</span><span class=\"n\">coprime_primes</span> <span class=\"n\">hp</span> <span class=\"n\">hq</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">hpq</span><span class=\"o\">),</span> <span class=\"err\">‚Üê</span> <span class=\"n\">hpqpnat</span><span class=\"o\">,</span>\n          <span class=\"err\">‚Üê</span> <span class=\"n\">zmod</span><span class=\"bp\">.</span><span class=\"n\">eq_iff_modeq_int</span><span class=\"o\">,</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">cast_coe_nat</span><span class=\"o\">,</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">cast_neg</span><span class=\"o\">,</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">cast_coe_nat</span><span class=\"o\">],</span>\n        <span class=\"k\">assume</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">‚Üê</span> <span class=\"n\">hpqpnat&#39;</span><span class=\"o\">,</span> <span class=\"err\">‚Üê</span> <span class=\"n\">zmod</span><span class=\"bp\">.</span><span class=\"n\">val_cast_of_lt</span> <span class=\"n\">hbpq&#39;</span><span class=\"o\">,</span> <span class=\"n\">zmod</span><span class=\"bp\">.</span><span class=\"n\">le_div_two_iff_lt_neg</span> <span class=\"n\">hpq1</span> <span class=\"n\">hbpq0</span><span class=\"o\">,</span>\n          <span class=\"err\">‚Üê</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">zmod</span><span class=\"bp\">.</span><span class=\"n\">val_cast_of_lt</span> <span class=\"n\">hapq&#39;</span><span class=\"o\">,</span> <span class=\"err\">‚Üê</span> <span class=\"n\">not_le</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hb&#39;</span><span class=\"o\">,</span>\n        <span class=\"n\">exact</span> <span class=\"n\">hb&#39;</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">ha&#39;</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span>\n      <span class=\"kn\">end</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">habneg&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">¬¨</span><span class=\"o\">((</span><span class=\"bp\">-</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">zmodp</span> <span class=\"n\">p</span> <span class=\"n\">hp</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">‚àß</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">zmodp</span> <span class=\"n\">q</span> <span class=\"n\">hq</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">),</span>\n      <span class=\"k\">by</span> <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"err\">‚Üê</span> <span class=\"n\">neg_inj&#39;</span><span class=\"o\">,</span> <span class=\"n\">neg_neg</span><span class=\"o\">,</span> <span class=\"err\">‚Üê</span> <span class=\"bp\">@</span><span class=\"n\">neg_inj&#39;</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">zmodp</span> <span class=\"n\">q</span> <span class=\"n\">hq</span><span class=\"o\">),</span> <span class=\"n\">neg_neg</span><span class=\"o\">],</span>\n    <span class=\"n\">suffices</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">zmodp</span> <span class=\"n\">p</span> <span class=\"n\">hp</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">‚àß</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">zmodp</span> <span class=\"n\">q</span> <span class=\"n\">hq</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n      <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">‚Üê</span> <span class=\"n\">mod_eq_of_lt</span> <span class=\"n\">hapq&#39;</span><span class=\"o\">,</span> <span class=\"err\">‚Üê</span> <span class=\"n\">mod_eq_of_lt</span> <span class=\"n\">hbpq&#39;</span><span class=\"o\">]</span><span class=\"bp\">;</span>\n        <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">zmodp</span><span class=\"bp\">.</span><span class=\"n\">eq_iff_modeq_nat</span><span class=\"o\">,</span> <span class=\"n\">zmodp</span><span class=\"bp\">.</span><span class=\"n\">eq_iff_modeq_nat</span><span class=\"o\">,</span>\n          <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">modeq</span><span class=\"bp\">.</span><span class=\"n\">modeq_and_modeq_iff_modeq_mul</span> <span class=\"o\">((</span><span class=\"n\">coprime_primes</span> <span class=\"n\">hp</span> <span class=\"n\">hq</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">hpq</span><span class=\"o\">)]</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"k\">by</span> <span class=\"n\">split_ifs</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"bp\">*</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">hmem</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">‚Ñï</span><span class=\"o\">,</span>\n    <span class=\"n\">a</span> <span class=\"err\">‚àà</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">q</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">filter</span> <span class=\"o\">(</span><span class=\"n\">coprime</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">q</span><span class=\"o\">))</span> <span class=\"bp\">‚Üí</span>\n    <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">zmodp</span> <span class=\"n\">q</span> <span class=\"n\">hq</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">‚â§</span> <span class=\"n\">q</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"k\">then</span> <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">zmodp</span> <span class=\"n\">p</span> <span class=\"n\">hp</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">zmodp</span> <span class=\"n\">q</span> <span class=\"n\">hq</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n      <span class=\"k\">else</span> <span class=\"o\">((</span><span class=\"bp\">-</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">zmodp</span> <span class=\"n\">p</span> <span class=\"n\">hp</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">zmodp</span> <span class=\"n\">q</span> <span class=\"n\">hq</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"err\">‚àà</span>\n      <span class=\"o\">((</span><span class=\"n\">range</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">erase</span> <span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">product</span> <span class=\"o\">((</span><span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"n\">erase</span> <span class=\"mi\">0</span><span class=\"o\">),</span>\n  <span class=\"k\">from</span> <span class=\"bp\">Œª</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">have</span> <span class=\"n\">hxp</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">‚Ñï</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">prime</span> <span class=\"n\">p</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">zmodp</span> <span class=\"n\">p</span> <span class=\"n\">hp</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">‚Üî</span> <span class=\"n\">p</span> <span class=\"err\">‚à£</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"k\">from</span> <span class=\"bp\">Œª</span> <span class=\"n\">p</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">zmodp</span><span class=\"bp\">.</span><span class=\"n\">val_cast_nat</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">dvd_iff_mod_eq_zero</span><span class=\"o\">],</span>\n  <span class=\"k\">have</span> <span class=\"n\">hxpneg</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">‚Ñï</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">prime</span> <span class=\"n\">p</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">zmodp</span> <span class=\"n\">p</span> <span class=\"n\">hp</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">‚Üî</span> <span class=\"n\">p</span> <span class=\"err\">‚à£</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"k\">from</span> <span class=\"bp\">Œª</span> <span class=\"n\">p</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">‚Üê</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">cast_coe_nat</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"err\">‚Üê</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">cast_neg</span><span class=\"o\">,</span> <span class=\"err\">‚Üê</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">coe_nat_inj&#39;</span><span class=\"o\">,</span>\n      <span class=\"n\">zmodp</span><span class=\"bp\">.</span><span class=\"n\">coe_val_cast_int</span><span class=\"o\">,</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">coe_nat_zero</span><span class=\"o\">,</span> <span class=\"err\">‚Üê</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">dvd_iff_mod_eq_zero</span><span class=\"o\">,</span> <span class=\"n\">dvd_neg</span><span class=\"o\">,</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">coe_nat_dvd</span><span class=\"o\">],</span>\n  <span class=\"k\">have</span> <span class=\"n\">hxplt</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">zmodp</span> <span class=\"n\">p</span> <span class=\"n\">hp</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">&lt;</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">zmodp</span> <span class=\"n\">p</span> <span class=\"n\">hp</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hxpltneg</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">zmodp</span> <span class=\"n\">p</span> <span class=\"n\">hp</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">&lt;</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">zmodp</span> <span class=\"n\">p</span> <span class=\"n\">hp</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hneglt</span> <span class=\"o\">:</span> <span class=\"bp\">¬¨</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">zmodp</span> <span class=\"n\">q</span> <span class=\"n\">hq</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">‚â§</span> <span class=\"n\">q</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">‚Üí</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">zmodp</span> <span class=\"n\">q</span> <span class=\"n\">hq</span><span class=\"o\">)</span> <span class=\"bp\">‚â†</span> <span class=\"mi\">0</span> <span class=\"bp\">‚Üí</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">zmodp</span> <span class=\"n\">q</span> <span class=\"n\">hq</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">‚â§</span> <span class=\"n\">q</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">,</span>\n    <span class=\"k\">from</span> <span class=\"bp\">Œª</span> <span class=\"n\">hx‚ÇÅ</span> <span class=\"n\">hx0</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">zmodp</span><span class=\"bp\">.</span><span class=\"n\">le_div_two_iff_lt_neg</span> <span class=\"n\">hq</span> <span class=\"n\">hq1</span> <span class=\"n\">hx0</span><span class=\"o\">,</span> <span class=\"n\">not_lt</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hx‚ÇÅ</span><span class=\"o\">,</span>\n  <span class=\"k\">by</span> <span class=\"n\">split_ifs</span><span class=\"bp\">;</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">zmodp</span><span class=\"bp\">.</span><span class=\"n\">eq_zero_iff_dvd_nat</span> <span class=\"n\">hq</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">zmodp</span> <span class=\"n\">p</span> <span class=\"n\">hp</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">coprime_mul_iff_left</span><span class=\"o\">,</span>\n      <span class=\"n\">lt_succ_iff</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">hp</span><span class=\"bp\">.</span><span class=\"n\">coprime_iff_not_dvd</span><span class=\"o\">,</span>\n      <span class=\"n\">hq</span><span class=\"bp\">.</span><span class=\"n\">coprime_iff_not_dvd</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">zmodp</span> <span class=\"n\">p</span> <span class=\"n\">hp</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">zmodp</span> <span class=\"n\">p</span> <span class=\"n\">hp</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">contextual</span> <span class=\"o\">:=</span> <span class=\"n\">tt</span><span class=\"o\">},</span>\n<span class=\"n\">prod_bij</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">x</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">zmodp</span> <span class=\"n\">q</span> <span class=\"n\">hq</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">‚â§</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"k\">then</span> <span class=\"o\">((</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">zmodp</span> <span class=\"n\">p</span> <span class=\"n\">hp</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">zmodp</span> <span class=\"n\">q</span> <span class=\"n\">hq</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">)</span>\n      <span class=\"k\">else</span> <span class=\"o\">((</span><span class=\"bp\">-</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">zmodp</span> <span class=\"n\">p</span> <span class=\"n\">hp</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">zmodp</span> <span class=\"n\">q</span> <span class=\"n\">hq</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">))</span>\n  <span class=\"n\">hmem</span>\n  <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">split_ifs</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">ext_iff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">)</span>\n  <span class=\"n\">hinj</span>\n  <span class=\"o\">(</span><span class=\"n\">surj_on_of_inj_on_of_card_le</span> <span class=\"bp\">_</span> <span class=\"n\">hmem</span> <span class=\"n\">hinj</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">le_of_add_le_add_right</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span>\n      <span class=\"o\">(</span><span class=\"k\">calc</span> <span class=\"n\">card</span> <span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">product</span> <span class=\"o\">(</span><span class=\"n\">erase</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">erase</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)))</span> <span class=\"mi\">0</span><span class=\"o\">))</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">)</span>\n            <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:</span>\n          <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">card_product</span><span class=\"o\">,</span> <span class=\"n\">card_erase_of_mem</span> <span class=\"o\">(</span><span class=\"n\">mem_range</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">hp</span><span class=\"bp\">.</span><span class=\"n\">pos</span><span class=\"o\">),</span> <span class=\"n\">card_erase_of_mem</span> <span class=\"o\">(</span><span class=\"n\">mem_range</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"n\">succ_pos</span> <span class=\"bp\">_</span><span class=\"o\">)),</span>\n            <span class=\"n\">card_range</span><span class=\"o\">,</span> <span class=\"n\">card_range</span><span class=\"o\">,</span> <span class=\"n\">pred_succ</span><span class=\"o\">,</span> <span class=\"err\">‚Üê</span> <span class=\"n\">add_assoc</span><span class=\"o\">,</span> <span class=\"err\">‚Üê</span> <span class=\"n\">succ_mul</span><span class=\"o\">,</span> <span class=\"n\">succ_pred_eq_of_pos</span> <span class=\"n\">hp</span><span class=\"bp\">.</span><span class=\"n\">pos</span><span class=\"o\">,</span>\n            <span class=\"n\">odd_mul_odd_div_two</span> <span class=\"n\">hp1</span> <span class=\"n\">hq1</span><span class=\"o\">,</span> <span class=\"n\">add_succ</span><span class=\"o\">]</span>\n        <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">card</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">q</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">card_range</span>\n        <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">card</span> <span class=\"o\">((</span><span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">q</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">filter</span> <span class=\"o\">(</span><span class=\"n\">coprime</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">q</span><span class=\"o\">))</span> <span class=\"err\">‚à™</span>\n                    <span class=\"o\">((</span><span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">q</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">filter</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">¬¨</span><span class=\"n\">coprime</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">erase</span> <span class=\"mi\">0</span> <span class=\"err\">‚à™</span>\n                    <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">q</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">filter</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">¬¨</span><span class=\"n\">coprime</span> <span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n          <span class=\"n\">congr_arg</span> <span class=\"n\">card</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">coprime_mul_iff_left</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">tauto</span><span class=\"o\">)</span>\n        <span class=\"bp\">...</span> <span class=\"bp\">‚â§</span> <span class=\"n\">card</span> <span class=\"o\">((</span><span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">q</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">filter</span> <span class=\"o\">(</span><span class=\"n\">coprime</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">q</span><span class=\"o\">)))</span> <span class=\"bp\">+</span>\n              <span class=\"n\">card</span> <span class=\"o\">(((</span><span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">q</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">filter</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">¬¨</span><span class=\"n\">coprime</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">erase</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">+</span>\n              <span class=\"n\">card</span> <span class=\"o\">((</span><span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">q</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">filter</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">¬¨</span><span class=\"n\">coprime</span> <span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n          <span class=\"n\">le_trans</span> <span class=\"o\">(</span><span class=\"n\">card_union_le</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">add_le_add_right</span> <span class=\"o\">(</span><span class=\"n\">card_union_le</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"bp\">_</span><span class=\"o\">)</span>\n        <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"bp\">_</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">card_erase_of_mem</span><span class=\"o\">,</span> <span class=\"n\">card_range_p_mul_q_filter_not_coprime</span> <span class=\"n\">hp</span> <span class=\"n\">hq</span> <span class=\"n\">hp1</span> <span class=\"n\">hq1</span> <span class=\"n\">hpq</span><span class=\"o\">,</span>\n              <span class=\"n\">mul_comm</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"n\">card_range_p_mul_q_filter_not_coprime</span> <span class=\"n\">hq</span> <span class=\"n\">hp</span> <span class=\"n\">hq1</span> <span class=\"n\">hp1</span> <span class=\"n\">hpq</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span> <span class=\"n\">pred_succ</span><span class=\"o\">,</span>\n              <span class=\"n\">add_assoc</span><span class=\"o\">]</span><span class=\"bp\">;</span>\n            <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">range_succ</span><span class=\"o\">,</span> <span class=\"n\">hp</span><span class=\"bp\">.</span><span class=\"n\">coprime_iff_not_dvd</span><span class=\"o\">,</span> <span class=\"n\">hpq0</span><span class=\"o\">])))</span>\n</pre></div>",
        "id": 165930293,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1558121942
    },
    {
        "content": "<p>I opened a PR to fix the first T50000-challenge issue: <a href=\"https://github.com/leanprover-community/mathlib/pull/1045\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/pull/1045\">https://github.com/leanprover-community/mathlib/pull/1045</a></p>",
        "id": 165930311,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1558121962
    },
    {
        "content": "<p>It's in <a href=\"https://github.com/leanprover-community/mathlib/blob/45afa86e6e45ea4f2afa5dd5881cb5af7210a139/src/data/zmod/quadratic_reciprocity.lean#L291\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/45afa86e6e45ea4f2afa5dd5881cb5af7210a139/src/data/zmod/quadratic_reciprocity.lean#L291\"><code>data/zmod/quadratic_reciprocity.lean</code></a>, line 291.</p>",
        "id": 165930425,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1558122048
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> I wasn't sure whether you thought it was worth fixing. I can see the appeal of proving something by <code>rfl</code>.</p>",
        "id": 165930455,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1558122077
    },
    {
        "content": "<p>This number theory one is a key lemma in the proof of quadratic reciprocity.</p>",
        "id": 165930481,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1558122114
    },
    {
        "content": "<p>Of course some proofs take a long time because they are actually big proofs</p>",
        "id": 165930541,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558122137
    },
    {
        "content": "<p>Right!</p>",
        "id": 165930546,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1558122143
    },
    {
        "content": "<p>That of course could be what's going on here.</p>",
        "id": 165930553,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1558122150
    },
    {
        "content": "<p>Hmm, it's really high time I left the office. I'll maybe look at this one on the subway.</p>",
        "id": 165930579,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1558122176
    },
    {
        "content": "<p>One option is to break it up into subparts</p>",
        "id": 165930580,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558122178
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> would that be feasible?</p>",
        "id": 165930595,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1558122191
    },
    {
        "content": "<p>I guess another issue is that for several of the other timeouts, it has been manifestly clear that changing mathlib to fix the timeout was a good idea. Here that's not so clear to me, if it's simply one long proof that nobody is interested in the subparts of.</p>",
        "id": 165930745,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1558122304
    },
    {
        "content": "<p>The proof of quadratic reciprocity that we have is the standard counting proof, basically looking at the lattices points in Z^2 with 0&lt;=x&lt;p/2 and 0&lt;=y&lt;q/2 and then counting them in a slightly funny way</p>",
        "id": 165930784,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1558122348
    },
    {
        "content": "<p>It might really be the case that these lemmas are of no use anywhere else.</p>",
        "id": 165930850,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1558122391
    },
    {
        "content": "<p>I saw these lemmas when I was still at high school and I don't think I've ever seen them in any other context, and I'm a professional number theorist.</p>",
        "id": 165930869,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1558122422
    },
    {
        "content": "<p>Well... speed-ups are always nice (-;</p>",
        "id": 165931647,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1558123146
    },
    {
        "content": "<p>This file is probably compiled quite often... everytime something in the root of the hierarchy changes</p>",
        "id": 165931672,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1558123174
    },
    {
        "content": "<p>If you break a theorem into two parts it doesn't make it go faster</p>",
        "id": 165933797,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558124871
    },
    {
        "content": "<p>although you will be able to avoid the timeout</p>",
        "id": 165933856,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558124891
    },
    {
        "content": "<p>However, another reason to break up long proofs is if you want to step through it or modify it... it's the same issue with long files</p>",
        "id": 165933890,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558124930
    },
    {
        "content": "<p>... and the same issue with long papers...</p>",
        "id": 165933904,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1558124948
    },
    {
        "content": "<p><code>elaboration of prod_filter_range_p_mul_q_div_two_eq_prod_product took 22.6s</code></p>",
        "id": 165933922,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1558124972
    },
    {
        "content": "<p>That's still faster than I was when I first read that proof (-;</p>",
        "id": 165933942,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1558125001
    },
    {
        "content": "<p>There's only a few to go.</p>",
        "id": 165934051,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1558125070
    },
    {
        "content": "<p>[PS Chris' proof is basically all in term mode, so one would have to think about how to break it up]</p>",
        "id": 165934066,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1558125097
    },
    {
        "content": "<p>The next one is the open mapping theorem. Again this might just be because it's a long proof.</p>",
        "id": 165934196,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1558125200
    },
    {
        "content": "<p>It's nearly 150 lines -- <code>exists_preimage_norm_le</code> in <code>analysis/normed_space/banach.lean</code>, <a href=\"https://github.com/leanprover-community/mathlib/blob/5e5298b9273b44aa06e3b30aa064cf866cd8152a/src/analysis/normed_space/banach.lean#L29\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/5e5298b9273b44aa06e3b30aa064cf866cd8152a/src/analysis/normed_space/banach.lean#L29\">line 29</a></p>",
        "id": 165934306,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1558125293
    },
    {
        "content": "<p>I guess it's one variant of the open mapping theorem. Sebastien says that the proof falls naturally into two halves but it's still formalised as one big proof.</p>",
        "id": 165934489,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1558125417
    },
    {
        "content": "<p>At least this one is in tactic mode but again it's difficult for me to tell whether there's something bad in the proof or whether it's just long, and it's also difficult for me to tell whether it's worth breaking up the proof into smaller chunks. <span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> do you have an opinion on this? Your proof takes a long time to elaborate, apparently. Is this just because it's long?</p>",
        "id": 165934652,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1558125527
    },
    {
        "content": "<p>I'm amazed you could write any code after it :D</p>",
        "id": 165934733,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1558125594
    },
    {
        "content": "<p><code>elaboration of exists_preimage_norm_le took 18.9s</code>. That's a long time to wait after each keypress ;-)</p>",
        "id": 165934803,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1558125625
    },
    {
        "content": "<p>Sebastien is also responsible for <code>GH_dist_le_of_approx_subsets</code> in <code>topology/metric_space/gromov_hausdorff.lean</code>, which is the next timeout.</p>",
        "id": 165935008,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1558125795
    },
    {
        "content": "<p>That one is only about 67 lines long -- so there might be something funny going on in that one.</p>",
        "id": 165935040,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1558125830
    },
    {
        "content": "<p>You can write such a proof interactively by sorrying big chunks of it, and then putting back everything together once every bit compiles. And you can also buy a faster computer :)</p>",
        "id": 165935269,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1558125971
    },
    {
        "content": "<p>I am sure this can be made faster, but I don't know where the bottlenecks are. A tutorial on optimization, based on this one example of <code>exists_preimage_norm_le</code>, would be much appreciated. In particular, I can't tell if typeclass inference takes a lot of time, or unification, or it's just that everything is nontrivial.</p>",
        "id": 165935536,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1558126182
    },
    {
        "content": "<p>For instance, in the middle of the proof, there is a calc block</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"err\">‚à•</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">d</span><span class=\"bp\">‚Åª¬π</span> <span class=\"err\">‚Ä¢</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">y</span><span class=\"err\">‚à•</span> <span class=\"bp\">=</span> <span class=\"err\">‚à•</span><span class=\"n\">d</span><span class=\"bp\">‚Åª¬π</span> <span class=\"err\">‚Ä¢</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">d</span><span class=\"bp\">‚Åª¬π</span> <span class=\"bp\">*</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"err\">‚Ä¢</span> <span class=\"n\">y</span><span class=\"err\">‚à•</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">lin</span><span class=\"bp\">.</span><span class=\"n\">smul</span><span class=\"o\">,</span> <span class=\"n\">inv_mul_cancel</span><span class=\"o\">,</span> <span class=\"n\">one_smul</span><span class=\"o\">]</span>\n<span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"err\">‚à•</span><span class=\"n\">d</span><span class=\"bp\">‚Åª¬π</span> <span class=\"err\">‚Ä¢</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">d</span> <span class=\"err\">‚Ä¢</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"err\">‚à•</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_smul</span><span class=\"o\">,</span> <span class=\"n\">smul_sub</span><span class=\"o\">]</span>\n<span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"err\">‚à•</span><span class=\"n\">d</span><span class=\"err\">‚à•</span><span class=\"bp\">‚Åª¬π</span> <span class=\"bp\">*</span> <span class=\"err\">‚à•</span><span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">d</span> <span class=\"err\">‚Ä¢</span> <span class=\"n\">y</span><span class=\"err\">‚à•</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">norm_smul</span><span class=\"o\">,</span> <span class=\"n\">norm_inv</span><span class=\"o\">]</span>\n</pre></div>\n\n\n<p>The first line takes 235ms, the second one 167ms and the third one 3ms. I don't understand why there would be a factor 100 between the first and the third line!</p>",
        "id": 165936232,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1558126696
    },
    {
        "content": "<p>And we finish where we started, with some category theory. Explicitly, <a href=\"https://github.com/leanprover-community/mathlib/blob/5e5298b9273b44aa06e3b30aa064cf866cd8152a/src/category_theory/instances/CommRing/adjunctions.lean#L42\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/5e5298b9273b44aa06e3b30aa064cf866cd8152a/src/category_theory/instances/CommRing/adjunctions.lean#L42\">polynomial ring being adjoint to the forgetful functor</a> on line 42 of <code>category_theory/instances/CommRing/adjunctions.lean</code>.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">noncomputable</span> <span class=\"n\">def</span> <span class=\"n\">adj</span> <span class=\"o\">:</span> <span class=\"n\">polynomial_ring</span> <span class=\"err\">‚ä£</span> <span class=\"o\">(</span><span class=\"n\">forget</span> <span class=\"o\">:</span> <span class=\"n\">CommRing</span> <span class=\"err\">‚•§</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">adjunction</span><span class=\"bp\">.</span><span class=\"n\">mk_of_hom_equiv</span>\n<span class=\"o\">{</span> <span class=\"n\">hom_equiv</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">Œ±</span> <span class=\"n\">R</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"err\">‚àò</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n    <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"bp\">‚ü®</span><span class=\"n\">eval‚ÇÇ</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">cast</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span><span class=\"bp\">‚ü©</span><span class=\"o\">,</span>\n    <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">ext</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"err\">$</span> <span class=\"n\">funext</span> <span class=\"err\">$</span> <span class=\"bp\">Œª</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n    <span class=\"k\">begin</span>\n      <span class=\"k\">have</span> <span class=\"n\">H0</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">congr</span> <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">eq_cast&#39;</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"err\">‚àò</span> <span class=\"n\">C</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">rfl</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"n\">H1</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">p‚ÇÅ</span> <span class=\"n\">p‚ÇÇ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">is_ring_hom</span><span class=\"bp\">.</span><span class=\"n\">map_add</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">p‚ÇÅ</span> <span class=\"n\">p‚ÇÇ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"n\">H2</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">p‚ÇÅ</span> <span class=\"n\">p‚ÇÇ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">is_ring_hom</span><span class=\"bp\">.</span><span class=\"n\">map_mul</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">p‚ÇÅ</span> <span class=\"n\">p‚ÇÇ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span>\n      <span class=\"n\">apply</span> <span class=\"n\">mv_polynomial</span><span class=\"bp\">.</span><span class=\"n\">induction_on</span> <span class=\"n\">p</span><span class=\"bp\">;</span> <span class=\"n\">intros</span><span class=\"bp\">;</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">eval‚ÇÇ_add</span><span class=\"o\">,</span> <span class=\"n\">eval‚ÇÇ_mul</span><span class=\"o\">,</span> <span class=\"n\">eval‚ÇÇ_C</span><span class=\"o\">,</span> <span class=\"n\">eval‚ÇÇ_X</span><span class=\"o\">,</span>\n        <span class=\"n\">eq_self_iff_true</span><span class=\"o\">,</span> <span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">comp_app</span><span class=\"o\">,</span> <span class=\"n\">hom_coe_app&#39;</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span>\n    <span class=\"kn\">end</span><span class=\"o\">,</span>\n    <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">tidy</span> <span class=\"o\">},</span>\n  <span class=\"n\">hom_equiv_naturality_left_symm&#39;</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">X&#39;</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">ext</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"err\">$</span> <span class=\"n\">funext</span> <span class=\"err\">$</span> <span class=\"bp\">Œª</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n  <span class=\"k\">begin</span>\n    <span class=\"n\">apply</span> <span class=\"n\">mv_polynomial</span><span class=\"bp\">.</span><span class=\"n\">induction_on</span> <span class=\"n\">p</span><span class=\"bp\">;</span> <span class=\"n\">intros</span><span class=\"bp\">;</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">eval‚ÇÇ_mul</span><span class=\"o\">,</span> <span class=\"n\">eval‚ÇÇ_add</span><span class=\"o\">,</span> <span class=\"n\">eval‚ÇÇ_C</span><span class=\"o\">,</span> <span class=\"n\">eval‚ÇÇ_X</span><span class=\"o\">,</span>\n      <span class=\"n\">comp_val</span><span class=\"o\">,</span> <span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">coe_fn_symm_mk</span><span class=\"o\">,</span> <span class=\"n\">hom_coe_app</span><span class=\"o\">,</span> <span class=\"n\">polynomial_ring_map_val</span><span class=\"o\">,</span>\n      <span class=\"n\">eq_self_iff_true</span><span class=\"o\">,</span> <span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">comp_app</span><span class=\"o\">,</span> <span class=\"n\">add_right_inj</span><span class=\"o\">,</span> <span class=\"n\">types_comp</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span>\n  <span class=\"kn\">end</span> <span class=\"o\">}</span>\n</pre></div>",
        "id": 165942011,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1558132281
    },
    {
        "content": "<p>I wonder if it's the two simp lines which are making this one hurt.</p>",
        "id": 165942407,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1558132741
    },
    {
        "content": "<p>That <code>intros;</code> before the first <code>simp only</code> -- after that there are three goals. Has the simp statement been carefully crafted to close all of them? [that's what it does]</p>",
        "id": 165942606,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1558132950
    },
    {
        "content": "<p>Maybe this is the point of <code>simp</code> anyway? Maybe it's supposed to take a lot of time but we only have to compile once so who cares?</p>",
        "id": 165942910,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1558133318
    },
    {
        "content": "<p>That is a pretty compact proof really. Automation is doing a bunch of diagram-chasing here.</p>",
        "id": 165943049,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1558133508
    },
    {
        "content": "<p>I think it would clearer if we ran three separate <code>simp only</code>s here, to discharge the three goals. Combining them all into one longer list seems unnecessarily golf-y.</p>",
        "id": 165950438,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1558143050
    },
    {
        "content": "<p>Okay, <a href=\"https://github.com/leanprover-community/mathlib/issues/1049\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/1049\">#1049</a> fulfills the -T50000 challenge for <code>category_theory/instances/CommRing/adjunctions.lean</code>.</p>",
        "id": 165997059,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1558224329
    },
    {
        "content": "<p>Feel like running it all again with a lower threshold? :-)</p>",
        "id": 165997061,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1558224341
    },
    {
        "content": "<p>Given that pretty much every instance that went over 50000 came from at least somewhat smelly code, perhaps we should review this regularly.</p>",
        "id": 165997106,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1558224400
    },
    {
        "content": "<p>Re <a href=\"https://github.com/leanprover-community/mathlib/issues/1049\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/1049\">#1049</a>, <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>, could you have a look at this and see if you're happy? I think you wrote the original file.</p>",
        "id": 165997107,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1558224420
    },
    {
        "content": "<p>Hmm, there is this function <a href=\"https://github.com/leanprover-community/lean/blob/master/src/util/memory.cpp#L127-L140\" target=\"_blank\" title=\"https://github.com/leanprover-community/lean/blob/master/src/util/memory.cpp#L127-L140\">https://github.com/leanprover-community/lean/blob/master/src/util/memory.cpp#L127-L140</a><br>\nI wonder if it might be possible to build a top-5 old_peak-get_peak_rss() delta, list of components from there or something.</p>",
        "id": 166011365,
        "sender_full_name": "matt rice",
        "timestamp": 1558251530
    },
    {
        "content": "<blockquote>\n<p>Feel like running it all again with a lower threshold? :-)</p>\n</blockquote>\n<p>Heh, I tried compiling the version of mathlib from just before I started this thread, and a version from yesterday, and the newer version seemed to take slightly longer to compile! So I'm not sure I've done any good with this project anyway :-/</p>",
        "id": 166011443,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1558251696
    },
    {
        "content": "<p>Progress...?</p>",
        "id": 166014257,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1558256560
    },
    {
        "content": "<p>it could just be new material. We're always fighting the tide of general library growth</p>",
        "id": 166014326,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558256683
    },
    {
        "content": "<p>I could decrase the compilation of <code>GH_dist_le_of_approx_subsets</code> from 50s to 5s on my computer by replacing two <code>linarith</code> calls by explicit computations. See <a href=\"https://github.com/leanprover-community/mathlib/issues/1052\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/1052\">#1052</a>.</p>",
        "id": 166016920,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1558261392
    },
    {
        "content": "<p>I tried first to avoid problems by telling <code>linarith</code> which equations it should look at, but I don't understand the syntax. Consider for instance</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">‚â§</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">‚â§</span> <span class=\"n\">a</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">linarith</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>works, but if I use instead <code>linarith ha hb</code> it fails. While the docstring says <code>linarith h1 h2 h3 will only use hypotheses h1, h2, h3.</code></p>",
        "id": 166016971,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1558261498
    },
    {
        "content": "<p>From my experience <code>ring</code> and <code>linarith</code> aren't usually bottlenecks; it's usually the <code>simp</code>ing they do in the preprocessing stage</p>",
        "id": 166017305,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558262043
    },
    {
        "content": "<p>I think Sebastien said that it got bad after the <code>is_def_eq</code> changes</p>",
        "id": 166017394,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1558262168
    },
    {
        "content": "<p>What about <code>ring</code> and <code>ring!</code></p>",
        "id": 166017395,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1558262176
    },
    {
        "content": "<p>I like that</p>",
        "id": 166017404,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558262213
    },
    {
        "content": "<p>That way you when you're angry that <code>linarith</code> can't solve <code>id x = x</code> you can take it out on lean when you press <code>!</code></p>",
        "id": 166017422,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1558262253
    },
    {
        "content": "<p>:D</p>",
        "id": 166017433,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1558262282
    },
    {
        "content": "<p>The <code>!</code> notation is better than another config option. In both <code>ring</code> and <code>linarith</code>, it will take a little bit of work to propagate that flag from the tactic call to the place where it's actually used. But it's a refactor that's worth doing.</p>",
        "id": 166017782,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1558262879
    },
    {
        "content": "<p>More generally, though. If this change to <code>linarith</code> causes this kind of slowdown, there's probably something missing an <code>irreducible</code> attribute.</p>",
        "id": 166017832,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1558262921
    },
    {
        "content": "<p>As for restricting <code>linarith</code> to only certain hypotheses: iirc, it won't use the goal if you do this. It will just try to find a contradiction with <code>ha, hb</code>. <code>apply le_of_not_gt, intro hc, linarith ha hb hc</code> would work. I remember noticing this a while back and thought I changed it but maybe I never got around to it.</p>",
        "id": 166018128,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1558263404
    },
    {
        "content": "<p>What about using <code>linarith h1 h2 \\|-</code> for this?</p>",
        "id": 166018280,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558263605
    },
    {
        "content": "<p>That would be ideal. It takes slightly more work to parse because it's no longer a list of names.</p>",
        "id": 166018371,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1558263820
    },
    {
        "content": "<p>By the way, any idea what's up with Travis here? <a href=\"https://github.com/leanprover-community/mathlib/pull/1043\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/pull/1043\">https://github.com/leanprover-community/mathlib/pull/1043</a> I'm certain the original PR compiled, and I don't see why Mario's changes should change that.</p>",
        "id": 166018604,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1558264203
    },
    {
        "content": "<p>you could just use the <code>loc</code> parser</p>",
        "id": 166018695,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558264360
    },
    {
        "content": "<p>It timed out. I restarted the build</p>",
        "id": 166018708,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558264435
    },
    {
        "content": "<blockquote>\n<p>you could just use the <code>loc</code> parser</p>\n</blockquote>\n<p>That takes an <code>at</code>, right? <code>linarith at h1 h2 |-</code> sounds strange. But yes, that can be adapted.</p>",
        "id": 166018924,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1558264724
    },
    {
        "content": "<p>There's something entirely different going on in the <code>GH_dist_le_of_approx_subsets</code> proof. Even if you clear everything irrelevant from the context, <code>linarith</code> (with no arguments) still fails. With the same goal and context in a separate proof right above, it succeeds.</p>",
        "id": 166019613,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1558265957
    },
    {
        "content": "<p><code>attribute [irreducible] Hausdorff_dist</code> makes it instantaneous. I will add this and keep the <code>linarith</code> calls, instead of the current version of <a href=\"https://github.com/leanprover-community/mathlib/issues/1052\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/1052\">#1052</a>.</p>",
        "id": 166019977,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1558266580
    },
    {
        "content": "<p>Done. This is more satisfactory, as the proofs with <code>linarith</code> are clearly better, and moreover this was just a symptom of a problem that would have shown up again later on.</p>",
        "id": 166020536,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1558267514
    },
    {
        "content": "<p>As for the other issue here: the type of <code>Œ¥0</code> is actually a metavariable. The <code>refine</code> call at the very first line never instantiates it. We'll have to add calls to <code>instantiate_mvars</code> in <code>linarith</code>. I think we saw something similar in <code>ring</code> a while back.</p>",
        "id": 166020671,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1558267704
    },
    {
        "content": "<p>Where it the other issue? The original proof (with several calls to <code>linarith</code>) works fine just by making <code>Hausdorff_dist</code> irreducible and no other change.</p>",
        "id": 166020812,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1558267938
    },
    {
        "content": "<p>In particular, <code>linarith</code> is able to use <code>Œ¥0</code> just fine.</p>",
        "id": 166020829,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1558267997
    },
    {
        "content": "<p>I started looking at your changes to see what needed to be irreducible. The first thing I tried was clearing all the irrelevant stuff:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">have</span> <span class=\"n\">I5</span> <span class=\"o\">:</span> <span class=\"n\">Hausdorff_dist</span> <span class=\"o\">(</span><span class=\"n\">Fl</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fr</span> <span class=\"err\">&#39;&#39;</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"err\">Œ¶</span><span class=\"o\">))</span> <span class=\"bp\">‚â§</span> <span class=\"n\">Œµ2</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">Œ¥</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"n\">Hausdorff_dist_le_of_mem_dist</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">clear</span> <span class=\"n\">I4</span> <span class=\"n\">I3</span> <span class=\"n\">I2</span> <span class=\"n\">I1</span> <span class=\"n\">Il</span> <span class=\"n\">Ir</span> <span class=\"n\">Fr</span> <span class=\"n\">Fl</span> <span class=\"bp\">_</span><span class=\"n\">inst_7</span> <span class=\"n\">this</span> <span class=\"n\">sne</span> <span class=\"n\">hs</span> <span class=\"n\">hs&#39;</span> <span class=\"n\">H</span> <span class=\"n\">h</span> <span class=\"n\">Dxs</span>  <span class=\"bp\">_</span><span class=\"n\">inst</span> <span class=\"n\">hxs</span> <span class=\"n\">xŒ±</span> <span class=\"n\">xs</span> <span class=\"err\">Œ¶</span> <span class=\"n\">s</span> <span class=\"n\">Œµ1</span> <span class=\"n\">Œµ3</span> <span class=\"bp\">_</span><span class=\"n\">inst_6</span> <span class=\"bp\">_</span><span class=\"n\">inst_5</span> <span class=\"bp\">_</span><span class=\"n\">inst_4</span> <span class=\"bp\">_</span><span class=\"n\">inst_3</span> <span class=\"bp\">_</span><span class=\"n\">inst_2</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"n\">Œ≤</span> <span class=\"n\">Œ±</span><span class=\"o\">,</span>\n      <span class=\"n\">linarith</span> <span class=\"o\">}</span>\n</pre></div>\n\n\n<p>This fails, even though it works elsewhere with the exact same context and goal.</p>",
        "id": 166020900,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1558268104
    },
    {
        "content": "<p>It works if you <code>revert Œµ2 Œ¥, intros,</code> before <code>linarith</code>, and printing the raw format of the type of <code>Œ¥0</code> shows it's a metavar.</p>",
        "id": 166020956,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1558268185
    },
    {
        "content": "<p>But that's curious that <code>linarith</code> manages to use it in the improved proof. It must get instantiated somewhere.</p>",
        "id": 166020975,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1558268227
    },
    {
        "content": "<p>Yep. At the <code>linarith</code> call in the line <code> refine Hausdorff_dist_le_of_mem_dist  (by linarith) _ _</code>, the type of <code>Œ¥0</code> has been instantiated. If you change this to <code>refine Hausdorff_dist_le_of_mem_dist _ _ _</code>, <code>linarith</code> fails on the first goal, because type of <code>Œ¥0</code> is still an mvar.</p>",
        "id": 166021401,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1558268942
    },
    {
        "content": "<p>I'm running the -T50000 test again for the fun of it. <code>category_theory/adjunction/limits.lean</code> fails in a number of places (and takes 60 seconds to compile on my fast desktop). This is presumably due to <code>tidy</code>, but it doesn't seem healthy. Similar issues in <code>algebraic_geometry/presheafed_space</code> (as noted at <a href=\"#narrow/stream/116395-maths/topic/presheafed.20space.20category\" title=\"#narrow/stream/116395-maths/topic/presheafed.20space.20category\">https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/presheafed.20space.20category</a>), which takes a whopping 125 sec, mainly on line 64.</p>",
        "id": 170437677,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1562664836
    },
    {
        "content": "<p>Also trouble with <code>card_nth_roots</code> at <code>data/polynomial.lean:1782</code>, but this one isn't related to <code>tidy</code>.</p>",
        "id": 170437982,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1562665104
    },
    {
        "content": "<p>I see the issue with <code>card_nth_roots</code> came up last time we ran this test and I thought we fixed it. There's an easy enough workaround, although I'm not sure why it works.</p>",
        "id": 170438727,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1562665805
    },
    {
        "content": "<p><code>algebra/CommRing/adjunctions.lean</code>, which Scott fixed last time, is failing again. It's not horribly slow so this might be just over the edge.</p>",
        "id": 170438882,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1562665969
    },
    {
        "content": "<p><code>field_theory/splitting_field.lean:91</code>, <code>exists_multiset_of_splits</code> goes over, but there's no obvious culprit that I see.</p>",
        "id": 170439454,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1562666595
    },
    {
        "content": "<p>Did the recent reordering of tidy tactics make this worse?</p>",
        "id": 170442553,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1562669561
    },
    {
        "content": "<p>I think <code>ext</code> was moved a bit down in the list.</p>",
        "id": 170442568,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1562669576
    },
    {
        "content": "<p>That's possible.</p>",
        "id": 170444988,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1562672264
    },
    {
        "content": "<p>The issue in <code>splitting_field</code> is type class search for <code>is_ring_hom.id</code>. Adding <code>local attribute [instance, priority 100000] is_ring_hom.id</code> fixes that file.</p>",
        "id": 170445052,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1562672297
    },
    {
        "content": "<p>I have no idea how to fix the category theory stuff, but something has to be done. It's not fair for such a huge percentage of mathlib's compile time to be spent on those two files.</p>",
        "id": 170445219,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1562672465
    },
    {
        "content": "<p>To echo Bernie Sanders for a second: the top .18% of mathlib takes 13.5% of the build time. The <code>assoc'</code> field of <code>category_of_PresheafedSpaces</code> alone is taking around a minute. The proof that <code>tidy</code> finds still takes around a minute to check, and it's pretty innocent looking: <code>intros W X Y Z f g h, dsimp at *, simp at *, refl</code>. There's a bit of unnecessary work done (<code>intros, simp, refl</code> should be fine), but that simp call is crazy. I wonder what the simp set is here -- it changes <code>(f ‚â´ g) ‚â´ h = f ‚â´ g ‚â´ h</code> to something that looks much messier, but gets closed by <code>refl</code>. Replacing it with the output of <code>squeeze_simp</code> gives a different result, but it's closed by <code>split; refl</code>, thankfully very quickly.</p>",
        "id": 170451124,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1562677735
    },
    {
        "content": "<p>I think Scott won't have much time for Lean the next two weeks... so we might need to fix things ourselves.</p>",
        "id": 170462716,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1562685415
    },
    {
        "content": "<p>I have a commit on my office computer that shaves two minutes off of <code>presheafed_space</code>. But I had to leave early and didn't push it yet, and no way am I working on this on my laptop. It's a patch, not a real fix -- just getting the scripts from <code>tidy</code> and fixing the worst parts.</p>",
        "id": 170463814,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1562686178
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span> How much % is 2 minutes?</p>",
        "id": 170468246,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1562689607
    },
    {
        "content": "<p>I think all of mathlib took 26 min.</p>",
        "id": 170469430,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1562690580
    },
    {
        "content": "<p>Ok, that is quite a significant speedup</p>",
        "id": 170469864,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1562690961
    },
    {
        "content": "<p>So I thought I'd try the T50000 challenge again. This is the game where you compile mathlib but only let Lean take half as long as the default amount of time before it times out. The first problem we run into is quite interesting. I should say right now that the below would have taken me much longer to put together had it not been for the wonderful new tooling. The last time the file <code>src/set_theory/pgame.lean</code> changed was on Thursday (two days ago) in <a href=\"https://github.com/leanprover-community/mathlib/issues/2222\" title=\"https://github.com/leanprover-community/mathlib/issues/2222\">#2222</a>. After the change:</p>\n<div class=\"codehilite\"><pre><span></span>git checkout 30146a027b6f3e207f95571c0802d647f613b38a\nleanproject get-cache\nrm -f src/set_theory/pgame.olean\ndate; lean --make src/set_theory/pgame.lean ; date\n</pre></div>\n\n\n<p><code>pgame.lean</code> takes 11 seconds to compile. Note: this is <em>after</em> the change was made to the file on Thursday.</p>\n<p>Now fast forward to master today:</p>\n<div class=\"codehilite\"><pre><span></span>git checkout master\nleanproject get-cache\nrm -f src/set_theory/pgame.olean\ndate; lean --make src/set_theory/pgame.lean ; date\n</pre></div>\n\n\n<p>and the same <code>pgame.lean</code> file now takes more than <em>five minutes</em> to compile (and times out on T50000). What is going on here?</p>",
        "id": 192139664,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585426471
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 192142650,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585431432
    },
    {
        "content": "<p>In any case, I think I better investigate... Both <code>solve_by_elim</code> and <code>pgame</code> have my fingerprints on them, so this is probably somehow my fault. :-)</p>",
        "id": 192143842,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585433396
    },
    {
        "content": "<p>Maybe <a href=\"https://github.com/leanprover-community/mathlib/commit/ad53e0b7d90aa6a3a8fbcab9f9bb2af769f82b19\" title=\"https://github.com/leanprover-community/mathlib/commit/ad53e0b7d90aa6a3a8fbcab9f9bb2af769f82b19\">ad53e0b7d90aa6a3a8fbcab9f9bb2af769f82b19</a> is the first bad commit</p>",
        "id": 192145511,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585436062
    },
    {
        "content": "<p>and in any case, I think this shows that we really need to introduce a -T limit in CI.</p>",
        "id": 192147463,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585439457
    },
    {
        "content": "<p>I wonder if it would be possible to hack lean so that it reports the smallest -T value that would have compiled the input successfully? Then we can keep an eye on that number for regressions without blocking the build necessarily</p>",
        "id": 192147596,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585439690
    },
    {
        "content": "<p>and we can have some current target, and set -T to something like 20% more than that so that anything that goes too far is rejected immediately</p>",
        "id": 192147609,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585439759
    },
    {
        "content": "<p>If the profiler were more accurate (<a href=\"https://github.com/leanprover-community/lean/issues/58\" title=\"https://github.com/leanprover-community/lean/issues/58\">lean#58</a>) we could revive the <a href=\"#narrow/stream/113538-travis/topic/build.20time.20bot\" title=\"#narrow/stream/113538-travis/topic/build.20time.20bot\">build time bot</a>.</p>",
        "id": 192148059,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1585440483
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>, fixed in <a href=\"https://github.com/leanprover-community/mathlib/issues/2275\" title=\"https://github.com/leanprover-community/mathlib/issues/2275\">#2275</a>. This file now compiles with <code>-T6000</code> again.</p>",
        "id": 192152523,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585449449
    },
    {
        "content": "<p>Great work Scott! Signed, the build time bot</p>",
        "id": 192164925,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585473627
    },
    {
        "content": "<p>I fixed a bunch more in <a href=\"https://github.com/leanprover-community/mathlib/issues/2281\" title=\"https://github.com/leanprover-community/mathlib/issues/2281\">#2281</a>. We're almost there!</p>",
        "id": 192170353,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585482590
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/2276\">#2276</a> adds <code>-T100000</code> to the build step in our CI. This is the limit that both vscode-lean and emacs lean-mode use. Do we all agree it's a good idea?</p>\n<p>There's also a checklist there of the 7 defs and theorems that currently don't compile with <code>-T50000</code> (as well as one giant proof which used to fail). Anyone want to take a shot at them (in another PR)?</p>",
        "id": 198865344,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1590569533
    },
    {
        "content": "<p>I think we should include <code>-T100000</code> in the CI. I'm trying to fix the newly introduced <code>-T50000</code> problems in category theory now, but it would be great if these could be caught in the PR process.</p>",
        "id": 198869679,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1590572512
    },
    {
        "content": "<p>Okay, I don't think I have much enthusiasm for fixing the remaining <code>T50000</code> problems under <code>category_theory</code>. I did one, as <a href=\"https://github.com/leanprover-community/mathlib/issues/2840\">#2840</a>, but the only fix in the other two cases is going to be writing out boring proofs that <code>tidy</code> is handling just fine.</p>",
        "id": 198871578,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1590573815
    },
    {
        "content": "<p>My vote is that we declare <code>-T100000</code> the goalposts.</p>",
        "id": 198871603,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1590573838
    },
    {
        "content": "<p>OK, I just put <a href=\"https://github.com/leanprover-community/mathlib/issues/2276\">#2276</a> on the queue. This will probably lead to a (trivial) merge conflict in <a href=\"https://github.com/leanprover-community/mathlib/issues/2840\">#2840</a> due to the FIXME comments.</p>",
        "id": 198881186,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1590580907
    },
    {
        "content": "<p>I believe <a href=\"https://github.com/leanprover-community/mathlib/blob/a372dfce1f660bf6590ff29a32f9aa2a141a81ad/src/category_theory/limits/shapes/binary_products.lean#L696\">https://github.com/leanprover-community/mathlib/blob/a372dfce1f660bf6590ff29a32f9aa2a141a81ad/src/category_theory/limits/shapes/binary_products.lean#L696</a> is fixed, but I'm not really sure how to check to be sure, doing <code>lean --make src/category_theory/limits/shapes/binary_products.lean -T50000</code> works for me though</p>",
        "id": 219640047,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1607709790
    },
    {
        "content": "<p>Great! Yeah, I don't know that we want to enforce <code>-T50000</code>, though it might be interesting to open up a draft PR again and check the failures.</p>\n<p>I think there are some other slow proofs that are probably higher priority, e.g. <a href=\"https://github.com/leanprover-community/mathlib/issues/4832\">#4832</a>.</p>",
        "id": 219652026,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1607715495
    },
    {
        "content": "<p>I don't know what the associated <code>T</code> value is, but I got some speedups in <a href=\"https://github.com/leanprover-community/mathlib/issues/5383\">#5383</a></p>",
        "id": 220037599,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1608064120
    }
]