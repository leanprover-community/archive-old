[
    {
        "content": "<p>On a side note, I've been trying a branch to refactor the default cast to nat to be <code>nat.bin_cast</code>. It hasn't been going well. There's a lot of abuse of numeral notation, like this: <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pgame.short_nat\">docs#pgame.short_nat</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pgame.short_bit0\">docs#pgame.short_bit0</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pgame.short_bit1\">docs#pgame.short_bit1</a>. The data-relation <code>pgame.relabelling</code> has an \"add_monoid\"al aspect to it, but trying to show that via a sigma type hasn't worked out. And the proofs juggling around <code>pgame.relabelling</code> have been difficult, because I couldn't get <code>calc</code> to work with it.</p>",
        "id": 225876652,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1612978504
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/reasoning.20with.20strings/near/225876439\">said</a>:</p>\n<blockquote>\n<p>In the PR you linked though, you are parsing decimal strings, so the obvious approach would be to look for 0-9 and evaluate <code>10*n+a</code>  for each digit</p>\n</blockquote>\n<p>That's exactly what <a href=\"https://leanprover-community.github.io/mathlib_docs/find/parser.nat/src\">src#parser.nat</a> does</p>",
        "id": 225876830,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1612978571
    },
    {
        "content": "<p>(moved from <a class=\"stream-topic\" data-stream-id=\"113488\" href=\"/#narrow/stream/113488-general/topic/semantics.20of.20description.20logics.3A.20binary.20representation.20of.2E.2E.2E\">#general &gt; semantics of description logics: binary representation of...</a>)</p>",
        "id": 225880509,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612979882
    },
    {
        "content": "<p>What if you generalized <code>parser.nat</code> to any type with <code>+</code> and <code>*</code>, instead of parsing to <code>nat</code> and then casting to <code>A</code>?</p>",
        "id": 225880626,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612979921
    },
    {
        "content": "<p>Sure, but that was a change in core, as opposed to adding a variant in mathlib</p>",
        "id": 225880771,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1612979989
    },
    {
        "content": "<p>I'm not sure it's a good idea to change <code>nat.cast</code> to <code>nat.bin_cast</code> since this impacts all other users</p>",
        "id": 225880774,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612979990
    },
    {
        "content": "<p>You can just copy/paste the definition</p>",
        "id": 225880840,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612980003
    },
    {
        "content": "<p>Agreed, I was just testing if it worked. In general, I wasn't sure if there were any types with <code>has_zero</code> <code>has_one</code> and <code>has_add</code> that were not <code>add_monoid</code>. But the <code>pgame</code> related things are.</p>",
        "id": 225880975,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1612980057
    },
    {
        "content": "<p>Yeah, that's what <code>surreal</code> is about, it's the quotient of <code>pgame</code> by associativity among other things</p>",
        "id": 225881287,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612980186
    },
    {
        "content": "<p>not sure how that affects your refactor though</p>",
        "id": 225881464,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612980245
    },
    {
        "content": "<p>All sorts of lemmas like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pgame.short_nat/src\">src#pgame.short_nat</a> break, because they use the equation compiler to break into the <code>0</code> and <code>succ</code> case instead of what now has to be <code>0, 1, bit0, bit1</code> and require more passing of assumptions about <code>0 + 0 ~ 0</code> and <code>x + y + z ~ x + (y + z)</code>, etc.</p>",
        "id": 225881692,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1612980354
    },
    {
        "content": "<p>That theorem would have to be proven by binary recursion if you want to prove the analogous result for <code>nat.bin_cast</code></p>",
        "id": 225881846,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612980412
    },
    {
        "content": "<p>you don't need associativity to prove it</p>",
        "id": 225881884,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612980434
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 225881924,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1612980454
    },
    {
        "content": "<p>I had issues using <code>nat.binary_rec</code> for this</p>",
        "id": 225881959,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1612980472
    },
    {
        "content": "<p>Well this is part of why I said it might not be a good idea, <code>nat.bin_cast</code> is defined by binary recursion so you need a good story for doing proofs by binary recursion if you want to replace it</p>",
        "id": 225882089,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612980527
    }
]