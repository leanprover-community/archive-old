[
    {
        "content": "<div class=\"codehilite\"><pre><span></span>def foo : bool → nat → unit\n| tt 0     := ()\n| tt m     := ()\n| ff 0     := ()\n| ff (m+1) := foo ff m\n</pre></div>\n\n\n<p>For some reason Lean thinks the second case is unnecessary and gives an equation compiler error. If I remove the case, however, it correctly reports that I'm missing the case <code>foo tt (nat.succ _)</code>. I wonder what's going on here?</p>",
        "id": 159818340,
        "sender_full_name": "Seul Baek",
        "timestamp": 1551566344
    },
    {
        "content": "<p><code>equation compiler error, equation #2 has not been used in the compilation (possible solution: delete equation)</code></p>",
        "id": 159818407,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1551566508
    },
    {
        "content": "<p>(lawyer mode) they didn't say delete equation 2 :P</p>",
        "id": 159818411,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1551566521
    },
    {
        "content": "<p>rofl</p>",
        "id": 159818452,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1551566527
    },
    {
        "content": "<p>(lawyer mode) I deleted equation 1 and it worked, so the error message isn't lying</p>",
        "id": 159818453,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1551566532
    },
    {
        "content": "<p>I think it was used</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">bool</span> <span class=\"bp\">→</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span>\n<span class=\"bp\">|</span> <span class=\"n\">tt</span> <span class=\"mi\">0</span>     <span class=\"o\">:=</span> <span class=\"n\">ff</span>\n<span class=\"bp\">|</span> <span class=\"n\">tt</span> <span class=\"n\">m</span>     <span class=\"o\">:=</span> <span class=\"n\">tt</span>\n<span class=\"bp\">|</span> <span class=\"n\">ff</span> <span class=\"mi\">0</span>     <span class=\"o\">:=</span> <span class=\"n\">ff</span>\n<span class=\"bp\">|</span> <span class=\"n\">ff</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">foo</span> <span class=\"n\">ff</span> <span class=\"n\">m</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">foo</span> <span class=\"n\">tt</span> <span class=\"mi\">1</span>\n</pre></div>",
        "id": 159818459,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1551566571
    },
    {
        "content": "<p>I am trying to use a match statement in the definition of a tactic.  If I have more than 5 cases in the match, I get the error message \"equation compiler failed, maximum number of steps (2048) exceeded.\"  Is there a limit of 5 cases in a match?</p>",
        "id": 264645757,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1639346290
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 264647038,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1639347806
    },
    {
        "content": "<p>It sounds like each of your cases is rather complex</p>",
        "id": 264651467,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639353903
    },
    {
        "content": "<p>They're just pattern matching on an expression.</p>",
        "id": 264654382,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1639358128
    },
    {
        "content": "<p>I have a workaround: a smaller number of cases, and each case calls a function with a few cases.  But I'm surprised that I had to resort to that.</p>",
        "id": 264654597,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1639358430
    },
    {
        "content": "<p>Without a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> or at least a link to a github repo with failing code, I doubt anyone can diagnose further.</p>",
        "id": 264676343,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639385034
    }
]