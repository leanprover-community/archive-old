[
    {
        "content": "<p>With <code>@[derive decidable_eq]</code> one can automatically make the following inductive type an instance of decidable equality. How about automatically deriving inhabitance for inductive types? Is that also possible? Currently, <code>failed to find a derive handler for 'inhabited'</code>.</p>",
        "id": 158455271,
        "sender_full_name": "Hans-Dieter Hiep",
        "timestamp": 1550075808
    },
    {
        "content": "<p><code>@[derive X]</code> looks for derive_handler with the <code>@[derive_handler] </code> attribute on it and then uses that tactic to derive stuff. Afaik nobody has made one for <code>inhabited</code> but you can write your own in Lean.</p>",
        "id": 158455668,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1550076076
    },
    {
        "content": "<p>Lean core has support for <code>decidable_eq</code>, <code>sizeof</code>, <code>has_reflect</code>.</p>",
        "id": 158455763,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1550076153
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> wrote some in mathlib for category theory.</p>",
        "id": 158455802,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1550076188
    },
    {
        "content": "<p>You can see how <code>@[derive decidable_eq]</code> works in <code>library/init/meta/mk_dec_eq_instance.lean</code>.</p>",
        "id": 158455898,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1550076259
    },
    {
        "content": "<p>Something on my todo list is to write a <code>@[derive decidable_lt]</code>.</p>",
        "id": 158455941,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1550076321
    },
    {
        "content": "<p>Ah, there's a <code>library/init/meta/mk_inhabited_instance.lean</code></p>",
        "id": 158456592,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1550076797
    },
    {
        "content": "<p>So this works for me:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">derive_handler</span><span class=\"o\">]</span> <span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">inhabited_derive_handler</span> <span class=\"o\">:=</span>\n<span class=\"n\">instance_derive_handler</span> <span class=\"bp\">``</span><span class=\"n\">inhabited</span> <span class=\"n\">mk_inhabited_instance</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">derive</span> <span class=\"n\">inhabited</span><span class=\"o\">]</span>\n<span class=\"kn\">inductive</span> <span class=\"n\">hello</span> <span class=\"bp\">|</span> <span class=\"n\">A</span> <span class=\"bp\">|</span> <span class=\"n\">B</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">derive</span> <span class=\"n\">inhabited</span><span class=\"o\">]</span>\n<span class=\"kn\">inductive</span> <span class=\"n\">world</span>\n<span class=\"bp\">|</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">string</span> <span class=\"bp\">â†’</span> <span class=\"n\">world</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">world_inhabited</span> <span class=\"o\">:</span> <span class=\"n\">inhabited</span> <span class=\"n\">world</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span>\n</pre></div>",
        "id": 158456839,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1550076953
    },
    {
        "content": "<p>I don't know why Leo didn't add the <code>@[derive_handler]</code> for inhabited.</p>",
        "id": 158456955,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1550077007
    },
    {
        "content": "<blockquote>\n<p>I don't know why Leo didn't add the <code>@[derive_handler]</code> for inhabited.</p>\n</blockquote>\n<p>Maybe this: <a href=\"https://github.com/leanprover/lean/pull/1818#issuecomment-328931432\" target=\"_blank\" title=\"https://github.com/leanprover/lean/pull/1818#issuecomment-328931432\">https://github.com/leanprover/lean/pull/1818#issuecomment-328931432</a> ?</p>",
        "id": 158457539,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1550077377
    }
]