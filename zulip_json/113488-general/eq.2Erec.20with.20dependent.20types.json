[
    {
        "content": "<p>I'm having some trouble using rw on goals that involve many dependent types. I have (omitting some for clarity):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span>\n<span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span>\n<span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">,</span> <span class=\"n\">V</span> <span class=\"n\">i</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"n\">V</span> <span class=\"n\">i</span>\n<span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span>\n<span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">,</span> <span class=\"n\">basis</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n<span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">n</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x.1</span> <span class=\"bp\">=</span> <span class=\"n\">y.1</span>\n</code></pre></div>\n<p>I've gotten to a point where the goal is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">eq.rec</span> <span class=\"o\">(</span><span class=\"bp\">⇑</span><span class=\"o\">((</span><span class=\"n\">b</span> <span class=\"n\">y.1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">repr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">⇑</span><span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">y.1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">⇑</span><span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"n\">y.1</span><span class=\"o\">)</span> <span class=\"n\">y.2</span><span class=\"o\">)))</span> <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"bp\">⇑</span><span class=\"o\">((</span><span class=\"n\">b</span> <span class=\"n\">x.1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">repr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">⇑</span><span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x.1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">⇑</span><span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"n\">x.1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">cast</span> <span class=\"n\">_</span> <span class=\"n\">y.2</span><span class=\"o\">)))</span>\n</code></pre></div>\n<p>The underscore on the LHS is a proof of <code>y.1 = x.1</code>. How can I finish such a goal?</p>\n<p><code>rw h</code> throws <code>motive is not type correct</code>. After I add a further hypothesis <code>hn : n x.1 = n y.1</code> and use <code>simp_rw h</code>, it is still unable to simplify the expression further.</p>",
        "id": 286843101,
        "sender_full_name": "Winston Yin",
        "timestamp": 1655763119
    },
    {
        "content": "<p>Can you give a mwe?</p>",
        "id": 286843432,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1655763422
    },
    {
        "content": "<p><code>x y : n</code> feels like nonsense there given <code>n : ι → Type*</code></p>",
        "id": 286843441,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1655763432
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/eq.2Erec.20with.20dependent.20types/near/286843441\">said</a>:</p>\n<blockquote>\n<p><code>x y : n</code> feels like nonsense there given <code>n : ι → Type*</code></p>\n</blockquote>\n<p>Fixed. Those should be Sigmas</p>",
        "id": 286843521,
        "sender_full_name": "Winston Yin",
        "timestamp": 1655763504
    },
    {
        "content": "<p><code>cases x, cases y, dsimp only at *, subst h</code> might help</p>",
        "id": 286843534,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1655763518
    },
    {
        "content": "<p>That works! Could you explain the heuristic behind this?</p>",
        "id": 286843699,
        "sender_full_name": "Winston Yin",
        "timestamp": 1655763687
    },
    {
        "content": "<p>You want to get your equalities to have a single variable on one side, so that you can use <code>subst</code> (aka <code>cases h</code>)</p>",
        "id": 286843718,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1655763714
    },
    {
        "content": "<p>Also I am not familiar with <code>dsimp</code> or <code>at *</code></p>",
        "id": 286843733,
        "sender_full_name": "Winston Yin",
        "timestamp": 1655763724
    },
    {
        "content": "<p><code>dsimp only at *</code> turns annoying <code>(sigma.mk x y).fst</code> goals into <code>x</code></p>",
        "id": 286843806,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1655763777
    },
    {
        "content": "<p><code>at *</code> does it at all the hypotheses</p>",
        "id": 286843819,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1655763790
    },
    {
        "content": "<p>I see. Basically Lean can't substitute <code>x.1 = y.1</code> but can substitute <code>x_fst = y_fst</code> once I've <code>cases</code>-ed on <code>x, y</code></p>",
        "id": 286843986,
        "sender_full_name": "Winston Yin",
        "timestamp": 1655763954
    },
    {
        "content": "<p>Thanks a lot.</p>",
        "id": 286844039,
        "sender_full_name": "Winston Yin",
        "timestamp": 1655763968
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#dsimp\">tactic#dsimp</a> is a like <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#simp\">tactic#simp</a> but only uses simp lemmas that are definitionally true (so it's as if you did a sequence of <code>change</code> tactics). <a href=\"https://leanprover-community.github.io/extras/simp.html\">https://leanprover-community.github.io/extras/simp.html</a> mentions dsimp</p>",
        "id": 286844083,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1655764030
    },
    {
        "content": "<p>Something else that can be helpful is using <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#generalize\">tactic#generalize</a> to turn certain expressions into variables so you can subst them</p>",
        "id": 286844114,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1655764069
    },
    {
        "content": "<p>Yet another thing that can be helpful is stepping back and wondering how you got into this <code>eq.rec</code> business anyway <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 286844164,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1655764089
    },
    {
        "content": "<p>I'm doing my best to avoid proving things about <code>dfinsupp</code> because scary things happen when I try.</p>",
        "id": 286844233,
        "sender_full_name": "Winston Yin",
        "timestamp": 1655764192
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113488-general/topic/eq.2Erec.20with.20dependent.20types/near/286844164\">said</a>:</p>\n<blockquote>\n<p>Yet another thing that can be helpful is stepping back and wondering how you got into this <code>eq.rec</code> business anyway <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>\n</blockquote>\n<p>For example, it might have been better to do this <code>cases x, cases y, subst h</code> business <em>before</em> <code>eq.rec</code> appeared</p>",
        "id": 286845356,
        "sender_full_name": "Reid Barton",
        "timestamp": 1655765264
    }
]