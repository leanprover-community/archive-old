[
    {
        "content": "<p>I came across the following interesting performance issue on <a href=\"https://github.com/leanprover-community/mathlib/tree/fun_like\">branch#fun_like</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.complex.basic</span>\n<span class=\"kn\">open</span> <span class=\"n\">complex</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">profiler</span> <span class=\"n\">true</span>\n\n<span class=\"c1\">-- master: 10-20 ms</span>\n<span class=\"c1\">-- to_fun: 10-20 ms</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">has_sum</span> <span class=\"n\">f</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">has_sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">re</span><span class=\"o\">)</span> <span class=\"n\">c.re</span> <span class=\"o\">:=</span>\n<span class=\"n\">re_clm.has_sum</span> <span class=\"n\">h</span>\n\n<span class=\"c1\">-- master: 2 s</span>\n<span class=\"c1\">-- to_fun: 25 s</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">foo'</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">has_sum</span> <span class=\"n\">f</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">has_sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">re</span><span class=\"o\">)</span> <span class=\"n\">c.re</span> <span class=\"o\">:=</span>\n<span class=\"n\">continuous_linear_map.has_sum</span> <span class=\"n\">re_clm</span> <span class=\"n\">h</span>\n\n<span class=\"c1\">-- master: 2s</span>\n<span class=\"c1\">-- to_fun: 25s</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">bar</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">has_sum</span> <span class=\"n\">f</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">has_sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">re</span><span class=\"o\">)</span> <span class=\"n\">c.re</span> <span class=\"o\">:=</span>\n<span class=\"n\">h.mapL</span> <span class=\"n\">re_clm</span>\n\n<span class=\"c1\">-- master: 2s</span>\n<span class=\"c1\">-- to_fun: 25s</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">bar'</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">has_sum</span> <span class=\"n\">f</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">has_sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">re</span><span class=\"o\">)</span> <span class=\"n\">c.re</span> <span class=\"o\">:=</span>\n<span class=\"n\">has_sum.mapL</span> <span class=\"n\">re_clm</span> <span class=\"n\">h</span>\n</code></pre></div>\n<p>Looking at the defeq trace, the slow paths try to unify <code>has_sum (λ (x : α), (f x).re) c.re =?= has_sum (λ (b : ?m_2), ⇑?m_12 (?m_13 b)) (⇑?m_12 ?m_14)</code>, and because the RHS is so underdetermined get stuck at <code>(f b).re =?= has_coe_to_fun.coe ?m_9 (?m_10 b)</code>, because they want to unify <code>re =?= continuous_linear_map.to_fun</code>.</p>",
        "id": 261128970,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1636634910
    }
]