[
    {
        "content": "<p>Is there a way to state a single theorem which generalizes all the following theorems?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">measure_theory.function.lp_space</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">measure_theory</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">ennreal</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">measurable_space</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_group</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">measurable_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">measure_theory.measure</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">mem_ℒp</span> <span class=\"n\">f</span> <span class=\"mi\">2</span> <span class=\"n\">μ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∫⁻</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">∥</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"bp\">∥₊</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">∂</span><span class=\"n\">μ</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">∞</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">convert</span> <span class=\"n\">lintegral_rpow_nnnorm_lt_top_of_snorm_lt_top</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">hf.snorm_lt_top</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">norm_cast</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">norm_num</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">norm_num</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">mem_ℒp</span> <span class=\"n\">f</span> <span class=\"mi\">3</span> <span class=\"n\">μ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∫⁻</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">∥</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"bp\">∥₊</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span> <span class=\"bp\">∂</span><span class=\"n\">μ</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">∞</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">convert</span> <span class=\"n\">lintegral_rpow_nnnorm_lt_top_of_snorm_lt_top</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">hf.snorm_lt_top</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">norm_cast</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">norm_num</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">norm_num</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">mem_ℒp</span> <span class=\"n\">f</span> <span class=\"mi\">4</span> <span class=\"n\">μ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∫⁻</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">∥</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"bp\">∥₊</span> <span class=\"bp\">^</span> <span class=\"mi\">4</span> <span class=\"bp\">∂</span><span class=\"n\">μ</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">∞</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">convert</span> <span class=\"n\">lintegral_rpow_nnnorm_lt_top_of_snorm_lt_top</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">hf.snorm_lt_top</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">norm_cast</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">norm_num</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">norm_num</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 266082947,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1640479244
    },
    {
        "content": "<p>The point is that, taking the first one as an example,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">mem_ℒp</span> <span class=\"n\">f</span> <span class=\"mi\">2</span> <span class=\"n\">μ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∫⁻</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">∥</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"bp\">∥₊</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">∂</span><span class=\"n\">μ</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">∞</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>the first 2 is an <code>ennreal</code> 2, and the second 2 is a <code>nat</code> 2.</p>",
        "id": 266082960,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1640479282
    },
    {
        "content": "<p>So the theorem statement I want is, \"given a particular sequence <code>s</code> of <code>bit0</code> and <code>bit1</code> applications, if <code>f</code> is in Lp of the <code>ennreal</code> constructed from <code>s</code>, then a certain thing involving the <code>nat</code> constructed from <code>s</code> is bounded.\"</p>",
        "id": 266083012,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1640479370
    },
    {
        "content": "<p>why doesn't <code>(n : nat) (hf : blah (n : ennreal))</code> work?</p>",
        "id": 266083145,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1640479612
    },
    {
        "content": "<p>Because coercion from <code>nat</code> to <code>ennreal</code> is not defeq to the corresponding number literal.</p>",
        "id": 266083412,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1640480092
    },
    {
        "content": "<p>okay, sure, but it's 1 rw</p>",
        "id": 266083421,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1640480119
    },
    {
        "content": "<p>or is that really annoying? idk how this part of the library works</p>",
        "id": 266083425,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1640480137
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> Do you really need defeq here?</p>",
        "id": 266083744,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1640480574
    },
    {
        "content": "<p>You can easily prove a version with <code>nat</code>, <code>pow</code>, and <code>coe</code>.</p>",
        "id": 266083755,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1640480614
    },
    {
        "content": "<p>It will only assume <code>n ≠ 0</code>.</p>",
        "id": 266083800,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1640480643
    },
    {
        "content": "<p>This is a toy example (actually it will be for the new Lp spaces in  <a href=\"https://github.com/leanprover-community/mathlib/pull/11015\">#11015</a>).  I only need the <code>2</code> version (it's to simplify repeatedly-occuring calculations for inner product spaces, and I'd like to have it available for dot notation).  But it's a bit sad to state just the 2 version if there somehow is a way to express the general version.</p>",
        "id": 266083824,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1640480749
    },
    {
        "content": "<p>You can formulate it for <code>nat</code> and <code>coe</code>, then specialize (with <code>simpa using ...</code> or <code>exact_mod_cast</code>).</p>",
        "id": 266083900,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1640480859
    },
    {
        "content": "<p>AFAIK, in Lean 4 number literals are implemented using coercion from <code>Nat</code>.</p>",
        "id": 266083944,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1640480896
    },
    {
        "content": "<p>I was hoping there was something clever involving <a href=\"https://leanprover-community.github.io/mathlib_docs/find/parser.numeral\">docs#parser.numeral</a> or suchlike.</p>",
        "id": 266083950,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1640480920
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/113488-general/topic/Stating.20a.20theorem.20involving.20two.20.60bit0.60.20.2F.20.60bit1.60/near/266083944\">said</a>:</p>\n<blockquote>\n<p>AFAIK, in Lean 4 number literals are implemented using coercion from <code>Nat</code>.</p>\n</blockquote>\n<p>But this is interesting, I guess it means there'd be a limited shelf-life for such a trick even if it did exist.</p>",
        "id": 266084051,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1640481122
    }
]