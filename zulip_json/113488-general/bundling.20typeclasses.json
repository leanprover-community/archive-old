[
    {
        "content": "<p>I'm working with types that usually have bunch of data attached with typeclasses and my theorems quite often look like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">l1</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semimodule</span> <span class=\"n\">ℝ</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">locally_convex_space</span> <span class=\"n\">ℝ</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>I would like to bundle these type classes together. I have tried </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">LCS</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">add_comm_group</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">semimodule</span> <span class=\"n\">ℝ</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">topological_space</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">locally_convex_space</span> <span class=\"n\">ℝ</span> <span class=\"n\">X</span>\n</code></pre></div>\n<p>Now I can simply write </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">l1</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">LCS</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>This is nice and more or less solves my problem, but in some cases I would like to automatically get instance of <code>LCS X</code> if I have <code>add_comm_group X, semimodule ℝ X, topological_space X, locally_convex_space ℝ X</code>. So I define an instance:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">LCS.make</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semimodule</span> <span class=\"n\">ℝ</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">locally_convex_space</span> <span class=\"n\">ℝ</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">LCS</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"n\">LCS.mk</span>\n</code></pre></div>\n<p>But this can cause cycles during typeclass resolution. How do I deal with this problem?</p>",
        "id": 217263856,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1605790065
    },
    {
        "content": "<p>Judging by the way things are done in mathlib, the usual approach is to make things variables and list all the typeclasses at the top of the file/section/namespace, so at least they don't clutter up the lemmas.</p>",
        "id": 217264251,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605790274
    },
    {
        "content": "<p>Yes I have observed that is usually the way it is done. But I have started using categorical part of mathlib and suddenly everything is bundled. So I was thinking creating one typeclass and then using <code>category_theory.bundled</code>. However, I'm really confused how to do things because the definition of <code>Module</code> for example, does not use <code>bundled</code>.</p>",
        "id": 217265514,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1605791004
    },
    {
        "content": "<p>I've been told that <code>class one_argument (X: Type) extends two_arguments R X</code> is a bad idea and you should never do it.</p>",
        "id": 217281755,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1605798492
    },
    {
        "content": "<p><code>class two_arguments R X extends one_argument X</code> is bad because it creates an instance of <code>one_argument X</code> that depends on an underspecified variable <code>R</code>.</p>",
        "id": 217284841,
        "sender_full_name": "Reid Barton",
        "timestamp": 1605799763
    }
]