[
    {
        "content": "<p>I was surprised to find that <code>tauto</code> could not manage the following:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">misc_tauto_a</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨λ</span> <span class=\"n\">h_p_to_pq</span> <span class=\"n\">hp</span><span class=\"o\">,(</span><span class=\"n\">h_p_to_pq</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">hp</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">right</span><span class=\"o\">,</span>\n <span class=\"bp\">λ</span> <span class=\"n\">h_p_to_q</span><span class=\"o\">,</span> <span class=\"bp\">⟨λ</span> <span class=\"n\">hp</span><span class=\"o\">,</span><span class=\"bp\">⟨</span><span class=\"n\">hp</span><span class=\"o\">,</span><span class=\"n\">h_p_to_q</span> <span class=\"n\">hp</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">hpq</span><span class=\"o\">,</span><span class=\"n\">hpq</span><span class=\"bp\">.</span><span class=\"n\">left</span><span class=\"bp\">⟩⟩</span>\n</pre></div>\n\n\n<p>Is there some straightforward rule about the kind of things that <code>tauto</code> can or cannot do?</p>",
        "id": 161245981,
        "sender_full_name": "Neil Strickland",
        "timestamp": 1553087981
    },
    {
        "content": "<p><code>cc</code>, <code>finish</code> and <code>simp</code> can't do it either (unless I messed up)</p>",
        "id": 161246472,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553088316
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">misc_tauto_a</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"o\">(</span><span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">em</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n  <span class=\"n\">cases</span> <span class=\"o\">(</span><span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">em</span> <span class=\"n\">q</span><span class=\"o\">),</span>\n  <span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">tauto</span><span class=\"o\">},</span>\n  <span class=\"c\">/-</span><span class=\"cm\"> one goal lives on!</span>\n<span class=\"cm\">  p q : Prop,</span>\n<span class=\"cm\">  h : p,</span>\n<span class=\"cm\">  h_1 : ¬q</span>\n<span class=\"cm\">  ⊢ p ↔ p ∧ q ↔ p → q</span>\n<span class=\"cm\">  -/</span>\n  <span class=\"n\">cc</span><span class=\"o\">,</span> <span class=\"c1\">-- does all of them</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 161246763,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553088556
    },
    {
        "content": "<p>Once you split into cases, both <code>cc</code> and <code>finish</code> do everything.</p>",
        "id": 161246842,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553088608
    },
    {
        "content": "<p>It's situations like this for which I break out good ol' <code>big_bertha</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">-- uncomment in case of emergency</span>\n<span class=\"c1\">-- @[tidy] meta def big_bertha : tactic unit := `[finish]</span>\n</pre></div>\n\n\n<p>viz.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">tidy</span><span class=\"o\">]</span> <span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">big_bertha</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">finish</span><span class=\"o\">]</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">misc_tauto_a</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">tidy</span>\n</pre></div>",
        "id": 161273889,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1553104700
    },
    {
        "content": "<p>Have you tried <code>tauto!</code>? With the exclamation mark, you allow <code>tauto</code> to use the excluded middle.</p>",
        "id": 161274130,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1553104815
    },
    {
        "content": "<p>In the Netherlands \"Bertha\" is the universal name for a cow <span aria-label=\"cow\" class=\"emoji emoji-1f404\" role=\"img\" title=\"cow\">:cow:</span> <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 161274715,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553105091
    },
    {
        "content": "<p><a href=\"https://en.wikipedia.org/wiki/Big_Bertha_(howitzer)\" target=\"_blank\" title=\"https://en.wikipedia.org/wiki/Big_Bertha_(howitzer)\">https://en.wikipedia.org/wiki/Big_Bertha_(howitzer)</a></p>",
        "id": 161274789,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1553105129
    },
    {
        "content": "<p>This is what Bertha means in France</p>",
        "id": 161274811,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1553105145
    },
    {
        "content": "<p>Aaah, didn't know that one...</p>",
        "id": 161274826,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553105154
    },
    {
        "content": "<p>Neil's proof doesn't seem to use classical logic</p>",
        "id": 161276027,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553105828
    },
    {
        "content": "<p><code>tauto</code> is under-develop as far as constructive reasoning is concerned. Maybe I should remove the option</p>",
        "id": 161277815,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1553106783
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">tidy</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">tidy</span><span class=\"o\">]</span> <span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">big_bertha</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">finish</span><span class=\"o\">]</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">misc_tauto_a</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">tidy</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">axioms</span> <span class=\"n\">misc_tauto_a</span>\n<span class=\"c1\">-- all of them</span>\n</pre></div>\n\n\n<p>I don't know if axioms are an issue for Neil.</p>",
        "id": 161283192,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553110424
    },
    {
        "content": "<p>I understand. What I'm saying is that the proof procedure is different if you don't have access to excluded middle. When you do have access to it, <code>tauto</code> applies it more than is necessary</p>",
        "id": 161283395,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1553110564
    },
    {
        "content": "<p><code>finish</code> invokes classical logic during its preprocessing step, but as Kevin observed, after enough splitting <code>cc</code> will close the goal (and <code>tidy</code> automates the <code>split</code>ting and <code>intro</code>-ing):</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">tidy</span><span class=\"o\">]</span><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">not_as_big_bertha</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">cc</span><span class=\"o\">]</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">misc_tauto_a</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">tidy</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">axioms</span> <span class=\"n\">misc_tauto_a</span>\n<span class=\"c1\">-- propext</span>\n</pre></div>",
        "id": 161283691,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1553110810
    },
    {
        "content": "<p>is it fast?</p>",
        "id": 161285283,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1553111903
    },
    {
        "content": "<p><code>tidy</code> is pretty much always slow (in this case, according to the profiler, an order of magnitude slower than <code>tauto!</code>)</p>",
        "id": 161286002,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1553112351
    },
    {
        "content": "<p>But in the future computers will be so fast that we won't notice the difference.</p>",
        "id": 161286333,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553112548
    },
    {
        "content": "<p>I don't know if you're being sincere but this is a pretty old refrain in computer science. The typical response to it is that software gets slow faster than hardware gets fast. Neglecting performances is not a great attitude</p>",
        "id": 161297776,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1553120995
    },
    {
        "content": "<p>It sounds like I am simply being naive! This is perhaps not unexpected given my background. I was assuming you guys were tending to us -- our proofs run at infinite speed. A referee compiles them once, with quite a buggy and heuristic compiler, and then we have the bytecode forever in pdf form.</p>",
        "id": 161298076,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553121242
    },
    {
        "content": "<p>Quick practical question:</p>\n<p><em>(NB. I'm on Emacs)</em></p>\n<p>If I write</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">misc_tauto_a&#39;</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n <span class=\"o\">{</span><span class=\"bp\">!</span> <span class=\"bp\">!</span><span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>and then run <code>lean-hole</code> with the cursor in the <code>{! !}</code> region,</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">misc_tauto_a&#39;</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n <span class=\"k\">begin</span> <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"kn\">end</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>However,</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">misc_tauto_a</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">tidy</span><span class=\"err\">?</span>\n</pre></div>\n\n\n<p>gives instead:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c\">/-</span><span class=\"cm\"> `tidy` says -/</span> <span class=\"n\">fsplit</span><span class=\"o\">,</span> <span class=\"n\">work_on_goal</span> <span class=\"mi\">0</span> <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">a_1</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">big_bertha</span> <span class=\"o\">},</span> <span class=\"n\">intros</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">fsplit</span><span class=\"o\">,</span> <span class=\"n\">work_on_goal</span> <span class=\"mi\">0</span> <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">a_1</span><span class=\"o\">,</span> <span class=\"n\">fsplit</span><span class=\"o\">,</span> <span class=\"n\">work_on_goal</span> <span class=\"mi\">0</span> <span class=\"o\">{</span> <span class=\"n\">assumption</span> <span class=\"o\">},</span> <span class=\"n\">solve_by_elim</span> <span class=\"o\">},</span> <span class=\"n\">intros</span> <span class=\"n\">a_1</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">a_1</span><span class=\"o\">,</span> <span class=\"n\">assumption</span>\n</pre></div>\n\n\n<p>Is this a known issue?</p>",
        "id": 164074099,
        "sender_full_name": "Joseph Corneli",
        "timestamp": 1556107310
    },
    {
        "content": "<p>nice to see big bertha made it into your mathlib :-)</p>",
        "id": 164074348,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556107561
    },
    {
        "content": "<p>Oops, how about this as a complete working example:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">tidy</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">tidy</span><span class=\"o\">]</span> <span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">big_bertha</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">finish</span><span class=\"o\">]</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">misc_tauto_a</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">tidy</span><span class=\"err\">?</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">axioms</span> <span class=\"n\">misc_tauto_a</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">misc_tauto_a&#39;</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n <span class=\"o\">{</span><span class=\"bp\">!</span> <span class=\"bp\">!</span><span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 164078168,
        "sender_full_name": "Joseph Corneli",
        "timestamp": 1556110972
    },
    {
        "content": "<p>I reproduced the same substitution on VS Code. <a href=\"/user_uploads/3121/QPtkwI9FQSCOC67zykjXK0_W/Screen-Shot-2019-04-24-at-14.09.05.png\" target=\"_blank\" title=\"Screen-Shot-2019-04-24-at-14.09.05.png\">Screen-Shot-2019-04-24-at-14.09.05.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/QPtkwI9FQSCOC67zykjXK0_W/Screen-Shot-2019-04-24-at-14.09.05.png\" target=\"_blank\" title=\"Screen-Shot-2019-04-24-at-14.09.05.png\"><img src=\"/user_uploads/3121/QPtkwI9FQSCOC67zykjXK0_W/Screen-Shot-2019-04-24-at-14.09.05.png\"></a></div>",
        "id": 164078682,
        "sender_full_name": "Joseph Corneli",
        "timestamp": 1556111391
    },
    {
        "content": "<p>I don't think we can use Lean hole in tactic mode</p>",
        "id": 164079162,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1556111772
    },
    {
        "content": "<p>OK!  Thanks!</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">misc_tauto_a&#39;</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span><span class=\"bp\">!</span> <span class=\"bp\">!</span><span class=\"o\">}</span>\n</pre></div>\n\n\n<p>... that comes up with the correct substitution, <em>viz.</em>,</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">misc_tauto_a&#39;</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span> <span class=\"n\">fsplit</span><span class=\"o\">,</span> <span class=\"n\">work_on_goal</span> <span class=\"mi\">0</span> <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">a_1</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">big_bertha</span> <span class=\"o\">},</span> <span class=\"n\">intros</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">fsplit</span><span class=\"o\">,</span> <span class=\"n\">work_on_goal</span> <span class=\"mi\">0</span> <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">a_1</span><span class=\"o\">,</span> <span class=\"n\">fsplit</span><span class=\"o\">,</span> <span class=\"n\">work_on_goal</span> <span class=\"mi\">0</span> <span class=\"o\">{</span> <span class=\"n\">assumption</span> <span class=\"o\">},</span> <span class=\"n\">solve_by_elim</span> <span class=\"o\">},</span> <span class=\"n\">intros</span> <span class=\"n\">a_1</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">a_1</span><span class=\"o\">,</span> <span class=\"n\">assumption</span> <span class=\"kn\">end</span>\n</pre></div>",
        "id": 164080018,
        "sender_full_name": "Joseph Corneli",
        "timestamp": 1556112478
    }
]