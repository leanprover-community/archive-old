[
    {
        "content": "<p>I was surprised to learn that for an equiv <code>e : α ≃ β</code>, it is not true that <code>e.symm.symm</code> is definitionally equal to <code>e</code>, even though each of their data fields is definitionally equal:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.equiv.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">≃</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">e.symm.symm</span> <span class=\"bp\">=</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>\n<p>There is a trick to get around this, which <span class=\"user-mention\" data-user-id=\"311453\">@Frédéric Dupuis</span> showed me:  I can define an equiv <code>e.self</code> which is a field-by-field copy of <code>e</code>, and <em>this</em> is definitionally equal to <code>e.symm.symm</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">equiv.self</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">≃</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">≃</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"n\">e.to_fun</span><span class=\"o\">,</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"n\">e.inv_fun</span><span class=\"o\">,</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"n\">e.left_inv</span><span class=\"o\">,</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"n\">e.right_inv</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">≃</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">e.self</span> <span class=\"bp\">=</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- fails</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">≃</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">e.symm.symm</span> <span class=\"bp\">=</span> <span class=\"n\">e.self</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- works</span>\n</code></pre></div>",
        "id": 245467676,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1625849432
    },
    {
        "content": "<p>I would like to understand this better -- why are <code>e.self</code> and <code>e</code> not definitionally equal?  Is this somehow fundamental to the axioms of Lean?  And is this trick to get around it the canonical workaround?</p>",
        "id": 245467897,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1625849534
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> This is the so-called eta-rule. And in Lean it doesn't count as defeq. There are pragmatical reasons to exclude it, because otherwise the typechecker goes crazy. But that's about all I know about this.</p>",
        "id": 245467907,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1625849538
    },
    {
        "content": "<p>eta for pi types is definitional, but not for inductive types. In other words, (lam x, f x) is defeq to f, but e.symm.symm is not defeq to e. I have no idea why this design decision was made.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">eta</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">,</span> <span class=\"n\">complex.mk</span> <span class=\"n\">z.re</span> <span class=\"n\">z.im</span> <span class=\"bp\">=</span> <span class=\"n\">z</span>\n<span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>(so the proof is \"cases, refl\" rather than \"refl\")</p>",
        "id": 245469840,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1625850365
    },
    {
        "content": "<p>This gave me a good search term for past conversations, which I am busily reading, thanks.</p>\n<p>To put my basic question rather naively:  Suppose I went through mathlib and I changed every occurence of an equiv <code>e</code> to <code>e.self</code> (according to this <code>equiv.self</code> definition I wrote above).  What would break?</p>",
        "id": 245470818,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1625850840
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/113488-general/topic/Unexpected.20non-defeq/near/245467897\">said</a>:</p>\n<blockquote>\n<p>I would like to understand this better -- why are <code>e.self</code> and <code>e</code> not definitionally equal?  Is this somehow fundamental to the axioms of Lean?  And is this trick to get around it the canonical workaround?</p>\n</blockquote>\n<p>I think the canonical work around is either to use <code>cases, refl</code> or <code>ext, refl</code> to prove it, or use <code>simp</code> to simplify it (after the equality lemma exists, which it does for symm_symm)</p>",
        "id": 245471220,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1625851043
    },
    {
        "content": "<p>Am I right in thinking that <code>coe_fn e = coe_fn e.symm.symm</code> is true by refl?</p>",
        "id": 245489258,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625860281
    },
    {
        "content": "<p>Do Coq or Agda allow the eta rule in determining defeq?</p>",
        "id": 245489540,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625860423
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/Unexpected.20non-defeq/near/245489258\">said</a>:</p>\n<blockquote>\n<p>Am I right in thinking that <code>coe_fn e = coe_fn e.symm.symm</code> is true by refl?</p>\n</blockquote>\n<p>Yes, because <code>coe_fn</code> on <code>equiv</code>s is <code>to_fun</code>, and as Heather mentions, the <code>to_fun</code> components are equal by <code>rfl</code></p>",
        "id": 245495316,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1625863405
    },
    {
        "content": "<p>For those interested, the nLab --- generally a good though sometimes quite technical resource for<br>\nlearning about type theory --- gives the <a href=\"https://ncatlab.org/nlab/show/eta-conversion\">following summary</a> (lightly edited by me for clarity)<br>\nof why a dependent type theory like Lean's or Coq's typically omits a definitional η-expansion rule:</p>\n<blockquote>\n<p>Coq versions 8.3 and prior do not implement definitional η-expansion, but versions 8.4 and higher<br>\ndo implement it for dependent product types (<em>i.e.</em>, function types). Even in Coq v8.4 and later,<br>\nη-expansion is not implemented for other types, such as inductive and coinductive types...<br>\nsince definitonal η-expansion for the identity type forces us into extensional dependent type theory.</p>\n<p>...if “equality” refers to the identity type in a dependent type theory, then η-expansion for an<br>\ninductively defined type is provable as an equality. This includes the identity type itself, but this<br>\n<em>propositional</em> form of η-expansion does not imply extensionality of the identity type because<br>\nthe identity type <em>itself</em> must be incorporated in stating the equivalence.</p>\n</blockquote>\n<p>By the way, I <em>think</em> that a dependent type theory can have definitonal η-conversion for a carefully<br>\nrestricted class of inductive types without becoming extensional, but don't quote me on that :-)</p>\n<p>Coincidentally, the absence of definitional η-expansion for inductive types (in Coq, not Lean) was<br>\na major <del>pain in the butt</del> intellectual challenge in a recent research paper to which I contributed:<br>\n<a href=\"https://dependenttyp.es/pdf/repair.pdf\">Proof Repair across Type Equivalences</a>, §4.1.</p>",
        "id": 246073798,
        "sender_full_name": "Nathaniel Yazdani",
        "timestamp": 1626343298
    },
    {
        "content": "<p>Your \"edit for clarity\" removed the crucial part: \"This is a good thing <strong>for homotopy type theory</strong>, since η-equivalence for identity types forces us into extensional type theory\". So we don't need to read what extensional type theory means since it's not relevant to us.</p>",
        "id": 246077466,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1626346007
    },
    {
        "content": "<p>Well, maybe it should be... it would mean that <code>motive is not type correct</code> is no longer a wall of steel that cannot move.</p>",
        "id": 246077636,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1626346147
    },
    {
        "content": "<p>Is that an answer to my message?</p>",
        "id": 246077684,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1626346178
    },
    {
        "content": "<p>Yes. Currently Lean doesn't support extensional type theory. But it's something that maybe should be part of the \"ideal\" proof assistant.</p>",
        "id": 246077807,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1626346250
    },
    {
        "content": "<p>But I didn't say definitional eta or extensional type theory isn't relevant to us. I said the explanation from nlab about why eta is bad is not relevant to us.</p>",
        "id": 246077942,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1626346326
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"416175\">Nathaniel Yazdani</span> <a href=\"#narrow/stream/113488-general/topic/Unexpected.20non-defeq/near/246073798\">said</a>:</p>\n<blockquote>\n<p>By the way, I <em>think</em> that a dependent type theory can have definitonal η-conversion for a carefully<br>\nrestricted class of inductive types without becoming extensional, but don't quote me on that :-)</p>\n</blockquote>\n<p>Agda has eta for most structure types (\"records\" in their terminology), including something like this <code>equiv</code> type. So it's certainly possible.</p>",
        "id": 246077975,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1626346354
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span>  Aha, then I misunderstood your message. Sorry.</p>",
        "id": 246077976,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1626346355
    },
    {
        "content": "<p>That's what I guessed. Sorry about that unclear message.</p>",
        "id": 246078034,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1626346395
    },
    {
        "content": "<p>Nathaniel's quote still applies, though, if you replace \"for homotopy type theory\" with \"for any type theory that wants to be intensional\", which includes Lean. So the explanation is relevant.</p>",
        "id": 246078388,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1626346645
    },
    {
        "content": "<p>I believe the comment in the ncatlab explanation about \"extensional type theory\" refers (confusingly) not to a type theory with an extensionality rule (which allows you to derive definitional equality from propositional equality), but instead to a type theory where <code>a = b</code> is a subsingleton...</p>",
        "id": 246079081,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1626347074
    },
    {
        "content": "<p>Eta for equality is indeed not helpful in HoTT (just like axiom K, but I don't know if there is a difference between the two).  For Lean this consideration is absolutely irrelevant though.</p>",
        "id": 246079222,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1626347175
    },
    {
        "content": "<p>What does eta for the identity type mean? Any <code>h : a = b</code> is def eq to <code>rfl : a = a</code>? But this only makes sense if <code>a</code> is def eq to <code>b</code>?</p>",
        "id": 246080058,
        "sender_full_name": "David Wärn",
        "timestamp": 1626347781
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/113488-general/topic/Unexpected.20non-defeq/near/246079081\">said</a>:</p>\n<blockquote>\n<p>I believe the comment in the ncatlab explanation about \"extensional type theory\" refers (confusingly) not to a type theory with an extensionality rule (which allows you to derive definitional equality from propositional equality), but instead to a type theory where <code>a = b</code> is a subsingleton...</p>\n</blockquote>\n<p>Ah! In that case I retract my previous statement and claim the opposite. (This saying works better in German.) The Agda remark still applies though.</p>",
        "id": 246081016,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1626348499
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> Lean's type theory is based closely on CiC, which is very much intensional. Also, the quote from nLab really does use \"extensional type theory\" to mean \"a dependent type theory with equality reflection,\" as the term is conventionally understood in PL research. Since my modest (IMO) paraphrasing of that nLab subsection --- which was just meant to reduce unfamiliar jargon for those not already experts in type theory --- elicited an unexpected degree of controversy, I will simply point to the relevant subsection of nLab's article on the identity type: <a href=\"https://ncatlab.org/nlab/show/identity+type#EtaConversion\">identity type § extensionality and η-conversion</a></p>",
        "id": 246091814,
        "sender_full_name": "Nathaniel Yazdani",
        "timestamp": 1626355051
    },
    {
        "content": "<p>Of course, I find a simpler reference just after sending my last message; the last paragraph of <a href=\"https://ncatlab.org/nlab/show/extensional+type+theory#definitional_extensionality\">extensional type theory § definitional extensionality</a> reads as follows, verbatim:</p>\n<blockquote>\n<p>A different, also equivalent, way of presenting definitionally extensional type theory is with a definitional <a href=\"https://ncatlab.org/nlab/show/eta-conversion\">eta-conversion</a> rule for the identity types; see <a href=\"https://ncatlab.org/nlab/show/identity+type#EtaConversion\">here</a>.</p>\n</blockquote>",
        "id": 246092792,
        "sender_full_name": "Nathaniel Yazdani",
        "timestamp": 1626355551
    },
    {
        "content": "<p>I found the entry in the <a href=\"https://plato.stanford.edu/entries/type-theory-intuitionistic/#ExteTypeTheo\">Stanford Encyclopedia of Philosophy</a> on extensional type theory to be illuminating.</p>\n<p>In Lean, it seems like it would mean the following two things (the second of which is already the case):</p>\n<ul>\n<li>\n<p>If <code>{α α' : Type*} (h : α = α') (x : α)</code>, then there would be some way to say <code>x : α'</code>.</p>\n</li>\n<li>\n<p><code>lemma eq_eq_irrel {α : Type*} {a a' : α} (h h' : a = a') : h = h' := rfl</code></p>\n</li>\n</ul>\n<p>If I understand it correctly, the first thing lets you avoid <code>heq</code>-hell, but at the cost of losing an algorithm for decidable typechecking.</p>",
        "id": 246122754,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1626367784
    },
    {
        "content": "<p>Yes, precisely.</p>",
        "id": 246122988,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1626367878
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> Oh, now I understand what you and <span class=\"user-mention\" data-user-id=\"130377\">@David Wärn</span> were saying.  In extensional type theory, you assert that eta for the identity type makes sense.  The <code>h : a = b</code> implies <code>a</code> is formally defeq to <code>b</code>.</p>",
        "id": 246124266,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1626368418
    },
    {
        "content": "<p>Maybe to make the situation clear to the casual readers here: the example Nathaniel has posted shows that we cannot have full eta for <code>eq</code> without getting into extensional type theory.  (This also applies to other GADTs.)  Another way to think about this we cannot even prove an eta theorem---<code>∀ x : a = b, x = eq.refl ???</code>---for <code>eq</code> (so why would we expect it to hold definitionally).</p>\n<p>However we can still add eta for structures (like the <code>equiv</code> that Heather complained about in the beginning of the thread).  The biggest hurdle I see here is that we would need to teach the kernel about structures (because it doesn't even know what a projection is at the moment).</p>",
        "id": 246124347,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1626368454
    },
    {
        "content": "<p>One of Nathaniel's links, <a href=\"https://ncatlab.org/nlab/show/identity+type#EtaConversion\">https://ncatlab.org/nlab/show/identity+type#EtaConversion</a> explains eta for the identity type. Actually this form of eta doesnt look like \"x = eq.refl...\", rather it says something like \"any (dependent) function out of an identity type is def eq to something obtained from eq.rec\". Iiuc the well-known versions of eta for structures and functions is a specialisation of this general form of eta, applied to the identity function. What's surprising is that while eta for identity holds \"propositionally\" in intensional type theory, if you make it def eq then you get extensional type theory. This is explained in the link above; the idea is that the two functions out of the id-type which return first and second endpoints are def eq on the base case (rfl), so are defeq assuming eta.</p>",
        "id": 246126750,
        "sender_full_name": "David Wärn",
        "timestamp": 1626369493
    },
    {
        "content": "<p>But indeed this seems irrelevant for the original discussion about eta for structures</p>",
        "id": 246126894,
        "sender_full_name": "David Wärn",
        "timestamp": 1626369568
    },
    {
        "content": "<p>(I would translate it by \"I take everything back and declare the opposite\" <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span>)</p>",
        "id": 246133438,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1626372471
    },
    {
        "content": "<p>Ok, after reading (the relevant part of) Streicher's thesis, I finally understand it.  To use Streicher's terminology: \"uniqueness of elimination implies the reflection rule\".</p>\n<p>Calling uniqueness of elimination <em>the eta rule for equality</em> really stretches the meaning of these words though.  Even Streicher only calls it an \"eta-like for the eliminator [eq.rec]\".</p>",
        "id": 246133645,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1626372551
    }
]