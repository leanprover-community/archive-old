[
    {
        "content": "<p>In my code, I have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">kent_convergence_space</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">convergence_space</span> <span class=\"n\">α</span>\n</code></pre></div>\n<p>So given <code>p : kent_convergence_space α</code>, I can use <code>p.to_convergence_space</code>. I was wondering if there is an attribute or a tactic or something that will give me the <code>has_coe</code> instance and a lemma that <code>coe</code> is injective. Or do I always have to manually write these out?</p>",
        "id": 286136811,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1655243219
    },
    {
        "content": "<p>Asking for this kind of thing on <code>class</code> instead of structure indicates you <em>might</em> be using the former in a place where the latter is more appropriate</p>",
        "id": 286139878,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1655245028
    },
    {
        "content": "<p>You always have to write out the coe, because it's not all that common for it to actually be a good idea. It's a lot harder to guess what <code>↑↑a</code> means than it is to guess what <code>a.to_foo.to_bar</code> means</p>",
        "id": 286140007,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1655245105
    },
    {
        "content": "<p>Having said that, you could certainly write a tactic / attribute to do what you're asking, and it would be a great exercise in learning to use Lean's metaprogramming</p>",
        "id": 286140049,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1655245141
    },
    {
        "content": "<p>Maybe I should provide a bit more background. I have a hierarchy of classes: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">convergence_space</span>\n<span class=\"n\">kent_convergence_space</span>\n<span class=\"n\">limit_space</span>\n<span class=\"n\">pseudotopological_space</span>\n<span class=\"n\">pretopological_space</span>\n</code></pre></div>\n<p>All these things will have a <code>partial_order</code> inhereted from <code>convergence_space</code>. I'm using <code>partial_order.lift coe coe_injective</code> to achieve this. I was hoping for some automation regarding <code>coe</code> and <code>coe_injective</code>. I guess I'll have to pull my sleeves up and start metaprogramming.</p>",
        "id": 286246133,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1655314179
    },
    {
        "content": "<p>Are coercions actually useful to you vs using <code>partial_order.lift to_convergent_space to_convergent_space_injective</code>?</p>",
        "id": 286248293,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1655315176
    },
    {
        "content": "<p>That is, do you use them in enough places for the short notation to be worth it?</p>",
        "id": 286248344,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1655315201
    },
    {
        "content": "<p>Yes. And I have just barely started fleshing out the theory of kent_convergence_spaces.</p>",
        "id": 286281112,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1655330953
    },
    {
        "content": "<p>I ask only because I can only think of one case that comes anywhere close to this kind of design in mathlib, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/topological_group\">docs#topological_group</a></p>",
        "id": 286281529,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1655331155
    },
    {
        "content": "<p>Actually, that's not a class anyway</p>",
        "id": 286281837,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1655331305
    }
]