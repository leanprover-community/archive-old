[
    {
        "content": "<p>Has anyone successfully built lean3 on macos recently? I get an error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">/</span><span class=\"n\">Users</span><span class=\"bp\">/</span><span class=\"n\">scott</span><span class=\"bp\">/</span><span class=\"n\">projects</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">frontends</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">widget.cpp</span><span class=\"o\">:</span><span class=\"mi\">436</span><span class=\"o\">:</span><span class=\"mi\">24</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">use</span> <span class=\"n\">of</span> <span class=\"n\">overloaded</span> <span class=\"n\">operator</span> <span class=\"bp\">'+='</span> <span class=\"n\">is</span> <span class=\"n\">ambiguous</span> <span class=\"o\">(</span><span class=\"k\">with</span>\n      <span class=\"n\">operand</span> <span class=\"n\">types</span> <span class=\"bp\">'</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string'</span> <span class=\"o\">(</span><span class=\"n\">aka</span> <span class=\"bp\">'</span><span class=\"n\">basic_string</span><span class=\"bp\">&lt;</span><span class=\"n\">char</span><span class=\"o\">,</span> <span class=\"n\">char_traits</span><span class=\"bp\">&lt;</span><span class=\"n\">char</span><span class=\"bp\">&gt;</span><span class=\"o\">,</span> <span class=\"n\">allocator</span><span class=\"bp\">&lt;</span><span class=\"n\">char</span><span class=\"bp\">&gt;</span> <span class=\"bp\">&gt;'</span><span class=\"o\">)</span> <span class=\"n\">and</span> <span class=\"bp\">'</span><span class=\"n\">json'</span> <span class=\"o\">(</span><span class=\"n\">aka</span> <span class=\"bp\">'</span><span class=\"n\">basic_json</span><span class=\"bp\">&lt;&gt;'</span><span class=\"o\">))</span>\n                    <span class=\"n\">cn</span> <span class=\"bp\">+=</span> <span class=\"n\">value</span><span class=\"bp\">;</span>\n                    <span class=\"bp\">~~</span> <span class=\"bp\">^</span>  <span class=\"bp\">~~~~~</span>\n</code></pre></div>\n<p>in <code>widget.cpp</code>.</p>\n<p>I think I'm following the vanilla build instructions...</p>",
        "id": 250072406,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1629428319
    },
    {
        "content": "<p>I have a work-around that lets it compile, but then widgets are broken in VSCode.</p>",
        "id": 250072426,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1629428336
    },
    {
        "content": "<p>I am using 10.14 still.</p>",
        "id": 250072438,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1629428347
    },
    {
        "content": "<p>Does this work?</p>\n<div class=\"codehilite\" data-code-language=\"C++\"><pre><span></span><code><span class=\"n\">cn</span> <span class=\"o\">+=</span> <span class=\"n\">value</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"o\">&lt;</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span><span class=\"o\">&gt;</span><span class=\"p\">();</span>\n</code></pre></div>",
        "id": 250087728,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1629445480
    },
    {
        "content": "<p>Looks good.</p>\n<p><a href=\"https://github.com/leanprover-community/lean/pull/606\">https://github.com/leanprover-community/lean/pull/606</a></p>",
        "id": 250089909,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1629447373
    }
]