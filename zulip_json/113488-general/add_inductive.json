[
    {
        "content": "<p>Why does</p>\n<div class=\"codehilite\"><pre><span></span>tactic.add_inductive `foo [] 0 `(Type) $\n[(`mk, expr.pi `mk binder_info.default (expr.app (expr.const `list [level.zero]) (expr.const `foo [])) (expr.const `foo []))],\n</pre></div>\n\n\n<p>fail?</p>",
        "id": 124010223,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1521639734
    },
    {
        "content": "<p>That's a nested inductive type, <code>add_inductive</code> only supports basic inductive types</p>",
        "id": 124010398,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1521640010
    },
    {
        "content": "<p>Too bad, and there's no API for the nested ones, right?</p>",
        "id": 124010420,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1521640073
    },
    {
        "content": "<p>Right</p>",
        "id": 124010467,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1521640094
    },
    {
        "content": "<p>But are they internally reduced to basic inductive types?</p>",
        "id": 124010567,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1521640257
    },
    {
        "content": "<p>That's what is claimed in section 7.9 of TPIL : <a href=\"https://leanprover.github.io/theorem_proving_in_lean/inductive_types.html#mutual-and-nested-inductive-types\" target=\"_blank\" title=\"https://leanprover.github.io/theorem_proving_in_lean/inductive_types.html#mutual-and-nested-inductive-types\">https://leanprover.github.io/theorem_proving_in_lean/inductive_types.html#mutual-and-nested-inductive-types</a></p>",
        "id": 124010636,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521640397
    },
    {
        "content": "<p>Yes <a href=\"https://github.com/leanprover/lean/wiki/Compiling-nested-inductive-types\" target=\"_blank\" title=\"https://github.com/leanprover/lean/wiki/Compiling-nested-inductive-types\">https://github.com/leanprover/lean/wiki/Compiling-nested-inductive-types</a></p>",
        "id": 124010637,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1521640398
    },
    {
        "content": "<p>Nice, thanks!</p>",
        "id": 124010694,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1521640473
    },
    {
        "content": "<p>This is done in C++ but outside the kernel, right?</p>",
        "id": 124010830,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1521640689
    },
    {
        "content": "<p>yes</p>",
        "id": 124010832,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1521640700
    },
    {
        "content": "<p>Why isn't it done in Lean?</p>",
        "id": 124010842,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1521640742
    },
    {
        "content": "<p>It could be...</p>",
        "id": 124010976,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1521640904
    },
    {
        "content": "<p>I started working on that a while back, but then the ground started shaking and I decided to wait for the dust to settle</p>",
        "id": 124011034,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1521640958
    },
    {
        "content": "<p>Very poetic!</p>",
        "id": 124011580,
        "sender_full_name": "Moses Sch√∂nfinkel",
        "timestamp": 1521641545
    }
]