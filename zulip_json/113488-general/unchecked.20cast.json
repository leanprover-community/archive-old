[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"bp\">@</span><span class=\"n\">unchecked_cast</span> <span class=\"n\">int</span> <span class=\"n\">nat</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"c1\">-- 2147483645</span>\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"bp\">@</span><span class=\"n\">unchecked_cast</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"o\">]</span> <span class=\"c1\">-- [3]</span>\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"bp\">@</span><span class=\"n\">unchecked_cast</span> <span class=\"n\">nat</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"mi\">3</span> <span class=\"c1\">-- []</span>\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"bp\">@</span><span class=\"n\">unchecked_cast</span> <span class=\"n\">nat</span> <span class=\"o\">(</span><span class=\"n\">nat</span> <span class=\"bp\">â†’</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"mi\">3</span> <span class=\"mi\">3</span>\n<span class=\"c1\">-- vm check failed: cidx(closure) == 0 (possibly due to incorrect axioms, or sorry)</span>\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"bp\">@</span><span class=\"n\">unchecked_cast</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">nat</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">[[</span><span class=\"mi\">3</span><span class=\"o\">]]</span>\n<span class=\"c1\">-- vm check failed: is_mpz(o) (possibly due to incorrect axioms, or sorry)</span>\n</pre></div>",
        "id": 134005017,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537004880
    },
    {
        "content": "<p>quite fun</p>",
        "id": 134005054,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537004884
    },
    {
        "content": "<p>can you cast int to nat?</p>",
        "id": 134005957,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537006487
    },
    {
        "content": "<p>Lean always has fun trying to do that</p>",
        "id": 134005964,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537006492
    },
    {
        "content": "<p>oh duh that's exactly what you just did</p>",
        "id": 134005972,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537006502
    },
    {
        "content": "<p>Is this related to why Lean times out if you try to do this?</p>",
        "id": 134005990,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537006537
    },
    {
        "content": "<p>I doubt it. I don't think the kernel or the elaborator care about the VM representation.</p>",
        "id": 134006063,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1537006600
    },
    {
        "content": "<p>How come the VM can deal with integers bigger than 2^32 if it is storing things in this classical manner?</p>",
        "id": 134006455,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537007150
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"bp\">@</span><span class=\"n\">unchecked_cast</span> <span class=\"n\">int</span> <span class=\"n\">nat</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">21474836450</span><span class=\"o\">)</span> <span class=\"c1\">-- -21474836450</span>\n</pre></div>",
        "id": 134006602,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537007348
    },
    {
        "content": "<p>looks like <code>-21474836450</code> is a natural number!</p>",
        "id": 134006604,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537007357
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> for small enough integers it stores them in 4-bytes, for bigger ones it uses the GMP multiprecision library</p>",
        "id": 134007206,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1537008138
    },
    {
        "content": "<blockquote>\n<p>How come the VM can deal with integers bigger than 2^32 if it is storing things in this classical manner?</p>\n</blockquote>\n<p>My guess is that a nat is 31 bits for the nat, plus one more bit that says we need more bits. An int is probably <code>30</code> bits plus a sign and one more bit for if we need more bits.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"bp\">@</span><span class=\"n\">unchecked_cast</span> <span class=\"n\">nat</span> <span class=\"n\">int</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"err\">^</span> <span class=\"mi\">30</span><span class=\"o\">)</span> <span class=\"c1\">-- -1073741824</span>\n</pre></div>",
        "id": 134007226,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1537008200
    },
    {
        "content": "<p><a href=\"https://gmplib.org\" target=\"_blank\" title=\"https://gmplib.org\">https://gmplib.org</a></p>",
        "id": 134007280,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1537008287
    },
    {
        "content": "<p>rofl the \"need help\" bit.</p>",
        "id": 134007294,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537008341
    },
    {
        "content": "<p>Interesting, it hadn't occurred to me that you could define <code>unchecked_cast</code> (in <code>meta</code>) yourself, without a special constant.<br>\nI wonder how badly you can break things with it. I tried casting a nat to a function nat -&gt; nat and then applying it, hoping for a crash, but all I got was a boring vm check failure.</p>",
        "id": 134013568,
        "sender_full_name": "Reid Barton",
        "timestamp": 1537020401
    }
]