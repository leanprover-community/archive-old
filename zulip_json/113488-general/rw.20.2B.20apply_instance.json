[
    {
        "content": "<p>it'd be nice if there was a version of <code>rw</code> that ran <code>apply_instance</code> on every class argument created during its execution; for example, consider this as to why it's useful (it's not minimal, but I'm sure that everyone here has seen this behaviour and knows what I mean):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">is_root_of_unity_iff</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_domain</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">ζ</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">ζ</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">divisors</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">cyclotomic</span> <span class=\"n\">i</span> <span class=\"n\">R</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">is_root</span> <span class=\"n\">ζ</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">mem_nth_roots</span> <span class=\"n\">n.pos</span><span class=\"o\">,</span> <span class=\"n\">nth_roots</span><span class=\"o\">,</span> <span class=\"n\">mem_roots</span> <span class=\"bp\">$</span> <span class=\"n\">X_pow_sub_C_ne_zero</span> <span class=\"n\">n.pos</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n       <span class=\"n\">C_1</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">prod_cyclotomic_eq_X_pow_sub_one</span> <span class=\"n\">n.pos</span><span class=\"o\">,</span> <span class=\"n\">is_root_prod</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">apply_instance</span>\n</code></pre></div>",
        "id": 261143635,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1636642765
    },
    {
        "content": "<p>it's not too annoying in this case but in long proofs it can really clog up the proof state and lead to awkward things like <code>any_goals { apply_instance }</code>, or even <code>swap { ... }, swap ...</code> if it's too slow</p>",
        "id": 261143811,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1636642820
    },
    {
        "content": "<p>would this be easy to make for someone with low meta knowledge?</p>",
        "id": 261143852,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1636642837
    },
    {
        "content": "<p>My experience with this issue is that <code>apply_instance</code> does get tried, but sometimes it's tried too early.</p>",
        "id": 261156532,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1636648832
    },
    {
        "content": "<p>I think it's when you have terms like <code>mem_nth_roots n.pos</code>, whose signatures look something like <code>{R} [... R] ... (h : 0 &lt; n)</code>, so the elaborator gets confused about the terms, and is only resolved when it unifies with the expression you are rewriting; and then it's too late for inference to kick in</p>",
        "id": 261164315,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1636652555
    },
    {
        "content": "<p>Just hypothesizing here but could this be resolved by reordering the arguments for the lemma being rewritten?</p>",
        "id": 261166131,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1636653582
    },
    {
        "content": "<p>I think so, but this requires a massive change in how mathlib works because it means you have to take pretty much all types out of <code>variables</code> statements, and put them after hypotheses. (e.g. for <code>mem_nth_roots</code> you'd need a signature like <code>{n : ℕ} (h : 0 &lt; n) {R : Type*} [comm_ring R] ...</code>)</p>",
        "id": 261166520,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1636653759
    },
    {
        "content": "<p>Well if it actually worked and was useful we could try some metaprogramming magic to generate reordered declarations automatically, or make rw try to do such reordering automatically?</p>",
        "id": 261166774,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1636653912
    },
    {
        "content": "<p>Can we verify that this actually helps by making a local copy of the one offending lemma before exploring this rabbit hole?</p>",
        "id": 261166817,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636653944
    },
    {
        "content": "<p>Yeah it doesn't help sadly</p>",
        "id": 261167746,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1636654486
    },
    {
        "content": "<p>What does help is making R explicit, even if its not specified explicitly in the rw</p>",
        "id": 261168029,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1636654663
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory.polynomial.cyclotomic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">polynomial</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">puff_the_magic_lemma</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_domain</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">nth_roots</span> <span class=\"n\">n</span> <span class=\"n\">a</span><span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">:=</span> <span class=\"n\">mem_nth_roots</span> <span class=\"n\">hn</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">is_root_of_unity_iff</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_domain</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">ζ</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">ζ</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">divisors</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">cyclotomic</span> <span class=\"n\">i</span> <span class=\"n\">R</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">is_root</span> <span class=\"n\">ζ</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">puff_the_magic_lemma</span> <span class=\"n\">n.pos</span><span class=\"o\">,</span> <span class=\"n\">nth_roots</span><span class=\"o\">,</span> <span class=\"n\">mem_roots</span> <span class=\"bp\">$</span> <span class=\"n\">X_pow_sub_C_ne_zero</span> <span class=\"n\">n.pos</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- rw [←mem_nth_roots n.pos, nth_roots, mem_roots $ X_pow_sub_C_ne_zero n.pos _,</span>\n       <span class=\"n\">C_1</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">prod_cyclotomic_eq_X_pow_sub_one</span> <span class=\"n\">n.pos</span><span class=\"o\">],</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">apply_instance</span><span class=\"o\">,</span>\n  <span class=\"n\">apply_instance</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 261168135,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1636654717
    },
    {
        "content": "<p>Here puff the magic lemma is the same as <a href=\"https://leanprover-community.github.io/mathlib_docs/find/mem_nth_roots\">docs#mem_nth_roots</a> apart from argument order and explicitness of <code>R</code>. <code>rw</code>ing with <code>puff</code> doesn't produce a side goal where the original does</p>",
        "id": 261168330,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1636654825
    },
    {
        "content": "<p>⦃⦄ binders on R work too... I'm now more confused than I was before, ngl</p>",
        "id": 261168715,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1636655077
    },
    {
        "content": "<p>Actually, I guess it prevents it from elaborating further till we know what R is, and then <code>rw</code>'s internal stuff can do the work</p>",
        "id": 261168782,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1636655120
    },
    {
        "content": "<p>I don't think I've ever seen those binders on a type before! Whats the thinking behind using those rather than round?</p>",
        "id": 261187385,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1636666815
    },
    {
        "content": "<p>They're usually used on the RHS of <code>:=</code>, like in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/function.injective/src\">src#function.injective</a></p>",
        "id": 261189115,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636668080
    },
    {
        "content": "<p>Because I still don't have to state it, but lean won't evaluate it until I go to the rhs of it :) I think it's a clever solution, but going to test it for a bit first and see how it works out</p>",
        "id": 261189525,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1636668418
    },
    {
        "content": "<p>When would you have to state it though? If you are only ever doing rw with that lemma still?</p>",
        "id": 261189832,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1636668645
    },
    {
        "content": "<p>Maybe you'll want to do <code>.mp</code> or something on the lemma? Not sure...</p>",
        "id": 261191648,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1636670031
    },
    {
        "content": "<p>Ahh, it doesn't even work if you want to do <code>.mp</code>; you'll get told that <code>∀ {{R}} ...</code> doesn't have <code>mp</code>. Shame :/</p>",
        "id": 261233165,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1636711943
    }
]