[
    {
        "content": "<p>I don't understand lawless functors. What is <code>functor.map_const</code> supposed to mean? Does every \"maths\" functor satisfy this?</p>",
        "id": 166797441,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1559121207
    },
    {
        "content": "<p><code>map_const</code> is another operation available as part of <code>functor</code> data, which should always be the same as <code>map ∘ const</code></p>",
        "id": 166797602,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1559121355
    },
    {
        "content": "<p>but the function slot is provided in case there is an easier or faster implementation of this composition</p>",
        "id": 166797665,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1559121392
    },
    {
        "content": "<p>In <code>functor</code> it is only a default value, but in <code>is_lawful_functor</code> it is required that they coincide</p>",
        "id": 166797696,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1559121423
    },
    {
        "content": "<p>For example, the functor <code>(λ b, X -&gt; b)</code> has an efficient implementation <code>map_const (a : A) (f : X -&gt; B) : X -&gt; A := λ x, a</code> which does not have to evaluate the function <code>f</code>, while <code>map (const a) f x := const a (f x)</code> will end up evaluating <code>f</code> before discarding the result</p>",
        "id": 166797928,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1559121604
    },
    {
        "content": "<p>bfhwrgg... I'm still confused.</p>",
        "id": 166798118,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1559121769
    },
    {
        "content": "<p>Why does a maths functor always have a default value?</p>",
        "id": 166798128,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1559121782
    },
    {
        "content": "<p>I'm missing something about endo-functors of Type, I guess.</p>",
        "id": 166798147,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1559121793
    },
    {
        "content": "<p>Whatever, I entered some constant thing, and Lean is happy.</p>",
        "id": 166798280,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1559121931
    },
    {
        "content": "<p>I don't think <code>const</code> is saying anything about having a default value; <code>const</code> is just the core lean name for a constant function and <code>functor</code> remembers a special way to map the constant function for some reason (and this is ok because the corresponding \"maths\" functor is Type -&gt; Type, and in Type for each <code>A B : Type</code> and <code>b : B</code> there is a distinguished morphism <code>const b : A -&gt; B</code>)</p>",
        "id": 166802765,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1559126474
    }
]