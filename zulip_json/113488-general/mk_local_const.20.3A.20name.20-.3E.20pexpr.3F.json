[
    {
        "content": "<p>Is there such a function that give a <code>pexpr</code> of local constant from the variable name? I can just call <code>expr.local_const</code>, but the constructor is kind of complex and not so much documentation, also I don't think it's the way to go.</p>",
        "id": 129374884,
        "sender_full_name": "Zesen Qian",
        "timestamp": 1531171502
    },
    {
        "content": "<p>There is <code>mk_const</code>, but one way or another you have to decide what to do about universe variables</p>",
        "id": 129382529,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531182652
    },
    {
        "content": "<p>sorry, what's the difference between <code>const</code> and <code>local_const</code>? also, I'm trying to work without the tactic monad.</p>",
        "id": 129382778,
        "sender_full_name": "Zesen Qian",
        "timestamp": 1531183146
    },
    {
        "content": "<p><code>const</code> is a global constant, which is declared by a <code>def</code> or <code>theorem</code> or <code>axiom</code>, like <code>nat</code> or <code>nat.succ</code> or <code>nat.succ_pos</code></p>",
        "id": 129382857,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531183293
    },
    {
        "content": "<p><code>local_const</code> is a \"local constant\" which is probably less than helpful but you would usually think of it as a variable. These are the variables that appear in the context during a tactic proof, left of the turnstile</p>",
        "id": 129382906,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531183349
    },
    {
        "content": "<p>ahh I see.</p>",
        "id": 129382910,
        "sender_full_name": "Zesen Qian",
        "timestamp": 1531183359
    },
    {
        "content": "<p>yeah, so I guess I'm trying to create a reference to local constant, from a string.</p>",
        "id": 129382918,
        "sender_full_name": "Zesen Qian",
        "timestamp": 1531183384
    },
    {
        "content": "<p>This is in contrast to <code>var</code> which is a de bruijn variable, which are variables which are currently bound in a binder in a term</p>",
        "id": 129382921,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531183387
    },
    {
        "content": "<p>I can create <code>name</code> by <code>mk_simple_name</code>, but from that to <code>expr</code> I don't know.</p>",
        "id": 129382928,
        "sender_full_name": "Zesen Qian",
        "timestamp": 1531183421
    },
    {
        "content": "<p>You can't make a local constant from a string without the local context</p>",
        "id": 129382933,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531183441
    },
    {
        "content": "<p>that is what enables name resolution</p>",
        "id": 129382974,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531183458
    },
    {
        "content": "<p>ok, so I need to be in a tactic.</p>",
        "id": 129382982,
        "sender_full_name": "Zesen Qian",
        "timestamp": 1531183472
    },
    {
        "content": "<p>monad.</p>",
        "id": 129382985,
        "sender_full_name": "Zesen Qian",
        "timestamp": 1531183482
    },
    {
        "content": "<p>right</p>",
        "id": 129382987,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531183487
    },
    {
        "content": "<p>you want <code>get_local</code> I think</p>",
        "id": 129382988,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531183501
    },
    {
        "content": "<p>yes, I saw that.</p>",
        "id": 129382994,
        "sender_full_name": "Zesen Qian",
        "timestamp": 1531183508
    },
    {
        "content": "<p>and I was wondering why it's implemented in VM, if it can be implemented natively.</p>",
        "id": 129383000,
        "sender_full_name": "Zesen Qian",
        "timestamp": 1531183538
    },
    {
        "content": "<p>and now I know why.</p>",
        "id": 129383002,
        "sender_full_name": "Zesen Qian",
        "timestamp": 1531183542
    },
    {
        "content": "<p>You need that local context information to find out the unique name and type given the pp name</p>",
        "id": 129383045,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531183586
    },
    {
        "content": "<p>this is what the <code>tactic_state</code> provides</p>",
        "id": 129383047,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531183608
    },
    {
        "content": "<p>ok. question: can I make a <code>elet</code>, getting a <code>local_const</code>, and pass it to the rest of the function, without access tactic state?</p>",
        "id": 129383108,
        "sender_full_name": "Zesen Qian",
        "timestamp": 1531183701
    },
    {
        "content": "<p>Possibly, what are the inputs? You need a variable, a type, a value and a body</p>",
        "id": 129383124,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531183780
    },
    {
        "content": "<p>I want to construct a proof, which start with <code>let v = ...</code>, and I hope to get a <code>expr</code> refering to this <code>v</code>, and pass it to the rest of the proof generation.</p>",
        "id": 129383186,
        "sender_full_name": "Zesen Qian",
        "timestamp": 1531183845
    },
    {
        "content": "<p>is that viable?</p>",
        "id": 129383188,
        "sender_full_name": "Zesen Qian",
        "timestamp": 1531183849
    },
    {
        "content": "<p>There are two ways you could proceed: you could construct the body containing <code>v</code> as a <code>local_const</code>, and then abstract it when you are finished, or you could construct it with <code>v</code> already abstracted, meaning you refer to it only as <code>var 0</code></p>",
        "id": 129383422,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531184290
    },
    {
        "content": "<p>Lean is mostly geared toward constructing terms the first way, particularly if you intend for the expression to be constructed partially using tactics, with a metavariable in the middle etc. Most tactics only work on \"closed terms\", meaning that <code>var</code> is not allowed</p>",
        "id": 129383496,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531184425
    },
    {
        "content": "<p>But if you can construct the entire expr in one go with no intervention then the second approach is possible</p>",
        "id": 129383500,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531184455
    },
    {
        "content": "<p>thanks, I'll try</p>",
        "id": 129383627,
        "sender_full_name": "Zesen Qian",
        "timestamp": 1531184643
    },
    {
        "content": "<p>very much appreciated.</p>",
        "id": 129383632,
        "sender_full_name": "Zesen Qian",
        "timestamp": 1531184648
    },
    {
        "content": "<p>Please also note <a href=\"https://github.com/leanprover/lean/issues/1921#issuecomment-363028776\" target=\"_blank\" title=\"https://github.com/leanprover/lean/issues/1921#issuecomment-363028776\">https://github.com/leanprover/lean/issues/1921#issuecomment-363028776</a>. This distinction between \"pure\" and \"tactic\" local constants will likely vanish in Lean 4. As well as the name \"local constant\".</p>",
        "id": 129397269,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1531208938
    },
    {
        "content": "<p>Do you mean that this kind of type won't leak through into the Lean code?</p>",
        "id": 129419037,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1531238565
    }
]