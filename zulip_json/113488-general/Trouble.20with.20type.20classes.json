[
    {
        "content": "<p>I was trying to revert objects which have dependent type classes in order to make a proof by induction on the number of generators of a finitely generated monoid. This seems to cause trouble with the type class system, as noted below. Does anyone have an idea how to fix or get around this? <br>\nOne thing I tried was to derive the class <code>semiring S</code> explicitly from <code>comm_ring S</code>, but then the class <code>algebra R S</code> didn't match anymore.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory.local_properties</span>\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory.localization.inv_submonoid</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">submonoid</span> <span class=\"n\">R</span><span class=\"o\">)</span>  <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">is_localization</span> <span class=\"n\">M</span> <span class=\"n\">S</span><span class=\"o\">]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">finite_presentation_of_monoid_fg</span> <span class=\"o\">[</span><span class=\"n\">monoid.fg</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">algebra.finite_presentation</span> <span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">unfreezingI</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">monoid.fg_iff_submonoid_fg</span> <span class=\"n\">at</span> <span class=\"n\">_inst_5</span><span class=\"o\">,</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">_inst_5</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">hs</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">revert</span> <span class=\"n\">M</span><span class=\"o\">,</span>\n    <span class=\"n\">revert</span> <span class=\"n\">S</span><span class=\"o\">,},</span>\n  <span class=\"n\">classical</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">finset.induction_on</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span><span class=\"n\">intros</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">finset.coe_empty</span> <span class=\"n\">at</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">submonoid.closure_empty</span> <span class=\"n\">at</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n  <span class=\"n\">replace</span> <span class=\"n\">hs</span> <span class=\"o\">:=</span> <span class=\"n\">eq.symm</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">submonoid.eq_bot_iff_forall</span> <span class=\"n\">at</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n  <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"n\">function.bijective</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_function</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"c1\">--Error: algebra_map R S can't find type class instance for `semiring S`</span>\n  <span class=\"o\">{</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"gr\">sorry</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span><span class=\"gr\">sorry</span><span class=\"o\">,},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 290154413,
        "sender_full_name": "Nikolas Kuhn",
        "timestamp": 1658261634
    },
    {
        "content": "<p>Does an <code>resetI</code> after <code>intros</code> work? You need to reset the cache when adding new instances into the scope, or else the type class system cannot see it.</p>",
        "id": 290154854,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1658261877
    },
    {
        "content": "<p>Or combine them to <code>introsI</code></p>",
        "id": 290154971,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658261950
    },
    {
        "content": "<p>Perfect, thanks!</p>",
        "id": 290157314,
        "sender_full_name": "Nikolas Kuhn",
        "timestamp": 1658263127
    }
]