[
    {
        "content": "<p>I'm playing with a more complex example, but it basically boils down to the following.</p>\n<p>While this is accepted by Lean:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">mkx</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">catax</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">x.mkx</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">catax</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>The following confuses it enough about the wellfoundedness of the recursion:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">wrap</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">mkwrap</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">wrap</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">cataw</span> <span class=\"o\">:</span> <span class=\"n\">wrap</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">wrap.mkwrap</span> <span class=\"o\">(</span><span class=\"n\">x.mkx</span> <span class=\"n\">f</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">cataw</span> <span class=\"o\">(</span><span class=\"n\">wrap.mkwrap</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"mi\">0</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>Essentially the argument for wellfoundedness is that <code>mkwrap</code> behaves covariantly/positively w.r.t. its argument, so for the same reason that <code>catax</code> was accepted, <code>cataw</code> ought to be okay, even though Lean can't see that.</p>\n<p>Two questions:</p>\n<ul>\n<li>\n<p>Any chance of supporting this automatically?</p>\n</li>\n<li>\n<p>What's my quickest route to allow the second definition?</p>\n</li>\n</ul>",
        "id": 249530284,
        "sender_full_name": "Valentin Robert",
        "timestamp": 1629061267
    },
    {
        "content": "<p>(1) It is unlikely that anything about the Lean 3 equation compiler will be changed (with Lean 4 around the corner), so I don't think this will be supported automatically in Lean 3<br>\n(2) You can use <code>using_well_founded { rel_tac := ... }</code> to specify the measure that is decreasing in the recursive call. You want a <code>have</code> statement in your definition that actually states that the given measure is decreasing. Search mathlib for <code>using_well_founded</code> for examples.</p>",
        "id": 249538388,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1629074648
    },
    {
        "content": "<p>I managed to define the well founded relation to allow the second definition. The best way to understand this is probably to read the well-founded docs I wrote a couple of years ago. <a href=\"https://github.com/leanprover-community/mathlib/blob/master/docs/extras/well_founded_recursion.md\">https://github.com/leanprover-community/mathlib/blob/master/docs/extras/well_founded_recursion.md</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.rcases</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">mkx</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">catax</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">x.mkx</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">catax</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">wrap</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">mkwrap</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">wrap</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">wrap.out</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">wrap</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">wrap.rec_on</span> <span class=\"n\">w</span> <span class=\"n\">id</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">x.mkx</span> <span class=\"n\">f</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">r_wf</span> <span class=\"o\">:</span> <span class=\"n\">well_founded</span> <span class=\"n\">r</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">a</span> <span class=\"k\">with</span> <span class=\"n\">f</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n  <span class=\"n\">dsimp</span> <span class=\"n\">at</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"n\">acc.intro</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"k\">assume</span> <span class=\"n\">b</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">hb</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">subst</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">ih</span> <span class=\"n\">_</span>\n<span class=\"kd\">end</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">has_well_founded_wrap</span> <span class=\"o\">:</span> <span class=\"n\">has_well_founded</span> <span class=\"n\">wrap</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">inv_image.wf</span> <span class=\"n\">wrap.out</span> <span class=\"n\">r_wf</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">prove_r</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">has_well_founded.r</span> <span class=\"n\">wrap</span>\n  <span class=\"n\">has_well_founded_wrap</span> <span class=\"o\">(</span><span class=\"n\">wrap.mkwrap</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">wrap.mkwrap</span> <span class=\"o\">(</span><span class=\"n\">x.mkx</span> <span class=\"n\">f</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">cataw</span> <span class=\"o\">:</span> <span class=\"n\">wrap</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">wrap.mkwrap</span> <span class=\"o\">(</span><span class=\"n\">x.mkx</span> <span class=\"n\">f</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">cataw</span> <span class=\"o\">(</span><span class=\"n\">wrap.mkwrap</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"mi\">0</span><span class=\"o\">))</span>\n<span class=\"n\">using_well_founded</span>\n  <span class=\"o\">{</span> <span class=\"n\">rel_tac</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">inv_image.wf</span> <span class=\"n\">wrap.out</span> <span class=\"n\">r_wf</span><span class=\"o\">⟩],</span>\n    <span class=\"n\">dec_tac</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">exact</span> <span class=\"n\">prove_r</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 249546104,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1629086970
    }
]