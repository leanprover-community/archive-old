[
    {
        "content": "<p>I never use <code>simp</code> really, because I don't understand how it works. Here is a simple example <a href=\"#narrow/stream/116395-maths/topic/topological.20space.20from.20filter/near/189336789\" title=\"#narrow/stream/116395-maths/topic/topological.20space.20from.20filter/near/189336789\">from this thread</a> where I write a simple 7 line tactic mode proof of something which any mathematician would be able to work out in their head.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n\n<span class=\"c1\">-- Say X and Y are types, U=univ is a subset of X</span>\n<span class=\"c1\">-- and V is a subset of Y. If C is a subset of X × Y</span>\n<span class=\"c1\">-- such that U × V is in the complement of C, then</span>\n<span class=\"c1\">-- V is in the complement of the projection of C down to Y.</span>\n<span class=\"c1\">-- Maths proof : &quot;if you can&#39;t solve this, you shouldn&#39;t be taking my class&quot;</span>\n<span class=\"c1\">-- Alternate maths proof: &quot;draw a rectangle&quot;.</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hXU</span> <span class=\"o\">:</span> <span class=\"n\">univ</span> <span class=\"err\">⊆</span> <span class=\"n\">U</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">×</span> <span class=\"n\">Y</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">hUV</span> <span class=\"o\">:</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"n\">U</span> <span class=\"n\">V</span> <span class=\"err\">⊆</span> <span class=\"bp\">-</span><span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">V</span> <span class=\"err\">⊆</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">snd</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"c1\">-- my Lean proof:</span>\n<span class=\"k\">begin</span>\n  <span class=\"c1\">-- Suppose for a contradiction that the intersection is non-empty.</span>\n  <span class=\"c1\">-- Then we must have an element of C whose second component is in V</span>\n  <span class=\"n\">rintros</span> <span class=\"n\">v</span> <span class=\"n\">hvV</span> <span class=\"bp\">⟨</span><span class=\"n\">uv</span><span class=\"o\">,</span> <span class=\"n\">huv</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- To get the contradiction it suffices to prove that this element is in U × V</span>\n  <span class=\"n\">revert</span> <span class=\"n\">huv</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">hUV</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- so we need to check its first component is in U and its second is in V</span>\n  <span class=\"n\">rw</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem_prod</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- but U is all of X so the first component must be in U</span>\n    <span class=\"n\">apply</span> <span class=\"n\">hXU</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem_univ</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- and by assumption the second component is in V</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hvV</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- so done</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>I am in the middle of a big tactic mode proof so I can't really massage the hypotheses and there's no advantage slipping into term mode.</p>\n<p>I observe that (a) this proof is pretty simple; (b) both of the theorems I use from <code>data.set.basic</code> (<code>mem_prod</code> and <code>mem_univ</code>) are tagged <code>@[simp]</code> (and one proof is <code>iff.rfl</code> and the other is <code>trivial</code>); (c) <code>simp * at *</code> doesn't work.</p>\n<p>Now what I don't really understand is whether I should even be expecting the simplifier to solve this little logic puzzle, even though the proof looks very much \"follow your nose\". I don't even know if <code>  simp [hXU, hUV]</code> is meaningful -- it compiles, it doesn't solve the goal. Is this clearly too much for the simplifier? Does the simplifier <em>only</em> prove goals of the form <code>X = Y</code> and only in the situation where subterms of X can be rewritten using simp lemmas until X becomes Y? How should I be solving this goal in fewer than 7 lines? What would a mathlib proof of this look like? This is a big hole in my understanding of how to write mathlib-ready Lean code and it's things like this which are a major contributor to the fact that I've not written more mathlib code.</p>",
        "id": 189387949,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582977638
    },
    {
        "content": "<p>Hmm:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">begin</span>\n  <span class=\"n\">rintros</span> <span class=\"n\">v</span> <span class=\"n\">hvV</span> <span class=\"bp\">⟨</span><span class=\"n\">uv</span><span class=\"o\">,</span> <span class=\"n\">huv</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hUV</span> <span class=\"bp\">⟨</span><span class=\"n\">hXU</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem_univ</span> <span class=\"bp\">_</span><span class=\"o\">),</span> <span class=\"n\">hvV</span><span class=\"bp\">⟩</span> <span class=\"n\">huv</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>Maybe I'm barking up the wrong tree and I should just concentrate on building terms as compactly as possible.</p>",
        "id": 189388401,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582978558
    },
    {
        "content": "<p>Perhaps this helps.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hXU</span> <span class=\"o\">:</span> <span class=\"n\">univ</span> <span class=\"err\">⊆</span> <span class=\"n\">U</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">×</span> <span class=\"n\">Y</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">hUV</span> <span class=\"o\">:</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"n\">U</span> <span class=\"n\">V</span> <span class=\"err\">⊆</span> <span class=\"bp\">-</span><span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">V</span> <span class=\"err\">⊆</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">snd</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">subset_def</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"bp\">λ</span> <span class=\"n\">v</span> <span class=\"n\">hvV</span> <span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">hUV</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">hXU</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"n\">hvV</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 189388739,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582979177
    },
    {
        "content": "<p>Note the goal after the first line</p>",
        "id": 189388776,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582979234
    },
    {
        "content": "<p>Basically, <code>simp</code> has a whole bunch of basic unfolding type rules in its database, and we just apply everything until it stops changing. Now subset is not usually a thing you want to unfold eagerly, however once you have membership there are a whole bunch of simp lemmas that can trigger, to unfold what it means for something to be an element of a complicated set. So here it cleans up all the unions and images and complements, but it hasn't really done anything with the \"logic\" part - you still have to plumb <code>hXU</code> and <code>hvV</code> together, but it is much more obvious what to do this time</p>",
        "id": 189388839,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582979367
    },
    {
        "content": "<p>Because these are almost all definitional simplifications, the direct term proof is not much longer in this case. The only real change is you don't have to do that <code>rcases with &lt;a, rfl&gt;</code> dance</p>",
        "id": 189388900,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582979484
    },
    {
        "content": "<p>Your second proof is almost exactly what I would have used for the mathlib proof of this. (I would have used <code>by</code> and squeezed it on one line because it's basically a short term proof.) I wouldn't use the <code>simp</code> proof because that is slower and the savings in proof size are minimal here</p>",
        "id": 189389009,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582979709
    }
]