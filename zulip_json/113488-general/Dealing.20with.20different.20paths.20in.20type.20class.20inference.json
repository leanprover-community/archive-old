[
    {
        "content": "<p>How do I deal with the problem when there are two ways to infer an instance of a type class, but I know that the instances are propositionally equal.  I'm getting type mismatch error when applying a function that expects one way of inferring such a type class, but I provide the other way.</p>\n<p>An example: normed spaces have products and have topology induced by the norm. To get topology on the product I can either infer topology from the product of normed spaces or take a product of topologies induced by individual norms.</p>",
        "id": 214865332,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1603903906
    },
    {
        "content": "<p>The standard solution in mathlib is to have <code>normed_space</code> extend <code>topological_space</code>, meaning that a normed space has the apparently redundant information of a norm and a topology, together with a (propositional) proof that they cohere</p>",
        "id": 214865543,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603904001
    },
    {
        "content": "<p>I'm a bit surprised this is a problem for normed spaces because for <em>metric</em> spaces, we take specific measures to avoid exactly this problem</p>",
        "id": 214865563,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603904011
    },
    {
        "content": "<p>Do you have a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>? A cursory look at <code>normed_space</code> seems to indicate that it is set up in the recommended way</p>",
        "id": 214865809,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603904099
    },
    {
        "content": "<p>But, when you find yourself in this situation, often <code>convert e</code> instead of <code>refine e</code> will be able to make progress, or <code>congr</code> if you already have an equality where the sides differ only in a choice of instance</p>",
        "id": 214865862,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603904124
    },
    {
        "content": "<p>This was just an example and I'm running into a problem somewhere else.</p>",
        "id": 214865894,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1603904139
    },
    {
        "content": "<p>but of course this will only succeed in the end if you actually have a lemma that says the topologies (or whatever) are propositionally equal</p>",
        "id": 214865917,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603904152
    },
    {
        "content": "<p>So when you make an instance of <code>normed_space</code> for the product, you give the product topological space as the topology and the product norm for the norm, and then the coherence proof contains the content of the statement that the product of induced topologies is the topology induced by the product norm</p>",
        "id": 214866290,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603904286
    },
    {
        "content": "<p>There are also constructors like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/normed_group.of_core\">docs#normed_group.of_core</a> that can be used to skip the coherence proof by actually defining the topology as the one induced by the norm. This constructor should <em>not</em> be used if there is any other way of getting the topology because it will cause diamond problems</p>",
        "id": 214866789,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603904468
    },
    {
        "content": "<p>Actually, I'm defining <code>locally_convex_space</code> just extends <code>vector_spaces</code> and having a trouble coping with <code>normed_space</code>.  In particular, the locally convex structure on the product of normed spaces is the same as the product of locally convex spaces induced by normed spaces.</p>\n<p>Probably the way to resolve this, would be to make <code>normed_space</code> to extend <code>locally_convex_space</code>, but I'm afraid touching mathlib.</p>",
        "id": 214866798,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1603904471
    },
    {
        "content": "<p>yes, you have to change the definition, or else introduce <code>normed_space'</code> that extends <code>normed_space</code> and <code>locally_convex_space</code></p>",
        "id": 214867303,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603904663
    },
    {
        "content": "<p>or live with the diamond and use <code>convert</code> as reid suggested</p>",
        "id": 214867583,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603904781
    },
    {
        "content": "<p>I'm a bit confused how to make <code>normed_space</code> extend <code>locally_convex_space</code> without introducing another diamond. The <code>normed_space</code> assumes that you already provide <code>normed_group</code> on the base type. Therefore there would be two ways of getting topology, through the extension from <code>locally_convex_space</code> and from the <code>normed_group</code>.</p>",
        "id": 214868657,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1603905250
    },
    {
        "content": "<p>You make <code>normed_space</code> extend <code>locally_convex_space</code> and <code>normed_group</code>, and the common fields are merged</p>",
        "id": 214869034,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603905449
    },
    {
        "content": "<p>You have to use <code>old_structure_cmd</code> to make it work</p>",
        "id": 214869098,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603905478
    },
    {
        "content": "<p>So i'm thinking that the definition of <code>locally_convex_space</code> should be:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">locally_convex_space</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>  <span class=\"o\">[</span><span class=\"n\">normed_field</span> <span class=\"n\">a</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">toplogical_group</span> <span class=\"n\">b</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">semimodule</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span> <span class=\"n\">zero</span> <span class=\"n\">has</span> <span class=\"n\">neighbourhood</span> <span class=\"n\">basis</span> <span class=\"n\">made</span> <span class=\"n\">of</span> <span class=\"n\">convex</span> <span class=\"n\">sets...</span>\n</code></pre></div>\n\n<p>and then change the definition of <code>normed_space</code> to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">normed_space</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">normed_field</span> <span class=\"n\">a</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_group</span> <span class=\"n\">b</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">locally_convex_space</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 214869496,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1603905619
    },
    {
        "content": "<p>oh, in that case I don't see a problem</p>",
        "id": 214869721,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603905704
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/Dealing.20with.20different.20paths.20in.20type.20class.20inference/near/214869034\">said</a>:</p>\n<blockquote>\n<p>You make <code>normed_space</code> extend <code>locally_convex_space</code> and <code>normed_group</code>, and the common fields are merged</p>\n</blockquote>\n<p>In mathlib <code>normed_space</code> does not extends <code>normed_group</code> it extends only <code>semimodule</code>.  Should I keep it that way?</p>",
        "id": 214869722,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1603905706
    },
    {
        "content": "<p>yes, I was thinking about unary type classes</p>",
        "id": 214869805,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603905731
    },
    {
        "content": "<p>with the parameters as you have them I don't see where the diamond arises</p>",
        "id": 214869843,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603905751
    },
    {
        "content": "<p>Is the whole mathlib going to break if I introduce this changes?</p>",
        "id": 214869915,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1603905788
    },
    {
        "content": "<p>probably not</p>",
        "id": 214869961,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603905807
    },
    {
        "content": "<p>it mostly comes up when introducing new instances, since these now have to prove that they have a locally convex structure</p>",
        "id": 214870104,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603905847
    },
    {
        "content": "<p>I count 5 instances of <code>normed_space</code> in mathlib, so not horrible</p>",
        "id": 214870238,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603905914
    },
    {
        "content": "<p>Ok, I will try it out.</p>",
        "id": 214870461,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1603905999
    },
    {
        "content": "<p>Note that <code>metric_space</code> and <code>normed_space</code> don't use <code>old_structure_cmd</code></p>",
        "id": 214881213,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603910806
    },
    {
        "content": "<p>And you won't have a diamond problem if <code>locally_convex_space</code> will be a <code>Prop</code> mixin taking <code>semimodule</code> as an argument</p>",
        "id": 214881434,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603910905
    },
    {
        "content": "<p>But <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> doesn't like mixins</p>",
        "id": 214881506,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603910943
    },
    {
        "content": "<p>I assumed from \"local convex structure\" that there is some non-propositional data</p>",
        "id": 214881608,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603910984
    },
    {
        "content": "<p>It seems that the only non-propositional data comes from <code>semimodule</code>. At least based on the textual description.</p>",
        "id": 214882260,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603911284
    },
    {
        "content": "<p>I guess, something like <code>∀ U ∈ nhds (0:E), ∃ s ∈ nhds (0:E), convex s ∧ s ⊆ U</code>.</p>",
        "id": 214882383,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603911348
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/113488-general/topic/Dealing.20with.20different.20paths.20in.20type.20class.20inference/near/214882383\">said</a>:</p>\n<blockquote>\n<p>I guess, something like <code>∀ U ∈ nhds (0:E), ∃ s ∈ nhds (0:E), convex s ∧ s ⊆ U</code>.</p>\n</blockquote>\n<p>I will probably go this way. The problem is that convexity makes sense only for real or complex vector spaces, this prevents me from making <code>normed_space</code> to extend <code>locally_convex_space</code>.</p>",
        "id": 214884076,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1603912103
    },
    {
        "content": "<p><a href=\"https://www.springer.com/gp/book/9783540425335\">https://www.springer.com/gp/book/9783540425335</a> :P</p>",
        "id": 214884126,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1603912140
    },
    {
        "content": "<p>\"The fourth more advanced chapter was added to give the reader a rather complete tour through all the important aspects of the theory of locally convex vector spaces over nonarchimedean fields. \"</p>",
        "id": 214884268,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1603912216
    },
    {
        "content": "<p>You don't need <code>normed_space</code> to extend <code>locally_convex_space</code> if <code>locally_convex_space</code> is a <code>Prop</code>-valued mixin.</p>",
        "id": 214884761,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603912537
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/113488-general/topic/Dealing.20with.20different.20paths.20in.20type.20class.20inference/near/214884761\">said</a>:</p>\n<blockquote>\n<p>You don't need <code>normed_space</code> to extend <code>locally_convex_space</code> if <code>locally_convex_space</code> is a <code>Prop</code>-valued mixin.</p>\n</blockquote>\n<p>Yes, I understand that now, which is great! But I have already started modifying matlib to do such an extension, but I will abandon that approach now.</p>",
        "id": 214884925,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1603912621
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/Dealing.20with.20different.20paths.20in.20type.20class.20inference/near/214884268\">said</a>:</p>\n<blockquote>\n<p>\"The fourth more advanced chapter was added to give the reader a rather complete tour through all the important aspects of the theory of locally convex vector spaces over nonarchimedean fields. \"</p>\n</blockquote>\n<p>Ohhh ok. I need to have a look at their definition of locally convex space then. The definition via seminorms probably still works, but I do not see how to define a convex set.</p>\n<p>Also to keep <code>locally_convex_space</code> as a <code>Prop</code> I will only state an existence of a family of seminorms that generates the given topology.</p>",
        "id": 214885095,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1603912724
    },
    {
        "content": "<p>Honestly I wouldn't worry about the nonarchimedean case right now :-)</p>",
        "id": 214885183,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1603912772
    },
    {
        "content": "<p>but FWIW this is the definition in the nonarchimedean case too -- the p-adic numbers are a complete normed field and there is a theory of Banach spaces, locally convex spaces etc over this field (which is important in the p-adic Langlands program)</p>",
        "id": 214885334,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1603912839
    },
    {
        "content": "<p>I'm running into these problems again, this time with <code>inner_product_space</code>.</p>\n<p>First, I need a product of <code>inner_product_spaces</code> and there does not seems to be one defined, so I have defined it. (currently just with a <code>sorry</code>, so that might be a problem)</p>\n<p>Example of a problem with this is when deducing <code>add_comm_group</code> of a product. I get two different paths:</p>\n<p>1. product of two <code>inner_product_space</code> -&gt; <code>inner_product_space</code> to <code>normed group</code> -&gt; <code>normed_group</code> to <code>add_comm_group</code><br>\n  2.   <code>inner_product_space</code> to <code>normed group</code> -&gt; <code>normed_group</code> to <code>add_comm_group</code> -&gt; product of two <code>add_comm_group</code></p>\n<p>The problem is all over the place, when deducing <code>topological_space</code> <code>semimodule</code> etc.</p>\n<p>This leads to the question why is <code>inner_product_space</code> not a <code>Prop</code>? It is just a <code>normed_space</code> that satisfy <a href=\"https://en.wikipedia.org/wiki/Parallelogram_law\">parallelogram law</a>.</p>\n<p>Going down the rabbit hole.  Cannot we define <code>normed_group</code> also as a <code>Prop</code>? Maybe there is some sufficient and necessary condition on the metric to be induced by a norm.</p>",
        "id": 215363216,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1604343879
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"346070\">@Tomas Skrivan</span> I think if you fill in the <code>sorry</code>, then the problem might go away.</p>",
        "id": 215363476,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604344001
    },
    {
        "content": "<p>Because then Lean can check that the two paths give the same <code>add_comm_group</code> (definitionally)</p>",
        "id": 215363520,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604344021
    },
    {
        "content": "<p>Ok, I will try that, but I'm expecting there will be a problem with topology because if I have checked correctly, the product of normed space is given with sup norm but product of inner product spaces gives product with l2 norm. The resulting norm/metric is different but the topology is the same, but that is non-trivial theorem. Let's see if I get into trouble.</p>",
        "id": 215425323,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1604393388
    },
    {
        "content": "<p>yup, that sounds like you might get some trouble at some point... but I don't know that part of the library well enough to know how much trouble</p>",
        "id": 215427829,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604395001
    },
    {
        "content": "<p>You should be using a type synonym. </p>\n<p>In the same way, the product of finitely many spaces is endowed with the sup norm, so to define the product of finitely many inner spaces, with the canonical inner product structure, we use <code>pi_Lp 2 one_le_two</code>, which as a type is just the same as the product type, but as a normed space is registered with a different norm. That's why the instance <code>pi_Lp.inner_product_space</code> in <code>inner_product.lean</code> does not create a problem.</p>\n<p>Note that the product of two spaces is <em>not</em> a special case of the product of finitely many spaces (an element of the first one has two components <code>x.fst</code> and <code>x.snd</code>, while an element of the second one is a function on a finite space)...</p>",
        "id": 215428560,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1604395448
    }
]