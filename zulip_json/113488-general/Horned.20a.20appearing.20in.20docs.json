[
    {
        "content": "<p>Like in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/subtype.map_coe\">docs#subtype.map_coe</a> due to the way the lemma is stated.</p>",
        "id": 216535504,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1605218466
    },
    {
        "content": "<p>Which is generated by <code>simps</code></p>",
        "id": 216535554,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1605218494
    },
    {
        "content": "<p>I don't see the problem with this</p>",
        "id": 216536146,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605218830
    },
    {
        "content": "<p>it looks very odd</p>",
        "id": 216536194,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605218867
    },
    {
        "content": "<p>I think this is a necessary result of having autogenerated lemmas</p>",
        "id": 216536277,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605218899
    },
    {
        "content": "<p>we used to write these manually, and when you do so you can calibrate the presentation</p>",
        "id": 216536309,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605218920
    },
    {
        "content": "<p>I must be out of the loop. What's going on with this funny \"a\"? It came up as an automatically generated name for an inductive hypothesis in some proof I was working on today, and I had no idea how to typeset it.</p>",
        "id": 216536331,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1605218936
    },
    {
        "content": "<p>an autogenerated lemma needs autogenerated names</p>",
        "id": 216536338,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605218940
    },
    {
        "content": "<p>the funny \"a\" is just the new default base name for autogenerated names</p>",
        "id": 216536376,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605218966
    },
    {
        "content": "<p>But why?</p>",
        "id": 216536418,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1605218977
    },
    {
        "content": "<p>Is it to discourage people from referring to the auto-generated name?</p>",
        "id": 216536531,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1605219002
    },
    {
        "content": "<p>it's there to discourage accidental use, as well as fixing the longstanding <code>a</code> bug</p>",
        "id": 216536568,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605219005
    },
    {
        "content": "<p>which was basically where people would choose themselves a name that overlaps the one the name generator wanted to pick</p>",
        "id": 216536611,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605219035
    },
    {
        "content": "<p>Well, I guess it did it's job in my case <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span> Except instead of using <code>induction foo with h1 h2 ...</code> I just copied/pasted from the goal window</p>",
        "id": 216536656,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1605219066
    },
    {
        "content": "<p>I think mathlib has a style linter that will complain at you if you write <code>ᾰ</code> in a mathlib file</p>",
        "id": 216536736,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605219122
    },
    {
        "content": "<p>you can also use <code>case</code> to name your variables btw</p>",
        "id": 216536839,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605219175
    },
    {
        "content": "<p>(To clarify, this was just experimenting during a discussion with a student, not in anything intended for mathlib)</p>",
        "id": 216536842,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1605219175
    },
    {
        "content": "<p>maybe we should have a tactic that renames all the variables starting with <code>ᾰ</code> to a provided list</p>",
        "id": 216537018,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605219267
    },
    {
        "content": "<p>that would help in the few cases where you can't easily supply the name because it is deep in some tactic that doesn't thread the names through, like <code>finish</code> or <code>tidy</code></p>",
        "id": 216537100,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605219313
    },
    {
        "content": "<p>It was <code>x_ih_ᾰ_1</code> in my case</p>",
        "id": 216537130,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1605219330
    }
]