[
    {
        "content": "<p>Is there an instance of <code>decidable_linear_order</code> on <code>option</code> in Mathlib or core? I can't find one</p>",
        "id": 134463860,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1537675557
    },
    {
        "content": "<p>maybe <code>with_bot</code> has an order</p>",
        "id": 134464059,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537676017
    },
    {
        "content": "<p>Yes, it does, thanks! Now I'm stuck for a new reason: I don't have a decidable linear order for <code>name</code> (from the tactics). I think I'll need to write some of those orders myself</p>",
        "id": 134464253,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1537676443
    },
    {
        "content": "<p>There is an order on <code>name</code>, but it is <code>meta</code> and not an instance</p>",
        "id": 134464258,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537676468
    },
    {
        "content": "<p>does it need to be meta?</p>",
        "id": 134464261,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537676502
    },
    {
        "content": "<p>no</p>",
        "id": 134464262,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537676507
    },
    {
        "content": "<p>Actually, I only need a decidable relation, not an order</p>",
        "id": 134464263,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1537676510
    },
    {
        "content": "<p>it has that already</p>",
        "id": 134464264,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537676517
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>meta instance : decidable_rel name.lt :=\nλ a b, ordering.decidable_eq _ _\n\nmeta instance : has_lt name :=\n⟨name.lt⟩\n</pre></div>",
        "id": 134464301,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537676525
    },
    {
        "content": "<p>also relevant</p>\n<div class=\"codehilite\"><pre><span></span>/- Both cmp and lex_cmp are total orders, but lex_cmp implements a lexicographical order. -/\nmeta constant name.cmp : name → name → ordering\nmeta constant name.lex_cmp : name → name → ordering\n</pre></div>",
        "id": 134464305,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537676549
    },
    {
        "content": "<p>The issue is that the order relation and its decidability for <code>has_bot</code> are wrapped up in order instances</p>",
        "id": 134464306,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1537676561
    },
    {
        "content": "<p>I guess we could generalize the definitions to <code>has_le</code> from <code>has_le</code> and <code>has_lt</code> from <code>has_lt</code>, without committing to any order properties</p>",
        "id": 134464312,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537676626
    },
    {
        "content": "<p>Exactly</p>",
        "id": 134464353,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1537676693
    },
    {
        "content": "<p>An easy fix is</p>\n<div class=\"codehilite\"><pre><span></span>meta instance : decidable_linear_order name :=\nby refine {lt := (&lt;), le := \\lam a b, \\neg b &lt; a, ..}; exact undefined\n</pre></div>",
        "id": 134464354,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537676702
    },
    {
        "content": "<p>That's evil</p>",
        "id": 134464400,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1537676778
    },
    {
        "content": "<p>how exactly is <code>undefined</code> defined?</p>",
        "id": 134464401,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537676779
    },
    {
        "content": "<p><code>undefined := undefined</code>, effectively</p>",
        "id": 134464402,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537676794
    },
    {
        "content": "<p>then how does VM know what to do with <code>#eval unchecked_cast</code>?</p>",
        "id": 134464404,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537676812
    },
    {
        "content": "<p>it's not really, because this causes loops instead of an error</p>",
        "id": 134464405,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537676816
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> you may have a different opinion if you knew that this is for a mathlib PR</p>",
        "id": 134464406,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1537676820
    },
    {
        "content": "<p><code>name</code> is basically meta. If a proof gets in your way, kill it</p>",
        "id": 134464412,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537676860
    },
    {
        "content": "<p>As long as it's actually true</p>",
        "id": 134464413,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537676880
    },
    {
        "content": "<p>or close enough to true that it doesn't matter</p>",
        "id": 134464453,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537676892
    },
    {
        "content": "<p>We could write <code>name.lt</code> non-meta, but I would want to see what is the performance hit first</p>",
        "id": 134464462,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537676948
    },
    {
        "content": "<blockquote>\n<p>or close enough to true that it doesn't matter</p>\n</blockquote>\n<p>I'm hesitant to agree because I see the type class constraint as a way the type system tells you to make sure you're satisfying assumptions and warning you when you break those assumptions. You write <code>undefined</code> and you lose all that information. Or rather, the type system tells you \"all the assumptions are satisfied, no worries\" when it might not be the case</p>",
        "id": 134464579,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1537677191
    },
    {
        "content": "<p>This is true, but <code>meta</code> code doesn't have these guarantees anyway, except in a vague sense</p>",
        "id": 134464780,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537677674
    },
    {
        "content": "<p>A proof in <code>meta</code> land means something between \"nothing at all\" and \"probably true\"</p>",
        "id": 134464784,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537677707
    },
    {
        "content": "<p>As a comparison, that used to be my opinion of software testing until I started grading software assignment of students who often didn't bother testing. Yes, tested software is still imperfect but untested is so much worse</p>",
        "id": 134464828,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1537677790
    },
    {
        "content": "<p>right, which is why a meta proof can mean \"probably true\": the user had to make a conscious choice to either prove it or stub it out</p>",
        "id": 134464829,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537677841
    },
    {
        "content": "<p>I liken it to the \"preconditions\" requirements in programs in Haskell or Java. It says \"don't fail this requirement or else\" and no compile or run time checking</p>",
        "id": 134464878,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537677917
    },
    {
        "content": "<p>If you pass an order that is not linear to a function expecting one in the type, it's your fault if it breaks</p>",
        "id": 134464905,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537677962
    },
    {
        "content": "<p>I think comparing it the a quickcheck property would be closer to the truth, when you decide to write them, they nudge you in the right direction</p>",
        "id": 134464920,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1537677982
    }
]