[
    {
        "content": "<p>I remember seeing the keyword <code>mutual</code> once, which caught me completely off guard. I understand that it can be used for \"mutual induction\" but I don't know if that means what I think it means</p>",
        "id": 285001719,
        "sender_full_name": "Violeta Hern치ndez",
        "timestamp": 1654379423
    },
    {
        "content": "<p>How does this work?</p>",
        "id": 285001723,
        "sender_full_name": "Violeta Hern치ndez",
        "timestamp": 1654379440
    },
    {
        "content": "<p>I'm interested in it because it might lead to a simpler definition for <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pgame.has_le\">docs#pgame.has_le</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pgame.lf\">docs#pgame.lf</a></p>",
        "id": 285001727,
        "sender_full_name": "Violeta Hern치ndez",
        "timestamp": 1654379459
    },
    {
        "content": "<p>These are currently defined in terms of a single \"mutual definition\" <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pgame.le_lf\">docs#pgame.le_lf</a>, which while effective, is certainly much more confusing</p>",
        "id": 285001791,
        "sender_full_name": "Violeta Hern치ndez",
        "timestamp": 1654379552
    },
    {
        "content": "<p>I believe mutual inductive types are not that well supported in lean 3, so that might be more trouble than it's worth right now</p>",
        "id": 285001798,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1654379573
    }
]