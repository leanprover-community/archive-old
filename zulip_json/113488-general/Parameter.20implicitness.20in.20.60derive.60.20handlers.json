[
    {
        "content": "<p>When I do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">k</span><span class=\"o\">]</span>\n\n<span class=\"kd\">@[derive [inhabited, add_comm_monoid]</span><span class=\"o\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">add_monoid_algebra</span> <span class=\"o\">:=</span> <span class=\"n\">G</span> <span class=\"bp\">→₀</span> <span class=\"n\">k</span>\n</code></pre></div>\n\n<p>this results in a definition <code>add_monoid_algebra.inhabited : Π (k : Type ?) (G : Type ?) [_inst_1 : semiring k], inhabited (add_monoid_algebra k G)</code>. Can <code>derive</code> be told to put <code>k</code> and <code>G</code> in <code>{}</code>?</p>",
        "id": 213398097,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602753161
    },
    {
        "content": "<p>It probably could. Is that desirable? Since it's an instance, it won't be called to often manually, and I'm not sure if the heuristic \"make all arguments implicit\" is better than \"use the same explicitness as in the main declaration\".</p>",
        "id": 213475299,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1602789817
    },
    {
        "content": "<p>In this case, it's because all the manual instances in the file use implicit parameters, so it feels inconsistent to switch them to derived instances</p>",
        "id": 213478718,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602791487
    },
    {
        "content": "<p>Frankly it feels like mathlib should have a convention for arguments to <code>instance</code>s, and <code>derive</code> should match whatever that conclusion is</p>",
        "id": 213478887,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602791556
    },
    {
        "content": "<p>Instances are almost never be written explicitly, so it tends to not matter whether the arguments are explicit. I have no good intuition whether I would want arguments explicit or implicit. My guess would be \"explicit, unless a later argument depends on it.\"</p>",
        "id": 213479277,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1602791754
    },
    {
        "content": "<p>I generally try to use explicit arguments for instances, although they often inherit implicit from the variables declaration and it's not a big deal like Floris said. The primary advantage of being explicit is that it's easier to see what's going on when you print them out</p>",
        "id": 213479794,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602791997
    },
    {
        "content": "<p>also it's generally less typing if for whatever reason you need to specify a typeclass instance</p>",
        "id": 213479926,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602792041
    }
]