[
    {
        "content": "<p>In the following example, opening the namespace <code>nat</code> affects the ability of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.apply_list_expr\">docs#tactic.apply_list_expr</a> to function.  Can anyone suggest a fix?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.core</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.int.basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">@[user_attribute]</span>\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">user_attribute</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"n\">foo</span><span class=\"o\">,</span>\n  <span class=\"n\">descr</span> <span class=\"o\">:=</span> <span class=\"s2\">\"\"</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">foo</span><span class=\"o\">]</span> <span class=\"n\">pow_lt_pow_of_lt_left</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">minitac</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">foo_rules</span> <span class=\"bp\">←</span> <span class=\"n\">resolve_attribute_expr_list</span> <span class=\"bp\">`</span><span class=\"n\">foo</span><span class=\"o\">,</span>\n  <span class=\"n\">trace</span> <span class=\"n\">foo_rules.length</span><span class=\"o\">,</span>\n  <span class=\"n\">apply_list_expr</span> <span class=\"o\">{</span><span class=\"n\">md</span> <span class=\"o\">:=</span> <span class=\"n\">reducible</span><span class=\"o\">}</span> <span class=\"n\">foo_rules</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">minitac</span><span class=\"o\">,</span> <span class=\"c1\">-- desired behaviour</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">nat</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">minitac</span><span class=\"o\">,</span> <span class=\"c1\">-- \"no matching rule\"</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 302557123,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1665009792
    },
    {
        "content": "<p>I'm assuming the problem is in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.apply_list_expr\">docs#tactic.apply_list_expr</a> rather than <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.resolve_attribute_expr_list\">docs#tactic.resolve_attribute_expr_list</a>, because of the output of the <code>trace</code>.</p>",
        "id": 302557173,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1665009837
    },
    {
        "content": "<p>Actually  I think the problem is the calls to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.resolve_name\">docs#tactic.resolve_name</a> in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.resolve_attribute_expr_list\">docs#tactic.resolve_attribute_expr_list</a>, you get a name clash between <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pow_lt_pow_of_lt_left\">docs#pow_lt_pow_of_lt_left</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.pow_lt_pow_of_lt_left\">docs#nat.pow_lt_pow_of_lt_left</a>.<br>\nThe following version has the desired behaviour:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.core</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.int.basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">tactic</span>\n<span class=\"bp\">.</span>\n\n<span class=\"kd\">@[user_attribute]</span>\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">user_attribute</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"n\">foo</span><span class=\"o\">,</span>\n  <span class=\"n\">descr</span> <span class=\"o\">:=</span> <span class=\"s2\">\"\"</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">foo</span><span class=\"o\">]</span> <span class=\"n\">pow_lt_pow_of_lt_left</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">resolve_attribute_expr_list'</span> <span class=\"o\">(</span><span class=\"n\">attr_name</span> <span class=\"o\">:</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">tactic</span> <span class=\"n\">expr</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">l</span> <span class=\"bp\">←</span> <span class=\"kn\">attribute</span><span class=\"bp\">.</span><span class=\"n\">get_instances</span> <span class=\"n\">attr_name</span><span class=\"o\">,</span>\n  <span class=\"n\">list.map</span> <span class=\"n\">i_to_expr_for_apply</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">list.reverse</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">l.mmap</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"k\">do</span> <span class=\"n\">c</span> <span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"n\">mk_const</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">pexpr.of_expr</span> <span class=\"n\">c</span><span class=\"o\">))</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">tactic.interactive.minitac</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">foo_rules</span> <span class=\"bp\">←</span> <span class=\"n\">resolve_attribute_expr_list'</span> <span class=\"bp\">`</span><span class=\"n\">foo</span><span class=\"o\">,</span>\n  <span class=\"n\">trace</span> <span class=\"n\">foo_rules.length</span><span class=\"o\">,</span>\n  <span class=\"n\">apply_list_expr</span> <span class=\"o\">{</span><span class=\"n\">md</span> <span class=\"o\">:=</span> <span class=\"n\">reducible</span><span class=\"o\">}</span> <span class=\"n\">foo_rules</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">minitac</span><span class=\"o\">,</span> <span class=\"c1\">-- desired behaviour</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">nat</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">minitac</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 302559316,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1665010975
    },
    {
        "content": "<p>Huh!  So should </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">list.map</span> <span class=\"n\">i_to_expr_for_apply</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">list.reverse</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">l.mmap</span> <span class=\"n\">resolve_name</span>\n</code></pre></div>\n<p>be replaced by</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">list.map</span> <span class=\"n\">i_to_expr_for_apply</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">list.reverse</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">l.mmap</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"k\">do</span> <span class=\"n\">c</span> <span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"n\">mk_const</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">pexpr.of_expr</span> <span class=\"n\">c</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>in <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#resolve_attribute_expr_list\">tactic#resolve_attribute_expr_list</a> ?</p>",
        "id": 302559676,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1665011170
    },
    {
        "content": "<p>Looks like resolve_attribute_expr_list is only used in one place, which is apply_rules, which seems more general, so I wouldn't say so without looking a lot deeper</p>",
        "id": 302559817,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1665011275
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">resolve_attribute_expr_list'</span> <span class=\"o\">(</span><span class=\"n\">attr_name</span> <span class=\"o\">:</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">tactic</span> <span class=\"n\">expr</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">l</span> <span class=\"bp\">←</span> <span class=\"kn\">attribute</span><span class=\"bp\">.</span><span class=\"n\">get_instances</span> <span class=\"n\">attr_name</span><span class=\"o\">,</span>\n  <span class=\"n\">l.reverse.mmap</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">mk_const</span> <span class=\"n\">n</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>is probably a shorter way</p>",
        "id": 302559864,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1665011284
    },
    {
        "content": "<p>Indeed, I am using it for an <code>apply_rules</code>-like function.</p>",
        "id": 302559914,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1665011332
    },
    {
        "content": "<p>Well, if I make the change in a branch and it doesn't break anything in mathlib, is that enough evidence to PR it?</p>",
        "id": 302559973,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1665011392
    },
    {
        "content": "<p>Could be, but I also don't really see an issue with having similar but slightly different tactic internals around if they have slightly different purposes. Of course if you can reproduce the original issue with apply rules then thats a bug that should be fixed<br>\nWe should also ask <span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span> if he has a particular reason to write it this way, the comments in the source of apply rules make it seem like the setup was carefully chosen, though out of context it does seem a bit odd (e.g. returning a list of tactic exprs)</p>",
        "id": 302560217,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1665011582
    },
    {
        "content": "<p>Actually the bug does seem to be there for apply rules, or at least the error message is unhelpful</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">nat</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply_rules</span> <span class=\"o\">[</span><span class=\"n\">pow_lt_pow_of_lt_left</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 302560349,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1665011676
    },
    {
        "content": "<p>Indeed, it's exactly the same behaviour for apply_rules.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.core</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.int.basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">@[user_attribute]</span>\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">user_attribute</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"n\">foo</span><span class=\"o\">,</span>\n  <span class=\"n\">descr</span> <span class=\"o\">:=</span> <span class=\"s2\">\"\"</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">foo</span><span class=\"o\">]</span> <span class=\"n\">pow_lt_pow_of_lt_left</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply_rules</span> <span class=\"k\">with</span> <span class=\"n\">foo</span><span class=\"o\">,</span> <span class=\"c1\">-- desired behaviour</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">nat</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply_rules</span> <span class=\"k\">with</span> <span class=\"n\">foo</span><span class=\"o\">,</span> <span class=\"c1\">-- \"no matching rule\"</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 302560415,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1665011723
    },
    {
        "content": "<p>So that should be fixed, but I'm not sure the fix is the same as in your case, where you know precisely which declaration you want to apply, as its the one given to you by the attribute, so there is never a need to resolve the name</p>",
        "id": 302560417,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1665011724
    },
    {
        "content": "<p>Maybe, at least, this should be the behaviour for apply_rules when it is used with an attribute (as <a href=\"#narrow/stream/113488-general/topic/namespace.20affects.20behaviour.20of.20.60apply_list_expr.60/near/302560415\">here</a>).</p>",
        "id": 302560525,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1665011801
    },
    {
        "content": "<p>For apply rules what should probably happen is it tells the user, hey you gave me an ambiguous name, please specify this more, rather than \"no matching rule\"</p>",
        "id": 302560526,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1665011803
    },
    {
        "content": "<p>Oh I see, yeah thats more similar to your tactic, so maybe there should be different internals</p>",
        "id": 302560676,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1665011885
    },
    {
        "content": "<p>Do you mean, different internals for <code>apply_rules</code> with an attribute vs with a user-specified lemma?</p>",
        "id": 302560723,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1665011927
    },
    {
        "content": "<p>Yeah I think that you make the most sense, after all one has the possibility of ambiguity, that we want to ask the user to fix, but the other should just work</p>",
        "id": 302560928,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1665012070
    },
    {
        "content": "<p>Thanks!  It's slightly above my pay grade, unfortunately.  I'll open an issue.</p>",
        "id": 302560983,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1665012098
    },
    {
        "content": "<p>And also ping <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> who I think is doing the mathlib4 port.</p>",
        "id": 302561053,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1665012129
    },
    {
        "content": "<p>Actually looking at it more it seems your original suggestion is fine, <code>resolve_attribute_expr_list</code> is only used for the ones supplied via attribute anyway, so making the change there should be ok</p>",
        "id": 302561089,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1665012160
    },
    {
        "content": "<p>Oh, ok!  Then I think I can do that myself.</p>",
        "id": 302561176,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1665012229
    },
    {
        "content": "<p>Sorry for the confusion! Took me a minute to wrap my head around the way it is set up</p>",
        "id": 302561239,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1665012262
    },
    {
        "content": "<p>(Or you can if you prefer, it's your line of code)</p>",
        "id": 302561241,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1665012265
    },
    {
        "content": "<p>Please go ahead (I'm about to log off for the night anyways)! I think the</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">list.map</span> <span class=\"n\">i_to_expr_for_apply</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">list.reverse</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">l.mmap</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"k\">do</span> <span class=\"n\">c</span> <span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"n\">mk_const</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">pexpr.of_expr</span> <span class=\"n\">c</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>version is maybe better after looking at this more</p>",
        "id": 302561411,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1665012406
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/16827\">#16827</a></p>",
        "id": 302561673,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1665012616
    },
    {
        "content": "<p>Why does apply_rules take a list of names and not pexprs?</p>",
        "id": 302563006,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1665013700
    },
    {
        "content": "<p>Then the name resolution would just be automatic like it is for <code>rw</code></p>",
        "id": 302563049,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1665013758
    }
]