[
    {
        "content": "<p>Asking here to see what the general consensus is. Do we have any sort of preference for</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">bar</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- [long definition]</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_foo</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">foo</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>over</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_foo</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"gr\">sorry</span><span class=\"o\">⟩</span> <span class=\"c1\">-- [long definition]</span>\n</code></pre></div>\n<p>Here <code>foo</code> can be <code>add</code> or <code>insert</code> or <code>empty</code> or something like that.</p>",
        "id": 289865125,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658034955
    },
    {
        "content": "<p>I had been going around changing the former into the latter in a few parts of the code, until I was stopped by <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> who showed me that we don't really have any explicit preference.</p>",
        "id": 289865175,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658035022
    },
    {
        "content": "<p>I prefer the latter for two reasons, which I outlined during <a href=\"https://github.com/leanprover-community/mathlib/pull/15210#discussion_r922768926\">that conversation</a>:</p>\n<ul>\n<li>the extra definition means one extra layer of unfolding: e.g. first <code>has_add.add</code>, then <code>add</code>.</li>\n<li>if someone tries using the direct definition rather than the instance, all the usual simp lemmas and rws won't work (this is particularly bad with <code>insert</code>, where the goals look the same).</li>\n</ul>",
        "id": 289865252,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658035150
    },
    {
        "content": "<p>Also worth pointing out, the latter pattern can't be used when the equation compiler is involved.</p>",
        "id": 289865261,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658035189
    },
    {
        "content": "<p>So ehm yeah, would be nice to hear what others think or do in their own code.</p>",
        "id": 289865305,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658035213
    },
    {
        "content": "<p>One reason to prefer the definition is that instances are unfolded at instance reducibility but definitions are not, which means that if you have two instance paths to a definition then you don't have to compare the definition bodies and can stop at the constant application</p>",
        "id": 289866132,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1658036682
    },
    {
        "content": "<p>I wonder what happens with the converse - are there any real-world scenarios where we might have two definitions that actually coincide?</p>",
        "id": 289868228,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658040167
    },
    {
        "content": "<p>I think I have one: the definition of <code>≤</code> on <code>set α</code> and the one defined for the <code>set_like</code> instance are separate (neither depends on the other), but turn out to be definitionally equal</p>",
        "id": 289868300,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658040332
    },
    {
        "content": "<p>So using the <code>definition</code> pattern would create a diamond</p>",
        "id": 289868305,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658040345
    },
    {
        "content": "<p>I was under the impression that typeclass inference could unfold semireducible definitions when unifying diamonds</p>",
        "id": 289868576,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658040785
    },
    {
        "content": "<p>There was some example where I think we needed int.sub to match algebra.sub and it wasn't working out because they are separate definitions, defeq at semireducible level but not instance level</p>",
        "id": 289886107,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1658065921
    },
    {
        "content": "<p>the only reference I can find is <a href=\"#narrow/stream/180721-mathlib-maintainers/topic/.235303/near/219994192\">https://leanprover.zulipchat.com/#narrow/stream/180721-mathlib-maintainers/topic/.235303/near/219994192</a> though, I think we are doing something else now since <code>sub</code> is a field</p>",
        "id": 289886540,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1658066406
    },
    {
        "content": "<p>Wow, a secret stream.</p>",
        "id": 289891076,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1658072964
    },
    {
        "content": "<p>whoops</p>",
        "id": 289891161,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1658073089
    },
    {
        "content": "<p>reproducing, <span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> said:</p>\n<blockquote>\n<p>There is a definition in core that looks very similar to <code>algebra.sub</code> but it isn't, and this causes problems with definitional unfolding in norm_num proofs like <code>5 - 2 = 3</code> on int</p>\n</blockquote>",
        "id": 289891252,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1658073210
    },
    {
        "content": "<p>That's sounds like an annoying detail to think about when writing tactics rather a typeclass inference issue</p>",
        "id": 289894106,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658077377
    }
]