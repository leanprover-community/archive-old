[
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean/issues/550\">lean#550</a>, allowing to prefix lemmas with <code>_root_</code> to get them out of the current namespace, would be very useful for <a href=\"https://github.com/leanprover-community/mathlib/issues/6668\">#6668</a>. Is there a hope to have a release of Lean 3.28.0 in the not too distant future? :-)</p>",
        "id": 230341538,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1615814095
    },
    {
        "content": "<p>Is <a href=\"https://github.com/leanprover-community/lean/issues/551\">lean#551</a> close and is there consensus for it? <span class=\"user-mention\" data-user-id=\"308899\">@Yakov Pechersky</span></p>",
        "id": 230344495,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1615815298
    },
    {
        "content": "<p>If not, I can put together a release later today.</p>",
        "id": 230344596,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1615815347
    },
    {
        "content": "<p>I don't think it is close in the sense that I am not sure there is consensus for it.</p>",
        "id": 230344712,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1615815391
    },
    {
        "content": "<p>I think <a href=\"https://github.com/leanprover-community/mathlib/issues/551\">#551</a> should be merged if and only if the Lean 4 developers decide to do the same (so certainly not now). It is rather an experiment to see how it works, and then we can present the results to Leo and see what he thinks of it.</p>\n<p><span class=\"user-mention\" data-user-id=\"308899\">@Yakov Pechersky</span> , what are your feelings about it? Does it solve the diamond problem as intended, and does it create a lot of new problems or not?</p>",
        "id": 230347558,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1615816460
    },
    {
        "content": "<p>The TC problem is solved if nsmul and gsmul are redefined. In my testing, some proofs get harder if (nsmul and nat mul) and (gsmul and int mul) aren't defeq. That's not a huge issue because one can find ways around it using proofs about properties instead.</p>",
        "id": 230347887,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1615816595
    },
    {
        "content": "<p>I haven't ironed out all of the affected proofs -- I've been trying to fix them in ways that would work in both released and this-experiment Lean. I've fixed all the proofs that are early enough in the import hierarchy such that the TC example you shared before is <code>:= rfl</code> without any error. All the proofs left to fix are later in the import hierarchy, so I've paused on that for now.</p>",
        "id": 230348194,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1615816707
    },
    {
        "content": "<p>How much % of mathlib have you fixed? And how long is the diff so far?</p>",
        "id": 230348397,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615816782
    },
    {
        "content": "<p>That might give us an estimate of how much work it is to fix the rest of mathlib</p>",
        "id": 230348436,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615816799
    },
    {
        "content": "<p>Btw, I should say that I admire your courage for taking this on! Thank you so much! I was quite intimidated by the idea of changing those low-level definitions.</p>",
        "id": 230348558,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615816834
    },
    {
        "content": "<p>Current status is: <a href=\"https://github.com/leanprover-community/mathlib/compare/pechersky/mul-on-left\">https://github.com/leanprover-community/mathlib/compare/pechersky/mul-on-left</a></p>",
        "id": 230348770,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1615816917
    },
    {
        "content": "<p>That should compile in the experimental Lean. I haven't tested it with Gabriel's tagging method. The current proof to fix (in my local branch) is for arithmetic_function.</p>",
        "id": 230349084,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1615817010
    },
    {
        "content": "<p>Thanks! I've started making a release without <a href=\"https://github.com/leanprover-community/lean/issues/551\">lean#551</a>.</p>",
        "id": 230349611,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1615817190
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 230366959,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1615823099
    }
]