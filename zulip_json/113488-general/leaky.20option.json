[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"118107\">@Amelia Livingston</span> asked why this doesn't work:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span> <span class=\"n\">order</span><span class=\"bp\">.</span><span class=\"n\">bounded_lattice</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">option</span>\n<span class=\"n\">def</span> <span class=\"n\">tropical</span> <span class=\"o\">:=</span> <span class=\"n\">with_bot</span> <span class=\"n\">ℝ</span>\n<span class=\"kn\">notation</span> <span class=\"bp\">`</span> <span class=\"err\">𝕋</span> <span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">tropical</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_add</span> <span class=\"err\">𝕋</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">option</span><span class=\"bp\">.</span><span class=\"n\">cases_on</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">x&#39;</span><span class=\"o\">,</span> <span class=\"n\">option</span><span class=\"bp\">.</span><span class=\"n\">cases_on</span> <span class=\"n\">y</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">x&#39;</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">y&#39;</span><span class=\"o\">,</span> <span class=\"n\">some</span> <span class=\"err\">$</span> <span class=\"n\">max</span> <span class=\"n\">x&#39;</span> <span class=\"n\">y&#39;</span><span class=\"o\">)</span><span class=\"bp\">⟩</span>\n\n<span class=\"c1\">-- doesn&#39;t compile</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">none_add</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"err\">𝕋</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">none</span> <span class=\"o\">:</span> <span class=\"err\">𝕋</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">failed to synthesize type class instance for</span>\n<span class=\"cm\">x : 𝕋</span>\n<span class=\"cm\">⊢ has_add (option ℝ)</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">none_add&#39;</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"err\">𝕋</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">none</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"err\">𝕋</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span> <span class=\"c1\">-- works fine</span>\n</pre></div>\n\n\n<p>The first attempt at <code>none_add</code> fails and I don't understand why. Explicitly telling Lean that <code>(none : 𝕋)</code> should surely force a typeclass search for <code>has_add 𝕋</code>, but somehow <code>option</code> leaks out.</p>",
        "id": 167027258,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1559331576
    },
    {
        "content": "<p>shouldn't you use <code>bot</code> instead of <code>none</code>?</p>",
        "id": 167027517,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1559331730
    },
    {
        "content": "<p>it's because you used <code>none</code></p>",
        "id": 167027524,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1559331737
    },
    {
        "content": "<p>Patrick, Johan and I had troubles with <code>option</code> leaking out like this when we were using <code>with_zero</code>. We even considered writing our own <code>with_zero</code> which wasn't just a copy of <code>option</code> -- Patrick pointed out that we might not really be using any of the constructions which had been made for <code>option</code> anyway. In Edinburgh Patrick even suggested just writing our own class for totally ordered groups with a zero, and I am very much coming round to his way of thinking.</p>",
        "id": 167027528,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1559331745
    },
    {
        "content": "<p>I don't know if that helps... but <code>tropical</code> is defined as <code>with_bot ...</code></p>",
        "id": 167027531,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1559331748
    },
    {
        "content": "<p><code>(none : 𝕋)</code> doesn't say \"none, of type T\", it says \"none\" and checks that this has type defeq to T</p>",
        "id": 167027568,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1559331773
    },
    {
        "content": "<p>Oh!</p>",
        "id": 167027603,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1559331794
    },
    {
        "content": "<p><code>show 𝕋, from none</code> has type T</p>",
        "id": 167027606,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1559331795
    },
    {
        "content": "<p>or <code>@id 𝕋 none</code></p>",
        "id": 167027620,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1559331805
    },
    {
        "content": "<p>but these options leave a trace in the term</p>",
        "id": 167027631,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1559331814
    },
    {
        "content": "<p>Oh this is a subtlety of which I was not at all aware, but am finally perhaps in a position to understand.</p>",
        "id": 167027730,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1559331866
    },
    {
        "content": "<p>I think <code>((+) : 𝕋 -&gt; 𝕋 -&gt; 𝕋) none x</code> might work</p>",
        "id": 167027751,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1559331878
    },
    {
        "content": "<p>or <code>(none + x :  𝕋)</code></p>",
        "id": 167027825,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1559331931
    },
    {
        "content": "<p>So when Lean is trying to figure out what is going on with <code>(none : \\bbT) + x</code> it decides that <code>none</code> has type <code>option ?m</code>, tries to unify <code>option ?m</code> with <code>\\bbT</code>, decides that <code>?m</code> is <code>real</code>, but then leaves <code>none</code> as type <code>option real</code>?</p>",
        "id": 167027827,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1559331932
    },
    {
        "content": "<blockquote>\n<p>or <code>(none + x :  𝕋)</code></p>\n</blockquote>\n<p>Yes, that one works and was in my original post. Kenny pointed it out to us.</p>",
        "id": 167027842,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1559331950
    },
    {
        "content": "<p>right</p>",
        "id": 167027927,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1559331983
    },
    {
        "content": "<p>more importantly, the <code>option ?m</code>  is the type that it's going to search for a + instance</p>",
        "id": 167027959,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1559332020
    },
    {
        "content": "<blockquote>\n<p>right</p>\n</blockquote>\n<p>But then why would <code>bot</code> make things any better? We'd just get <code>bot</code> of type <code>with_zero real</code> and this is not syntactically equal to <code>\\bbT</code></p>",
        "id": 167027961,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1559332021
    },
    {
        "content": "<p>You are right, it will find the + on with_bot in that case</p>",
        "id": 167028004,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1559332058
    },
    {
        "content": "<p>or if there is no such thing it will also fail</p>",
        "id": 167028075,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1559332092
    },
    {
        "content": "<p>But because has_bot is a typeclass you can give an instance of <code>has_bot 𝕋</code> and then it will work</p>",
        "id": 167028115,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1559332140
    },
    {
        "content": "<p>more precisely, it won't be able to figure out the type at all looking at the + or bot, so it will find the x and get the type there</p>",
        "id": 167028156,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1559332178
    },
    {
        "content": "<p>aha, actually that will happen regardless... so you won't find the bot of <code>with_bot real</code></p>",
        "id": 167028266,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1559332237
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span> <span class=\"n\">order</span><span class=\"bp\">.</span><span class=\"n\">bounded_lattice</span>\n\n<span class=\"n\">def</span> <span class=\"n\">tropical</span> <span class=\"o\">:=</span> <span class=\"n\">with_bot</span> <span class=\"n\">ℝ</span>\n<span class=\"kn\">notation</span> <span class=\"bp\">`</span> <span class=\"err\">𝕋</span> <span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">tropical</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">lattice</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">with_bot</span><span class=\"bp\">.</span><span class=\"n\">has_bot&#39;</span> <span class=\"o\">:</span> <span class=\"n\">has_bot</span> <span class=\"err\">𝕋</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">unfold</span> <span class=\"n\">tropical</span><span class=\"bp\">;</span> <span class=\"n\">apply_instance</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_add</span> <span class=\"err\">𝕋</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">option</span><span class=\"bp\">.</span><span class=\"n\">cases_on</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">x&#39;</span><span class=\"o\">,</span> <span class=\"n\">option</span><span class=\"bp\">.</span><span class=\"n\">cases_on</span> <span class=\"n\">y</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">x&#39;</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">y&#39;</span><span class=\"o\">,</span> <span class=\"n\">some</span> <span class=\"err\">$</span> <span class=\"n\">max</span> <span class=\"n\">x&#39;</span> <span class=\"n\">y&#39;</span><span class=\"o\">)</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">bot_add</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"err\">𝕋</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"err\">⊥</span> <span class=\"o\">:</span> <span class=\"err\">𝕋</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>\n\n\n<p>This does compile</p>",
        "id": 167028895,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1559332685
    },
    {
        "content": "<p>Aah, of course it compiles.</p>",
        "id": 167028909,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1559332696
    },
    {
        "content": "<p>I had no idea that the elaborator did not read <code>(x : t)</code> as \"this term must have type <code>t</code>\" -- my understanding now is that it says \"this term has some type which Lean can prove is definitionally equal to <code>t</code> but the elaborator reserves the right to insist that it has another type when trying to figure out some other types of other things later on in its elaboration journey\"</p>",
        "id": 167029011,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1559332790
    },
    {
        "content": "<p>Note that the elaborator does get some information from <code>(x : t)</code>, because it produces the goal \"(expected type of x) =?= t\" which may cause metavariables to be instantiated</p>",
        "id": 167029323,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1559332990
    },
    {
        "content": "<p>and then after that it continues with checking \"x :? expected type\"</p>",
        "id": 167029364,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1559333034
    },
    {
        "content": "<blockquote>\n<p>Note that the elaborator does get some information from <code>(x : t)</code>, because it produces the goal \"(expected type of x) =?= t\" which may cause metavariables to be instantiated</p>\n</blockquote>\n<p>Just not the metavariable in <code>@has_add.add ?m_1 ...</code></p>",
        "id": 167029682,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1559333232
    },
    {
        "content": "<p>ah, you are right, that description has the order wrong</p>",
        "id": 167029796,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1559333297
    },
    {
        "content": "<p>it first uses the expected type to elaborate x, then does \"(expected type of x) =?= t\"</p>",
        "id": 167029839,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1559333336
    },
    {
        "content": "<p>Is there no way I can work out exactly what the elaborator is doing, short of reading the C++ (which I am not capable of doing, of course) or asking here?</p>",
        "id": 167029981,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1559333439
    },
    {
        "content": "<p>Maybe there is some weird <code>meta</code> hack</p>",
        "id": 167030000,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1559333462
    },
    {
        "content": "<p>you can infer the behavior from various real and toy examples; that's what I do</p>",
        "id": 167032248,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1559334992
    },
    {
        "content": "<blockquote>\n<p>Patrick, Johan and I had troubles with <code>option</code> leaking out like this when we were using <code>with_zero</code>. We even considered writing our own <code>with_zero</code> which wasn't just a copy of <code>option</code> -- Patrick pointed out that we might not really be using any of the constructions which had been made for <code>option</code> anyway. In Edinburgh Patrick even suggested just writing our own class for totally ordered groups with a zero, and I am very much coming round to his way of thinking.</p>\n</blockquote>\n<p>For the record, let me point out that we had leaks only because we were incompetent. After some initial messing up we started to see leaking and, instead of fixing things properly, we started adding lemmas, or even simp lemmas, mixing leaked and non leaked version, making everything worse. I'm almost done refactoring all this.</p>",
        "id": 167063864,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1559380313
    }
]