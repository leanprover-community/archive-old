[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"240862\">@Oliver Nash</span> how hard do you think it would be to make it so that you could pass <code>noncomm_ring</code> a list of proofs that certain pairs of elements commute and it could use these? I don't have an explicit use case in mind at the moment, but I foresee it becoming quite useful as we embark into operator algebras.</p>",
        "id": 262166123,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1637388936
    },
    {
        "content": "<p>I know very little about tactic writing. I did open the PR that added the <code>noncomm_ring</code> tactic but it was mostly <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> who wrote it. Note that unlike <code>ring</code> it is a very simple tactic since not much is true without commutativity. Take a look <a href=\"https://github.com/leanprover-community/mathlib/blob/b3538bfa228ce7182c78d4e6c2bf5585aad7d21d/src/tactic/noncomm_ring.lean\">and see</a>.</p>",
        "id": 262193244,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1637427653
    },
    {
        "content": "<p>It sounds like what you have in mind might well be served by just using good old <code>simp</code>.</p>",
        "id": 262193302,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1637427720
    },
    {
        "content": "<p>To answer your question directly, it would very easy to have <code>noncomm_ring</code> accept a list of additional lemmas to try and apply but until we have some examples, I can't tell whether it would be worth allowing this.</p>",
        "id": 262193380,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1637427792
    },
    {
        "content": "<p>Incidentally <a href=\"https://github.com/leanprover-community/mathlib/blob/b3538bfa228ce7182c78d4e6c2bf5585aad7d21d/test/noncomm_ring.lean\">the tests</a> are a good place to get a sense of what this tactic can solve at the moment.</p>",
        "id": 262193413,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1637427835
    }
]