[
    {
        "content": "<p>Hello, I’m one of <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> 's students and I’ve got what could possibly be an issue in mathlib. I was wondering if others would be willing to take a look before I file a bug report on GitHub:</p>\n<div class=\"codehilite\"><pre><span></span>import ring_theory.algebra -- commenting this out fixes the problem\n\ndef power_series (α : Type) [comm_ring α] := ℕ → α\n\nvariables {α : Type} [comm_ring α]\n\ndef of_alpha (x : α) : power_series α\n| 0 := x\n| _ := 0\n\ninstance : has_coe α (power_series α) := ⟨of_alpha⟩\n\nexample (x : α) : power_series α := (x : power_series α) -- can&#39;t find defined instance\n</pre></div>\n\n\n<p>As described in the comments, the simple coercion from <code>α</code> to <code>power_series α</code> fails despite the instance being clearly defined on the line above. What’s more it works correctly when the algebra import is commented.</p>",
        "id": 165592348,
        "sender_full_name": "James Shaker",
        "timestamp": 1557808460
    },
    {
        "content": "<p>Where do you want to file a bug report? Lean doesn't take bug reports.... didn't Scott tell you this?</p>",
        "id": 165592373,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557808506
    },
    {
        "content": "<p>These kind of issues are really quite annoying. I don't spot anything obviously wrong.</p>",
        "id": 165592423,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557808579
    },
    {
        "content": "<p><del>Aaah I do!</del></p>",
        "id": 165592444,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557808652
    },
    {
        "content": "<p>You shouldn't use <code>has_coe</code> for these kinds of coercions, it will cause lean to go in a loop</p>",
        "id": 165592575,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557808863
    },
    {
        "content": "<p>There's some discussion about the coercion for <code>option A</code> in the file in core</p>",
        "id": 165592585,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557808886
    },
    {
        "content": "<p>use <code>has_coe_t</code> instead</p>",
        "id": 165592587,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557808894
    },
    {
        "content": "<p>I did not get a \"can't find instance\" error, I get a instance resolution depth overflow</p>",
        "id": 165592639,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557808942
    },
    {
        "content": "<p>Oh, there is a bad instance in <code>group_theory.coset</code>, <code>instance : has_coe α (quotient s) := ⟨mk⟩</code></p>",
        "id": 165592797,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557809221
    },
    {
        "content": "<p>Sorry that's the same issue I get, just forgot to include the specifics of the bug</p>",
        "id": 165592818,
        "sender_full_name": "James Shaker",
        "timestamp": 1557809273
    },
    {
        "content": "<p><code>has_coe_t</code> doesn't seem to fix the issue</p>",
        "id": 165592869,
        "sender_full_name": "James Shaker",
        "timestamp": 1557809311
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>  I think Scott was referring to posting an issue on the GitHub repo but I'm not 100% sure..</p>",
        "id": 165592888,
        "sender_full_name": "James Shaker",
        "timestamp": 1557809345
    },
    {
        "content": "<p>If you want to post issues, please post them here: <a href=\"https://github.com/leanprover-community/lean\" target=\"_blank\" title=\"https://github.com/leanprover-community/lean\">https://github.com/leanprover-community/lean</a></p>",
        "id": 165592972,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557809492
    },
    {
        "content": "<p><del>Aaahrg! Stupid copy paste buffer</del> fixed the link</p>",
        "id": 165592975,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557809503
    },
    {
        "content": "<p>Anyway, the best way to deal with such issues is by posting them here <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 165593029,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557809566
    },
    {
        "content": "<p>this isn't a lean problem it's a mathlib problem</p>",
        "id": 165593031,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557809573
    },
    {
        "content": "<p>it's some typeclass architecture bug</p>",
        "id": 165593043,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557809590
    },
    {
        "content": "<p>but I suspect the result will be that you can't define this coercion</p>",
        "id": 165593048,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557809611
    },
    {
        "content": "<p>Should we just turn off that instance (in <code>group_theory.coset</code>)?</p>",
        "id": 165593094,
        "sender_full_name": "James Shaker",
        "timestamp": 1557809644
    },
    {
        "content": "<p>working on it</p>",
        "id": 165593098,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557809649
    },
    {
        "content": "<p>but I think the power_series coercion is also a bad instance</p>",
        "id": 165593104,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557809663
    },
    {
        "content": "<p>for similar reasons</p>",
        "id": 165593107,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557809670
    },
    {
        "content": "<p>ok so it would be safe if I used <code>has_coe_t</code>?</p>",
        "id": 165593115,
        "sender_full_name": "James Shaker",
        "timestamp": 1557809693
    },
    {
        "content": "<p>for <code>power_series</code>?</p>",
        "id": 165593119,
        "sender_full_name": "James Shaker",
        "timestamp": 1557809699
    },
    {
        "content": "<p>basically, lean will try to eagerly apply transitivity paths from the left for <code>has_coe</code>, so you end up reducing the problem <code>has_coe A B</code> to <code>has_coe (power_series A) B</code> and then <code>has_coe (power_series (power_series A)) B</code>, etc</p>",
        "id": 165593141,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557809726
    },
    {
        "content": "<p>using has_coe_t will ensure that it will only apply the instance once</p>",
        "id": 165593149,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557809748
    },
    {
        "content": "<p>it looks like removing the <code>quotient_group.mk</code> instance fixes the problem</p>",
        "id": 165593221,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557809810
    },
    {
        "content": "<p>Can I try PR-ing that, or are you already there?</p>",
        "id": 165593311,
        "sender_full_name": "James Shaker",
        "timestamp": 1557809946
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/1028\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/1028\">#1028</a></p>",
        "id": 165593519,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557810282
    },
    {
        "content": "<p>Can we use regexes to see if there are more of those evil instances in mathlib?</p>",
        "id": 165593708,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557810521
    },
    {
        "content": "<p>Don't you know not to use regex for things it wasn't designed for? <a href=\"https://stackoverflow.com/a/1732454/890016\" target=\"_blank\" title=\"https://stackoverflow.com/a/1732454/890016\">https://stackoverflow.com/a/1732454/890016</a></p>",
        "id": 165593805,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557810649
    },
    {
        "content": "<blockquote>\n<p><a href=\"https://github.com/leanprover-community/mathlib/issues/1028\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/1028\">#1028</a></p>\n</blockquote>\n<p>Even mathematicians, the most coe-est people around, usually use notation for passage to the quotient; they usually put some sort of bar over the thing they're coercing.</p>",
        "id": 165645181,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1557856457
    },
    {
        "content": "<p>Do mathematicians use non injective coes?</p>",
        "id": 165645466,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1557856675
    },
    {
        "content": "<p>That's an interesting question.</p>",
        "id": 165647001,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1557857614
    },
    {
        "content": "<p>I think that sometimes mathematicians use the localization map <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>R</mi><mo>→</mo><mi>R</mi><mo>[</mo><mn>1</mn><mi mathvariant=\"normal\">/</mi><mi>S</mi><mo>]</mo></mrow><annotation encoding=\"application/x-tex\">R\\to R[1/S]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.00773em;\">R</span><span class=\"mrel\">→</span><span class=\"mord mathit\" style=\"margin-right:0.00773em;\">R</span><span class=\"mopen\">[</span><span class=\"mord mathrm\">1</span><span class=\"mord mathrm\">/</span><span class=\"mord mathit\" style=\"margin-right:0.05764em;\">S</span><span class=\"mclose\">]</span></span></span></span> as a coercion, perhaps because in most cases it's injective.</p>",
        "id": 165647102,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1557857658
    },
    {
        "content": "<p>How about <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mrow><mi mathvariant=\"double-struck\">Z</mi></mrow><mo>→</mo><mrow><mi mathvariant=\"double-struck\">Z</mi></mrow><mi mathvariant=\"normal\">/</mi><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z} \\to \\mathbb{Z}/n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathbb\">Z</span></span><span class=\"mrel\">→</span><span class=\"mord\"><span class=\"mord mathbb\">Z</span></span><span class=\"mord mathrm\">/</span><span class=\"mord mathit\">n</span></span></span></span></p>",
        "id": 165647167,
        "sender_full_name": "Reid Barton",
        "timestamp": 1557857718
    },
    {
        "content": "<p>We coerce numerals but in general I might be tempted to write <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mover accent=\"true\"><mrow><mi>x</mi></mrow><mo stretchy=\"true\">‾</mo></mover></mrow><annotation encoding=\"application/x-tex\">\\overline{x}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.63056em;\"></span><span class=\"strut bottom\" style=\"height:0.63056em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord overline\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.63056em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathit\">x</span></span></span><span style=\"top:-3.55056em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"overline-line\" style=\"border-bottom-width:0.04em;\"></span></span></span></span></span></span></span></span></span> for the image of <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>x</mi><mo>∈</mo><mrow><mi mathvariant=\"double-struck\">Z</mi></mrow></mrow><annotation encoding=\"application/x-tex\">x\\in\\mathbb{Z}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68889em;\"></span><span class=\"strut bottom\" style=\"height:0.72799em;vertical-align:-0.0391em;\"></span><span class=\"base\"><span class=\"mord mathit\">x</span><span class=\"mrel\">∈</span><span class=\"mord\"><span class=\"mord mathbb\">Z</span></span></span></span></span>. Or am I just being naive?</p>",
        "id": 165647361,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1557857848
    },
    {
        "content": "<p>I guess I had numerals in mind</p>",
        "id": 165647381,
        "sender_full_name": "Reid Barton",
        "timestamp": 1557857870
    }
]