[
    {
        "content": "<p>Hello,<br>\nI am having trouble implementing the following theorems in *Verified Functional<br>\nProgramming in Agda*:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">-- p. 28</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">or_eqv_ff1</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∀</span><span class=\"o\">{</span><span class=\"n\">b1</span> <span class=\"n\">b2</span><span class=\"o\">},</span> <span class=\"n\">b1</span> <span class=\"bp\">∨</span> <span class=\"n\">b2</span> <span class=\"bp\">=</span> <span class=\"n\">ff</span> <span class=\"bp\">→</span> <span class=\"n\">b1</span> <span class=\"bp\">=</span> <span class=\"n\">ff</span>\n<span class=\"bp\">|</span> <span class=\"n\">ff</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"bp\">|</span> <span class=\"n\">tt</span> <span class=\"o\">:=</span> <span class=\"n\">absurd</span>\n\n<span class=\"c1\">-- p. 31</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">or_eqv_ff1&#39;</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∀</span><span class=\"o\">{</span><span class=\"n\">b1</span> <span class=\"n\">b2</span><span class=\"o\">},</span> <span class=\"n\">b1</span> <span class=\"bp\">∨</span> <span class=\"n\">b2</span> <span class=\"bp\">=</span> <span class=\"n\">ff</span> <span class=\"bp\">→</span> <span class=\"n\">b1</span> <span class=\"bp\">=</span> <span class=\"n\">ff</span>\n<span class=\"bp\">|</span> <span class=\"n\">ff</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"bp\">|</span> <span class=\"n\">tt</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">p</span>\n</pre></div>\n\n\n<p>I think the implications are causing a problem, but am not sure.<br>\nCould someone please help?</p>\n<p>Thanks.</p>\n<p>Phiroc</p>",
        "id": 193073287,
        "sender_full_name": "Phiroc",
        "timestamp": 1586193665
    },
    {
        "content": "<p>I think there are some syntactic issues and maybe also some deeper semantic issues.</p>",
        "id": 193073885,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586193943
    },
    {
        "content": "<p>What do the proofs look like in Agda?</p>",
        "id": 193073901,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586193949
    },
    {
        "content": "<p>For starters, each of your functions has three arguments (<code>b1</code>, <code>b2</code> and the proof that <code>b1 ∨ b2 = ff</code>) but you only match two things.</p>",
        "id": 193074035,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586193998
    },
    {
        "content": "<p>Then, <code>∨</code> means \"or\" of <code>Prop</code>s, not <code>bool</code>s. Actually I don't know how Lean is intepreting your theorem statement.</p>",
        "id": 193074606,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586194242
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"nf\">||≡ff1</span> <span class=\"ow\">:</span> <span class=\"ow\">∀</span> <span class=\"o\">{</span>b1 b2<span class=\"o\">}</span> <span class=\"ow\">→</span> b1 <span class=\"ow\">||</span> b2 ≡ ff <span class=\"ow\">→</span> b1 ≡ ff\n<span class=\"ow\">||</span>≡ff1 <span class=\"o\">{</span>ff<span class=\"o\">}</span> p <span class=\"ow\">=</span> refl\n<span class=\"ow\">||</span>≡ff1 <span class=\"o\">{</span>tt<span class=\"o\">}</span> <span class=\"o\">()</span>\n\n<span class=\"nf\">||≡ff1</span> <span class=\"ow\">:</span> <span class=\"ow\">∀</span> <span class=\"o\">{</span>b1 b2<span class=\"o\">}</span> <span class=\"ow\">→</span> b1 <span class=\"ow\">||</span> b2 ≡ ff <span class=\"ow\">→</span> b1 ≡ ff\n<span class=\"ow\">||</span>≡ff1 <span class=\"o\">{</span>ff<span class=\"o\">}</span> p <span class=\"ow\">=</span> refl\n<span class=\"ow\">||</span>≡ff1 <span class=\"o\">{</span>tt<span class=\"o\">}</span> p <span class=\"ow\">=</span> p\n</pre></div>",
        "id": 193074726,
        "sender_full_name": "Phiroc",
        "timestamp": 1586194309
    },
    {
        "content": "<p>Logical operations are prefixed with <code>b</code>, so it's <code>bnot</code>, <code>bor</code>, <code>band</code>...</p>",
        "id": 193074912,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1586194402
    },
    {
        "content": "<p>So I think in Agda you don't write implicit arguments (like <code>b2</code>) on the left side of an equation unless you choose to, in Lean you do.</p>",
        "id": 193074926,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586194407
    },
    {
        "content": "<p>It's too bad they aren't in the <code>bool</code> namespace... because then you could've written <code>p.or q</code></p>",
        "id": 193074955,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1586194429
    },
    {
        "content": "<p>In Agda <code>{ff}</code> is matching <code>b1</code> and there is nothing for <code>b2</code></p>",
        "id": 193074959,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586194430
    },
    {
        "content": "<p>I think <em>p</em> matches <em>b2</em></p>",
        "id": 193075065,
        "sender_full_name": "Phiroc",
        "timestamp": 1586194465
    },
    {
        "content": "<p>It doesn't, else how could the very last line <code>... p = p</code> type check?</p>",
        "id": 193075113,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586194486
    },
    {
        "content": "<p>The book says:</p>\n<blockquote>\n<p>This is the same as the earlier proof, but for the second clause of the definition, wehave<br>\nan actual defining equation that just returns the proof p of the impossible assumption.<br>\nThe type of p is definitionally equal to tt ≡ ff, which is what we have for the desired<br>\nresult with b1 instantiated to tt.</p>\n</blockquote>",
        "id": 193075342,
        "sender_full_name": "Phiroc",
        "timestamp": 1586194584
    },
    {
        "content": "<p>Regarding the first version of the theorem, the book says:</p>\n<blockquote>\n<p>After this, we have a variable p corresponding to the sole explicit argument of this<br>\nproof, namely, the proof of our assumption. We actually do not need to use this<br>\nvariable on the right-hand side in this case, because if we are in the case where b1<br>\nis ff, then our desired result is definitionally equal to just ff ≡ ff. So this equation<br>\nhas just refl on the right-hand side, to prove that trivial equation ff ≡ ff.</p>\n</blockquote>",
        "id": 193075698,
        "sender_full_name": "Phiroc",
        "timestamp": 1586194764
    },
    {
        "content": "<p>Right, <code>p</code> is the proof. Not <code>b2</code>.</p>",
        "id": 193076086,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586194879
    },
    {
        "content": "<p>Can you do pattern matching which includes proofs, in Lean, e.g. <em>ff p</em> above?</p>",
        "id": 193076659,
        "sender_full_name": "Phiroc",
        "timestamp": 1586195155
    },
    {
        "content": "<p>sure</p>",
        "id": 193076771,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586195197
    },
    {
        "content": "<p>The first problem that we're discussing is that in Lean you have to match <code>b2</code> explicitly and you haven't done it.</p>",
        "id": 193077122,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586195372
    },
    {
        "content": "<p>Here's Lean's rant about the first theorem:</p>\n<blockquote>\n<p>bool-thms.lean:55:7: error<br>\ninvalid function application in pattern, it cannot be reduced to a constructor (possible solution, mark term as inaccessible using '.( )')<br>\n ↥ff<br>\nbool-thms.lean:55:7: error<br>\nequation type mismatch, term<br>\n rfl<br>\nhas type<br>\n?m_2 = ?m_2<br>\nbut is expected to have type<br>\n↥ff ∨ p = ff → ↥ff = ↥ff</p>\n</blockquote>",
        "id": 193077170,
        "sender_full_name": "Phiroc",
        "timestamp": 1586195392
    },
    {
        "content": "<p>This doesn't work either:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">or_eqv_ff1</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∀</span><span class=\"o\">{</span><span class=\"n\">b1</span> <span class=\"n\">b2</span><span class=\"o\">},</span> <span class=\"n\">b1</span> <span class=\"bp\">∨</span> <span class=\"n\">b2</span> <span class=\"bp\">=</span> <span class=\"n\">ff</span> <span class=\"bp\">→</span> <span class=\"n\">b1</span> <span class=\"bp\">=</span> <span class=\"n\">ff</span>\n<span class=\"bp\">|</span> <span class=\"n\">ff</span> <span class=\"n\">tt</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</pre></div>",
        "id": 193077444,
        "sender_full_name": "Phiroc",
        "timestamp": 1586195513
    },
    {
        "content": "<p>Okay so in fact Lean had a totally different interpretation of your statement.<br>\nThe equivalent of Agda's <code>||</code> is Lean's <code>bor</code> as Johan wrote earlier. Not ∨.</p>",
        "id": 193077501,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586195526
    },
    {
        "content": "<p><code>rfl</code> proofs <code>X = X</code> and you want to prove <code>X -&gt; X</code></p>",
        "id": 193077511,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586195533
    },
    {
        "content": "<p>But you are not using the correct \"or\" operator for bool so nothing will work</p>",
        "id": 193077562,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586195555
    },
    {
        "content": "<p>I'll try <em>bor</em>.</p>",
        "id": 193077595,
        "sender_full_name": "Phiroc",
        "timestamp": 1586195570
    },
    {
        "content": "<p>you're using the or which works on Propositions, not on booleans.</p>",
        "id": 193077601,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586195573
    },
    {
        "content": "<p>You should be able to use <code>||</code> for <code>bor</code> since <a href=\"https://github.com/leanprover-community/lean/blob/ec1613aef1eee72e601f192b16740629c6d49690/library/init/data/bool/basic.lean#L30\" title=\"https://github.com/leanprover-community/lean/blob/ec1613aef1eee72e601f192b16740629c6d49690/library/init/data/bool/basic.lean#L30\">it's declared as notation in the core library</a>.</p>",
        "id": 193077707,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1586195637
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"282193\">Phiroc</span> <a href=\"#narrow/stream/113488-general/topic/theorem.20or_eqv_ff1/near/193077444\" title=\"#narrow/stream/113488-general/topic/theorem.20or_eqv_ff1/near/193077444\">said</a>:</p>\n<blockquote>\n<p>This doesn't work either:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">or_eqv_ff1</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∀</span><span class=\"o\">{</span><span class=\"n\">b1</span> <span class=\"n\">b2</span><span class=\"o\">},</span> <span class=\"n\">b1</span> <span class=\"bp\">∨</span> <span class=\"n\">b2</span> <span class=\"bp\">=</span> <span class=\"n\">ff</span> <span class=\"bp\">→</span> <span class=\"n\">b1</span> <span class=\"bp\">=</span> <span class=\"n\">ff</span>\n<span class=\"bp\">|</span> <span class=\"n\">ff</span> <span class=\"n\">tt</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</pre></div>\n\n\n</blockquote>\n<p>Now you are matching <code>b2</code>, but you still have to match the third argument too <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 193077943,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586195745
    },
    {
        "content": "<p>I'm not sure how many of verified functional programming, Agda, and Lean are new to you, but if it's more than one, what you are trying to do sounds very difficult.</p>",
        "id": 193078041,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586195786
    },
    {
        "content": "<p>I mean reading the book and translating it into Lean generally, not proving <code>or_eqv_ff1</code> in particular.</p>",
        "id": 193078089,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586195810
    },
    {
        "content": "<p>I managed to make the first pattern-match work!</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">or_eqv_ff1</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∀</span><span class=\"o\">{</span><span class=\"n\">b1</span> <span class=\"n\">b2</span><span class=\"o\">},</span> <span class=\"n\">bor</span> <span class=\"n\">b1</span> <span class=\"n\">b2</span> <span class=\"bp\">=</span> <span class=\"n\">ff</span> <span class=\"bp\">→</span> <span class=\"n\">b1</span> <span class=\"bp\">=</span> <span class=\"n\">ff</span>\n<span class=\"bp\">|</span> <span class=\"n\">ff</span> <span class=\"n\">tt</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</pre></div>",
        "id": 193078201,
        "sender_full_name": "Phiroc",
        "timestamp": 1586195860
    },
    {
        "content": "<p>By \"match\", I didn't necessarily mean you have to split into two cases for <code>tt</code> and <code>ff</code>--you can put a variable <code>b2</code> there, or <code>_</code>.</p>",
        "id": 193078320,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586195912
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">or_eqv_ff1</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∀</span><span class=\"o\">{</span><span class=\"n\">b1</span> <span class=\"n\">b2</span><span class=\"o\">},</span> <span class=\"n\">b1</span> <span class=\"bp\">||</span> <span class=\"n\">b2</span> <span class=\"bp\">=</span> <span class=\"n\">ff</span> <span class=\"bp\">→</span> <span class=\"n\">b1</span> <span class=\"bp\">=</span> <span class=\"n\">ff</span>\n<span class=\"bp\">|</span> <span class=\"n\">ff</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</pre></div>",
        "id": 193078342,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586195925
    },
    {
        "content": "<p>I think you don't have to match on the second argument because in lean it's defined by cases only on the first argument</p>",
        "id": 193078439,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586195963
    },
    {
        "content": "<p>Why do you need <em>p</em> (the third parameter)?</p>",
        "id": 193078473,
        "sender_full_name": "Phiroc",
        "timestamp": 1586195978
    },
    {
        "content": "<p>because you're making a function with three inputs</p>",
        "id": 193078516,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586195994
    },
    {
        "content": "<p>Try <code>#check or_eqv_ff1</code> now that you proved it (or at least came close enough)</p>",
        "id": 193078615,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586196015
    },
    {
        "content": "<p>You could write this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">or_eqv_ff1</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∀</span><span class=\"o\">{</span><span class=\"n\">b1</span> <span class=\"n\">b2</span><span class=\"o\">},</span> <span class=\"n\">b1</span> <span class=\"bp\">||</span> <span class=\"n\">b2</span> <span class=\"bp\">=</span> <span class=\"n\">ff</span> <span class=\"bp\">→</span> <span class=\"n\">b1</span> <span class=\"bp\">=</span> <span class=\"n\">ff</span>\n<span class=\"bp\">|</span> <span class=\"n\">ff</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">rfl</span>\n</pre></div>\n\n\n<p>but now lean complains that the match is nonexhaustive. What's happening is that lean is actually matching on the third argument (the proof) in all the impossible cases to prove they are impossible, and if you take it out of the match then lean requires branches for both <code>ff</code> and <code>tt</code></p>",
        "id": 193078735,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586196076
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">or_eqv_ff1</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∀</span><span class=\"o\">{</span><span class=\"n\">b1</span> <span class=\"n\">b2</span><span class=\"o\">},</span> <span class=\"n\">bor</span> <span class=\"n\">b1</span> <span class=\"n\">b2</span> <span class=\"bp\">=</span> <span class=\"n\">ff</span> <span class=\"bp\">→</span> <span class=\"n\">b1</span> <span class=\"bp\">=</span> <span class=\"n\">ff</span>\n<span class=\"bp\">|</span> <span class=\"n\">ff</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"bp\">|</span> <span class=\"n\">absurd</span>\n</pre></div>",
        "id": 193078772,
        "sender_full_name": "Phiroc",
        "timestamp": 1586196095
    },
    {
        "content": "<p>... but it doesn't check :-(</p>",
        "id": 193078817,
        "sender_full_name": "Phiroc",
        "timestamp": 1586196116
    },
    {
        "content": "<p>Did you read the error?</p>",
        "id": 193078904,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586196147
    },
    {
        "content": "<p>You can explicitly prove the absurd cases like this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">or_eqv_ff1</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∀</span><span class=\"o\">{</span><span class=\"n\">b1</span> <span class=\"n\">b2</span><span class=\"o\">},</span> <span class=\"n\">b1</span> <span class=\"bp\">||</span> <span class=\"n\">b2</span> <span class=\"bp\">=</span> <span class=\"n\">ff</span> <span class=\"bp\">→</span> <span class=\"n\">b1</span> <span class=\"bp\">=</span> <span class=\"n\">ff</span>\n<span class=\"bp\">|</span> <span class=\"n\">ff</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">rfl</span>\n<span class=\"bp\">|</span> <span class=\"n\">tt</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">false</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"o\">(</span><span class=\"n\">bool</span><span class=\"bp\">.</span><span class=\"n\">ff_ne_tt</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 193078957,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586196174
    },
    {
        "content": "<p><code>| absurd</code> is not valid syntax</p>",
        "id": 193079014,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586196202
    },
    {
        "content": "<p><code>absurd</code> here means \"let b1 be absurd\"</p>",
        "id": 193079015,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586196202
    },
    {
        "content": "<p>I think you have bitten off more than you can chew. Do you know about pattern matching in general?</p>",
        "id": 193079064,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586196229
    },
    {
        "content": "<p>If you want to write Lean then I think it will be much easier to start with a book that teaches Lean.</p>",
        "id": 193079075,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586196236
    },
    {
        "content": "<p><a href=\"https://leanprover.github.io/theorem_proving_in_lean/inductive_types.html\" title=\"https://leanprover.github.io/theorem_proving_in_lean/inductive_types.html\">https://leanprover.github.io/theorem_proving_in_lean/inductive_types.html</a></p>",
        "id": 193079219,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586196291
    },
    {
        "content": "<p>I've done a bit of Idris programming.</p>",
        "id": 193079230,
        "sender_full_name": "Phiroc",
        "timestamp": 1586196296
    },
    {
        "content": "<p>Why don't you read a Lean book? Then all the proofs in the book will work</p>",
        "id": 193079258,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586196312
    },
    {
        "content": "<p>If you want to <em>read</em> these languages then you can get by with knowledge from a similar language but writing is a different matter.</p>",
        "id": 193079271,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586196318
    },
    {
        "content": "<p><a href=\"https://github.com/blanchette/logical_verification_2020/raw/master/hitchhikers_guide.pdf\" title=\"https://github.com/blanchette/logical_verification_2020/raw/master/hitchhikers_guide.pdf\">https://github.com/blanchette/logical_verification_2020/raw/master/hitchhikers_guide.pdf</a></p>",
        "id": 193079298,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586196332
    },
    {
        "content": "<p>that link isn't working for me btw, did Jasmin break it with a recent update?</p>",
        "id": 193079357,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586196361
    },
    {
        "content": "<p>wgetting it works fine for me</p>",
        "id": 193079478,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586196416
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> you are probably using a fancy browser... You should browse the web RMS style <span aria-label=\"stuck out tongue wink\" class=\"emoji emoji-1f61c\" role=\"img\" title=\"stuck out tongue wink\">:stuck_out_tongue_wink:</span></p>",
        "id": 193079536,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1586196457
    },
    {
        "content": "<p>I'll go throught the books. Many thanks.</p>",
        "id": 193079674,
        "sender_full_name": "Phiroc",
        "timestamp": 1586196516
    },
    {
        "content": "<p>Ask if you don't follow something in the books. Theorem Proving In Lean is an excellent place to start for someone with a computer science background.</p>",
        "id": 193079798,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586196586
    }
]