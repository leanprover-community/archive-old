[
    {
        "content": "<p>I am stuck on a proof. I'm in the middle of a begin-end block in a work in progress in a medium size project but I don't need all the crap around me because my problem is simply this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span>\n<span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span>\n<span class=\"n\">h_1</span><span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">d</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span>\n<span class=\"n\">h1</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">d</span>\n<span class=\"n\">h_2</span><span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">d</span>\n<span class=\"n\">h_3</span><span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span>\n<span class=\"n\">h2</span><span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span>\n<span class=\"n\">h_4</span><span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span>\n<span class=\"n\">h3</span><span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span>\n<span class=\"n\">h_5</span><span class=\"o\">:</span> <span class=\"n\">d</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span>\n<span class=\"n\">h4</span><span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span>\n<span class=\"n\">h5</span><span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span>\n<span class=\"err\">⊢</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"err\">∪</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">|</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">d</span><span class=\"o\">}</span>\n</code></pre></div>\n\n\n<p>I want to efficiently turn this into a MWE so I can e.g. talk to people about it on Zulip. The bad news is that I have managed to get myself to this goal by doing something called \"programming\", a subject which I know sod all about, and hence whenever I press a key I then have to wait for about 20 seconds before Lean says anything.<br>\nIs there a tactic which I can run which would turn the infoview output, or the current goal, into an explicit term of type <code>Prop</code>?<br>\nPS (see edit history) why are my variables coaslecing above when I cut and paste from a Lean infoview?</p>",
        "id": 206124531,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1596709797
    },
    {
        "content": "<p>if your proof takes 20 seconds then you're doing it wrong?</p>",
        "id": 206124643,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596709902
    },
    {
        "content": "<p>cf the interval arithmetic</p>",
        "id": 206124645,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596709906
    },
    {
        "content": "<p>yes i know I'm doing it wrong</p>",
        "id": 206124654,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1596709921
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">Ico_union_Ico</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">min</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">max</span> <span class=\"n\">c</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">min</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"bp\">≤</span> <span class=\"n\">max</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">Ico</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"err\">∪</span> <span class=\"n\">Ico</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"n\">Ico</span> <span class=\"o\">(</span><span class=\"n\">min</span> <span class=\"n\">a</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">b</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">ext</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"n\">all_goals</span> <span class=\"o\">{</span><span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">},</span>\n  <span class=\"n\">all_goals</span> <span class=\"o\">{</span><span class=\"n\">try</span> <span class=\"o\">{</span><span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">h3</span> <span class=\"n\">h4</span><span class=\"o\">}},</span>\n  <span class=\"n\">all_goals</span> <span class=\"o\">{</span><span class=\"n\">unfold</span> <span class=\"n\">min</span> <span class=\"n\">max</span> <span class=\"n\">Ico</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">},</span>\n  <span class=\"c1\">-- split_ifs at * leads to a weird state with multiple copies of variables :-(</span>\n  <span class=\"n\">all_goals</span> <span class=\"o\">{</span><span class=\"n\">try</span> <span class=\"o\">{</span><span class=\"n\">split_ifs</span> <span class=\"n\">at</span> <span class=\"n\">h1</span><span class=\"o\">}},</span>\n  <span class=\"n\">all_goals</span> <span class=\"o\">{</span><span class=\"n\">try</span> <span class=\"o\">{</span><span class=\"n\">split_ifs</span> <span class=\"n\">at</span> <span class=\"n\">h2</span><span class=\"o\">}},</span>\n  <span class=\"n\">all_goals</span> <span class=\"o\">{</span><span class=\"n\">try</span> <span class=\"o\">{</span><span class=\"n\">split_ifs</span> <span class=\"n\">at</span> <span class=\"n\">h3</span><span class=\"o\">}},</span>\n  <span class=\"n\">all_goals</span> <span class=\"o\">{</span><span class=\"n\">try</span> <span class=\"o\">{</span><span class=\"n\">split_ifs</span> <span class=\"n\">at</span> <span class=\"n\">h4</span><span class=\"o\">}},</span>\n  <span class=\"n\">all_goals</span> <span class=\"o\">{</span><span class=\"n\">try</span> <span class=\"o\">{</span><span class=\"n\">split_ifs</span><span class=\"o\">}},</span>\n  <span class=\"n\">all_goals</span> <span class=\"o\">{</span><span class=\"n\">try</span> <span class=\"o\">{</span><span class=\"n\">split</span><span class=\"o\">}},</span>\n  <span class=\"c1\">-- 144 goals at this point</span>\n  <span class=\"n\">all_goals</span> <span class=\"o\">{</span><span class=\"n\">try</span> <span class=\"o\">{</span><span class=\"n\">cases</span> <span class=\"n\">h3</span><span class=\"o\">}},</span>\n  <span class=\"n\">all_goals</span> <span class=\"o\">{</span><span class=\"n\">try</span> <span class=\"o\">{</span><span class=\"n\">cases</span> <span class=\"n\">h4</span><span class=\"o\">}},</span>\n  <span class=\"n\">all_goals</span> <span class=\"o\">{</span><span class=\"n\">try</span> <span class=\"o\">{</span><span class=\"n\">linarith</span><span class=\"o\">}},</span>\n  <span class=\"n\">all_goals</span> <span class=\"o\">{</span><span class=\"n\">try</span> <span class=\"o\">{</span><span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"n\">split</span><span class=\"bp\">;</span> <span class=\"n\">linarith</span><span class=\"o\">}},</span>\n  <span class=\"n\">all_goals</span> <span class=\"o\">{</span><span class=\"n\">try</span> <span class=\"o\">{</span><span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">split</span><span class=\"bp\">;</span> <span class=\"n\">linarith</span><span class=\"o\">}},</span>\n  <span class=\"c1\">-- two left</span>\n  <span class=\"n\">all_goals</span> <span class=\"o\">{</span><span class=\"n\">by_cases</span> <span class=\"n\">h5</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">},</span>\n  <span class=\"n\">all_goals</span> <span class=\"o\">{</span><span class=\"n\">try</span> <span class=\"o\">{</span><span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"n\">split</span><span class=\"bp\">;</span> <span class=\"n\">linarith</span><span class=\"o\">}},</span>\n  <span class=\"n\">all_goals</span> <span class=\"o\">{</span><span class=\"n\">try</span> <span class=\"o\">{</span><span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">split</span><span class=\"bp\">;</span> <span class=\"n\">linarith</span><span class=\"o\">}},</span>\n  <span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">  abcdx: ℝ</span>\n<span class=\"cm\">h: a ≤ b</span>\n<span class=\"cm\">h_1: c ≤ d</span>\n<span class=\"cm\">h1: a ≤ d</span>\n<span class=\"cm\">h_2: c ≤ d</span>\n<span class=\"cm\">h2: c ≤ b</span>\n<span class=\"cm\">h_3: ¬a ≤ c</span>\n<span class=\"cm\">h3: c ≤ x</span>\n<span class=\"cm\">h_4: ¬b ≤ d</span>\n<span class=\"cm\">h4: x &lt; b</span>\n<span class=\"cm\">h5: x &lt; b</span>\n<span class=\"cm\">⊢ x ∈ {x : ℝ | a ≤ x ∧ x &lt; b} ∪ {x : ℝ | c ≤ x ∧ x &lt; d}</span>\n<span class=\"cm\">-/</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 206124698,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1596709927
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#extract_goal\">tactic#extract_goal</a> ?</p>",
        "id": 206124723,
        "sender_full_name": "Utensil Song",
        "timestamp": 1596709949
    },
    {
        "content": "<p>I searched through tactics tagged <code>debugging</code> and I did not find this! Can we add the <code>debugging</code> tag to extract_goal?</p>",
        "id": 206124861,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1596710072
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> I want to understand why I got lost in this maze</p>",
        "id": 206124890,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1596710106
    },
    {
        "content": "<p>and whether I can find my way out.</p>",
        "id": 206124910,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1596710124
    },
    {
        "content": "<p>did you look at my answer to the previous interval arithmetic question?</p>",
        "id": 206124919,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596710135
    },
    {
        "content": "<p>I think pretty much every move is reversible except when I went left or right</p>",
        "id": 206124998,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1596710185
    },
    {
        "content": "<p>show me!</p>",
        "id": 206125021,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1596710202
    },
    {
        "content": "<p>MWE!</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h_1</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">d</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">d</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h_2</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">d</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h_3</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h_4</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h_5</span> <span class=\"o\">:</span> <span class=\"n\">d</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h4</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h5</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"err\">∪</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">|</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">d</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">admit</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 206125051,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1596710242
    },
    {
        "content": "<p><a href=\"#narrow/stream/116395-maths/topic/golfing.20.60Ico.60.20union/near/205047162\">https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/golfing.20.60Ico.60.20union/near/205047162</a></p>",
        "id": 206125122,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596710285
    },
    {
        "content": "<p>I used set.subset.antisymm and interval arithmetic</p>",
        "id": 206125141,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596710299
    },
    {
        "content": "<p>specifically, Ico a b subset Ico a c U Ico c b</p>",
        "id": 206125159,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596710312
    },
    {
        "content": "<p>so in this case (<code>Ico a b ∪ Ico c d = Ico (min a c) (max b d)</code>) the forward direction is trivial, and for the backward direction I suspect we decompose LHS into <code>(Ico a (max a c) U Ico (max a c) (min b d) U Ico (min b d) b) U etc.</code> and RHS into <code>Ico (min a c) (max a c) U Ico (max a c) (min b d) U Ico (min b d) (max b d)</code></p>",
        "id": 206125814,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596710828
    },
    {
        "content": "<p>basically partition at <code>max a c</code> and <code>min b d</code></p>",
        "id": 206125832,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596710838
    },
    {
        "content": "<p>the first term <code>Ico (min a c) (max a c)</code> will be equal to <code>Ico a (max a c)</code> or <code>Ico c (max a c)</code> (I can't think of a solution that avoids equality and/or casing)</p>",
        "id": 206125921,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596710926
    },
    {
        "content": "<p>the second term <code>Ico (max a c) (min b d)</code> is contained in <code>Ico a b</code></p>",
        "id": 206126016,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596711010
    },
    {
        "content": "<p>the third term is similar to the first term</p>",
        "id": 206126021,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596711013
    },
    {
        "content": "<p>wait <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> are your hypotheses correct?</p>",
        "id": 206126176,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596711172
    },
    {
        "content": "<p>I don't know.</p>",
        "id": 206126198,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1596711191
    },
    {
        "content": "<p>I was just experimenting with this kind of stuff.</p>",
        "id": 206126206,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1596711204
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/Being.20stuck.20-.3E.20MWE/near/206124861\">said</a>:</p>\n<blockquote>\n<p>I searched through tactics tagged <code>debugging</code> and I did not find this! Can we add the <code>debugging</code> tag to extract_goal?</p>\n</blockquote>\n<p>I first PRed this: <a href=\"https://github.com/leanprover-community/leanprover-community.github.io/issues/105\">leanprover-community/leanprover-community.github.io#105</a> to improve <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>, will also add <code>debugging</code> tag to <code>extract_goal</code> later.</p>",
        "id": 206126209,
        "sender_full_name": "Utensil Song",
        "timestamp": 1596711217
    },
    {
        "content": "<p>Hey would a counterexample-finder be able to find a counterexample for me?</p>",
        "id": 206126257,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1596711243
    },
    {
        "content": "<p>oh I can't partition the LHS when I'm proving the backward direction</p>",
        "id": 206126318,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596711317
    },
    {
        "content": "<p>but I think my partition of the RHS into <code>Ico (min a c) (max a c) U Ico (max a c) (min b d) U Ico (min b d) (max b d)</code> is fine</p>",
        "id": 206126334,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596711330
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> I think the hypothesis should be <code>a &lt;= d</code> and <code>c &lt;= b</code>?</p>",
        "id": 206126350,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596711358
    },
    {
        "content": "<p>to rule out the picture [a,b) U [c,d) we need c &lt;= b; to rule out the picture [c,d) U [a,b) we need a &lt;= d</p>",
        "id": 206126428,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596711412
    },
    {
        "content": "<p>but now I want you to prove <code>\\not</code> what I wrote.</p>",
        "id": 206126436,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1596711421
    },
    {
        "content": "<p>is there a tactic which does that?</p>",
        "id": 206126462,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1596711443
    },
    {
        "content": "<p>I'm not interested in pictures</p>",
        "id": 206126488,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1596711464
    },
    {
        "content": "<p>So essentially you want a tactic which produces a hypothesis <code>h : false</code>?</p>",
        "id": 206126612,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1596711551
    },
    {
        "content": "<p>I assume something dumb like <code>have h : false := by finish</code> doesn't work, but might be a general tactic for \"I think my goal might be false after all\"</p>",
        "id": 206126737,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1596711637
    },
    {
        "content": "<p>right. It's clear that there are basically <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>4</mn><mo stretchy=\"false\">!</mo></mrow><annotation encoding=\"application/x-tex\">4!</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord\">4</span><span class=\"mclose\">!</span></span></span></span> cases, so try all orders.</p>",
        "id": 206126757,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1596711651
    },
    {
        "content": "<p>I remember seeing some PR about a tactic finding contradiction</p>",
        "id": 206126895,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596711751
    },
    {
        "content": "<p>but I forgot the name</p>",
        "id": 206126897,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596711754
    },
    {
        "content": "<p>because I remember that the name was somewhat convoluted</p>",
        "id": 206126911,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596711767
    },
    {
        "content": "<p>Hey I could negate my goal by reverting <code>a b c d</code> and using <code>extract_goal</code>.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n<span class=\"kn\">universe</span> <span class=\"n\">u</span>\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">decidable_linear_order</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n<span class=\"bp\">¬</span>  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">},</span>\n    <span class=\"n\">min</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">max</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"bp\">→</span>\n    <span class=\"n\">min</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"bp\">≤</span> <span class=\"n\">max</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">Ico</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"err\">∪</span> <span class=\"n\">Ico</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"n\">Ico</span> <span class=\"o\">(</span><span class=\"n\">min</span> <span class=\"n\">a</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">b</span> <span class=\"n\">d</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">finish</span> <span class=\"c1\">-- fails,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 206127083,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1596711936
    },
    {
        "content": "<p>Kenny has tried to solve this using pen and paper, and I just want it resolved because I can see it's just \"check 24 cases\"</p>",
        "id": 206127144,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1596711976
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">unions&#39;</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">try</span> <span class=\"o\">{</span> <span class=\"n\">refl&#39;</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">subset_union_of_subset_left</span><span class=\"o\">,</span> <span class=\"n\">unions&#39;</span> <span class=\"o\">}</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">subset_union_of_subset_right</span><span class=\"o\">,</span> <span class=\"n\">unions&#39;</span> <span class=\"o\">}}]</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">unions</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"bp\">`</span><span class=\"o\">[{</span> <span class=\"n\">apply</span> <span class=\"n\">union_subset</span><span class=\"bp\">;</span> <span class=\"n\">unions</span> <span class=\"o\">}</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">unions&#39;</span><span class=\"o\">]</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">Ico_subset_of</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_order</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">Ico</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"err\">⊆</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">Ico</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"err\">⊆</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Ico</span> <span class=\"n\">x</span> <span class=\"n\">z</span> <span class=\"err\">⊆</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"n\">subset</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">Ico_subset_Ico_union_Ico</span> <span class=\"err\">$</span> <span class=\"n\">union_subset</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">Ico_union_Ico</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">had</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hcb</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">Ico</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"err\">∪</span> <span class=\"n\">Ico</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"n\">Ico</span> <span class=\"o\">(</span><span class=\"n\">min</span> <span class=\"n\">a</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">b</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"n\">subset</span><span class=\"bp\">.</span><span class=\"n\">antisymm</span>\n    <span class=\"o\">(</span><span class=\"n\">union_subset</span>\n      <span class=\"o\">(</span><span class=\"n\">Ico_subset_Ico</span> <span class=\"o\">(</span><span class=\"n\">min_le_left</span> <span class=\"n\">a</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">le_max_left</span> <span class=\"n\">b</span> <span class=\"n\">d</span><span class=\"o\">))</span>\n      <span class=\"o\">(</span><span class=\"n\">Ico_subset_Ico</span> <span class=\"o\">(</span><span class=\"n\">min_le_right</span> <span class=\"n\">a</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">le_max_right</span> <span class=\"n\">b</span> <span class=\"n\">d</span><span class=\"o\">)))</span>\n    <span class=\"o\">(</span><span class=\"n\">Ico_subset_of</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">a</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"err\">$</span> <span class=\"n\">Ico_subset_of</span> <span class=\"o\">(</span><span class=\"n\">min</span> <span class=\"n\">b</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"k\">show</span> <span class=\"n\">Ico</span> <span class=\"o\">(</span><span class=\"n\">min</span> <span class=\"n\">a</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">a</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"err\">⊆</span> <span class=\"n\">Ico</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"err\">∪</span> <span class=\"n\">Ico</span> <span class=\"n\">c</span> <span class=\"n\">d</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">le_total</span> <span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"k\">with</span> <span class=\"n\">hac</span> <span class=\"n\">hca</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">min_eq_left</span> <span class=\"n\">hac</span><span class=\"o\">,</span> <span class=\"n\">max_eq_right</span> <span class=\"n\">hac</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">Ico_union_Ico_eq_Ico</span> <span class=\"n\">hac</span> <span class=\"n\">hcb</span><span class=\"o\">],</span> <span class=\"n\">unions&#39;</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">min_eq_right</span> <span class=\"n\">hca</span><span class=\"o\">,</span> <span class=\"n\">max_eq_left</span> <span class=\"n\">hca</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">Ico_union_Ico_eq_Ico</span> <span class=\"n\">hca</span> <span class=\"n\">had</span><span class=\"o\">],</span> <span class=\"n\">unions&#39;</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"k\">show</span> <span class=\"n\">Ico</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">a</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">min</span> <span class=\"n\">b</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"err\">⊆</span> <span class=\"n\">Ico</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"err\">∪</span> <span class=\"n\">Ico</span> <span class=\"n\">c</span> <span class=\"n\">d</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">subset_union_of_subset_left</span> <span class=\"o\">(</span><span class=\"n\">Ico_subset_Ico</span> <span class=\"o\">(</span><span class=\"n\">le_max_left</span> <span class=\"n\">a</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">min_le_left</span> <span class=\"n\">b</span> <span class=\"n\">d</span><span class=\"o\">))</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"k\">show</span> <span class=\"n\">Ico</span> <span class=\"o\">(</span><span class=\"n\">min</span> <span class=\"n\">b</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">b</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"err\">⊆</span> <span class=\"n\">Ico</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"err\">∪</span> <span class=\"n\">Ico</span> <span class=\"n\">c</span> <span class=\"n\">d</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">le_total</span> <span class=\"n\">b</span> <span class=\"n\">d</span> <span class=\"k\">with</span> <span class=\"n\">hbd</span> <span class=\"n\">hdb</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">min_eq_left</span> <span class=\"n\">hbd</span><span class=\"o\">,</span> <span class=\"n\">max_eq_right</span> <span class=\"n\">hbd</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">Ico_union_Ico_eq_Ico</span> <span class=\"n\">hcb</span> <span class=\"n\">hbd</span><span class=\"o\">],</span> <span class=\"n\">unions&#39;</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">min_eq_right</span> <span class=\"n\">hdb</span><span class=\"o\">,</span> <span class=\"n\">max_eq_left</span> <span class=\"n\">hdb</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">Ico_union_Ico_eq_Ico</span> <span class=\"n\">had</span> <span class=\"n\">hdb</span><span class=\"o\">],</span> <span class=\"n\">unions&#39;</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 206127247,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596712078
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> there you go</p>",
        "id": 206127288,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596712085
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/Being.20stuck.20-.3E.20MWE/near/206127144\">said</a>:</p>\n<blockquote>\n<p>Kenny has tried to solve this using pen and paper, and I just want it resolved because I can see it's just \"check 24 cases\"</p>\n</blockquote>\n<p>and my point, as is the same as in the previous question, is that there is a better proof than just checking 24 cases</p>",
        "id": 206127325,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596712115
    },
    {
        "content": "<p>hey <a href=\"#narrow/stream/116395-maths/topic/golfing.20.60Ico.60.20union/near/205016730\">look what I found</a></p>",
        "id": 206127344,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1596712136
    },
    {
        "content": "<p>nice</p>",
        "id": 206127376,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596712170
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> I can prove these questions are decidable so can you decide them for me please?</p>",
        "id": 206127854,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1596712543
    },
    {
        "content": "<p>I thought we decided that somebody should implement <code>auto</code>.</p>",
        "id": 206127909,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1596712580
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> do you remember what's the tactic being PR'ed that finds counter-examples?</p>",
        "id": 206127932,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596712601
    },
    {
        "content": "<p>or PR'ed</p>",
        "id": 206127933,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596712604
    },
    {
        "content": "<p><del>slimcheck</del> slim_check</p>",
        "id": 206127938,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1596712611
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/2080\">#2080</a></p>",
        "id": 206127968,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1596712638
    },
    {
        "content": "<p>yes that's it</p>",
        "id": 206128054,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596712695
    },
    {
        "content": "<p>no way I can remember the name</p>",
        "id": 206128061,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596712699
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> even better, can we prove (using tactics) that this statement reduces to a statement over <code>fin 4</code>?</p>",
        "id": 206128105,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596712744
    },
    {
        "content": "<p>is there a mathematical proof using model theory?</p>",
        "id": 206128488,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596713044
    },
    {
        "content": "<p>I claim that <code>fin n</code> reflects every sentence in the theory of linear orders involving n quantifiers?</p>",
        "id": 206128536,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596713086
    },
    {
        "content": "<p>i.e. if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>φ</mi></mrow><annotation encoding=\"application/x-tex\">\\varphi</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">φ</span></span></span></span> is a sentence in the theory of linear orders with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> quantifiers then <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mo>⊢</mo><mi>φ</mi><mo stretchy=\"false\">)</mo><mtext>  </mtext><mo>⟺</mo><mtext>  </mtext><mo stretchy=\"false\">(</mo><mrow><mi mathvariant=\"sans-serif\">f</mi><mi mathvariant=\"sans-serif\">i</mi><mi mathvariant=\"sans-serif\">n</mi></mrow><mtext> </mtext><mi>n</mi><mo>⊨</mo><mi>φ</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(\\vdash \\varphi) \\iff (\\mathsf{fin}~n \\vDash \\varphi)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mrel\">⊢</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">φ</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⟺</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathsf\" style=\"margin-right:0.06944em;\">f</span><span class=\"mord mathsf\">i</span><span class=\"mord mathsf\">n</span></span><span class=\"mspace nobreak\"> </span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel amsrm\">⊨</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">φ</span><span class=\"mclose\">)</span></span></span></span></p>",
        "id": 206128646,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596713166
    },
    {
        "content": "<p>How about <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∃</mi><msub><mi>x</mi><mn>1</mn></msub><mo>⋯</mo><mi mathvariant=\"normal\">∃</mi><msub><mi>x</mi><mi>n</mi></msub><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mn>1</mn></msub><mo>&lt;</mo><mo>⋯</mo><mo>&lt;</mo><msub><mi>x</mi><mi>n</mi></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\exists x_1 \\cdots \\exists x_n (x_1 &lt; \\cdots &lt; x_n)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∃</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">⋯</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">∃</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"minner\">⋯</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>?</p>",
        "id": 206129029,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1596713432
    },
    {
        "content": "<p>right</p>",
        "id": 206129163,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596713540
    },
    {
        "content": "<p>hmm I don't know how to fix my statement</p>",
        "id": 206129219,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596713605
    },
    {
        "content": "<p>maybe have it be <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> universal quantifiers followed by a quantifier-less formula</p>",
        "id": 206129232,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596713625
    },
    {
        "content": "<p>maybe n+1 quantifiers?</p>",
        "id": 206129983,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1596714180
    },
    {
        "content": "<p>or rather, the statement may be true with n quantifiers in fin (n+1)</p>",
        "id": 206130121,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1596714286
    },
    {
        "content": "<p>ah, that doesn't work either, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∀</mi><mi>x</mi><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">∃</mi><msub><mi>y</mi><mn>1</mn></msub><mo>…</mo><mi mathvariant=\"normal\">∃</mi><msub><mi>y</mi><mi>n</mi></msub><mo separator=\"true\">,</mo><mo stretchy=\"false\">(</mo><mi>x</mi><mo>&lt;</mo><msub><mi>y</mi><mn>1</mn></msub><mo>&lt;</mo><mo>⋯</mo><mo>&lt;</mo><msub><mi>y</mi><mi>n</mi></msub><mo stretchy=\"false\">)</mo><mo>∨</mo><mo stretchy=\"false\">(</mo><mi>x</mi><mo>&gt;</mo><msub><mi>y</mi><mn>1</mn></msub><mo>&gt;</mo><mo>⋯</mo><mo>&gt;</mo><msub><mi>y</mi><mi>n</mi></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\forall x,\\exists y_1\\dots\\exists y_n, (x&lt;y_1&lt;\\dots&lt;y_n)\\lor (x&gt;y_1&gt;\\dots&gt;y_n)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∀</span><span class=\"mord mathnormal\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">∃</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">∃</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7335400000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"minner\">⋯</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∨</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7335400000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"minner\">⋯</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> is true only if the domain has at least 2n+1 elements</p>",
        "id": 206130453,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1596714560
    },
    {
        "content": "<p>and you can surely iterate it to get exponential size, although the quantifier complexity grows</p>",
        "id": 206130540,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1596714618
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"296911\">Utensil Song</span> <a href=\"#narrow/stream/113488-general/topic/Being.20stuck.20-.3E.20MWE/near/206126209\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/Being.20stuck.20-.3E.20MWE/near/206124861\">said</a>:</p>\n<blockquote>\n<p>I searched through tactics tagged <code>debugging</code> and I did not find this! Can we add the <code>debugging</code> tag to extract_goal?</p>\n</blockquote>\n<p>I first PRed this: <a href=\"https://github.com/leanprover-community/leanprover-community.github.io/issues/105\">leanprover-community/leanprover-community.github.io#105</a> to improve <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>, will also add <code>debugging</code> tag to <code>extract_goal</code> later.</p>\n</blockquote>\n<p><a href=\"https://github.com/leanprover-community/mathlib/issues/3708\">#3708</a></p>",
        "id": 206138384,
        "sender_full_name": "Utensil Song",
        "timestamp": 1596719550
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h_1</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">d</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">d</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h_2</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">d</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h_3</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h_4</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h_5</span> <span class=\"o\">:</span> <span class=\"n\">d</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h4</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h5</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">finish</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>This works,  so is the issue to find an explicit proof? I'm probably misunderstanding something...</p>",
        "id": 206187130,
        "sender_full_name": "Peter Jipsen",
        "timestamp": 1596742783
    },
    {
        "content": "<p>Oh no, I didn't know <code>finish</code> did this. I am not very good with <code>finish</code>.</p>",
        "id": 206204533,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1596752989
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 206204539,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1596752994
    },
    {
        "content": "<p>Sorry not up to date on this thread and not at my computer but. Does linarith work on or statements? Alternatively does linarith work if you apply (\\not P \\to Q) \\to P\\or Q first?</p>",
        "id": 206208015,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1596755086
    },
    {
        "content": "<p>huh. This proof doesn't work,</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)(</span><span class=\"n\">h_1</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">d</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">)</span>  <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">d</span><span class=\"o\">)</span>  <span class=\"o\">(</span><span class=\"n\">h_2</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">d</span><span class=\"o\">)</span>  <span class=\"o\">(</span><span class=\"n\">h_3</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">)</span>  <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span>  <span class=\"o\">(</span><span class=\"n\">h_4</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">)</span>  <span class=\"o\">(</span><span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"o\">)</span>  <span class=\"o\">(</span><span class=\"n\">h_5</span> <span class=\"o\">:</span> <span class=\"n\">d</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span>  <span class=\"o\">(</span><span class=\"n\">h4</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span>  <span class=\"o\">(</span><span class=\"n\">h5</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">or_iff_not_imp_left</span><span class=\"o\">,</span>\n  <span class=\"n\">push_neg</span><span class=\"o\">,</span>\n  <span class=\"n\">finish</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>even though this one does</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">or_iff_not_imp_left</span><span class=\"o\">,</span>\n  <span class=\"n\">finish</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 206212047,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1596758799
    }
]