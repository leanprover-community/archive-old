[
    {
        "content": "<p>In the example posted in <a href=\"#narrow/stream/116395-maths/topic/Icc_ssubset_Icc\">https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/Icc_ssubset_Icc</a> the hypothesis <code>hI₁</code> is \"unused\", except that <code>finish</code> seems to revert and intro back all hypotheses in the context, which makes <code>hI₁</code> occur in the final proof term. Therefore <code>#lint</code> cannot catch the unused argument.<br>\nIs there a way to change finish so that it doesn't do this? (I didn't really investigate why finish does this.) Here is a minimized example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.basic</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">5</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">finish</span>\n\n<span class=\"bp\">#</span><span class=\"n\">lint</span>\n\n<span class=\"c1\">-- #explode foo</span>\n</code></pre></div>",
        "id": 221119463,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1609230631
    },
    {
        "content": "<p>I don't think it is worth the effort. I wrote <code>finish</code> in 2016-2017 when Lean's metaprogramming language was still new. It was an experiment to see whether it would be sufficient to implement something like Isabelle's <code>auto</code>. I gave up when I determined that to do it right one would have to implement better low-level matching heuristics and primitives, and that it would have to be in C++ for performance. I was not up to that. I am pleased but slightly surprised that people still find <code>finish</code> useful sometimes, but I still think of it as a failed attempt at <code>auto</code>.</p>\n<p>Is the problem specific to <code>finish</code>? IIRC, other tactics (like <code>simp * at *</code>, which <code>finish</code> uses) revert hypotheses and reintroduce them. But maybe <code>finish</code> does it too crudely where other tactics are more intelligent.</p>\n<p>BTW, I think it would make a great project to do <code>finish</code> right in Lean 4. Isabelle's internal automated tools, <code>auto</code>, <code>arith</code>, and <code>simp</code>, are incredibly useful. Our <code>simp</code> and <code>linarith</code> are pretty good approximations to Isabelle's, but we have nothing like <code>auto</code>. In Lean 4, we should be able to get something even more performant and flexible.</p>",
        "id": 221367215,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1609532594
    },
    {
        "content": "<p>I'm just getting started on exactly this project. :) (Maybe with a prototype in Lean 3 first.) I'll be giving a talk with some extremely preliminary design ideas -- really more an invitation to discuss the design -- at Lean Together.</p>",
        "id": 221369058,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1609535437
    },
    {
        "content": "<p>After that can you do <code>omega</code> and then <code>groebner_basis</code>? :-)</p>",
        "id": 221369389,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1609535997
    },
    {
        "content": "<p>Jannis, I remember that you expressed interest in this before. I am happy to hear that it's still in scope!</p>",
        "id": 221369626,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1609536264
    },
    {
        "content": "<p>I've already successfully deflected Sander's requests for Gröbner bases. The problem with these tactics is that it would be really hard to dress them up as original research, so we'd need a BSc or MSc to do them.</p>",
        "id": 221369654,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1609536334
    },
    {
        "content": "<p>As for <code>auto</code> in Isabelle, if I understand correctly it is not described properly in any paper (or anywhere), so there is certainly something useful to be written on this!</p>",
        "id": 221370179,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1609537055
    },
    {
        "content": "<p>Yeah, I was told the same thing and haven't found any detailed docs so far. I suspect the type theory might get in the way as well, so I'm not worried about a lack of technical challenges.</p>",
        "id": 221370563,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1609537653
    }
]