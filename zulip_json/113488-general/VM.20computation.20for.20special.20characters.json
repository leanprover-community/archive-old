[
    {
        "content": "<p>I wrote a simple function to erase specific characters in a string: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">erace_curr</span> <span class=\"o\">:</span> <span class=\"n\">string.iterator</span> <span class=\"bp\">→</span> <span class=\"n\">char</span> <span class=\"bp\">→</span> <span class=\"n\">string.iterator</span>\n<span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">::</span><span class=\"n\">n</span><span class=\"o\">⟩</span> <span class=\"n\">c'</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">c'</span><span class=\"o\">)</span> <span class=\"k\">then</span> <span class=\"o\">(</span><span class=\"n\">erace_curr</span> <span class=\"o\">⟨</span><span class=\"n\">p.reverse</span><span class=\"o\">,</span><span class=\"n\">n</span><span class=\"o\">⟩</span> <span class=\"n\">c'</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"o\">(</span><span class=\"n\">erace_curr</span> <span class=\"o\">⟨</span><span class=\"n\">c</span><span class=\"o\">::</span><span class=\"n\">p.reverse</span><span class=\"o\">,</span><span class=\"n\">n</span><span class=\"o\">⟩</span> <span class=\"n\">c'</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"o\">[]⟩</span>   <span class=\"n\">c'</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"o\">[]⟩</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">string.iterator.prev_to_string</span> <span class=\"bp\">$</span> <span class=\"n\">erace_curr</span> <span class=\"s2\">\"1234</span><span class=\"se\">\\n</span><span class=\"s2\">567\"</span><span class=\"bp\">.</span><span class=\"n\">mk_iterator</span> <span class=\"sc\">'\\n'</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">string.iterator.prev_to_string</span> <span class=\"bp\">$</span> <span class=\"n\">erace_curr</span> <span class=\"s2\">\"α\"</span><span class=\"bp\">.</span><span class=\"n\">mk_iterator</span> <span class=\"sc\">'\\n'</span>\n</code></pre></div>\n<p>However, while the first #eval sentence returns the right answer \"1234567\", the second #eval doesn't terminate. Could anyone tell me why and how to fix it? Thanks!</p>",
        "id": 302243289,
        "sender_full_name": "Xin Huajian",
        "timestamp": 1664884345
    },
    {
        "content": "<p>I think defining your own functions on <code>string.iterator</code> is not really supported, it is just a data type to interface with string operations written in C++.<br>\nYou can use something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"s2\">\"1234</span><span class=\"se\">\\n</span><span class=\"s2\">567\"</span><span class=\"bp\">.</span><span class=\"n\">to_list.filter</span> <span class=\"o\">(</span><span class=\"bp\">≠</span> <span class=\"sc\">'\\n'</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">as_string</span>\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"s2\">\"α\"</span><span class=\"bp\">.</span><span class=\"n\">to_list.filter</span> <span class=\"o\">(</span><span class=\"bp\">≠</span> <span class=\"sc\">'\\n'</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">as_string</span>\n</code></pre></div>",
        "id": 302250505,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1664886912
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"111080\">Floris van Doorn</span> <a href=\"#narrow/stream/113488-general/topic/VM.20computation.20for.20special.20characters/near/302250505\">said</a>:</p>\n<blockquote>\n<p>I think defining your own functions on <code>string.iterator</code> is not really supported, it is just a data type to interface with string operations written in C++.<br>\nYou can use something like this:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"s2\">\"1234</span><span class=\"se\">\\n</span><span class=\"s2\">567\"</span><span class=\"bp\">.</span><span class=\"n\">to_list.filter</span> <span class=\"o\">(</span><span class=\"bp\">≠</span> <span class=\"sc\">'\\n'</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">as_string</span>\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"s2\">\"α\"</span><span class=\"bp\">.</span><span class=\"n\">to_list.filter</span> <span class=\"o\">(</span><span class=\"bp\">≠</span> <span class=\"sc\">'\\n'</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">as_string</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Thanks! Really elegant!</p>",
        "id": 302268212,
        "sender_full_name": "Xin Huajian",
        "timestamp": 1664892341
    }
]