[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">cache</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">[</span><span class=\"n\">has_add</span> <span class=\"n\">unit</span><span class=\"o\">],</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">resetI</span><span class=\"o\">,</span>\n  <span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"n\">has_add</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- tactic.mk_instance failed to generate instance for</span>\n  <span class=\"c1\">--   has_add unit</span>\n  <span class=\"n\">trivial</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 202768836,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1593752268
    },
    {
        "content": "<p>resetI fails to cache instances generated by refine</p>",
        "id": 202768876,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1593752293
    },
    {
        "content": "<p>I'm getting the same problem. Any fix in view?</p>",
        "id": 268194596,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1642351458
    },
    {
        "content": "<p>Kenny's code works for me. Oh lol this is probably because <code>unit</code> didn't used to have an addition but now it does.</p>\n<p>Modified MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">[</span><span class=\"n\">has_add</span> <span class=\"n\">bool</span><span class=\"o\">],</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">resetI</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- _x: has_add bool</span>\n  <span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"n\">has_add</span> <span class=\"n\">bool</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- tactic.mk_instance failed to generate instance for</span>\n  <span class=\"c1\">--   has_add bool</span>\n  <span class=\"n\">trivial</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 268194744,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1642351679
    },
    {
        "content": "<p>I'm hitting that in <a href=\"https://github.com/leanprover-community/mathlib/pull/11490\">#11490</a> in <code>ring_theory.local_properties</code></p>",
        "id": 268194815,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1642351769
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"n\">has_add</span> <span class=\"n\">bool</span> <span class=\"o\">:=</span> <span class=\"n\">_x</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>works as a workaround</p>",
        "id": 268194956,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1642351947
    },
    {
        "content": "<p>Yeah, unfortunately I have two of them, so using <code>introsI</code> is shorter.</p>",
        "id": 268195085,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1642352093
    }
]