[
    {
        "content": "<p>I've been experimenting with some of the <code>tactic.*</code> namespace, which I'm admittedly pretty scared of since some of it seems like magic. In trying to accomplish my nefarious goals, I'm running into quite a wall with <code>unify</code> and friends. It's seeming more and more like <code>unify</code> is more stubborn (an idiot?) than I first thought; for example, the following happens when I try to <code>unify</code> two metavar-containing types (which I think is sensible?)</p>\n<div class=\"codehilite\"><pre><span></span>unify tactic failed, failed to unify\n  ?m_1 тед ?m_3 : Type (max ? ? ? ?)\nand\n  D тед C : Type (max (?+1) ? (?+1))\n</pre></div>\n\n\n<p>(There are hypotheses <code>D</code> and <code>C</code> with type <code>Type (?+1)</code> .)</p>\n<p>Why is <code>unify</code> not compelled to assign the values of <code>?m_1</code> and <code>?m_3</code> in this situation?</p>",
        "id": 134372143,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1537529701
    },
    {
        "content": "<p>Unifying complex universe terms is often a mess. If you can manage to avoid <code>max</code> and <code>imax</code> in your universe terms, I would go for that. Otherwise, you may need to specifying universes explicitly when resolving constants.</p>",
        "id": 134390656,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1537549610
    },
    {
        "content": "<p>Yeah, get rid of all your ?s in exchange for explicit named universes, and you'll probably see what the obstruction is.</p>",
        "id": 134414211,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1537576389
    }
]