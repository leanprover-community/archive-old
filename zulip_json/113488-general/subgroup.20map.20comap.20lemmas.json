[
    {
        "content": "<p>Should these lemmas be included in <code>group_theory/subgroup</code>? Similar ones are true for submonoids, so maybe there's a way of proving it only once for one of the two. Also, I wonder if the new <code>set_like</code> could be used to transport lemmas like these about functions to lemmas about morphisms.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">group_theory.subgroup</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">subgroup</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"n\">H</span> <span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">H</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">monoid_hom</span>\n\n<span class=\"kd\">@[to_additive]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">range_comp</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">→*</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">H</span> <span class=\"bp\">→*</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">g.comp</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"bp\">=</span> <span class=\"n\">map</span> <span class=\"n\">g</span> <span class=\"n\">f.range</span> <span class=\"o\">:=</span>\n<span class=\"n\">ext'</span> <span class=\"bp\">$</span> <span class=\"n\">set.range_comp</span> <span class=\"n\">g</span> <span class=\"n\">f</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">→*</span> <span class=\"n\">H</span><span class=\"o\">}</span>\n\n<span class=\"kd\">@[to_additive]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">map_comap_eq</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">function.surjective</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">comap</span> <span class=\"n\">f</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">K</span> <span class=\"o\">:=</span>\n<span class=\"n\">ext'</span> <span class=\"bp\">$</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">coe_map</span><span class=\"o\">,</span> <span class=\"n\">coe_comap</span><span class=\"o\">,</span> <span class=\"n\">set.image_preimage_eq</span> <span class=\"bp\">↑</span><span class=\"n\">K</span> <span class=\"n\">hf</span><span class=\"o\">]</span>\n\n<span class=\"kd\">@[to_additive]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">comap_map_eq</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">function.injective</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">comap</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">K</span> <span class=\"o\">:=</span>\n<span class=\"n\">ext'</span> <span class=\"bp\">$</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">coe_comap</span><span class=\"o\">,</span> <span class=\"n\">coe_map</span><span class=\"o\">,</span> <span class=\"n\">set.preimage_image_eq</span> <span class=\"bp\">↑</span><span class=\"n\">K</span> <span class=\"n\">hf</span><span class=\"o\">]</span>\n\n<span class=\"kd\">@[to_additive]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">map_eq_comap_of_inverse</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">H</span> <span class=\"bp\">→*</span> <span class=\"n\">G</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hl</span> <span class=\"o\">:</span> <span class=\"n\">function.left_inverse</span> <span class=\"n\">g</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hr</span> <span class=\"o\">:</span> <span class=\"n\">function.right_inverse</span> <span class=\"n\">g</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"n\">K</span> <span class=\"bp\">=</span> <span class=\"n\">comap</span> <span class=\"n\">g</span> <span class=\"n\">K</span> <span class=\"o\">:=</span>\n<span class=\"n\">ext'</span> <span class=\"bp\">$</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">coe_map</span><span class=\"o\">,</span> <span class=\"n\">coe_comap</span><span class=\"o\">,</span> <span class=\"n\">set.image_eq_preimage_of_inverse</span> <span class=\"n\">hl</span> <span class=\"n\">hr</span><span class=\"o\">]</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">subgroup</span>\n</code></pre></div>",
        "id": 232578274,
        "sender_full_name": "Adrián Doña Mateo",
        "timestamp": 1617192383
    },
    {
        "content": "<p>I agree that seems like an obvious target for generalizing over subobjects. I don't think <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set_like\">docs#set_like</a> will help much here, but it might work as a template to build what you're suggesting</p>",
        "id": 232579540,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617192955
    },
    {
        "content": "<p>I was just thinking how to interface <code>set_like</code> nicely with the <a href=\"#narrow/stream/113488-general/topic/Typeclasses.20for.20morphisms\">morphism typeclass</a> proposal. I think we might end up with a <code>has_map_comap F S</code> typeclass which relates the \"fun_like\" <code>F</code> and the \"set_like\" <code>S</code>.</p>",
        "id": 232580314,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1617193310
    },
    {
        "content": "<p>We'd have to be careful not to reimplement the subobject part of the category theory library though :)</p>",
        "id": 232580432,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1617193354
    },
    {
        "content": "<p>It would be nice if there were some way to enforce that <code>(map f s : set _)</code> be defeq to <code>f '' (s : set _)</code>, <del>but I can't think of a neat way to do that right now</del></p>",
        "id": 232581041,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617193628
    },
    {
        "content": "<p><del>Ah, that's easy by adding a <code>copy</code> member to setlike</del></p>",
        "id": 232581350,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617193778
    },
    {
        "content": "<p>Ok, that doesn't work either - I don't think it's possible to generalize <a href=\"https://leanprover-community.github.io/mathlib_docs/find/submonoid.copy\">docs#submonoid.copy</a> while enforcing it actually be defeq</p>",
        "id": 232581791,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617193957
    },
    {
        "content": "<p>Would it be worth adding them for the time being? I can think of a way of golfing <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_simple_group_of_surjective\">docs#is_simple_group_of_surjective</a> using <code>map_comap_eq</code>.</p>",
        "id": 232583598,
        "sender_full_name": "Adrián Doña Mateo",
        "timestamp": 1617194748
    },
    {
        "content": "<p>I think the lemmas are definitely worth having - can you check if we have them already for <code>submodule</code>, and if so match the names?</p>",
        "id": 232583940,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617194885
    },
    {
        "content": "<p>There are <code>linear_map.map_comap_eq</code> and <code>linear_map.comap_map_eq</code> but they are different. They don't assume injectivity or surjectivity. The closest is perhaps <code>linear_map.map_comap_eq_self</code> and <code>linear_map.comap_map_eq_self</code>. I don't think there's an analog to the inverse one in the linear algebra section.</p>",
        "id": 232587799,
        "sender_full_name": "Adrián Doña Mateo",
        "timestamp": 1617196335
    },
    {
        "content": "<p>The names I gave to these are meant to mirror the <code>set</code> lemmas.</p>",
        "id": 232587998,
        "sender_full_name": "Adrián Doña Mateo",
        "timestamp": 1617196415
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_map.map_comap_eq_self\">docs#linear_map.map_comap_eq_self</a> makes a stronger statement than the one you're proposing, right?</p>",
        "id": 232588365,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617196531
    },
    {
        "content": "<p>Since <code>q ≤ f.range</code> is less strict than <code>function.surjective f</code> unless <code>q = ⊤</code> (<a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_map.range_eq_top\">docs#linear_map.range_eq_top</a>)</p>",
        "id": 232588683,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617196638
    },
    {
        "content": "<p>Yes. But I don't think the stronger statement is true for groups.</p>",
        "id": 232588956,
        "sender_full_name": "Adrián Doña Mateo",
        "timestamp": 1617196745
    },
    {
        "content": "<p>I think it probably is; it's even true for sets!</p>",
        "id": 232589959,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617197095
    },
    {
        "content": "<p>Oh right, sorry. I was thinking of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_map.comap_map_eq_self\">docs#linear_map.comap_map_eq_self</a>. On second thought, I think even that one is true for groups.</p>",
        "id": 232592963,
        "sender_full_name": "Adrián Doña Mateo",
        "timestamp": 1617198151
    }
]