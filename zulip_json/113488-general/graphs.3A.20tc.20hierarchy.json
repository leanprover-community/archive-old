[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> you had some scripts that generated graphs of the type class hierarchy. Is that right? Do you still have them somewhere?</p>",
        "id": 199002259,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590659646
    },
    {
        "content": "<p>If so, we can probably teach them to output json.</p>",
        "id": 199002286,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590659671
    },
    {
        "content": "<p>Yes, and I put it here: <a href=\"https://gist.github.com/fpvandoorn/4d4c52322d7eb661e5154f9a732754d4\">https://gist.github.com/fpvandoorn/4d4c52322d7eb661e5154f9a732754d4</a></p>\n<p>It currently produces output like this:</p>\n<div class=\"codehilite\"><pre><span></span><code>partial_order:\n  File: C:\\Users\\Floris\\.elan\\toolchains\\leanprover-community-lean-3.14.0\\lib\\lean\\library\\init\\algebra\\order.lean\n  Line: 26\n  Type: class\nsemilattice_inf_bot_of_bounded_lattice:\n  File: d:\\projects\\mathlib\\src\\order\\bounded_lattice.lean\n  Line: 250\n  Type: instance\n  Source: bounded_lattice\n  Target: semilattice_inf_bot\ngroup.to_has_inv:\n  File: d:\\projects\\mathlib\\src\\algebra\\group\\basic.lean\n  Line: 219\n  Type: instance\n  Source: group\n  Target: has_inv\norder_bot:\n  File: d:\\projects\\mathlib\\src\\order\\bounded_lattice.lean\n  Line: 94\n  Type: class\n[...]\n</code></pre></div>\n\n\n<p>It shouldn't be hard to modify the output.</p>\n<p>It  currently mostly prints \"the algebraic hierarchy\". This means instances and classes that have at most 1 argument that is not a type-class argument (within square brackets), and the instances can only be forgetful instances (where the conclusion is a class applied to a variable).</p>",
        "id": 199114759,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1590729187
    },
    {
        "content": "<p>What is the output you want, and how do you want to use it? Automatically generating a graph would be nice.</p>",
        "id": 199114774,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1590729212
    },
    {
        "content": "<p>The idea would be to automatically generated an interactive graph using d3.js</p>",
        "id": 199118095,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590734226
    },
    {
        "content": "<p>So the output should probably be some sort of json, although Patrick also linked to a package that can convert <code>.dot</code> files into d3 graphs.</p>",
        "id": 199118115,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590734260
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span> The output of the script by Floris (see above) is yaml... is that ok for you? I guess we can easily postprocess that into suitable json, right?</p>",
        "id": 199346532,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591000168
    },
    {
        "content": "<p>Yes, it shouldn't be too hard to postprocess. I bet the script could be modified to output JSON pretty easily too though.</p>",
        "id": 199379597,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1591023778
    },
    {
        "content": "<p>Right, that's what I thought. What kind of JSON format are we looking for?</p>",
        "id": 199383192,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591025451
    },
    {
        "content": "<p>For experimentation we can just go with whatever's quickest to implement.</p>",
        "id": 199385162,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1591026443
    },
    {
        "content": "<p>Should it look like</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"p\">[</span> <span class=\"err\">#</span> <span class=\"err\">a</span> <span class=\"err\">list</span> <span class=\"err\">of</span> <span class=\"err\">edges</span>\n<span class=\"p\">{</span> <span class=\"err\">source</span> <span class=\"err\">:</span> <span class=\"err\">&#39;group&#39;,</span> <span class=\"err\">target:</span> <span class=\"err\">&#39;monoid&#39;</span> <span class=\"p\">},</span>\n<span class=\"p\">{</span> <span class=\"err\">blabbla</span> <span class=\"p\">},</span>\n<span class=\"p\">]</span>\n</code></pre></div>",
        "id": 199388264,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591027844
    },
    {
        "content": "<p>Yeah, I think that would work fine (modulo correct JSON syntax <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span> )</p>",
        "id": 199388741,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1591028055
    },
    {
        "content": "<p>/me doesn't really know json</p>",
        "id": 199390009,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591028672
    },
    {
        "content": "<p>I'll try to hack the output into that form once my kids are in bed</p>",
        "id": 199390031,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591028686
    },
    {
        "content": "<p>No worries, I probably won't have time to play around with graphs until the weekend, and I can probably quickly do this myself then.</p>",
        "id": 199390785,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1591029022
    },
    {
        "content": "<p>There's also the question what you want the content of the graph to be exactly. The algebraic hierarchy? All type-classes?<br>\nI think currently my script gives you a bit more than the algebraic hierarchy. It gives you all \"unary type-classes\" but I think there are also some typeclasses with argument <code>m : Type u -&gt; Type u</code> which you might want to remove.</p>",
        "id": 199404612,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1591035747
    },
    {
        "content": "<p>I was thinking initially just all type classes...</p>",
        "id": 199409243,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591038215
    },
    {
        "content": "<p>But maybe you get lots of junk then?</p>",
        "id": 199409267,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591038224
    },
    {
        "content": "<p>Well, if your idea is to get a graph similar to the one in the mathlib paper, then I recommend just using the algebraic hierarchy + \"forgetful\" instances. For other classes/instances it's a lot less clear what arrows to draw. <br>\nWhat arrows represent <code>group A -&gt; group B -&gt; group (A x B)</code> or <code>decidable_eq A -&gt; decidable_eq (list A)</code> or <code>decidable_eq real</code>?</p>",
        "id": 199411312,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1591039190
    },
    {
        "content": "<p>Hmmm, I hadn't really thought about the edges, I think. Your suggestion sounds good to me.</p>",
        "id": 199411494,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591039270
    },
    {
        "content": "<p>I'm going to try to generate an update version of this graph for the workshop</p>",
        "id": 203021744,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594058666
    },
    {
        "content": "<p>Now it would be great if we could reuse some sphere eversion machinery (<span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span>) to create a clickable version that takes you to the corresponding page in the docs.</p>",
        "id": 203021864,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594058730
    },
    {
        "content": "<p>That part is very easy. The tricky part is to have a meaningful manageable graph to display.</p>",
        "id": 203022417,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594059029
    },
    {
        "content": "<p>I just ran the script by Floris. It generates a graph with 120 edges.</p>",
        "id": 203023482,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594059716
    },
    {
        "content": "<p>Oops, that's wrong</p>",
        "id": 203023598,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594059765
    },
    {
        "content": "<p>My new count is about 520 nodes and 400 edges. Which still seems weird.</p>",
        "id": 203023881,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594059901
    },
    {
        "content": "<p>I'm trying to make the script by Floris output two JSON lists, one with nodes, and one with edges. But I'm bad at <code>meta</code> stuff. Here is what I have so far:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">group</span><span class=\"bp\">.</span><span class=\"n\">defs</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">tactic</span> <span class=\"n\">declaration</span> <span class=\"n\">environment</span> <span class=\"n\">native</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">pos_line</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"n\">pos</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">string</span> <span class=\"o\">:=</span>\n<span class=\"k\">match</span> <span class=\"n\">p</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">to_string</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">line</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span>      <span class=\"o\">:=</span> <span class=\"s2\">&quot;&quot;</span>\n<span class=\"kn\">end</span>\n\n<span class=\"n\">def</span> <span class=\"n\">file_to_topic</span> <span class=\"o\">:</span> <span class=\"n\">string</span> <span class=\"bp\">→</span> <span class=\"n\">string</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">split_on</span> <span class=\"err\">&#39;</span><span class=\"bp\">/</span><span class=\"err\">&#39;</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">head</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">item</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">file</span> <span class=\"o\">:</span> <span class=\"n\">string</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">line</span> <span class=\"o\">:</span> <span class=\"n\">string</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:</span> <span class=\"n\">string</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">topic</span> <span class=\"o\">:</span> <span class=\"n\">string</span> <span class=\"o\">:=</span> <span class=\"n\">file_to_topic</span> <span class=\"n\">file</span><span class=\"o\">)</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">node</span> <span class=\"kn\">extends</span> <span class=\"n\">item</span><span class=\"bp\">.</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">node</span>\n\n<span class=\"n\">def</span> <span class=\"n\">jsonify</span> <span class=\"o\">:</span> <span class=\"n\">node</span> <span class=\"bp\">→</span> <span class=\"n\">string</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n<span class=\"s2\">&quot;{ name : &quot;</span> <span class=\"bp\">++</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">name</span> <span class=\"bp\">++</span> <span class=\"s2\">&quot;,</span><span class=\"se\">\\n</span><span class=\"s2\">&quot;</span> <span class=\"bp\">++</span>\n  <span class=\"s2\">&quot;topic : &quot;</span> <span class=\"bp\">++</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">topic</span> <span class=\"bp\">++</span> <span class=\"s2\">&quot;,</span><span class=\"se\">\\n</span><span class=\"s2\">&quot;</span> <span class=\"bp\">++</span>\n  <span class=\"s2\">&quot;file : &quot;</span> <span class=\"bp\">++</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">file</span> <span class=\"bp\">++</span> <span class=\"s2\">&quot;,</span><span class=\"se\">\\n</span><span class=\"s2\">&quot;</span> <span class=\"bp\">++</span>\n  <span class=\"s2\">&quot;line : &quot;</span> <span class=\"bp\">++</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">line</span> <span class=\"bp\">++</span> <span class=\"s2\">&quot; }</span><span class=\"se\">\\n</span><span class=\"s2\">&quot;</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_to_string</span> <span class=\"n\">node</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">jsonify</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">node</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">edge</span> <span class=\"kn\">extends</span> <span class=\"n\">item</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">source</span> <span class=\"o\">:</span> <span class=\"n\">string</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">target</span> <span class=\"o\">:</span> <span class=\"n\">string</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">edge</span>\n\n<span class=\"n\">def</span> <span class=\"n\">jsonify</span> <span class=\"o\">:</span> <span class=\"n\">edge</span> <span class=\"bp\">→</span> <span class=\"n\">string</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n<span class=\"s2\">&quot;{ name : &quot;</span> <span class=\"bp\">++</span> <span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">name</span> <span class=\"bp\">++</span> <span class=\"s2\">&quot;,</span><span class=\"se\">\\n</span><span class=\"s2\">&quot;</span> <span class=\"bp\">++</span>\n  <span class=\"s2\">&quot;topic : &quot;</span> <span class=\"bp\">++</span> <span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">topic</span> <span class=\"bp\">++</span> <span class=\"s2\">&quot;,</span><span class=\"se\">\\n</span><span class=\"s2\">&quot;</span> <span class=\"bp\">++</span>\n  <span class=\"s2\">&quot;source : &quot;</span> <span class=\"bp\">++</span> <span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">source</span> <span class=\"bp\">++</span> <span class=\"s2\">&quot;,</span><span class=\"se\">\\n</span><span class=\"s2\">&quot;</span> <span class=\"bp\">++</span>\n  <span class=\"s2\">&quot;target : &quot;</span> <span class=\"bp\">++</span> <span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">target</span> <span class=\"bp\">++</span> <span class=\"s2\">&quot;,</span><span class=\"se\">\\n</span><span class=\"s2\">&quot;</span> <span class=\"bp\">++</span>\n  <span class=\"s2\">&quot;file : &quot;</span> <span class=\"bp\">++</span> <span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">file</span> <span class=\"bp\">++</span> <span class=\"s2\">&quot;,</span><span class=\"se\">\\n</span><span class=\"s2\">&quot;</span> <span class=\"bp\">++</span>\n  <span class=\"s2\">&quot;line : &quot;</span> <span class=\"bp\">++</span> <span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">line</span> <span class=\"bp\">++</span> <span class=\"s2\">&quot; }</span><span class=\"se\">\\n</span><span class=\"s2\">&quot;</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_to_string</span> <span class=\"n\">edge</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">jsonify</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">edge</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> parses information about `decl` if it is an instance or a class. -/</span>\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">parse_decl</span> <span class=\"o\">(</span><span class=\"n\">env</span> <span class=\"o\">:</span> <span class=\"n\">environment</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">decl</span> <span class=\"o\">:</span> <span class=\"n\">declaration</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">tactic</span> <span class=\"o\">(</span><span class=\"n\">option</span> <span class=\"o\">(</span><span class=\"n\">node</span> <span class=\"err\">⊕</span> <span class=\"n\">edge</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"k\">let</span> <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">decl</span><span class=\"bp\">.</span><span class=\"n\">to_name</span> <span class=\"k\">in</span>\n<span class=\"n\">do</span>\n    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">env</span><span class=\"bp\">.</span><span class=\"n\">decl_olean</span> <span class=\"n\">name</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">is_some</span>\n    <span class=\"k\">then</span> <span class=\"n\">do</span>\n      <span class=\"n\">olean_file</span> <span class=\"err\">←</span> <span class=\"n\">env</span><span class=\"bp\">.</span><span class=\"n\">decl_olean</span> <span class=\"n\">name</span><span class=\"o\">,</span>\n      <span class=\"k\">let</span> <span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">item</span> <span class=\"o\">:=</span>\n      <span class=\"o\">{</span> <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">to_string</span> <span class=\"n\">name</span><span class=\"o\">,</span>\n        <span class=\"n\">file</span> <span class=\"o\">:=</span> <span class=\"n\">olean_file</span><span class=\"o\">,</span>\n        <span class=\"n\">line</span> <span class=\"o\">:=</span> <span class=\"n\">pos_line</span> <span class=\"o\">(</span><span class=\"n\">env</span><span class=\"bp\">.</span><span class=\"n\">decl_pos</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n      <span class=\"n\">is_c</span> <span class=\"err\">←</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">has_attribute</span> <span class=\"bp\">`</span><span class=\"n\">class</span> <span class=\"n\">name</span><span class=\"o\">,</span>\n      <span class=\"k\">if</span> <span class=\"n\">is_c</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"k\">then</span>\n        <span class=\"k\">let</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">node</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"bp\">..</span> <span class=\"n\">I</span> <span class=\"o\">}</span> <span class=\"k\">in</span>\n        <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">sum</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">N</span><span class=\"o\">))</span>\n      <span class=\"k\">else</span> <span class=\"n\">do</span>\n      <span class=\"n\">is_i</span> <span class=\"err\">←</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">has_attribute</span> <span class=\"bp\">`</span><span class=\"kn\">instance</span> <span class=\"n\">name</span><span class=\"o\">,</span>\n      <span class=\"k\">if</span> <span class=\"n\">is_i</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"k\">then</span> <span class=\"n\">do</span>\n        <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">tgt</span><span class=\"o\">)</span> <span class=\"err\">←</span> <span class=\"n\">return</span> <span class=\"n\">decl</span><span class=\"bp\">.</span><span class=\"n\">type</span><span class=\"bp\">.</span><span class=\"n\">pi_binders</span><span class=\"o\">,</span>\n        <span class=\"n\">guard</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"bp\">.</span><span class=\"n\">tail</span><span class=\"bp\">.</span><span class=\"n\">all</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"bp\">.</span><span class=\"n\">info</span> <span class=\"bp\">=</span> <span class=\"n\">binder_info</span><span class=\"bp\">.</span><span class=\"n\">inst_implicit</span><span class=\"o\">),</span>\n        <span class=\"n\">guard</span> <span class=\"o\">(</span><span class=\"n\">tgt</span><span class=\"bp\">.</span><span class=\"n\">get_app_args</span><span class=\"bp\">.</span><span class=\"n\">head</span><span class=\"bp\">.</span><span class=\"n\">is_var</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">l</span><span class=\"bp\">.</span><span class=\"n\">ilast</span><span class=\"bp\">.</span><span class=\"n\">type</span><span class=\"bp\">.</span><span class=\"n\">get_app_args</span><span class=\"bp\">.</span><span class=\"n\">head</span><span class=\"bp\">.</span><span class=\"n\">is_var</span><span class=\"o\">),</span>\n        <span class=\"k\">let</span> <span class=\"n\">src</span> <span class=\"o\">:=</span> <span class=\"n\">to_string</span> <span class=\"n\">l</span><span class=\"bp\">.</span><span class=\"n\">ilast</span><span class=\"bp\">.</span><span class=\"n\">type</span><span class=\"bp\">.</span><span class=\"n\">erase_annotations</span><span class=\"bp\">.</span><span class=\"n\">get_app_fn</span><span class=\"bp\">.</span><span class=\"n\">const_name</span><span class=\"o\">,</span>\n        <span class=\"k\">let</span> <span class=\"n\">tgt</span> <span class=\"o\">:=</span> <span class=\"n\">to_string</span> <span class=\"n\">tgt</span><span class=\"bp\">.</span><span class=\"n\">erase_annotations</span><span class=\"bp\">.</span><span class=\"n\">get_app_fn</span><span class=\"bp\">.</span><span class=\"n\">const_name</span><span class=\"o\">,</span>\n        <span class=\"n\">guard</span> <span class=\"o\">(</span><span class=\"n\">src</span> <span class=\"bp\">≠</span> <span class=\"n\">tgt</span><span class=\"o\">),</span>\n        <span class=\"k\">let</span> <span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"n\">edge</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">to_string</span> <span class=\"n\">name</span><span class=\"o\">,</span> <span class=\"n\">source</span> <span class=\"o\">:=</span> <span class=\"n\">src</span><span class=\"o\">,</span> <span class=\"n\">target</span> <span class=\"o\">:=</span> <span class=\"n\">tgt</span><span class=\"o\">,</span> <span class=\"bp\">..</span> <span class=\"n\">I</span> <span class=\"o\">},</span>\n        <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">sum</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">E</span><span class=\"o\">))</span>\n      <span class=\"k\">else</span> <span class=\"n\">do</span> <span class=\"n\">return</span> <span class=\"n\">none</span>\n    <span class=\"k\">else</span> <span class=\"n\">do</span> <span class=\"n\">return</span> <span class=\"n\">none</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"n\">def</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">remove_none</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">option</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span>            <span class=\"o\">:=</span> <span class=\"o\">[]</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">none</span> <span class=\"bp\">::</span> <span class=\"n\">l</span><span class=\"o\">)</span>   <span class=\"o\">:=</span> <span class=\"n\">l</span><span class=\"bp\">.</span><span class=\"n\">remove_none</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">a</span> <span class=\"bp\">::</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"bp\">::</span> <span class=\"n\">l</span><span class=\"bp\">.</span><span class=\"n\">remove_none</span>\n\n<span class=\"n\">def</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">split_sum</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"err\">⊕</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span>  <span class=\"o\">:=</span> <span class=\"o\">([],</span> <span class=\"o\">[])</span>\n<span class=\"bp\">|</span> <span class=\"o\">((</span><span class=\"n\">sum</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">::</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">let</span> <span class=\"n\">L</span> <span class=\"o\">:=</span> <span class=\"n\">l</span><span class=\"bp\">.</span><span class=\"n\">split_sum</span> <span class=\"k\">in</span> <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"bp\">::</span> <span class=\"n\">L</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">L</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">((</span><span class=\"n\">sum</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">::</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">let</span> <span class=\"n\">L</span> <span class=\"o\">:=</span> <span class=\"n\">l</span><span class=\"bp\">.</span><span class=\"n\">split_sum</span> <span class=\"k\">in</span> <span class=\"o\">(</span><span class=\"n\">L</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">::</span> <span class=\"n\">L</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">))</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">- prints information about unary classes and forgetful instances in the environment.</span>\n<span class=\"cm\">  It only prints instances and classes that have at most 1 argument</span>\n<span class=\"cm\">  that is not a type-class argument (within square brackets),</span>\n<span class=\"cm\">  and the instances can only be forgetful instances</span>\n<span class=\"cm\">  (where the conclusion is a class applied to a variable) -/</span>\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">print_content</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"n\">curr_env</span> <span class=\"err\">←</span> <span class=\"n\">get_env</span><span class=\"o\">,</span>\n   <span class=\"n\">o</span> <span class=\"err\">←</span> <span class=\"o\">(</span><span class=\"n\">curr_env</span><span class=\"bp\">.</span><span class=\"n\">fold</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">nil</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">cons</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mmap</span> <span class=\"o\">(</span><span class=\"n\">parse_decl</span> <span class=\"n\">curr_env</span><span class=\"o\">),</span>\n   <span class=\"n\">trace</span> <span class=\"o\">(</span><span class=\"n\">to_string</span> <span class=\"n\">o</span><span class=\"bp\">.</span><span class=\"n\">remove_none</span><span class=\"bp\">.</span><span class=\"n\">split_sum</span><span class=\"o\">),</span>\n   <span class=\"n\">skip</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">test</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"n\">curr_env</span> <span class=\"err\">←</span> <span class=\"n\">get_env</span><span class=\"o\">,</span>\n   <span class=\"n\">d</span> <span class=\"err\">←</span> <span class=\"n\">get_decl</span> <span class=\"bp\">`</span><span class=\"n\">comm_monoid</span><span class=\"o\">,</span>\n   <span class=\"n\">trace</span> <span class=\"o\">(</span><span class=\"n\">to_string</span> <span class=\"n\">d</span><span class=\"bp\">.</span><span class=\"n\">to_name</span><span class=\"o\">),</span>\n   <span class=\"n\">o</span> <span class=\"err\">←</span> <span class=\"n\">parse_decl</span> <span class=\"n\">curr_env</span> <span class=\"n\">d</span><span class=\"o\">,</span>\n   <span class=\"n\">trace</span> <span class=\"o\">(</span><span class=\"n\">to_string</span> <span class=\"n\">o</span><span class=\"o\">),</span>\n   <span class=\"n\">skip</span>\n\n<span class=\"n\">run_cmd</span> <span class=\"n\">test</span>\n\n<span class=\"n\">run_cmd</span> <span class=\"n\">print_content</span>\n</code></pre></div>",
        "id": 203112225,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594133386
    },
    {
        "content": "<p>If someone could help, that would be awesome.</p>",
        "id": 203112252,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594133399
    },
    {
        "content": "<p>The idea is to be able to generate interactive graphs that will link to the correct docs.<br>\nWe might need to tweak the info that we save in the nodes and edges.<br>\nAlso, I want items to have a \"topic\" so that you can easily hide all the nodes that come from the subdirectory <code>src/algebra</code>, and focus on <code>src/topology</code>, etc...</p>",
        "id": 203112468,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594133484
    },
    {
        "content": "<p>(The full graph will be too large to be useful.)</p>",
        "id": 203112497,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594133500
    },
    {
        "content": "<p><code>tactic.has_attribute</code> returns a bool and a nat. The bool isn't whether the attribute is there or not, it's whether the attribute is persistent (non-local). <code>has_attribute</code> will fail if the attribute isn't there.</p>",
        "id": 203112702,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1594133607
    },
    {
        "content": "<p>Aha... so what do I do now?</p>",
        "id": 203112784,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594133645
    },
    {
        "content": "<p>You can use <code>succeeds</code> if you don't actually need the output of <code>has_attribute</code>, which I don't think you do.</p>",
        "id": 203112827,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1594133671
    },
    {
        "content": "<p>Is there some sort of <code>success</code> thing? That I should prepend?</p>",
        "id": 203112829,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594133672
    },
    {
        "content": "<p>I now have, but it still doesn't seem to work</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">group</span><span class=\"bp\">.</span><span class=\"n\">defs</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">tactic</span> <span class=\"n\">declaration</span> <span class=\"n\">environment</span> <span class=\"n\">native</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">pos_line</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"n\">pos</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">string</span> <span class=\"o\">:=</span>\n<span class=\"k\">match</span> <span class=\"n\">p</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">to_string</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">line</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span>      <span class=\"o\">:=</span> <span class=\"s2\">&quot;&quot;</span>\n<span class=\"kn\">end</span>\n\n<span class=\"n\">def</span> <span class=\"n\">file_to_topic</span> <span class=\"o\">:</span> <span class=\"n\">string</span> <span class=\"bp\">→</span> <span class=\"n\">string</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">split_on</span> <span class=\"err\">&#39;</span><span class=\"bp\">/</span><span class=\"err\">&#39;</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">head</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">item</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">file</span> <span class=\"o\">:</span> <span class=\"n\">string</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">line</span> <span class=\"o\">:</span> <span class=\"n\">string</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:</span> <span class=\"n\">string</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">topic</span> <span class=\"o\">:</span> <span class=\"n\">string</span> <span class=\"o\">:=</span> <span class=\"n\">file_to_topic</span> <span class=\"n\">file</span><span class=\"o\">)</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">node</span> <span class=\"kn\">extends</span> <span class=\"n\">item</span><span class=\"bp\">.</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">node</span>\n\n<span class=\"n\">def</span> <span class=\"n\">jsonify</span> <span class=\"o\">:</span> <span class=\"n\">node</span> <span class=\"bp\">→</span> <span class=\"n\">string</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n<span class=\"s2\">&quot;{ name : &quot;</span> <span class=\"bp\">++</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">name</span> <span class=\"bp\">++</span> <span class=\"s2\">&quot;,</span><span class=\"se\">\\n</span><span class=\"s2\">&quot;</span> <span class=\"bp\">++</span>\n  <span class=\"s2\">&quot;topic : &quot;</span> <span class=\"bp\">++</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">topic</span> <span class=\"bp\">++</span> <span class=\"s2\">&quot;,</span><span class=\"se\">\\n</span><span class=\"s2\">&quot;</span> <span class=\"bp\">++</span>\n  <span class=\"s2\">&quot;file : &quot;</span> <span class=\"bp\">++</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">file</span> <span class=\"bp\">++</span> <span class=\"s2\">&quot;,</span><span class=\"se\">\\n</span><span class=\"s2\">&quot;</span> <span class=\"bp\">++</span>\n  <span class=\"s2\">&quot;line : &quot;</span> <span class=\"bp\">++</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">line</span> <span class=\"bp\">++</span> <span class=\"s2\">&quot; }</span><span class=\"se\">\\n</span><span class=\"s2\">&quot;</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_to_string</span> <span class=\"n\">node</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">jsonify</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">node</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">edge</span> <span class=\"kn\">extends</span> <span class=\"n\">item</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">source</span> <span class=\"o\">:</span> <span class=\"n\">string</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">target</span> <span class=\"o\">:</span> <span class=\"n\">string</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">edge</span>\n\n<span class=\"n\">def</span> <span class=\"n\">jsonify</span> <span class=\"o\">:</span> <span class=\"n\">edge</span> <span class=\"bp\">→</span> <span class=\"n\">string</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n<span class=\"s2\">&quot;{ name : &quot;</span> <span class=\"bp\">++</span> <span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">name</span> <span class=\"bp\">++</span> <span class=\"s2\">&quot;,</span><span class=\"se\">\\n</span><span class=\"s2\">&quot;</span> <span class=\"bp\">++</span>\n  <span class=\"s2\">&quot;topic : &quot;</span> <span class=\"bp\">++</span> <span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">topic</span> <span class=\"bp\">++</span> <span class=\"s2\">&quot;,</span><span class=\"se\">\\n</span><span class=\"s2\">&quot;</span> <span class=\"bp\">++</span>\n  <span class=\"s2\">&quot;source : &quot;</span> <span class=\"bp\">++</span> <span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">source</span> <span class=\"bp\">++</span> <span class=\"s2\">&quot;,</span><span class=\"se\">\\n</span><span class=\"s2\">&quot;</span> <span class=\"bp\">++</span>\n  <span class=\"s2\">&quot;target : &quot;</span> <span class=\"bp\">++</span> <span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">target</span> <span class=\"bp\">++</span> <span class=\"s2\">&quot;,</span><span class=\"se\">\\n</span><span class=\"s2\">&quot;</span> <span class=\"bp\">++</span>\n  <span class=\"s2\">&quot;file : &quot;</span> <span class=\"bp\">++</span> <span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">file</span> <span class=\"bp\">++</span> <span class=\"s2\">&quot;,</span><span class=\"se\">\\n</span><span class=\"s2\">&quot;</span> <span class=\"bp\">++</span>\n  <span class=\"s2\">&quot;line : &quot;</span> <span class=\"bp\">++</span> <span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">line</span> <span class=\"bp\">++</span> <span class=\"s2\">&quot; }</span><span class=\"se\">\\n</span><span class=\"s2\">&quot;</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_to_string</span> <span class=\"n\">edge</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">jsonify</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">edge</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> parses information about `decl` if it is an instance or a class. -/</span>\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">parse_decl</span> <span class=\"o\">(</span><span class=\"n\">env</span> <span class=\"o\">:</span> <span class=\"n\">environment</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">decl</span> <span class=\"o\">:</span> <span class=\"n\">declaration</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">tactic</span> <span class=\"o\">(</span><span class=\"n\">option</span> <span class=\"o\">(</span><span class=\"n\">node</span> <span class=\"err\">⊕</span> <span class=\"n\">edge</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"k\">let</span> <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">decl</span><span class=\"bp\">.</span><span class=\"n\">to_name</span> <span class=\"k\">in</span>\n<span class=\"n\">do</span>\n    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">env</span><span class=\"bp\">.</span><span class=\"n\">decl_olean</span> <span class=\"n\">name</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">is_some</span>\n    <span class=\"k\">then</span> <span class=\"n\">do</span>\n      <span class=\"n\">olean_file</span> <span class=\"err\">←</span> <span class=\"n\">env</span><span class=\"bp\">.</span><span class=\"n\">decl_olean</span> <span class=\"n\">name</span><span class=\"o\">,</span>\n      <span class=\"k\">let</span> <span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">item</span> <span class=\"o\">:=</span>\n      <span class=\"o\">{</span> <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">to_string</span> <span class=\"n\">name</span><span class=\"o\">,</span>\n        <span class=\"n\">file</span> <span class=\"o\">:=</span> <span class=\"n\">olean_file</span><span class=\"o\">,</span>\n        <span class=\"n\">line</span> <span class=\"o\">:=</span> <span class=\"n\">pos_line</span> <span class=\"o\">(</span><span class=\"n\">env</span><span class=\"bp\">.</span><span class=\"n\">decl_pos</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n      <span class=\"n\">is_c</span> <span class=\"err\">←</span> <span class=\"n\">succeeds</span> <span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">has_attribute</span> <span class=\"bp\">`</span><span class=\"n\">class</span> <span class=\"n\">name</span><span class=\"o\">),</span>\n      <span class=\"k\">if</span> <span class=\"n\">is_c</span> <span class=\"k\">then</span>\n        <span class=\"k\">let</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">node</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"bp\">..</span> <span class=\"n\">I</span> <span class=\"o\">}</span> <span class=\"k\">in</span>\n        <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">sum</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">N</span><span class=\"o\">))</span>\n      <span class=\"k\">else</span> <span class=\"n\">do</span>\n      <span class=\"n\">is_i</span> <span class=\"err\">←</span> <span class=\"n\">succeeds</span> <span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">has_attribute</span> <span class=\"bp\">`</span><span class=\"kn\">instance</span> <span class=\"n\">name</span><span class=\"o\">),</span>\n      <span class=\"k\">if</span> <span class=\"n\">is_i</span> <span class=\"k\">then</span> <span class=\"n\">do</span>\n        <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">tgt</span><span class=\"o\">)</span> <span class=\"err\">←</span> <span class=\"n\">return</span> <span class=\"n\">decl</span><span class=\"bp\">.</span><span class=\"n\">type</span><span class=\"bp\">.</span><span class=\"n\">pi_binders</span><span class=\"o\">,</span>\n        <span class=\"n\">guard</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"bp\">.</span><span class=\"n\">tail</span><span class=\"bp\">.</span><span class=\"n\">all</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"bp\">.</span><span class=\"n\">info</span> <span class=\"bp\">=</span> <span class=\"n\">binder_info</span><span class=\"bp\">.</span><span class=\"n\">inst_implicit</span><span class=\"o\">),</span>\n        <span class=\"n\">guard</span> <span class=\"o\">(</span><span class=\"n\">tgt</span><span class=\"bp\">.</span><span class=\"n\">get_app_args</span><span class=\"bp\">.</span><span class=\"n\">head</span><span class=\"bp\">.</span><span class=\"n\">is_var</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">l</span><span class=\"bp\">.</span><span class=\"n\">ilast</span><span class=\"bp\">.</span><span class=\"n\">type</span><span class=\"bp\">.</span><span class=\"n\">get_app_args</span><span class=\"bp\">.</span><span class=\"n\">head</span><span class=\"bp\">.</span><span class=\"n\">is_var</span><span class=\"o\">),</span>\n        <span class=\"k\">let</span> <span class=\"n\">src</span> <span class=\"o\">:=</span> <span class=\"n\">to_string</span> <span class=\"n\">l</span><span class=\"bp\">.</span><span class=\"n\">ilast</span><span class=\"bp\">.</span><span class=\"n\">type</span><span class=\"bp\">.</span><span class=\"n\">erase_annotations</span><span class=\"bp\">.</span><span class=\"n\">get_app_fn</span><span class=\"bp\">.</span><span class=\"n\">const_name</span><span class=\"o\">,</span>\n        <span class=\"k\">let</span> <span class=\"n\">tgt</span> <span class=\"o\">:=</span> <span class=\"n\">to_string</span> <span class=\"n\">tgt</span><span class=\"bp\">.</span><span class=\"n\">erase_annotations</span><span class=\"bp\">.</span><span class=\"n\">get_app_fn</span><span class=\"bp\">.</span><span class=\"n\">const_name</span><span class=\"o\">,</span>\n        <span class=\"n\">guard</span> <span class=\"o\">(</span><span class=\"n\">src</span> <span class=\"bp\">≠</span> <span class=\"n\">tgt</span><span class=\"o\">),</span>\n        <span class=\"k\">let</span> <span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"n\">edge</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">source</span> <span class=\"o\">:=</span> <span class=\"n\">src</span><span class=\"o\">,</span> <span class=\"n\">target</span> <span class=\"o\">:=</span> <span class=\"n\">tgt</span><span class=\"o\">,</span> <span class=\"bp\">..</span> <span class=\"n\">I</span> <span class=\"o\">},</span>\n        <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">sum</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">E</span><span class=\"o\">))</span>\n      <span class=\"k\">else</span> <span class=\"n\">do</span> <span class=\"n\">return</span> <span class=\"n\">none</span>\n    <span class=\"k\">else</span> <span class=\"n\">do</span> <span class=\"n\">return</span> <span class=\"n\">none</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"n\">def</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">remove_none</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">option</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span>            <span class=\"o\">:=</span> <span class=\"o\">[]</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">none</span> <span class=\"bp\">::</span> <span class=\"n\">l</span><span class=\"o\">)</span>   <span class=\"o\">:=</span> <span class=\"n\">l</span><span class=\"bp\">.</span><span class=\"n\">remove_none</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">a</span> <span class=\"bp\">::</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"bp\">::</span> <span class=\"n\">l</span><span class=\"bp\">.</span><span class=\"n\">remove_none</span>\n\n<span class=\"n\">def</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">split_sum</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"err\">⊕</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span>  <span class=\"o\">:=</span> <span class=\"o\">([],</span> <span class=\"o\">[])</span>\n<span class=\"bp\">|</span> <span class=\"o\">((</span><span class=\"n\">sum</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">::</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">let</span> <span class=\"n\">L</span> <span class=\"o\">:=</span> <span class=\"n\">l</span><span class=\"bp\">.</span><span class=\"n\">split_sum</span> <span class=\"k\">in</span> <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"bp\">::</span> <span class=\"n\">L</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">L</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">((</span><span class=\"n\">sum</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">::</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">let</span> <span class=\"n\">L</span> <span class=\"o\">:=</span> <span class=\"n\">l</span><span class=\"bp\">.</span><span class=\"n\">split_sum</span> <span class=\"k\">in</span> <span class=\"o\">(</span><span class=\"n\">L</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">::</span> <span class=\"n\">L</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">))</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">- prints information about unary classes and forgetful instances in the environment.</span>\n<span class=\"cm\">  It only prints instances and classes that have at most 1 argument</span>\n<span class=\"cm\">  that is not a type-class argument (within square brackets),</span>\n<span class=\"cm\">  and the instances can only be forgetful instances</span>\n<span class=\"cm\">  (where the conclusion is a class applied to a variable) -/</span>\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">print_content</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"n\">curr_env</span> <span class=\"err\">←</span> <span class=\"n\">get_env</span><span class=\"o\">,</span>\n   <span class=\"n\">o</span> <span class=\"err\">←</span> <span class=\"o\">(</span><span class=\"n\">curr_env</span><span class=\"bp\">.</span><span class=\"n\">fold</span> <span class=\"o\">[]</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">cons</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mmap</span> <span class=\"o\">(</span><span class=\"n\">parse_decl</span> <span class=\"n\">curr_env</span><span class=\"o\">),</span>\n   <span class=\"n\">trace</span> <span class=\"o\">(</span><span class=\"n\">to_string</span> <span class=\"n\">o</span><span class=\"bp\">.</span><span class=\"n\">remove_none</span><span class=\"bp\">.</span><span class=\"n\">split_sum</span><span class=\"o\">),</span>\n   <span class=\"n\">skip</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">test</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"n\">curr_env</span> <span class=\"err\">←</span> <span class=\"n\">get_env</span><span class=\"o\">,</span>\n   <span class=\"n\">d</span> <span class=\"err\">←</span> <span class=\"n\">get_decl</span> <span class=\"bp\">`</span><span class=\"n\">comm_monoid</span><span class=\"bp\">.</span><span class=\"n\">to_comm_semigroup</span><span class=\"o\">,</span>\n   <span class=\"n\">trace</span> <span class=\"o\">(</span><span class=\"n\">to_string</span> <span class=\"n\">d</span><span class=\"bp\">.</span><span class=\"n\">to_name</span><span class=\"o\">),</span>\n   <span class=\"n\">o</span> <span class=\"err\">←</span> <span class=\"n\">parse_decl</span> <span class=\"n\">curr_env</span> <span class=\"n\">d</span><span class=\"o\">,</span>\n   <span class=\"n\">trace</span> <span class=\"o\">(</span><span class=\"n\">to_string</span> <span class=\"n\">o</span><span class=\"o\">),</span>\n   <span class=\"n\">skip</span>\n\n<span class=\"n\">run_cmd</span> <span class=\"n\">test</span>\n\n<span class=\"n\">run_cmd</span> <span class=\"n\">print_content</span>\n</code></pre></div>",
        "id": 203114623,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594134403
    },
    {
        "content": "<p>This bit</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">print_content</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"n\">curr_env</span> <span class=\"err\">←</span> <span class=\"n\">get_env</span><span class=\"o\">,</span>\n   <span class=\"n\">o</span> <span class=\"err\">←</span> <span class=\"o\">(</span><span class=\"n\">curr_env</span><span class=\"bp\">.</span><span class=\"n\">fold</span> <span class=\"o\">[]</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">cons</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mmap</span> <span class=\"o\">(</span><span class=\"n\">parse_decl</span> <span class=\"n\">curr_env</span><span class=\"o\">),</span>\n   <span class=\"n\">skip</span>\n</code></pre></div>\n\n\n<p>gives an error</p>",
        "id": 203116361,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594135116
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">failed</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"err\">⊢</span> <span class=\"n\">true</span>\n</code></pre></div>",
        "id": 203116383,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594135128
    },
    {
        "content": "<p>It looks like the line <code>guard (tgt.get_app_args.head.is_var &amp;&amp; l.ilast.type.get_app_args.head.is_var),</code> is the one that fails. What is the goal of that check?</p>",
        "id": 203116610,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1594135202
    },
    {
        "content": "<p>I don't know... it was there in Floris's version</p>",
        "id": 203116838,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594135292
    },
    {
        "content": "<p>I'm guessing then that it detects declarations that we don't want to process. In that case, the issue is that the first failing declaration aborts the whole command, so we want to wrap the command in a <code>&lt;|&gt; return none</code>. Let's see if it helps...</p>",
        "id": 203117156,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1594135412
    },
    {
        "content": "<p>Without the guards it works!</p>",
        "id": 203117183,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594135420
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">group</span><span class=\"bp\">.</span><span class=\"n\">defs</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">tactic</span> <span class=\"n\">declaration</span> <span class=\"n\">environment</span> <span class=\"n\">native</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">pos_line</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"n\">pos</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">string</span> <span class=\"o\">:=</span>\n<span class=\"k\">match</span> <span class=\"n\">p</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">to_string</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">line</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span>      <span class=\"o\">:=</span> <span class=\"s2\">&quot;&quot;</span>\n<span class=\"kn\">end</span>\n\n<span class=\"n\">def</span> <span class=\"n\">file_to_topic</span> <span class=\"o\">:</span> <span class=\"n\">string</span> <span class=\"bp\">→</span> <span class=\"n\">string</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">split_on</span> <span class=\"err\">&#39;</span><span class=\"bp\">/</span><span class=\"err\">&#39;</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">head</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">item</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">file</span> <span class=\"o\">:</span> <span class=\"n\">string</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">line</span> <span class=\"o\">:</span> <span class=\"n\">string</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:</span> <span class=\"n\">string</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">topic</span> <span class=\"o\">:</span> <span class=\"n\">string</span> <span class=\"o\">:=</span> <span class=\"n\">file_to_topic</span> <span class=\"n\">file</span><span class=\"o\">)</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">node</span> <span class=\"kn\">extends</span> <span class=\"n\">item</span><span class=\"bp\">.</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">node</span>\n\n<span class=\"n\">def</span> <span class=\"n\">jsonify</span> <span class=\"o\">:</span> <span class=\"n\">node</span> <span class=\"bp\">→</span> <span class=\"n\">string</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n<span class=\"s2\">&quot;{ name : &quot;</span> <span class=\"bp\">++</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">name</span> <span class=\"bp\">++</span> <span class=\"s2\">&quot;,</span><span class=\"se\">\\n</span><span class=\"s2\">&quot;</span> <span class=\"bp\">++</span>\n  <span class=\"s2\">&quot;topic : &quot;</span> <span class=\"bp\">++</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">topic</span> <span class=\"bp\">++</span> <span class=\"s2\">&quot;,</span><span class=\"se\">\\n</span><span class=\"s2\">&quot;</span> <span class=\"bp\">++</span>\n  <span class=\"s2\">&quot;file : &quot;</span> <span class=\"bp\">++</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">file</span> <span class=\"bp\">++</span> <span class=\"s2\">&quot;,</span><span class=\"se\">\\n</span><span class=\"s2\">&quot;</span> <span class=\"bp\">++</span>\n  <span class=\"s2\">&quot;line : &quot;</span> <span class=\"bp\">++</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">line</span> <span class=\"bp\">++</span> <span class=\"s2\">&quot; }</span><span class=\"se\">\\n</span><span class=\"s2\">&quot;</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_to_string</span> <span class=\"n\">node</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">jsonify</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">node</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">edge</span> <span class=\"kn\">extends</span> <span class=\"n\">item</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">source</span> <span class=\"o\">:</span> <span class=\"n\">string</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">target</span> <span class=\"o\">:</span> <span class=\"n\">string</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">edge</span>\n\n<span class=\"n\">def</span> <span class=\"n\">jsonify</span> <span class=\"o\">:</span> <span class=\"n\">edge</span> <span class=\"bp\">→</span> <span class=\"n\">string</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n<span class=\"s2\">&quot;{ name : &quot;</span> <span class=\"bp\">++</span> <span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">name</span> <span class=\"bp\">++</span> <span class=\"s2\">&quot;,</span><span class=\"se\">\\n</span><span class=\"s2\">&quot;</span> <span class=\"bp\">++</span>\n  <span class=\"s2\">&quot;topic : &quot;</span> <span class=\"bp\">++</span> <span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">topic</span> <span class=\"bp\">++</span> <span class=\"s2\">&quot;,</span><span class=\"se\">\\n</span><span class=\"s2\">&quot;</span> <span class=\"bp\">++</span>\n  <span class=\"s2\">&quot;source : &quot;</span> <span class=\"bp\">++</span> <span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">source</span> <span class=\"bp\">++</span> <span class=\"s2\">&quot;,</span><span class=\"se\">\\n</span><span class=\"s2\">&quot;</span> <span class=\"bp\">++</span>\n  <span class=\"s2\">&quot;target : &quot;</span> <span class=\"bp\">++</span> <span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">target</span> <span class=\"bp\">++</span> <span class=\"s2\">&quot;,</span><span class=\"se\">\\n</span><span class=\"s2\">&quot;</span> <span class=\"bp\">++</span>\n  <span class=\"s2\">&quot;file : &quot;</span> <span class=\"bp\">++</span> <span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">file</span> <span class=\"bp\">++</span> <span class=\"s2\">&quot;,</span><span class=\"se\">\\n</span><span class=\"s2\">&quot;</span> <span class=\"bp\">++</span>\n  <span class=\"s2\">&quot;line : &quot;</span> <span class=\"bp\">++</span> <span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">line</span> <span class=\"bp\">++</span> <span class=\"s2\">&quot; }</span><span class=\"se\">\\n</span><span class=\"s2\">&quot;</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_to_string</span> <span class=\"n\">edge</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">jsonify</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">edge</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> parses information about `decl` if it is an instance or a class. -/</span>\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">parse_decl</span> <span class=\"o\">(</span><span class=\"n\">env</span> <span class=\"o\">:</span> <span class=\"n\">environment</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">decl</span> <span class=\"o\">:</span> <span class=\"n\">declaration</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">tactic</span> <span class=\"o\">(</span><span class=\"n\">option</span> <span class=\"o\">(</span><span class=\"n\">node</span> <span class=\"err\">⊕</span> <span class=\"n\">edge</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"k\">let</span> <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">decl</span><span class=\"bp\">.</span><span class=\"n\">to_name</span> <span class=\"k\">in</span>\n<span class=\"n\">do</span>\n    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">env</span><span class=\"bp\">.</span><span class=\"n\">decl_olean</span> <span class=\"n\">name</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">is_some</span>\n    <span class=\"k\">then</span> <span class=\"n\">do</span>\n      <span class=\"n\">olean_file</span> <span class=\"err\">←</span> <span class=\"n\">env</span><span class=\"bp\">.</span><span class=\"n\">decl_olean</span> <span class=\"n\">name</span><span class=\"o\">,</span>\n      <span class=\"k\">let</span> <span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">item</span> <span class=\"o\">:=</span>\n      <span class=\"o\">{</span> <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">to_string</span> <span class=\"n\">name</span><span class=\"o\">,</span>\n        <span class=\"n\">file</span> <span class=\"o\">:=</span> <span class=\"n\">olean_file</span><span class=\"o\">,</span>\n        <span class=\"n\">line</span> <span class=\"o\">:=</span> <span class=\"n\">pos_line</span> <span class=\"o\">(</span><span class=\"n\">env</span><span class=\"bp\">.</span><span class=\"n\">decl_pos</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n      <span class=\"n\">is_c</span> <span class=\"err\">←</span> <span class=\"n\">succeeds</span> <span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">has_attribute</span> <span class=\"bp\">`</span><span class=\"n\">class</span> <span class=\"n\">name</span><span class=\"o\">),</span>\n      <span class=\"k\">if</span> <span class=\"n\">is_c</span> <span class=\"k\">then</span>\n        <span class=\"k\">let</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">node</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"bp\">..</span> <span class=\"n\">I</span> <span class=\"o\">}</span> <span class=\"k\">in</span>\n        <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">sum</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">N</span><span class=\"o\">))</span>\n      <span class=\"k\">else</span> <span class=\"n\">do</span>\n      <span class=\"n\">is_i</span> <span class=\"err\">←</span> <span class=\"n\">succeeds</span> <span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">has_attribute</span> <span class=\"bp\">`</span><span class=\"kn\">instance</span> <span class=\"n\">name</span><span class=\"o\">),</span>\n      <span class=\"k\">if</span> <span class=\"n\">is_i</span> <span class=\"k\">then</span> <span class=\"n\">do</span>\n        <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">tgt</span><span class=\"o\">)</span> <span class=\"err\">←</span> <span class=\"n\">return</span> <span class=\"n\">decl</span><span class=\"bp\">.</span><span class=\"n\">type</span><span class=\"bp\">.</span><span class=\"n\">pi_binders</span><span class=\"o\">,</span>\n        <span class=\"c1\">-- guard (l.tail.all $ λ b, b.info = binder_info.inst_implicit),</span>\n        <span class=\"c1\">-- guard (tgt.get_app_args.head.is_var &amp;&amp; l.ilast.type.get_app_args.head.is_var),</span>\n        <span class=\"k\">let</span> <span class=\"n\">src</span> <span class=\"o\">:=</span> <span class=\"n\">to_string</span> <span class=\"n\">l</span><span class=\"bp\">.</span><span class=\"n\">ilast</span><span class=\"bp\">.</span><span class=\"n\">type</span><span class=\"bp\">.</span><span class=\"n\">erase_annotations</span><span class=\"bp\">.</span><span class=\"n\">get_app_fn</span><span class=\"bp\">.</span><span class=\"n\">const_name</span><span class=\"o\">,</span>\n        <span class=\"k\">let</span> <span class=\"n\">tgt</span> <span class=\"o\">:=</span> <span class=\"n\">to_string</span> <span class=\"n\">tgt</span><span class=\"bp\">.</span><span class=\"n\">erase_annotations</span><span class=\"bp\">.</span><span class=\"n\">get_app_fn</span><span class=\"bp\">.</span><span class=\"n\">const_name</span><span class=\"o\">,</span>\n        <span class=\"c1\">-- guard (src ≠ tgt),</span>\n        <span class=\"k\">let</span> <span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"n\">edge</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">source</span> <span class=\"o\">:=</span> <span class=\"n\">src</span><span class=\"o\">,</span> <span class=\"n\">target</span> <span class=\"o\">:=</span> <span class=\"n\">tgt</span><span class=\"o\">,</span> <span class=\"bp\">..</span> <span class=\"n\">I</span> <span class=\"o\">},</span>\n        <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">sum</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">E</span><span class=\"o\">))</span>\n      <span class=\"k\">else</span> <span class=\"n\">do</span> <span class=\"n\">return</span> <span class=\"n\">none</span>\n    <span class=\"k\">else</span> <span class=\"n\">do</span> <span class=\"n\">return</span> <span class=\"n\">none</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"n\">def</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">remove_none</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">option</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span>            <span class=\"o\">:=</span> <span class=\"o\">[]</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">none</span> <span class=\"bp\">::</span> <span class=\"n\">l</span><span class=\"o\">)</span>   <span class=\"o\">:=</span> <span class=\"n\">l</span><span class=\"bp\">.</span><span class=\"n\">remove_none</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">a</span> <span class=\"bp\">::</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"bp\">::</span> <span class=\"n\">l</span><span class=\"bp\">.</span><span class=\"n\">remove_none</span>\n\n<span class=\"n\">def</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">split_sum</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"err\">⊕</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span>  <span class=\"o\">:=</span> <span class=\"o\">([],</span> <span class=\"o\">[])</span>\n<span class=\"bp\">|</span> <span class=\"o\">((</span><span class=\"n\">sum</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">::</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">let</span> <span class=\"n\">L</span> <span class=\"o\">:=</span> <span class=\"n\">l</span><span class=\"bp\">.</span><span class=\"n\">split_sum</span> <span class=\"k\">in</span> <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"bp\">::</span> <span class=\"n\">L</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">L</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">((</span><span class=\"n\">sum</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">::</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">let</span> <span class=\"n\">L</span> <span class=\"o\">:=</span> <span class=\"n\">l</span><span class=\"bp\">.</span><span class=\"n\">split_sum</span> <span class=\"k\">in</span> <span class=\"o\">(</span><span class=\"n\">L</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">::</span> <span class=\"n\">L</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">))</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">- prints information about unary classes and forgetful instances in the environment.</span>\n<span class=\"cm\">  It only prints instances and classes that have at most 1 argument</span>\n<span class=\"cm\">  that is not a type-class argument (within square brackets),</span>\n<span class=\"cm\">  and the instances can only be forgetful instances</span>\n<span class=\"cm\">  (where the conclusion is a class applied to a variable) -/</span>\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">print_content</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"n\">curr_env</span> <span class=\"err\">←</span> <span class=\"n\">get_env</span><span class=\"o\">,</span>\n   <span class=\"n\">o</span> <span class=\"err\">←</span> <span class=\"o\">(</span><span class=\"n\">curr_env</span><span class=\"bp\">.</span><span class=\"n\">fold</span> <span class=\"o\">[]</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">cons</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mmap</span> <span class=\"o\">(</span><span class=\"n\">parse_decl</span> <span class=\"n\">curr_env</span><span class=\"o\">),</span>\n   <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">ns</span><span class=\"o\">,</span> <span class=\"n\">es</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">o</span><span class=\"bp\">.</span><span class=\"n\">remove_none</span><span class=\"bp\">.</span><span class=\"n\">split_sum</span><span class=\"o\">,</span>\n   <span class=\"n\">trace</span> <span class=\"o\">(</span><span class=\"n\">to_string</span> <span class=\"n\">ns</span><span class=\"o\">),</span>\n   <span class=\"n\">trace</span> <span class=\"o\">(</span><span class=\"n\">to_string</span> <span class=\"n\">es</span><span class=\"o\">),</span>\n   <span class=\"n\">skip</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">test</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"n\">curr_env</span> <span class=\"err\">←</span> <span class=\"n\">get_env</span><span class=\"o\">,</span>\n   <span class=\"n\">d</span> <span class=\"err\">←</span> <span class=\"n\">get_decl</span> <span class=\"bp\">`</span><span class=\"n\">comm_monoid</span><span class=\"bp\">.</span><span class=\"n\">to_comm_semigroup</span><span class=\"o\">,</span>\n   <span class=\"n\">trace</span> <span class=\"o\">(</span><span class=\"n\">to_string</span> <span class=\"n\">d</span><span class=\"bp\">.</span><span class=\"n\">to_name</span><span class=\"o\">),</span>\n   <span class=\"n\">o</span> <span class=\"err\">←</span> <span class=\"n\">parse_decl</span> <span class=\"n\">curr_env</span> <span class=\"n\">d</span><span class=\"o\">,</span>\n   <span class=\"n\">trace</span> <span class=\"o\">(</span><span class=\"n\">to_string</span> <span class=\"n\">o</span><span class=\"o\">),</span>\n   <span class=\"n\">skip</span>\n\n<span class=\"n\">run_cmd</span> <span class=\"n\">test</span>\n\n<span class=\"n\">run_cmd</span> <span class=\"n\">print_content</span>\n</code></pre></div>",
        "id": 203117200,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594135431
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"238446\">Anne Baanen</span> <a href=\"#narrow/stream/113488-general/topic/graphs.3A.20tc.20hierarchy/near/203117156\">said</a>:</p>\n<blockquote>\n<p>I'm guessing then that it detects declarations that we don't want to process. In that case, the issue is that the first failing declaration aborts the whole command, so we want to wrap the command in a <code>&lt;|&gt; return none</code>. Let's see if it helps...</p>\n</blockquote>\n<p>Ooh, that makes sense. Because I do indeed get garbage output if I simply comment out the guard.</p>",
        "id": 203117314,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594135475
    },
    {
        "content": "<p>I don't know exactly where to put the <code>&lt;|&gt; return none</code>. Would be delighted if you show me.</p>",
        "id": 203117389,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594135509
    },
    {
        "content": "<p>I tried to put it around the call to parse_decl:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">print_content</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"n\">curr_env</span> <span class=\"err\">←</span> <span class=\"n\">get_env</span><span class=\"o\">,</span>\n   <span class=\"n\">o</span> <span class=\"err\">←</span> <span class=\"o\">(</span><span class=\"n\">curr_env</span><span class=\"bp\">.</span><span class=\"n\">fold</span> <span class=\"o\">[]</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">cons</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mmap</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">parse_decl</span> <span class=\"n\">curr_env</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">pure</span> <span class=\"n\">none</span><span class=\"o\">),</span>\n   <span class=\"n\">trace</span> <span class=\"o\">(</span><span class=\"n\">to_string</span> <span class=\"n\">o</span><span class=\"bp\">.</span><span class=\"n\">remove_none</span><span class=\"bp\">.</span><span class=\"n\">split_sum</span><span class=\"o\">),</span>\n   <span class=\"n\">skip</span>\n</code></pre></div>",
        "id": 203117461,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1594135541
    },
    {
        "content": "<p>Then I get output like:</p>\n<div class=\"codehilite\"><pre><span></span><code>([{ name : partial_order,\ntopic : ,\nfile : /home/arch/arb/.elan/toolchains/leanprover-community-lean-3.17.0/lib/lean/library/init/algebra/order.lean,\nline : 26 }\n, { name : has_coe_t_aux,\ntopic : ,\nfile : /home/arch/arb/.elan/toolchains/leanprover-community-lean-3.17.0/lib/lean/library/init/coe.lean,\nline : 123 }\n, { name : is_cond_left_inv,\ntopic : ,\nfile : /home/arch/arb/.elan/toolchains/leanprover-community-lean-3.17.0/lib/lean/library/init/algebra/classes.lean,\nline : 55 }\n, { name : is_total,\ntopic : ,\nfile : /home/arch/arb/.elan/toolchains/leanprover-community-lean-3.17.0/lib/lean/library/init/algebra/classes.lean,\nline : 95 }\n, ...\n</code></pre></div>",
        "id": 203117579,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1594135585
    },
    {
        "content": "<p>Yup, same here...</p>",
        "id": 203117689,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594135634
    },
    {
        "content": "<p>Now, all we need is a way to turn a filename into a topic</p>",
        "id": 203117729,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594135651
    },
    {
        "content": "<p>Probably <code>split_on '/'</code>, end then take the first thing after <code>src</code>, or after <code>library</code>.</p>",
        "id": 203117918,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594135706
    },
    {
        "content": "<p>And for nice links to <code>docs#foobar</code> we probably need to save more stuff, like the full name.</p>",
        "id": 203118060,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594135759
    },
    {
        "content": "<p>Or maybe <code>name</code> is already the full name... I don't know.</p>",
        "id": 203118097,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594135778
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/graphs.3A.20tc.20hierarchy/near/203117918\">said</a>:</p>\n<blockquote>\n<p>Probably <code>split_on '/'</code>, end then take the first thing after <code>src</code>, or after <code>library</code>.</p>\n</blockquote>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">file_to_topic</span> <span class=\"o\">:</span> <span class=\"n\">string</span> <span class=\"bp\">→</span> <span class=\"n\">string</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">xs</span><span class=\"o\">,</span> <span class=\"s2\">&quot;.&quot;</span><span class=\"bp\">.</span><span class=\"n\">intercalate</span> <span class=\"o\">((</span><span class=\"n\">xs</span><span class=\"bp\">.</span><span class=\"n\">split_on</span> <span class=\"err\">&#39;</span><span class=\"bp\">/</span><span class=\"err\">&#39;</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">drop_while</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"s2\">&quot;library&quot;</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"s2\">&quot;src&quot;</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">tail</span><span class=\"bp\">.</span><span class=\"n\">init</span>\n</code></pre></div>",
        "id": 203118644,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1594136001
    },
    {
        "content": "<p>Maps <code>\"/home/arch/arb/.elan/toolchains/leanprover-community-lean-3.17.0/lib/lean/library/init/algebra/classes.lean\"</code> to <code>init.algebra</code></p>",
        "id": 203118762,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1594136044
    },
    {
        "content": "<p>Cool!</p>",
        "id": 203118944,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594136129
    },
    {
        "content": "<p>We'll have to play a bit with the exact value of this function, I guess. But this is a good start.</p>",
        "id": 203119077,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594136171
    },
    {
        "content": "<p>This script should not be run by people that have a username <code>library</code> or <code>src</code> <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 203126375,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594139349
    },
    {
        "content": "<p>I'm reasonably happy with this version:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">group</span><span class=\"bp\">.</span><span class=\"n\">defs</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">tactic</span> <span class=\"n\">declaration</span> <span class=\"n\">environment</span> <span class=\"n\">native</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">pos_line</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"n\">pos</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">string</span> <span class=\"o\">:=</span>\n<span class=\"k\">match</span> <span class=\"n\">p</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">to_string</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">line</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span>      <span class=\"o\">:=</span> <span class=\"s2\">&quot;&quot;</span>\n<span class=\"kn\">end</span>\n\n<span class=\"n\">def</span> <span class=\"n\">prepare_filename₁</span> <span class=\"o\">:</span> <span class=\"n\">string</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">string</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">xs</span><span class=\"o\">,</span> <span class=\"o\">((</span><span class=\"n\">xs</span><span class=\"bp\">.</span><span class=\"n\">split_on</span> <span class=\"err\">&#39;</span><span class=\"bp\">/</span><span class=\"err\">&#39;</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">drop_while</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"s2\">&quot;library&quot;</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"s2\">&quot;src&quot;</span><span class=\"o\">))</span>\n\n<span class=\"n\">def</span> <span class=\"n\">prepare_filename₂</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">string</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">string</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"s2\">&quot;library&quot;</span> <span class=\"bp\">::</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"s2\">&quot;core&quot;</span> <span class=\"bp\">::</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"s2\">&quot;src&quot;</span> <span class=\"bp\">::</span> <span class=\"n\">l</span><span class=\"o\">)</span>     <span class=\"o\">:=</span> <span class=\"n\">l</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span>                <span class=\"o\">:=</span> <span class=\"o\">[]</span>\n\n<span class=\"n\">def</span> <span class=\"n\">filename</span> <span class=\"o\">:</span> <span class=\"n\">string</span> <span class=\"bp\">→</span> <span class=\"n\">string</span> <span class=\"o\">:=</span>\n<span class=\"s2\">&quot;/&quot;</span><span class=\"bp\">.</span><span class=\"n\">intercalate</span> <span class=\"err\">∘</span> <span class=\"n\">prepare_filename₂</span> <span class=\"err\">∘</span> <span class=\"n\">prepare_filename₁</span>\n\n<span class=\"n\">def</span> <span class=\"n\">topic</span> <span class=\"o\">:</span> <span class=\"n\">string</span> <span class=\"bp\">→</span> <span class=\"n\">string</span> <span class=\"o\">:=</span>\n<span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">head</span> <span class=\"err\">∘</span> <span class=\"n\">prepare_filename₂</span> <span class=\"err\">∘</span> <span class=\"n\">prepare_filename₁</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">item</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">file</span> <span class=\"o\">:</span> <span class=\"n\">string</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">line</span> <span class=\"o\">:</span> <span class=\"n\">string</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:</span> <span class=\"n\">string</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">topic</span> <span class=\"o\">:</span> <span class=\"n\">string</span><span class=\"o\">)</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">node</span> <span class=\"kn\">extends</span> <span class=\"n\">item</span><span class=\"bp\">.</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">node</span>\n\n<span class=\"n\">def</span> <span class=\"n\">jsonify</span> <span class=\"o\">:</span> <span class=\"n\">node</span> <span class=\"bp\">→</span> <span class=\"n\">string</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n<span class=\"s2\">&quot;{ name : &quot;</span> <span class=\"bp\">++</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">name</span> <span class=\"bp\">++</span> <span class=\"s2\">&quot;,</span><span class=\"se\">\\n</span><span class=\"s2\">&quot;</span> <span class=\"bp\">++</span>\n  <span class=\"s2\">&quot;topic : &quot;</span> <span class=\"bp\">++</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">topic</span> <span class=\"bp\">++</span> <span class=\"s2\">&quot;,</span><span class=\"se\">\\n</span><span class=\"s2\">&quot;</span> <span class=\"bp\">++</span>\n  <span class=\"s2\">&quot;file : &quot;</span> <span class=\"bp\">++</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">file</span> <span class=\"bp\">++</span> <span class=\"s2\">&quot;,</span><span class=\"se\">\\n</span><span class=\"s2\">&quot;</span> <span class=\"bp\">++</span>\n  <span class=\"s2\">&quot;line : &quot;</span> <span class=\"bp\">++</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">line</span> <span class=\"bp\">++</span> <span class=\"s2\">&quot; }</span><span class=\"se\">\\n</span><span class=\"s2\">&quot;</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_to_string</span> <span class=\"n\">node</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">jsonify</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">node</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">edge</span> <span class=\"kn\">extends</span> <span class=\"n\">item</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">source</span> <span class=\"o\">:</span> <span class=\"n\">string</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">target</span> <span class=\"o\">:</span> <span class=\"n\">string</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">edge</span>\n\n<span class=\"n\">def</span> <span class=\"n\">jsonify</span> <span class=\"o\">:</span> <span class=\"n\">edge</span> <span class=\"bp\">→</span> <span class=\"n\">string</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n<span class=\"s2\">&quot;{ name : &quot;</span> <span class=\"bp\">++</span> <span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">name</span> <span class=\"bp\">++</span> <span class=\"s2\">&quot;,</span><span class=\"se\">\\n</span><span class=\"s2\">&quot;</span> <span class=\"bp\">++</span>\n  <span class=\"s2\">&quot;topic : &quot;</span> <span class=\"bp\">++</span> <span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">topic</span> <span class=\"bp\">++</span> <span class=\"s2\">&quot;,</span><span class=\"se\">\\n</span><span class=\"s2\">&quot;</span> <span class=\"bp\">++</span>\n  <span class=\"s2\">&quot;source : &quot;</span> <span class=\"bp\">++</span> <span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">source</span> <span class=\"bp\">++</span> <span class=\"s2\">&quot;,</span><span class=\"se\">\\n</span><span class=\"s2\">&quot;</span> <span class=\"bp\">++</span>\n  <span class=\"s2\">&quot;target : &quot;</span> <span class=\"bp\">++</span> <span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">target</span> <span class=\"bp\">++</span> <span class=\"s2\">&quot;,</span><span class=\"se\">\\n</span><span class=\"s2\">&quot;</span> <span class=\"bp\">++</span>\n  <span class=\"s2\">&quot;file : &quot;</span> <span class=\"bp\">++</span> <span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">file</span> <span class=\"bp\">++</span> <span class=\"s2\">&quot;,</span><span class=\"se\">\\n</span><span class=\"s2\">&quot;</span> <span class=\"bp\">++</span>\n  <span class=\"s2\">&quot;line : &quot;</span> <span class=\"bp\">++</span> <span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">line</span> <span class=\"bp\">++</span> <span class=\"s2\">&quot; }</span><span class=\"se\">\\n</span><span class=\"s2\">&quot;</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_to_string</span> <span class=\"n\">edge</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">jsonify</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">edge</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> parses information about `decl` if it is an instance or a class. -/</span>\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">parse_decl</span> <span class=\"o\">(</span><span class=\"n\">env</span> <span class=\"o\">:</span> <span class=\"n\">environment</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">decl</span> <span class=\"o\">:</span> <span class=\"n\">declaration</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">tactic</span> <span class=\"o\">(</span><span class=\"n\">option</span> <span class=\"o\">(</span><span class=\"n\">node</span> <span class=\"err\">⊕</span> <span class=\"n\">edge</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"k\">let</span> <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">decl</span><span class=\"bp\">.</span><span class=\"n\">to_name</span> <span class=\"k\">in</span>\n<span class=\"n\">do</span>\n    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">env</span><span class=\"bp\">.</span><span class=\"n\">decl_olean</span> <span class=\"n\">name</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">is_some</span>\n    <span class=\"k\">then</span> <span class=\"n\">do</span>\n      <span class=\"n\">olean_file</span> <span class=\"err\">←</span> <span class=\"n\">env</span><span class=\"bp\">.</span><span class=\"n\">decl_olean</span> <span class=\"n\">name</span><span class=\"o\">,</span>\n      <span class=\"k\">let</span> <span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">item</span> <span class=\"o\">:=</span>\n      <span class=\"o\">{</span> <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">to_string</span> <span class=\"n\">name</span><span class=\"o\">,</span>\n        <span class=\"n\">file</span> <span class=\"o\">:=</span> <span class=\"n\">filename</span> <span class=\"n\">olean_file</span><span class=\"o\">,</span>\n        <span class=\"n\">line</span> <span class=\"o\">:=</span> <span class=\"n\">pos_line</span> <span class=\"o\">(</span><span class=\"n\">env</span><span class=\"bp\">.</span><span class=\"n\">decl_pos</span> <span class=\"n\">name</span><span class=\"o\">),</span>\n        <span class=\"n\">topic</span> <span class=\"o\">:=</span> <span class=\"n\">topic</span> <span class=\"n\">olean_file</span> <span class=\"o\">},</span>\n      <span class=\"n\">is_c</span> <span class=\"err\">←</span> <span class=\"n\">succeeds</span> <span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">has_attribute</span> <span class=\"bp\">`</span><span class=\"n\">class</span> <span class=\"n\">name</span><span class=\"o\">),</span>\n      <span class=\"k\">if</span> <span class=\"n\">is_c</span> <span class=\"k\">then</span>\n        <span class=\"k\">let</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">node</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"bp\">..</span> <span class=\"n\">I</span> <span class=\"o\">}</span> <span class=\"k\">in</span>\n        <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">sum</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">N</span><span class=\"o\">))</span>\n      <span class=\"k\">else</span> <span class=\"n\">do</span>\n      <span class=\"n\">is_i</span> <span class=\"err\">←</span> <span class=\"n\">succeeds</span> <span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">has_attribute</span> <span class=\"bp\">`</span><span class=\"kn\">instance</span> <span class=\"n\">name</span><span class=\"o\">),</span>\n      <span class=\"k\">if</span> <span class=\"n\">is_i</span> <span class=\"k\">then</span> <span class=\"n\">do</span>\n        <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">tgt</span><span class=\"o\">)</span> <span class=\"err\">←</span> <span class=\"n\">return</span> <span class=\"n\">decl</span><span class=\"bp\">.</span><span class=\"n\">type</span><span class=\"bp\">.</span><span class=\"n\">pi_binders</span><span class=\"o\">,</span>\n        <span class=\"c1\">-- guard (l.tail.all $ λ b, b.info = binder_info.inst_implicit),</span>\n        <span class=\"c1\">-- guard (tgt.get_app_args.head.is_var &amp;&amp; l.ilast.type.get_app_args.head.is_var),</span>\n        <span class=\"k\">let</span> <span class=\"n\">src</span> <span class=\"o\">:=</span> <span class=\"n\">to_string</span> <span class=\"n\">l</span><span class=\"bp\">.</span><span class=\"n\">ilast</span><span class=\"bp\">.</span><span class=\"n\">type</span><span class=\"bp\">.</span><span class=\"n\">erase_annotations</span><span class=\"bp\">.</span><span class=\"n\">get_app_fn</span><span class=\"bp\">.</span><span class=\"n\">const_name</span><span class=\"o\">,</span>\n        <span class=\"k\">let</span> <span class=\"n\">tgt</span> <span class=\"o\">:=</span> <span class=\"n\">to_string</span> <span class=\"n\">tgt</span><span class=\"bp\">.</span><span class=\"n\">erase_annotations</span><span class=\"bp\">.</span><span class=\"n\">get_app_fn</span><span class=\"bp\">.</span><span class=\"n\">const_name</span><span class=\"o\">,</span>\n        <span class=\"c1\">-- guard (src ≠ tgt),</span>\n        <span class=\"k\">let</span> <span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"n\">edge</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">source</span> <span class=\"o\">:=</span> <span class=\"n\">src</span><span class=\"o\">,</span> <span class=\"n\">target</span> <span class=\"o\">:=</span> <span class=\"n\">tgt</span><span class=\"o\">,</span> <span class=\"bp\">..</span> <span class=\"n\">I</span> <span class=\"o\">},</span>\n        <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">sum</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">E</span><span class=\"o\">))</span>\n      <span class=\"k\">else</span> <span class=\"n\">do</span> <span class=\"n\">return</span> <span class=\"n\">none</span>\n    <span class=\"k\">else</span> <span class=\"n\">do</span> <span class=\"n\">return</span> <span class=\"n\">none</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"n\">def</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">remove_none</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">option</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span>            <span class=\"o\">:=</span> <span class=\"o\">[]</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">none</span> <span class=\"bp\">::</span> <span class=\"n\">l</span><span class=\"o\">)</span>   <span class=\"o\">:=</span> <span class=\"n\">l</span><span class=\"bp\">.</span><span class=\"n\">remove_none</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">a</span> <span class=\"bp\">::</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"bp\">::</span> <span class=\"n\">l</span><span class=\"bp\">.</span><span class=\"n\">remove_none</span>\n\n<span class=\"n\">def</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">split_sum</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"err\">⊕</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span>  <span class=\"o\">:=</span> <span class=\"o\">([],</span> <span class=\"o\">[])</span>\n<span class=\"bp\">|</span> <span class=\"o\">((</span><span class=\"n\">sum</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">::</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">let</span> <span class=\"n\">L</span> <span class=\"o\">:=</span> <span class=\"n\">l</span><span class=\"bp\">.</span><span class=\"n\">split_sum</span> <span class=\"k\">in</span> <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"bp\">::</span> <span class=\"n\">L</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">L</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">((</span><span class=\"n\">sum</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">::</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">let</span> <span class=\"n\">L</span> <span class=\"o\">:=</span> <span class=\"n\">l</span><span class=\"bp\">.</span><span class=\"n\">split_sum</span> <span class=\"k\">in</span> <span class=\"o\">(</span><span class=\"n\">L</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">::</span> <span class=\"n\">L</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">))</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">- prints information about unary classes and forgetful instances in the environment.</span>\n<span class=\"cm\">  It only prints instances and classes that have at most 1 argument</span>\n<span class=\"cm\">  that is not a type-class argument (within square brackets),</span>\n<span class=\"cm\">  and the instances can only be forgetful instances</span>\n<span class=\"cm\">  (where the conclusion is a class applied to a variable) -/</span>\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">print_content</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"n\">curr_env</span> <span class=\"err\">←</span> <span class=\"n\">get_env</span><span class=\"o\">,</span>\n   <span class=\"n\">o</span> <span class=\"err\">←</span> <span class=\"o\">(</span><span class=\"n\">curr_env</span><span class=\"bp\">.</span><span class=\"n\">fold</span> <span class=\"o\">[]</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">cons</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mmap</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">parse_decl</span> <span class=\"n\">curr_env</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">pure</span> <span class=\"n\">none</span><span class=\"o\">),</span>\n   <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">ns</span><span class=\"o\">,</span> <span class=\"n\">es</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">o</span><span class=\"bp\">.</span><span class=\"n\">remove_none</span><span class=\"bp\">.</span><span class=\"n\">split_sum</span><span class=\"o\">,</span>\n   <span class=\"n\">trace</span> <span class=\"s2\">&quot;{ nodes : </span><span class=\"se\">\\n</span><span class=\"s2\">&quot;</span><span class=\"o\">,</span>\n   <span class=\"n\">trace</span> <span class=\"o\">(</span><span class=\"n\">to_string</span> <span class=\"n\">ns</span><span class=\"o\">),</span>\n   <span class=\"n\">trace</span> <span class=\"s2\">&quot;,</span><span class=\"se\">\\n</span><span class=\"s2\">  edges :</span><span class=\"se\">\\n</span><span class=\"s2\">&quot;</span><span class=\"o\">,</span>\n   <span class=\"n\">trace</span> <span class=\"o\">(</span><span class=\"n\">to_string</span> <span class=\"n\">es</span><span class=\"o\">),</span>\n   <span class=\"n\">trace</span> <span class=\"s2\">&quot;}&quot;</span><span class=\"o\">,</span>\n   <span class=\"n\">skip</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">test</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"n\">curr_env</span> <span class=\"err\">←</span> <span class=\"n\">get_env</span><span class=\"o\">,</span>\n   <span class=\"n\">d</span> <span class=\"err\">←</span> <span class=\"n\">get_decl</span> <span class=\"bp\">`</span><span class=\"n\">comm_monoid</span><span class=\"bp\">.</span><span class=\"n\">to_comm_semigroup</span><span class=\"o\">,</span>\n   <span class=\"n\">trace</span> <span class=\"o\">(</span><span class=\"n\">to_string</span> <span class=\"n\">d</span><span class=\"bp\">.</span><span class=\"n\">to_name</span><span class=\"o\">),</span>\n   <span class=\"n\">o</span> <span class=\"err\">←</span> <span class=\"n\">parse_decl</span> <span class=\"n\">curr_env</span> <span class=\"n\">d</span><span class=\"o\">,</span>\n   <span class=\"n\">trace</span> <span class=\"o\">(</span><span class=\"n\">to_string</span> <span class=\"n\">o</span><span class=\"o\">),</span>\n   <span class=\"n\">skip</span>\n\n<span class=\"c1\">-- run_cmd test</span>\n\n<span class=\"n\">run_cmd</span> <span class=\"n\">print_content</span>\n</code></pre></div>",
        "id": 203128173,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594140139
    },
    {
        "content": "<p>See <a href=\"https://gist.github.com/jcommelin/da4a87f4d7d87b6e11e3308b5ba97771\">https://gist.github.com/jcommelin/da4a87f4d7d87b6e11e3308b5ba97771</a> for the output</p>",
        "id": 203128449,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594140276
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span> Is this the type of json file that you could turn into a nice D3 graph?</p>",
        "id": 203128479,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594140297
    },
    {
        "content": "<p>Almost! Just add double quotes around the key names and any string values.</p>",
        "id": 203128564,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1594140347
    },
    {
        "content": "<p>Ok, cool! Let me try that.</p>",
        "id": 203128662,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594140393
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span> Voila: <a href=\"https://gist.github.com/cffe869fe6ba0f154b15d45a2e4a08f2\">https://gist.github.com/cffe869fe6ba0f154b15d45a2e4a08f2</a></p>",
        "id": 203129253,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594140710
    },
    {
        "content": "<p><code>SyntaxError: JSON.parse: unexpected character at line 580 column 11 of the JSON data</code>. Something is still wrong, let me check...</p>",
        "id": 203129525,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1594140857
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/3307\">#3307</a> contains the script that I'm using.</p>",
        "id": 203129617,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594140906
    },
    {
        "content": "<p>Ah, line 580 looks like this: <code>\"line\" :  }</code>. Maybe if there's no <code>line</code> data you'll want to put <code>null</code> there? Or just skip the <code>line</code> field entirely?</p>",
        "id": 203129693,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1594140957
    },
    {
        "content": "<p>Aah, there is an empty <code>\"line\"</code></p>",
        "id": 203129738,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594140964
    },
    {
        "content": "<p>Hmm, whatever you think is best.</p>",
        "id": 203129756,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594140977
    },
    {
        "content": "<p>I haven't been following, what would an empty line mean?</p>",
        "id": 203129837,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1594141015
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">pos_line</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"n\">pos</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">string</span> <span class=\"o\">:=</span>\n<span class=\"k\">match</span> <span class=\"n\">p</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">to_string</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">line</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span>      <span class=\"o\">:=</span> <span class=\"s2\">&quot;&quot;</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 203129891,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594141046
    },
    {
        "content": "<p>We can turn the <code>\"\"</code> into <code>\"null\"</code>.</p>",
        "id": 203129907,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594141057
    },
    {
        "content": "<p>Yeah, that would work.</p>",
        "id": 203129920,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1594141063
    },
    {
        "content": "<p>I have no idea what it means that <code>p</code> is <code>none</code>...</p>",
        "id": 203129987,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594141083
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span> <a href=\"https://gist.github.com/6d9da8c35a91cacb4a70d5c390c1d17f\">https://gist.github.com/6d9da8c35a91cacb4a70d5c390c1d17f</a></p>",
        "id": 203130040,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594141113
    },
    {
        "content": "<p>Ooh, that's the script</p>",
        "id": 203130137,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594141173
    },
    {
        "content": "<p><a href=\"https://gist.github.com/6e16f71a163a1dd42a1f9b3ec23f6a9b\">https://gist.github.com/6e16f71a163a1dd42a1f9b3ec23f6a9b</a></p>",
        "id": 203130178,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594141195
    },
    {
        "content": "<p>That's updated output</p>",
        "id": 203130185,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594141199
    },
    {
        "content": "<p>OK, it parsed! I'll see what I can do later (possibly the weekend). I might prioritize looking at the Live Share stuff first though.</p>",
        "id": 203130353,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1594141267
    },
    {
        "content": "<p>Ooh, Live Share would be awesome!</p>",
        "id": 203130387,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594141287
    },
    {
        "content": "<p>(I still didn't get it to work on my setup, though. Stupid MS sign-in page.)</p>",
        "id": 203130426,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594141314
    },
    {
        "content": "<p>I imagine something like <a href=\"https://observablehq.com/@peatroot/interacting-with-directed-acyclic-graphs\">https://observablehq.com/@peatroot/interacting-with-directed-acyclic-graphs</a>, where we can hide nodes and edges depending on which topics are selected as \"visible\".<br>\n(I got that link from Bryan, in another thread.)</p>",
        "id": 203131778,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594141953
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/graphs.3A.20tc.20hierarchy/near/203116838\">said</a>:</p>\n<blockquote>\n<p>I don't know... it was there in Floris's version</p>\n</blockquote>\n<p>The goal of my script was to only print unary type classes and forgetful instances between them.</p>\n<p>These guards were there to filter out instances that did not fall into this category. <br>\nThe way my script was setup was that failing means the declaration was skipped.</p>",
        "id": 203148415,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1594149930
    },
    {
        "content": "<p>Is a class like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_idempotent/src\">src#is_idempotent</a> a class you want to print in your graph?</p>",
        "id": 203148957,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1594150183
    },
    {
        "content": "<p>Or an instance like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.has_mod/src\">src#nat.has_mod</a>?</p>",
        "id": 203149087,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1594150227
    },
    {
        "content": "<p>I think I don't really care about those</p>",
        "id": 203150043,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594150701
    },
    {
        "content": "<p>I would prefer to get a graph containing things like <code>group</code>, <code>field</code>, <code>topological_space</code>, <code>normed_space</code>, <code>metric_space</code>, <code>topological_monoid</code>, etc...</p>",
        "id": 203150094,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594150744
    },
    {
        "content": "<p>But exactly how to characterise those... I dunno</p>",
        "id": 203150126,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594150764
    },
    {
        "content": "<p>That's what my script did, and what those <code>guard</code> expressions did. <br>\nI'll modify your script to filter them out.</p>",
        "id": 203151348,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1594151387
    },
    {
        "content": "<p>To filter what out?</p>",
        "id": 203194353,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594151401
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> I think I want basically what your script did. And it seemed that it's what I have now... after Anne debugged it for me.</p>",
        "id": 203194432,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594151431
    },
    {
        "content": "<p>But your script also outputs a bunch of \"junk\", like the class and instance I mentioned above.</p>",
        "id": 203194492,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1594151471
    },
    {
        "content": "<p>Aha... no idea why it does that</p>",
        "id": 203194519,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594151491
    },
    {
        "content": "<p>because you removed those <code>guard</code> expressions.</p>",
        "id": 203194547,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1594151507
    },
    {
        "content": "<p>Ooh, lol... I forgot to uncomment the guards</p>",
        "id": 203194550,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594151508
    },
    {
        "content": "<p>This is how it starts after uncommenting them</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"o\">{</span> <span class=\"s2\">&quot;nodes&quot;</span> <span class=\"o\">:</span>\n\n<span class=\"o\">[{</span> <span class=\"s2\">&quot;name&quot;</span> <span class=\"o\">:</span> <span class=\"s2\">&quot;partial_order&quot;</span><span class=\"o\">,</span>\n<span class=\"s2\">&quot;topic&quot;</span> <span class=\"o\">:</span> <span class=\"s2\">&quot;core&quot;</span><span class=\"o\">,</span>\n<span class=\"s2\">&quot;file&quot;</span> <span class=\"o\">:</span> <span class=\"s2\">&quot;core/init/algebra/order.lean&quot;</span><span class=\"o\">,</span>\n<span class=\"s2\">&quot;line&quot;</span> <span class=\"o\">:</span> <span class=\"mi\">26</span> <span class=\"o\">}</span>\n<span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"s2\">&quot;name&quot;</span> <span class=\"o\">:</span> <span class=\"s2\">&quot;has_coe_t_aux&quot;</span><span class=\"o\">,</span>\n<span class=\"s2\">&quot;topic&quot;</span> <span class=\"o\">:</span> <span class=\"s2\">&quot;core&quot;</span><span class=\"o\">,</span>\n<span class=\"s2\">&quot;file&quot;</span> <span class=\"o\">:</span> <span class=\"s2\">&quot;core/init/coe.lean&quot;</span><span class=\"o\">,</span>\n<span class=\"s2\">&quot;line&quot;</span> <span class=\"o\">:</span> <span class=\"mi\">123</span> <span class=\"o\">}</span>\n<span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"s2\">&quot;name&quot;</span> <span class=\"o\">:</span> <span class=\"s2\">&quot;is_cond_left_inv&quot;</span><span class=\"o\">,</span>\n<span class=\"s2\">&quot;topic&quot;</span> <span class=\"o\">:</span> <span class=\"s2\">&quot;core&quot;</span><span class=\"o\">,</span>\n<span class=\"s2\">&quot;file&quot;</span> <span class=\"o\">:</span> <span class=\"s2\">&quot;core/init/algebra/classes.lean&quot;</span><span class=\"o\">,</span>\n<span class=\"s2\">&quot;line&quot;</span> <span class=\"o\">:</span> <span class=\"mi\">55</span> <span class=\"o\">}</span>\n<span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"s2\">&quot;name&quot;</span> <span class=\"o\">:</span> <span class=\"s2\">&quot;is_total&quot;</span><span class=\"o\">,</span>\n<span class=\"s2\">&quot;topic&quot;</span> <span class=\"o\">:</span> <span class=\"s2\">&quot;core&quot;</span><span class=\"o\">,</span>\n<span class=\"s2\">&quot;file&quot;</span> <span class=\"o\">:</span> <span class=\"s2\">&quot;core/init/algebra/classes.lean&quot;</span><span class=\"o\">,</span>\n<span class=\"s2\">&quot;line&quot;</span> <span class=\"o\">:</span> <span class=\"mi\">95</span> <span class=\"o\">}</span>\n<span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"s2\">&quot;name&quot;</span> <span class=\"o\">:</span> <span class=\"s2\">&quot;has_ssubset&quot;</span><span class=\"o\">,</span>\n<span class=\"s2\">&quot;topic&quot;</span> <span class=\"o\">:</span> <span class=\"s2\">&quot;core&quot;</span><span class=\"o\">,</span>\n<span class=\"s2\">&quot;file&quot;</span> <span class=\"o\">:</span> <span class=\"s2\">&quot;core/init/core.lean&quot;</span><span class=\"o\">,</span>\n<span class=\"s2\">&quot;line&quot;</span> <span class=\"o\">:</span> <span class=\"mi\">340</span> <span class=\"o\">}</span>\n<span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"s2\">&quot;name&quot;</span> <span class=\"o\">:</span> <span class=\"s2\">&quot;has_andthen&quot;</span><span class=\"o\">,</span>\n<span class=\"s2\">&quot;topic&quot;</span> <span class=\"o\">:</span> <span class=\"s2\">&quot;core&quot;</span><span class=\"o\">,</span>\n<span class=\"s2\">&quot;file&quot;</span> <span class=\"o\">:</span> <span class=\"s2\">&quot;core/init/core.lean&quot;</span><span class=\"o\">,</span>\n<span class=\"s2\">&quot;line&quot;</span> <span class=\"o\">:</span> <span class=\"mi\">334</span> <span class=\"o\">}</span>\n<span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"s2\">&quot;name&quot;</span> <span class=\"o\">:</span> <span class=\"s2\">&quot;is_cond_right_inv&quot;</span><span class=\"o\">,</span>\n<span class=\"s2\">&quot;topic&quot;</span> <span class=\"o\">:</span> <span class=\"s2\">&quot;core&quot;</span><span class=\"o\">,</span>\n<span class=\"s2\">&quot;file&quot;</span> <span class=\"o\">:</span> <span class=\"s2\">&quot;core/init/algebra/classes.lean&quot;</span><span class=\"o\">,</span>\n<span class=\"s2\">&quot;line&quot;</span> <span class=\"o\">:</span> <span class=\"mi\">58</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 203194651,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594151549
    },
    {
        "content": "<p>Is there a reasonable way to filter out <code>has_coe_t_aux</code>? Or does is quack too much like a group or a topological monoid?</p>",
        "id": 203194713,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594151580
    },
    {
        "content": "<p>It shouldn't be there, since it has two arguments. I think my original script filtered those out.</p>",
        "id": 203194770,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1594151627
    },
    {
        "content": "<p>Things like <code>has_mul</code> and the like will of course be printed.</p>",
        "id": 203194823,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1594151644
    },
    {
        "content": "<p>Just checked, my original script doesn't print <code>has_coe_t_aux</code>.</p>",
        "id": 203194955,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1594151722
    },
    {
        "content": "<p>Ok... I clearly blundered.</p>",
        "id": 203195079,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594151782
    },
    {
        "content": "<p>The line</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">guard</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"bp\">.</span><span class=\"n\">tail</span><span class=\"bp\">.</span><span class=\"n\">all</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"bp\">.</span><span class=\"n\">info</span> <span class=\"bp\">=</span> <span class=\"n\">binder_info</span><span class=\"bp\">.</span><span class=\"n\">inst_implicit</span><span class=\"o\">),</span>\n</code></pre></div>\n\n\n<p>was there for both instances and classes, you removed it for classes. You can probably put it back, and it should filter those out.</p>",
        "id": 203195123,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1594151810
    },
    {
        "content": "<p>thanks!</p>",
        "id": 203195323,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594151916
    },
    {
        "content": "<p>I pushed to the PR</p>",
        "id": 203195443,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594151990
    },
    {
        "content": "<p>Output now starts with</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"o\">{</span> <span class=\"s2\">&quot;nodes&quot;</span> <span class=\"o\">:</span>\n\n<span class=\"o\">[{</span> <span class=\"s2\">&quot;name&quot;</span> <span class=\"o\">:</span> <span class=\"s2\">&quot;partial_order&quot;</span><span class=\"o\">,</span>\n<span class=\"s2\">&quot;topic&quot;</span> <span class=\"o\">:</span> <span class=\"s2\">&quot;core&quot;</span><span class=\"o\">,</span>\n<span class=\"s2\">&quot;file&quot;</span> <span class=\"o\">:</span> <span class=\"s2\">&quot;core/init/algebra/order.lean&quot;</span><span class=\"o\">,</span>\n<span class=\"s2\">&quot;line&quot;</span> <span class=\"o\">:</span> <span class=\"mi\">26</span> <span class=\"o\">}</span>\n<span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"s2\">&quot;name&quot;</span> <span class=\"o\">:</span> <span class=\"s2\">&quot;has_ssubset&quot;</span><span class=\"o\">,</span>\n<span class=\"s2\">&quot;topic&quot;</span> <span class=\"o\">:</span> <span class=\"s2\">&quot;core&quot;</span><span class=\"o\">,</span>\n<span class=\"s2\">&quot;file&quot;</span> <span class=\"o\">:</span> <span class=\"s2\">&quot;core/init/core.lean&quot;</span><span class=\"o\">,</span>\n<span class=\"s2\">&quot;line&quot;</span> <span class=\"o\">:</span> <span class=\"mi\">340</span> <span class=\"o\">}</span>\n<span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"s2\">&quot;name&quot;</span> <span class=\"o\">:</span> <span class=\"s2\">&quot;add_comm_group&quot;</span><span class=\"o\">,</span>\n<span class=\"s2\">&quot;topic&quot;</span> <span class=\"o\">:</span> <span class=\"s2\">&quot;algebra&quot;</span><span class=\"o\">,</span>\n<span class=\"s2\">&quot;file&quot;</span> <span class=\"o\">:</span> <span class=\"s2\">&quot;algebra/group/defs.lean&quot;</span><span class=\"o\">,</span>\n<span class=\"s2\">&quot;line&quot;</span> <span class=\"o\">:</span> <span class=\"mi\">301</span> <span class=\"o\">}</span>\n<span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"s2\">&quot;name&quot;</span> <span class=\"o\">:</span> <span class=\"s2\">&quot;add_left_cancel_semigroup&quot;</span><span class=\"o\">,</span>\n<span class=\"s2\">&quot;topic&quot;</span> <span class=\"o\">:</span> <span class=\"s2\">&quot;algebra&quot;</span><span class=\"o\">,</span>\n<span class=\"s2\">&quot;file&quot;</span> <span class=\"o\">:</span> <span class=\"s2\">&quot;algebra/group/defs.lean&quot;</span><span class=\"o\">,</span>\n<span class=\"s2\">&quot;line&quot;</span> <span class=\"o\">:</span> <span class=\"mi\">106</span> <span class=\"o\">}</span>\n<span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"s2\">&quot;name&quot;</span> <span class=\"o\">:</span> <span class=\"s2\">&quot;comm_group&quot;</span><span class=\"o\">,</span>\n<span class=\"s2\">&quot;topic&quot;</span> <span class=\"o\">:</span> <span class=\"s2\">&quot;algebra&quot;</span><span class=\"o\">,</span>\n<span class=\"s2\">&quot;file&quot;</span> <span class=\"o\">:</span> <span class=\"s2\">&quot;algebra/group/defs.lean&quot;</span><span class=\"o\">,</span>\n<span class=\"s2\">&quot;line&quot;</span> <span class=\"o\">:</span> <span class=\"mi\">298</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 203195535,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594152014
    },
    {
        "content": "<p>That looks quite promising.</p>",
        "id": 203195561,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594152028
    },
    {
        "content": "<p>If you add <code>guard l.head.type.is_sort</code> (for both instances and classes), that should filter out things like <code>monad</code>.</p>",
        "id": 203196519,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1594152512
    },
    {
        "content": "<p>Aha... I'm not sure if we want that... would it kill too much?</p>",
        "id": 203196895,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594152703
    },
    {
        "content": "<p>I don't think so, what class on <code>Type* -&gt; Type*</code> do you want to include in your graph?</p>",
        "id": 203201115,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1594155048
    },
    {
        "content": "<p>Well, maybe we want to allow all the <code>monad</code> and <code>functor</code> etc..., because if you can easily switch them off using the <code>topic</code> field, why not support them?</p>",
        "id": 203231128,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594183711
    }
]