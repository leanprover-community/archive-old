[
    {
        "content": "<p>Is it ok if I move this to <code>deprecated</code>?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\">-</span>\n<span class=\"cm\">If `0` is the least element in `α`, then `with_zero α` is an `ordered_add_comm_monoid`.</span>\n<span class=\"cm\">-/</span>\n<span class=\"n\">def</span> <span class=\"n\">ordered_add_comm_monoid</span> <span class=\"o\">[</span><span class=\"n\">ordered_add_comm_monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">zero_le</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ordered_add_comm_monoid</span> <span class=\"o\">(</span><span class=\"n\">with_zero</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">suffices</span><span class=\"o\">,</span> <span class=\"n\">refine</span> <span class=\"o\">{</span>\n    <span class=\"n\">add_le_add_left</span> <span class=\"o\">:=</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"bp\">..</span><span class=\"n\">with_zero</span><span class=\"bp\">.</span><span class=\"n\">partial_order</span><span class=\"o\">,</span>\n    <span class=\"bp\">..</span><span class=\"n\">with_zero</span><span class=\"bp\">.</span><span class=\"n\">add_comm_monoid</span><span class=\"o\">,</span> <span class=\"bp\">..</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h&#39;</span> <span class=\"o\">:=</span> <span class=\"n\">lt_iff_le_not_le</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">lt_iff_le_not_le</span> <span class=\"n\">at</span> <span class=\"err\">⊢</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"bp\">⟨λ</span> <span class=\"n\">b</span> <span class=\"n\">h₂</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">h₂</span><span class=\"o\">,</span> <span class=\"n\">h&#39;</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"err\">$</span> <span class=\"n\">this</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">h₂</span> <span class=\"bp\">_⟩</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">h₂</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">c</span> <span class=\"k\">with</span> <span class=\"n\">c</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">h&#39;</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"n\">this</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">bot_le</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span><span class=\"o\">,</span>\n      <span class=\"n\">cases</span> <span class=\"n\">a</span> <span class=\"k\">with</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">with_bot</span><span class=\"bp\">.</span><span class=\"n\">some_le_some</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">h&#39;</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">le_of_lt</span> <span class=\"o\">(</span><span class=\"n\">lt_of_add_lt_add_left&#39;</span> <span class=\"err\">$</span>\n          <span class=\"n\">with_bot</span><span class=\"bp\">.</span><span class=\"n\">some_lt_some</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">h</span><span class=\"o\">),</span> <span class=\"o\">}</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">h</span> <span class=\"n\">c</span> <span class=\"n\">ca</span> <span class=\"n\">h₂</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">b</span> <span class=\"k\">with</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">le_antisymm</span> <span class=\"n\">h</span> <span class=\"n\">bot_le</span> <span class=\"n\">at</span> <span class=\"n\">h₂</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"n\">h₂</span><span class=\"o\">,</span> <span class=\"n\">le_refl</span> <span class=\"bp\">_⟩</span> <span class=\"o\">},</span>\n    <span class=\"n\">cases</span> <span class=\"n\">a</span> <span class=\"k\">with</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">change</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">ca</span> <span class=\"n\">at</span> <span class=\"n\">h₂</span><span class=\"o\">,</span>\n      <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h₂</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h₂</span><span class=\"o\">],</span>\n      <span class=\"n\">exact</span> <span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simpa</span> <span class=\"kn\">using</span> <span class=\"n\">add_le_add_left&#39;</span> <span class=\"o\">(</span><span class=\"n\">zero_le</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">⟩</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n      <span class=\"n\">cases</span> <span class=\"n\">c</span> <span class=\"k\">with</span> <span class=\"n\">c</span><span class=\"bp\">;</span> <span class=\"n\">change</span> <span class=\"n\">some</span> <span class=\"bp\">_</span> <span class=\"bp\">=</span> <span class=\"bp\">_</span> <span class=\"n\">at</span> <span class=\"n\">h₂</span><span class=\"bp\">;</span>\n        <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"n\">add_comm</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h₂</span><span class=\"bp\">;</span> <span class=\"n\">subst</span> <span class=\"n\">ca</span><span class=\"bp\">;</span> <span class=\"n\">refine</span> <span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">add_le_add_left&#39;</span> <span class=\"n\">h</span> <span class=\"o\">}</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 198863405,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590568334
    },
    {
        "content": "<p>I'm pretty sure it's not used in mathlib, and I get the shivers by simply looking at the type of this def...</p>",
        "id": 198863471,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590568386
    },
    {
        "content": "<p>This looks perfectly reasonable to me.  What is wrong with it?</p>",
        "id": 198864309,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1590568936
    },
    {
        "content": "<p>Well, your type has a zero, and then you add a new zero to it. That's something that shouldn't be encouraged, I think.</p>",
        "id": 198864449,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590569031
    },
    {
        "content": "<p>Oh, I missed that.  Then let's get rid of it!</p>",
        "id": 198864635,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1590569113
    },
    {
        "content": "<p>The point is to provide sufficient conditions on when <code>with_zero A</code> is an <code>ordered_add_comm_monoid</code></p>",
        "id": 198867166,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590570698
    },
    {
        "content": "<p>yes it's a weird theorem, but it's also a hole-filling theorem. I've said this before but we should have theorems about the pairwise interaction of all concepts in mathlib</p>",
        "id": 198867317,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590570783
    },
    {
        "content": "<p>Ok, I'll leave it there</p>",
        "id": 198867605,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590570980
    }
]