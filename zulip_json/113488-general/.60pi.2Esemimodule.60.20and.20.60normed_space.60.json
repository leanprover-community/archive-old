[
    {
        "content": "<p>Here is an <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.normed_space.basic</span>\n\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">normed_group</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"n\">ℝ</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">semimodule</span> <span class=\"n\">ℝ</span> <span class=\"o\">((</span><span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">apply_instance</span> <span class=\"c1\">-- fails</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">normed_group</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"n\">ℝ</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">semimodule</span> <span class=\"n\">ℝ</span> <span class=\"o\">((</span><span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"n\">semimodule</span> <span class=\"n\">ℝ</span> <span class=\"n\">E</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span><span class=\"o\">,</span> <span class=\"n\">apply_instance</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 223071294,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1610929087
    },
    {
        "content": "<p>I have no idea why the first example fails.</p>",
        "id": 223071306,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1610929130
    },
    {
        "content": "<p>And</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">normed_group</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"n\">ℝ</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"n\">zero_smul</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n</code></pre></div>\n<p>gives the following error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">7</span><span class=\"o\">:</span><span class=\"mi\">11</span><span class=\"o\">:</span> <span class=\"n\">synthesized</span> <span class=\"n\">type</span> <span class=\"kd\">class</span> <span class=\"kd\">instance</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">definitionally</span> <span class=\"n\">equal</span> <span class=\"n\">to</span> <span class=\"n\">expression</span> <span class=\"n\">inferred</span> <span class=\"kd\">by</span> <span class=\"n\">typing</span> <span class=\"n\">rules</span><span class=\"o\">,</span> <span class=\"n\">synthesized</span>\n  <span class=\"n\">pi.has_scalar</span>\n<span class=\"n\">inferred</span>\n  <span class=\"n\">mul_action.to_has_scalar</span>\n</code></pre></div>",
        "id": 223071388,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1610929258
    },
    {
        "content": "<p>Or with <code>set_option pp.all true</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">8</span><span class=\"o\">:</span><span class=\"mi\">11</span><span class=\"o\">:</span> <span class=\"n\">synthesized</span> <span class=\"n\">type</span> <span class=\"kd\">class</span> <span class=\"kd\">instance</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">definitionally</span> <span class=\"n\">equal</span> <span class=\"n\">to</span> <span class=\"n\">expression</span> <span class=\"n\">inferred</span> <span class=\"kd\">by</span> <span class=\"n\">typing</span> <span class=\"n\">rules</span><span class=\"o\">,</span> <span class=\"n\">synthesized</span>\n  <span class=\"bp\">@</span><span class=\"n\">pi.has_scalar.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">l_1</span> <span class=\"bp\">?</span><span class=\"n\">l_2</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">real</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">ᾰ</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">real</span><span class=\"o\">),</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"n\">real</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">real</span><span class=\"o\">),</span>\n       <span class=\"bp\">@</span><span class=\"n\">mul_action.to_has_scalar.</span><span class=\"o\">{</span><span class=\"mi\">0</span> <span class=\"bp\">?</span><span class=\"n\">l_2</span><span class=\"o\">}</span> <span class=\"n\">real</span> <span class=\"n\">E</span>\n         <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">monoid_with_zero.to_monoid.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">real</span>\n            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">semiring.to_monoid_with_zero.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">real</span>\n               <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring.to_semiring.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">real</span>\n                  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">normed_ring.to_ring.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">real</span>\n                     <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">normed_comm_ring.to_normed_ring.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">real</span>\n                        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">normed_field.to_normed_comm_ring.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">real</span> <span class=\"n\">real.normed_field</span><span class=\"o\">))))))</span>\n         <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">distrib_mul_action.to_mul_action.</span><span class=\"o\">{</span><span class=\"mi\">0</span> <span class=\"bp\">?</span><span class=\"n\">l_2</span><span class=\"o\">}</span> <span class=\"n\">real</span> <span class=\"n\">E</span>\n            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">monoid_with_zero.to_monoid.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">real</span>\n               <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">semiring.to_monoid_with_zero.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">real</span>\n                  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring.to_semiring.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">real</span>\n                     <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">normed_ring.to_ring.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">real</span>\n                        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">normed_comm_ring.to_normed_ring.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">real</span>\n                           <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">normed_field.to_normed_comm_ring.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">real</span> <span class=\"n\">real.normed_field</span><span class=\"o\">))))))</span>\n            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_monoid.to_add_monoid.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">l_2</span><span class=\"o\">}</span> <span class=\"n\">E</span>\n               <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_group.to_add_comm_monoid.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">l_2</span><span class=\"o\">}</span> <span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">normed_group.to_add_comm_group.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">l_2</span><span class=\"o\">}</span> <span class=\"n\">E</span> <span class=\"n\">_inst_1</span><span class=\"o\">)))</span>\n            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">semimodule.to_distrib_mul_action.</span><span class=\"o\">{</span><span class=\"mi\">0</span> <span class=\"bp\">?</span><span class=\"n\">l_2</span><span class=\"o\">}</span> <span class=\"n\">real</span> <span class=\"n\">E</span>\n               <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring.to_semiring.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">real</span>\n                  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">normed_ring.to_ring.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">real</span>\n                     <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">normed_comm_ring.to_normed_ring.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">real</span>\n                        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">normed_field.to_normed_comm_ring.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">real</span> <span class=\"n\">real.normed_field</span><span class=\"o\">))))</span>\n               <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_group.to_add_comm_monoid.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">l_2</span><span class=\"o\">}</span> <span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">normed_group.to_add_comm_group.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">l_2</span><span class=\"o\">}</span> <span class=\"n\">E</span> <span class=\"n\">_inst_1</span><span class=\"o\">))</span>\n               <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">normed_space.to_semimodule.</span><span class=\"o\">{</span><span class=\"mi\">0</span> <span class=\"bp\">?</span><span class=\"n\">l_2</span><span class=\"o\">}</span> <span class=\"n\">real</span> <span class=\"n\">E</span> <span class=\"n\">real.normed_field</span> <span class=\"n\">_inst_1</span> <span class=\"n\">_inst_2</span><span class=\"o\">))))</span>\n<span class=\"n\">inferred</span>\n  <span class=\"bp\">@</span><span class=\"n\">mul_action.to_has_scalar.</span><span class=\"o\">{</span><span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"bp\">?</span><span class=\"n\">l_1</span> <span class=\"bp\">?</span><span class=\"n\">l_2</span><span class=\"o\">)}</span> <span class=\"n\">real</span> <span class=\"o\">((</span><span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">real</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">E</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">monoid_with_zero.to_monoid.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">real</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">semiring.to_monoid_with_zero.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">real</span> <span class=\"n\">real.semiring</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">distrib_mul_action.to_mul_action.</span><span class=\"o\">{</span><span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"bp\">?</span><span class=\"n\">l_1</span> <span class=\"bp\">?</span><span class=\"n\">l_2</span><span class=\"o\">)}</span> <span class=\"n\">real</span> <span class=\"o\">((</span><span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">real</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">E</span><span class=\"o\">)</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">monoid_with_zero.to_monoid.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">real</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">semiring.to_monoid_with_zero.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">real</span> <span class=\"n\">real.semiring</span><span class=\"o\">))</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_monoid.to_add_monoid.</span><span class=\"o\">{(</span><span class=\"n\">max</span> <span class=\"bp\">?</span><span class=\"n\">l_1</span> <span class=\"bp\">?</span><span class=\"n\">l_2</span><span class=\"o\">)}</span> <span class=\"o\">((</span><span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">real</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">E</span><span class=\"o\">)</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">pi.add_comm_monoid.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">l_1</span> <span class=\"bp\">?</span><span class=\"n\">l_2</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">real</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">ᾰ</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">real</span><span class=\"o\">),</span> <span class=\"n\">E</span><span class=\"o\">)</span>\n             <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">real</span><span class=\"o\">),</span>\n                <span class=\"bp\">@</span><span class=\"n\">add_comm_group.to_add_comm_monoid.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">l_2</span><span class=\"o\">}</span> <span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">normed_group.to_add_comm_group.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">l_2</span><span class=\"o\">}</span> <span class=\"n\">E</span> <span class=\"n\">_inst_1</span><span class=\"o\">))))</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">semimodule.to_distrib_mul_action.</span><span class=\"o\">{</span><span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"bp\">?</span><span class=\"n\">l_1</span> <span class=\"bp\">?</span><span class=\"n\">l_2</span><span class=\"o\">)}</span> <span class=\"n\">real</span> <span class=\"o\">((</span><span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">real</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"n\">real.semiring</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">pi.add_comm_monoid.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">l_1</span> <span class=\"bp\">?</span><span class=\"n\">l_2</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">real</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">ᾰ</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">real</span><span class=\"o\">),</span> <span class=\"n\">E</span><span class=\"o\">)</span>\n             <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">real</span><span class=\"o\">),</span>\n                <span class=\"bp\">@</span><span class=\"n\">add_comm_group.to_add_comm_monoid.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">l_2</span><span class=\"o\">}</span> <span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">normed_group.to_add_comm_group.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">l_2</span><span class=\"o\">}</span> <span class=\"n\">E</span> <span class=\"n\">_inst_1</span><span class=\"o\">)))</span>\n          <span class=\"bp\">⁇</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 223071445,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1610929325
    },
    {
        "content": "<p>the second example looks related to the <code>smul</code>-issues that <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> has been solving lately.</p>",
        "id": 223081223,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1610946058
    },
    {
        "content": "<p>It is normal that</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">normed_group</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"n\">ℝ</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"n\">zero_smul</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n</code></pre></div>\n<p>fails when it can not infer the first instance: in the <code>pp.all</code> output you have posted, look at the <code>??</code> at the very end: it means that it has not identified the structure at hand, so of course it can not be defeq to the first one.</p>\n<p>As to why it does not infer the instance, the problem in the instance trace seems to be at</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_175</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">semimodule</span> <span class=\"n\">ℝ</span> <span class=\"n\">E</span> <span class=\"n\">real.semiring</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_group.to_add_comm_monoid</span> <span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">normed_group.to_add_comm_group</span> <span class=\"n\">E</span> <span class=\"n\">_inst_1</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">normed_space.to_semimodule</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">x_533</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">x_534</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">x_535</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">x_536</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">x_537</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n</code></pre></div>\n<p>This looks like a unification problem to me: Lean is confused by the <code>i</code>, and doesn't know what to choose to unify (Yes, Lean has often difficulties in this kind of situation).</p>",
        "id": 223089508,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1610956550
    }
]