[
    {
        "content": "<p>Idly proving that equivalence relations are the same as partitions (thinking about a future Lean maths challenge). Here's a goal:</p>\n<div class=\"codehilite\"><pre><span></span>1 goal\nX : Type,\nR : {R // equivalence R},\nc d : set X,\nhc : c ∈ {S : set X | ∃ (x : X), S = equivalence_class ↑R x},\nhd : d ∈ {S : set X | ∃ (x : X), S = equivalence_class ↑R x},\nx : X,\nhx : x ∈ c ∩ d\n⊢ c = d\n</pre></div>\n\n\n<p>I want to prove this by saying \"it suffices to prove c \\sub d and d \\sub c, but by symmetry we only need to prove c \\sub d\". I know I can factor out a lemma saying \"if all the things in the local context are true then c \\sub d\" and then I can just apply this lemma twice -- but I don't see any obstruction in theory to having a tactic where I say \"by <code>set.subset.antisymm</code> and the underlying symmetry, change the goal to <code>c \\sub d</code> please\" and maybe Lean replies \"just convince me that <code>x ∈ d ∩ c</code> and you're good to go\".</p>\n<p>Can this already be done with some <code>wlog</code> trickery? I couldn't see how.</p>",
        "id": 184383472,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1577554117
    },
    {
        "content": "<p>PS <code>def equivalence_class {X : Type} (R : X → X → Prop) (x : X) := {y : X | R x y}</code>, not that it matters here (all that matters is that the local context is symmetric in c and d)</p>",
        "id": 184383494,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1577554190
    },
    {
        "content": "<p>I came across the same question last week, and I don't think <code>wlog</code> helps here.</p>",
        "id": 184384154,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1577555372
    },
    {
        "content": "<p>If you post a realistic MWE I can try to cook up something.</p>",
        "id": 184384262,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1577555528
    },
    {
        "content": "<p>Is this realistic:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">equivalence_class</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">|</span> <span class=\"n\">R</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">}</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">HR</span> <span class=\"o\">:</span> <span class=\"n\">equivalence</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">),</span>\n  <span class=\"n\">c</span> <span class=\"err\">∈</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"n\">S</span> <span class=\"bp\">=</span> <span class=\"n\">equivalence_class</span> <span class=\"n\">R</span> <span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"bp\">→</span>\n  <span class=\"n\">d</span> <span class=\"err\">∈</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"n\">S</span> <span class=\"bp\">=</span> <span class=\"n\">equivalence_class</span> <span class=\"n\">R</span> <span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">c</span> <span class=\"err\">∩</span> <span class=\"n\">d</span> <span class=\"bp\">≠</span> <span class=\"err\">∅</span> <span class=\"bp\">→</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">d</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">hc</span> <span class=\"n\">hd</span> <span class=\"n\">hcd</span><span class=\"o\">,</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>?</p>",
        "id": 184384377,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1577555726
    },
    {
        "content": "<p><code>wlog not (c ⊂ d)</code>?</p>",
        "id": 184385567,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1577557518
    },
    {
        "content": "<p>I don't think that's syntactically correct (but I don't know much about <code>wlog</code>). <code>wlog not (c ⊂ d)</code> gives me complaints about unknown identifiers <code>c</code> and <code>d</code>.  <code>wlog h: not (c ⊂ d)</code> gives me</p>\n<div class=\"codehilite\"><pre><span></span>To generate cases at least two permutations are required, i.e. `using [x y, y x]` or exactly 0 or 2 variables\nstate:\nX : Type,\nR : X → X → Prop,\nHR : equivalence R,\nc d : set X,\nhc : c ∈ {S : set X | ∃ (x : X), S = equivalence_class R x},\nhd : d ∈ {S : set X | ∃ (x : X), S = equivalence_class R x},\nhcd : c ∩ d ≠ ∅\n⊢ c = d\n</pre></div>",
        "id": 184386168,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1577558445
    },
    {
        "content": "<p>Can you write a tactic script that you would like to see reduced to one tactic?</p>",
        "id": 184386179,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1577558483
    },
    {
        "content": "<p>Sorry, does <code>wlog h : (not (c ⊂ d))</code> work?</p>",
        "id": 184386574,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1577559158
    },
    {
        "content": "<p>I get the same error \"To generate cases at least two permutations...\" as above.</p>",
        "id": 184386718,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1577559412
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">def</span> <span class=\"n\">equivalence_class</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">|</span> <span class=\"n\">R</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">}</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">HR</span> <span class=\"o\">:</span> <span class=\"n\">equivalence</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">),</span>\n  <span class=\"n\">c</span> <span class=\"err\">∈</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"n\">S</span> <span class=\"bp\">=</span> <span class=\"n\">equivalence_class</span> <span class=\"n\">R</span> <span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"bp\">→</span>\n  <span class=\"n\">d</span> <span class=\"err\">∈</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"n\">S</span> <span class=\"bp\">=</span> <span class=\"n\">equivalence_class</span> <span class=\"n\">R</span> <span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">c</span> <span class=\"err\">∩</span> <span class=\"n\">d</span> <span class=\"bp\">≠</span> <span class=\"err\">∅</span> <span class=\"bp\">→</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">d</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">hc</span> <span class=\"n\">hd</span> <span class=\"n\">hcd</span><span class=\"o\">,</span>\n  <span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">  1 goal</span>\n<span class=\"cm\">X : Type,</span>\n<span class=\"cm\">R : X → X → Prop,</span>\n<span class=\"cm\">HR : equivalence R,</span>\n<span class=\"cm\">c d : set X,</span>\n<span class=\"cm\">hc : c ∈ {S : set X | ∃ (x : X), S = equivalence_class R x},</span>\n<span class=\"cm\">hd : d ∈ {S : set X | ∃ (x : X), S = equivalence_class R x},</span>\n<span class=\"cm\">hcd : c ∩ d ≠ ∅</span>\n<span class=\"cm\">⊢ c = d</span>\n<span class=\"cm\">-/</span>\n  <span class=\"n\">suffices</span> <span class=\"n\">htemp</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">HR</span> <span class=\"o\">:</span> <span class=\"n\">equivalence</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"err\">∈</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"n\">S</span> <span class=\"bp\">=</span> <span class=\"n\">equivalence_class</span> <span class=\"n\">R</span> <span class=\"n\">x</span><span class=\"o\">})</span>\n    <span class=\"o\">(</span><span class=\"n\">hd</span> <span class=\"o\">:</span> <span class=\"n\">d</span> <span class=\"err\">∈</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"n\">S</span> <span class=\"bp\">=</span> <span class=\"n\">equivalence_class</span> <span class=\"n\">R</span> <span class=\"n\">x</span><span class=\"o\">})</span>\n    <span class=\"o\">(</span><span class=\"n\">hcd</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"err\">∩</span> <span class=\"n\">d</span> <span class=\"bp\">≠</span> <span class=\"err\">∅</span><span class=\"o\">),</span> <span class=\"n\">c</span> <span class=\"err\">⊆</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"c1\">-- I want this to be my final goal</span>\n    <span class=\"n\">apply</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">subset</span><span class=\"bp\">.</span><span class=\"n\">antisymm</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">htemp</span> <span class=\"n\">X</span> <span class=\"n\">R</span> <span class=\"n\">HR</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">assumption</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">assumption</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">assumption</span><span class=\"o\">),</span>\n    <span class=\"n\">suffices</span> <span class=\"n\">htemp2</span> <span class=\"o\">:</span> <span class=\"n\">d</span> <span class=\"err\">∩</span> <span class=\"n\">c</span> <span class=\"bp\">≠</span> <span class=\"err\">∅</span><span class=\"o\">,</span> <span class=\"c1\">-- I want this to be the last but one goal</span>\n      <span class=\"n\">exact</span> <span class=\"n\">htemp</span> <span class=\"n\">X</span> <span class=\"n\">R</span> <span class=\"n\">HR</span> <span class=\"n\">d</span> <span class=\"n\">c</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">assumption</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">assumption</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">htemp2</span><span class=\"o\">),</span> <span class=\"c1\">-- `by assumption` fails for htemp2</span>\n    <span class=\"c\">/-</span><span class=\"cm\"> currently two goals.</span>\n<span class=\"cm\">     first is</span>\n<span class=\"cm\">     ⊢ d ∩ c ≠ ∅</span>\n<span class=\"cm\">     and we have a hypothesis</span>\n<span class=\"cm\">     hcd : c ∩ d ≠ ∅,</span>\n<span class=\"cm\">    -/</span>\n    <span class=\"n\">sorry</span><span class=\"o\">,</span>\n    <span class=\"c\">/-</span><span class=\"cm\"> other goal is overkill currently:</span>\n\n<span class=\"cm\">      X : Type,</span>\n<span class=\"cm\">      R : X → X → Prop,</span>\n<span class=\"cm\">      HR : equivalence R,</span>\n<span class=\"cm\">      c d : set X,</span>\n<span class=\"cm\">      hc : c ∈ {S : set X | ∃ (x : X), S = equivalence_class R x},</span>\n<span class=\"cm\">      hd : d ∈ {S : set X | ∃ (x : X), S = equivalence_class R x},</span>\n<span class=\"cm\">      hcd : c ∩ d ≠ ∅</span>\n<span class=\"cm\">      ⊢ ∀ (X : Type) (R : X → X → Prop),</span>\n<span class=\"cm\">        equivalence R →</span>\n<span class=\"cm\">        ∀ (c d : set X),</span>\n<span class=\"cm\">        c ∈ {S : set X | ∃ (x : X), S = equivalence_class R x} →</span>\n<span class=\"cm\">        d ∈ {S : set X | ∃ (x : X), S = equivalence_class R x} → c ∩ d ≠ ∅ → c ⊆ d</span>\n<span class=\"cm\">    -/</span>\n    <span class=\"n\">clear</span> <span class=\"n\">hcd</span> <span class=\"n\">hd</span> <span class=\"n\">hc</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">HR</span> <span class=\"n\">R</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span> <span class=\"n\">X</span> <span class=\"n\">R</span> <span class=\"n\">HR</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">hc</span> <span class=\"n\">hd</span> <span class=\"n\">hcd</span><span class=\"o\">,</span>\n    <span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">    X : Type,</span>\n<span class=\"cm\">    R : X → X → Prop,</span>\n<span class=\"cm\">    HR : equivalence R,</span>\n<span class=\"cm\">    c d : set X,</span>\n<span class=\"cm\">    hc : c ∈ {S : set X | ∃ (x : X), S = equivalence_class R x},</span>\n<span class=\"cm\">    hd : d ∈ {S : set X | ∃ (x : X), S = equivalence_class R x},</span>\n<span class=\"cm\">    hcd : c ∩ d ≠ ∅</span>\n<span class=\"cm\">    ⊢ c ⊆ d</span>\n<span class=\"cm\">    -/</span>\n    <span class=\"n\">sorry</span>\n  <span class=\"kn\">end</span>\n</pre></div>",
        "id": 184387163,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1577560200
    },
    {
        "content": "<p>It's the \"suffices : htemp\" line which I can't be bothered to write. On the blackboard I'd just say \"we want c=d, but it suffices to prove c sub d as the other inclusion then follows by symmetry\"</p>",
        "id": 184387666,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1577561042
    },
    {
        "content": "<p>I don't have to quantify over X and R, I could have left them as constants</p>",
        "id": 184387684,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1577561098
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">wlog</span>\n\n<span class=\"n\">def</span> <span class=\"n\">equivalence_class</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">|</span> <span class=\"n\">R</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">}</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">HR</span> <span class=\"o\">:</span> <span class=\"n\">equivalence</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">),</span>\n  <span class=\"n\">c</span> <span class=\"err\">∈</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"n\">S</span> <span class=\"bp\">=</span> <span class=\"n\">equivalence_class</span> <span class=\"n\">R</span> <span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"bp\">→</span>\n  <span class=\"n\">d</span> <span class=\"err\">∈</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"n\">S</span> <span class=\"bp\">=</span> <span class=\"n\">equivalence_class</span> <span class=\"n\">R</span> <span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">c</span> <span class=\"err\">∩</span> <span class=\"n\">d</span> <span class=\"bp\">≠</span> <span class=\"err\">∅</span> <span class=\"bp\">→</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">d</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">classical</span><span class=\"o\">,</span> <span class=\"n\">intros</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">hc</span> <span class=\"n\">hd</span> <span class=\"n\">hcd</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">subset</span><span class=\"bp\">.</span><span class=\"n\">antisymm_iff</span><span class=\"o\">,</span> <span class=\"n\">by_contra</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">not_and_distrib</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">wlog</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">c</span> <span class=\"err\">⊆</span> <span class=\"n\">d</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"kn\">using</span> <span class=\"o\">[</span><span class=\"n\">c</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">d</span> <span class=\"n\">c</span><span class=\"o\">],</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 184397048,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1577578263
    },
    {
        "content": "<p>Oh nice :-) I think this is what Yury was thinking of?</p>",
        "id": 184399371,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1577583288
    }
]