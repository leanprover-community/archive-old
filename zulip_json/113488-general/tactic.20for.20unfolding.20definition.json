[
    {
        "content": "<p>If I've defined <code>def A := B</code> and my goal / hypothesis contains A, how do I replace A with B?</p>",
        "id": 123764614,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1521143770
    },
    {
        "content": "<p><code>unfold</code> :)</p>",
        "id": 123764700,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1521143914
    },
    {
        "content": "<p>I tried it already</p>",
        "id": 123764708,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1521143938
    },
    {
        "content": "<p>here's the context that might help: I'm defining <code>A</code> in the middle of a structure</p>",
        "id": 123764717,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1521143951
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>class foo :=\n(A := B)\n</pre></div>",
        "id": 123764727,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1521143973
    },
    {
        "content": "<p>What happens when you try it?</p>",
        "id": 123764731,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1521143996
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>unfold tactic failed, A does not have equational lemmas nor is a projection\n</pre></div>",
        "id": 123764794,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1521144024
    },
    {
        "content": "<p>ok first let's eliminate one problem; try <code>delta</code> instead of <code>unfold</code></p>",
        "id": 123764801,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1521144035
    },
    {
        "content": "<p>if that works, you're trying to unfold something you have no \"business\" unfolding</p>",
        "id": 123764806,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1521144046
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>dsimplify tactic failed to simplify\n</pre></div>",
        "id": 123764810,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1521144053
    },
    {
        "content": "<p>isn't <code>(A := B)</code> there just a default value?</p>",
        "id": 123764838,
        "sender_full_name": "Reid Barton",
        "timestamp": 1521144122
    },
    {
        "content": "<p>oh... I can't define things inside a structure?</p>",
        "id": 123764884,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1521144156
    },
    {
        "content": "<p>No, that's not possible</p>",
        "id": 123764908,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1521144230
    },
    {
        "content": "<p>ok</p>",
        "id": 123764913,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1521144241
    },
    {
        "content": "<p>That would be useful</p>",
        "id": 123764956,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1521144247
    },
    {
        "content": "<p>They might consider it in the future. Recently, they have adopted implicit fields</p>",
        "id": 123764972,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1521144284
    },
    {
        "content": "<p>You can sort of emulate it with multiple structures, like how the algebraic classes are build on top of <code>has_foo</code> classes and so can take advantage of intervening <code>notation</code> declarations</p>",
        "id": 123765042,
        "sender_full_name": "Reid Barton",
        "timestamp": 1521144388
    }
]