[
    {
        "content": "<p>I just noticed this. Chris Hughes wrote a proof for me, but in my application of his proof I have a function from <code>fin n</code> to <code>nat</code>, and he has implemented his proof using a function from <code>nat</code> to <code>nat</code> which he only ever evaluates at numbers less than <code>n</code>. Given my function from <code>fin n</code> to <code>nat</code> I hence need to come up with a function from <code>nat</code> to <code>nat</code> which extends it and I thought I'd just define it using <code>or.elim (decidable.em (i&lt;n))</code> but this won't work because the target can't be <code>nat</code>.</p>",
        "id": 124063589,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521730066
    },
    {
        "content": "<p>You can using choice, but ite is probably more natural</p>",
        "id": 124063639,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1521730135
    },
    {
        "content": "<p><code>p or ¬p</code> is not as strong as <code>decidable p</code></p>",
        "id": 124063654,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1521730180
    },
    {
        "content": "<p>I had trouble eliminating <code>dite</code> a couple of weeks ago because I couldn't remember <code>dif_pos</code>. Why isn't it called <code>dite.elim_true</code> or something?</p>",
        "id": 124063729,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521730319
    },
    {
        "content": "<p>If you want to eliminate on a decidable proposition, <code>dite</code> is the standard way. You can't eliminate from an <code>or</code> to a type because the or doesn't contain information about which disjunct is true (it's been forgotten in proof irrelevance), and you can't recover the data once you drop it.</p>",
        "id": 124064130,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1521730838
    },
    {
        "content": "<p>Also, <code>simp</code> will simplify with <code>dif_pos</code> and its friends, I usually prefer that to using the names explicitly</p>",
        "id": 124064215,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1521730990
    },
    {
        "content": "<p>I was preparing myself for the fact that <code>dite</code> will be removed from Lean 4 ;-)</p>",
        "id": 124064628,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521731522
    },
    {
        "content": "<p>The other reason, which only just occurred to me, is that if both sides of your <code>or</code> are true, then your function is defined to be two different things.</p>",
        "id": 124151668,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1521898743
    },
    {
        "content": "<p>I'm just trying to work out in general which inductive predicates can eliminate into Sort, and which only eliminate into Prop. It's not that obvious why something like acc doesn't have this problem, and can eliminate into Sort.</p>",
        "id": 124152040,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1521899652
    },
    {
        "content": "<p>the basic idea is that there should only be one way to construct an element of an inductive prop if you want large elimination</p>",
        "id": 124152052,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1521899760
    },
    {
        "content": "<p>that's why it is called subsingleton elimination</p>",
        "id": 124152093,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1521899786
    },
    {
        "content": "<p>There are two proofs of <code>p \\/ q</code>, which are equal by proof irrelevance, so inversion would be inconsistent</p>",
        "id": 124152142,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1521899911
    },
    {
        "content": "<p>similarly there are multiple ways to prove <code>\\ex x. p x</code> by giving different witnesses, so you can't extract the witness</p>",
        "id": 124152150,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1521899978
    },
    {
        "content": "<p>The general rule is described in my paper, in the section \"large elimination\"</p>",
        "id": 124152201,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1521900050
    },
    {
        "content": "<p>Do you know the reason behind the choice of making universes non-cumulative?</p>",
        "id": 124152304,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1521900329
    },
    {
        "content": "<p>It simplifies a lot of things</p>",
        "id": 124152533,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1521900953
    },
    {
        "content": "<p>cumulativity would break unique typing, for one</p>",
        "id": 124152574,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1521900980
    },
    {
        "content": "<p>you have to have a subtyping relation, which interacts with everything in the type theory in nontrivial ways</p>",
        "id": 124152580,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1521901049
    },
    {
        "content": "<p>Oh? I didn't think you'd need a subtype relation just because of the universes</p>",
        "id": 124152622,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1521901133
    },
    {
        "content": "<p>I was thinking about extending my analysis to Coq, but it would not be a small modification</p>",
        "id": 124152623,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1521901142
    },
    {
        "content": "<p>you have to also have stuff like <code>A -&gt; Sort 1 &lt;= A -&gt; Sort 2</code></p>",
        "id": 124152668,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1521901206
    },
    {
        "content": "<p>... and now that I think of it, might get tricky for generic monadic code, if you want to allow<code>m α</code> <code>m β</code> even when <code>α</code>, <code>β</code> are in different universes. You might need covariance / contravariance hints in the type of <code>m</code></p>",
        "id": 124152723,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1521901432
    }
]