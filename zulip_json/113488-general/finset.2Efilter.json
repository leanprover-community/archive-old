[
    {
        "content": "<p>I am often writing</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">let</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"bp\">→</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">univ</span><span class=\"bp\">.</span><span class=\"n\">filter</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">),</span>\n</code></pre></div>\n\n\n<p>I don't really like this, for two reasons:</p>\n<ol>\n<li>It would be infinitely better if we could write <code>{ x | x i = 0 }</code>.</li>\n<li>If you have <code>hx : x ∈ S</code> and <code>rewrite mem_filter at hx</code>, then you end up with <code>hx : x ∈ univ ∧ x i = 0</code>.</li>\n</ol>\n<p>Of course (2) can be solved by a simp-lemma <code>mem_filter_univ</code>, but is there something that could be done about the aesthetics?</p>",
        "id": 195533535,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588063078
    },
    {
        "content": "<p>I really want to have a <code>has_sep</code> instance for <code>finset</code>, but the type doesn't work - the predicate has to be decidable</p>",
        "id": 195533693,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588063178
    },
    {
        "content": "<p>maybe we should just have a noncomputable instance</p>",
        "id": 195533716,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588063190
    },
    {
        "content": "<p>What are the consequences of doing that?</p>",
        "id": 195534512,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588063739
    },
    {
        "content": "<p>I guess we don't want to break computability for every fintype. Fintypes are a place where computation can be pretty useful.</p>",
        "id": 195534580,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588063777
    },
    {
        "content": "<p>I mean you can define a non-computable version of filter and call it <code>ncfilter</code> or something</p>",
        "id": 195534664,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588063809
    },
    {
        "content": "<p>and then the <code>has_sep</code> would call <code>ncfilter</code></p>",
        "id": 195534697,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588063832
    },
    {
        "content": "<p>With a low priority?</p>",
        "id": 195534729,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588063859
    },
    {
        "content": "<p>I know nothing about priority</p>",
        "id": 195534760,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588063882
    },
    {
        "content": "<p>But we could still end up with the wrong <code>{ x | is_cool x }</code> on fintypes with decidable eq etc, right?</p>",
        "id": 195534773,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588063892
    },
    {
        "content": "<p>I don't understand. We're using <code>{ x | some_nc_pred x }</code></p>",
        "id": 195534886,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588063953
    },
    {
        "content": "<p>Hmm, I guess I'm the one that is confused.</p>",
        "id": 195534997,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588064015
    },
    {
        "content": "<p>I just know that stuff is more complicated and ugly than it should be. And I would like some fairy or elf to fix it.</p>",
        "id": 195535077,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588064051
    },
    {
        "content": "<ol>\n<li>looks like <a href=\"https://github.com/leanprover-community/lean/search?q=set_of&amp;unscoped_q=set_of\" title=\"https://github.com/leanprover-community/lean/search?q=set_of&amp;unscoped_q=set_of\"><code>{ x : ℕ | x = x }</code> is hard-wired into Lean with C++ so we can't change it, and it isn't <code>has_sep</code></a></li>\n<li>and <a href=\"https://github.com/leanprover-community/mathlib/search?q=has_sep&amp;unscoped_q=has_sep\" title=\"https://github.com/leanprover-community/mathlib/search?q=has_sep&amp;unscoped_q=has_sep\">we already have a <code>has_sep</code> for <code>finset</code></a></li>\n<li>so the best we can do is <code>{ x ∈ univ | x i = 0 }</code></li>\n</ol>",
        "id": 195535788,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588064505
    },
    {
        "content": "<ol>\n<li>\"we can't change it\" is no longer true</li>\n<li>ok, that's cool, thanks!</li>\n<li>which looks a lot better, thanks so much! But the <code>∈ univ</code> is of course really silly</li>\n</ol>",
        "id": 195535961,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588064634
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"n\">universes</span> <span class=\"n\">u</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">def</span> <span class=\"n\">finset_of</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"bp\">@</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">filter</span> <span class=\"n\">α</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">dec_pred</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">univ</span>\n\n<span class=\"kn\">notation</span> <span class=\"bp\">`</span><span class=\"o\">{</span><span class=\"bp\">`</span> <span class=\"n\">binders</span> <span class=\"bp\">`</span> <span class=\"bp\">|</span> <span class=\"bp\">`</span> <span class=\"n\">r</span><span class=\"o\">:(</span><span class=\"n\">scoped</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">finset_of</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">`</span><span class=\"o\">}</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">r</span>\n\n<span class=\"c1\">-- { (x : bool) | x = x} : finset bool</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">bool</span> <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">}</span>\n</code></pre></div>\n\n\n<p>... but the downside is that the <code>set</code> equivalent is no longer within reach</p>",
        "id": 195537200,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588065457
    },
    {
        "content": "<p>There's no need to make this noncomputable:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">set_of</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable_pred</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"n\">univ</span><span class=\"bp\">.</span><span class=\"n\">filter</span> <span class=\"n\">p</span>\n\n<span class=\"n\">localized</span> <span class=\"s2\">&quot;notation `{` binders ` | ` r:(scoped p, finset.set_of p) `}` := r&quot;</span> <span class=\"k\">in</span> <span class=\"n\">finset</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">bool</span> <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">tt</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 195537331,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1588065562
    },
    {
        "content": "<p>Would this break other uses of this notation?</p>",
        "id": 195537453,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588065637
    },
    {
        "content": "<p>yeah this still breaks the <code>set</code> equivalent</p>",
        "id": 195537472,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588065659
    },
    {
        "content": "<p>The bigger problem is that all the other bracket notations disappear as well.  Think of <code>{ x // x &gt; 0 }</code> or <code>{1,2,3}</code>.</p>",
        "id": 195537475,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1588065660
    },
    {
        "content": "<p>oh no</p>",
        "id": 195537485,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588065672
    },
    {
        "content": "<p>The obvious solution is to write <code>❴ x : bool | x = x ❵</code> instead.</p>",
        "id": 195537598,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1588065743
    }
]