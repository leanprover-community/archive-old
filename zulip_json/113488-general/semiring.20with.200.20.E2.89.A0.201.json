[
    {
        "content": "<p>Is there a type class for a semiring with <code>0 ≠ 1</code>?</p>",
        "id": 126453723,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1526112903
    },
    {
        "content": "<p>I tried <code>[semiring α] [zero_ne_one_class α]</code> but then I ended up with two different definitions of one.</p>",
        "id": 126453838,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1526113196
    },
    {
        "content": "<p>try to use old structure command and build a new class</p>",
        "id": 126453884,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1526113245
    },
    {
        "content": "<p>the diamond death you just experienced</p>",
        "id": 126453888,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1526113256
    },
    {
        "content": "<blockquote>\n<p>I tried <code>[semiring α] [zero_ne_one_class α]</code> but then I ended up with two different definitions of one.</p>\n</blockquote>\n<p>Did you also end up with two different definitions of zero?</p>",
        "id": 126454045,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1526113646
    },
    {
        "content": "<p>Yes.</p>",
        "id": 126454136,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1526113862
    },
    {
        "content": "<p>Same question for <code>ring</code>.</p>",
        "id": 126454244,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1526114137
    },
    {
        "content": "<p>Would it have been better to define <code>zero_ne_one_class</code> as </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">class</span> <span class=\"n\">zero_ne_one_class</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_one</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">zero_ne_one</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 126454826,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1526115563
    },
    {
        "content": "<p>Yes. There is not much I can do about it</p>",
        "id": 126454972,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526115885
    },
    {
        "content": "<p>Well, we can define our own <code>has_zero_ne_one</code>, right?</p>",
        "id": 126454984,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1526115946
    },
    {
        "content": "<p>In the way that Chris suggested</p>",
        "id": 126454986,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1526115955
    },
    {
        "content": "<p>Sure. I would ask the reason for the use though, it seems not so useful</p>",
        "id": 126455074,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526116117
    },
    {
        "content": "<p>I'm doing univariate polys, and I'm trying to prove <code>degree_of (X : uv_polynomial α) = 1</code></p>",
        "id": 126455083,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1526116163
    },
    {
        "content": "<p>how is degree_of defined?</p>",
        "id": 126455142,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526116271
    },
    {
        "content": "<p>and X</p>",
        "id": 126455145,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526116277
    },
    {
        "content": "<p>after unfolding it looks like this <code>sup ((single 1 1).support) id = 1</code></p>",
        "id": 126455188,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1526116331
    },
    {
        "content": "<p>unfolding single makes it become this <code>sup (ite (1 = 0) ∅ (singleton 1)) id = 1</code></p>",
        "id": 126455190,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1526116372
    },
    {
        "content": "<p>is there decidable equality?</p>",
        "id": 126455201,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526116431
    },
    {
        "content": "<p>or are you classical</p>",
        "id": 126455202,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526116438
    },
    {
        "content": "<p>Yes.</p>",
        "id": 126455241,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1526116447
    },
    {
        "content": "<p>there is decidable equality</p>",
        "id": 126455242,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1526116457
    },
    {
        "content": "<p>I could probably get around it by proving alternative lemmas like <code>degree_of_monomial</code>. Or just make <code>0 \\ne 1</code> an argument to the theorem.</p>",
        "id": 126455340,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1526116724
    },
    {
        "content": "<p>I used a typeclass <code>nonzero_ring</code> in my metamath formalization of this one. Perhaps <code>is_nonzero</code> can be a typeclass depending on <code>ring</code> instead of <code>has_zero</code> and <code>has_one</code>?</p>",
        "id": 126455572,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526117241
    },
    {
        "content": "<p>nonzero semiring seems like a bad idea though, it's not nearly as nice as it sounds since it is not cancellative</p>",
        "id": 126455622,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526117373
    },
    {
        "content": "<p>Chris, from a mathematical point of view I am not so sure that people care too much about semirings. However I know lean is different. All I'm saying is that if it's easier to work with rings than semirings then from the point of view of mathematical applications you'll be losing essentially nothing.</p>",
        "id": 126455825,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526117850
    },
    {
        "content": "<p>I have the same problem with rings.</p>",
        "id": 126457579,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1526121534
    },
    {
        "content": "<blockquote>\n<p>I used a typeclass <code>nonzero_ring</code> in my metamath formalization of this one. Perhaps <code>is_nonzero</code> can be a typeclass depending on <code>ring</code> instead of <code>has_zero</code> and <code>has_one</code>?</p>\n</blockquote>\n<p>Do you mean extending <code>ring</code> or with <code>ring</code> as an argument?</p>",
        "id": 126458132,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1526122789
    },
    {
        "content": "<p><code>nonzero_ring</code> would <code>extends ring</code>, <code>is_nonzero : Prop</code> would have <code>[ring A]</code></p>",
        "id": 126460138,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526127449
    }
]