[
    {
        "content": "<p>21 messages were moved here from <a class=\"stream-topic\" data-stream-id=\"113538\" href=\"/#narrow/stream/113538-CI/topic/build.20time.20bot\">#CI &gt; build time bot</a> by <span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span>.</p>",
        "id": 304273975,
        "sender_full_name": "Notification Bot",
        "timestamp": 1665902283
    },
    {
        "content": "<p>About <code>simp only</code> and mathlib speed improvement: A quick investigation of a few randomly selected <code>simp only</code> calls shows that many of them can be replaced by a <code>simp_rw</code> call, as long as you order the list of lemmas right. If we make this change wherever possible, it could improve </p>\n<ol>\n<li>Speed (since presumably it's better to handle simplifications one at a time rather than to look through all of the lemmas again to check that there are no further simplifications)</li>\n<li>Readability (since you can see the order in which the simplifications are being applied, and even step through the proof state after each of them.</li>\n<li>Code size (since <code>simp_rw</code> is two characters shorter than <code>simp only</code>)</li>\n</ol>\n<p>One could write a script to make this change by trying to extract <code>simp_only</code> lemmas into a preceding <code>simp_rw</code> one at a time and only. You could even guarantee not making anything worse by checking the profiler before and after and reverting changes that hurt performance.</p>",
        "id": 304586058,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1666052580
    },
    {
        "content": "<blockquote>\n<p>Speed (since presumably it's better to handle simplifications one at a time rather than to look through all of the lemmas again to check that there are no further simplifications)</p>\n</blockquote>\n<p>Actually I would expect the opposite. One of the more expensive tasks of <code>simp</code> is creating a customized simp set with a matcher which can efficiently handle all the subexpression matching. Changing the simp set all the time means you have to do several expression traversals, which regular <code>simp</code> doesn't have to do.</p>",
        "id": 304586252,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666052699
    },
    {
        "content": "<p>I see, interesting.</p>",
        "id": 304586821,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1666053077
    },
    {
        "content": "<p>\\2. still feels like a strong argument</p>",
        "id": 304606240,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1666065707
    },
    {
        "content": "<p>incidentally, lean 4 <code>simp?</code> will automatically order the lemmas in the order they were used as rewrite rules</p>",
        "id": 304606403,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666065820
    },
    {
        "content": "<p>There is a 4th point that I like <code>simp_rw</code> a lot more than <code>simp only</code>, and it's maintainability. If a <code>simp only [lots of lemmas]</code> tactic call breaks, I have no idea where to look for the culprit. If it is a <code>simp_rw [lots of lemmas]</code> tactic call, then you can find out which step breaks, and get a much better idea what the problem is.</p>",
        "id": 304620573,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1666076332
    },
    {
        "content": "<p>So... can we get a sense of what the speed impact would be? I still imagine that <code>simp_rw</code> will be a lot faster than a bare <code>simp</code>. But it would be good if we can get some actual data.</p>",
        "id": 304632750,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1666081871
    },
    {
        "content": "<p>I did a few more random samples on the grep of all <code>simp only</code>s last night. Mario was right, it does seem to be slightly slower to use <code>simp_rw</code>, but the change usually wasn't more than 10% of the runtime. Funnily enough, sometimes it got faster, but not necessarily because <code>simp_rw</code> was faster - a few of the <code>simp only</code> calls included unnecessary lemmas.</p>",
        "id": 304820278,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1666119211
    },
    {
        "content": "<p>I'll write a script to do this a bit more rigorously</p>",
        "id": 304822281,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1666119904
    },
    {
        "content": "<p>Ok I started <a href=\"https://github.com/leanprover-community/mathlib/pull/17062\">#17062</a>, still not complete and likely very buggy. Before I go further, is there any more convenient way in Python to get profiler data than calling <code>lean --make --profile</code> and parsing the output?</p>",
        "id": 305056422,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1666220883
    },
    {
        "content": "<p>Also, I was getting tripped up by some commas that didn't have spaces after them. Is there any reason I couldn't add a rule saying commas must be followed by whitespace or a newline to the linter?</p>",
        "id": 305056485,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1666220921
    },
    {
        "content": "<p><code>M →ₗ⁅R,L⁆ N</code> is used by the pretty-printer but has a comma followed by no space</p>",
        "id": 305067211,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1666230072
    },
    {
        "content": "<p>Also, at the extreme end you don't want to ban commas of that form in docstrings or tactic error messages</p>",
        "id": 305067229,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1666230106
    },
    {
        "content": "<p>Consider <code>/-- We write lists with `,`s between items -/</code></p>",
        "id": 305067275,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1666230130
    },
    {
        "content": "<p>I wonder if a better (but way harder) way to measure this style is by inspecting the AST</p>",
        "id": 305067292,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1666230168
    },
    {
        "content": "<p>(to be clear, I'm in favor of linting this if we can do so without too many false positives)</p>",
        "id": 305067315,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1666230210
    },
    {
        "content": "<p>I think that would likely be better, yes. This also feels like another QoL improvement that might be better done after the port.</p>",
        "id": 305067372,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1666230271
    }
]