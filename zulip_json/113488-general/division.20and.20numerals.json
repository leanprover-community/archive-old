[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"c1\">-- example : 2 ∣ 4 := ⟨2, rfl⟩ -- fails</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">invalid constructor ⟨...⟩, &#39;has_dvd.dvd&#39; is not an inductive type</span>\n<span class=\"cm\">-/</span>\n<span class=\"c1\">--example : (2 : ℕ) ∣ 4 := ⟨2,rfl⟩ -- fails</span>\n<span class=\"c1\">--example : 2 ∣ (4 : ℕ) := ⟨2,rfl⟩ -- fails</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"err\">∣</span> <span class=\"o\">(</span><span class=\"mi\">4</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"n\">rfl</span><span class=\"bp\">⟩</span> <span class=\"c1\">-- works</span>\n<span class=\"c1\">--example (a : ℕ) : a ∣ a * 2 := ⟨2,rfl⟩ -- fails</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"err\">∣</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"n\">rfl</span><span class=\"bp\">⟩</span> <span class=\"c1\">-- works</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"err\">∣</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"n\">rfl</span><span class=\"bp\">⟩</span> <span class=\"c1\">-- works</span>\n</pre></div>\n\n\n<p>Why do so many of these fail? In particular the fourth one: why does Lean need to be told that <code>a * 2</code> is a nat when it knows <code>a</code> is a nat? The type of <code>has_dvd.dvd</code> (the notation) is <code>α → α → Prop</code> and it is looking straight at two nats when it decides how to deal with what alpha is.</p>",
        "id": 151792143,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1544810464
    },
    {
        "content": "<p>Now you know why <code>by exact</code> is so popular. <span class=\"emoji emoji-263a\" title=\"smile\">:smile:</span></p>",
        "id": 151793918,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1544812016
    },
    {
        "content": "<p>The reason is that while Lean does know at some point that <code>|</code> is the divisibility relation on a commutative semiring defined by <code>∃ x, ...</code>; Lean only figures this out too late, after <code>⟨2, rfl⟩</code> is elaborated.  It looks like a bug that could be fixed by synthesizing instances before elaborating anonymous constructors.</p>",
        "id": 151794263,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1544812268
    },
    {
        "content": "<p>In this example, you can also force instances to be synthesized before elaborating the proof by using <code>lemma</code> instead of <code>example</code>.</p>",
        "id": 151794284,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1544812292
    },
    {
        "content": "<p>(Oh, and <code>by exact foo</code> also changes the order in which things are elaborated.  Tactics are called last; this has the effect of elaborating <code>foo</code> later than the rest of the term, when typeclass instances, etc. will have hopefully been figured out.)</p>",
        "id": 151794384,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1544812371
    },
    {
        "content": "<p>I now feel like I've asked this question several times. I think it's about time I understood the answer properly. My current understanding of the answer, which I guess I already had when I posted, is \"it's all to do with when elaboration occurs\". I hadn't realised this one was in the \"lemma / example makes a difference\" category and I know I've asked at least one of these before.</p>",
        "id": 151798356,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1544815595
    }
]