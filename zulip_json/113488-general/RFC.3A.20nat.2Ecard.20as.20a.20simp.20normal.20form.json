[
    {
        "content": "<p>Hi, what do you think about the following change?</p>\n<ul>\n<li>We define <code>enat.card</code> and redefine <code>nat.card</code> without <code>cardinal</code>s, see <a href=\"https://github.com/leanprover-community/mathlib/blob/YK-cardinal-to-enat/src/data/enat/card.lean\">here</a>.</li>\n<li>Optional: we prove <code>fin.equiv_iff_eq</code> in another way to avoid dependency on <code>finset</code>/<code>fintype</code>.</li>\n<li>We make <code>nat.card</code>, not <code>fintype.card</code>, the <code>simp</code>-normal form.</li>\n</ul>\n<h3>Pros</h3>\n<ul>\n<li>No non-Prop argument in <code>card</code>.</li>\n<li>We can define <code>card</code> without theory about <code>list.perm</code>, <code>finset</code> etc.</li>\n<li>Don't duplicate API (currently we state many lemmas both for <code>fintype.card</code> and <code>nat.card</code>).</li>\n</ul>\n<h3>Cons</h3>\n<ul>\n<li>Loss of computability.</li>\n</ul>",
        "id": 312122288,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1669356963
    },
    {
        "content": "<p>Some people would regard loss of computability as another pro!</p>",
        "id": 312123991,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1669358193
    },
    {
        "content": "<p>I don't know if this can cause troubles for meta programming.</p>",
        "id": 312132720,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1669363379
    },
    {
        "content": "<p>Here is a proof that works in <code>data.fin.basic</code>, right after <code>pred_inj</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">nonempty_embedding_iff</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">↪</span> <span class=\"n\">fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">⟨(</span><span class=\"n\">cast_le</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_embedding</span><span class=\"o\">⟩⟩,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">ihn</span> <span class=\"n\">generalizing</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">m.zero_le</span> <span class=\"o\">},</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">exists_eq_succ_of_ne_zero</span> <span class=\"o\">(</span><span class=\"n\">pos_iff_nonempty.2</span> <span class=\"o\">(</span><span class=\"n\">nonempty.map</span> <span class=\"n\">e</span> <span class=\"n\">infer_instance</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">ne'</span>\n    <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">refine</span> <span class=\"n\">nat.succ_le_succ</span> <span class=\"o\">(</span><span class=\"n\">ihn</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">⟩),</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">e.set_value</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span> <span class=\"n\">i.succ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">pred</span> <span class=\"o\">(</span><span class=\"n\">e.set_value_ne</span> <span class=\"n\">i.succ_ne_zero</span> <span class=\"n\">_</span><span class=\"o\">),</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">pred_inj</span><span class=\"o\">,</span> <span class=\"n\">embedding_like.apply_eq_iff_eq</span><span class=\"o\">,</span> <span class=\"n\">succ_inj</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">equiv_iff_eq</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">≃</span> <span class=\"n\">fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"o\">⟨</span><span class=\"n\">e</span><span class=\"o\">⟩,</span> <span class=\"n\">le_antisymm</span> <span class=\"o\">(</span><span class=\"n\">nonempty_embedding_iff.1</span> <span class=\"o\">⟨</span><span class=\"n\">e</span><span class=\"o\">⟩)</span> <span class=\"o\">(</span><span class=\"n\">nonempty_embedding_iff.1</span> <span class=\"o\">⟨</span><span class=\"n\">e.symm</span><span class=\"o\">⟩),</span>\n  <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"bp\">▸</span> <span class=\"o\">⟨</span><span class=\"n\">equiv.refl</span> <span class=\"n\">_</span><span class=\"o\">⟩⟩</span>\n</code></pre></div>",
        "id": 312134886,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1669364282
    },
    {
        "content": "<p>It relies on this addition to <code>logic.embedding.basic</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">set_value_ne</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">↪</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">a'</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a'</span> <span class=\"bp\">≠</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">a'</span><span class=\"o\">,</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"n\">a'</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)]</span>\n  <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">a'</span><span class=\"o\">,</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a'</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">set_value</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">a'</span> <span class=\"bp\">≠</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"o\">((</span><span class=\"n\">set_value</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">injective.ne_iff'</span> <span class=\"bp\">$</span> <span class=\"n\">set_value_eq</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 312135602,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1669364584
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/113488-general/topic/RFC.3A.20nat.2Ecard.20as.20a.20simp.20normal.20form/near/312122288\">said</a>:</p>\n<blockquote>\n<ul>\n<li>We make <code>nat.card</code>, not <code>fintype.card</code>, the <code>simp</code>-normal form.</li>\n</ul>\n</blockquote>\n<p>I worry about this one -- sometimes one can use the <code>fintype</code> instance to get a specific convenient <code>finset</code> where it's easy to get the cardinality. That said, I think it should be fine if we leave the <code>fintype.card ==&gt; nat.card</code> lemma non-simp (that way it's opt-in).</p>\n<p>I agree with preferring <code>nat.card</code> over <code>fintype.card</code> for whenever you don't need an actual <code>fintype</code> instance.</p>",
        "id": 312144794,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1669368505
    },
    {
        "content": "<p>It also makes sense for <code>enat.card</code> and <code>nat.card</code> to be defined only in terms of <code>fin</code> and <code>equiv</code>, at least for sake of removing dependencies for the basic notion of finite cardinalities. (Having <code>#ₙ α</code> notation is a nice idea too.)</p>",
        "id": 312146384,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1669369033
    },
    {
        "content": "<p>I don't see much point in removing dependencies for the sake of removing dependencies. From what I understand, this will mostly end up duplicating API.</p>",
        "id": 312168916,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1669376864
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> We need to prove that the projection from <code>cardinal</code> to <code>enat</code> is a ring homomorphism. We can either prove it directly (by a choice analysis) or by using <a href=\"https://github.com/leanprover-community/mathlib/blob/YK-cardinal-to-enat/src/set_theory/cardinal/nat_enat.lean#L87\">this trick</a>.</p>",
        "id": 312230136,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1669396724
    },
    {
        "content": "<p>So, there is not much code duplication here.</p>",
        "id": 312230186,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1669396738
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> If we have a nice <code>fintype</code> structure, then we should add a lemma about <code>nat.card _ = _</code> that rewrites to <code>fintype.card</code>.</p>",
        "id": 312230271,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1669396781
    },
    {
        "content": "<p>But <code>nat.card ((s : finset _) : set _)</code> should be simplified to <code>finset.card s</code>.</p>",
        "id": 312230396,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1669396822
    },
    {
        "content": "<p>So, we can completely remove <code>fintype.card</code> (and use <code>nat.card</code> instead) and use <code>finset.univ.card</code> whenever you want a specific <code>fintype</code> instance.</p>",
        "id": 312230642,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1669396954
    },
    {
        "content": "<p>I wouldn't go as far as removing <code>fintype.card</code>, since it can be useful for programming (though admittedly types with specific enumerations are more useful programming wise). My comment was mainly about just avoiding having a <code>fintype.card ==&gt; nat.card</code> simp lemma since that strips away potentially useful information (the specific <code>fintype</code> instance in the term), and there's no need to normalize one to the other.</p>",
        "id": 312231364,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1669397287
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/113488-general/topic/RFC.3A.20nat.2Ecard.20as.20a.20simp.20normal.20form/near/312230642\">said</a>:</p>\n<blockquote>\n<p>So, we can completely remove <code>fintype.card</code> (and use <code>nat.card</code> instead) and use <code>finset.univ.card</code> whenever you want a specific <code>fintype</code> instance.</p>\n</blockquote>\n<p>Unfortunately that would be much longer to type because Lean can't infer the type of <code>finset.univ</code>. If anything, making <code>fintype.card</code> an <code>abbreviation</code> sounds like a much better way of achieving this specific goal.</p>",
        "id": 312268743,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1669418445
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113488-general/topic/RFC.3A.20nat.2Ecard.20as.20a.20simp.20normal.20form/near/312231364\">said</a>:</p>\n<blockquote>\n<p>I wouldn't go as far as removing <code>fintype.card</code>, since it can be useful for programming (though admittedly types with specific enumerations are more useful programming wise). My comment was mainly about just avoiding having a <code>fintype.card ==&gt; nat.card</code> simp lemma since that strips away potentially useful information (the specific <code>fintype</code> instance in the term), and there's no need to normalize one to the other.</p>\n</blockquote>\n<p>If we don't normalize, then we need lemmas about both <code>nat.card</code> and <code>fintype.card</code> everywhere.</p>",
        "id": 312276456,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1669421419
    },
    {
        "content": "<p>Simplifying fintype.card to nat.card is like simplifying <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.groupoid.inv\">docs#category_theory.groupoid.inv</a> to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.inv\">docs#category_theory.inv</a> (<a href=\"https://github.com/leanprover-community/mathlib/pull/16624\">#16624</a>, exactly for the purpose of reusing simp lemmas for category_theory.inv) but surely has a much larger impact. I guess I'm in favor of the change if you could make mathlib compile :)</p>",
        "id": 312286763,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1669431593
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> I'm not sure what assumptions you're making to reach this conclusion.</p>\n<p>I'll say my concern in a different way: one should be able to decide whether to simp with <code>fintype.card X ==&gt; nat.card X</code> or with <code>fintype.card X = finset.univ.card</code>. This is a nonconfluence junction unless you turn all <code>finset.card</code> into <code>nat.card</code> as well. I doubt we want to do that, so it should be left to the user.</p>\n<p>We don't need a rich set of simp lemmas for <code>fintype.card</code> since if someone is using it for whatever reason, to prove things about it the first step should be to decide whether it's better to go via <code>nat.card</code> or <code>finset.card</code>.</p>",
        "id": 312311148,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1669453831
    },
    {
        "content": "<p>Somewhat relatedly, I think it would be nice additionally having a <code>set.ncard s := nat.card s</code> specifically to preserve that the argument is a set. I've run into a number of situations where there are well-meaning simp lemmas that convert <code>fintype.card s</code> into something involving an equivalent subtype, which isn't good because the next steps would be rewriting types, one of those evils in type theory. Keeping things in the language of <code>set</code> means congr and friends are more likely to work.</p>",
        "id": 312312284,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1669454566
    },
    {
        "content": "<p>Rewriting types is not that bad if you don't have a <code>[fintype s]</code> assumption nearby.</p>",
        "id": 312548294,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1669605291
    }
]