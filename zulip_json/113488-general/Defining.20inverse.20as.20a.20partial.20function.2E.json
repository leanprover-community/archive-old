[
    {
        "content": "<p>I am investigating defining field inverses so that you have to also give the inverse a certificate that the number being put in is not zero. We can have a separate debate about whether that approach is better than having <code>inv(0) = 0</code>, but for now here are my ideas:</p>\n<p>My first idea was to treat the 'non-zeroness' as a typeclass then piggyback on the type inference algorithm.</p>\n<div class=\"codehilite\"><pre><span></span>    <span class=\"kn\">universe</span> <span class=\"n\">u</span>\n    <span class=\"n\">class</span> <span class=\"n\">not_zero</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">nz</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n    <span class=\"n\">class</span> <span class=\"n\">my_division_ring</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"o\">(</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"o\">(</span><span class=\"n\">inv</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">not_zero</span> <span class=\"n\">x</span><span class=\"o\">]:</span>  <span class=\"n\">R</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">inv_l</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">not_zero</span> <span class=\"n\">y</span><span class=\"o\">],</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">inv</span> <span class=\"n\">y</span><span class=\"o\">)</span>  <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">inv_r</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">not_zero</span> <span class=\"n\">y</span><span class=\"o\">],</span> <span class=\"o\">(</span><span class=\"n\">inv</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">y</span>  <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">)</span>\n</pre></div>\n\n\n<p>Sadly, I get a \"failed to synthesize typeclass\" error.<br>\nEven more sadly, the last two lines of the error read:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">not_zero</span> <span class=\"n\">y</span>\n<span class=\"err\">⊢</span> <span class=\"n\">not_zero</span> <span class=\"n\">y</span>\n</pre></div>\n\n\n<p>Why is the elaborator not spotting this? This seems like something the elaborator would be able to do. Supposing that the elaborator could do this, then my idea was that you could write things like:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">integral_domain</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">not_zero</span> <span class=\"n\">x</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">not_zero</span> <span class=\"n\">y</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">not_zero</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</pre></div>\n\n\n<p>Are there any roadblocks that are stopping this dream from being a feasible way of defining the inverse function?</p>",
        "id": 136914681,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1541070507
    },
    {
        "content": "<p>Can this be solved with the <code>haveI</code> magic inserting the instance into the type class system at the right points?</p>",
        "id": 136914772,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541070648
    },
    {
        "content": "<p>My second approach was to use auto_params:</p>\n<div class=\"codehilite\"><pre><span></span>    <span class=\"c1\">-- eventually a sophisticated tactic that figures out if an elt is ≠ 0</span>\n    <span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">nz_tactic</span> <span class=\"o\">:=</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">assumption</span>\n    <span class=\"n\">class</span> <span class=\"n\">dvr</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"o\">(</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"o\">(</span><span class=\"n\">inv</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">:</span><span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">):</span>  <span class=\"n\">R</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">inv_l</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">:</span><span class=\"n\">y</span><span class=\"bp\">≠</span><span class=\"mi\">0</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">inv</span> <span class=\"n\">y</span> <span class=\"n\">p</span><span class=\"o\">)</span>  <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">)</span>\n    <span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">dvr</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n    <span class=\"n\">def</span> <span class=\"n\">inv</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nz</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">.</span> <span class=\"n\">nz_tactic</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"n\">dvr</span><span class=\"bp\">.</span><span class=\"n\">inv</span> <span class=\"n\">y</span> <span class=\"n\">nz</span>\n\n    <span class=\"n\">def</span> <span class=\"n\">div</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nz</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">.</span> <span class=\"n\">nz_tactic</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">inv</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n    <span class=\"kn\">infix</span> <span class=\"bp\">`</span> <span class=\"bp\">/.</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"o\">:=</span> <span class=\"n\">div</span>\n\n    <span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span>\n    <span class=\"kn\">variable</span> <span class=\"o\">(</span><span class=\"n\">xz</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">.</span> <span class=\"n\">nz_tactic</span><span class=\"o\">)</span> <span class=\"c1\">-- I was really hoping that this would be allowed</span>\n\n    <span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">xz</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">yz</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/.</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/.</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/.</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>",
        "id": 136914794,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1541070721
    },
    {
        "content": "<blockquote>\n<p>Can this be solved with the <code>haveI</code> magic inserting the instance into the type class system at the right points?</p>\n</blockquote>\n<p>I don't understand what this means.</p>",
        "id": 136914838,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1541070747
    },
    {
        "content": "<p>Neither do I.</p>",
        "id": 136914840,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541070761
    },
    {
        "content": "<p>The point is that the problem you described pops up quite often.</p>",
        "id": 136914853,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541070788
    },
    {
        "content": "<p>And then you can write <code>haveI my_instance, blah</code> and then the type class system will pick up your instance.</p>",
        "id": 136914861,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541070815
    },
    {
        "content": "<p>And the reason you have to do this explicitly is because Lean 3.4.x is pretty frozen.</p>",
        "id": 136914867,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541070836
    },
    {
        "content": "<p>Please could you give a full example of <code>haveI</code>?</p>",
        "id": 136914932,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1541070902
    },
    {
        "content": "<p>I get <code>[Lean] unknown identifier 'haveI'</code> errors</p>",
        "id": 136914948,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1541070939
    },
    {
        "content": "<p>I'll try. For starters, here are 56 examples: <a href=\"https://github.com/leanprover/mathlib/search?q=haveI&amp;unscoped_q=haveI\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/search?q=haveI&amp;unscoped_q=haveI\">https://github.com/leanprover/mathlib/search?q=haveI&amp;unscoped_q=haveI</a></p>",
        "id": 136914955,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541070947
    },
    {
        "content": "<p>ah it's a tactic</p>",
        "id": 136915006,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1541070967
    },
    {
        "content": "<p>Yes, and it has some friends, like <code>exactI</code> and I don't know what they do, and how they differ.</p>",
        "id": 136915020,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541071003
    },
    {
        "content": "<p>I'm using them cargo-cult style.</p>",
        "id": 136915021,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541071013
    },
    {
        "content": "<p>So my question now is: Is there a fundamental reason why the elaborator can't do my above example? Eg there might be cases where it causes the elaborator to take unbounded time or something.</p>",
        "id": 136915095,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1541071143
    },
    {
        "content": "<p>I think the fundamental reason was that Lean 3.4.x is frozen.</p>",
        "id": 136915157,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541071213
    },
    {
        "content": "<p>Also, in your <code>inv_l</code> and <code>inv_r</code> you want <code>y = x</code>.</p>",
        "id": 136915207,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541071319
    },
    {
        "content": "<p>That's not what I mean by reason. Why would the elaborator be able to do the below example but not the one at the top.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">sq</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>  <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">a</span>\n</pre></div>\n\n\n<p>It must be something to do with the fact that the elaborator is looking for typeclasses attached to the type of <code>a</code> and not to <code>a</code> itself.</p>",
        "id": 136915310,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1541071449
    },
    {
        "content": "<blockquote>\n<p>Also, in your <code>inv_l</code> and <code>inv_r</code> you want <code>y = x</code>.</p>\n</blockquote>\n<p>fixed!</p>",
        "id": 136915315,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1541071479
    },
    {
        "content": "<p>I think it;s actually to do with being left or right of the colon. This doesn't work</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n</pre></div>",
        "id": 136915660,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1541072033
    },
    {
        "content": "<p><code>    (inv_l (x : R) [not_zero x] : (x * (inv x)  = 1) )</code> has the same error though.</p>",
        "id": 136916579,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1541073157
    },
    {
        "content": "<p>Maybe because it's part of a structure. Does the <code>ring</code> example work as part of a structure?</p>",
        "id": 136916787,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1541073414
    },
    {
        "content": "<p>This works:</p>\n<div class=\"codehilite\"><pre><span></span>    <span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">my_division_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n    <span class=\"n\">def</span> <span class=\"n\">inv</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">not_zero</span> <span class=\"n\">y</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"n\">my_division_ring</span><span class=\"bp\">.</span><span class=\"n\">inv</span> <span class=\"n\">y</span>\n</pre></div>",
        "id": 136916872,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1541073510
    },
    {
        "content": "<p>so maybe it is because it is part of a structure.</p>",
        "id": 136916882,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1541073525
    },
    {
        "content": "<p><code>by exactI</code> is the most succinct option here</p>",
        "id": 136919570,
        "sender_full_name": "Reid Barton",
        "timestamp": 1541076948
    },
    {
        "content": "<p>Right but ideally I wouldn't even have to use a tactic.</p>",
        "id": 136921820,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1541079614
    },
    {
        "content": "<p>The elaborator would just do it.</p>",
        "id": 136921827,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1541079624
    },
    {
        "content": "<p>I think that I've got the elaborator to \"just do it\" now:</p>\n<div class=\"codehilite\"><pre><span></span>    <span class=\"n\">class</span> <span class=\"n\">not_zero</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">nz</span><span class=\"o\">:</span><span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n    <span class=\"n\">class</span> <span class=\"n\">my_division_ring</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"o\">(</span><span class=\"n\">integral_domain</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"o\">(</span><span class=\"n\">inv</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">not_zero</span> <span class=\"n\">x</span><span class=\"o\">],</span>  <span class=\"n\">R</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">inv_l</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">nz</span><span class=\"o\">:</span><span class=\"n\">not_zero</span> <span class=\"n\">x</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">inv</span> <span class=\"n\">x</span> <span class=\"n\">nz</span><span class=\"o\">)</span>  <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">inv_r</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">nz</span><span class=\"o\">:</span><span class=\"n\">not_zero</span> <span class=\"n\">x</span><span class=\"o\">]</span> <span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">inv</span> <span class=\"n\">x</span> <span class=\"n\">nz</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">x</span>  <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">)</span>\n\n    <span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">my_division_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n    <span class=\"n\">def</span> <span class=\"n\">inv</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">not_zero</span> <span class=\"n\">y</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"n\">my_division_ring</span><span class=\"bp\">.</span><span class=\"n\">inv</span> <span class=\"n\">y</span>\n\n    <span class=\"n\">def</span> <span class=\"n\">div</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">not_zero</span> <span class=\"n\">y</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">inv</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n    <span class=\"kn\">infix</span> <span class=\"bp\">`</span> <span class=\"err\">÷</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"o\">:=</span> <span class=\"n\">div</span>\n\n    <span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">not_zero</span> <span class=\"n\">x</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">not_zero</span> <span class=\"n\">y</span><span class=\"o\">]</span>\n    <span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">not_zero</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">mul_ne_zero</span> <span class=\"o\">(</span><span class=\"n\">not_zero</span><span class=\"bp\">.</span><span class=\"n\">nz</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">not_zero</span><span class=\"bp\">.</span><span class=\"n\">nz</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">⟩</span>\n\n    <span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"err\">÷</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"err\">÷</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"err\">÷</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>",
        "id": 136923468,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1541081228
    },
    {
        "content": "<p>So I was badmouthing the elaborator but I only have to be explicit with <code>inv</code> within the class definition.</p>",
        "id": 136923562,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1541081305
    },
    {
        "content": "<p>I much prefer this approach to making the inverse total.</p>",
        "id": 136923605,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1541081365
    },
    {
        "content": "<p>But it has its own caveats</p>",
        "id": 136923739,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1541081460
    },
    {
        "content": "<p>One problem you'll run into is that sooner or later type class inference is not going to figure out that arguments are <code>not_zero</code>, because the reasons get too complicated. But if you're fine with writing</p>\n<div class=\"codehilite\"><pre><span></span>haveI : not_zero t := ...,\n</pre></div>\n\n\n<p>here and there, it should be fine.</p>",
        "id": 136924201,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1541081856
    },
    {
        "content": "<p>Right. The problem is that the reasons get too complicated, so the elaborator would end up needing to be a general purpose prover. It seems to me that in practice, if a function needs an implicit guard proposition like <code>x != 0</code>, it is usually easy for a human to work out where the certificate is coming from, so it should be possible to make a tactic that can also figure it out 80% of the time. It would be so useful if one were able to augment the elaborator with ones own tactics, similar to the <code>(x:P . my_tactic)</code> syntax, but where I don't have to explicitly write out the tactic name all of the time and one can also write <code>variables {x : R} (x != 0 . my_tactic)</code>. <br>\n I think my ideal syntax would be to extend the typeclass brackets to also take arbitrary propositions.</p>\n<div class=\"codehilite\"><pre><span></span>    <span class=\"n\">class</span> <span class=\"n\">my_division_ring</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"o\">(</span><span class=\"n\">integral_domain</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"o\">(</span><span class=\"n\">inv</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">],</span>  <span class=\"n\">R</span><span class=\"o\">)</span>\n\n    <span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">y</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">]</span>\n    <span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">mul_ne_zero</span> <span class=\"err\">‹</span><span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"err\">›</span> <span class=\"err\">‹</span><span class=\"n\">y</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"err\">›</span>\n</pre></div>\n\n\n<p>I know that there are lots of practical difficulties that this would surface, but I think the idea makes sense. The meaning of <code>[x ≠ 0]</code> is that this is a fact that needs to be present but which should be hidden from the user as much as possible.</p>",
        "id": 136925306,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1541082874
    },
    {
        "content": "<p>You can already pretend that a proposition is a typeclass, but the elaborator doesn't know what to do with them because they don't have the <code>class</code> attribute on them.</p>",
        "id": 136925627,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1541083220
    },
    {
        "content": "<p>I think you might consider auto params. It allows you to specify a tactic to use to prove non-zeroness</p>",
        "id": 137113111,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1541250924
    },
    {
        "content": "<p><code>ˋ</code>lean<br>\n(inv (x : R) (h : x /= 0 . prove_non_zero) : R)<br>\n<code>ˋ</code></p>",
        "id": 137113225,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1541251116
    },
    {
        "content": "<p>(Sorry for the bad formatting, I’m on my phone)</p>",
        "id": 137113286,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1541251212
    },
    {
        "content": "<p>Now I'm confused why this code that I found in Scott's limits branch actually does work:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">class</span> <span class=\"n\">preserves_limits</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"err\">⥤</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">preserves</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">J</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">small_category</span> <span class=\"n\">J</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">J</span> <span class=\"err\">⥤</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">cone</span> <span class=\"n\">K</span><span class=\"o\">},</span> <span class=\"n\">is_limit</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">is_limit</span> <span class=\"o\">(</span><span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">map_cone</span> <span class=\"n\">c</span><span class=\"o\">))</span>\n</pre></div>",
        "id": 137116158,
        "sender_full_name": "Reid Barton",
        "timestamp": 1541257435
    },
    {
        "content": "<p><code>J \\func C</code> depends on the <code>[small_category J]</code>, and if I delete the latter then I get errors.</p>",
        "id": 137116198,
        "sender_full_name": "Reid Barton",
        "timestamp": 1541257498
    }
]