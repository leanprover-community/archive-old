[
    {
        "content": "<p>(I'm positing this here for higher visibility because I get the feeling that not everybody is watching the community fork repository.)  We've been talking about it for a long time and I believe we should finally start making some long-due backwards-incompatible changes to Lean.  These are the concrete changes that I'd like to merge soon:</p>\n<ul>\n<li>Remove the simp attribute from <code>add_comm</code> (<span class=\"user-mention\" data-user-id=\"121918\">@Edward Ayers</span> made a PR: <a href=\"https://github.com/leanprover-community/lean/pull/65\" target=\"_blank\" title=\"https://github.com/leanprover-community/lean/pull/65\">https://github.com/leanprover-community/lean/pull/65</a>)</li>\n<li>Remove the simp attribute from <code>sub_eq_add_neg</code> (<span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> aspires to be a pyromaniac: <a href=\"https://github.com/leanprover-community/mathlib/pull/2017#issuecomment-588417505\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/pull/2017#issuecomment-588417505\">https://github.com/leanprover-community/mathlib/pull/2017#issuecomment-588417505</a>)</li>\n<li>Replace the <code>insert</code> definition with <code>export has_insert (insert)</code> (my proposal: <a href=\"https://github.com/leanprover-community/lean/pull/115\" target=\"_blank\" title=\"https://github.com/leanprover-community/lean/pull/115\">https://github.com/leanprover-community/lean/pull/115</a>)</li>\n</ul>\n<p>Any thoughts?</p>",
        "id": 188621342,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1582190401
    },
    {
        "content": "<p>Can I vote twice for removing the simp attribute on <code>subeq_add_neg</code>?</p>",
        "id": 188622748,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1582191668
    },
    {
        "content": "<p>I guess most thing that simplify using <code>add_comm</code> and <code>add_assoc</code> should be using <code>ring</code> or <code>abel</code> anyway. So I vote yes to all those changes.</p>",
        "id": 188622836,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1582191740
    },
    {
        "content": "<p>I'm on board, it's time to fix the things we've spent years complaining about.</p>",
        "id": 188624584,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1582193191
    },
    {
        "content": "<p>PR for <code>sub_eq_add_neg</code>: <a href=\"https://github.com/leanprover-community/lean/pull/117\" target=\"_blank\" title=\"https://github.com/leanprover-community/lean/pull/117\">https://github.com/leanprover-community/lean/pull/117</a></p>",
        "id": 188624997,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1582193540
    },
    {
        "content": "<p>How does this interact with updating mathlib? I mean, when we do such a change to Lean, then mathlib will break, and we will need to fix it. But once it is fixed, it will become incompatible with previous versions of Lean. So, things should be coordinated in a way.</p>",
        "id": 188626049,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1582194539
    },
    {
        "content": "<p>mathlib specifies which Lean version it uses in the toml file. Right now it's 3.5.1.</p>",
        "id": 188626140,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1582194635
    },
    {
        "content": "<p>It won't know about any changes to Lean until we update the toml.</p>",
        "id": 188626147,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1582194645
    },
    {
        "content": "<p>The PR that makes that change should also fix any breakage.</p>",
        "id": 188626167,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1582194668
    },
    {
        "content": "<p>It's probably a good idea to keep a branch of mathlib updated to Lean nightlies, so we don't have to make these fixes all at once.</p>",
        "id": 188626181,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1582194699
    },
    {
        "content": "<p>I vaguely recall that somebody complained about <code>∘</code> being reducible.  Do we want to change this as well?<br>\n(Occasion: I'm currently debugging a simp loop with <code>[simplify.rewrite] [equiv.conj_comp]: ⇑(equiv.conj e) f ==&gt; ⇑(equiv.conj e) f ∘ ⇑(equiv.conj e) (λ (x : α), x)</code>)</p>",
        "id": 188627497,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1582195998
    },
    {
        "content": "<p>Could we also fix the built-in well-foundedness tactic so that we can get rid of <code>using_well_founded wf_tacs</code>?</p>",
        "id": 188631052,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1582200057
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span> Of course.  Please submit a PR to our glorious fork!</p>",
        "id": 188631274,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1582200358
    },
    {
        "content": "<p>What about changing <code>{a, b}</code> from <code>insert b {a}</code> to <code>insert a {b}</code>?</p>",
        "id": 188659283,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1582220248
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110596\">Rob Lewis</span> <a href=\"#narrow/stream/113488-general/topic/Making.20backwards-incompatible.20changes.20to.20Lean/near/188626181\" title=\"#narrow/stream/113488-general/topic/Making.20backwards-incompatible.20changes.20to.20Lean/near/188626181\">said</a>:</p>\n<blockquote>\n<p>It's probably a good idea to keep a branch of mathlib updated to Lean nightlies, so we don't have to make these fixes all at once.</p>\n</blockquote>\n<p>I think we don't want to keep two versions of mathlib up to date. That will result in a headache of merge conflicts, especially if some of these \"Lean-compatibility\" changes touch 100+ files.</p>\n<p>I think we should bump the Lean version frequently for mathlib.</p>",
        "id": 188663978,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1582223322
    },
    {
        "content": "<p>If someone will rewrite <code>notation</code> for <code>{a, b, ...}</code>, then I'm ready to fix compile failures.</p>",
        "id": 188664767,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1582223812
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> Yes please re: making comp semireducible</p>",
        "id": 188676074,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582231724
    },
    {
        "content": "<p>This will finally allow us to have not completely useless typeclass inference for things like unbundled group/ring homs and continuous functions</p>",
        "id": 188676144,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582231775
    },
    {
        "content": "<p>Comp should only reduce when it is applied to an argument</p>",
        "id": 188676229,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582231816
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> removes discrete fields: <a href=\"https://github.com/leanprover-community/lean/pull/119\" target=\"_blank\" title=\"https://github.com/leanprover-community/lean/pull/119\">https://github.com/leanprover-community/lean/pull/119</a></p>",
        "id": 188690952,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1582242024
    },
    {
        "content": "<p>Which \"primed\" tactics should be moved to Lean core?</p>",
        "id": 188691918,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1582242934
    },
    {
        "content": "<p>All of them, I think</p>",
        "id": 188695867,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582247366
    },
    {
        "content": "<blockquote>\n<p>Yes please re: making comp semireducible</p>\n</blockquote>\n<p>Does anybody want to make a PR for this?</p>",
        "id": 188717884,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1582279676
    },
    {
        "content": "<blockquote>\n<p>I think we should bump the Lean version frequently for mathlib.</p>\n</blockquote>\n<p>I agree.  I don't want to let the two diverge too much either.  In fact, I would like to make a 3.6 release next week.  I'm happy to do a 3.7 release shortly after if there's still changes left.</p>",
        "id": 188719017,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1582280626
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span> adds the mathlib fixes to the well-foundedness tactics: <a href=\"https://github.com/leanprover-community/lean/pull/121\" target=\"_blank\" title=\"https://github.com/leanprover-community/lean/pull/121\">https://github.com/leanprover-community/lean/pull/121</a></p>",
        "id": 188719100,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1582280666
    },
    {
        "content": "<p>Since we seem to be frantically modifying the community fork, should we try to merge <code>leanpkg</code> and our mathlib tools? Users are very confused by the number of tools. For instance creating a new project depending on mathlib needs a crazy number of commands.</p>",
        "id": 188724163,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1582285296
    },
    {
        "content": "<p>Commands that are in Lean proper also need to be supported by elan.</p>",
        "id": 188724241,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1582285359
    },
    {
        "content": "<p>elan is one of the commands that need to be merged.</p>",
        "id": 188724265,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1582285389
    },
    {
        "content": "<p>For instance, how many commands are there for Rust users? Isn't all <code>cargo action arguments</code>?</p>",
        "id": 188724288,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1582285433
    },
    {
        "content": "<p>oh no, there is also <code>rustup</code>.</p>",
        "id": 188724454,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1582285585
    },
    {
        "content": "<p>I'm sure we can do better.</p>",
        "id": 188724466,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1582285600
    },
    {
        "content": "<p>What do we want to do with <code>discrete_linear_ordered_field</code> and the like. The decidability in these structures is used to define <code>abs</code>, <code>max</code> etc? I wouldn't mind the definition of <code>max</code> and <code>abs</code> being part of the structure instead of decidability.</p>",
        "id": 188727568,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1582288934
    },
    {
        "content": "<p>I think we should just rename them to <code>decidable_linear_ordered_field</code> for consistency with the others</p>",
        "id": 188750193,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582303673
    },
    {
        "content": "<p>I think there is a decent argument for having <code>division_ring</code> and <code>field</code> inherit from <code>decidable_eq</code> since you need equality with zero to prove anything, and in every relevant case either the structure is actually decidable (like rat) or we are in mathematician mode and everything is (like real)</p>",
        "id": 188750609,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582303923
    },
    {
        "content": "<p>Those decidable assumption still caused a huge messed with linear algebra and polynomials.</p>",
        "id": 188751464,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1582304431
    },
    {
        "content": "<p>I made a list of primed tactics <a href=\"https://github.com/leanprover-community/lean/issues/124\" target=\"_blank\" title=\"https://github.com/leanprover-community/lean/issues/124\">here</a>. There are some where I'm not sure whether the primed version should replace the original version, so if anyone wants to take a look, it'd be greatly appreciated.</p>",
        "id": 188794856,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1582340626
    },
    {
        "content": "<p>Another question: would it be possible to fix the issue that prevents certain commands from being used immediately after the imports?</p>",
        "id": 188895577,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1582513091
    },
    {
        "content": "<p>It's a parsing problem. It's impossible to distinguish <code>import file newly_declared_notation</code> from an import of <code>file</code> and also the file <code>newly_declared_notation</code>, or an import of <code>file</code> followed by a user command called <code>newly_declared_notation</code></p>",
        "id": 188895670,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582513264
    },
    {
        "content": "<p>I think it would be best if <code>import</code> permitted a trailing dot to end the command, like you can do with <code>def</code> and <code>theorem</code></p>",
        "id": 188895685,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582513312
    }
]