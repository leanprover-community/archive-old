[
    {
        "content": "<p>In the code below, why does <code>part1</code> typecheck but <code>part1'</code> give an error that I must prove <code>decidable_pred increasing</code>? How do I approach proving <code>decidable_pred increasing</code>?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">infixes</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">vector</span> <span class=\"n\">ℕ</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">hd</span> <span class=\"o\">::</span> <span class=\"n\">tl</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"k\">let</span> <span class=\"n\">sub</span> <span class=\"o\">:=</span> <span class=\"n\">list.take</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">hd</span> <span class=\"o\">::</span> <span class=\"n\">tl</span><span class=\"o\">)</span> <span class=\"k\">in</span>\n    <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">sub.length</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"k\">then</span>\n      <span class=\"o\">⟨</span> <span class=\"n\">sub</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"o\">⟩</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">infixes</span> <span class=\"n\">tl</span><span class=\"o\">)</span>\n    <span class=\"k\">else</span> <span class=\"o\">[]</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"o\">[]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">part1</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">vector</span> <span class=\"n\">ℕ</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">list.pairwise</span> <span class=\"o\">(</span><span class=\"bp\">&lt;</span><span class=\"o\">)</span> <span class=\"n\">x.val</span> <span class=\"k\">in</span>\n  <span class=\"n\">list.length</span> <span class=\"o\">(</span><span class=\"n\">list.filter</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">infixes</span> <span class=\"mi\">2</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">increasing</span> <span class=\"o\">:</span> <span class=\"n\">vector</span> <span class=\"n\">ℕ</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n  <span class=\"bp\">|</span> <span class=\"o\">⟨</span> <span class=\"n\">items</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">list.pairwise</span> <span class=\"o\">(</span><span class=\"bp\">&lt;</span><span class=\"o\">)</span> <span class=\"n\">items</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">part1'</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n  <span class=\"n\">list.length</span> <span class=\"o\">(</span><span class=\"n\">list.filter</span> <span class=\"n\">increasing</span> <span class=\"o\">(</span><span class=\"n\">infixes</span> <span class=\"mi\">2</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 264488024,
        "sender_full_name": "Joshua E Cook",
        "timestamp": 1639160663
    },
    {
        "content": "<p>Will you actually be executing these functions or do you want to just conceptually prove things about them?</p>",
        "id": 264488302,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1639160770
    },
    {
        "content": "<p>I'm executing them. (This is my attempt at better learning Lean by solving Advent of Code problems.)</p>",
        "id": 264488452,
        "sender_full_name": "Joshua E Cook",
        "timestamp": 1639160838
    },
    {
        "content": "<p>list.filter works by evaluating the function that you give it as a predicate to branch on. You have to provide an instance proving that for any vector nat 2, increasing can be computed into a tt or ff value. In this particular case, it'll probably be just relying on existing instance that days that list.pairwise is decidable if the underlying relation is decidable. I'm sure that's somewhere in mathlib</p>",
        "id": 264488755,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1639160974
    },
    {
        "content": "<p>I'd recommend not defining <code>increasing</code> with a pattern match like that</p>",
        "id": 264491042,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639162007
    },
    {
        "content": "<p>Those pattern matches get in the way of lots of automation</p>",
        "id": 264491065,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639162018
    },
    {
        "content": "<p>This works fine:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">increasing</span> <span class=\"o\">(</span><span class=\"n\">items</span> <span class=\"o\">:</span> <span class=\"n\">vector</span> <span class=\"n\">ℕ</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">list.pairwise</span> <span class=\"o\">(</span><span class=\"bp\">&lt;</span><span class=\"o\">)</span> <span class=\"n\">items.val</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">decidable_pred</span> <span class=\"n\">increasing</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">list.decidable_pairwise</span> <span class=\"n\">l.val</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">part1'</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n  <span class=\"n\">list.length</span> <span class=\"o\">(</span><span class=\"n\">list.filter</span> <span class=\"n\">increasing</span> <span class=\"o\">(</span><span class=\"n\">infixes</span> <span class=\"mi\">2</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 264491408,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639162184
    }
]