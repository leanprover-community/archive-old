[
    {
        "content": "<p>A meta programming question:  How would one recreate <code>trace_state</code> without using the built in formatter for the <code>tactic_state</code> type?  I'm mostly interested in getting information found in <code>trace_state</code>, i.e. the context and targets for the other goals besides the current one, and not in the actual recreation of the trace_state.  This code for example gets all the information for the current goal, but not for the other goals:</p>\n<div class=\"codehilite\"><pre><span></span>meta def trace_current_goal : tactic unit :=\ndo\n goal ← tactic.target,\n local_cxt ← tactic.local_context,\n local_cxt_types ← list.mmap tactic.infer_type local_cxt,\n let s := &quot;Goal: &quot; ++ (to_string goal) ++ &quot;\\nLocal Context: &quot;++ (to_string local_cxt) ++ &quot;\\nLocal Context Types: &quot; ++(to_string local_cxt_types),\n tractic.trace s,\nreturn ()\n</pre></div>",
        "id": 186646401,
        "sender_full_name": "Jason Rute",
        "timestamp": 1580088043
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"115715\">@Jason Rute</span> <code>tactic.target</code> is a shorthand for <code>(list.head &lt;$&gt; get_goals) &gt;&gt;= infer_type</code>. If you want the other goals, call <code>get_goals</code> directly</p>",
        "id": 186652170,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1580098844
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> how do I get the local_context for the other goals?  What is <code>tactic.local_context</code> shorthand for?  Is this documented anywhere?</p>",
        "id": 186680301,
        "sender_full_name": "Jason Rute",
        "timestamp": 1580131232
    },
    {
        "content": "<p><code>local_context</code> is implemented in c++, it's hard coded to give the context of the first goal. I'm not 100% sure this is robust, but you can typically do something like this (build whatever data structure you want instead of tracing).</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">do</span>\n  <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">refine</span> <span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span><span class=\"o\">],</span> <span class=\"c1\">-- give ourselves two goals with different local contexts</span>\n  <span class=\"n\">trace_state</span><span class=\"o\">,</span>\n  <span class=\"n\">gs</span> <span class=\"err\">←</span> <span class=\"n\">get_goals</span><span class=\"o\">,</span>\n  <span class=\"n\">gs</span><span class=\"bp\">.</span><span class=\"n\">mmap&#39;</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">set_goals</span> <span class=\"o\">[</span><span class=\"n\">g</span><span class=\"o\">]</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">local_context</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">trace</span><span class=\"o\">,</span>\n  <span class=\"n\">set_goals</span> <span class=\"n\">gs</span><span class=\"o\">,</span>\n  <span class=\"n\">trace_state</span>\n</pre></div>",
        "id": 186681617,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1580132276
    }
]