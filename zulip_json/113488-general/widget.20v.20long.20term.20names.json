[
    {
        "content": "<p>It's taken me a while, but I finally figured out how to close a textbox coming from the widgets when it is so big that the \"close\" icon is way off the screen.</p>\n<p><a href=\"user_uploads/3121/KaYuaZtJy-YyYsldDzhj-ksU/catlong.gif\">catlong.gif</a></p>\n<div class=\"message_inline_image\"><a href=\"user_uploads/3121/KaYuaZtJy-YyYsldDzhj-ksU/catlong.gif\" title=\"catlong.gif\"><img src=\"user_uploads/3121/KaYuaZtJy-YyYsldDzhj-ksU/catlong.gif\"></a></div><p>Am I missing a trick here? I could have not expanded the right hand window I guess.</p>",
        "id": 215329661,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1604329398
    },
    {
        "content": "<p>cc: <span class=\"user-mention\" data-user-id=\"121918\">@Edward Ayers</span></p>",
        "id": 215329952,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1604329510
    },
    {
        "content": "<p>oof</p>",
        "id": 215332513,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1604330537
    },
    {
        "content": "<p>that's horrible I'm sorry</p>",
        "id": 215332554,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1604330553
    },
    {
        "content": "<p>A max-width needs to be set somewhere.</p>",
        "id": 215332779,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1604330647
    },
    {
        "content": "<p>Is the file you are editing availbs on a mathlib branch somewhere?</p>",
        "id": 215332833,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1604330671
    },
    {
        "content": "<p>I don't know how to make screenshot gifs like this, but I think you can toggle this textbox by clicking the same text you clicked to open it.</p>",
        "id": 215333879,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1604331096
    },
    {
        "content": "<p>That's true, but what happens with horizontal scrolling in the screenshot is still rather unintuitive.</p>",
        "id": 215334564,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1604331374
    },
    {
        "content": "<p>Of course, I agree.</p>",
        "id": 215334989,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1604331565
    },
    {
        "content": "<p>But it's a trick that works in the meantime :)</p>",
        "id": 215335015,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1604331576
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"121918\">@Edward Ayers</span> if you replace src/topology/sheaves/sheafify.lean with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">Copyright (c) 2020 Scott Morrison. All rights reserved.</span>\n<span class=\"cm\">Released under Apache 2.0 license as described in the file LICENSE.</span>\n<span class=\"cm\">Authors: Scott Morrison</span>\n<span class=\"cm\">-/</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology.sheaves.local_predicate</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology.sheaves.stalks</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">!</span>\n<span class=\"cm\"># Sheafification of `Type` valued presheaves</span>\n\n<span class=\"cm\">We construct the sheafification of a `Type` valued presheaf,</span>\n<span class=\"cm\">as the subsheaf of dependent functions into the stalks</span>\n<span class=\"cm\">consisting of functions which are locally germs.</span>\n\n<span class=\"cm\">We show that the stalks of the sheafification are isomorphic to the original stalks,</span>\n<span class=\"cm\">via `stalk_to_fiber` which evaluates a germ of a dependent function at a point.</span>\n\n<span class=\"cm\">We construct a morphism `to_sheafify` from a presheaf to (the underlying presheaf of)</span>\n<span class=\"cm\">its sheafification, given by sending a section to its collection of germs.</span>\n\n<span class=\"cm\">## Future work</span>\n<span class=\"cm\">Show that the map induced on stalks by `to_sheafify` is the inverse of `stalk_to_fiber`.</span>\n\n<span class=\"cm\">Show sheafification is a functor from presheaves to sheaves,</span>\n<span class=\"cm\">and that it is the left adjoint of the forgetful functor,</span>\n<span class=\"cm\">following https://stacks.math.columbia.edu/tag/007X.</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">v</span>\n\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Top</span>\n<span class=\"kn\">open</span> <span class=\"n\">opposite</span>\n<span class=\"kn\">open</span> <span class=\"n\">topological_space</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">Top.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}}</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">presheaf</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Top.presheaf</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">sheafify</span>\n\n<span class=\"sd\">/--</span>\n<span class=\"sd\">The prelocal predicate on functions into the stalks, asserting that the function is equal to a germ.</span>\n<span class=\"sd\">-/</span>\n<span class=\"kd\">def</span> <span class=\"n\">is_germ</span> <span class=\"o\">:</span> <span class=\"n\">prelocal_predicate</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">F.stalk</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">pred</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">U</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">F.obj</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">U</span><span class=\"o\">)),</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">F.germ</span> <span class=\"n\">x</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n  <span class=\"n\">res</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">V</span> <span class=\"n\">U</span> <span class=\"n\">i</span> <span class=\"n\">f</span> <span class=\"o\">⟨</span><span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">p</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨</span><span class=\"n\">F.map</span> <span class=\"n\">i.op</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">x</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">F.germ_res_apply</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">⟩,</span> <span class=\"o\">}</span>\n\n<span class=\"sd\">/--</span>\n<span class=\"sd\">The local predicate on functions into the stalks,</span>\n<span class=\"sd\">asserting that the function is locally equal to a germ.</span>\n<span class=\"sd\">-/</span>\n<span class=\"kd\">def</span> <span class=\"n\">is_locally_germ</span> <span class=\"o\">:</span> <span class=\"n\">local_predicate</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">F.stalk</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">is_germ</span> <span class=\"n\">F</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sheafify</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">sheafify</span>\n\n<span class=\"sd\">/--</span>\n<span class=\"sd\">The sheafification of a `Type` valued presheaf, defined as the functions into the stalks which</span>\n<span class=\"sd\">are locally equal to germs.</span>\n<span class=\"sd\">-/</span>\n<span class=\"kd\">def</span> <span class=\"n\">sheafify</span> <span class=\"o\">:</span> <span class=\"n\">sheaf</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">X</span> <span class=\"o\">:=</span>\n<span class=\"n\">subsheaf_to_Types</span> <span class=\"o\">(</span><span class=\"n\">sheafify.is_locally_germ</span> <span class=\"n\">F</span><span class=\"o\">)</span>\n\n<span class=\"sd\">/--</span>\n<span class=\"sd\">The morphism from a presheaf to its sheafification,</span>\n<span class=\"sd\">sending each section to its germs.</span>\n<span class=\"sd\">(This forms the unit of the adjunction.)</span>\n<span class=\"sd\">-/</span>\n<span class=\"kd\">def</span> <span class=\"n\">to_sheafify</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">⟶</span> <span class=\"n\">F.sheafify.presheaf</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">app</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">U</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">F.germ</span> <span class=\"n\">x</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">prelocal_predicate.sheafify_of</span> <span class=\"o\">⟨</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩⟩,</span>\n  <span class=\"n\">naturality'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">U</span> <span class=\"n\">U'</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">ext</span> <span class=\"n\">x</span> <span class=\"o\">⟨</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">m</span><span class=\"o\">⟩,</span> <span class=\"n\">apply</span> <span class=\"n\">germ_res_apply'</span><span class=\"o\">,</span> <span class=\"o\">},</span> <span class=\"o\">}</span>\n\n<span class=\"sd\">/--</span>\n<span class=\"sd\">The natural morphism from the stalk of the sheafification to the original stalk.</span>\n<span class=\"sd\">In `sheafify_stalk_iso` we show this is an isomorphism.</span>\n<span class=\"sd\">-/</span>\n<span class=\"kd\">def</span> <span class=\"n\">stalk_to_fiber</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">F.sheafify.presheaf.stalk</span> <span class=\"n\">x</span> <span class=\"bp\">⟶</span> <span class=\"n\">F.stalk</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"n\">stalk_to_fiber</span> <span class=\"o\">(</span><span class=\"n\">sheafify.is_locally_germ</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"n\">x</span>\n\n<span class=\"c1\">-- TODO typo in surjective docstring</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">stalk_to_fiber_surjective</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">function.surjective</span> <span class=\"o\">(</span><span class=\"n\">F.stalk_to_fiber</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">stalk_to_fiber_surjective</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">F.germ_exist</span> <span class=\"n\">_</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">use</span> <span class=\"o\">⟨</span><span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">m</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">fsplit</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"bp\">λ</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">F.germ</span> <span class=\"n\">y</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">prelocal_predicate.sheafify_of</span> <span class=\"o\">⟨</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">)⟩,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span> <span class=\"o\">},</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">stalk_to_fiber_injective</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">function.injective</span> <span class=\"o\">(</span><span class=\"n\">F.stalk_to_fiber</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">stalk_to_fiber_injective</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span><span class=\"o\">,</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">hU</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">U.2</span><span class=\"o\">⟩</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">U'</span><span class=\"o\">,</span> <span class=\"n\">mU</span><span class=\"o\">,</span> <span class=\"n\">iU</span><span class=\"o\">,</span> <span class=\"n\">gU</span><span class=\"o\">,</span> <span class=\"n\">wU</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">hV</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">V.2</span><span class=\"o\">⟩</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">V'</span><span class=\"o\">,</span> <span class=\"n\">mV</span><span class=\"o\">,</span> <span class=\"n\">iV</span><span class=\"o\">,</span> <span class=\"n\">gV</span><span class=\"o\">,</span> <span class=\"n\">wV</span><span class=\"o\">⟩,</span>\n  <span class=\"k\">have</span> <span class=\"n\">wUx</span> <span class=\"o\">:=</span> <span class=\"n\">wU</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">mU</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">dsimp</span> <span class=\"n\">at</span> <span class=\"n\">wUx</span><span class=\"o\">,</span> <span class=\"n\">erw</span> <span class=\"n\">wUx</span> <span class=\"n\">at</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">clear</span> <span class=\"n\">wUx</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">wVx</span> <span class=\"o\">:=</span> <span class=\"n\">wV</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">mV</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">dsimp</span> <span class=\"n\">at</span> <span class=\"n\">wVx</span><span class=\"o\">,</span> <span class=\"n\">erw</span> <span class=\"n\">wVx</span> <span class=\"n\">at</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">clear</span> <span class=\"n\">wVx</span><span class=\"o\">,</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">F.germ_eq</span> <span class=\"n\">x</span> <span class=\"n\">mU</span> <span class=\"n\">mV</span> <span class=\"n\">gU</span> <span class=\"n\">gV</span> <span class=\"n\">e</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">W</span><span class=\"o\">,</span> <span class=\"n\">mW</span><span class=\"o\">,</span> <span class=\"n\">iU'</span><span class=\"o\">,</span> <span class=\"n\">iV'</span><span class=\"o\">,</span> <span class=\"n\">e'</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">use</span> <span class=\"o\">⟨</span><span class=\"n\">W</span> <span class=\"bp\">⊓</span> <span class=\"o\">(</span><span class=\"n\">U'</span> <span class=\"bp\">⊓</span> <span class=\"n\">V'</span><span class=\"o\">),</span> <span class=\"o\">⟨</span><span class=\"n\">mW</span><span class=\"o\">,</span> <span class=\"n\">mU</span><span class=\"o\">,</span> <span class=\"n\">mV</span><span class=\"o\">⟩⟩,</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n  <span class=\"o\">{</span> <span class=\"n\">change</span> <span class=\"n\">W</span> <span class=\"bp\">⊓</span> <span class=\"o\">(</span><span class=\"n\">U'</span> <span class=\"bp\">⊓</span> <span class=\"n\">V'</span><span class=\"o\">)</span> <span class=\"bp\">⟶</span> <span class=\"n\">U.val</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">opens.inf_le_right</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">≫</span> <span class=\"o\">(</span><span class=\"n\">opens.inf_le_left</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">≫</span> <span class=\"n\">iU</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">change</span> <span class=\"n\">W</span> <span class=\"bp\">⊓</span> <span class=\"o\">(</span><span class=\"n\">U'</span> <span class=\"bp\">⊓</span> <span class=\"n\">V'</span><span class=\"o\">)</span> <span class=\"bp\">⟶</span> <span class=\"n\">V.val</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">opens.inf_le_right</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">≫</span> <span class=\"o\">(</span><span class=\"n\">opens.inf_le_right</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">≫</span> <span class=\"n\">iV</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">w</span><span class=\"o\">,</span>\n    <span class=\"n\">dsimp</span> <span class=\"n\">only</span><span class=\"o\">,</span>\n    <span class=\"n\">specialize</span> <span class=\"n\">wU</span> <span class=\"o\">⟨</span><span class=\"n\">w.1</span><span class=\"o\">,</span> <span class=\"n\">w.2.2.1</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"n\">at</span> <span class=\"n\">wU</span><span class=\"o\">,</span>\n    <span class=\"n\">specialize</span> <span class=\"n\">wV</span> <span class=\"o\">⟨</span><span class=\"n\">w.1</span><span class=\"o\">,</span> <span class=\"n\">w.2.2.2</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"n\">at</span> <span class=\"n\">wV</span><span class=\"o\">,</span>\n    <span class=\"n\">erw</span> <span class=\"o\">[</span><span class=\"n\">wU</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">F.germ_res_apply</span> <span class=\"n\">iU'</span> <span class=\"o\">⟨</span><span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"n\">w.2.1</span><span class=\"o\">⟩</span> <span class=\"n\">gU</span><span class=\"o\">,</span> <span class=\"n\">e'</span><span class=\"o\">,</span> <span class=\"n\">F.germ_res_apply</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">wV</span><span class=\"o\">],</span>\n    <span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"sd\">/--</span>\n<span class=\"sd\">The isomorphism betweeen a stalk of the sheafification and the original stalk.</span>\n<span class=\"sd\">-/</span>\n<span class=\"kd\">def</span> <span class=\"n\">sheafify_stalk_iso</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">F.sheafify.presheaf.stalk</span> <span class=\"n\">x</span> <span class=\"bp\">≅</span> <span class=\"n\">F.stalk</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">equiv.of_bijective</span> <span class=\"n\">_</span> <span class=\"o\">⟨</span><span class=\"n\">stalk_to_fiber_injective</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">stalk_to_fiber_surjective</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">⟩)</span><span class=\"bp\">.</span><span class=\"n\">to_iso</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">! # Functoriality -/</span>\n\n<span class=\"c1\">-- If F is a presheaf and G is a sheaf on X,</span>\n<span class=\"c1\">-- and F → G.presheaf, then F.sheafify → G</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">adjoint</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">presheaf</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">sheaf</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">⟶</span> <span class=\"n\">G.presheaf</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">F.sheafify</span> <span class=\"bp\">⟶</span> <span class=\"n\">G</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">app</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">cases</span> <span class=\"n\">s</span> <span class=\"k\">with</span> <span class=\"n\">stalk_fun</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n    <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"n\">at</span> <span class=\"n\">stalk_fun</span><span class=\"o\">,</span>\n<span class=\"c1\">--    unfold sheafify.is_locally_germ at hs,</span>\n<span class=\"c1\">--    unfold sheafify.is_germ at hs,</span>\n<span class=\"c1\">--    unfold prelocal_predicate.sheafify at hs,</span>\n<span class=\"c1\">--    dsimp at hs,</span>\n    <span class=\"k\">have</span> <span class=\"n\">hG</span> <span class=\"o\">:=</span> <span class=\"n\">G.sheaf_condition</span><span class=\"o\">,</span>\n<span class=\"c1\">--    unfold sheaf_condition at hG,</span>\n    <span class=\"n\">choose</span> <span class=\"n\">cover</span> <span class=\"n\">hcover1</span> <span class=\"n\">hcover2</span> <span class=\"n\">sections</span> <span class=\"n\">hcover4</span> <span class=\"n\">using</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n    <span class=\"n\">specialize</span> <span class=\"n\">hG</span> <span class=\"n\">cover</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- hG is the sheaf condition</span>\n    <span class=\"c1\">-- so it says G(union of cover) = limit of fork Prod_i G(U_i) -&gt; -&gt; Prod_{i,j} G(U_i ∩ U_j)</span>\n    <span class=\"c1\">-- let's define this section!</span>\n    <span class=\"c1\">-- let's first define the local sections</span>\n    <span class=\"k\">let</span> <span class=\"n\">ti</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">unop</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">G.presheaf.obj</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"o\">(</span><span class=\"n\">cover</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">φ.app</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">sections</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n    <span class=\"n\">cases</span> <span class=\"n\">hG</span><span class=\"o\">,</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">auto_param</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- BIG BOX : click on \"category_theory.limits.cone\"</span>\n    <span class=\"c1\">-- in term hG_lift</span>\n    <span class=\"n\">sorry</span><span class=\"o\">,</span>\n    <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">naturality'</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span> <span class=\"o\">}</span>\n\n<span class=\"k\">#exit</span>\n</code></pre></div>\n<p>then you can click on the term which I describe a few lines from the bottom</p>",
        "id": 215337091,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1604332434
    },
    {
        "content": "<p>tracking PR: <a href=\"https://github.com/leanprover-community/mathlib/issues/4882\">#4882</a></p>",
        "id": 215389177,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1604356836
    }
]