[
    {
        "content": "<p>It would be nice if instead of writing</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- The supremum of congruence relations `c, d` equals the smallest congruence relation containing</span>\n<span class=\"sd\">    the binary relation '`x` is related to `y` by `c` or `d`'. -/</span>\n<span class=\"kd\">@[to_additive sup_eq_add_con_gen \"The supremum of additive congruence relations `c, d` equals the</span>\n<span class=\"kd\">smallest additive congruence relation containing the binary relation '`x` is related to `y`</span>\n<span class=\"kd\">by `c` or `d`'.\"]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">sup_eq_con_gen</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">con</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>\n\n<p>we could write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- The supremum of congruence relations `c, d` equals the smallest congruence relation containing</span>\n<span class=\"sd\">    the binary relation '`x` is related to `y` by `c` or `d`'. -/</span>\n<span class=\"kd\">@[to_additive sup_eq_add_con_gen (doc.replace \"congruence\" \"additive congruence\")]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">sup_eq_con_gen</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">con</span> <span class=\"n\">M</span><span class=\"o\">)</span>  <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>\n\n<p>to avoid repeating docstrings.</p>\n<p>I'm trying to do this myself, but I've immediately run into two problems</p>\n<ul>\n<li>Is there really no <code>string.replace</code> built in anywhere?</li>\n<li>How can I set the value of <code>doc</code> before evaluating the expression <code>(doc.replace \"congruence\" \"additive congruence\")</code>?</li>\n</ul>",
        "id": 210866418,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1600779811
    },
    {
        "content": "<p>This would be very nice. For your second question, I assume this is happening in the <code>after_set</code> method of <code>to_additive</code>? You can do something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">tactic</span>\n<span class=\"kd\">@[user_attribute]</span> <span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">user_attribute</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"n\">foo</span><span class=\"o\">,</span>\n  <span class=\"n\">descr</span> <span class=\"o\">:=</span> <span class=\"s2\">\"\"</span><span class=\"o\">,</span>\n  <span class=\"n\">after_set</span> <span class=\"o\">:=</span> <span class=\"n\">some</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"k\">do</span> <span class=\"n\">d</span> <span class=\"bp\">←</span> <span class=\"n\">doc_string</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">trace</span> <span class=\"n\">d</span> <span class=\"o\">}</span>\n\n<span class=\"sd\">/--hi-/</span>\n<span class=\"kd\">@[foo]</span> <span class=\"kd\">def</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span>\n</code></pre></div>",
        "id": 210867281,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1600780257
    },
    {
        "content": "<p>I don't know if <code>string.replace</code> has been implemented but in general there's not a huge API around <code>string</code>.</p>",
        "id": 210867429,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1600780334
    },
    {
        "content": "<p>Right, I know how to get the value of the docstring, and of the expression - what I can't work out is how to programatically create the expression<br>\n<code>let doc := ${old doc string} in ${attr argument expression}</code></p>",
        "id": 210867456,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1600780352
    },
    {
        "content": "<p>Part of the problem is I've forgotten the various expression quoting mechanisms, and the lean manual is blank on the pages about those.</p>",
        "id": 210867559,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1600780428
    },
    {
        "content": "<p>I'm not quite sure what you're asking. <code>@[to_additive]</code> is applied to some declaration <code>mul_thing</code>. The <code>after_set</code> method of the <code>to_additive</code> attribute creates a declaration <code>add_thing</code>. You can do <code>d &lt;- doc_string `mul_thing, add_doc_string `add_thing (d.replace whatever)</code></p>",
        "id": 210867914,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1600780634
    },
    {
        "content": "<p>My question is, if I have the <code>string</code> <code>\"hello world\"</code>, and the <code>expr</code> <code>doc.replace \"hello\" \"goodbye\"</code>, how do I obtain the  <code>expr</code> <code>let doc := \"hello world\" in doc.replace \"hello\" \"goodbye\"</code> which I can pass to <code>eval_expr</code> to get <code>string</code> <code>\"goodbye world\"</code>?</p>",
        "id": 210868130,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1600780755
    },
    {
        "content": "<p>Why is <code>doc.replace \"hello\" \"goodbye\"</code> an <code>expr</code>?</p>",
        "id": 210868198,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1600780796
    },
    {
        "content": "<p>Because it's an argument to <code>to_additive</code>, which gets parsed as an <code>expr</code> and then evaluated to a <code>string</code>.</p>",
        "id": 210868313,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1600780837
    },
    {
        "content": "<p>I want to add an intermediate step where <code>doc</code> is first substituted for the current docstring before the expression is evaluated</p>",
        "id": 210868378,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1600780873
    },
    {
        "content": "<p>I'm still kind of confused. You have a function <code>addify : string -&gt; string</code> that turns a multiplicative doc string to an additive one, right?</p>",
        "id": 210868963,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1600781153
    },
    {
        "content": "<p>There's some line in <code>to_additive</code> that takes a string, not an expr, and sets the doc string for the new additive decl to that string.</p>",
        "id": 210869050,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1600781179
    },
    {
        "content": "<p><code>to_additive.parser</code> contains a step that converts the docstring argument from a <code>pexpr</code> to a <code>string</code></p>",
        "id": 210869178,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1600781255
    },
    {
        "content": "<p><code>eval_expr string</code>?</p>",
        "id": 210869208,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1600781269
    },
    {
        "content": "<p>That + <code>to_expr</code>, yes</p>",
        "id": 210869277,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1600781291
    },
    {
        "content": "<p>I want to change that step to produce a <code>string \\to string</code></p>",
        "id": 210869309,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1600781306
    },
    {
        "content": "<p>But that means I need to introduce a name binding for <code>doc</code> within that expression</p>",
        "id": 210869334,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1600781321
    },
    {
        "content": "<p>I think you're really overcomplicating things</p>",
        "id": 210869452,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1600781402
    },
    {
        "content": "<p>Maybe just take a list of substitutions?</p>",
        "id": 210869501,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1600781410
    },
    {
        "content": "<p>Perhaps, but I'd like to understand how to do this the way I describe even if the resulting API is undesirable</p>",
        "id": 210869766,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1600781543
    },
    {
        "content": "<p>My hunch is I want to do something like use <code>to_expr `(λ doc, %%pe)` </code> instead of <code> to_expr pe </code> within <code>to_additive.parser</code>, but I have no idea if that is correct use of <code>%%</code>, or where I can even find documentation on<code>%%</code>.</p>",
        "id": 210869872,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1600781605
    },
    {
        "content": "<p>That should approximately work, I think there are complications with dot notation. Antiquotes are covered e.g. <a href=\"https://leanprover-community.github.io/extras/tactic_writing.html\">here</a></p>",
        "id": 210870340,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1600781820
    },
    {
        "content": "<p>Thanks, that page was what I was looking for</p>",
        "id": 210871101,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1600782134
    },
    {
        "content": "<p>How do I find a list of such pages? <a href=\"https://leanprover-community.github.io/extras\">https://leanprover-community.github.io/extras</a> is unfortunately not an index page</p>",
        "id": 210871178,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1600782168
    },
    {
        "content": "<p>It's linked <a href=\"https://leanprover-community.github.io/learn.html\">here</a> along with many other resources, and from the mathlib docs</p>",
        "id": 210871386,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1600782267
    },
    {
        "content": "<p>Thanks for the help</p>",
        "id": 210871441,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1600782304
    }
]