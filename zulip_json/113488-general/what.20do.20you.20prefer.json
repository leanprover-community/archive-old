[
    {
        "content": "<p>what do you prefer, the equation compiler or the induction tactic? sometimes I find the equation compiler more flexible, like I can exploit well-founded recursion to prove theorems and I don't have to explicitly generalize variables</p>",
        "id": 244864210,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1625411952
    },
    {
        "content": "<p>I used to say lemma, but now I have to say \"theorem\". Lean 4 is literally Newspeak.</p>",
        "id": 244864283,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1625412017
    },
    {
        "content": "<p>For <code>def</code>s, the equation compiler produces helpful lemmas you wouldn't get if you used <code>induction</code></p>",
        "id": 244865215,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625413531
    },
    {
        "content": "<p>However, there are lots of cases where the equation compiler picks <code>brec</code> and induction picks <code>rec</code>, and IIRC the later is computationally faster</p>",
        "id": 244865264,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625413584
    },
    {
        "content": "<p>Mario might be able to expand on that last point</p>",
        "id": 244865271,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625413619
    },
    {
        "content": "<p>I almost always use <code>induction</code> for proofs. I think the only situations where I found the equation compiler preferable are like this. Say you want to prove something by induction on both <code>n m : nat</code> and the only interesting case is the pattern <code>n (n + 1)</code>, while the other cases are trivially impossible (and therefore trivially true by exfalso). Then using the equation compiler I could get away with just writing the interesting pattern, and it would just figure out the other cases by itself, without me having to write them.</p>",
        "id": 244867065,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1625416538
    }
]