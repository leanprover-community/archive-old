[
    {
        "content": "<p>I thought I had this nailed, until test3. What is the preferred way of telling <code>ext</code> how to work? Or should every structure have at most one lemma tagged <code>@[ext]</code>?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">ext</span><span class=\"o\">]</span> <span class=\"kn\">structure</span> <span class=\"n\">submonoid</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">carrier</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">mul_mem&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">},</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">carrier</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"err\">∈</span> <span class=\"n\">carrier</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"err\">∈</span> <span class=\"n\">carrier</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">one_mem&#39;</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"err\">∈</span> <span class=\"n\">carrier</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">submonoid</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">ext</span> <span class=\"c1\">-- ∀ (x y : submonoid ?M_1), x.carrier = y.carrier → x = y</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_mem</span> <span class=\"n\">G</span> <span class=\"o\">(</span><span class=\"n\">submonoid</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨λ</span> <span class=\"n\">g</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"err\">∈</span> <span class=\"n\">H</span><span class=\"bp\">.</span><span class=\"n\">carrier</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">H</span> <span class=\"n\">J</span> <span class=\"o\">:</span> <span class=\"n\">submonoid</span> <span class=\"n\">G</span><span class=\"o\">}</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">ext</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">ext&#39;</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">H</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">J</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">H</span> <span class=\"bp\">=</span> <span class=\"n\">J</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">ext</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- ⊢ x ∈ H.carrier ↔ x ∈ J.carrier</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"c1\">-- I have no idea what the default priorities are</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">ext</span> <span class=\"c1\">-- @[_ext_lemma_core] blah</span>\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">ext&#39;</span> <span class=\"c1\">-- @[_ext_lemma_core, ext list.nil.{0} ext_param_type] blah</span>\n\n\n<span class=\"c1\">-- check that ext&#39; beats ext</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"n\">J</span> <span class=\"o\">:</span> <span class=\"n\">submonoid</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">H</span> <span class=\"bp\">=</span> <span class=\"n\">J</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">ext</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"c1\">-- ⊢ x ∈ H ↔ x ∈ J</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n\n<span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">priority</span> <span class=\"mi\">10</span><span class=\"o\">]</span> <span class=\"n\">ext&#39;</span>\n<span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">priority</span> <span class=\"mi\">10000</span><span class=\"o\">]</span> <span class=\"n\">ext</span>\n\n<span class=\"c1\">-- check that ext beats ext&#39; now</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">test2</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"n\">J</span> <span class=\"o\">:</span> <span class=\"n\">submonoid</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">H</span> <span class=\"bp\">=</span> <span class=\"n\">J</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">ext</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"c1\">-- ⊢ x ∈ H.carrier ↔ x ∈ J.carrier</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">ext</span> <span class=\"c1\">-- @[_ext_lemma_core, priority 10000, ext list.nil.{0} ext_param_type, priority 10000] blah</span>\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">ext&#39;</span> <span class=\"c1\">-- @[_ext_lemma_core, priority 10, ext list.nil.{0} ext_param_type, priority 10] blah</span>\n\n<span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">priority</span> <span class=\"mi\">10000</span><span class=\"o\">]</span> <span class=\"n\">ext&#39;</span>\n<span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">priority</span> <span class=\"mi\">10</span><span class=\"o\">]</span> <span class=\"n\">ext</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">ext</span> <span class=\"c1\">-- @[_ext_lemma_core, priority 10, ext list.nil.{0} ext_param_type, priority 10] blah</span>\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">ext&#39;</span> <span class=\"c1\">-- @[_ext_lemma_core, priority 10000, ext list.nil.{0} ext_param_type, priority 10000] blah</span>\n\n<span class=\"c1\">-- Wait -- ext is still beating ext&#39; ??</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">test3</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"n\">J</span> <span class=\"o\">:</span> <span class=\"n\">submonoid</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">H</span> <span class=\"bp\">=</span> <span class=\"n\">J</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">ext</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"c1\">-- ⊢ x ∈ H.carrier ↔ x ∈ J.carrier</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n\n<span class=\"c1\">-- let&#39;s try those same commands again the other way around</span>\n\n<span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">priority</span> <span class=\"mi\">10</span><span class=\"o\">]</span> <span class=\"n\">ext</span>\n<span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">priority</span> <span class=\"mi\">10000</span><span class=\"o\">]</span> <span class=\"n\">ext&#39;</span>\n\n<span class=\"c1\">-- no change in `#print` output</span>\n\n<span class=\"c1\">-- ext&#39; now beating ext again</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">test4</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"n\">J</span> <span class=\"o\">:</span> <span class=\"n\">submonoid</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">H</span> <span class=\"bp\">=</span> <span class=\"n\">J</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">ext</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"c1\">-- ⊢ x ∈ H ↔ x ∈ J</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">submonoid</span>\n</code></pre></div>",
        "id": 204295753,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595069688
    },
    {
        "content": "<p>Looking at the code for the <code>ext</code> attribute, it looks like the priority number is not actually used.</p>",
        "id": 204297004,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1595071920
    },
    {
        "content": "<p>Every attribute has a priority setting, but usually it doesn't do anything, and it look like <code>ext</code> is one of these attributes.</p>",
        "id": 204297051,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1595071976
    },
    {
        "content": "<p>The attribute is <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/tactic/ext.lean#L316\">here</a>. The <code>prio</code> argument is used once, but only to pass it to another attribute which doesn't use it.</p>",
        "id": 204297116,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1595072093
    },
    {
        "content": "<p>Yeah, I think it's just \"most recent wins\".</p>",
        "id": 204297134,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595072127
    },
    {
        "content": "<p>But fortunately re-tagging makes you more recent -- this is consistent with what we see. Thanks!</p>",
        "id": 204297824,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595073464
    }
]