[
    {
        "content": "<p>I'm having many problems with dot notation for stuff like <code>.trans</code> and <code>antisymm</code>. Did anything change fairly recently?<br>\nFor example</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">ℝ</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">E</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hA</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">⦄,</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">open_segment</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">⊆</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n  <span class=\"o\">⦃</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">⦄</span>\n  <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">open_segment</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">⊆</span> <span class=\"n\">convex_join</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">hA</span> <span class=\"n\">hx</span> <span class=\"n\">hy</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">subset_convex_join_left</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">),</span>\n  <span class=\"c1\">--fails while `hA hx hy : open_segment x y ⊆ A` and `subset_convex_join_left A B : A ⊆ convex_join A B`</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>The exact error is <code>invalid field notation, insufficient number of arguments for 'set.subset.trans'</code>.</p>",
        "id": 239546050,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1621495540
    },
    {
        "content": "<p>And <code>exact subset.trans (hA hx hy) (subset_convex_join_left A B),</code> works just fine.</p>",
        "id": 239546560,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1621495818
    },
    {
        "content": "<p>This cannot work because the lemma is not in the right namespace</p>",
        "id": 239548117,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1621496446
    },
    {
        "content": "<p>I would be in favor of adding</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.set.basic</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">has_subset.subset.trans</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">⊆</span> <span class=\"n\">b</span><span class=\"o\">)</span>  <span class=\"o\">(</span><span class=\"n\">h'</span><span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">⊆</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">a</span> <span class=\"bp\">⊆</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">set.subset.trans</span> <span class=\"n\">h</span> <span class=\"n\">h'</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">⊆</span> <span class=\"n\">b</span><span class=\"o\">)</span>  <span class=\"o\">(</span><span class=\"n\">h'</span><span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">⊆</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">⊆</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"n\">h.trans</span> <span class=\"n\">h'</span>\n</code></pre></div>",
        "id": 239548176,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1621496460
    },
    {
        "content": "<p>If nobody complains soon then I'll open a PR</p>",
        "id": 239548290,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1621496512
    },
    {
        "content": "<p>And I don't think anything changed recently here. And dot notation isn't capricious here, it's behaving entirely according to spec</p>",
        "id": 239548524,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1621496633
    },
    {
        "content": "<p>I swear this was working a few days ago.</p>",
        "id": 239548617,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1621496665
    },
    {
        "content": "<p>Or maybe my use case changed in the last few days <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 239548657,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1621496677
    },
    {
        "content": "<p>The reason why people may complain is that <code>set X</code> is not the only instance of <code>has_subset</code>, see <a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_subset\">docs#has_subset</a>, but I don't know what typeclasses we could use here to say that whatever the subset notation denotes is transitive (or antisymmetric).</p>",
        "id": 239548867,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1621496768
    },
    {
        "content": "<p>We could had a typeclass <code>has_lawful_subset</code>, but I suspect it wouldn't be worth the trouble since <code>set</code> is probably overwhelmingly more relevant (except maybe over finset)</p>",
        "id": 239549013,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1621496871
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> any input here?</p>",
        "id": 239549043,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1621496883
    },
    {
        "content": "<p>Your definition seems fine to me</p>",
        "id": 239549406,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621497038
    },
    {
        "content": "<p>we already have something like that for <a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_le.le.trans/src\">src#has_le.le.trans</a></p>",
        "id": 239549441,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621497053
    },
    {
        "content": "<p>I wouldn't worry too much about subset being a more general typeclass; we overwhelmingly prefer le for other subset-like things (and I think <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> has proposed using le also for sets)</p>",
        "id": 239549652,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621497158
    },
    {
        "content": "<p>I think finset alone makes adding the lawful typeclass worthwhile</p>",
        "id": 239550510,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1621497649
    },
    {
        "content": "<p>People have seemed to argue that we shouldn't pander to the undergraduates and have <code>vector_space</code> when all us grown-ups know that this just means <code>module</code>. The only purpose of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>⊆</mo></mrow><annotation encoding=\"application/x-tex\">\\subseteq</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mrel\">⊆</span></span></span></span> is to be a special-case notation for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>≤</mo></mrow><annotation encoding=\"application/x-tex\">\\le</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mrel\">≤</span></span></span></span> for historical reasons, so exactly the same arguments seem to apply to me.</p>",
        "id": 239551088,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1621497978
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/Capricious.20dot.20notation/near/239549013\">said</a>:</p>\n<blockquote>\n<p>We could had a typeclass <code>has_lawful_subset</code>, but I suspect it wouldn't be worth the trouble since <code>set</code> is probably overwhelmingly more relevant (except maybe over finset)</p>\n</blockquote>\n<p>We already have a typeclass called <code>is_trans</code> that I would use for <code>has_subset.subset.trans</code>.  (which allows you to write <code>trans x y</code> for lots of <code>x</code> and <code>y</code>s)</p>",
        "id": 239551703,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1621498333
    },
    {
        "content": "<p>What instances does <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_trans\">docs#is_trans</a> already have?</p>",
        "id": 239553217,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1621499251
    },
    {
        "content": "<p>I guess <code>is_preorder (has_subset.subset : set a -&gt; set a -&gt; Prop)</code> is the missing instance?</p>",
        "id": 239553587,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1621499474
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/7681\">#7681</a></p>",
        "id": 239565547,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1621505648
    },
    {
        "content": "<p>The PR only records the instance on sets, not finsets. Was it already registered on finsets?</p>",
        "id": 239565880,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1621505844
    },
    {
        "content": "<p>It's not needed, I guess it's because finset subset is defeq to set finset</p>",
        "id": 239566737,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1621506324
    },
    {
        "content": "<p>I think both instances already exist: this works fine on master:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">is_trans</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">set.subset</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">show_term</span> <span class=\"o\">{</span><span class=\"n\">apply_instance</span><span class=\"o\">}</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">is_trans</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">⊆</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">show_term</span> <span class=\"o\">{</span><span class=\"n\">apply_instance</span><span class=\"o\">}</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">is_trans</span> <span class=\"o\">(</span><span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">⊆</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">show_term</span> <span class=\"o\">{</span><span class=\"n\">apply_instance</span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 239566882,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1621506390
    },
    {
        "content": "<p>Oh great! Only the two lemmas were missing then</p>",
        "id": 239568360,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1621507168
    },
    {
        "content": "<p>fixed</p>",
        "id": 239568365,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1621507171
    },
    {
        "content": "<p>Do we want this one too?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- TODO: do we have this somewhere?</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">irrefl_ne</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">is_irrefl</span> <span class=\"n\">α</span> <span class=\"n\">r</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"n\">b</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">h</span> <span class=\"n\">rfl</span> <span class=\"o\">:=</span> <span class=\"n\">irrefl</span> <span class=\"n\">_</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">has_ssubset.ssubset.ne</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_ssubset</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_irrefl</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">⊂</span><span class=\"o\">)]</span>\n  <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">⊂</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">irrefl_ne</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 239579419,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1621512657
    },
    {
        "content": "<p>I never use <code>⊂</code>, but why not?</p>",
        "id": 239586080,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1621515472
    },
    {
        "content": "<p>Thanks a lot for the PR!</p>",
        "id": 239704893,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1621580173
    }
]