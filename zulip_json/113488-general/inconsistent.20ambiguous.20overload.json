[
    {
        "content": "<p>I have this code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">order.filter.partial</span>\n\n<span class=\"kd\">noncomputable theory</span>\n<span class=\"kn\">open</span> <span class=\"n\">set</span> <span class=\"n\">filter</span> <span class=\"n\">classical</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span> <span class=\"n\">filter</span>\n<span class=\"kn\">open</span> <span class=\"n\">has_sup</span> <span class=\"n\">has_top</span> <span class=\"n\">has_mem</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">convergence_space</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">converges</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">a</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">a</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">pure_converges</span> <span class=\"o\">:</span> <span class=\"k\">forall</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">converges</span> <span class=\"o\">(</span><span class=\"n\">pure</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">le_converges</span> <span class=\"o\">:</span> <span class=\"k\">forall</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"n\">l'</span><span class=\"o\">},</span> <span class=\"n\">l</span> <span class=\"bp\">&lt;=</span> <span class=\"n\">l'</span> <span class=\"bp\">-&gt;</span> <span class=\"k\">forall</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">},</span> <span class=\"n\">converges</span> <span class=\"n\">l'</span> <span class=\"n\">x</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">converges</span> <span class=\"n\">l</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"c1\">-- l &lt;= l' means l' ⊆ l</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">ext</span><span class=\"o\">]</span> <span class=\"n\">convergence_space</span>\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kd\">class</span><span class=\"o\">]</span> <span class=\"n\">convergence_space</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">converges</span> <span class=\"o\">[</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">convergence_space</span> <span class=\"n\">a</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"n\">p.converges</span> <span class=\"n\">l</span> <span class=\"n\">x</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">convergence_space</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">is_open</span> <span class=\"o\">[</span><span class=\"n\">convergence_space</span> <span class=\"n\">a</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"k\">forall</span> <span class=\"o\">{</span><span class=\"n\">l</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">},</span> <span class=\"n\">mem</span> <span class=\"n\">x</span> <span class=\"n\">s</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">converges</span> <span class=\"n\">l</span> <span class=\"n\">x</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">mem</span> <span class=\"n\">s</span> <span class=\"n\">l</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">is_closed</span> <span class=\"o\">[</span><span class=\"n\">convergence_space</span> <span class=\"n\">a</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"k\">forall</span> <span class=\"o\">{</span><span class=\"n\">l</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">},</span> <span class=\"n\">mem</span> <span class=\"n\">s</span> <span class=\"n\">l</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">converges</span> <span class=\"n\">l</span> <span class=\"n\">x</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">mem</span> <span class=\"n\">x</span> <span class=\"n\">s</span>\n</code></pre></div>\n<p>For some reason, Lean is confused about the <code>converges l x</code> in the definition of <code>is_closed</code>. Why does it work with <code>is_open</code> and not with <code>is_closed</code>?</p>",
        "id": 265376523,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1639784274
    },
    {
        "content": "<p>You have a typo in the last line</p>",
        "id": 265376972,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1639784643
    },
    {
        "content": "<p><code>mem s l</code> should be <code>mem x s</code></p>",
        "id": 265376982,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1639784650
    },
    {
        "content": "<p>well, at least that's why one works and not the other</p>",
        "id": 265377032,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1639784702
    },
    {
        "content": "<p>Why would that be typo?</p>",
        "id": 265377048,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1639784711
    },
    {
        "content": "<p>I suspect this is a unification problem, given that changing the implication order fixes it. Try giving the types of <code>l</code> and <code>x</code> explicitly.</p>",
        "id": 265377080,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1639784755
    },
    {
        "content": "<p>I was just commenting on why <code>is_open</code> works but not the other.... I don't actually know what the mathematical content is</p>",
        "id": 265377143,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1639784792
    },
    {
        "content": "<p>typo wasn't the right word, I guess.</p>",
        "id": 265377165,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1639784815
    },
    {
        "content": "<p>I don't know why you're so against using unicode <span class=\"user-mention\" data-user-id=\"416322\">@Bernd Losert</span> ... it makes your code very hard to read.</p>",
        "id": 265377208,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1639784875
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113488-general/topic/inconsistent.20ambiguous.20overload/near/265377080\">said</a>:</p>\n<blockquote>\n<p>I suspect this is a unification problem, given that changing the implication order fixes it. Try giving the types of <code>l</code> and <code>x</code> explicitly.</p>\n</blockquote>\n<p>Didn't help.</p>",
        "id": 265377302,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1639784950
    },
    {
        "content": "<p>This</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">is_closed</span> <span class=\"o\">[</span><span class=\"n\">convergence_space</span> <span class=\"n\">a</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"k\">forall</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">},</span> <span class=\"n\">mem</span> <span class=\"n\">s</span> <span class=\"n\">l</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">converges</span> <span class=\"n\">l</span> <span class=\"n\">x</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">mem</span> <span class=\"n\">x</span> <span class=\"n\">s</span>\n</code></pre></div>\n<p>works for me...</p>",
        "id": 265377329,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1639784993
    },
    {
        "content": "<p>Oops. I did it for <code>is_open</code> instead of <code>is_closed</code>. Yep, it helps.</p>",
        "id": 265377406,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1639785046
    },
    {
        "content": "<p>Could this be a bug?</p>",
        "id": 265377412,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1639785063
    },
    {
        "content": "<p>It's not a bug.</p>",
        "id": 265377418,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1639785071
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/113488-general/topic/inconsistent.20ambiguous.20overload/near/265377208\">said</a>:</p>\n<blockquote>\n<p>I don't know why you're so against using unicode <span class=\"user-mention silent\" data-user-id=\"416322\">Bernd Losert</span> ... it makes your code very hard to read.</p>\n</blockquote>\n<p>Nothing against Unicode. I'm just working with a crappy font inside a VM from the shell, so no fancy Unicode for me for now.</p>",
        "id": 265377445,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1639785109
    },
    {
        "content": "<p>Do you not want to install lean on your own machine?</p>",
        "id": 265377518,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1639785153
    },
    {
        "content": "<p>We're fairly honest people <span aria-label=\"smiling devil\" class=\"emoji emoji-1f608\" role=\"img\" title=\"smiling devil\">:smiling_devil:</span></p>",
        "id": 265377531,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1639785167
    },
    {
        "content": "<p>This machine isn't mine. I will be ditching it soon.</p>",
        "id": 265377537,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1639785173
    },
    {
        "content": "<p>Ah ok, fair enough.</p>",
        "id": 265377558,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1639785188
    },
    {
        "content": "<p>Hmm... I guess we have another one of those gotchas. The number of gotchas seems to be increasing every day.</p>",
        "id": 265377584,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1639785218
    },
    {
        "content": "<p>In any case, it's not a bug because when you write <code>mem s l</code> without specifying what <code>l</code> should be, then lean has no way of telling the type of <code>l</code>. In the <code>is_open</code> case, the first place where <code>l</code> appears is in <code>converges</code>, and then lean knows that it has to be a filter. In the <code>is_closed</code> case, there are many options, since <code>mem s l</code> is the first thing that lean finds.</p>",
        "id": 265377649,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1639785260
    },
    {
        "content": "<p>In general, the error messages should be relatively helpful, so, in time, you will be able to know how to work around these \"gotchas\".</p>",
        "id": 265377726,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1639785337
    },
    {
        "content": "<p>I see. I guess it could be smarter by looking at the entire type instead of the first thing only.</p>",
        "id": 265377728,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1639785340
    },
    {
        "content": "<p>I think I'll just stick to writing <code>[p : convergence_space a]</code> and <code>p.converges</code>.</p>",
        "id": 265377814,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1639785394
    },
    {
        "content": "<blockquote>\n<p>The number of gotchas seems to be increasing every day.</p>\n</blockquote>\n<p>I don't know if they're so much \"gotchas\" as simply the fact that lean has a pretty steep learning curve. I would urge you to start trying to understand the error messages you're seeing. They often tell you what's wrong, once you understand what they're saying. (Oh Adam beat me to it  :-) )</p>",
        "id": 265377832,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1639785409
    },
    {
        "content": "<p>I understood the error message. I was just wondering why it worked in the <code>is_open</code> case but not in the <code>is_closed</code> case.</p>",
        "id": 265377894,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1639785470
    },
    {
        "content": "<p>The \"gotchas\" are part of the steep learning curve it seems.</p>",
        "id": 265377983,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1639785540
    },
    {
        "content": "<p>Writing <code>p.converges</code> is not the solution</p>",
        "id": 265378005,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1639785566
    },
    {
        "content": "<p>I've been using that so far without issues. Before I was doing <code>@converges a p</code>.</p>",
        "id": 265378199,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1639785673
    },
    {
        "content": "<p>That would be like writing <code>e.to_has_mul.mul x y</code> for <code>e : group G</code> instead of just <code>x * y</code>.</p>",
        "id": 265378208,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1639785681
    },
    {
        "content": "<p>If I had a nice notation for <code>converges</code>,  I would agree.</p>",
        "id": 265378281,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1639785725
    },
    {
        "content": "<p>The <code>p.converges</code> actually reads better. In the literature, you find <code>F p-converges to x</code>, so it is similar.</p>",
        "id": 265378348,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1639785786
    },
    {
        "content": "<p>Okay, but you wouldn't write <code>U is-t-open in X</code> for a set <code>X</code> with a topology <code>t</code>, rather you would just say <code>U is open in X</code>.</p>",
        "id": 265378413,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1639785843
    },
    {
        "content": "<p>If you always want to refer to <code>p</code>, then <code>convergence_space</code> should be just a structure, and not a class.</p>",
        "id": 265378477,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1639785899
    },
    {
        "content": "<p>Yep. In the literature on convergence spaces, you also see <code>F converges to x in (X,p)</code>.</p>",
        "id": 265378490,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1639785908
    },
    {
        "content": "<p>The trick is not to stick to the literature, the trick is to learn how to write idiomatic lean code</p>",
        "id": 265378610,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1639785977
    },
    {
        "content": "<p>We're rewriting the literature</p>",
        "id": 265378635,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1639786000
    },
    {
        "content": "<p>I didn't want to refer to <code>p</code> at all, but it caused so many issues that using it is better now.</p>",
        "id": 265378659,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1639786012
    },
    {
        "content": "<p>Can you give me an example where it's an issue?</p>",
        "id": 265378677,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1639786025
    },
    {
        "content": "<p>Remember \"I can't make it work\" is very different to \"it can't be made to work\"</p>",
        "id": 265378719,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1639786056
    },
    {
        "content": "<p>In almost all the proofs I've written, I would get error messages saying \"cannot instantiate type class instance\" or something like that.</p>",
        "id": 265378737,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1639786077
    },
    {
        "content": "<p>I made the error go away by using <code>@converges</code> and then I switched to using <code>p.converges</code>.</p>",
        "id": 265378799,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1639786100
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"416322\">Bernd Losert</span> <a href=\"#narrow/stream/113488-general/topic/inconsistent.20ambiguous.20overload/near/265378737\">said</a>:</p>\n<blockquote>\n<p>In almost all the proofs I've written, I would get error messages saying \"cannot instantiate type class instance\" or something like that.</p>\n</blockquote>\n<p>This is just lean telling you that you didn't specify a convergence space structure to use, so it has no way of knowing what to do.</p>",
        "id": 265378856,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1639786172
    },
    {
        "content": "<p>Yes. That's what it is, so I have to specify it and things are much better now after doing so.</p>",
        "id": 265378945,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1639786228
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>gives an error because I didn't tell lean what <code>has_mul G</code> to use.</p>",
        "id": 265378952,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1639786235
    },
    {
        "content": "<p>Yep.</p>",
        "id": 265379006,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1639786282
    },
    {
        "content": "<p>There were some cases where it complained even though the instance was there. This seems to happen only in tactic mode. I suspect this is a limitation of Lean and it explains why you have things like introsI, letI, etc.</p>",
        "id": 265379157,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1639786403
    },
    {
        "content": "<p>Yeah, when an instance is under a binder, then it can get annoying, at least in lean3. Lean4 is supposed to fix all that.</p>",
        "id": 265379230,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1639786459
    },
    {
        "content": "<p>That also seems to come from you putting stuff to the right of the colon while it could have been to the left.</p>",
        "id": 265379262,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1639786506
    },
    {
        "content": "<p>Nah. That was unrelated.</p>",
        "id": 265379298,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1639786557
    },
    {
        "content": "<p>Again, an example would be helpful.</p>",
        "id": 265379399,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1639786664
    },
    {
        "content": "<p>Let me try the partial_order proof. I think that one was troublesome.</p>",
        "id": 265379474,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1639786732
    },
    {
        "content": "<p>That's a different story, because when you're talking about the poset of convergence space structures, you need to speak about more than one such structure, so typeclasses don't help here. I suggest looking at the code for the lattice of topologies that we have in mathlib</p>",
        "id": 265379617,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1639786873
    },
    {
        "content": "<p>Nope. It wasn't that one. It was this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">order.filter.partial</span>\n\n<span class=\"kd\">noncomputable theory</span>\n<span class=\"kn\">open</span> <span class=\"n\">set</span> <span class=\"n\">filter</span> <span class=\"n\">classical</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span> <span class=\"n\">filter</span>\n<span class=\"kn\">open</span> <span class=\"n\">has_sup</span> <span class=\"n\">has_top</span> <span class=\"n\">has_mem</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">convergence_space</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">converges</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">a</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">a</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">pure_converges</span> <span class=\"o\">:</span> <span class=\"k\">forall</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">converges</span> <span class=\"o\">(</span><span class=\"n\">pure</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">le_converges</span> <span class=\"o\">:</span> <span class=\"k\">forall</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"n\">l'</span><span class=\"o\">},</span> <span class=\"n\">l</span> <span class=\"bp\">&lt;=</span> <span class=\"n\">l'</span> <span class=\"bp\">-&gt;</span> <span class=\"k\">forall</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">},</span> <span class=\"n\">converges</span> <span class=\"n\">l'</span> <span class=\"n\">x</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">converges</span> <span class=\"n\">l</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"c1\">-- l &lt;= l' means l' ⊆ l</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">ext</span><span class=\"o\">]</span> <span class=\"n\">convergence_space</span>\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kd\">class</span><span class=\"o\">]</span> <span class=\"n\">convergence_space</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">convergence_space</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">convergence_space.induced</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">convergence_space</span> <span class=\"n\">b</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">convergence_space</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">converges</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">l</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">converges</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n  <span class=\"n\">pure_converges</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">filter.map_pure</span><span class=\"o\">,</span> <span class=\"n\">pure_converges</span><span class=\"o\">],</span>\n  <span class=\"n\">le_converges</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"k\">assume</span> <span class=\"n\">l</span> <span class=\"n\">l'</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n    <span class=\"k\">assume</span> <span class=\"n\">le1</span> <span class=\"o\">:</span> <span class=\"n\">l</span> <span class=\"bp\">&lt;=</span> <span class=\"n\">l'</span><span class=\"o\">,</span>\n    <span class=\"k\">assume</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n    <span class=\"k\">assume</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">converges</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"n\">l'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n    <span class=\"k\">have</span> <span class=\"n\">le2</span> <span class=\"o\">:</span> <span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"n\">l</span> <span class=\"bp\">&lt;=</span> <span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"n\">l'</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">map_mono</span> <span class=\"n\">le1</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">le_converges</span> <span class=\"n\">le2</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n<span class=\"o\">}</span>\n</code></pre></div>",
        "id": 265379892,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1639787177
    },
    {
        "content": "<p>fixed</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">order.filter.partial</span>\n\n<span class=\"kd\">noncomputable theory</span>\n<span class=\"kn\">open</span> <span class=\"n\">set</span> <span class=\"n\">filter</span> <span class=\"n\">classical</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span> <span class=\"n\">filter</span>\n<span class=\"kn\">open</span> <span class=\"n\">has_sup</span> <span class=\"n\">has_top</span> <span class=\"n\">has_mem</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">convergence_space</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">converges</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">a</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">a</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">pure_converges</span> <span class=\"o\">:</span> <span class=\"k\">forall</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">converges</span> <span class=\"o\">(</span><span class=\"n\">pure</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">le_converges</span> <span class=\"o\">:</span> <span class=\"k\">forall</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"n\">l'</span><span class=\"o\">},</span> <span class=\"n\">l</span> <span class=\"bp\">&lt;=</span> <span class=\"n\">l'</span> <span class=\"bp\">-&gt;</span> <span class=\"k\">forall</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">},</span> <span class=\"n\">converges</span> <span class=\"n\">l'</span> <span class=\"n\">x</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">converges</span> <span class=\"n\">l</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"c1\">-- l &lt;= l' means l' ⊆ l</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">ext</span><span class=\"o\">]</span> <span class=\"n\">convergence_space</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">convergence_space</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">convergence_space.induced</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">convergence_space</span> <span class=\"n\">b</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">convergence_space</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">converges</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">l</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">converges</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n  <span class=\"n\">pure_converges</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">filter.map_pure</span><span class=\"o\">,</span> <span class=\"n\">pure_converges</span><span class=\"o\">],</span>\n  <span class=\"n\">le_converges</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"k\">assume</span> <span class=\"n\">l</span> <span class=\"n\">l'</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n    <span class=\"k\">assume</span> <span class=\"n\">le1</span> <span class=\"o\">:</span> <span class=\"n\">l</span> <span class=\"bp\">&lt;=</span> <span class=\"n\">l'</span><span class=\"o\">,</span>\n    <span class=\"k\">assume</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n    <span class=\"k\">assume</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">converges</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"n\">l'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n    <span class=\"k\">have</span> <span class=\"n\">le2</span> <span class=\"o\">:</span> <span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"n\">l</span> <span class=\"bp\">&lt;=</span> <span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"n\">l'</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">map_mono</span> <span class=\"n\">le1</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">le_converges</span> <span class=\"n\">le2</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n<span class=\"o\">}</span>\n</code></pre></div>",
        "id": 265379988,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1639787287
    },
    {
        "content": "<p>Sure, using <code>class</code> fixes it, but then in the proof of <code>partial_order</code> I have to resort to using <code>@converges</code>.</p>",
        "id": 265380024,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1639787340
    },
    {
        "content": "<p>So it's a trade off.</p>",
        "id": 265380039,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1639787367
    },
    {
        "content": "<p>The point is that you will only prove a partial order once, but you want to use a convergence space structure many many times without referring to it explicitly. So you need to decide which tradeoff is less painful, and I claim that using <code>class convergence_space ...</code> is the right way to go.</p>",
        "id": 265380118,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1639787415
    },
    {
        "content": "<p>Or, you could be a bit more careful with your variables.</p>",
        "id": 265380141,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1639787460
    },
    {
        "content": "<p>You may be right. I'll need to flesh out more code and see what happens.</p>",
        "id": 265380207,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1639787525
    },
    {
        "content": "<p>The issue with your code here is that <code>convergence_space.converges</code> has an explicit first variable of type <code>convergence_space a</code>.</p>",
        "id": 265380313,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1639787652
    },
    {
        "content": "<p>E.g. the following works</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">order.filter.partial</span>\n\n<span class=\"kd\">noncomputable theory</span>\n<span class=\"kn\">open</span> <span class=\"n\">set</span> <span class=\"n\">filter</span> <span class=\"n\">classical</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span> <span class=\"n\">filter</span>\n<span class=\"kn\">open</span> <span class=\"n\">has_sup</span> <span class=\"n\">has_top</span> <span class=\"n\">has_mem</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">convergence_space</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">converges'</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">a</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">a</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">pure_converges</span> <span class=\"o\">:</span> <span class=\"k\">forall</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">converges'</span> <span class=\"o\">(</span><span class=\"n\">pure</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">le_converges</span> <span class=\"o\">:</span> <span class=\"k\">forall</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"n\">l'</span><span class=\"o\">},</span> <span class=\"n\">l</span> <span class=\"bp\">&lt;=</span> <span class=\"n\">l'</span> <span class=\"bp\">-&gt;</span> <span class=\"k\">forall</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">},</span> <span class=\"n\">converges'</span> <span class=\"n\">l'</span> <span class=\"n\">x</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">converges'</span> <span class=\"n\">l</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"c1\">-- l &lt;= l' means l' ⊆ l</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kd\">class</span><span class=\"o\">,</span> <span class=\"n\">ext</span><span class=\"o\">]</span> <span class=\"n\">convergence_space</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">convergence_space</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">converges</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">convergence_space</span> <span class=\"n\">a</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"n\">converges'</span> <span class=\"o\">‹</span><span class=\"n\">_</span><span class=\"o\">›</span> <span class=\"n\">f</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">convergence_space.induced</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">convergence_space</span> <span class=\"n\">b</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">convergence_space</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">converges</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">l</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">converges</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n  <span class=\"n\">pure_converges</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">filter.map_pure</span><span class=\"o\">,</span> <span class=\"n\">pure_converges</span><span class=\"o\">],</span>\n  <span class=\"n\">le_converges</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"k\">assume</span> <span class=\"n\">l</span> <span class=\"n\">l'</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n    <span class=\"k\">assume</span> <span class=\"n\">le1</span> <span class=\"o\">:</span> <span class=\"n\">l</span> <span class=\"bp\">&lt;=</span> <span class=\"n\">l'</span><span class=\"o\">,</span>\n    <span class=\"k\">assume</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n    <span class=\"k\">assume</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">converges</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"n\">l'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n    <span class=\"k\">have</span> <span class=\"n\">le2</span> <span class=\"o\">:</span> <span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"n\">l</span> <span class=\"bp\">&lt;=</span> <span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"n\">l'</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">map_mono</span> <span class=\"n\">le1</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">le_converges</span> <span class=\"n\">le2</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n<span class=\"o\">}</span>\n</code></pre></div>",
        "id": 265380362,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1639787728
    },
    {
        "content": "<p>Uh, <code>converges</code> should be a <code>def</code>, right?</p>",
        "id": 265380389,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1639787757
    },
    {
        "content": "<p>It's prop valued</p>",
        "id": 265380448,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1639787776
    },
    {
        "content": "<p>So?</p>",
        "id": 265380449,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1639787783
    },
    {
        "content": "<p>It's Prop-valued, but it's not a Prop.</p>",
        "id": 265380457,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1639787797
    },
    {
        "content": "<p>I'm confused</p>",
        "id": 265380464,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1639787828
    },
    {
        "content": "<p>A prop is a prop</p>",
        "id": 265380469,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1639787834
    },
    {
        "content": "<p>But <code>Prop</code> is not a Prop.</p>",
        "id": 265380475,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1639787848
    },
    {
        "content": "<p>It's a <code>Type 0</code></p>",
        "id": 265380485,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1639787857
    },
    {
        "content": "<p>Oh duh</p>",
        "id": 265380489,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1639787860
    },
    {
        "content": "<p>Sorry</p>",
        "id": 265380490,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1639787862
    },
    {
        "content": "<p>It should be a def.</p>",
        "id": 265380492,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1639787866
    },
    {
        "content": "<p>Yeah you're right</p>",
        "id": 265380561,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1639787903
    },
    {
        "content": "<p>That's what it was in my first post.</p>",
        "id": 265380579,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1639787924
    },
    {
        "content": "<p>What's this partial order structure example? I'm not sure about all the context but <code>convergence_space</code> should definitely be a class</p>",
        "id": 265380591,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1639787947
    },
    {
        "content": "<p>One sec...</p>",
        "id": 265380631,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1639787996
    },
    {
        "content": "<p>Mario, I think it's given by implication on converges</p>",
        "id": 265380741,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1639788087
    },
    {
        "content": "<p>This is what I have now:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">order.filter.partial</span>\n\n<span class=\"kd\">noncomputable theory</span>\n<span class=\"kn\">open</span> <span class=\"n\">set</span> <span class=\"n\">filter</span> <span class=\"n\">classical</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span> <span class=\"n\">filter</span>\n<span class=\"kn\">open</span> <span class=\"n\">has_sup</span> <span class=\"n\">has_top</span> <span class=\"n\">has_mem</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">convergence_space</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">converges</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">a</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">a</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">pure_converges</span> <span class=\"o\">:</span> <span class=\"k\">forall</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">converges</span> <span class=\"o\">(</span><span class=\"n\">pure</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">le_converges</span> <span class=\"o\">:</span> <span class=\"k\">forall</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"n\">l'</span><span class=\"o\">},</span> <span class=\"n\">l</span> <span class=\"bp\">&lt;=</span> <span class=\"n\">l'</span> <span class=\"bp\">-&gt;</span> <span class=\"k\">forall</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">},</span> <span class=\"n\">converges</span> <span class=\"n\">l'</span> <span class=\"n\">x</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">converges</span> <span class=\"n\">l</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"c1\">-- l &lt;= l' means l' ⊆ l</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">ext</span><span class=\"o\">]</span> <span class=\"n\">convergence_space</span>\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kd\">class</span><span class=\"o\">]</span> <span class=\"n\">convergence_space</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">convergence_space</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_le</span> <span class=\"o\">(</span><span class=\"n\">convergence_space</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">le</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"k\">forall</span> <span class=\"o\">{</span><span class=\"n\">l</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">},</span> <span class=\"n\">q.converges</span> <span class=\"n\">l</span> <span class=\"n\">x</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">p.converges</span> <span class=\"n\">l</span> <span class=\"n\">x</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">partial_order</span> <span class=\"o\">(</span><span class=\"n\">convergence_space</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">le_refl</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"k\">assume</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">convergence_space</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n    <span class=\"k\">assume</span> <span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n    <span class=\"k\">assume</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n    <span class=\"k\">assume</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p.converges</span> <span class=\"n\">l</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">le_trans</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"k\">assume</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">convergence_space</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n    <span class=\"k\">assume</span> <span class=\"n\">le1</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">&lt;=</span> <span class=\"n\">q</span><span class=\"o\">,</span>\n    <span class=\"k\">assume</span> <span class=\"n\">le2</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">&lt;=</span> <span class=\"n\">r</span><span class=\"o\">,</span>\n    <span class=\"k\">assume</span> <span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n    <span class=\"k\">assume</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n    <span class=\"k\">assume</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">r.converges</span> <span class=\"n\">l</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">le1</span> <span class=\"o\">(</span><span class=\"n\">le2</span> <span class=\"n\">h</span><span class=\"o\">))</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">le_antisymm</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"k\">assume</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">convergence_space</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n    <span class=\"k\">assume</span> <span class=\"n\">le1</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">&lt;=</span> <span class=\"n\">q</span><span class=\"o\">,</span>\n    <span class=\"k\">assume</span> <span class=\"n\">le2</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">&lt;=</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n    <span class=\"n\">ext</span> <span class=\"n\">l</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">iff.intro</span> <span class=\"n\">le2</span> <span class=\"n\">le1</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span><span class=\"n\">convergence_space.has_le</span>\n<span class=\"o\">}</span>\n</code></pre></div>",
        "id": 265380752,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1639788102
    },
    {
        "content": "<p>If I change it to <code>class</code>, I have to write:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_le</span> <span class=\"o\">(</span><span class=\"n\">convergence_space</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">le</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"k\">forall</span> <span class=\"o\">{</span><span class=\"n\">l</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">},</span> <span class=\"bp\">@</span><span class=\"n\">converges</span> <span class=\"n\">a</span> <span class=\"n\">q</span> <span class=\"n\">l</span> <span class=\"n\">x</span> <span class=\"bp\">-&gt;</span> <span class=\"bp\">@</span><span class=\"n\">converges</span> <span class=\"n\">a</span> <span class=\"n\">p</span> <span class=\"n\">l</span> <span class=\"n\">x</span>\n<span class=\"o\">}</span>\n</code></pre></div>",
        "id": 265380970,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1639788244
    },
    {
        "content": "<p>Oh, that partial order. Yes, when dealing with the space of all convergence spaces you will need another notation to make the argument explicit. In topologies, this is done with a local notation. I would suggest something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[ext]</span> <span class=\"kd\">class</span> <span class=\"n\">convergence_space</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">converges</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">pure_converges</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">converges</span> <span class=\"o\">(</span><span class=\"n\">pure</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">le_converges</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{{</span><span class=\"n\">l</span> <span class=\"n\">l'</span><span class=\"o\">}},</span> <span class=\"n\">l</span> <span class=\"bp\">≤</span> <span class=\"n\">l'</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"o\">{{</span><span class=\"n\">x</span><span class=\"o\">}},</span> <span class=\"n\">converges</span> <span class=\"n\">l'</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">converges</span> <span class=\"n\">l</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"c1\">-- l &lt;= l' means l' ⊆ l</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">convergence_space</span>\n\n<span class=\"kn\">section</span>\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"bp\">`</span><span class=\"n\">convs</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">converges</span> <span class=\"n\">_</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_le</span> <span class=\"o\">(</span><span class=\"n\">convergence_space</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">le</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"o\">{{</span><span class=\"n\">l</span> <span class=\"n\">x</span><span class=\"o\">}},</span> <span class=\"n\">convs</span> <span class=\"n\">q</span> <span class=\"n\">l</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">convs</span> <span class=\"n\">p</span> <span class=\"n\">l</span> <span class=\"n\">x</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">partial_order</span> <span class=\"o\">(</span><span class=\"n\">convergence_space</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">le_refl</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">p</span> <span class=\"n\">l</span> <span class=\"n\">x</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">le_trans</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"n\">pq</span> <span class=\"n\">qr</span> <span class=\"n\">l</span> <span class=\"n\">x</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">pq</span> <span class=\"o\">(</span><span class=\"n\">qr</span> <span class=\"n\">h</span><span class=\"o\">),</span>\n  <span class=\"n\">le_antisymm</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">pq</span> <span class=\"n\">qp</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">ext</span> <span class=\"n\">l</span> <span class=\"n\">x</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"bp\">@</span><span class=\"n\">qp</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">pq</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n  <span class=\"bp\">..</span><span class=\"n\">convergence_space.has_le</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 265381500,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1639788734
    },
    {
        "content": "<p>Also, when writing lean you should really get used to unicode. There are lots of things that can't be worked around with ascii notation, and every lean input method I am aware of has built in abbreviation expansion</p>",
        "id": 265381607,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1639788861
    },
    {
        "content": "<p>I see. So instead of a <code>structure</code> with a <code>def converges</code>, I can use <code>class</code> with notation for <code>@converges</code>.</p>",
        "id": 265381784,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1639789040
    },
    {
        "content": "<p>I started using <code>structure</code> because I was copying the topologies code by the way.</p>",
        "id": 265381855,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1639789093
    },
    {
        "content": "<p>With <a href=\"https://leanprover-community.github.io/mathlib_docs/find/topological_space\">docs#topological_space</a> we have an external API and we don't really refer to the fields in the structure defining a topological space. Your case is different because you want to actually use the <code>converges</code> field.</p>",
        "id": 265381898,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1639789152
    },
    {
        "content": "<p>Yes. That wasn't apparent to me though when I started.</p>",
        "id": 265382075,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1639789280
    },
    {
        "content": "<p>Anyways, thanks alot everyone. Always appreciated.</p>",
        "id": 265382088,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1639789295
    }
]