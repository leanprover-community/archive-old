[
    {
        "content": "<p>I understand that adding a def/lemma to a file in mathlib will necessitate the recompilation of all dependent files, since (as was pointed out to me in a different thread) the <code>simp</code> set could change or there could be new instances.</p>\n<p>But when just a proof of a lemma gets changed, then I would think it should not be necessary to compile the dependent files again, since it should only matter that a proof term is provided and not what it looks like. Still, my observation is that running <code>leanproject build</code> after such a change does recompile everything below the file in the import tree. Is there a good reason for that?</p>",
        "id": 285795138,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1654977277
    },
    {
        "content": "<p>I'm not sure about the reason for recompiling, but placing a dot <code>.</code> in a file prevents lean from compiling above the dot.</p>",
        "id": 285795207,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1654977380
    },
    {
        "content": "<p>There's a Todo about this in the lean source code</p>",
        "id": 285795294,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1654977544
    },
    {
        "content": "<p>Lean doesn't know that you only modified that one proof, it assumes the entire rest of the file has changed too</p>",
        "id": 285795304,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1654977568
    },
    {
        "content": "<p>Indeed, it's entirely possible for the script in one proof to affect later proofs by changing global settings</p>",
        "id": 285795312,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1654977596
    },
    {
        "content": "<p>This page mentions the dot:</p>\n<p><a href=\"https://leanprover-community.github.io/tips_and_tricks.html\">https://leanprover-community.github.io/tips_and_tricks.html</a></p>",
        "id": 285795354,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1654977608
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/Changing.20a.20proof.20triggers.20recompilation.20of.20importing.20files/near/285795304\">said</a>:</p>\n<blockquote>\n<p>Lean doesn't know that you only modified that one proof, it assumes the entire rest of the file has changed too</p>\n</blockquote>\n<p>Could Lean not check that the net result (after compiling the affeced file) is the same as before the change (so that every importing file sees exactly the same as before) and then skip the further recompilations?</p>",
        "id": 285795449,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1654977783
    },
    {
        "content": "<p>I think that (say) golfing proofs in files close to the root gets quite inefficient this way...</p>",
        "id": 285795515,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1654977856
    },
    {
        "content": "<p>Is it not theoretically possible that a proof relies on the specific term produced by a lemma?</p>",
        "id": 285795747,
        "sender_full_name": "Bart Michels",
        "timestamp": 1654978130
    },
    {
        "content": "<p>As far as I know, all proofs (= terms) of a statement (of type Prop) are considered equivalent (\"proof irrelevance\"), so I would think it is not even possible that a proof relies on the specifics of some other proof term.</p>",
        "id": 285795874,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1654978331
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/Changing.20a.20proof.20triggers.20recompilation.20of.20importing.20files/near/285795312\">said</a>:</p>\n<blockquote>\n<p>Indeed, it's entirely possible for the script in one proof to affect later proofs by changing global settings</p>\n</blockquote>\n<p>How is this possible? I would have thought that everything I do in a proof is local to that.</p>",
        "id": 285795958,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1654978508
    },
    {
        "content": "<p>About proof irrelevance, I learned recently that it is not as strong as I would have thought.  For instance <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.interactive.delta\">docs#tactic.interactive.delta</a> can access the actual proof (if I remember correctly, in on mobile).</p>",
        "id": 285796675,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1654979758
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"479359\">@Michael Stoll</span> <span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> The environment holds a lot of information, including the term proof of every theorem.  To see this, just do <code>#print &lt;theorem_name&gt;</code>.  Moreover, tactics have full access to the environment, so theoretically,  any change to a proof could change the behavior of a downstream tactic.  It is unlikely, but not impossible.</p>",
        "id": 285796885,
        "sender_full_name": "Jason Rute",
        "timestamp": 1654980094
    },
    {
        "content": "<p>I think proof irrelevance is more referring to the behavior of the terms proofs and compiled code <em>after they are constructed by tactics</em>.  So if you take the term proof export of mathlib and change a proof of a <code>Prop</code>, I think (hopefully) it is impossible for it to effect downstream proofs or the compiled code (but there might be more subtleties here than I am aware of).</p>",
        "id": 285797234,
        "sender_full_name": "Jason Rute",
        "timestamp": 1654980632
    },
    {
        "content": "<p>So the question is, if you have <code>lemma some_nat : ℕ := 0</code> and <code>lemma some_other_nat : ℕ := 0</code>, is it possible at all to prove <code>some_nat = some_other_nat</code>?</p>",
        "id": 285797367,
        "sender_full_name": "Bart Michels",
        "timestamp": 1654980847
    },
    {
        "content": "<p>As for the state of the art on recompilation avoidance in Lean 4 and other interactive theorem provers, there is some discussion by <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span>  <a href=\"https://proofassistants.stackexchange.com/questions/335/what-is-the-state-of-recompilation-avoidance-in-proof-assistants\">on the Proof Assistants Stack Exchange</a>. <br>\n Sebastian also mentions an <a href=\"https://github.com/leanprover/lean4/issues/416\">RFC</a>.</p>",
        "id": 285797389,
        "sender_full_name": "Jason Rute",
        "timestamp": 1654980908
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"501306\">Bart Michels</span> <a href=\"#narrow/stream/113488-general/topic/Changing.20a.20proof.20triggers.20recompilation.20of.20importing.20files/near/285797367\">said</a>:</p>\n<blockquote>\n<p>So the question is, if you have <code>lemma some_nat : ℕ := 0</code> and <code>lemma some_other_nat : ℕ := 0</code>, is it possible at all to prove <code>some_nat = some_other_nat</code>?</p>\n</blockquote>\n<p>These are <code>definitions</code>, not <code>lemmas</code>: they construct something of a type whose type is not <code>Prop</code>. \"Proof irrelevance\" refers only to propositions, not to data.</p>",
        "id": 285797446,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1654980974
    },
    {
        "content": "<p>Sure, but <code>lemma</code> is the same as <code>def</code> + high irreducibility.</p>",
        "id": 285797529,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1654981113
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"501306\">Bart Michels</span> <a href=\"#narrow/stream/113488-general/topic/Changing.20a.20proof.20triggers.20recompilation.20of.20importing.20files/near/285797367\">said</a>:</p>\n<blockquote>\n<p>So the question is, if you have <code>lemma some_nat : ℕ := 0</code> and <code>lemma some_other_nat : ℕ := 0</code>, is it possible at all to prove <code>some_nat = some_other_nat</code>?</p>\n</blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">some_nat</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">some_other_nat</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">some_nat</span> <span class=\"bp\">=</span> <span class=\"n\">some_other_nat</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n <span class=\"n\">dunfold</span> <span class=\"n\">some_nat</span><span class=\"o\">,</span>\n <span class=\"n\">dunfold</span> <span class=\"n\">some_other_nat</span><span class=\"o\">,</span>\n <span class=\"n\">refl</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>(Also, what Michael said.  Proof irrelevance only refers to <code>Prop</code>s, regardless whether they are declared with <code>def</code> or <code>lemma</code>/<code>theorem</code>.)</p>",
        "id": 285797533,
        "sender_full_name": "Jason Rute",
        "timestamp": 1654981132
    },
    {
        "content": "<p>(This is what I meant.)</p>",
        "id": 285797792,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1654981554
    },
    {
        "content": "<p>I don't think Bart was referring to proof irrelevance.</p>",
        "id": 285797865,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1654981662
    },
    {
        "content": "<p>Maybe I misunderstood the motivation behind Bart's problem.</p>",
        "id": 285798011,
        "sender_full_name": "Jason Rute",
        "timestamp": 1654981858
    },
    {
        "content": "<p>The question was whether the information was even available, and the answer is \"Yes, but it's well hidden and you need <code>dunfold</code> to access it\".</p>",
        "id": 285798102,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1654981996
    },
    {
        "content": "<p>But if his lemmas were of type, say <code>exists x, x=x</code>, then the information would not be available in the same way, even using <code>dunfold</code>, right?</p>",
        "id": 285798212,
        "sender_full_name": "Jason Rute",
        "timestamp": 1654982159
    },
    {
        "content": "<p>Pretty sure it would. What propositional irrelevance means is that you don't even need to access it. Instead, you just look at the type, see it's a <code>Prop</code> and say \"Oh, it's irrelevant, so they are equal!\".</p>",
        "id": 285798288,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1654982274
    },
    {
        "content": "<p>Can you provide an example?</p>",
        "id": 285798331,
        "sender_full_name": "Jason Rute",
        "timestamp": 1654982301
    },
    {
        "content": "<p><code>exists.intro 0 rfl</code> and <code>exists.intro 1 rfl</code> are both proofs of <code>∃ x : ℕ, x = x</code>, so they are equal by propositional irrelevance, but they are nonetheless recorded as different proof terms.</p>",
        "id": 285798360,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1654982386
    },
    {
        "content": "<p>Ok, by information I mean the 0 and 1.  If this was proof relevant homotopy type theory, then I would be able to access the 0 and 1.</p>",
        "id": 285798407,
        "sender_full_name": "Jason Rute",
        "timestamp": 1654982430
    },
    {
        "content": "<p>Yes, exactly.</p>",
        "id": 285798415,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1654982454
    },
    {
        "content": "<p>Propositional irrelevance is an additional defeq rule. It doesn't affect how Lean records declarations (although that would probably lead to some speedup, as Michael suggested at the very beginning of this thread).</p>",
        "id": 285798443,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1654982521
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> I admit I was mixing up the axiom/defeq rule Propositional irrelevance with another concept, which for lack of remembering the correct name I'll call \"proof erasure\".  At least is some places in Lean, the proofs of propositions are literally erased in Lean I believe.  One place where this occurs is in compiled code.  But I also think it is also true of proofs.  Consider this example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">thm1</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"bp\">→</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">thm2</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"bp\">→</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">true.intro</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">thm1</span> <span class=\"bp\">=</span> <span class=\"n\">thm2</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">dunfold</span> <span class=\"n\">thm1</span><span class=\"o\">,</span> <span class=\"c1\">-- _ = thm2</span>\n  <span class=\"n\">dunfold</span> <span class=\"n\">thm2</span><span class=\"o\">,</span> <span class=\"c1\">-- _ = _,</span>\n  <span class=\"n\">refl</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Notice that dunfold doesn't expand <code>thm1</code> or <code>thm2</code> to their definitions.  It just expands them to <code>_</code>.  This suggests to me that the proof of <code>thm1</code> was erased inside Lean, no?  And this makes sense since because of the propositional irrelavance defeq rule, it is impossible to give a proof of say <code>thm1 = thm1</code> which is not also a proof of <code>thm2 = thm2</code>.  So there is no need to keep around the proof terms.  For example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">thm1</span> <span class=\"bp\">=</span> <span class=\"n\">thm1</span> <span class=\"o\">:=</span> <span class=\"n\">foo</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">thm2</span> <span class=\"bp\">=</span> <span class=\"n\">thm2</span> <span class=\"o\">:=</span> <span class=\"n\">foo</span>\n</code></pre></div>",
        "id": 285805534,
        "sender_full_name": "Jason Rute",
        "timestamp": 1654987832
    },
    {
        "content": "<p>There's such a thing as erased proofs, but I'm pretty sure that the <code>_</code> is just pretty-printing. Isn't <code>pp.proofs</code> the option to turn this off?</p>",
        "id": 285806232,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1654988645
    },
    {
        "content": "<p>One thing that actually does change with different proofs of the same lemma, is whether a proof of a simp lemma is just <code>rfl</code> or not. If so, <code>dsimp</code> will apply the lemma, and not otherwise. In this situation changing the proof of a lemma will affect the result of downstream tactics.</p>",
        "id": 285806940,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1654989435
    },
    {
        "content": "<p>Of course that doesn't mean we should give up on the idea of reducing proof recompilation. As mathlib grows it becomes an even more important issue, but this sort of example shows that it's not a trivial problem that will have an easy fix in the lean codebase</p>",
        "id": 285807029,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1654989568
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113488-general/topic/Changing.20a.20proof.20triggers.20recompilation.20of.20importing.20files/near/285806232\">said</a>:</p>\n<blockquote>\n<p>There's such a thing as erased proofs, but I'm pretty sure that the <code>_</code> is just pretty-printing. Isn't <code>pp.proofs</code> the option to turn this off?</p>\n</blockquote>\n<p>I stand corrected.  You are right about the pretty printing.  I should have checked with <code>pp.all</code> first.</p>",
        "id": 285807445,
        "sender_full_name": "Jason Rute",
        "timestamp": 1654990169
    },
    {
        "content": "<p>An example where the proof term affects whether a subsequent proof succeeds or not:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">eraseN</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"n\">h</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">eraseN_eq</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">eraseN</span> <span class=\"n\">h</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">trivial1</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"n\">trivial</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">trivial2</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"n\">eraseN</span> <span class=\"n\">trivial</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">test1</span> <span class=\"o\">:</span> <span class=\"n\">trivial1</span> <span class=\"bp\">=</span> <span class=\"n\">trivial</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">dunfold</span> <span class=\"n\">trivial1</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">eraseN_eq</span> <span class=\"o\">}</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">solve1 tactic failed, focused goal has not been solved</span>\n<span class=\"cm\">state:</span>\n<span class=\"cm\">⊢ ℕ</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">test2</span> <span class=\"o\">:</span> <span class=\"n\">trivial2</span> <span class=\"bp\">=</span> <span class=\"n\">trivial</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">dunfold</span> <span class=\"n\">trivial2</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">eraseN_eq</span> <span class=\"o\">}</span>\n<span class=\"c\">/-</span><span class=\"cm\"> goals accomplished -/</span>\n</code></pre></div>",
        "id": 285812837,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1654998718
    },
    {
        "content": "<p>That's actually scary</p>",
        "id": 285829671,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1655023204
    },
    {
        "content": "<p>I'm aware of random changes breaking random code in Lean but I thought proofs were the one safe haven</p>",
        "id": 285829698,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1655023233
    },
    {
        "content": "<p>Keep in mind that this code is very contrived. No one should be using <code>dunfold</code> or <code>delta</code> tactics to unfold lemmas</p>",
        "id": 285830062,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1655023857
    },
    {
        "content": "<p>As another contrived example, a tactic could open the containing file and only succeed if it contains exactly 30126 characters</p>",
        "id": 285830170,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1655024002
    },
    {
        "content": "<p>Tactics have access to that too? That's wild</p>",
        "id": 285830231,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1655024094
    },
    {
        "content": "<p>tactics can do arbitrary IO</p>",
        "id": 285830238,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1655024103
    },
    {
        "content": "<p>how else would the <code>gptf</code> tactic work? It literally makes a network request</p>",
        "id": 285830244,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1655024118
    },
    {
        "content": "<p>there are also tactics that connect to external smt solvers like <code>z3</code> and <code>vampire</code></p>",
        "id": 285830253,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1655024155
    },
    {
        "content": "<p>What is the <code>gptf</code> tactic? I can't find the string \"gptf\" in all of mathlib...</p>",
        "id": 285830922,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1655025151
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113488-general/topic/Changing.20a.20proof.20triggers.20recompilation.20of.20importing.20files/near/285798102\">said</a>:</p>\n<blockquote>\n<p>The question was whether the information was even available, and the answer is \"Yes, but it's well hidden and you need <code>dunfold</code> to access it\".</p>\n</blockquote>\n<p>Right, but I was of course wrong to replace props with nat. I was imagining having proofs that rely on lemma1 = lemma2 and lemma1 ≠ lemma2 respectively (that would each compile depending on the terms used), but this would require an already present contradiction, not create a new one.<br>\nSo never mind. I'm glad it spawned more interesting questions.</p>",
        "id": 285832359,
        "sender_full_name": "Bart Michels",
        "timestamp": 1655027420
    },
    {
        "content": "<p>Tactics using IO are wonderful for AI machinery like <a class=\"stream\" data-stream-id=\"274007\" href=\"/#narrow/stream/274007-lean-gptf\">#lean-gptf</a> but obviously shouldn’t be left in code.</p>",
        "id": 285833118,
        "sender_full_name": "Jason Rute",
        "timestamp": 1655028394
    },
    {
        "content": "<p>While we don't have any right now in mathlib, I could definitely imagine a use for tactics using file IO, to read some proof format stored as text, that doesn't fit as a DSL within Lean itself. I'm thinking of some sort of SAT (dis)-proof format for example.</p>",
        "id": 285836336,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1655032470
    },
    {
        "content": "<p>Something à la <a href=\"https://github.com/leanprover-community/mathlib/pull/10645\">#10645</a>?</p>",
        "id": 285836375,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1655032548
    },
    {
        "content": "<p>Can you explain more?  I have some vague memory of you adding an algorithm to compute these numbers, but are the proofs more appropriately stored in a simpler format?</p>",
        "id": 285836842,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1655033118
    },
    {
        "content": "<p>Not yet, but that's my goal.</p>",
        "id": 285836855,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1655033159
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/113488-general/topic/Changing.20a.20proof.20triggers.20recompilation.20of.20importing.20files/near/285807029\">said</a>:</p>\n<blockquote>\n<p>Of course that doesn't mean we should give up on the idea of reducing proof recompilation. As mathlib grows it becomes an even more important issue, but this sort of example shows that it's not a trivial problem that will have an easy fix in the lean codebase</p>\n</blockquote>\n<p>I imagine one could define a restricted set of allowed tactics that are guaranteed to have no side effects w.r.t. importing files. I guess a linter could check that a given file only uses these, and then perhaps it would be safe to not trigger recompilations down the tree if only proofs are changed.</p>\n<p>Or perhaps it's the other way round: if the importing file only uses \"safe\" tactics, then (it can be proved that) it will not be affected when proof terms (and nothing else) changes in imported files.</p>",
        "id": 285838989,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1655036094
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"501306\">Bart Michels</span> <a href=\"#narrow/stream/113488-general/topic/Changing.20a.20proof.20triggers.20recompilation.20of.20importing.20files/near/285832359\">said</a>:</p>\n<blockquote>\n<p>Right, but I was of course wrong to replace props with nat. I was imagining having proofs that rely on lemma1 = lemma2 and lemma1 ≠ lemma2 respectively (that would each compile depending on the terms used), but this would require an already present contradiction, not create a new one.</p>\n</blockquote>\n<p>No, lemma1 = lemma2 is always true if it typechecks. This is what proof irrelevance is all about</p>",
        "id": 285839078,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1655036202
    },
    {
        "content": "<p>you can break a tactic based on random things that the tactic looks at but if you fix the proof term then there is no change to the content of the lemma that will break the proof</p>",
        "id": 285839102,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1655036259
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"479359\">@Michael Stoll</span> Unfortunately <code>simp</code> would not be on that list so it is a bit of a non-starter</p>",
        "id": 285839216,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1655036387
    },
    {
        "content": "<p>I see.</p>",
        "id": 285839302,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1655036482
    },
    {
        "content": "<p>But it would certainly be good to have a more efficient way of modifying mathlib...</p>",
        "id": 285839318,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1655036514
    },
    {
        "content": "<p>I think the easiest thing (well, still pretty hard) would be to support a sort of \"quick and dirty\" mode which just ignores the potential issues that arise from changing proofs. The tricky part I think is just detecting that this is in fact all that happened, given that the user is typing things in live and momentarily broken states could look like a change to something other than a proof</p>",
        "id": 285840000,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1655037343
    },
    {
        "content": "<p><a href=\"#narrow/stream/113488-general/topic/VSCode.20regularly.20glitching.2C.20to.20the.20point.20on.20unusability/near/273470651\">@_**Gabriel Ebner|110043** said</a>:</p>\n<blockquote>\n<p><strong>what happens is that on every file update the server receives, all reverse dependencies of the file are visited to recompile them. </strong> The recompilation happens asynchronously of course, but dependency resolution etc. all happens during the original file sync request.  Thus: many reverse dependencies = laggy typing.  We could try to handle the invalidation part of the file sync request asynchronously, this wouldn't fix everything but at least diagnostics etc. would still be responsive.</p>\n</blockquote>\n<p>This is another problem that makes editing low-level files inconvenient, from another thread. I find this behavior strange, because unless you save a file, edits in the file shouldn't affect other files importing it. I think this might be easier to fix? (The current recommendation is to close the high level files, but if you have to do that, you may as well ask VSCode to tell Lean there are no other files open.)</p>",
        "id": 285841672,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1655039359
    },
    {
        "content": "<p>Lean 4 uses a much more conservative approach there, it will not propagate changes between open files unless you explicitly tell it to</p>",
        "id": 285841776,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1655039483
    },
    {
        "content": "<p>Oh I was wrong actually, editing a file without saving can indeed affect files importing it. The <code>imported file ... uses sorry</code> message can appear without saving  the imported file, as I just learned by testing.</p>",
        "id": 285842147,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1655039883
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/Changing.20a.20proof.20triggers.20recompilation.20of.20importing.20files/near/285839102\">said</a>:</p>\n<blockquote>\n<p>[...] but if you fix the proof term then there is no change to the content of the lemma that will break the proof</p>\n</blockquote>\n<p>Just to play devil's advocate, is this technically true given type checking timeouts (and the non-transitivity of defeq for that matter)?  I imagine one could make a situation where if one changes an upstream proof term in just the right way, then the downstream proof term would time out (or fail to typecheck because of the non-transitivity of defeq or because of technicalities with subject reduction).  I'm just being a troll of course.  I see now reason this needs to be taken into account when considering practical proof recompilation strategies</p>",
        "id": 285842307,
        "sender_full_name": "Jason Rute",
        "timestamp": 1655040110
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/113488-general/topic/Changing.20a.20proof.20triggers.20recompilation.20of.20importing.20files/near/285841776\">said</a>:</p>\n<blockquote>\n<p>Lean 4 uses a much more conservative approach there, it will not propagate changes between open files unless you explicitly tell it to</p>\n</blockquote>\n<p>If modifying Lean 3 is not the way to go, maybe we could just add a feature in the VSCode extension to close a file in Lean but not in VSCode (and reopen it in Lean when focused in VSCode). (It would also be nice to auto-detect the list of open files (transitively) importing the low-level file and provide an option to close them all in Lean.)</p>",
        "id": 285842537,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1655040361
    },
    {
        "content": "<p><del>Oh it seems <a href=\"https://leanprover-community.github.io/tips_and_tricks.html#old-mode\">the old mode</a> also helps with this lagging issue. So maybe I should just add <code>--old</code> to the Lean command in VSCode settings. But when I do want to sync the changes, restarting Lean with <code>--old</code> will have no effect, and I'd have to manually call <code>lean --make</code>, right? Seems a fair price to pay.</del></p>\n<p>No, the old mode doesn't seem to help with the lagging issue; changes in imported files still affect files importing them even without saving.</p>",
        "id": 285843080,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1655040987
    }
]