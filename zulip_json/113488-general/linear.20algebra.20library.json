[
    {
        "content": "<p>Is there some reason the linear algebra library has facts like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">mem_span_iff_total</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">span</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"bp\">''</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"n\">l</span> <span class=\"bp\">∈</span> <span class=\"n\">supported</span> <span class=\"n\">R</span> <span class=\"n\">R</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">finsupp.total</span> <span class=\"n\">α</span> <span class=\"n\">M</span> <span class=\"n\">R</span> <span class=\"n\">v</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>but no iff statement about <code>x ∈ span R w</code> for <code>w : set M</code>? </p>\n<p><code>span</code> is defined in terms of <code>set M</code>, not in terms of indexed families, so there should be API in those terms, right?</p>\n<p>Is this just historical accident, an oversight after many rounds of refactoring, or intentional? :-(</p>",
        "id": 240576100,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1622191272
    },
    {
        "content": "<p>Should I just add this API? I don't think it's viable to rip out the current <code>span</code> and replace it with something in terms of familes rather than sets...</p>",
        "id": 240576395,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1622191481
    },
    {
        "content": "<p>Gah, and how does our naming convention possibly support <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finsupp.total_range/src\">src#finsupp.total_range</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finsupp.range_total/src\">src#finsupp.range_total</a>? They are both talking about the range of the total function, just one has a <code>surjective</code> argument...</p>",
        "id": 240576704,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1622191702
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113488-general/topic/linear.20algebra.20library/near/240576100\">said</a>:</p>\n<blockquote>\n<p>Is this just historical accident, an oversight after many rounds of refactoring, or intentional? :-(</p>\n</blockquote>\n<p>Looks like this is mostly an oversight when switching some other definitions from sets to indexed families <a href=\"https://github.com/leanprover-community/mathlib/issues/943\">#943</a>. I see no objection at all to having a lemma <code>mem_span_iff_total</code> about <code>span R w</code> and <code>mem_span_image_iff_total</code> about <code>span R (v '' s)</code>.</p>",
        "id": 240577375,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1622192157
    },
    {
        "content": "<p>I don't have anything to say, but I'm over here in England offering my moral support Scott :-)</p>",
        "id": 240577437,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622192177
    },
    {
        "content": "<p><code>finsupp.total_range</code> is useless (how are you ever going to have a surjective function from an index set to a module?), and unused, so I'm just going to remove it rather than renaming it. <a href=\"https://github.com/leanprover-community/mathlib/issues/7734\">#7734</a></p>",
        "id": 240577740,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1622192277
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/linear.20algebra.20library/near/240577437\">said</a>:</p>\n<blockquote>\n<p>I don't have anything to say, but I'm over here in England offering my moral support Scott :-)</p>\n</blockquote>\n<p>I will stop complaining and go refactor. Sorry. :-)</p>",
        "id": 240577825,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1622192313
    },
    {
        "content": "<p>Let's not feel too bad about complaining, since awareness is often the first step towards a solution :)</p>",
        "id": 240578108,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1622192504
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/7735\">#7735</a></p>",
        "id": 240578753,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1622192930
    },
    {
        "content": "<p>How would people feel about adding something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">fintype.total</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">finsupp.total</span> <span class=\"n\">α</span> <span class=\"n\">M</span> <span class=\"n\">R</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">finsupp.linear_equiv_fun_on_fintype</span> <span class=\"n\">R</span> <span class=\"n\">R</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm.to_linear_map</span>\n</code></pre></div>\n<p>(needs a better name).</p>\n<p><code>finsupp.total</code> is great, and all, but in situations when you already know your types are finite, it is painful to have to migrate back and forth via <code>finsupp.linear_equiv_fun_on_fintype </code> all the time.</p>\n<p>This proposal would involve repeating a fair bit of API for <code>finsupp.total</code>, however, so it is not cost-free (or maintaining-consistency-free).</p>",
        "id": 240580102,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1622193815
    },
    {
        "content": "<p>Existing parts of the library have tended to use <code>finset.sum (univ : finset α)</code>. Are there places where we need a bundled linear map?</p>",
        "id": 240581006,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1622194408
    },
    {
        "content": "<p>I'm working out the consequences of having <code>strong_rank_condition</code> and <code>rank_condition</code> (and knowing that all noetherian rings and all commutative rings satisfy these), and hoping to generalize all our dimensions API to work with these (rather than requiring a field), and for this I'm working with bundled linear maps all the time.</p>",
        "id": 240581134,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1622194493
    },
    {
        "content": "<p>OK, sounds like a good enough reason to do the extra work <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 240581349,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1622194622
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 242716728,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1623754630
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113488-general/topic/linear.20algebra.20library/near/240576704\">said</a>:</p>\n<blockquote>\n<p>Gah, and how does our naming convention possibly support <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finsupp.total_range/src\">src#finsupp.total_range</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finsupp.range_total/src\">src#finsupp.range_total</a>? They are both talking about the range of the total function, just one has a <code>surjective</code> argument...</p>\n</blockquote>\n<p>I am proving that any module is a quotient of a free module, using the stupid surjection <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>R</mi><mi>M</mi></msup><mo>→</mo><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">R^M \\to M</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8413309999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413309999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10903em;\">M</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span>, so <code>finsupp.total_range</code>  would be useful... should I bring it back to life or prove my lemma directly? I don't see any other reasonable applications</p>",
        "id": 242716775,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1623754671
    }
]