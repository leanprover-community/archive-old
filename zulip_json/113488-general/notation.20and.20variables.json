[
    {
        "content": "<p>It suddenly occurs to me, about 10 hours before a lecture (and I intend to spend at least 7 of those hours sleeping) that it would be cool if I could do some examples of basic arguments with equivalence relations in Lean, live in the lecture. But actually I am not sure of the best way to do this. Here's the sort of thing I want to do -- prove, for example, that if <code>r</code> is an equivalence relation, and <code>r a b</code> and <code>r c b</code> and <code>r c d</code>, then <code>r a d</code>. But I want to do it with notation -- I want to write <code>a ~ b</code> or some -- any -- random symbol, rather than the prefix notation <code>r</code>. However when I define <code>r : S -&gt; S -&gt; Prop</code> as a variable I find that I can't use notation, because <code>r</code> is a local variable, and if I define <code>r</code> within an example -- <code>example (S : Type) (r : S -&gt; S -&gt; Prop)...</code> then I can't figure out how to get notation working before I state the theorem. What am I missing? This is for teaching purposes, so I want it to look as slick as possible.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">equivalence</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">H</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n</pre></div>\n\n\n<p>That is not ideal either -- <code>H.1</code> looks a bit weird to a mathematician :-/ But I think I'd rather have the notation, and worry about <code>H.1</code> later...</p>",
        "id": 148826839,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1543532455
    },
    {
        "content": "<p>You can use local notation. For example <a href=\"https://gist.github.com/rwbarton/7bd5b3b19d930f577355a596a5ed8b4d#file-crec-lean-L7\" target=\"_blank\" title=\"https://gist.github.com/rwbarton/7bd5b3b19d930f577355a596a5ed8b4d#file-crec-lean-L7\">https://gist.github.com/rwbarton/7bd5b3b19d930f577355a596a5ed8b4d#file-crec-lean-L7</a><br>\nI don't think the fact that I used <code>parameter</code> rather than <code>variable</code> there matters for this</p>",
        "id": 148827043,
        "sender_full_name": "Reid Barton",
        "timestamp": 1543532692
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">))</span>\n\n<span class=\"n\">local</span> <span class=\"kn\">notation</span> <span class=\"n\">a</span> <span class=\"bp\">`</span> <span class=\"bp\">~</span> <span class=\"bp\">`</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">equivalence</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">Hab</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">~</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Hcb</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">~</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Hcd</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">~</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">~</span> <span class=\"n\">d</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">H</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span><span class=\"n\">Hrefl</span><span class=\"o\">,</span><span class=\"n\">Hsymm</span><span class=\"o\">,</span><span class=\"n\">Htrans</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">Hbc</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">~</span> <span class=\"n\">c</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">Hsymm</span> <span class=\"n\">Hcb</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">Hac</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">~</span> <span class=\"n\">c</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">Htrans</span> <span class=\"n\">Hab</span> <span class=\"n\">Hbc</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">Htrans</span> <span class=\"n\">Hac</span> <span class=\"n\">Hcd</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>Works! I am in two minds about whether to use rcases or cases twice and save myself the import.</p>",
        "id": 148828911,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1543534933
    },
    {
        "content": "<p>Thanks Reid.</p>",
        "id": 148828913,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1543534939
    },
    {
        "content": "<p>don't save yourself the import</p>",
        "id": 148829124,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1543535260
    },
    {
        "content": "<p>I think it is good to show off mathlib tactics when possible</p>",
        "id": 148829126,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1543535277
    },
    {
        "content": "<p>Hey! I've just noticed that the pretty printer doesn't use my nice notation for r!</p>",
        "id": 148830140,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1543536587
    },
    {
        "content": "<p>aww man, that's a bit annoying. I definitely want to work with an arbitrary equivalence relation but I'd really like the notation.</p>",
        "id": 148830862,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1543537511
    }
]