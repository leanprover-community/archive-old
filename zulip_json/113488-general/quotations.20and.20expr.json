[
    {
        "content": "<p>Hello, I am new to metaprogramming and am stuck at the following:<br>\nI want to create a <code>declaration</code> which depends on a given <code>name</code> variable, like the following:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">my_easy_decl</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">declaration</span> <span class=\"o\">:=</span>\n<span class=\"n\">mk_definition</span> <span class=\"bp\">`</span><span class=\"n\">my_def</span> <span class=\"o\">[]</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">const</span> <span class=\"n\">x</span> <span class=\"o\">[])</span>\n</pre></div>\n\n\n<p>Because my intended term is more complicated than this MWE, I was hoping to achieve the same result with reflection along the lines of</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">my_easy_decl&#39;</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">declaration</span> <span class=\"o\">:=</span>\n<span class=\"n\">mk_definition</span> <span class=\"bp\">`</span><span class=\"n\">my_def</span> <span class=\"o\">[]</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"err\">%%</span><span class=\"n\">x</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>Because <code>declaration</code>needs an <code>expr</code>(not <code>expr ff</code>), I cannot use double backtick quotation. Single backtick quotation and <code>%%</code>as above  yield</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">expr</span><span class=\"bp\">.</span><span class=\"n\">subst</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"bp\">_</span><span class=\"n\">x_1</span> <span class=\"o\">:</span> <span class=\"err\">?</span><span class=\"bp\">_</span><span class=\"n\">mlocal</span><span class=\"bp\">._</span><span class=\"n\">fresh</span><span class=\"bp\">.</span><span class=\"mi\">3030</span><span class=\"bp\">.</span><span class=\"mi\">69</span><span class=\"o\">),</span> <span class=\"bp\">_</span><span class=\"n\">x_1</span><span class=\"o\">)</span>\n<span class=\"n\">term</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"bp\">_</span><span class=\"n\">x_1</span> <span class=\"o\">:</span> <span class=\"err\">?</span><span class=\"bp\">_</span><span class=\"n\">mlocal</span><span class=\"bp\">._</span><span class=\"n\">fresh</span><span class=\"bp\">.</span><span class=\"mi\">3030</span><span class=\"bp\">.</span><span class=\"mi\">69</span><span class=\"o\">),</span> <span class=\"bp\">_</span><span class=\"n\">x_1</span><span class=\"o\">)</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">reflected</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"bp\">_</span><span class=\"n\">x_1</span> <span class=\"o\">:</span> <span class=\"err\">?</span><span class=\"n\">m_1</span><span class=\"o\">),</span> <span class=\"bp\">_</span><span class=\"n\">x_1</span><span class=\"o\">)</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">expr</span>\n</pre></div>",
        "id": 163580955,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1555521104
    },
    {
        "content": "<p>The notation <code> `(%%x) </code> doesn't make sense since that expects <code>x</code> to have type <code>expr</code> rather than <code>name</code>. It's not clear what you are aiming for here that isn't achieved by the first version</p>",
        "id": 163581246,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1555521276
    },
    {
        "content": "<p>In all likelihood, you will need to use <code>mk_const</code> and/or <code>to_expr</code> to turn your pexprs into exprs, and this will require <code>my_easy_decl</code> to be a tactic</p>",
        "id": 163581290,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1555521325
    },
    {
        "content": "<p>Thanks. I am aiming for an equivalent of the first version which does not force me to write a huge <code>expr</code> term in terms of nested constructors (because the <code>const x []</code> will just be a part of it).</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">my_easy_decl&#39;</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">declaration</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"n\">cx</span> <span class=\"err\">←</span> <span class=\"n\">mk_const</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n   <span class=\"n\">mk_definition</span> <span class=\"bp\">`</span><span class=\"n\">my_def</span> <span class=\"o\">[]</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">to_expr</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"err\">%%</span><span class=\"n\">cx</span><span class=\"o\">))</span>\n</pre></div>",
        "id": 163582029,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1555521794
    },
    {
        "content": "<p>Now the problem is that the last term is a <code>tactic expr</code>which <code>mk_definition</code>won't accept.</p>",
        "id": 163582136,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1555521853
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"210057\">@Fabian Glöckle</span> Have you seen <a href=\"https://github.com/leanprover-community/mathlib/blob/master/docs/extras/tactic_writing.md#marios-backtick-cheat-sheet\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/docs/extras/tactic_writing.md#marios-backtick-cheat-sheet\">https://github.com/leanprover-community/mathlib/blob/master/docs/extras/tactic_writing.md#marios-backtick-cheat-sheet</a>? I guess it might be useful.</p>",
        "id": 163582613,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1555522200
    },
    {
        "content": "<p>Ah great, thanks!</p>",
        "id": 163582824,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1555522302
    },
    {
        "content": "<p>... which taught me both quotation and monads.<br>\nThe following worked:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">my_easy_decl</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">declaration</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"n\">cx</span> <span class=\"err\">←</span> <span class=\"n\">mk_const</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">body</span> <span class=\"err\">←</span> <span class=\"n\">to_expr</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"err\">%%</span><span class=\"n\">cx</span><span class=\"o\">),</span>\n  <span class=\"n\">pure</span> <span class=\"err\">$</span> <span class=\"n\">mk_definition</span> <span class=\"bp\">`</span><span class=\"n\">my_def</span> <span class=\"o\">[]</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"n\">body</span>\n</pre></div>\n\n\n<p>Thanks both of you!</p>",
        "id": 163583505,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1555522718
    }
]