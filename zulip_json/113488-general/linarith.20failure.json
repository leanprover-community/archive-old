[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span> Is the following expected?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h&#39;</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">K</span><span class=\"bp\">*</span><span class=\"n\">d</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"c1\">-- linarith,  fails :-(    :-(    :-(</span>\n  <span class=\"n\">suffices</span> <span class=\"o\">:</span> <span class=\"mi\">0</span><span class=\"bp\">*</span><span class=\"mi\">0</span><span class=\"bp\">*</span><span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">K</span><span class=\"bp\">*</span><span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simpa</span> <span class=\"kn\">using</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">mul_le_mul</span> <span class=\"bp\">;</span> <span class=\"n\">try</span> <span class=\"o\">{</span> <span class=\"n\">linarith</span> <span class=\"o\">},</span>\n  <span class=\"n\">apply</span> <span class=\"n\">mul_le_mul</span> <span class=\"bp\">;</span> <span class=\"n\">linarith</span> <span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 160034053,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551815290
    },
    {
        "content": "<p><code>mul_le_mul</code> isn't linear is it</p>",
        "id": 160034103,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1551815330
    },
    {
        "content": "<p>I thought <code>lin</code> in <code>linarith</code> stands for \"life is nice\"</p>",
        "id": 160034356,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551815512
    },
    {
        "content": "<p>I think the <code>try {linarith}</code> line should be able to kill all the subgoals. It should recognize 0*0 as 0. Not sure what's failing, I'll take a look at it when I have time.</p>",
        "id": 160034498,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1551815604
    },
    {
        "content": "<p><code>try {simp; linarith}</code> works for now.</p>",
        "id": 160034513,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1551815624
    },
    {
        "content": "<p>And it certainly shouldn't work without you applying the first <code>mul_le_mul</code>, as Kenny points out that isn't a linear goal.</p>",
        "id": 160034581,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1551815666
    },
    {
        "content": "<p>Or, rather, <code>apply mul_le_mul; simp; linarith</code> in the second line finishes the proof.</p>",
        "id": 160034628,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1551815727
    },
    {
        "content": "<p>Thanks. I still wish we have better tools for such things, but linarith already goes a long way</p>",
        "id": 160034913,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551815910
    },
    {
        "content": "<p>My Lean day has been all about wishing computation were easy in Lean. I got upset and forced my way through the computation. It reminds me of my old chain rule days</p>",
        "id": 160035714,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551816479
    },
    {
        "content": "<p>The result is at: <a href=\"https://gist.github.com/PatrickMassot/82c69e2d4c30d0b7121f9fd46b5deed1\" target=\"_blank\" title=\"https://gist.github.com/PatrickMassot/82c69e2d4c30d0b7121f9fd46b5deed1\">https://gist.github.com/PatrickMassot/82c69e2d4c30d0b7121f9fd46b5deed1</a> I'd be interested in a golfed version, if someone wants to practice computing in Lean. The main definition is:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">open</span> <span class=\"n\">set</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">metric_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">metric_space</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n\n<span class=\"n\">def</span> <span class=\"n\">lipschitz_on_with</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">K</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">dist</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">K</span> <span class=\"bp\">*</span> <span class=\"n\">dist</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">lipschitz_with</span> <span class=\"n\">K</span> <span class=\"n\">f</span> <span class=\"bp\">↔</span> <span class=\"n\">lipschitz_on_with</span> <span class=\"n\">univ</span> <span class=\"n\">K</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨λ</span> <span class=\"bp\">⟨</span><span class=\"n\">hK</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">hK</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">hK</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">hK</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">(</span><span class=\"n\">mem_univ</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">mem_univ</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">⟩⟩</span>\n</pre></div>\n\n\n<p>and the goal is to prove that any map which is K-Lipschitz on a ball extends to a map which globally 2K-Lipschitz</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"n\">ℝ</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"n\">ℝ</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">lipschitz_extend_from_ball</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">F</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">lipschitz_on_with</span> <span class=\"o\">(</span><span class=\"n\">closed_ball</span> <span class=\"n\">a</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"n\">K</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"bp\">∃</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">closed_ball</span> <span class=\"n\">a</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">lipschitz_with</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"n\">g</span>\n</pre></div>\n\n\n<p>The motivation was a nice proof of the inverse function theorem. But much of the niceness of this proof relies on the fact that proving the above lemma is trivial. With a 200 lines long proof the lemma, the inverse function theorem proof looks less nice.</p>",
        "id": 160036855,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551817405
    },
    {
        "content": "<p>The 0*0 bug was easy, it's fixed now.</p>",
        "id": 160043496,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1551822571
    },
    {
        "content": "<p>Although, now that I look at your original problem again, I think this would have worked even without the fix.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h&#39;</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">K</span><span class=\"bp\">*</span><span class=\"n\">d</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">suffices</span> <span class=\"o\">:</span> <span class=\"mi\">0</span><span class=\"bp\">*</span><span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">K</span><span class=\"bp\">*</span><span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simpa</span> <span class=\"kn\">using</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">mul_le_mul</span><span class=\"bp\">;</span> <span class=\"n\">linarith</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 160043857,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1551822815
    }
]