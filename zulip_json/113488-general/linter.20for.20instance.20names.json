[
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/ring_theory/subring.lean\" title=\"https://github.com/leanprover-community/mathlib/blob/master/src/ring_theory/subring.lean\"><code>ring_theory.subring</code></a>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">ring</span>\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">is_subring</span> <span class=\"o\">(</span><span class=\"n\">closure</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n</code></pre></div>\n\n\n<p>In <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/group_theory/group_action.lean\" title=\"https://github.com/leanprover-community/mathlib/blob/master/src/group_theory/group_action.lean\"><code>group_theory.group_action</code></a>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">mul_action</span>\n<span class=\"kn\">instance</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">is_subgroup</span> <span class=\"n\">H</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">mul_action</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">quotient</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n</code></pre></div>\n\n\n<p>As a result of these instances without explicit names, the first one is called <code>ring.is_subring</code> and the second one <code>mul_action.mul_action</code>. Could we detect such <em>instances</em> of undesirable names automatically?</p>",
        "id": 196037146,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588401673
    },
    {
        "content": "<p>Maybe the best place to detect them is at their source: when Lean chooses them.</p>",
        "id": 196046831,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588417889
    }
]