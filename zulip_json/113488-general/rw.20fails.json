[
    {
        "content": "<p>What have I done wrong here?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"n\">class</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">nat</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">pf</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"err\">↑</span><span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"n\">class</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">rat</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">pf</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"err\">↑</span><span class=\"n\">q</span><span class=\"o\">)</span>\n\n<span class=\"kn\">set_option</span> <span class=\"n\">trace</span><span class=\"bp\">.</span><span class=\"kn\">check</span> <span class=\"n\">true</span>\n<span class=\"kn\">instance</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">rat_of_nat</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">nat</span> <span class=\"n\">r</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">rat</span> <span class=\"n\">r</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨</span><span class=\"o\">(</span><span class=\"n\">H</span><span class=\"bp\">.</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">),</span><span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">H2</span> <span class=\"o\">:=</span> <span class=\"n\">H</span><span class=\"bp\">.</span><span class=\"n\">pf</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">H2</span><span class=\"o\">,</span> <span class=\"c1\">-- fails</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">  rewrite tactic failed, motive is not type correct</span>\n<span class=\"cm\">nested exception message:</span>\n<span class=\"cm\">check failed, application type mismatch (use &#39;set_option trace.check true&#39; for additional details)</span>\n<span class=\"cm\">state:</span>\n<span class=\"cm\">r : ℝ,</span>\n<span class=\"cm\">H : real.nat r,</span>\n<span class=\"cm\">H2 : r = ↑(nat.n r)</span>\n<span class=\"cm\">⊢ r = ↑↑(nat.n r)</span>\n<span class=\"cm\">-/</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span><span class=\"bp\">⟩</span>\n</pre></div>\n\n\n<p>Setting <code>trace.check</code> to <code>true</code> tells me</p>\n<div class=\"codehilite\"><pre><span></span>[check] application type mismatch at\n  nat.n _a\nargument type\n  real.nat r\nexpected type\n  real.nat _a\n</pre></div>",
        "id": 148286611,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1543083998
    },
    {
        "content": "<p>well the second <code>r</code> is also being rewrited</p>",
        "id": 148286682,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1543084135
    },
    {
        "content": "<p><code>H</code> is an implicit argument in the rhs of <code>H2</code>, and it will have the wrong type after the <code>r</code> on the rhs is rewritten.</p>",
        "id": 148286695,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1543084170
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"n\">class</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">nat</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">pf</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"err\">↑</span><span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"n\">class</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">rat</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">pf</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"err\">↑</span><span class=\"n\">q</span><span class=\"o\">)</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">rat_of_nat</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">nat</span> <span class=\"n\">r</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">rat</span> <span class=\"n\">r</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨</span><span class=\"n\">H</span><span class=\"bp\">.</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">cast_coe_nat</span> <span class=\"n\">H</span><span class=\"bp\">.</span><span class=\"n\">n</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">H</span><span class=\"bp\">.</span><span class=\"n\">pf</span><span class=\"bp\">⟩</span>\n</pre></div>",
        "id": 148286760,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1543084252
    },
    {
        "content": "<p>Are there simp-lemmas that reduce these double coercions?</p>",
        "id": 148286776,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1543084320
    },
    {
        "content": "<p>sure</p>",
        "id": 148286819,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1543084348
    },
    {
        "content": "<p>So, <code>by simpa using H.pf</code>?</p>",
        "id": 148286956,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1543084622
    },
    {
        "content": "<p>je kant het proberen... toch</p>",
        "id": 148286967,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1543084654
    },
    {
        "content": "<p>I was surprised <code>rw</code> failed here:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">group_power</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">@</span><span class=\"n\">is_semiring_hom</span><span class=\"bp\">.</span><span class=\"n\">map_pow</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">  ∀ {α : Type u_1} {β : Type u_2} [_inst_1 : semiring α]</span>\n<span class=\"cm\">  [_inst_2 : semiring β] (f : α → β)</span>\n<span class=\"cm\">  [_inst_3 : is_semiring_hom f] (x : α) (n : ℕ), f (x ^ n) = f x ^ n</span>\n<span class=\"cm\">  -/</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">B</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">is_ring_hom</span> <span class=\"n\">f</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"err\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">37</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"c1\">--  rw is_semiring_hom.map_pow, -- fails</span>\n  <span class=\"n\">rw</span> <span class=\"n\">is_semiring_hom</span><span class=\"bp\">.</span><span class=\"n\">map_pow</span> <span class=\"bp\">_</span> <span class=\"n\">a</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"c1\">-- even this fails</span>\n  <span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">  rewrite tactic failed, did not find instance of the</span>\n<span class=\"cm\">  pattern in the target expression</span>\n<span class=\"cm\">  ?m_1 (a ^ n)</span>\n\n<span class=\"cm\">  ⊢ f (a ^ n) = 37</span>\n<span class=\"cm\">  -/</span>\n  <span class=\"n\">rw</span> <span class=\"n\">is_semiring_hom</span><span class=\"bp\">.</span><span class=\"n\">map_pow</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"c1\">-- works</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>I am used to cutting corners like that. What's the reason it fails?</p>",
        "id": 158385369,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550003780
    },
    {
        "content": "<p>higher order unification</p>",
        "id": 158385421,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550003837
    },
    {
        "content": "<p>no kidding</p>",
        "id": 158385433,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550003846
    },
    {
        "content": "<p>yet another argument for bundling everything</p>",
        "id": 158385437,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550003848
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 158385438,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1550003848
    },
    {
        "content": "<p>So what does Lean need to solve when trying to do this rewrite exactly?</p>",
        "id": 158385512,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550003886
    },
    {
        "content": "<blockquote>\n<p>yet another argument for bundling everything</p>\n</blockquote>\n<p>I don't understand this.</p>",
        "id": 158385546,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550003939
    },
    {
        "content": "<p>But I've not been following the bundling conversation, I don't understand the subtleties and I have other things to worry about right now. I trust it's in good hands. The only thing that worries me is that Assia and Patrick seemed to think that more bundling was when canonical structures came into their own, and we hear from Sebastian that they're going to be removed from Lean 4.</p>",
        "id": 158385580,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550003992
    },
    {
        "content": "<p>Now where's the emoji for a 5 leaf clover?</p>",
        "id": 158385634,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550004007
    },
    {
        "content": "<p>But I thought I understood higher order unification.</p>",
        "id": 158385668,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550004033
    }
]