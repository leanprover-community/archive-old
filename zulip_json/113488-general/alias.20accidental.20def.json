[
    {
        "content": "<p>When used on a structure field, <code>alias</code> creates <code>def</code>s even though they should be <code>lemma</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.alias</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic.lint</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n\n<span class=\"n\">alias</span> <span class=\"n\">foo.bar</span> <span class=\"bp\">←</span> <span class=\"n\">baz</span>\n\n<span class=\"bp\">#</span><span class=\"n\">lint</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> Checking 2 declarations (plus 13 automatically generated ones) in the current file with 23 linters -/</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> The `def_lemma` linter reports: -/</span>\n<span class=\"c\">/-</span><span class=\"cm\"> INCORRECT DEF/LEMMA: -/</span>\n<span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">baz</span> <span class=\"c\">/-</span><span class=\"cm\"> is a def, should be a lemma/theorem -/</span>\n</code></pre></div>\n<p>I assume a simple fix would be to make <code>alias</code> check whether the field is Prop-valued or not. I have no idea how to do that, though.</p>",
        "id": 255076875,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1632759747
    },
    {
        "content": "<p>cmd#alias should be the start of the breadcrumb...</p>",
        "id": 255077179,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1632759885
    },
    {
        "content": "<p>Aw man, no linkifier</p>",
        "id": 255077202,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1632759894
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 255077297,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1632759929
    },
    {
        "content": "<p><code>foo.bar</code> is a def though, so alias is just copying that. Do you want it to check if the type is Prop and automatically make it a lemma, or rather have some syntax like <code>alias lemma blah \\l foo</code> ?</p>",
        "id": 255084389,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1632762619
    },
    {
        "content": "<p>Perhaps we need to fix lean core to generate prop projections as lemmas instead?</p>",
        "id": 255085710,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1632763162
    },
    {
        "content": "<p>Oh yeah this sounds like the correct fix. Is it how it works behind the scenes? A <code>structure</code> declaration gets turned into many <code>def</code>s?</p>",
        "id": 255085886,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1632763220
    }
]