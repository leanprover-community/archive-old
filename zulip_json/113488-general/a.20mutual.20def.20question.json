[
    {
        "content": "<p>I know the usual answer to questions about <code>mutual def</code> is \"don't\", but let me try. :-)</p>\n<p>Is there any way to get</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">category_theory.category</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">v</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">category.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">O</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">→</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">π</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">O</span> <span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">Y</span><span class=\"o\">),</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">δ</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">Y</span><span class=\"o\">),</span> <span class=\"n\">L</span> <span class=\"n\">f</span> <span class=\"bp\">⟶</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n\n<span class=\"kd\">mutual</span> <span class=\"kd\">def</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">d</span> <span class=\"o\">(</span><span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span>\n<span class=\"k\">with</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">C</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">Z</span>\n<span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">O</span> <span class=\"n\">Z</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">L</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"k\">with</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">X</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">⟶</span> <span class=\"n\">X</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">π</span> <span class=\"n\">Z</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">δ</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>to work?</p>",
        "id": 233623346,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1617873174
    },
    {
        "content": "<p>The error messages are <code>ill-formed match/equations expression</code> on the <code>mutual def</code> line, and then</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">equation</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span><span class=\"o\">,</span> <span class=\"n\">term</span>\n  <span class=\"n\">π</span> <span class=\"n\">Z</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">O</span> <span class=\"n\">Z</span> <span class=\"bp\">⟶</span> <span class=\"n\">Z</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">X</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">⟶</span> <span class=\"n\">X</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>on the <code>d 0</code> line, and then</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">equation</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span><span class=\"o\">,</span> <span class=\"n\">term</span>\n  <span class=\"n\">δ</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">L</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">⟶</span> <span class=\"n\">X</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">X</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">⟶</span> <span class=\"n\">X</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>on the <code>d (n+1)</code> line.</p>\n<p>Both errors look like they actually typecheck to me!</p>",
        "id": 233623527,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1617873266
    },
    {
        "content": "<p>This is not supported.  The types need to type check without unfolding the new definitions.</p>",
        "id": 233623589,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1617873303
    },
    {
        "content": "<p>Okay!</p>",
        "id": 233623607,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1617873312
    },
    {
        "content": "<p>On the other hand</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">B</span> <span class=\"o\">(</span><span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">Σ</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">),</span> <span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">Y</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">O</span> <span class=\"n\">Z</span><span class=\"o\">,</span> <span class=\"n\">Z</span><span class=\"o\">,</span> <span class=\"n\">π</span> <span class=\"n\">Z</span><span class=\"o\">⟩</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">L</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">δ</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">X</span> <span class=\"o\">(</span><span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"n\">O</span> <span class=\"n\">π</span> <span class=\"bp\">@</span><span class=\"n\">L</span> <span class=\"bp\">@</span><span class=\"n\">δ</span> <span class=\"n\">Z</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">d</span> <span class=\"o\">(</span><span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"n\">O</span> <span class=\"n\">π</span> <span class=\"bp\">@</span><span class=\"n\">L</span> <span class=\"bp\">@</span><span class=\"n\">δ</span> <span class=\"n\">Z</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">⟶</span> <span class=\"n\">X</span> <span class=\"n\">O</span> <span class=\"n\">π</span> <span class=\"bp\">@</span><span class=\"n\">L</span> <span class=\"bp\">@</span><span class=\"n\">δ</span> <span class=\"n\">Z</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"n\">O</span> <span class=\"n\">π</span> <span class=\"bp\">@</span><span class=\"n\">L</span> <span class=\"bp\">@</span><span class=\"n\">δ</span> <span class=\"n\">Z</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">2</span>\n</code></pre></div>\n<p>seems to do the job.</p>",
        "id": 233624335,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1617873676
    },
    {
        "content": "<p>(For those following along at home, this is attempting to construct projective resolutions.)</p>",
        "id": 233624575,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1617873804
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/7111\">#7111</a></p>",
        "id": 233628258,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1617875798
    },
    {
        "content": "<p>(Particularly <a href=\"https://github.com/leanprover-community/mathlib/pull/7111/files#diff-2241628812fef532c480e6889d888d0792112e8fd8c5d99448a848d2f07d960fR130\">here</a> and <a href=\"https://github.com/leanprover-community/mathlib/pull/7111/files#diff-2241628812fef532c480e6889d888d0792112e8fd8c5d99448a848d2f07d960fR163\">here</a>.)</p>",
        "id": 233628343,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1617875867
    }
]