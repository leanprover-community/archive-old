[
    {
        "content": "<p>I would like to extract c++ programs from my lean code, but the question is how to do it! Page 6 of Programming in Lean says that \" Programs<br>\nwritten in the language can be evaluated efficiently by Leanâ€™s virtual-machine interpreter or translated automatically to C++ and compiled\"</p>",
        "id": 125171529,
        "sender_full_name": "jacke",
        "timestamp": 1523920548
    },
    {
        "content": "<p>I can see that there is a PR here that promises such functionality: <a href=\"https://github.com/leanprover/lean/pull/1241\" target=\"_blank\" title=\"https://github.com/leanprover/lean/pull/1241\">https://github.com/leanprover/lean/pull/1241</a>, but it was never integrated into the codebase (the PR was rejected). </p>\n<p>Is there a way to extract C++ programs using Lean 3.3.0?</p>\n<p>Thanks for helping, and sorry for my formatting!</p>",
        "id": 125171587,
        "sender_full_name": "jacke",
        "timestamp": 1523920676
    },
    {
        "content": "<p>So far, there is no facility for code extraction in any language. The only way to execute a Lean program is with the Lean virtual machine. The developers plan to add native code generation (like a compiler) in the next version (Lean 4) which is already under construction.</p>",
        "id": 125171694,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1523920865
    },
    {
        "content": "<p>Got it, thanks! </p>\n<p>I've been using Lean to prove out certain algorithms, and code extraction to C++ would be a wonderful way to generate an immediate efficiency dividend.</p>",
        "id": 125171818,
        "sender_full_name": "jacke",
        "timestamp": 1523921097
    },
    {
        "content": "<p>Looking forward to version 4!</p>",
        "id": 125171824,
        "sender_full_name": "jacke",
        "timestamp": 1523921107
    },
    {
        "content": "<p>You and me both! If this is something you have time for / skills for, (source) code generation in various languages would be pretty useful. My own todo list has code generation in Haskell and Rust on it but I don't know in which decade I'll get around to it <span class=\"emoji emoji-1f61d\" title=\"stuck out tongue closed eyes\">:stuck_out_tongue_closed_eyes:</span></p>",
        "id": 125171883,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1523921233
    },
    {
        "content": "<p>This is on my todo list as well, I was working on this just today</p>",
        "id": 125171887,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523921267
    },
    {
        "content": "<p>You were? Which language?</p>",
        "id": 125171928,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1523921300
    },
    {
        "content": "<p>Lean to C, or maybe ML</p>",
        "id": 125171938,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523921358
    },
    {
        "content": "<p>It's super easy to interface from C/C++ to pretty much anywhere else. <br>\nExtracting to C  would be great.</p>",
        "id": 125172006,
        "sender_full_name": "jacke",
        "timestamp": 1523921497
    },
    {
        "content": "<p>Nice! What's your approach?</p>",
        "id": 125172052,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1523921569
    },
    {
        "content": "<p>I'm still looking at large scale infrastructure, but the idea is to have a type translation for the objects, and then closure conversion and translate the rest as directly as possible</p>",
        "id": 125172100,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523921655
    },
    {
        "content": "<p>There is a question of whether to use \"advanced\" features of C++ or treat it like assembly language with nicer syntax and get rid of all the complicated control flow</p>",
        "id": 125172127,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523921738
    },
    {
        "content": "<p>Any thoughts on proving the correctness of the translation?</p>",
        "id": 125172203,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1523921852
    },
    {
        "content": "<p>I'm toying with the idea of doing this as a dissertation project, but probably code extraction should come first</p>",
        "id": 125172318,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523922040
    },
    {
        "content": "<p>That would be awesome! I'm thinking of doing that myself because I need such a feature but it's a bit of a distraction for me. One the examples in my dissertation is a non-blocking double ended queue. It would be fun if I could refine it down to executable code.</p>",
        "id": 125172374,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1523922187
    }
]