[
    {
        "content": "<p>What's the difference in <code>simp</code> behavior (if any) between these two theorems for <code>p : Prop</code>? Is one or the other preferable?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">theorem</span> <span class=\"n\">t₁</span> <span class=\"o\">(</span><span class=\"bp\">...</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">theorem</span> <span class=\"n\">t₂</span> <span class=\"o\">(</span><span class=\"bp\">...</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</pre></div>",
        "id": 126744334,
        "sender_full_name": "Sean Leather",
        "timestamp": 1526642587
    },
    {
        "content": "<p>There is a difference if <code>p</code> is an equation or another simp relation.</p>",
        "id": 126744745,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1526643289
    },
    {
        "content": "<p>Can you expand on that? I'm not sure what “another simp relation” is. Is there an example?</p>",
        "id": 126744833,
        "sender_full_name": "Sean Leather",
        "timestamp": 1526643466
    },
    {
        "content": "<p>Good question! If you have a relation <code>R</code> that is reflexive and transitive (as tagged with <code>@[refl]</code> and <code>@[trans]</code>), then you can use the simplifier to get proofs of <code>R x ?m_1</code> where <code>?m_1</code> is the simplified version of <code>x</code>.  For example think of equivalence relations such as equality modulo k in the integers.</p>",
        "id": 126745082,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1526643881
    },
    {
        "content": "<p>In mathlib it is used for the equivalence relation on types, where types are equivalent if they are equinumerous (have a bijection between them).  Then you can simplify <code>a ⨉ unit</code> to <code>a</code> for example.</p>",
        "id": 126745137,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1526643969
    },
    {
        "content": "<p>Okay. Suppose I have these:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">theorem</span> <span class=\"n\">t₁</span> <span class=\"o\">(</span><span class=\"bp\">...</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">theorem</span> <span class=\"n\">t₂</span> <span class=\"o\">(</span><span class=\"bp\">...</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</pre></div>\n\n\n<p>I would intuitively write <code>t₂</code> and not <code>t₁</code> because I know <code>=</code> is a <code>simp</code> relation, right? What happens if you have <code>t₁</code> instead of <code>t₂</code>?</p>",
        "id": 126745205,
        "sender_full_name": "Sean Leather",
        "timestamp": 1526644101
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/mathlib/blob/38d553694351f4c23a8a8216038c7c8abcb7cd32/data/equiv.lean#L166-L177\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/blob/38d553694351f4c23a8a8216038c7c8abcb7cd32/data/equiv.lean#L166-L177\">https://github.com/leanprover/mathlib/blob/38d553694351f4c23a8a8216038c7c8abcb7cd32/data/equiv.lean#L166-L177</a></p>",
        "id": 126745206,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1526644110
    },
    {
        "content": "<blockquote>\n<p>What happens if you have t₁ instead of t₂?</p>\n</blockquote>\n<p>Then simp won't be able to solve <code>b = a</code>, for instance.  It will only rewrite <code>a = b</code> to true.</p>",
        "id": 126745209,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1526644143
    },
    {
        "content": "<p>Right, makes sense.</p>",
        "id": 126745224,
        "sender_full_name": "Sean Leather",
        "timestamp": 1526644184
    },
    {
        "content": "<p>And if <code>p</code> is not a <code>simp</code> relation, is there any difference between the two?</p>",
        "id": 126745275,
        "sender_full_name": "Sean Leather",
        "timestamp": 1526644231
    },
    {
        "content": "<p>I don't think so.</p>",
        "id": 126745277,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1526644244
    },
    {
        "content": "<p>In mathlib, I see these:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"err\">$</span> <span class=\"n\">git</span> <span class=\"n\">grep</span> <span class=\"s2\">&quot;↔ true&quot;</span>\n<span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"kn\">theorem</span> <span class=\"n\">forall_mem_empty_iff</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"o\">(</span><span class=\"err\">∅</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">set</span><span class=\"bp\">/</span><span class=\"n\">basic</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span>  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"o\">(</span><span class=\"err\">∅</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"n\">logic</span><span class=\"bp\">/</span><span class=\"n\">basic</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">theorem</span> <span class=\"n\">imp_self</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"n\">iff_true_intro</span> <span class=\"n\">id</span>\n<span class=\"n\">logic</span><span class=\"bp\">/</span><span class=\"n\">basic</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">theorem</span> <span class=\"n\">imp_true_iff</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"n\">logic</span><span class=\"bp\">/</span><span class=\"n\">basic</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">theorem</span> <span class=\"n\">forall_true_iff</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"n\">logic</span><span class=\"bp\">/</span><span class=\"n\">basic</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"kn\">theorem</span> <span class=\"n\">forall_true_iff&#39;</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"bp\">↔</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"n\">logic</span><span class=\"bp\">/</span><span class=\"n\">basic</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">theorem</span> <span class=\"n\">forall_2_true_iff</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">β</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"n\">logic</span><span class=\"bp\">/</span><span class=\"n\">basic</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span>  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"n\">a</span><span class=\"o\">),</span> <span class=\"n\">γ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"n\">logic</span><span class=\"bp\">/</span><span class=\"n\">basic</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">theorem</span> <span class=\"n\">forall_prop_of_false</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">h&#39;</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"n\">h&#39;</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"n\">logic</span><span class=\"bp\">/</span><span class=\"n\">basic</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"kn\">theorem</span> <span class=\"n\">ball_true_iff</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n</pre></div>",
        "id": 126745343,
        "sender_full_name": "Sean Leather",
        "timestamp": 1526644355
    },
    {
        "content": "<p>I suppose the <code>→</code>/<code>Π</code> is special, thus <code>theorem forall_true_iff : (α → true) ↔ true</code>.</p>",
        "id": 126745409,
        "sender_full_name": "Sean Leather",
        "timestamp": 1526644450
    },
    {
        "content": "<p>Yes, without the iff true, those would be conditional simp lemmas.</p>",
        "id": 126745419,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1526644484
    },
    {
        "content": "<p>Right. So, with these few exceptions, we should write <code>@[simp] theorem t₂ (...) : p := ...</code>.</p>",
        "id": 126745473,
        "sender_full_name": "Sean Leather",
        "timestamp": 1526644565
    },
    {
        "content": "<p>(where <code>t₂</code> may or may not be conditional)</p>",
        "id": 126745495,
        "sender_full_name": "Sean Leather",
        "timestamp": 1526644647
    }
]