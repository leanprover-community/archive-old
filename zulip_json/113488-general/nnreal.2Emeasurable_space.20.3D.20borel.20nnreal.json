[
    {
        "content": "<p>How can I prove the first of these? The second and third go through. This is from formal-ml, where I am fixing the proofs that no longer work with the current version of mathlib. </p>\n<p><code>lemma nnreal_measurable_space_def:nnreal.measurable_space = borel nnreal := rfl\nlemma real_measurable_space_def:real.measurable_space = borel real := rfl\nlemma ennreal_measurable_space_def:ennreal.measurable_space = borel ennreal := rfl</code></p>",
        "id": 240714098,
        "sender_full_name": "Hunter Monroe",
        "timestamp": 1622312153
    },
    {
        "content": "<p>I guess the current measurable space structure on <code>nnreal</code> is inherited from that of <code>ℝ</code> (which indeed is by definition the Borel sigma-algebra) via the inclusion <code>coe : nnreal → ℝ</code>, i.e., the measurable space is <code>comap coe _</code>. (At least this is where I got via <code>subtype.measurable_space</code> etc.)</p>\n<p>In that case the relevant doc should be <a href=\"https://leanprover-community.github.io/mathlib_docs/measure_theory/measurable_space.html#measurable_space.comap\">this</a>.</p>",
        "id": 240722492,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1622323895
    },
    {
        "content": "<p>I copy the existing code and docstring of  <code>comap</code> below, because I have one tiny comment about the docstring, and more importantly the definition does not seem to behave the way I expected:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- The reverse image of a measure space under a function. `comap f m` contains the sets `s : set α`</span>\n<span class=\"sd\">  such that `s` is the `f`-preimage of a measurable set in `β`. -/</span>\n<span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">comap</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">measurable_space</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">measurable_space</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">measurable_set'</span>      <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"bp\">∃</span><span class=\"n\">s'</span><span class=\"o\">,</span> <span class=\"n\">m.measurable_set'</span> <span class=\"n\">s'</span> <span class=\"bp\">∧</span> <span class=\"n\">f</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">s'</span> <span class=\"bp\">=</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n  <span class=\"n\">measurable_set_empty</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">∅</span><span class=\"o\">,</span> <span class=\"n\">m.measurable_set_empty</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">measurable_set_compl</span> <span class=\"o\">:=</span> <span class=\"k\">assume</span> <span class=\"n\">s</span> <span class=\"o\">⟨</span><span class=\"n\">s'</span><span class=\"o\">,</span> <span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"n\">h₂</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨</span><span class=\"n\">s'</span><span class=\"bp\">ᶜ</span><span class=\"o\">,</span> <span class=\"n\">m.measurable_set_compl</span> <span class=\"n\">_</span> <span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"n\">h₂</span> <span class=\"bp\">▸</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">measurable_set_Union</span> <span class=\"o\">:=</span> <span class=\"k\">assume</span> <span class=\"n\">s</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n    <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">s'</span><span class=\"o\">,</span> <span class=\"n\">hs'</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">classical.axiom_of_choice</span> <span class=\"n\">hs</span> <span class=\"k\">in</span>\n    <span class=\"o\">⟨</span><span class=\"bp\">⋃</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">s'</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">m.measurable_set_Union</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">hs'</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">left</span><span class=\"o\">),</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hs'</span><span class=\"o\">]</span> <span class=\"o\">⟩</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 240722552,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1622323943
    },
    {
        "content": "<p>It seems first of all that there is a tiny misprint in the docstring: \"measure space\" should be \"measurable space\".</p>",
        "id": 240722557,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1622323954
    },
    {
        "content": "<p>But what I don't understand is why I fail to use this definition in my attempt below...</p>\n<p>Otherwise the following should prove what <span class=\"user-mention\" data-user-id=\"397140\">@Hunter Monroe</span> asked above (although the proof would anyway be terribly inelegant), but there is one really puzzling <code>sorry</code> in it (puzzling to me, at least):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.instances.real</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology.instances.nnreal</span>\n<span class=\"kn\">import</span> <span class=\"n\">measure_theory.borel_space</span>\n<span class=\"kn\">import</span> <span class=\"n\">measure_theory.measurable_space</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology.algebra.ordered.basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n<span class=\"kn\">open</span> <span class=\"n\">measurable_space</span>\n\n\n<span class=\"kd\">lemma</span> <span class=\"n\">open_imp_borel</span> <span class=\"o\">{</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">top_γ</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">γ</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">γ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">is_open</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">borel</span> <span class=\"n\">γ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">measurable_set'</span> <span class=\"n\">G</span> <span class=\"o\">:=</span> <span class=\"n\">measurable_set_generate_from</span>\n\n\n<span class=\"kd\">lemma</span> <span class=\"n\">closed_imp_borel</span> <span class=\"o\">{</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">top_γ</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">γ</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">γ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">is_closed</span> <span class=\"n\">F</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">borel</span> <span class=\"n\">γ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">measurable_set'</span> <span class=\"n\">F</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">set</span> <span class=\"n\">G</span> <span class=\"o\">:=</span> <span class=\"n\">F</span><span class=\"bp\">ᶜ</span> <span class=\"k\">with</span> <span class=\"n\">hG</span> <span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">FeqGc</span> <span class=\"o\">:=</span> <span class=\"n\">compl_compl</span> <span class=\"n\">F</span> <span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">hG</span> <span class=\"n\">at</span> <span class=\"n\">FeqGc</span> <span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">hFclosed</span> <span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">Gmble</span> <span class=\"o\">:=</span> <span class=\"n\">open_imp_borel</span> <span class=\"o\">(</span><span class=\"n\">is_open_compl_iff.mpr</span> <span class=\"n\">hFclosed</span><span class=\"o\">)</span> <span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">FeqGc</span> <span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">borel</span> <span class=\"n\">γ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">measurable_set_compl</span> <span class=\"n\">G</span> <span class=\"n\">Gmble</span> <span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n\n<span class=\"kd\">lemma</span> <span class=\"n\">nnreal_measurable_space_def</span><span class=\"o\">:</span><span class=\"n\">nnreal.measurable_space</span> <span class=\"bp\">=</span> <span class=\"n\">borel</span> <span class=\"n\">nnreal</span>\n  <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">le_antisymm</span> <span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">B</span> <span class=\"n\">hB</span> <span class=\"o\">,</span>\n    <span class=\"c1\">-- I thought the following `suffices` is what `subtype.measurable_space`</span>\n    <span class=\"c1\">-- literally means by definition, but...</span>\n    <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">s'</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">,</span> <span class=\"n\">real.measurable_space.measurable_set'</span> <span class=\"n\">s'</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">coe</span><span class=\"bp\">⁻¹'</span> <span class=\"n\">s'</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">B</span> <span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">this</span> <span class=\"k\">with</span> <span class=\"n\">C</span> <span class=\"n\">hC</span> <span class=\"o\">,</span>\n      <span class=\"c1\">-- use C , -- I expected this to lead to a goal which is just `hC`...</span>\n      <span class=\"c1\">--</span>\n      <span class=\"c1\">-- ...but it leads to a strange goal requiring to prove openness of `C`!</span>\n      <span class=\"c1\">-- Am I using `use` incorrectly to provide the set required by the ∃</span>\n      <span class=\"c1\">-- in `∃s', m.measurable_set' s' ∧ f ⁻¹' s' = s,` ?</span>\n      <span class=\"gr\">sorry</span> <span class=\"o\">,</span> <span class=\"o\">}</span> <span class=\"o\">,</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">hB</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span> <span class=\"n\">A</span> <span class=\"o\">,</span> <span class=\"n\">mble_A</span> <span class=\"o\">,</span> <span class=\"n\">hAB</span> <span class=\"o\">⟩</span> <span class=\"o\">,</span>\n    <span class=\"n\">set</span> <span class=\"n\">A'</span> <span class=\"o\">:=</span> <span class=\"n\">A</span> <span class=\"bp\">∩</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"k\">with</span> <span class=\"n\">hA'</span> <span class=\"o\">,</span>\n    <span class=\"n\">set</span> <span class=\"n\">H</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"k\">with</span> <span class=\"n\">hH</span> <span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">clos_H</span> <span class=\"o\">:</span> <span class=\"n\">is_closed</span> <span class=\"n\">H</span> <span class=\"o\">:=</span> <span class=\"n\">is_closed_ge'</span> <span class=\"mi\">0</span> <span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">mble_A'</span> <span class=\"o\">:</span> <span class=\"n\">real.measurable_space.measurable_set'</span> <span class=\"n\">A'</span> <span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">measurable_set.inter</span> <span class=\"n\">mble_A</span> <span class=\"o\">(</span><span class=\"n\">closed_imp_borel</span> <span class=\"n\">clos_H</span><span class=\"o\">)</span> <span class=\"o\">,</span> <span class=\"o\">}</span> <span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">key</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">coe</span><span class=\"bp\">⁻¹'</span> <span class=\"n\">A'</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">tidy</span> <span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"o\">[</span><span class=\"n\">A'</span> <span class=\"o\">,</span> <span class=\"o\">⟨</span> <span class=\"n\">mble_A'</span> <span class=\"o\">,</span> <span class=\"n\">key</span> <span class=\"o\">⟩]</span> <span class=\"o\">,</span> <span class=\"o\">}</span> <span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">nnreal</span><span class=\"o\">),</span> <span class=\"n\">is_open</span> <span class=\"n\">U</span> <span class=\"bp\">→</span> <span class=\"n\">nnreal.measurable_space.measurable_set'</span> <span class=\"n\">U</span> <span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">opens_measurable_space.borel_le</span> <span class=\"o\">,</span> <span class=\"o\">}</span> <span class=\"o\">,</span>\n    <span class=\"n\">intros</span> <span class=\"n\">U</span> <span class=\"n\">hU</span> <span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">key</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">is_open</span> <span class=\"n\">V</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">coe</span><span class=\"bp\">⁻¹'</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">U</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">tidy</span> <span class=\"o\">,</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">key</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span> <span class=\"n\">V</span> <span class=\"o\">,</span> <span class=\"n\">V_open</span> <span class=\"o\">,</span> <span class=\"n\">hVU</span> <span class=\"o\">⟩</span> <span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"n\">V</span> <span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"o\">⟨</span> <span class=\"n\">open_imp_borel</span> <span class=\"n\">V_open</span> <span class=\"o\">,</span> <span class=\"n\">hVU</span> <span class=\"o\">⟩</span> <span class=\"o\">,</span> <span class=\"o\">}</span> <span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 240722586,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1622323997
    },
    {
        "content": "<p>Btw, I started fiercely hitting the keyboard in the above as if it was a level of the NNG :) --- i.e., without thinking.</p>\n<p>I guess the right way would instead be to prove that <code>subtype.measurable_space</code> of any <code>borel_space</code> is the borel space on the subtype (perhaps one needs the assumption that the subtype was a Borel set to start with...). But much of the above should already work to that case.</p>\n<p>I didn't immediately find that in the library, though.</p>",
        "id": 240723744,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1622325540
    },
    {
        "content": "<p>In fact, unsurprisingly the <em>right way</em> (namely via <code>subtype.borel_space</code>) is already in <code>measure_theory.borel_space</code>, and the following works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">measure_theory.borel_space</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">nnreal_measurable_space_def</span><span class=\"o\">:</span><span class=\"n\">nnreal.measurable_space</span> <span class=\"bp\">=</span> <span class=\"n\">borel</span> <span class=\"n\">nnreal</span>\n  <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">exact</span> <span class=\"n\">borel_space.measurable_eq</span> <span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Sorry about the thoughtless answer before! (Although I still don't understand why <code>use</code> didn't work in it... I would appreciate if someone is able to clarify it to me.)</p>",
        "id": 240724968,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1622327214
    }
]