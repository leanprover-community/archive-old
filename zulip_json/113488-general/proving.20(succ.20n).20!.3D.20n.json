[
    {
        "content": "<p>What tactic can I use to prove that inductive structures can't contain themselves?</p>",
        "id": 211191096,
        "sender_full_name": "Hunter Freyer",
        "timestamp": 1600982249
    },
    {
        "content": "<p>You might like to read <a href=\"https://xenaproject.wordpress.com/2018/03/24/no-confusion-over-no_confusion/\">https://xenaproject.wordpress.com/2018/03/24/no-confusion-over-no_confusion/</a></p>",
        "id": 211191619,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1600982599
    },
    {
        "content": "<p>I don't think that's going to be enough. You need induction to prove that. There's no automation specifically for that but it could be done.</p>",
        "id": 211191811,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1600982724
    },
    {
        "content": "<p>any ideas on the general approach?</p>",
        "id": 211194136,
        "sender_full_name": "Hunter Freyer",
        "timestamp": 1600984302
    },
    {
        "content": "<p>oh, I guess I can just do induction like you said. Rather tedious.</p>",
        "id": 211194413,
        "sender_full_name": "Hunter Freyer",
        "timestamp": 1600984511
    },
    {
        "content": "<p>You can use the autogenerated <code>sizeof</code> function to prove this kind of thing in many cases</p>",
        "id": 211194414,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600984513
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.linarith</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">T</span>\n<span class=\"bp\">|</span> <span class=\"n\">leaf</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">T</span>\n<span class=\"bp\">|</span> <span class=\"n\">node</span> <span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"bp\">→</span> <span class=\"n\">T</span> <span class=\"bp\">→</span> <span class=\"n\">T</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">T_ne_left</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">T.node</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">≠</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"n\">mt</span> <span class=\"o\">(</span><span class=\"n\">congr_arg</span> <span class=\"n\">T.sizeof</span><span class=\"o\">)</span> <span class=\"bp\">$</span> <span class=\"n\">ne_of_gt</span> <span class=\"bp\">$</span>\n<span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">T.sizeof</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"k\">show</span> <span class=\"n\">sizeof</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">_</span><span class=\"bp\">;</span> <span class=\"n\">linarith</span>\n</code></pre></div>",
        "id": 211195154,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600985040
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">my_int</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">my_int</span>\n<span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"o\">:</span> <span class=\"n\">my_int</span> <span class=\"bp\">→</span> <span class=\"n\">my_int</span>\n<span class=\"bp\">|</span> <span class=\"n\">pred</span> <span class=\"o\">:</span> <span class=\"n\">my_int</span> <span class=\"bp\">→</span> <span class=\"n\">my_int</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">pred_succ_eq</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">my_int</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">n.pred.succ</span> <span class=\"bp\">=</span> <span class=\"n\">n.succ.pred</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">my_int</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"n\">n.succ</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"n\">my_int.rec_on</span> <span class=\"n\">n</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">my_int.no_confusion</span> <span class=\"n\">h</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">k</span> <span class=\"n\">h</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">my_int.succ.inj</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">k</span> <span class=\"n\">h</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">pred_succ_eq</span> <span class=\"n\">at</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">my_int.pred.inj</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 211195633,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1600985396
    },
    {
        "content": "<p>I have a tactic lying around that automates Mario's approach. Will get PR'd at some point. <code>cases</code> could also be extended to solve this sort of goal.</p>",
        "id": 211266556,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1601044926
    }
]