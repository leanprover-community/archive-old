[
    {
        "content": "<p>Just finished proving this theorem about roots of polynomials, but I'm getting the following errors and I don't understand why</p>\n<div class=\"codehilite\"><pre><span></span>unexpected occurrence of recursive function\nunivariate_poly.lean:574:18: warning\ndefinition &#39;roots_aux&#39; was incorrectly marked as noncomputable\n</pre></div>\n\n\n<p>It clearly should be marked as noncomputable, and I have no idea what `unexpected occurence of recursive function means</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">noncomputable</span> <span class=\"n\">def</span> <span class=\"n\">roots_aux</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"bp\">≤</span> <span class=\"n\">degree</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">root</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">}</span>\n<span class=\"bp\">|</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">dite</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">root</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">prop_decidable</span> <span class=\"bp\">_</span><span class=\"o\">)</span>\n  <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"bp\">≤</span> <span class=\"n\">degree</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">root</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"k\">let</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">indefinite_description</span> <span class=\"bp\">_</span> <span class=\"n\">h</span> <span class=\"k\">in</span>\n  <span class=\"k\">have</span> <span class=\"n\">hpd</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">degree</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">pos_of_ne_zero</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"k\">begin</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">eq_C_of_degree_eq_zero</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">root</span><span class=\"o\">,</span> <span class=\"n\">eval_C</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">degree</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">leading_coeff_ne_zero</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">h</span> <span class=\"n\">at</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n      <span class=\"n\">contradiction</span><span class=\"o\">,</span>\n    <span class=\"kn\">end</span><span class=\"o\">),</span>\n  <span class=\"k\">have</span> <span class=\"n\">hd0</span> <span class=\"o\">:</span> <span class=\"n\">div_by_monic</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">monic_X_sub_C</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n    <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">mul_div_eq_iff_root</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">hx</span><span class=\"bp\">;</span>\n      <span class=\"n\">simp</span> <span class=\"bp\">*</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">wf</span> <span class=\"o\">:</span> <span class=\"n\">degree</span> <span class=\"o\">(</span><span class=\"n\">div_by_monic</span> <span class=\"n\">p</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">degree</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n    <span class=\"n\">degree_div_by_monic_lt</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">monic_X_sub_C</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n    <span class=\"o\">((</span><span class=\"n\">degree_X_sub_C</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"bp\">▸</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ_pos</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"n\">hpd</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"bp\">⟨</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">htd</span><span class=\"o\">,</span> <span class=\"n\">htr</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">roots_aux</span> <span class=\"o\">(</span><span class=\"n\">div_by_monic</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">monic_X_sub_C</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"n\">hd0</span> <span class=\"k\">in</span>\n  <span class=\"bp\">⟨</span><span class=\"n\">insert</span> <span class=\"n\">x</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"k\">calc</span> <span class=\"o\">(</span><span class=\"n\">insert</span> <span class=\"n\">x</span> <span class=\"n\">t</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"bp\">≤</span> <span class=\"n\">t</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">card_insert_le</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"n\">degree</span> <span class=\"o\">(</span><span class=\"n\">div_by_monic</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">monic_X_sub_C</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ_le_succ</span> <span class=\"n\">htd</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"bp\">_</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ_le_of_lt</span> <span class=\"n\">wf</span><span class=\"o\">,</span>\n  <span class=\"k\">begin</span>\n    <span class=\"k\">assume</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mem_insert</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">htr</span><span class=\"o\">,</span> <span class=\"n\">eq_comm</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">root_X_sub_C</span><span class=\"o\">],</span>\n    <span class=\"n\">conv</span> <span class=\"o\">{</span><span class=\"n\">to_lhs</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">mul_div_eq_iff_root</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">hx</span><span class=\"o\">},</span>\n    <span class=\"n\">exact</span> <span class=\"bp\">⟨</span><span class=\"n\">root_or_root_of_root_mul</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">cases_on</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">root_mul_right_of_root</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">root_mul_left_of_root</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">⟩</span>\n  <span class=\"kn\">end</span><span class=\"bp\">⟩</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"err\">∅</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">zero_le</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">finish</span><span class=\"bp\">⟩</span><span class=\"o\">)</span>\n<span class=\"n\">using_well_founded</span> <span class=\"o\">{</span><span class=\"n\">rel_tac</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">exact</span> <span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"n\">measure_wf</span> <span class=\"n\">degree</span><span class=\"bp\">⟩</span><span class=\"o\">]}</span>\n</pre></div>\n\n\n<p>The full file is here <a href=\"https://github.com/dorhinj/leanstuff/blob/master/univariate_poly.lean\" target=\"_blank\" title=\"https://github.com/dorhinj/leanstuff/blob/master/univariate_poly.lean\">https://github.com/dorhinj/leanstuff/blob/master/univariate_poly.lean</a></p>",
        "id": 127171623,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1527442321
    },
    {
        "content": "<p>it happens with equation compilers</p>",
        "id": 127171663,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527442369
    },
    {
        "content": "<p>since they provide you with the theorem you're trying to prove, in case you want to do recursion</p>",
        "id": 127171666,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527442384
    },
    {
        "content": "<p>but some tactics touch every local hypothesis</p>",
        "id": 127171669,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527442396
    },
    {
        "content": "<p>Suspects I spot: <code>contradiction</code>, <code>simp * at *</code></p>",
        "id": 127171714,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527442457
    },
    {
        "content": "<p>the latter has a higher chance of being the perpetrator</p>",
        "id": 127171715,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527442465
    },
    {
        "content": "<p>I don't think it's that or it would have asked me to prove something. I replaced both of those with <code>admit</code> and I still get the error.</p>",
        "id": 127171716,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1527442491
    },
    {
        "content": "<p>how did you define <code>polynomial</code>?</p>",
        "id": 127171808,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527442706
    },
    {
        "content": "<p>can you prove strong induction?</p>",
        "id": 127171809,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527442731
    },
    {
        "content": "<p>polynomial is <code>ℕ →₀ α</code>. I have proved and defined stuff in this manner before. I have just rewritten this function using <code>well_founded.fix</code>, and it works, but it would be nice to know what's going on.</p>",
        "id": 127172447,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1527444302
    },
    {
        "content": "<div class=\"message_inline_image\"><a href=\"https://i.imgflip.com/2b3qrs.jpg\" target=\"_blank\" title=\"https://i.imgflip.com/2b3qrs.jpg\"><img src=\"https://i.imgflip.com/2b3qrs.jpg\"></a></div>",
        "id": 127172498,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527444433
    },
    {
        "content": "<p>noooo lean memes</p>",
        "id": 127172737,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527445082
    },
    {
        "content": "<p>I wouldn't feel bad about directly using <code>well_founded.fix</code>... the using_well_founded tactic is undocumented and hard to debug unless you know what's going on behind the scenes</p>",
        "id": 127172770,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1527445111
    },
    {
        "content": "<p>I don't think this should be a problematic definition, but I can't run it as is</p>",
        "id": 127172776,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527445154
    },
    {
        "content": "<p>(but maybe I'm just bad at Lean)</p>",
        "id": 127172824,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1527445206
    },
    {
        "content": "<p>(it's not actually a tactic, it's a keyword)</p>",
        "id": 127172828,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527445250
    },
    {
        "content": "<p>(shows how much I've used it... I needed wf recursion a few months ago and struggled with <code>well_founded.fix</code>, and since it worked, never bothered to figure out <code>using_well_founded</code>)</p>",
        "id": 127172883,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1527445399
    },
    {
        "content": "<p>the offending tactic is <code>by finish</code> at the end</p>",
        "id": 127172932,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527445539
    },
    {
        "content": "<p>I must be blind</p>",
        "id": 127172933,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527445551
    },
    {
        "content": "<p>use <code>by clear roots_aux; finish</code> instead</p>",
        "id": 127172938,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527445561
    },
    {
        "content": "<p>I found it by just replacing things by <code>sorry</code> until the error went away</p>",
        "id": 127172981,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527445618
    }
]