[
    {
        "content": "<p>Motivated by performance gains coming from squeezing (non)-terminal simps (<a href=\"https://github.com/leanprover-community/mathlib/pull/17344\">#17344</a>), I've looked a bit into profiling. It seems however that profiling whole files (or even folders) is not very nice since the output of <code>lean --profile $file</code> is rather verbose. What I would be interested in would be a list of say the 10 worst performing proofs or all proofs that take longer than 2s (on my machine this indicates long <code>simp</code>s). Is there a quick&amp;dirty way to do that?</p>",
        "id": 308146028,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1667657128
    },
    {
        "content": "<p><code>-Dprofiler.threshold=2000</code></p>",
        "id": 308146160,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1667657187
    },
    {
        "content": "<p>Thanks. This seems to be suited to find non-terminal simps: in <code>linear_algebra/basic</code>: equiv_map_of_injective 7.85s -&gt; 490ms</p>",
        "id": 308148660,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1667658290
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/17367\">#17367</a><br>\neven with <code>-Dprofiler.threshold=5</code> (5sec) there are still false negatives, but they can be found together with the (pretty bad) regex I wrote.</p>",
        "id": 308154738,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1667661276
    },
    {
        "content": "<p>and the winner of the \"worst performance in <code>analysis/normed_space</code>\"-award is <code>is_bounded_bilinear_map.is_bounded_linear_map_deriv</code> with 33.7s followed by <code>homeomorph_unit_ball</code> with 32s.<br>\nIt is impossible to find non-terminal simps with the profiler, there are so many badly performing proofs/declarations..</p>",
        "id": 308161955,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1667664725
    },
    {
        "content": "<p>but hey <code>is_bounded_bilinear_map.is_bounded_linear_map_deriv</code> does have non-terminal simps <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 308162196,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1667664864
    },
    {
        "content": "<p>Sometimes the culprit is hidden behind some slow defeq check. In these cases it can be hard to find it, but it's sometimes possible to do a single rewrite before the defeq check to make it fast.</p>",
        "id": 308177307,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1667674864
    },
    {
        "content": "<p>Yeah there is a real art to something like this. There are all sorts of subtle reasons why things could be slow, and one of the hardest to debug is a <code>refl</code> which is taking forever because of one unfortunate <code>unfold</code> taking the elaborator on a 10 second detour. Sometimes a rewrite fixes it, sometimes making something <code>irreducible</code> fixes it etc etc.</p>",
        "id": 308190819,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1667685461
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"412682\">Moritz Doll</span> <a href=\"#narrow/stream/113488-general/topic/Profiling.20mathlib/near/308161955\">said</a>:</p>\n<blockquote>\n<p>It is impossible to find non-terminal simps with the profiler, there are so many badly performing proofs/declarations..</p>\n</blockquote>\n<p>Surely there's no/little correlation between non-terminal simps and compilation time?</p>",
        "id": 308272111,
        "sender_full_name": "YaÃ«l Dillies",
        "timestamp": 1667751027
    },
    {
        "content": "<p>I think he meant <code>simp</code> vs <code>simp only</code></p>",
        "id": 308275869,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1667753229
    }
]