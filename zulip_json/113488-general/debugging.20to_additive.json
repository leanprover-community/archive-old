[
    {
        "content": "<p>I'm writing code about open subgroups. Patrick wrote the first lemma here and I wrote the second. Note: this is not a MWE, the WE is \"clone the perfectoid project and try this in <code>for_mathlib/nonarchimedean/open_subgroup</code>\" and I'm not going to minimise right now because I'm looking for techniques, not answers.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">to_additive</span> <span class=\"n\">open_add_subgroup</span><span class=\"bp\">.</span><span class=\"n\">is_open_of_open_add_subgroup</span><span class=\"o\">]</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">is_open_of_open_subgroup</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">G</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">is_subgroup</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">open_subgroup</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"err\">⊆</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_open</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">is_open_iff_forall_mem_open</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">h₂</span> <span class=\"k\">with</span> <span class=\"bp\">⟨⟨</span><span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">h₁U</span><span class=\"o\">,</span> <span class=\"n\">h₂U</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">H</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">⁻¹</span><span class=\"err\">&#39;</span> <span class=\"n\">U</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">u</span> <span class=\"n\">hu</span><span class=\"o\">,</span>\n    <span class=\"n\">erw</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem_preimage_eq</span> <span class=\"n\">at</span> <span class=\"n\">hu</span><span class=\"o\">,</span>\n    <span class=\"n\">replace</span> <span class=\"n\">hu</span> <span class=\"o\">:=</span> <span class=\"n\">H</span> <span class=\"n\">hu</span><span class=\"o\">,</span>\n    <span class=\"n\">simpa</span> <span class=\"kn\">using</span> <span class=\"n\">is_submonoid</span><span class=\"bp\">.</span><span class=\"n\">mul_mem</span> <span class=\"n\">hu</span> <span class=\"n\">hx</span> <span class=\"o\">},</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">continuous_mul</span> <span class=\"n\">continuous_id</span> <span class=\"n\">continuous_const</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">h₁U</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">apply_instance</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">erw</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem_preimage_eq</span><span class=\"o\">,</span>\n    <span class=\"n\">simpa</span> <span class=\"kn\">using</span> <span class=\"n\">is_submonoid</span><span class=\"bp\">.</span><span class=\"n\">one_mem</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h₂U</span><span class=\"bp\">.</span><span class=\"n\">to_is_submonoid</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">to_additive</span> <span class=\"n\">open_add_subgroup</span><span class=\"bp\">.</span><span class=\"n\">is_closed</span><span class=\"o\">]</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">is_closed</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">open_subgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_closed</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">show</span> <span class=\"n\">is_open</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">G</span><span class=\"o\">)),</span>\n  <span class=\"n\">rw</span> <span class=\"n\">is_open_iff_forall_mem_open</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">⁻¹</span><span class=\"err\">&#39;</span> <span class=\"n\">U</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">u</span> <span class=\"n\">hux</span><span class=\"o\">,</span>\n    <span class=\"n\">erw</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem_preimage_eq</span> <span class=\"n\">at</span> <span class=\"n\">hux</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem_compl_iff</span> <span class=\"n\">at</span> <span class=\"n\">hx</span> <span class=\"err\">⊢</span><span class=\"o\">,</span>\n    <span class=\"n\">intro</span> <span class=\"n\">hu</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n    <span class=\"n\">convert</span> <span class=\"n\">is_submonoid</span><span class=\"bp\">.</span><span class=\"n\">mul_mem</span> <span class=\"o\">(</span><span class=\"n\">is_subgroup</span><span class=\"bp\">.</span><span class=\"n\">inv_mem</span> <span class=\"n\">hux</span><span class=\"o\">)</span> <span class=\"n\">hu</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"o\">},</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">continuous_mul</span> <span class=\"n\">continuous_id</span> <span class=\"n\">continuous_const</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">U</span><span class=\"bp\">.</span><span class=\"n\">is_open</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">apply_instance</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">erw</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem_preimage_eq</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">mul_inv_self</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">is_submonoid</span><span class=\"bp\">.</span><span class=\"n\">one_mem</span> <span class=\"bp\">_</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>First lemma works fine. Second lemma gives error</p>\n<div class=\"codehilite\"><pre><span></span>type mismatch at application\n  @open_subgroup.is_open G _inst_1\nterm\n  _inst_1\nhas type\n  add_group G\nbut is expected to have type\n  group G\n</pre></div>\n\n\n<p>and my interpretation of this error is \"the <code>to_additive</code> algorithm failed\". Indeed if I comment out <code>@[to_additive open_add_subgroup.is_closed]</code> the error goes away.</p>\n<p>How do I begin to debug this issue? I would prefer an answer which didn't involve bisection (i.e. attempting to prove smaller and smaller lemmas using automation) -- that's what I'm trying to avoid.</p>",
        "id": 164327849,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556358920
    },
    {
        "content": "<p>Maybe one intermediate lemma used in the proof misses a <code>to_additive</code> tag</p>",
        "id": 164328155,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1556359486
    },
    {
        "content": "<p>Right. But Lean knows which one, and yet the only way I know of for finding out for myself is by a tedious process involving lots of sublemmas half the size of the previous sublemma. Whereas Lean knows right now.</p>",
        "id": 164328179,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556359562
    },
    {
        "content": "<p>Offtopic, but your first lemma's assumptions are too strong: you just need <code>s</code> to contain a nonempty open set.</p>",
        "id": 164328668,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1556360283
    },
    {
        "content": "<p>Indeed! Nice catch, thanks.</p>",
        "id": 164328838,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556360590
    },
    {
        "content": "<p>OK so I debugged this by cutting and pasting the old proof and then trying to fix it and luckily I ran into the missing thing.</p>",
        "id": 164342505,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556381906
    },
    {
        "content": "<p>There's no better way? I was lucky that <code>mul_X</code> was defined and <code>add_X</code> was not; if it had been defined but not given the attribute I suspect this method would have failed.</p>",
        "id": 164342522,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556381974
    },
    {
        "content": "<p>The error actually tells you which to_additive tag is missing, if you know where to look. The error says it tried to apply <code>open_subgroup.is_open</code>, but it is expecting a <code>group</code> and it was given an <code>add_group</code>. That's because <code>group</code> got translated correctly but <code>open_subgroup.is_open</code> didn't. So double check that <code>open_subgroup.is_open</code> has a <code>@[to_additive open_add_subgroup.is_open]</code> annotation</p>",
        "id": 164350862,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1556394564
    },
    {
        "content": "<p>Yes, that was exactly the problem. I should have read the error more carefully instead of just throwing my hands in the air!</p>",
        "id": 164351014,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556394801
    },
    {
        "content": "<p>We had defined <code>open_subgroup.is_open</code> ,  left a gap, and then defined <code>open_add_subgroup.is_open</code> and added the annotation then. Is it safe to just put the annotation before the first definition instead of after the second one? I still don't feel I quite know how these things work. We should do something with equation lemmas too, right?</p>",
        "id": 164351065,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556394889
    },
    {
        "content": "<p>You can either write <code>open_subgroup.is_open</code> with a <code>@[to_additive open_add_subgroup.is_open]</code> annotation, and it will be generated automatically, or you can write <code>open_subgroup.is_open</code> and <code>open_add_subgroup.is_open</code> and put <code>attribute [to_additive open_add_subgroup.is_open] open_subgroup.is_open</code> afterwards. This will add the tag but will not create the theorem, which can be useful if the proof is not automatic for some reason</p>",
        "id": 164351365,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1556395350
    },
    {
        "content": "<p>But what about all of the equation lemmas etc? We also then have to tag all of these, right? this is the impression I'm getting from looking at mathlib.</p>",
        "id": 164351381,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556395401
    },
    {
        "content": "<p>For <code>def</code>s, you also have to mark the equation lemmas with <code>to_additive</code></p>",
        "id": 164351383,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1556395403
    },
    {
        "content": "<p>Right. Can't this be done automatically?</p>",
        "id": 164351386,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556395415
    },
    {
        "content": "<p>in principle</p>",
        "id": 164351389,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1556395421
    },
    {
        "content": "<p>right now <code>to_additive</code> doesn't do this because it's not easy to find out when this is necessary</p>",
        "id": 164351441,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1556395446
    },
    {
        "content": "<p>Also you can't create equation lemmas manually (they have a special internal tag that isn't accessible to tactics) so it's not a perfect replica</p>",
        "id": 164351474,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1556395545
    }
]