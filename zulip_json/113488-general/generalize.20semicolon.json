[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"n\">generalize</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">refl</span><span class=\"o\">}</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">generalize</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">refl</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">generalize</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"bp\">;</span> <span class=\"n\">refl</span>\n</pre></div>",
        "id": 171517972,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1563888564
    },
    {
        "content": "<p>somehow the last one breaks Lean</p>",
        "id": 171517986,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1563888579
    },
    {
        "content": "<p>Kenny, this is just because error handling in the parser monad is screwed</p>",
        "id": 171520308,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1563889960
    },
    {
        "content": "<p>There is a bug which never got fixed</p>",
        "id": 171520319,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1563889972
    },
    {
        "content": "<p>what's the bug?</p>",
        "id": 171520321,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1563889977
    },
    {
        "content": "<p>The actually error which is being suppressed is that the semicolon is being parsed as part of the <code>0 = n</code> stuff and that's throwing an error</p>",
        "id": 171520361,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1563890001
    },
    {
        "content": "<p>But then that is hidden from you</p>",
        "id": 171520366,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1563890007
    },
    {
        "content": "<p>And instead you just get that</p>",
        "id": 171520377,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1563890014
    },
    {
        "content": "<p><code>vm_check</code> business</p>",
        "id": 171520393,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1563890023
    },
    {
        "content": "<p>MWE:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">open</span> <span class=\"n\">tactic</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span> <span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">types</span> <span class=\"n\">interactive</span> <span class=\"n\">lean</span><span class=\"bp\">.</span><span class=\"n\">parser</span> <span class=\"n\">lean</span> <span class=\"n\">expr</span>\n\n<span class=\"kn\">private</span> <span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">some_arg</span> <span class=\"o\">:</span> <span class=\"n\">parser</span> <span class=\"o\">(</span><span class=\"n\">pexpr</span> <span class=\"bp\">×</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">fail</span> <span class=\"s2\">&quot;OOPSIE&quot;</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">oopsie</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">some_arg</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span>\n<span class=\"o\">:=</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">skip</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">oopsie</span><span class=\"bp\">;</span> <span class=\"n\">refl</span>\n</pre></div>",
        "id": 171520477,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1563890063
    },
    {
        "content": "<p>In this case <code>private meta def generalize_arg_p : parser (pexpr × name)</code> in the definition of <code>generalize</code> is failing</p>",
        "id": 171520519,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1563890095
    },
    {
        "content": "<p>The culprit is</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">private</span> <span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">generalize_arg_p_aux</span> <span class=\"o\">:</span> <span class=\"n\">pexpr</span> <span class=\"bp\">→</span> <span class=\"n\">parser</span> <span class=\"o\">(</span><span class=\"n\">pexpr</span> <span class=\"bp\">×</span> <span class=\"n\">name</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"n\">macro</span> <span class=\"bp\">_</span> <span class=\"o\">[</span><span class=\"n\">const</span> <span class=\"bp\">`</span><span class=\"n\">eq</span> <span class=\"bp\">_</span> <span class=\"o\">])</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">local_const</span> <span class=\"n\">x</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"n\">fail</span> <span class=\"s2\">&quot;parse error&quot;</span>\n\n<span class=\"kn\">private</span> <span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">generalize_arg_p</span> <span class=\"o\">:</span> <span class=\"n\">parser</span> <span class=\"o\">(</span><span class=\"n\">pexpr</span> <span class=\"bp\">×</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">with_desc</span> <span class=\"s2\">&quot;expr = id&quot;</span> <span class=\"err\">$</span> <span class=\"n\">parser</span><span class=\"bp\">.</span><span class=\"n\">pexpr</span> <span class=\"mi\">0</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">generalize_arg_p_aux</span>\n</pre></div>",
        "id": 171520573,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1563890136
    },
    {
        "content": "<p>That <code>fail \"parse error\"</code> is setting fire to the world and then blowing it up,<br>\ninstead of just printing <code>parse error</code> to the console. I have a fix in mathlib for the coersion from <code>parser</code> to <code>tactic</code>, but I'd wager that doesn't fix this situation, since the parser being invoked is too deep I think (unless it works in a more hacky way than I expect, in which case importing <code>tactic.core</code> may just magically fix the issue).</p>",
        "id": 171520600,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1563890158
    },
    {
        "content": "<p>After checking, indeed it doesn't.</p>",
        "id": 171520859,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1563890322
    }
]