[
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/blob/2ef444afbbdcae10682b2d46479c3f267caca0b6/src/data/finset.lean#L309-L310\">https://github.com/leanprover-community/mathlib/blob/2ef444afbbdcae10682b2d46479c3f267caca0b6/src/data/finset.lean#L309-L310</a></p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">elab_as_eliminator</span><span class=\"o\">]</span> <span class=\"kn\">protected</span> <span class=\"kn\">theorem</span> <span class=\"n\">induction_on</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"err\">∅</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">⦄</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">},</span> <span class=\"n\">a</span> <span class=\"err\">∉</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">insert</span> <span class=\"n\">a</span> <span class=\"n\">s</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 198576967,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590316068
    },
    {
        "content": "<p>should we have a classical version that removes <code>decidable_eq</code>?</p>",
        "id": 198577008,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590316089
    },
    {
        "content": "<p>Inside <code>open_locale classical</code> you already have this <code>decidable_eq</code>.</p>",
        "id": 198577024,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1590316159
    },
    {
        "content": "<p>sometimes it's slow to infer the classical instance of <code>decidable_eq</code></p>",
        "id": 198577142,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590316338
    },
    {
        "content": "<p>I was vaguely under the impression that we had a linter about <code>decidable_eq</code> hypotheses of theorems</p>",
        "id": 198577300,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590316693
    },
    {
        "content": "<p>what does it do?</p>",
        "id": 198577310,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590316765
    },
    {
        "content": "<p>It checks that you didn't accidentally prove a constructive theorem if you might as well have proven it classically.</p>",
        "id": 198577430,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590316955
    },
    {
        "content": "<p>I think the insert here means you need a decidable eq in the statement</p>",
        "id": 198579667,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1590321000
    },
    {
        "content": "<p>Oh right we were just discussing this example last week.</p>",
        "id": 198579724,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590321067
    },
    {
        "content": "<p>Maybe we should have a version that uses whatever the <code>insert</code> alternative was that didn't need decidable equality.</p>",
        "id": 198579737,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590321113
    },
    {
        "content": "<p>I could have sworn I made this definition:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">finset</span>\n\n<span class=\"n\">def</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">cons</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"err\">∉</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨</span><span class=\"n\">a</span> <span class=\"bp\">::</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">nodup_cons_of_nodup</span> <span class=\"n\">h</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">⟩</span>\n</code></pre></div>",
        "id": 198579884,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590321306
    }
]