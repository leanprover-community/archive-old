[
    {
        "content": "<p>I've brought this up before, but I'dd really hope that there is a way to get rid of blocks like this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">section</span> <span class=\"n\">simp</span>\n\n<span class=\"kn\">section</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">comma</span> <span class=\"n\">L₂</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"err\">⟶</span> <span class=\"n\">Y</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">L₁</span> <span class=\"err\">⟹</span> <span class=\"n\">L₂</span><span class=\"o\">}</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">map_left_obj_left</span>  <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">map_left</span> <span class=\"n\">R</span> <span class=\"n\">l</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">X</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">left</span>  <span class=\"bp\">=</span> <span class=\"n\">X</span><span class=\"bp\">.</span><span class=\"n\">left</span>                <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">map_left_obj_right</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">map_left</span> <span class=\"n\">R</span> <span class=\"n\">l</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">X</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">right</span> <span class=\"bp\">=</span> <span class=\"n\">X</span><span class=\"bp\">.</span><span class=\"n\">right</span>               <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">map_left_obj_hom</span>   <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">map_left</span> <span class=\"n\">R</span> <span class=\"n\">l</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">X</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">hom</span>   <span class=\"bp\">=</span> <span class=\"n\">l</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">X</span><span class=\"bp\">.</span><span class=\"n\">left</span> <span class=\"err\">≫</span> <span class=\"n\">X</span><span class=\"bp\">.</span><span class=\"n\">hom</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">map_left_map_left</span>  <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">map_left</span> <span class=\"n\">R</span> <span class=\"n\">l</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">left</span>  <span class=\"bp\">=</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">left</span>                <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">map_left_map_right</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">map_left</span> <span class=\"n\">R</span> <span class=\"n\">l</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">right</span> <span class=\"bp\">=</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">right</span>               <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">section</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">comma</span> <span class=\"n\">L</span> <span class=\"n\">R₁</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"err\">⟶</span> <span class=\"n\">Y</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R₁</span> <span class=\"err\">⟹</span> <span class=\"n\">R₂</span><span class=\"o\">}</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">map_right_obj_left</span>  <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">map_right</span> <span class=\"n\">L</span> <span class=\"n\">r</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">X</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">left</span>  <span class=\"bp\">=</span> <span class=\"n\">X</span><span class=\"bp\">.</span><span class=\"n\">left</span>                 <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">map_right_obj_right</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">map_right</span> <span class=\"n\">L</span> <span class=\"n\">r</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">X</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">right</span> <span class=\"bp\">=</span> <span class=\"n\">X</span><span class=\"bp\">.</span><span class=\"n\">right</span>                <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">map_right_obj_hom</span>   <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">map_right</span> <span class=\"n\">L</span> <span class=\"n\">r</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">X</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">hom</span>   <span class=\"bp\">=</span> <span class=\"n\">X</span><span class=\"bp\">.</span><span class=\"n\">hom</span> <span class=\"err\">≫</span> <span class=\"n\">r</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">X</span><span class=\"bp\">.</span><span class=\"n\">right</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">map_right_map_left</span>  <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">map_right</span> <span class=\"n\">L</span> <span class=\"n\">r</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">left</span>  <span class=\"bp\">=</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">left</span>                 <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">map_right_map_right</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">map_right</span> <span class=\"n\">L</span> <span class=\"n\">r</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">right</span> <span class=\"bp\">=</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">right</span>                <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">simp</span>\n</pre></div>",
        "id": 148623451,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1543306177
    },
    {
        "content": "<p>You define a new category, and afterwards you have to state pages of trivialities. There must be some structure to this, which we can abuse, so that automation just does this for us. Has there been any thought in this direction?</p>",
        "id": 148623511,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1543306235
    },
    {
        "content": "<p>You can put <code>@[simp]</code> on the thing you defined (I guess <code>map_left</code>, <code>map_right</code>)</p>",
        "id": 148635044,
        "sender_full_name": "Reid Barton",
        "timestamp": 1543322214
    },
    {
        "content": "<p>Is that good practice? I thought it was some how considered evil, because it marked too much as <code>simp</code>?</p>",
        "id": 148635271,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1543322518
    },
    {
        "content": "<p>it's probably not what you want, because then it will unfold even when it is not being projected</p>",
        "id": 148635344,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1543322590
    },
    {
        "content": "<p>Aha, so I want <code>derive simp-projections</code></p>",
        "id": 148635439,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1543322724
    },
    {
        "content": "<p>Is that possible?</p>",
        "id": 148635440,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1543322728
    },
    {
        "content": "<p>in theory</p>",
        "id": 148635603,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1543322955
    },
    {
        "content": "<p>it gets complicated with nested structures, but you could inspect the definition for a structure instance and extract the parts</p>",
        "id": 148635672,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1543323017
    },
    {
        "content": "<p>this would basically be the same thing that the equation compiler does</p>",
        "id": 148635680,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1543323045
    },
    {
        "content": "<p>I see. I hope someone with a lot of tactic-fu will pop up and write something like this (-;</p>",
        "id": 148635832,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1543323273
    }
]