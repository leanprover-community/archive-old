[
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/actions/runs/3213471175/jobs/5254145610\">#15681 fails linting</a> because it uses two semireducible defs to define two instances:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Error</span><span class=\"o\">:</span> <span class=\"n\">homotopy_group.group</span> <span class=\"bp\">-</span> <span class=\"n\">This</span> <span class=\"kd\">instance</span> <span class=\"n\">contains</span> <span class=\"n\">the</span> <span class=\"n\">declarations</span> <span class=\"o\">[</span><span class=\"n\">equiv.group</span><span class=\"o\">],</span> <span class=\"n\">which</span> <span class=\"n\">are</span> <span class=\"n\">semireducible</span> <span class=\"n\">non</span><span class=\"bp\">-</span><span class=\"n\">instances.</span>\n<span class=\"n\">Error</span><span class=\"o\">:</span> <span class=\"n\">homotopy_group.comm_group</span> <span class=\"bp\">-</span> <span class=\"n\">This</span> <span class=\"kd\">instance</span> <span class=\"n\">contains</span> <span class=\"n\">the</span> <span class=\"n\">declarations</span> <span class=\"o\">[</span><span class=\"n\">eckmann_hilton.comm_group</span><span class=\"o\">,</span> <span class=\"n\">_private.1983293365.aux_group</span><span class=\"o\">],</span> <span class=\"n\">which</span> <span class=\"n\">are</span> <span class=\"n\">semireducible</span> <span class=\"n\">non</span><span class=\"bp\">-</span><span class=\"n\">instances.</span>\n</code></pre></div>\n<p>I've tried <code>local attribute [reducible] equiv.group eckmann_hilton.comm_group</code>, then <code>#lint</code> succeeds within the section but fails once placed outside of the section. I've also tried <code>@[inline]</code> which seems to have no effect. Should I:</p>\n<ul>\n<li>Add <code>@[nolint check_reducibility]</code> to the two instance declarations homotopy.group.comm_group;</li>\n<li>Make <code>equiv.group</code> and <code>eckmann_hilton.comm_group</code> globally reducible;</li>\n<li>or is there a better solution?</li>\n</ul>",
        "id": 303161076,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1665340282
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/15681\">#15681</a></p>",
        "id": 303171775,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1665349267
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/eckmann_hilton.comm_group\">docs#eckmann_hilton.comm_group</a> should 100% be reducible. If it is not, I'm quite sure that type-class inference doesn't know that the multiplication in <code>comm_group (π_(n+2) X x)</code> and the multiplication in <code>group (π_(n+1) X x)</code> are definitionally equal, which is (obviously) problematic.</p>",
        "id": 303171965,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1665349510
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/equiv.group\">docs#equiv.group</a> might be fine semireducible: assuming you don't define a <code> homotopy_group.monoid</code> or <code> homotopy_group.semigroup</code> or <code>homotopy_group.has_mul</code> or something, then it doesn't hurt to <code>nolint</code> it. However, it also doesn't hurt (much) to make it reducible...</p>",
        "id": 303172095,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1665349675
    },
    {
        "content": "<p>Btw: the reason that the linter complains even if you change the reducibility locally is because the linter is intended to be a global-coherence linter: it needs to check if in other files two instances (like <code>homotopy_group.group</code> and <code>homotopy_group.comm_group</code> have unifiable fields).</p>",
        "id": 303172190,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1665349764
    },
    {
        "content": "<p>Thanks for your input. It turns out the is a solution (or hack?) in earlier code which I thought was unnecessary repetition but in fact does work to as a way to appease the linter: simply make an auxiliary definition</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[reducible]</span> <span class=\"kd\">def</span> <span class=\"n\">comm_group_aux</span> <span class=\"o\">:</span> <span class=\"n\">comm_group</span> <span class=\"o\">(</span><span class=\"n\">π_</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">X</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">@</span><span class=\"n\">eckmann_hilton.comm_group</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>and then</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">comm_group</span> <span class=\"o\">:</span> <span class=\"n\">comm_group</span> <span class=\"o\">(</span><span class=\"n\">π_</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">X</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">comm_group_aux</span>\n</code></pre></div>\n<p>then the linter no longer complains. I'm not sure whether everything is actually made reducible with this trick; maybe the linter is confused by this trick and isn't working as expected.</p>",
        "id": 303192523,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1665373731
    },
    {
        "content": "<p>I don't see any reason not to make <code>equiv.group</code> etc reducible</p>",
        "id": 303196359,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1665377491
    },
    {
        "content": "<p>Let me open a PR and see if CI is happy :)</p>",
        "id": 303196472,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1665377605
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/16884\">#16884</a></p>",
        "id": 303198201,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1665379196
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224323\">Junyan Xu</span> <a href=\"#narrow/stream/113488-general/topic/semireducible.20non-instances/near/303192523\">said</a>:</p>\n<blockquote>\n<p>Thanks for your input. It turns out the is a solution (or hack?) in earlier code which I thought was unnecessary repetition but in fact does work to as a way to appease the linter: simply make an auxiliary definition</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[reducible]</span> <span class=\"kd\">def</span> <span class=\"n\">comm_group_aux</span> <span class=\"o\">:</span> <span class=\"n\">comm_group</span> <span class=\"o\">(</span><span class=\"n\">π_</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">X</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">@</span><span class=\"n\">eckmann_hilton.comm_group</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>and then</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">comm_group</span> <span class=\"o\">:</span> <span class=\"n\">comm_group</span> <span class=\"o\">(</span><span class=\"n\">π_</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">X</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">comm_group_aux</span>\n</code></pre></div>\n<p>then the linter no longer complains. I'm not sure whether everything is actually made reducible with this trick; maybe the linter is confused by this trick and isn't working as expected.</p>\n</blockquote>\n<p>This is a bad solution and just shows that the linter doesn't catch all problematic behavior. Don't do this and just mark <code>eckmann_hilton.comm_group</code> as reducible.</p>",
        "id": 303217883,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1665390969
    },
    {
        "content": "<p>There is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.transport\">docs#tactic.transport</a> that use <code>equiv.group</code> etc. under the hood, but it doesn't take care of making things reducible, as far as I can see from the code; if it could take care of it, we may be able to keep <code>equiv.group</code> etc. semireducible, but probably there's no point in doing so.</p>\n<p>(Update: I may be wrong, I'm not actually sure if the <code>transport</code> tactic uses stuff in transfer_instance ...)</p>",
        "id": 303291292,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1665419520
    },
    {
        "content": "<p>I don't think that's a reason to make <code>equiv.group</code> reducible; any manual users of <code>equiv.group</code> will also likely want it reducible, so it should just be globally reducible</p>",
        "id": 303300120,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1665422909
    },
    {
        "content": "<p>But also, pretty much everywhere in mathlib where <a href=\"https://leanprover-community.github.io/mathlib_docs/find/equiv.group/src\">src#equiv.group</a> could be used, we use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/function.injective.group\">docs#function.injective.group</a> instead</p>",
        "id": 303300160,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1665422929
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/function.injective.group\">docs#function.injective.group</a> is inconvenient in that you have to first provide the has_one/mul/inv/div/npow/zpow instances and what are transferred by <a href=\"http://function.injective.group\">function.injective.group</a> are only the group properties. This would be cumbersome to do in the case of homotopy groups.</p>",
        "id": 303304153,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1665424753
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/function.injective.group\">docs#function.injective.group</a> is used to build instances like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/mul_opposite.group\">docs#mul_opposite.group</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ulift.group\">docs#ulift.group</a> etc. one by one from ground up, but if you want to do it in one stretch then <a href=\"https://leanprover-community.github.io/mathlib_docs/find/equiv.group\">docs#equiv.group</a> and alike are certainly more convenient.</p>",
        "id": 303304588,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1665424964
    },
    {
        "content": "<p>In fact <a href=\"https://leanprover-community.github.io/mathlib_docs/find/equiv.group\">docs#equiv.group</a> uses <a href=\"https://leanprover-community.github.io/mathlib_docs/find/function.injective.group\">docs#function.injective.group</a> under the hood</p>",
        "id": 303304663,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1665425019
    }
]