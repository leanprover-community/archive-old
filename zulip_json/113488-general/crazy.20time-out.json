[
    {
        "content": "<p>Maria found a way of getting <code>subtype.val</code> to time out. The example below isn't very minimal but it is pretty weird. The subtype <code>foo</code> below is defined with an <code>∃</code> and then <code>bar</code> times out. If you change the <code>∃</code> to a <code>∀ </code> then the timeout goes away though?! </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebraic_geometry.prime_spectrum.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory.dedekind_domain</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology.algebra.valued_field</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">valuation</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"bp\">Γ₀</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_comm_monoid_with_zero</span> <span class=\"bp\">Γ₀</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">valuation</span> <span class=\"n\">S</span> <span class=\"bp\">Γ₀</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">valuation.def</span> <span class=\"o\">:</span> <span class=\"n\">v</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">v.to_fun</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">valuation</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_domain</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_dedekind_domain</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_fraction_ring</span> <span class=\"n\">R</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- Note : not the maximal spectrum if R is a field</span>\n<span class=\"kd\">def</span> <span class=\"n\">maximal_spectrum</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">prime_spectrum</span> <span class=\"n\">R</span> <span class=\"bp\">//</span> <span class=\"n\">v.as_ideal</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">maximal_spectrum</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">}</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">ring.adic_valuation.def</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">maximal_spectrum</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">with_zero</span> <span class=\"o\">(</span><span class=\"n\">multiplicative</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">dite</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">),</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">multiplicative.of_add</span>\n  <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">associates.mk</span> <span class=\"n\">v.val.as_ideal</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">count</span> <span class=\"o\">(</span><span class=\"n\">associates.mk</span> <span class=\"o\">(</span><span class=\"n\">ideal.span</span><span class=\"o\">{</span><span class=\"n\">r</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">R</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">factors</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)))</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">adic_valuation.def</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">maximal_spectrum</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">with_zero</span> <span class=\"o\">(</span><span class=\"n\">multiplicative</span> <span class=\"n\">ℤ</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"k\">let</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"n\">classical.some</span> <span class=\"o\">(</span><span class=\"n\">classical.some_spec</span> <span class=\"o\">(</span><span class=\"n\">is_localization.mk'_surjective</span>\n  <span class=\"o\">(</span><span class=\"n\">non_zero_divisors</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"k\">in</span> <span class=\"o\">(</span><span class=\"n\">ring.adic_valuation.def</span> <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">classical.some</span>\n    <span class=\"o\">(</span><span class=\"n\">is_localization.mk'_surjective</span> <span class=\"o\">(</span><span class=\"n\">non_zero_divisors</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">)))</span><span class=\"bp\">/</span><span class=\"o\">(</span><span class=\"n\">ring.adic_valuation.def</span> <span class=\"n\">v</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">adic_valuation</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">maximal_spectrum</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">valuation</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"n\">with_zero</span> <span class=\"o\">(</span><span class=\"n\">multiplicative</span> <span class=\"n\">ℤ</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">to_fun</span>    <span class=\"o\">:=</span> <span class=\"n\">adic_valuation.def</span> <span class=\"n\">v</span><span class=\"o\">,</span>\n  <span class=\"n\">map_zero'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">map_one'</span>  <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">map_mul'</span>  <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">map_add'</span>  <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">v_valued_K</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">maximal_spectrum</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">valued</span> <span class=\"n\">K</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"bp\">Γ₀</span>  <span class=\"o\">:=</span> <span class=\"n\">with_zero</span> <span class=\"o\">(</span><span class=\"n\">multiplicative</span> <span class=\"n\">ℤ</span><span class=\"o\">),</span>\n  <span class=\"n\">grp</span> <span class=\"o\">:=</span> <span class=\"n\">infer_instance</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- necessary</span>\n  <span class=\"n\">v</span>   <span class=\"o\">:=</span> <span class=\"n\">adic_valuation</span> <span class=\"n\">v</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">ts'</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">K</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">valued.topological_space</span> <span class=\"n\">K</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">v_valued_K</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">tdr'</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">topological_division_ring</span> <span class=\"n\">K</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">ts'</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">valued.topological_division_ring</span> <span class=\"n\">K</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">v_valued_K</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">us'</span> <span class=\"o\">:</span> <span class=\"n\">uniform_space</span> <span class=\"n\">K</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">topological_add_group.to_uniform_space</span> <span class=\"n\">K</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">ts'</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">_</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">ug'</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">uniform_add_group</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"n\">us'</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">topological_add_group_is_uniform</span> <span class=\"n\">K</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">ts'</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">_</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">K</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">K_v</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">uniform_space.completion</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"n\">us'</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">field</span> <span class=\"o\">(</span><span class=\"n\">K_v</span> <span class=\"n\">K</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">field_completion</span> <span class=\"n\">K</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">us'</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">tdr'</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">ug'</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">_</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">K_hat</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">maximal_spectrum</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"n\">K_v</span> <span class=\"n\">K</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- change ∃ to ∀ and the problem goes away!</span>\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">K_hat</span> <span class=\"n\">R</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">//</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">maximal_spectrum</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">v</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"mi\">37</span> <span class=\"o\">}</span>\n\n<span class=\"c1\">-- times out</span>\n<span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">R</span> <span class=\"n\">K</span> <span class=\"bp\">→</span> <span class=\"n\">K_hat</span> <span class=\"n\">R</span> <span class=\"n\">K</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x.1</span>\n</code></pre></div>",
        "id": 263470182,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1638465194
    },
    {
        "content": "<p>this seems to work</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- Change // to | and it works!</span>\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">K_hat</span> <span class=\"n\">R</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">maximal_spectrum</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">v</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"mi\">37</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">R</span> <span class=\"n\">K</span> <span class=\"bp\">→</span> <span class=\"n\">K_hat</span> <span class=\"n\">R</span> <span class=\"n\">K</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x.1</span>\n</code></pre></div>",
        "id": 263484285,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1638471318
    },
    {
        "content": "<p>Also this works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">K_hat</span> <span class=\"n\">R</span> <span class=\"n\">K</span> <span class=\"bp\">//</span> <span class=\"n\">true</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">maximal_spectrum</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">v</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"mi\">37</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">R</span> <span class=\"n\">K</span> <span class=\"bp\">→</span> <span class=\"n\">K_hat</span> <span class=\"n\">R</span> <span class=\"n\">K</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x.1</span>\n</code></pre></div>",
        "id": 263484532,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1638471435
    },
    {
        "content": "<p>And this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">baz</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">K_hat</span> <span class=\"n\">R</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">maximal_spectrum</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">v</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"mi\">37</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">K_hat</span> <span class=\"n\">R</span> <span class=\"n\">K</span> <span class=\"bp\">//</span>  <span class=\"n\">baz</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">x</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">R</span> <span class=\"n\">K</span> <span class=\"bp\">→</span> <span class=\"n\">K_hat</span> <span class=\"n\">R</span> <span class=\"n\">K</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x.1</span>\n</code></pre></div>",
        "id": 263484721,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1638471522
    },
    {
        "content": "<p>So as long as you put the smallest of wrappers around the proposition, it seems to be okay.</p>",
        "id": 263484789,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1638471555
    },
    {
        "content": "<p>I think it's an issue with 37, or perhaps the inverse.</p>",
        "id": 263486293,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1638472149
    },
    {
        "content": "<p>E.g. this works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">K_hat</span> <span class=\"n\">R</span> <span class=\"n\">K</span> <span class=\"bp\">//</span> <span class=\"bp\">∃</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">maximal_spectrum</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">R</span> <span class=\"n\">K</span> <span class=\"bp\">→</span> <span class=\"n\">K_hat</span> <span class=\"n\">R</span> <span class=\"n\">K</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x.1</span>\n</code></pre></div>",
        "id": 263486327,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1638472165
    },
    {
        "content": "<p>Yes -- the inverse is causing the trouble because it uses the field structure. It's the field structure which is causing the kernel to get stuck. I think it must be the kernel because <code>λ x, begin exact x.1, sorry, end</code> gives \"goals accomplished\" and an error on the <code>sorry</code>. The issue is the field structure on K_v. Maria's fix was simply to define an auxiliary <code>P x := ∃ (v : maximal_spectrum R), (x v)⁻¹ = 37</code> and then use <code>{x // P x}</code>, which also works. But don't you think it's completely bizarre?</p>",
        "id": 263496564,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1638477085
    },
    {
        "content": "<p>Yeah it's strange.</p>",
        "id": 263499409,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1638478701
    }
]