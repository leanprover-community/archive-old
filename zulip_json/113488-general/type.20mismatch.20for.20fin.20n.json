[
    {
        "content": "<p>I am surprised that this doesn't typecheck:</p>",
        "id": 123579325,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520797117
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>def subtypeadd {m : ℕ} {n : ℕ} (A : fin m) (B : fin n) : fin (m+n) :=\n  ⟨A.val+B.val,add_lt_add A.is_lt B.is_lt⟩\n\nexample (A : fin 3) (B : fin 4) (C : fin 7)\n  : A = ⟨2,dec_trivial⟩ → B = ⟨0,dec_trivial⟩ → C = subtypeadd A B → C = ⟨2,dec_trivial⟩ := sorry\n</pre></div>",
        "id": 123579326,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520797123
    },
    {
        "content": "<p>It complains at <code>subtypeadd</code> that <code>A</code> has type <code>fin 3</code> and it expects it to have type <code>fin 6</code>??</p>",
        "id": 123579333,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520797164
    },
    {
        "content": "<p>I think this is the default elaboration strategy's fault</p>",
        "id": 123579423,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1520797346
    },
    {
        "content": "<p>It's hard for me to see what's going on because it doesn't typecheck so I don't have any term to work with</p>",
        "id": 123579425,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520797374
    },
    {
        "content": "<p>Obviously I can fix it with @</p>",
        "id": 123579430,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520797390
    },
    {
        "content": "<p>but here -- hey -- can you be the elaborator like you sometimes do?</p>",
        "id": 123579431,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520797409
    },
    {
        "content": "<p>You can make it typecheck by writing <code>@subtypeadd _ _ A B</code> or adding <code>@[elab_simple]</code> to the definition of subtypeadd</p>",
        "id": 123579432,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1520797416
    },
    {
        "content": "<p>You have to figure out what m and n are</p>",
        "id": 123579433,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520797427
    },
    {
        "content": "<p>and the only clues you have are that A : fin m and A : fin 3</p>",
        "id": 123579434,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520797437
    },
    {
        "content": "<p>what do you think</p>",
        "id": 123579435,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520797440
    },
    {
        "content": "<p>mr elaborator</p>",
        "id": 123579472,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520797445
    },
    {
        "content": "<p>It sees that the goal is <code>fin 7</code> and so has to solve <code>7 =?= ?m1 + ?m2</code>. I think if you unfold 7 enough (<code>bit1 (bit1 one)</code>) you get <code>bit0 (bit1 one) + 1</code>, i.e. <code>6+1</code>. So it's the most obvious split and lean takes it</p>",
        "id": 123579497,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1520797523
    },
    {
        "content": "<p>Aah excellent!</p>",
        "id": 123579501,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520797552
    },
    {
        "content": "<p>so in fact this is a fun game</p>",
        "id": 123579541,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520797589
    },
    {
        "content": "<p>guess the error</p>",
        "id": 123579542,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520797597
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>example (A : fin 3) (B : fin 5) (C : fin 8)\n  : A = ⟨2,dec_trivial⟩ → B = ⟨0,dec_trivial⟩ → C = subtypeadd A B → C = ⟨2,dec_trivial⟩ := sorry\n</pre></div>",
        "id": 123579543,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520797602
    },
    {
        "content": "<p>you have to guess the spurious complaint that Lean makes</p>",
        "id": 123579544,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520797619
    },
    {
        "content": "<p>for <code>fin 2n</code> it wants <code>A : fin n</code> and for <code>fin (2n+1)</code> it wants <code>A : fin (2n)</code></p>",
        "id": 123579594,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520797748
    }
]