[
    {
        "content": "<p>Enrico Tassi, Th√©o Zimmermann and I just published a preprint describing the <a href=\"https://github.com/coq/platform\">Coq Platform</a>, the official distribution of Coq together with libraries, plugins, and tools: <a href=\"https://hal.inria.fr/hal-03592675/document\">https://hal.inria.fr/hal-03592675/document</a></p>\n<p>We focus in particular on applying the Coq Platform for reproducing research artifacts, such as formalizations of mathematics, and on preparing specialized distributions for teaching with Coq.</p>\n<p>We are interested in any feedback on this from the Lean community, in particular on our comparison of the Platform to Lean/mathlib in <a href=\"https://hal.inria.fr/hal-03592675/document?page=9\">section 7.4 on page 9</a>.</p>",
        "id": 273657404,
        "sender_full_name": "Karl Palmskog",
        "timestamp": 1646148392
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"198375\">@Karl Palmskog</span> Thanks! I completely agree with what you say about backwards compatibility and upgrade paths concerning Lean and mathlib. However, in an orthogonal direction, mathlib makes a very strong effort for internal compatibility. So that the algebra hierarchy is compatible by design with the topological library, etc... I think this is one benefit of mathlibs approach that deserves to be mentioned.</p>",
        "id": 273669131,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1646152537
    },
    {
        "content": "<p>Do you have an approximate release schedule/frequency in mind?</p>",
        "id": 273669702,
        "sender_full_name": "Reid Barton",
        "timestamp": 1646152740
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> we follow Coq's approximate cycle of 6-month turnaround for releases (Platform release comes about 1-2 months after a Coq release)</p>",
        "id": 273669832,
        "sender_full_name": "Karl Palmskog",
        "timestamp": 1646152786
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> thanks for the feedback, we will note this for any camera ready or resubmission (the current submission is to <a href=\"https://qcomp.org/rrrr/2022/\">RRRR 20222</a>, but we hope it will be invited to a journal)</p>",
        "id": 273670018,
        "sender_full_name": "Karl Palmskog",
        "timestamp": 1646152848
    },
    {
        "content": "<p>I would argue, though, that MathComp has a similar \"internal compatibility\" policy as Mathlib, and we do include MathComp itself and many MathComp standalone subprojects in the Platform</p>",
        "id": 273670276,
        "sender_full_name": "Karl Palmskog",
        "timestamp": 1646152956
    },
    {
        "content": "<p>I suspect there may be a specific \"MathComp Platform\" for teaching at some point that's a strict subset of the general Platform</p>",
        "id": 273670420,
        "sender_full_name": "Karl Palmskog",
        "timestamp": 1646153031
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"198375\">@Karl Palmskog</span> Regarding the specific wording of \"In contrast to Coq, which aims to provide up-<br>\ngrade paths between versions, Lean 3 and Lean 4 are largely incompatible\", these two things are not in opposition. You can be incompatible and also aim to provide an upgrade path, and indeed if upgrading is a thing you need to do to the code then it sounds like it's already not backward compatible. For lean 3 -&gt; lean 4 we are in fact investing heavily in providing an upgrade path, this is the <a href=\"https://github.com/leanprover-community/mathport\">mathport</a> tool.</p>",
        "id": 273725524,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1646175968
    },
    {
        "content": "<p>the Coq compatibility policy means, with minor exceptions, that a project that is compatible with Coq version 8.X and has no deprecation warnings on 8.X will be compatible at the source level out-of-the-box with Coq version 8.(X+1) - but possibly with deprecation warnings on 8.(X+1). To me, even in the presence of tool to help with porting, this is a difference in <em>kind</em> and not in <em>degree</em> compared to the Lean approach.</p>",
        "id": 273770016,
        "sender_full_name": "Karl Palmskog",
        "timestamp": 1646208841
    },
    {
        "content": "<p>but if the paper gets considered for a journal submission, we will be sure to add more specifics about compatibility management in our comparisons.</p>",
        "id": 273770239,
        "sender_full_name": "Karl Palmskog",
        "timestamp": 1646209011
    },
    {
        "content": "<p>We incorporated feedback from the topic here into a new version of the paper (<a href=\"https://hal.inria.fr/hal-03592675v2\">https://hal.inria.fr/hal-03592675v2</a>). For example, we mention the mathport tool in our Lean comparison.</p>\n<p>The new paper version will be the basis of a presentation in the <a href=\"https://qcomp.org/rrrr/2022/\">RRRR</a> reproducibility workshop at ETAPS on April 2, 2022. Any feedback on the new paper version is also welcome, since we hope to do a journal version eventually.</p>",
        "id": 275803828,
        "sender_full_name": "Karl Palmskog",
        "timestamp": 1647610986
    }
]