[
    {
        "content": "<p>This doesn't work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.fintype.basic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">holor</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ds</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">fintype</span> <span class=\"o\">(</span><span class=\"n\">ds</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">ds</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">holor</span> <span class=\"n\">ℕ</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">fin</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"n\">fin</span> <span class=\"mi\">4</span><span class=\"o\">]</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"kd\">class</span> <span class=\"kd\">instance</span> <span class=\"n\">for</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"n\">succ.succ</span><span class=\"o\">),</span> <span class=\"n\">fintype</span> <span class=\"o\">(</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">fin</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"n\">fin</span> <span class=\"mi\">4</span><span class=\"o\">]</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>What can I do to teach lean how to find this instance?</p>",
        "id": 219314820,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607507130
    },
    {
        "content": "<p>Why not like this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">holor</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ds</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">ds</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n</code></pre></div>",
        "id": 219315077,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1607507285
    },
    {
        "content": "<p>wow we're stretching the limits of the vector notation aren't we</p>",
        "id": 219315224,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1607507398
    },
    {
        "content": "<p>This works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">fintype_base</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"o\">(</span><span class=\"n\">matrix.vec_cons</span> <span class=\"n\">α</span> <span class=\"bp\">!</span><span class=\"o\">[]</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">matrix.cons_val_fin_one</span><span class=\"o\">,</span>\n  <span class=\"n\">apply_instance</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">fintype_step</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">fintype</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"o\">(</span><span class=\"n\">matrix.vec_cons</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">i.induction_on</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">matrix.cons_val_zero</span><span class=\"o\">,</span> <span class=\"n\">apply_instance</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">i</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">matrix.cons_val_succ</span><span class=\"o\">,</span> <span class=\"n\">apply_instance</span><span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 219315763,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607507720
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"129120\">@Alexander Bentkamp</span>; There's no problem with that, but you'll note that <a href=\"https://leanprover-community.github.io/mathlib_docs/find/matrix\">docs#matrix</a> allows arbitrary finite indices</p>",
        "id": 219315809,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607507760
    },
    {
        "content": "<p>Eg I can have a matrix whose columns are the (discrete) phases of the  moon, and whose rows are the primary colors</p>",
        "id": 219315899,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607507793
    },
    {
        "content": "<p>Ok, I see.</p>",
        "id": 219315979,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1607507854
    },
    {
        "content": "<p>I'm saddened to find that this is not legal:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">one_arg_base</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">cls</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">cls</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">cls</span> <span class=\"o\">(</span><span class=\"n\">matrix.vec_cons</span> <span class=\"n\">α</span> <span class=\"bp\">!</span><span class=\"o\">[]</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 219316050,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607507891
    },
    {
        "content": "<p>Just making sure that you're aware of the holor part of library, which deals well with arbitrary type-level indexes. <a href=\"https://leanprover-community.github.io/mathlib_docs/find/holor\">docs#holor</a></p>",
        "id": 219338159,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1607522078
    },
    {
        "content": "<p>Except it doesn't - it uses integer indices</p>",
        "id": 219338874,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607522448
    },
    {
        "content": "<p>That's where this thread started from</p>",
        "id": 219338899,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607522461
    }
]