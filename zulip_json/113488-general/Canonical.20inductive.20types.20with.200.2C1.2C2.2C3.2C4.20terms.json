[
    {
        "content": "<p>We have <code>empty</code> and <code>unit</code>, which seem quite unquestionable. For an inductive type with two elements, we have <code>bool</code>, although it might be considered <em>abuse</em> to treat it as an \"arbitrary\" type with two elements. How about types with 3 or 4 elements?<br>\nShould we have <code>inductive three | a | b | c</code> and <code>inductive four | a | b | c | d</code> ?</p>",
        "id": 204649718,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595413326
    },
    {
        "content": "<p>why not an inductive type with <code>n</code> elements?</p>",
        "id": 204649895,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1595413481
    },
    {
        "content": "<p>(<code>fin2</code>, egō tē videō)</p>",
        "id": 204649904,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1595413496
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\">- An alternate definition of `fin n` defined as an inductive type</span>\n<span class=\"cm\">  instead of a subtype of `nat`. This is useful for its induction</span>\n<span class=\"cm\">  principle and different definitional equalities. -/</span>\n<span class=\"kn\">inductive</span> <span class=\"n\">fin2</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">fz</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">fin2</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">fs</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">fin2</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">fin2</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 204649948,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1595413534
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/blob/2ae7ad811f7bacb636698705064c82551faddbf8/src/data/fin2.lean\">https://github.com/leanprover-community/mathlib/blob/2ae7ad811f7bacb636698705064c82551faddbf8/src/data/fin2.lean</a></p>",
        "id": 204649950,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1595413539
    },
    {
        "content": "<p>or, even better, just use the recursor for <code>fin</code></p>",
        "id": 204650446,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1595414007
    },
    {
        "content": "<p>who cares if it's inductive <em>by definition</em></p>",
        "id": 204650452,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1595414020
    },
    {
        "content": "<p><code>fin</code> and <code>fin2</code> both satisfy the spec for <code>fin</code> so speaking as a mathematician I would say I'd be happy with either of them, but to make my life easy can we just fix upon one?</p>",
        "id": 204651016,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595414526
    },
    {
        "content": "<p>This is another notation question. Will we be able to tell the equation compiler in Lean 4 \"and let me use those cool bars, here's your recursor\"?</p>",
        "id": 204651092,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595414615
    },
    {
        "content": "<p>I think the canonical type with no terms should be 37</p>",
        "id": 204651159,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595414649
    },
    {
        "content": "<p>there is a problem here right? All those pesky computer scientists think that the canonical type with 0 terms is <code>pempty</code>, but with our new system it's also <code>fin3 0</code> right?</p>",
        "id": 204651212,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595414697
    },
    {
        "content": "<p>I thought only mathematicians knew what \"canonical\" meant...</p>",
        "id": 204651333,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1595414784
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110064\">Kenny Lau</span> <a href=\"#narrow/stream/113488-general/topic/Canonical.20inductive.20types.20with.200.2C1.2C2.2C3.2C4.20terms/near/204650446\">said</a>:</p>\n<blockquote>\n<p>or, even better, just use the recursor for <code>fin</code></p>\n</blockquote>\n<p>As far as I know that means you will get a really ugly match expression, if you want the map <code>fin 4 → polynomial nat</code><br>\nthat sends <br>\n<code>0</code> to <code>0</code>,<br>\n<code>1</code> to <code>X^2 + 3</code>,<br>\n<code>2</code> to <code>X + 5</code>, and<br>\n<code>3</code> to <code>X^37  + 57 * X + 1</code></p>",
        "id": 204651675,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595415083
    },
    {
        "content": "<p>Maybe I can abuse that <code>nat</code> is inductive by definition...</p>",
        "id": 204651766,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595415150
    },
    {
        "content": "<p>then make it more beautiful</p>",
        "id": 204651768,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1595415150
    },
    {
        "content": "<p>Sure, but it requires writing dedicated code for <code>fin 2</code>, <code>fin 3</code>, <code>fin 4</code>, right? There's not a generic thing I can do, I guess.</p>",
        "id": 204651820,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595415203
    },
    {
        "content": "<p><code>data.matrix.notation</code>?</p>",
        "id": 204653130,
        "sender_full_name": "Reid Barton",
        "timestamp": 1595416543
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">fin</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">elab_as_eliminator</span><span class=\"o\">]</span>\n<span class=\"n\">def</span> <span class=\"n\">const_n_ary</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">n</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"n\">C</span> <span class=\"bp\">→</span> <span class=\"n\">ih</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">n</span> <span class=\"n\">x</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"n\">ih</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">ih</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">elab_as_eliminator</span><span class=\"o\">]</span>\n<span class=\"n\">def</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">magic</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">n</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"n\">C</span> <span class=\"bp\">→</span> <span class=\"n\">ih</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">n</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">elim0</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"n\">ih</span> <span class=\"n\">i</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">cases</span> <span class=\"o\">(</span><span class=\"n\">const_n_ary</span> <span class=\"n\">x</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">ih</span> <span class=\"n\">i</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"o\">(</span><span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">magic</span> <span class=\"mi\">4</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1729</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">314</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"mi\">2718</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"mi\">37</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"c1\">-- -1729</span>\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"o\">(</span><span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">magic</span> <span class=\"mi\">4</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1729</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">314</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"mi\">2718</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"mi\">37</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"c1\">-- -314</span>\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"o\">(</span><span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">magic</span> <span class=\"mi\">4</span> <span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1729</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">314</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"mi\">2718</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"mi\">37</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"c1\">-- 2718</span>\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"o\">(</span><span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">magic</span> <span class=\"mi\">4</span> <span class=\"mi\">3</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1729</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">314</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"mi\">2718</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"mi\">37</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"c1\">-- 37</span>\n</code></pre></div>",
        "id": 204653480,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1595416880
    },
    {
        "content": "<p>Ooh, that's a nice idea!</p>",
        "id": 204653499,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595416904
    },
    {
        "content": "<p>oh did I just wait 30 minutes rewriting what is already in mathlib</p>",
        "id": 204653578,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1595416942
    },
    {
        "content": "<p>I think my question relates to this thread, since it's about matching against <code>fin N</code>...</p>\n<p>Aside from the fact this construction is very contrived, is there any way I can golf out the repeated apply_instance?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">blade</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">4</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"bp\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span> <span class=\"o\">:=</span> <span class=\"n\">ℝ</span>  <span class=\"c1\">-- scalar</span>\n<span class=\"bp\">|</span> <span class=\"bp\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span> <span class=\"o\">:=</span> <span class=\"n\">ℝ</span> <span class=\"bp\">×</span> <span class=\"n\">ℝ</span> <span class=\"bp\">×</span> <span class=\"n\">ℝ</span>\n<span class=\"bp\">|</span> <span class=\"bp\">⟨</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span> <span class=\"o\">:=</span> <span class=\"n\">ℝ</span> <span class=\"bp\">×</span> <span class=\"n\">ℝ</span> <span class=\"bp\">×</span> <span class=\"n\">ℝ</span>\n<span class=\"bp\">|</span> <span class=\"bp\">⟨</span><span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span> <span class=\"o\">:=</span> <span class=\"n\">ℝ</span>  <span class=\"c1\">-- psuedo-scalar</span>\n<span class=\"bp\">|</span> <span class=\"bp\">⟨</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"n\">exfalso</span><span class=\"o\">,</span> <span class=\"n\">linarith</span><span class=\"o\">}</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">add_comm_group</span> <span class=\"o\">(</span><span class=\"n\">blade</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"n\">unfold</span> <span class=\"n\">blade</span><span class=\"o\">,</span> <span class=\"n\">apply_instance</span><span class=\"o\">}</span>\n<span class=\"bp\">|</span> <span class=\"bp\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"n\">unfold</span> <span class=\"n\">blade</span><span class=\"o\">,</span> <span class=\"n\">apply_instance</span><span class=\"o\">}</span>\n<span class=\"bp\">|</span> <span class=\"bp\">⟨</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"n\">unfold</span> <span class=\"n\">blade</span><span class=\"o\">,</span> <span class=\"n\">apply_instance</span><span class=\"o\">}</span>\n<span class=\"bp\">|</span> <span class=\"bp\">⟨</span><span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"n\">unfold</span> <span class=\"n\">blade</span><span class=\"o\">,</span> <span class=\"n\">apply_instance</span><span class=\"o\">}</span>\n<span class=\"bp\">|</span> <span class=\"bp\">⟨</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"n\">exfalso</span><span class=\"o\">,</span> <span class=\"n\">linarith</span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 205534561,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1596144340
    },
    {
        "content": "<p>What happens if you try to derive add_comm_group in the definition of blade?</p>",
        "id": 205543747,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1596151185
    },
    {
        "content": "<p>How do you mean?</p>",
        "id": 205546281,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1596153871
    },
    {
        "content": "<p>I don't think it works in this case but you can do</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">derive</span> <span class=\"n\">add_comm_group</span><span class=\"o\">]</span>\n<span class=\"n\">def</span> <span class=\"n\">myint</span> <span class=\"o\">:=</span> <span class=\"n\">int</span>\n</code></pre></div>\n\n\n<p>to automate later doing</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_group</span> <span class=\"n\">myint</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">unfold</span> <span class=\"n\">myint</span><span class=\"bp\">;</span> <span class=\"n\">apply_instance</span>\n</code></pre></div>",
        "id": 205547925,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1596156061
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/Canonical.20inductive.20types.20with.200.2C1.2C2.2C3.2C4.20terms/near/205543747\">said</a>:</p>\n<blockquote>\n<p>What happens if you try to derive add_comm_group in the definition of blade?</p>\n</blockquote>\n<p>To literally answer the question, what happens is:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">mk_instance</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">generate</span> <span class=\"kn\">instance</span> <span class=\"n\">for</span>\n  <span class=\"n\">add_comm_group</span>\n    <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">cases_on</span>\n       <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a_val</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a_is_lt</span> <span class=\"o\">:</span> <span class=\"n\">a_val</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">4</span><span class=\"o\">),</span>\n          <span class=\"n\">a_val</span><span class=\"bp\">.</span><span class=\"n\">cases_on</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a_is_lt</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">4</span><span class=\"o\">),</span> <span class=\"n\">id_rhs</span> <span class=\"kt\">Type</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n            <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a_val</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a_is_lt</span> <span class=\"o\">:</span> <span class=\"n\">a_val</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">4</span><span class=\"o\">),</span>\n               <span class=\"n\">a_val</span><span class=\"bp\">.</span><span class=\"n\">cases_on</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a_is_lt</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">4</span><span class=\"o\">),</span> <span class=\"n\">id_rhs</span> <span class=\"kt\">Type</span> <span class=\"n\">ℝ</span><span class=\"err\">³</span><span class=\"o\">)</span>\n                 <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a_val</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a_is_lt</span> <span class=\"o\">:</span> <span class=\"n\">a_val</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">4</span><span class=\"o\">),</span>\n                    <span class=\"n\">a_val</span><span class=\"bp\">.</span><span class=\"n\">cases_on</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a_is_lt</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">4</span><span class=\"o\">),</span> <span class=\"n\">id_rhs</span> <span class=\"kt\">Type</span> <span class=\"n\">ℝ</span><span class=\"err\">³</span><span class=\"o\">)</span>\n                      <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a_val</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a_is_lt</span> <span class=\"o\">:</span> <span class=\"n\">a_val</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">4</span><span class=\"o\">),</span>\n                         <span class=\"n\">a_val</span><span class=\"bp\">.</span><span class=\"n\">cases_on</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a_is_lt</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">4</span><span class=\"o\">),</span> <span class=\"n\">id_rhs</span> <span class=\"kt\">Type</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n                           <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a_val</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a_is_lt</span> <span class=\"o\">:</span> <span class=\"n\">a_val</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">4</span><span class=\"o\">),</span> <span class=\"n\">id_rhs</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">false</span><span class=\"bp\">.</span><span class=\"n\">rec</span> <span class=\"kt\">Type</span> <span class=\"bp\">_</span><span class=\"o\">))</span>\n                           <span class=\"n\">a_is_lt</span><span class=\"o\">)</span>\n                      <span class=\"n\">a_is_lt</span><span class=\"o\">)</span>\n                 <span class=\"n\">a_is_lt</span><span class=\"o\">)</span>\n            <span class=\"n\">a_is_lt</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 205588173,
        "sender_full_name": "Utensil Song",
        "timestamp": 1596201076
    },
    {
        "content": "<p>Sorry I used </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">notation</span> <span class=\"bp\">`</span><span class=\"n\">ℝ</span><span class=\"err\">³</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">ℝ</span> <span class=\"bp\">×</span> <span class=\"n\">ℝ</span> <span class=\"bp\">×</span> <span class=\"n\">ℝ</span><span class=\"bp\">`</span>\n</code></pre></div>\n\n\n<p>hence the difference of error message</p>",
        "id": 205588290,
        "sender_full_name": "Utensil Song",
        "timestamp": 1596201141
    }
]