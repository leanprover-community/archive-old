[
    {
        "content": "<p>Hi! The following code works fine until I import <code>linear_algebra.dual</code>, but then it gives me a <code>deterministic timeout</code>. Does anyone see a possible explanation for this weird behavior?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">representation_theory.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"n\">G</span> <span class=\"n\">V</span> <span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">W</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">k</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">distrib_mul_action</span> <span class=\"n\">G</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">smul_comm_class</span> <span class=\"n\">G</span> <span class=\"n\">k</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">k</span> <span class=\"n\">W</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">distrib_mul_action</span> <span class=\"n\">G</span> <span class=\"n\">W</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">smul_comm_class</span> <span class=\"n\">G</span> <span class=\"n\">k</span> <span class=\"n\">W</span><span class=\"o\">]</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">representation</span>\n\n<span class=\"kd\">instance</span>  <span class=\"n\">linear_hom_distrib_mul_action</span> <span class=\"o\">:</span> <span class=\"n\">distrib_mul_action</span> <span class=\"n\">G</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"n\">W</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">smul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">g</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">as_group_hom</span> <span class=\"n\">k</span> <span class=\"n\">G</span> <span class=\"n\">W</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">∘ₗ</span> <span class=\"n\">f</span> <span class=\"bp\">∘ₗ</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">as_group_hom</span> <span class=\"n\">k</span> <span class=\"n\">G</span> <span class=\"n\">V</span> <span class=\"n\">g</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span><span class=\"o\">,</span>\n  <span class=\"n\">one_smul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">},</span>\n  <span class=\"n\">mul_smul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">},</span>\n  <span class=\"n\">smul_add</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">g</span> <span class=\"n\">f₁</span> <span class=\"n\">f₂</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">linear_map.add_comp</span><span class=\"o\">,</span> <span class=\"n\">linear_map.comp_add</span><span class=\"o\">],</span>\n  <span class=\"n\">smul_zero</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 279116167,
        "sender_full_name": "Antoine Labelle",
        "timestamp": 1650051887
    },
    {
        "content": "<p>Does the timeout persist if you instead import the things imported by <a href=\"https://tqft.net/mathlib/linear_algebra/dual\">file#linear_algebra/dual</a>?</p>",
        "id": 279117257,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1650052625
    },
    {
        "content": "<p>That is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra.finite_dimensional</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.projection</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.sesquilinear_form</span>\n</code></pre></div>",
        "id": 279117303,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1650052656
    },
    {
        "content": "<p>Yes, and it persists if I import only <code>linear_algebra.sesquilinear_form</code></p>",
        "id": 279118369,
        "sender_full_name": "Antoine Labelle",
        "timestamp": 1650053274
    },
    {
        "content": "<p>Can you keep tracing back the imports until it doesn't break any more?</p>",
        "id": 279121291,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1650055155
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/import.20causes.20deterministic.20timeout/near/279121291\">said</a>:</p>\n<blockquote>\n<p>Can you keep tracing back the imports until it doesn't break any more?</p>\n</blockquote>\n<p>The problematic file seems to be <code>linear_algebra.matrix.reindex</code></p>",
        "id": 279122724,
        "sender_full_name": "Antoine Labelle",
        "timestamp": 1650056106
    },
    {
        "content": "<p><a href=\"https://tqft.net/mathlib/linear_algebra/matrix/reindex\">file#linear_algebra/matrix/reindex</a></p>",
        "id": 279123146,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1650056398
    },
    {
        "content": "<p>Looks innocuous...</p>",
        "id": 279123286,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1650056446
    },
    {
        "content": "<p>Indeed, that's weird</p>",
        "id": 279123434,
        "sender_full_name": "Antoine Labelle",
        "timestamp": 1650056527
    },
    {
        "content": "<p>Update : I reproduced the definition in a separate project to see if the problem was related to other things I had in my file, and now it still breaks if I import <a href=\"https://tqft.net/mathlib/linear_algebra/dual\">file#linear_algebra/dual</a>, but it doesn't if I import only the files imported by <a href=\"https://tqft.net/mathlib/linear_algebra/dual\">file#linear_algebra/dual</a> (in particular it doesn't break for <a href=\"https://tqft.net/mathlib/linear_algebra/matrix/reindex\">file#linear_algebra/matrix/reindex</a>).</p>",
        "id": 279172648,
        "sender_full_name": "Antoine Labelle",
        "timestamp": 1650122019
    },
    {
        "content": "<p>Your problem is likely just that <code>simp</code> is slower for each simp lemma that's imported</p>",
        "id": 279172830,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1650122288
    },
    {
        "content": "<p>And that you have four <code>simp</code>s all at once</p>",
        "id": 279172858,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1650122364
    },
    {
        "content": "<p>Indeed, if I just replace the <code>simp</code> in <code>smul_zero</code> by <code>simp only [linear_map.zero_comp, linear_map.comp_zero]</code> it now works. Seems pretty arbitrary but at least now it's fixed!</p>",
        "id": 279173070,
        "sender_full_name": "Antoine Labelle",
        "timestamp": 1650122752
    }
]