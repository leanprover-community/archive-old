[
    {
        "content": "<p>I often find myself creating a branch of mathlib that explores some experimental idea, that perhaps goes well, and perhaps goes badly. Inevitably along the way I find myself making changes to existing parts of mathlib, either to fix something yucky, add a missing lemma, or refactor something. Sometimes I make multiple changes like this to different parts of mathlib.</p>\n<p>At the end of the day, probably I don't want to turn the whole branch into a PR (perhaps the overall idea went badly...), but I want to extract out the useful groups of changes into separate PRs.</p>\n<p>What do people do to achieve this?</p>",
        "id": 190248685,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1583898717
    },
    {
        "content": "<p>So far the only good trick I know is to make a new branch, and run <code>git merge --squash experimental_branch</code>. This gives me all the changes that branch made, as unstaged edits to the current branch. I then revert most of the files, essentially all the ones that I hope have nothing to do with the subset of changes I'm trying to capture.</p>",
        "id": 190248741,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1583898789
    },
    {
        "content": "<p>This works pretty well, but often I get things wrong and revert too much or too little and have to try again.</p>",
        "id": 190248744,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1583898807
    },
    {
        "content": "<p>If anyone has suggested workflows that work better, I'd love to hear!</p>",
        "id": 190248748,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1583898824
    },
    {
        "content": "<p>This is probably domain specific, but usually when I am working on a formalization inside mathlib, I will put <code>for_mathlib</code> stuff directly in the files where they should go, which is probably a completely different file or part of the library than what I'm actually working on. So it's not hard to isolate these edits and push only them. Plus, they are usually standalone things so they can just drop in to mathlib.</p>\n<p>For more complicated refactorings and such, it generally has to be done in bulk, and some care has to be taken with the PR. I don't think there is an easy way to extract your \"branch\" changes from the \"refactoring\" once it gets to this point.</p>",
        "id": 190250145,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583901418
    },
    {
        "content": "<p>I guess I tend to \"work on mathlib directly\", so I never have a <code>to_mathlib</code> directory.</p>",
        "id": 190251297,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1583903750
    },
    {
        "content": "<p>Sure, I do too, but I use the term to refer to library stuff that inevitably appears when working on a project. If you are in a separate project this should go at the top of your file, or in a separate file, but if you are working in mathlib then it should go where it is supposed to be (which is probably not wherever you are working).</p>",
        "id": 190252083,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583905378
    },
    {
        "content": "<p>I still put it at the top of the file that I'm working on, because otherwise I trigger massive recompiles. How do you avoid this?</p>",
        "id": 190252539,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583906402
    },
    {
        "content": "<p>I don't. Options include: PR-ing without testing and trusting CI; don't import so many dependencies so that the chain from your change to your current project is not so bad; and putting things in the current file with an eye for where they will go, then doing bulk insertions with minimal checks during the PR</p>",
        "id": 190253533,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583908211
    },
    {
        "content": "<p>Another option is to become vaguely frustrated at how slow lean is</p>",
        "id": 190253555,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583908279
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/advice.20on.20making.20PRs.20from.20experimental.20branches/near/190253555\" title=\"#narrow/stream/113488-general/topic/advice.20on.20making.20PRs.20from.20experimental.20branches/near/190253555\">said</a>:</p>\n<blockquote>\n<p>Another option is to become vaguely frustrated at how slow lean is</p>\n</blockquote>\n<p>I'll go for this one.</p>",
        "id": 190253682,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583908495
    },
    {
        "content": "<p>When is your type theoretic editor plugin for MM0 being released?</p>",
        "id": 190253697,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583908530
    },
    {
        "content": "<p>(I guess in 202X? <span aria-label=\"stuck out tongue wink\" class=\"emoji emoji-1f61c\" role=\"img\" title=\"stuck out tongue wink\">:stuck_out_tongue_wink:</span> )</p>",
        "id": 190253699,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583908544
    },
    {
        "content": "<p>Lean 0</p>",
        "id": 190253704,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583908560
    },
    {
        "content": "<p>You know, there is a feature in MM1 that is kind of overkill for it but would make a massive difference for lean: you can turn off proof checking in all files other than the one you are working on. This is kind of obviously the correct setting for interactive use, and CI can do the full check</p>",
        "id": 190253821,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583908759
    },
    {
        "content": "<p>In lean it would even be useful to be able to <code>lean --make --no-proofs</code> and get usable (but incomplete) <code>.olean</code> files</p>",
        "id": 190253874,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583908835
    },
    {
        "content": "<p>But in Lean you can tell it to check only the current file, can't you?</p>",
        "id": 190254019,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583909062
    },
    {
        "content": "<p>\"check visible files\"</p>",
        "id": 190254025,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583909083
    },
    {
        "content": "<p>That sounds close enough</p>",
        "id": 190254026,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583909088
    },
    {
        "content": "<p>you still need to have the other files be processed, but only for theorem statements</p>",
        "id": 190254029,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583909096
    },
    {
        "content": "<p>I don't think that \"check visible files\" does anything to stop the catastrophic cascade when you jump into <code>tactic.basic</code> to add or modify a tactic</p>",
        "id": 190254053,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583909147
    },
    {
        "content": "<p>plus you are still left with a whole bunch of invalidated olean files that you need to regenerate non-interactively</p>",
        "id": 190254100,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583909181
    },
    {
        "content": "<p>I would be curious to see how expensive it is to <code>lean --make</code> all of mathlib without proofs. My guess is ~1 minute</p>",
        "id": 190254116,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583909259
    },
    {
        "content": "<p>hopefully less</p>",
        "id": 190254117,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583909267
    },
    {
        "content": "<p>but I think there are still some hard typeclass problems in some theorem statements (I don't think we are doing anything heavy in <code>def</code>s)</p>",
        "id": 190254161,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583909312
    },
    {
        "content": "<p>Regarding the question about only keeping the changes you want: If the changes you want to keep and those you want to get rid of are in separate commits, then you can run <code>git rebase -i abcde</code> where <code>abcde</code> is the last commit from master that your branch has. It opens your editor with a list of all the commits in your experimental branch. You can then simply delete the commits you do not want by deleting the corresponding lines.</p>",
        "id": 190254404,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1583909717
    },
    {
        "content": "<p>In my case it's almost never in a separate commit, because it invariably comes up in the middle of the project. I guess with better git hygiene I could make a mini commit every time I have a library change, resulting in some spotted history of intermingled library and project commits, and then the library commits could be interactive-rebased into one group or one commit</p>",
        "id": 190254529,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583909935
    },
    {
        "content": "<p>Yes, my git hygiene is terrible. If I'm working on something experimental, commits tend to line up with when I go to sleep. :-)</p>",
        "id": 190255419,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1583911280
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Should we turn the <code>--no-proofs</code> thing into a feature request for <code>lean-3.1X.Y</code>?</p>",
        "id": 190255823,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583911862
    },
    {
        "content": "<p>I have no idea how hard it would be to implement something like that...</p>",
        "id": 190255835,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583911886
    },
    {
        "content": "<p>I think not hard. Keep in mind that lean is already elaborating proofs asynchronously, so there is already a part where that part of the work is placed in a closure and sent elsewhere. If we simply ignore that closure than bam, no proofs</p>",
        "id": 190256028,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583912090
    },
    {
        "content": "<p>Some changes may have to be made to allow <code>.olean</code> file creation to proceed without the proof result, but the content can just be replaced with a <code>sorry</code> macro</p>",
        "id": 190256136,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583912211
    },
    {
        "content": "<p>On a related note it might be nice to turn off that \"imported file uses sorry\" warning, which is way overkill in non-interactive mode (since it gets spammed on every dependency importing another dependency), and would become much worse with this compilation strategy</p>",
        "id": 190256242,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583912363
    },
    {
        "content": "<p>I often work on an experimental feature without making commits, then add selected changes to a <code>git stash</code>, create a new branch from <code>master</code> in another worktree, and do <code>git stash pop</code>. Emacs magit makes it easy.</p>",
        "id": 190256746,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1583912902
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/advice.20on.20making.20PRs.20from.20experimental.20branches/near/190254116\" title=\"#narrow/stream/113488-general/topic/advice.20on.20making.20PRs.20from.20experimental.20branches/near/190254116\">said</a>:</p>\n<blockquote>\n<p>I would be curious to see how expensive it is to <code>lean --make</code> all of mathlib without proofs. My guess is ~1 minute</p>\n</blockquote>\n<p>Unfortunately it's much longer than that.  Definitions take a surprising amount of time to elaborate (just think of type class resolution).  Then there are definitions that contains stuff like <code>cast (by simp) ...</code>.  (You can't skip the simp because you need to know what local constants the resulting proof depends on.)  And then there are instance definitions: <code>instance ... := by refine { add := ..., good := ... 20 line proof ... }; tidy</code>.</p>",
        "id": 190261426,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1583917537
    }
]