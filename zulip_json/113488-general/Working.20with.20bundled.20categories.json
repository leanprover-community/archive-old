[
    {
        "content": "<p>I'm a little bit puzzled, since I don't quite get how one would work with those bundled categories,<br>\nepcifically on how to convert between morphisms in the category and morphisms on the underlying objects.<br>\nSay I have</p>\n<p>(A B C : Type) [comm_ring A][comm_ring B] [comm_ring C] (f : A -&gt;+* B) (g : B -&gt;+* C) (h : A -&gt;+* C),</p>\n<p>and I know that there is an equality CommRing.of_hom h = CommRing.of_hom f \\gg CommRing.of g.</p>\n<p>How do I get a proposition of type h = ring_hom.comp g f from the equality in the bundled category?</p>",
        "id": 268949128,
        "sender_full_name": "Klaus Mattis",
        "timestamp": 1642845172
    },
    {
        "content": "<p>Not answering the question but <a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a> and <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>",
        "id": 268949191,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1642845271
    },
    {
        "content": "<p>Sounds like you need that <code>CommRing.of_hom</code> is injective and that it distributes with composition.</p>",
        "id": 268949283,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1642845459
    },
    {
        "content": "<p>Ok, my mwe would be:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.category.CommRing</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→+*</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">→+*</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→+*</span> <span class=\"n\">C</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">comp_in_bundled_cat_imp_comp</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">CommRing.of_hom</span> <span class=\"n\">f</span> <span class=\"bp\">≫</span> <span class=\"n\">CommRing.of_hom</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"n\">CommRing.of_hom</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">ring_hom.comp</span> <span class=\"n\">g</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> yeah this sounds right. But I did not find anything in the library. I assume that this would be needed everywhere where one works with those bundled categories, so it should be out there somewhere?</p>",
        "id": 268949964,
        "sender_full_name": "Klaus Mattis",
        "timestamp": 1642846359
    },
    {
        "content": "<p>I think <code>CommRing.of_hom f ≫ CommRing.of_hom g = CommRing.of_hom h</code> and <code>ring_hom.comp g f = h</code> are definitionally equal, unless I'm very confused (possible).</p>",
        "id": 268952493,
        "sender_full_name": "Reid Barton",
        "timestamp": 1642850219
    },
    {
        "content": "<p>I know that this sort of thing was part of Scott's design principles.</p>",
        "id": 268952552,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1642850301
    },
    {
        "content": "<p>By the way, if you are talking about a bunch of variable rings, I would usually start from <code>(A B C : CommRing) (f : A ⟶ B) (g : B ⟶ C) (h : A ⟶ C)</code> instead for a couple reasons, not least that it's ~50% shorter</p>",
        "id": 268952644,
        "sender_full_name": "Reid Barton",
        "timestamp": 1642850465
    },
    {
        "content": "<p>You would still probably need to make this kind of conversion at some point, though.</p>",
        "id": 268952651,
        "sender_full_name": "Reid Barton",
        "timestamp": 1642850490
    },
    {
        "content": "<p><code>CommRing.of_hom f</code> is by definition equal to <code>f</code>, and <code>f ≫ g</code> is by definition <code>ring_hom.comp g f</code>.<br>\nSo regarding your original question, a type ascription should do. And for your mwe,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.category.CommRing</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→+*</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">→+*</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→+*</span> <span class=\"n\">C</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">comp_in_bundled_cat_imp_comp</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">CommRing.of_hom</span> <span class=\"n\">f</span> <span class=\"bp\">≫</span> <span class=\"n\">CommRing.of_hom</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"n\">CommRing.of_hom</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">ring_hom.comp</span> <span class=\"n\">g</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:=</span>  <span class=\"n\">id</span>\n</code></pre></div>",
        "id": 268953353,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1642851537
    },
    {
        "content": "<p>Sometimes it can be that easy, thanks <span class=\"user-mention\" data-user-id=\"439483\">@Andrew Yang</span>  :)<br>\nI thought I tried this at some point, possibly a lot of my confusion comes from the fact<br>\nthat <code>ring_hom.comp</code> and <code>∘</code> are different things.</p>",
        "id": 268954844,
        "sender_full_name": "Klaus Mattis",
        "timestamp": 1642853681
    }
]