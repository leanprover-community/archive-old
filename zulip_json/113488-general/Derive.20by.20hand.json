[
    {
        "content": "<p><code>@[derive decidable_eq]</code> gave up on me because one field of my structure is something like <code>o ≠ none</code> where <code>o : option W</code> and it didn't detect that didn't require <code>[decidable_eq W]</code>. What's the way to do provide the instance myself the <code>derive</code> way, but being smart?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.option.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"sd\">/-- `W`-weighted graphs on `α`. `weight a b = some b` represents an edge between `a, b : α` of</span>\n<span class=\"sd\">weight `b : W`. `weight a b = none` represents no edge between `a` and `b`. -/</span>\n<span class=\"kd\">@[ext]</span> <span class=\"kd\">structure</span> <span class=\"n\">weighted_graph</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">weight</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"n\">W</span><span class=\"o\">)</span>\n\n<span class=\"sd\">/-- Two vertices of a weighted graph are adjacent if their weight is not `none`. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">weighted_graph.adj</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">weighted_graph</span> <span class=\"n\">α</span> <span class=\"n\">W</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">G.weight</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"n\">none</span>\n\n<span class=\"sd\">/-- A dart is a directed edge, consisting of an ordered pair of adjacent vertices. -/</span>\n<span class=\"kd\">@[ext, derive decidable_eq]</span> <span class=\"kd\">structure</span> <span class=\"n\">weighted_graph.dart</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">weighted_graph</span> <span class=\"n\">α</span> <span class=\"n\">W</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">fst</span> <span class=\"n\">snd</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">adj</span> <span class=\"o\">:</span> <span class=\"n\">G.adj</span> <span class=\"n\">fst</span> <span class=\"n\">snd</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">weighted_graph.dart.decidable_eq</span>\n<span class=\"c1\">-- Π {α : Type u_3} [a : decidable_eq α] {W : Type u_4} [a : decidable_eq W]</span>\n<span class=\"c1\">-- (G : weighted_graph α W), decidable_eq G.dart</span>\n\n<span class=\"c1\">-- Should be</span>\n<span class=\"c1\">-- Π {α : Type u_3} [a : decidable_eq α] {W : Type u_4} (G : weighted_graph α W),</span>\n<span class=\"c1\">-- decidable_eq G.dart</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">weighted_graph</span> <span class=\"n\">α</span> <span class=\"n\">W</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">decidable_eq</span> <span class=\"n\">G.dart</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"c1\">-- What do I do here?</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 265153303,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1639660566
    },
    {
        "content": "<p>Just locally teach lean <code>decidable (o = none)</code>?</p>",
        "id": 265153806,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639660799
    },
    {
        "content": "<p>I think that caused annoying diamonds as a global instance, but that wouldn't matter if you only temporarily enable it</p>",
        "id": 265153941,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639660854
    },
    {
        "content": "<p>Okay, but even if I add</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">weighted_graph</span> <span class=\"n\">α</span> <span class=\"n\">W</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">decidable_rel</span> <span class=\"n\">G.adj</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">not.decidable</span> <span class=\"n\">_</span> <span class=\"n\">option.decidable_eq_none</span>\n\n<span class=\"kn\">local</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kd\">instance</span><span class=\"o\">]</span> <span class=\"n\">option.decidable_eq_none</span>\n<span class=\"kn\">local</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"kd\">instance</span><span class=\"o\">]</span> <span class=\"n\">option.decidable_eq</span>\n</code></pre></div>\n<p>it yucks</p>",
        "id": 265154232,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1639660989
    },
    {
        "content": "<p>To answer your original question, <code>intros x y</code> is how to start</p>",
        "id": 265155832,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639661600
    },
    {
        "content": "<p><code>#print</code> on the \"bad\" instance should hopefully show what an implementation looks like</p>",
        "id": 265156034,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639661690
    },
    {
        "content": "<p>Probably you want to use <code>decidable_of_iff dart.ext_iff</code></p>",
        "id": 265156133,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639661746
    },
    {
        "content": "<p>Okay, I'm trying it. On the other hand, any chance we could fix <code>derive</code>?</p>",
        "id": 265156893,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1639662109
    },
    {
        "content": "<p><code>instance [decidable_eq α] : decidable_eq G.dart := λ a b, decidable_of_iff _ (dart.ext_iff _ _).symm</code> works fine indeed.</p>",
        "id": 265157747,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1639662510
    },
    {
        "content": "<p>As you probably realized, it has nothing to do with decidability of <code>G.adj fst snd</code> itself</p>",
        "id": 265164037,
        "sender_full_name": "Reid Barton",
        "timestamp": 1639665247
    },
    {
        "content": "<p>In general I think making <code>derive</code> smarter is hard though.<br>\nIn Haskell, <code>deriving</code> can write down the generated definition without class constraints and then run type inference on it to learn what the correct constraints should be. That really doesn't work in Lean.</p>",
        "id": 265164240,
        "sender_full_name": "Reid Barton",
        "timestamp": 1639665348
    }
]