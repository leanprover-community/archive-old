[
    {
        "content": "<p>Hi there, it's me again. I am trying to complete the following proof. It should follow easily from mathlib, but apparently I am trying to prove something for an ideal of [ring R] while I have a hypothesis that says something about an ideal of [ring R upgraded to a field]. What am I missing?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">p2</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">is_field</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">I</span><span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"n\">I</span> <span class=\"bp\">=</span> <span class=\"bp\">⊥</span> <span class=\"bp\">∨</span> <span class=\"n\">I</span> <span class=\"bp\">=</span> <span class=\"bp\">⊤</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">F</span> <span class=\"o\">:=</span> <span class=\"n\">is_field.to_field</span> <span class=\"n\">R</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">ideal.eq_bot_or_top</span> <span class=\"n\">R</span> <span class=\"n\">F</span><span class=\"o\">,</span>\n  <span class=\"n\">assumption</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 235983626,
        "sender_full_name": "Arnoud van der Leer",
        "timestamp": 1619282148
    },
    {
        "content": "<p>It's <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ideal.eq_bot_or_top\">docs#ideal.eq_bot_or_top</a></p>",
        "id": 235983828,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1619282331
    },
    {
        "content": "<p>Have you looked at the code?</p>",
        "id": 235983951,
        "sender_full_name": "Arnoud van der Leer",
        "timestamp": 1619282424
    },
    {
        "content": "<p>Argh, sorry, that was really bad of me. I see the problem now</p>",
        "id": 235984303,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1619282735
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"406521\">@Arnoud van der Leer</span> I'm afraid you need to reprove the <code>eq_bot_or_top</code> lemma.</p>",
        "id": 235984715,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619283046
    },
    {
        "content": "<p>Oh, did you try <code>convert h2</code>?</p>",
        "id": 235984751,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619283078
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"406521\">@Arnoud van der Leer</span> can you post a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>? I cut and pasted your code but there were errors and I'm too lazy to fix them.</p>",
        "id": 235984867,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1619283176
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> <br>\nBut if I have to reprove such a simple theorem, does that mean that every theorem about <code>(R: Type u) [field R]</code> will have to reproved for <code>(R: Type u) [comm_ring R] (h: is_field R)</code> and vice versa?</p>",
        "id": 235984909,
        "sender_full_name": "Arnoud van der Leer",
        "timestamp": 1619283232
    },
    {
        "content": "<p>And is there a good reason you're using <code>is_field</code> instead of <code>[field R]</code>? This seems to be what's causing your problem, and I don't see any logical reason for doing it.</p>",
        "id": 235984914,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1619283236
    },
    {
        "content": "<p>Yes maybe, and the moral is that you shouldn't be stating theorems like this at all I guess?</p>",
        "id": 235984977,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1619283271
    },
    {
        "content": "<p><code>convert h2</code> changes the goal to <code>(∀ (I : ideal R), I = ⊥ ∨ I = ⊤) = ∀ (I : ideal R), I = ⊥ ∨ I = ⊤</code>.</p>",
        "id": 235984978,
        "sender_full_name": "Arnoud van der Leer",
        "timestamp": 1619283272
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"406521\">@Arnoud van der Leer</span> <code>is_field</code> is a little bit of glue but isn't <em>idiomatic</em>.</p>",
        "id": 235984981,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619283273
    },
    {
        "content": "<p>So you should avoid it, whenever possible.</p>",
        "id": 235984998,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619283293
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> <br>\nOh, sorry, forgot the imports and universes</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory.ideal.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.field</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">p2</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">is_field</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">I</span><span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"n\">I</span> <span class=\"bp\">=</span> <span class=\"bp\">⊥</span> <span class=\"bp\">∨</span> <span class=\"n\">I</span> <span class=\"bp\">=</span> <span class=\"bp\">⊤</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">F</span> <span class=\"o\">:=</span> <span class=\"n\">is_field.to_field</span> <span class=\"n\">R</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">ideal.eq_bot_or_top</span> <span class=\"n\">R</span> <span class=\"n\">F</span><span class=\"o\">,</span>\n  <span class=\"n\">convert</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n  <span class=\"n\">assumption</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 235985117,
        "sender_full_name": "Arnoud van der Leer",
        "timestamp": 1619283371
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">p2</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">is_field</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">I</span><span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"n\">I</span> <span class=\"bp\">=</span> <span class=\"bp\">⊥</span> <span class=\"bp\">∨</span> <span class=\"n\">I</span> <span class=\"bp\">=</span> <span class=\"bp\">⊤</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">F</span> <span class=\"o\">:=</span> <span class=\"n\">is_field.to_field</span> <span class=\"n\">R</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">ideal.eq_bot_or_top</span> <span class=\"n\">R</span> <span class=\"n\">F</span><span class=\"o\">,</span>\n  <span class=\"n\">convert</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 235985163,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1619283445
    },
    {
        "content": "<p>Your problem was that <code>F</code> is data, so needs to be defined with <code>let</code> and not <code>have</code>.</p>",
        "id": 235985181,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1619283474
    },
    {
        "content": "<p>The <code>is_field</code> was because this is supposed to be part of a three-way equivalence (is there a nice way to prase this, by the way, or should I just make this two equivalences?) between</p>\n<ul>\n<li>R is a field</li>\n<li>R has only two ideals</li>\n<li>Any morphism from R into a nonzero ring is injective<br>\nAnd I thought if I took is_field instead of field, I would need to prove less for the other implications.</li>\n</ul>",
        "id": 235985238,
        "sender_full_name": "Arnoud van der Leer",
        "timestamp": 1619283505
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/Coerce.20ring.20ideal.20to.20field.20ideal/near/235985181\">said</a>:</p>\n<blockquote>\n<p>Your problem was that <code>F</code> is data, so needs to be defined with <code>let</code> and not <code>have</code>.</p>\n</blockquote>\n<p>Oooooh. Thank you!</p>",
        "id": 235985248,
        "sender_full_name": "Arnoud van der Leer",
        "timestamp": 1619283516
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory.ideal.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.field</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">p2</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">is_field</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">I</span><span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"n\">I</span> <span class=\"bp\">=</span> <span class=\"bp\">⊥</span> <span class=\"bp\">∨</span> <span class=\"n\">I</span> <span class=\"bp\">=</span> <span class=\"bp\">⊤</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">letI</span> <span class=\"o\">:=</span> <span class=\"n\">is_field.to_field</span> <span class=\"n\">R</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">ideal.eq_bot_or_top</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Your approach is unidiomatic so we have to jump through some hoops. <code>letI</code> puts the field instance into the type class inference system, and now everything works as normal (you don't need the @)</p>",
        "id": 235985295,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1619283592
    },
    {
        "content": "<p>Your explanation for why you're using <code>is_field</code> is convincing, and is indeed the reason why <code>is_field</code> is there. So you will have to learn to jump through the hoops :-) but that's what we're here for.</p>",
        "id": 235985439,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1619283673
    },
    {
        "content": "<p>One of the differences between <code>field</code> and <code>is_field</code> is that <code>is_field</code> lives in the <code>Prop</code> universe, and <code>field</code> lives in the <code>Type</code> universe (because there is more data in <code>field</code> than <code>ring</code> due to a design decision; the inverse is an explicit input to a <code>field</code> structure).</p>",
        "id": 235985555,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1619283763
    },
    {
        "content": "<p>Another difference is that <code>is_field</code> is a structure but <code>field</code> is a class, so you will have to know something about how type class inference works. The typeclass system is a big database which keeps track of which things are groups, which things are rings etc. Normally you can just leave it alone, feed it with <code>[]</code> stuff at the beginning of your lemmas and defs, and it works fine -- you don't need to add to the database in the middle of a proof. But here what's happening is that half way through the proof you want to add something new to it because of the nature of what you're doing, and that's when <code>letI</code> and <code>haveI</code> come in handy because they enable you to do this.</p>",
        "id": 235985743,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1619283924
    },
    {
        "content": "<p>There's no simple way to prove A &lt;-&gt; B &lt;-&gt; C in Lean without breaking it into two iff's, as far as I know. I think I've covered all your questions now :-)</p>",
        "id": 235985869,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1619284045
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/Coerce.20ring.20ideal.20to.20field.20ideal/near/235985869\">said</a>:</p>\n<blockquote>\n<p>There's no simple way to prove A &lt;-&gt; B &lt;-&gt; C in Lean without breaking it into two iff's, as far as I know. I think I've covered all your questions now :-)</p>\n</blockquote>\n<p>There's a <code>tfae</code> tactic, but I've never used it...</p>",
        "id": 235985935,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1619284089
    },
    {
        "content": "<p>This is a perfect opportunity to use <code>tfae</code></p>",
        "id": 235986118,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619284229
    },
    {
        "content": "<p>We have a few <code>tfae</code> statements here and there in mathlib, but in my opinion they're a bit awkward to use because they require you to refer to numerical labels. See <a href=\"https://github.com/leanprover-community/mathlib/issues/3532\">#3532</a> for a related feature request.</p>",
        "id": 235986171,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1619284276
    },
    {
        "content": "<p>It's not a tactic, and I don't know the API for it :-)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hPQ</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">↔</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hQR</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"bp\">↔</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">tfae</span> <span class=\"o\">[</span><span class=\"n\">P</span><span class=\"o\">,</span> <span class=\"n\">Q</span><span class=\"o\">,</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hPQ</span><span class=\"o\">,</span> <span class=\"n\">hQR</span><span class=\"o\">],</span>\n  <span class=\"c1\">-- ⊢ [R, R, R].tfae</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 235986174,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1619284281
    },
    {
        "content": "<p>You're right, though the related tactic docs are under <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#tfae\">tactic#tfae</a> .</p>",
        "id": 235986252,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1619284334
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">list</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hPQ</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">↔</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hQR</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"bp\">↔</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">tfae</span> <span class=\"o\">[</span><span class=\"n\">P</span><span class=\"o\">,</span> <span class=\"n\">Q</span><span class=\"o\">,</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hPQ</span><span class=\"o\">,</span> <span class=\"n\">hQR</span><span class=\"o\">,</span> <span class=\"n\">tfae_cons_of_mem</span><span class=\"o\">,</span> <span class=\"n\">tfae_nil</span><span class=\"o\">],</span>\n  <span class=\"c1\">-- ⊢ [R, R, R].tfae -- aargh</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>lol</p>",
        "id": 235986425,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1619284457
    },
    {
        "content": "<p>You just have to say the magic word at the end:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hPQ</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">↔</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hQR</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"bp\">↔</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">tfae</span> <span class=\"o\">[</span><span class=\"n\">P</span><span class=\"o\">,</span> <span class=\"n\">Q</span><span class=\"o\">,</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hPQ</span><span class=\"o\">,</span> <span class=\"n\">hQR</span><span class=\"o\">],</span>\n  <span class=\"n\">tfae_finish</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 235986496,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1619284534
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hPQ</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">↔</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hQR</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"bp\">↔</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">tfae</span> <span class=\"o\">[</span><span class=\"n\">P</span><span class=\"o\">,</span> <span class=\"n\">Q</span><span class=\"o\">,</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">tfae_finish</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 235986525,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1619284557
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> you want things like: <code>tfae_have : 3 → 1,</code></p>",
        "id": 235986566,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619284566
    },
    {
        "content": "<p>Yes, I saw the docs now from Bryan's post.</p>",
        "id": 235986600,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1619284586
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/Coerce.20ring.20ideal.20to.20field.20ideal/near/235985743\">said</a>:</p>\n<blockquote>\n<p>Another difference is that <code>is_field</code> is a structure but <code>field</code> is a class, so you will have to know something about how type class inference works. The typeclass system is a big database which keeps track of which things are groups, which things are rings etc. Normally you can just leave it alone, feed it with <code>[]</code> stuff at the beginning of your lemmas and defs, and it works fine -- you don't need to add to the database in the middle of a proof. But here what's happening is that half way through the proof you want to add something new to it because of the nature of what you're doing, and that's when <code>letI</code> and <code>haveI</code> come in handy because they enable you to do this.</p>\n</blockquote>\n<p>Thanks a lot for your explanations!</p>",
        "id": 235990094,
        "sender_full_name": "Arnoud van der Leer",
        "timestamp": 1619287074
    }
]