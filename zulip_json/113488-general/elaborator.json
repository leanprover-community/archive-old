[
    {
        "content": "<p>Over the last few months I have been idly writing something called \"from unicode to bytecode\", which is some (still extremely incomplete) documentation as to how Lean turns a string of unicode characters (the input file) into bytecode. One reason it's incomplete currently is that I have no real idea what bytecode is. But when I started this project I had no idea what a scanner / parser / token / etc was either, so I'm definitely moving forwards.</p>",
        "id": 124491100,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522593571
    },
    {
        "content": "<p>I am now trying to understand the elaborator better. Here is a very basic question.</p>",
        "id": 124491140,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522593646
    },
    {
        "content": "<p>This works (by which I think I mean \"Lean's kernel manages to fully parse and elaborate the string of characters and add a new term <code>easy</code> to the environment\"):</p>",
        "id": 124491183,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522593724
    },
    {
        "content": "<p><code>theorem  easy {i : ℕ} {n : ℕ} : i &lt; n → i &lt; nat.succ n :=  λ H, lt.trans H $ nat.lt_succ_self n</code></p>",
        "id": 124491186,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522593739
    },
    {
        "content": "<p>If I replace the <code>n</code> with an underscore, it still works</p>",
        "id": 124491187,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522593758
    },
    {
        "content": "<p><code>theorem  easy {i : ℕ} {n : ℕ} : i &lt; n → i &lt; nat.succ n :=  λ H, lt.trans H $ nat.lt_succ_self _</code></p>",
        "id": 124491188,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522593776
    },
    {
        "content": "<p>Somehow Lean knows from the type of everything that it wants <code>nat.lt_succ_self _</code> to have type <code>n  &lt; nat.succ n</code> and hence it knows <code>_</code> should be <code>n</code></p>",
        "id": 124491196,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522593829
    },
    {
        "content": "<p>But this doesn't work:</p>",
        "id": 124491197,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522593834
    },
    {
        "content": "<p><code>theorem  easy {i : ℕ} {n : ℕ} : i &lt; n → i &lt; nat.succ n :=  λ H, lt.trans _ $ nat.lt_succ_self n</code></p>",
        "id": 124491238,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522593858
    },
    {
        "content": "<p>Here Lean knows from type theory that it wants <code>_</code> to be a proof of <code>i &lt; n</code></p>",
        "id": 124491239,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522593899
    },
    {
        "content": "<p>and even though <code>H : i &lt; n</code> is in the local context, it won't take it and insert it.</p>",
        "id": 124491245,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522593916
    },
    {
        "content": "<p>We get an error which, if you don't understand magic, looks silly:</p>",
        "id": 124491246,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522593930
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>don&#39;t know how to synthesize placeholder\ncontext:\ni n : ℕ,\nH : i &lt; n\n⊢ i &lt; n\n</pre></div>",
        "id": 124491248,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522593950
    },
    {
        "content": "<p>\"Well, you knew how to synthesize <code>n</code> when that was in the local context...\"</p>",
        "id": 124491289,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522593977
    },
    {
        "content": "<p>I think that as a learner (as I still am, but I am thinking more about people who are like I was last October, i.e. complete beginners), you have to just trust some stuff to magic.</p>",
        "id": 124491296,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522594042
    },
    {
        "content": "<p>You type \"simp\" and sometimes it works and sometimes it doesn't, but if it does, then you'll take it.</p>",
        "id": 124491297,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522594060
    },
    {
        "content": "<p>Maybe your confusion comes from the fact that the two situations are in fact very different.  In the first one, Lean doesn't just guess and take a natural number from the local context.  The reason that the placeholder gets filled in is because <code>n</code> is <em>the only possible choice</em> if you want the theorem to type-check.</p>",
        "id": 124491338,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1522594086
    },
    {
        "content": "<p>In the second case, <em>any value</em> of type <code>i &lt; n</code> would work.</p>",
        "id": 124491339,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1522594114
    },
    {
        "content": "<p>I think that whilst initially this way of thinking -- \"sometimes it just works by magic\" -- is initially the only way to proceed.  But now I want to start understanding Lean properly and in particular I want to know exactly what I can expect the elaborator to do.</p>",
        "id": 124491340,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522594116
    },
    {
        "content": "<p>Thanks Gabriel, I could see that the situations somehow felt different but you have very quickly got to the heart of the matter.</p>",
        "id": 124491345,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522594179
    },
    {
        "content": "<p>In other words, the first placeholder can be solved by unification while type checking the right-hand side. The second one cannot.</p>",
        "id": 124491396,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1522594312
    },
    {
        "content": "<p>I think that the <code>_</code> (when it is representing <code>n</code>) gets filled in initially as something like <code>?m_1</code></p>",
        "id": 124491445,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522594391
    },
    {
        "content": "<p>Oh it perhaps even initially gets filled in as <code>(?m_1 : nat)</code></p>",
        "id": 124491451,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522594437
    },
    {
        "content": "<p>and then we have to solve <code>nat.lt_succ_self (?m_1 : nat) : n &lt; nat.succ n</code></p>",
        "id": 124491492,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522594500
    },
    {
        "content": "<p>and we know the type of <code>nat.lt.succ_self</code> is <code>?m_1 &lt; nat.succ ?m_1</code></p>",
        "id": 124491499,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522594533
    },
    {
        "content": "<p>and those two types really now have to be _equal_. I realise now I am slightly unsure what it means for two types to be equal. For example if <code>?m_1</code> was equal to <code>m</code> and it was a theorem that <code>m = n</code>, would these two types be equal?</p>",
        "id": 124491541,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522594600
    },
    {
        "content": "<p>Pretty much in this order.  You essentially start with <code>?m_1: ?m_2</code> and <code>?m_2: Sort ?u_3</code> for the underscore. Then the elaborator wants to construct the application <code>nat.lt_succ_self ?m_1</code>, so it needs to make sure that the type of <code>?m_1</code> is <code>nat</code>, and you get the unification constraint <code>?m_2 =?= nat</code>.</p>",
        "id": 124491542,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1522594616
    },
    {
        "content": "<p>I have seen Mario writing these <code>=?=</code>s</p>",
        "id": 124491547,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522594641
    },
    {
        "content": "<blockquote>\n<p>it was a theorem that m = n, would these two types be equal?</p>\n</blockquote>\n<p>No, only definitional equality is used in unification.</p>",
        "id": 124491548,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1522594644
    },
    {
        "content": "<p>And these types would be equal because of some theorem</p>",
        "id": 124491549,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522594659
    },
    {
        "content": "<p><code>=?=</code> is just the notation for \"should unify with\"</p>",
        "id": 124491551,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1522594660
    },
    {
        "content": "<p>I could probably answer these questions myself now</p>",
        "id": 124491552,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522594678
    },
    {
        "content": "<p>unification = assign the ?m_1, ..., ?m_n in such a way that the two sides are definitionally equal</p>",
        "id": 124491587,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1522594683
    },
    {
        "content": "<p>if I could get Lean to print out these <code>=?=</code> constraints myself.</p>",
        "id": 124491593,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522594692
    },
    {
        "content": "<p>Is there some set_option I can turn on</p>",
        "id": 124491595,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522594700
    },
    {
        "content": "<p>so I can just watch it all happening?</p>",
        "id": 124491596,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522594706
    },
    {
        "content": "<p>I remember when I discovered set_option pp.all true and very quickly developed a much better understanding of what a term was</p>",
        "id": 124491597,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522594732
    },
    {
        "content": "<p>and when I discovered various set_option things for simp and very quickly got a much better understanding of what simp di.</p>",
        "id": 124491605,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522594753
    },
    {
        "content": "<p>did</p>",
        "id": 124491606,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522594754
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">set_option</span> <span class=\"n\">trace</span><span class=\"bp\">.</span><span class=\"n\">type_context</span><span class=\"bp\">.</span><span class=\"n\">is_def_eq</span> <span class=\"n\">true</span>\n</pre></div>",
        "id": 124491607,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1522594755
    },
    {
        "content": "<p>oh gosh</p>",
        "id": 124491660,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522594893
    },
    {
        "content": "<p>even when I fill in all the <code>_</code></p>",
        "id": 124491661,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522594912
    },
    {
        "content": "<p>I still get outputs</p>",
        "id": 124491662,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522594917
    },
    {
        "content": "<p>This must be because of <code>@</code></p>",
        "id": 124491702,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522594963
    },
    {
        "content": "<p><code>theorem  easy {i : ℕ} {n : ℕ} : i &lt; n → i &lt; nat.succ n :=  λ H, lt.trans H $ nat.lt_succ_self n</code></p>",
        "id": 124491709,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522594986
    },
    {
        "content": "<p>The output also includes all the unification you get for type-checking, even if there are no underscores.</p>",
        "id": 124491712,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1522594999
    },
    {
        "content": "<p>produces two bursts of excitement:</p>",
        "id": 124491713,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522595024
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>[type_context.is_def_eq] ℕ =?= ?m_1 ... success  (approximate mode)\n[type_context.is_def_eq] ℕ =?= ?m_1 ... success  (approximate mode)\n[type_context.is_def_eq] ℕ =?= ?m_1 ... success  (approximate mode)\n[type_context.is_def_eq] ℕ =?= ?m_1 ... success  (approximate mode)\n[type_context.is_def_eq] ℕ =?= ?m_1 ... success  (approximate mode)\n[type_context.is_def_eq] ℕ =?= ?m_1 ... success  (approximate mode)\n[type_context.is_def_eq] ?m_1 =?= ℕ ... success  (approximate mode)\n[type_context.is_def_eq] ℕ =?= ℕ ... success  (approximate mode)\n[type_context.is_def_eq] ℕ =?= ℕ ... success  (approximate mode)\n[type_context.is_def_eq] ?m_1 =?= n ... success  (approximate mode)\n[type_context.is_def_eq] ℕ =?= ?m_1 ... success  (approximate mode)\n[type_context.is_def_eq] ?m_1 =?= nat.has_lt ... success  (approximate mode)\n[type_context.is_def_eq] ?m_1 =?= nat.has_lt ... success  (approximate mode)\n</pre></div>",
        "id": 124491714,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522595028
    },
    {
        "content": "<p>and</p>",
        "id": 124491755,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522595056
    },
    {
        "content": "<p>Yes, I'm not sure how much you can learn from the output.</p>",
        "id": 124491757,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1522595059
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>[type_context.is_def_eq] ?m_1 =?= i &lt; n ... success  (approximate mode)\n[type_context.is_def_eq] i &lt; nat.succ n =?= ?m_3 &lt; ?m_4 ... success  (approximate mode)\n[type_context.is_def_eq] partial_order.to_preorder ℕ =?= partial_order.to_preorder ℕ ... success  (approximate mode)\n[type_context.is_def_eq] i &lt; n =?= ?m_3 &lt; ?m_4 ... success  (approximate mode)\n[type_context.is_def_eq] ?m_1 =?= ?m_4 &lt; ?m_5 ... success  (approximate mode)\n[type_context.is_def_eq] ?m_1 =?= H ... success  (approximate mode)\n[type_context.is_def_eq] ?m_3 &lt; ?m_4 =?= ?m_5 &lt; nat.succ ?m_5 ... success  (approximate mode)\n[type_context.is_def_eq] ℕ =?= ℕ ... success  (approximate mode)\n[type_context.is_def_eq] ℕ =?= ℕ ... success  (approximate mode)\n[type_context.is_def_eq] ?m_1 =?= n ... success  (approximate mode)\n[type_context.is_def_eq] n &lt; nat.succ n =?= ?m_3 &lt; ?m_4 ... success  (approximate mode)\n[type_context.is_def_eq] ?m_1 =?= nat.lt_succ_self n ... success  (approximate mode)\n[type_context.is_def_eq] i &lt; n → i &lt; nat.succ n =?= i &lt; n → i &lt; nat.succ n ... success  (approximate mode)\n</pre></div>",
        "id": 124491758,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522595062
    },
    {
        "content": "<p>In my current state I can probably learn quite a bit</p>",
        "id": 124491760,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522595079
    },
    {
        "content": "<p>I think the guilty party is <code>lt.trans</code></p>",
        "id": 124491810,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522595166
    },
    {
        "content": "<p>or, as it should really be known</p>",
        "id": 124491811,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522595170
    },
    {
        "content": "<p>[rips mask off in Scooby-doo like manner]</p>",
        "id": 124491813,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522595183
    },
    {
        "content": "<p><code>@lt_trans _ _ _ _ _</code></p>",
        "id": 124491815,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522595205
    },
    {
        "content": "<p>Hmm</p>",
        "id": 124491865,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522595380
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>definition  Npreorder : preorder ℕ :=  by apply_instance\n\ntheorem  easy&#39; {i : ℕ} {n : ℕ} : i &lt; n → i &lt; nat.succ n :=\nλ H, @lt.trans ℕ Npreorder i n (nat.succ n) H $ nat.lt_succ_self n\n</pre></div>",
        "id": 124491866,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522595396
    },
    {
        "content": "<p>I still get a bunch of output from <code> set_option trace.type_context.is_def_eq true </code></p>",
        "id": 124491911,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522595419
    },
    {
        "content": "<p>aargh it's the notation</p>",
        "id": 124491913,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522595457
    },
    {
        "content": "<p><code> [type_context.is_def_eq] ?m_1 =?= n ... success  (approximate mode)</code></p>",
        "id": 124491958,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522595565
    },
    {
        "content": "<p>Nice to see we're in \"approximate mode\"</p>",
        "id": 124491959,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522595571
    },
    {
        "content": "<p>Doesn't fill me with confidence</p>",
        "id": 124491960,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522595576
    },
    {
        "content": "<p>Checking the equality of two terms without metavariables is a special case of unification.  That's also why it's called <code>is_def_eq</code>.  So whenever the elaborator makes sure that a term type-checks, it will produce unification constraints.</p>",
        "id": 124491965,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1522595590
    },
    {
        "content": "<p>Am I \"being the elaborator\" at the minute? So far I am up to</p>",
        "id": 124492018,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522595706
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>definition  Npreorder : preorder ℕ :=  by apply_instance\ndefinition  Nhas_lt : has_lt ℕ :=  by apply_instance\n\ntheorem  easy&#39; {i : ℕ} {n : ℕ} : @has_lt.lt ℕ Nhas_lt i n →  @has_lt.lt ℕ Nhas_lt i (nat.succ n) :=\nλ H, @lt.trans ℕ Npreorder i n (nat.succ n) H $ nat.lt_succ_self n\n</pre></div>",
        "id": 124492020,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522595722
    },
    {
        "content": "<p>I am having real trouble elaborating this any more.</p>",
        "id": 124492021,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522595735
    },
    {
        "content": "<p>In fact I would go so far to say that this term can't be elaborated any more.</p>",
        "id": 124492068,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522595776
    },
    {
        "content": "<p>although of course things could be unfolded.</p>",
        "id": 124492070,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522595784
    },
    {
        "content": "<p>What does the unfolding? Is that still the elaborator? Does the elaborator have to think about the actual definition of the term <code>@has_lt.lt</code> or does it just check its type?</p>",
        "id": 124492081,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522595827
    },
    {
        "content": "<p>I am not sure I care at all about the definition of <code>@has_lt.lt nat Nhas_lt</code>, all I need to know is that N is a preorder.</p>",
        "id": 124492125,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522595895
    },
    {
        "content": "<p>If you need to unify <code>has_lt.lt a b c d</code> and <code>nat.lt c d</code>, then yes, the elaborator will unfold <code>has_lt.lt</code>.</p>",
        "id": 124492126,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1522595904
    },
    {
        "content": "<p>In this case, I don't think we unfold <code>has_lt.lt</code> anywhere.  (At least we don't need to.)</p>",
        "id": 124492128,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1522595933
    },
    {
        "content": "<p>The <code>easy'</code> theorem is still missing the domain of the lambda, if you want to write down a \"fully elaborated\" term.</p>",
        "id": 124492180,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1522596015
    },
    {
        "content": "<p>BTW, I believe it's a mistake to think of elaboration as \"filling things in\" (even though that may be literal meaning of the word).  From a big picture point of view elaboration is the translation of pre-expressions (which are close to what you write down) to type-correct terms in the core type theory.  Personally I think of a pre-expression more like a recipe that tells the elaborator to do what you want.</p>",
        "id": 124492235,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1522596123
    },
    {
        "content": "<p>Oh! Yes, I forgot about the lambda.</p>",
        "id": 124492240,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522596144
    },
    {
        "content": "<p>So am I changing a <code>pexpr</code> to an <code>expr</code>?</p>",
        "id": 124492245,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522596160
    },
    {
        "content": "<p>No, you're changing one <code>pexpr</code> into another <code>pexpr</code>.</p>",
        "id": 124492248,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1522596176
    },
    {
        "content": "<p>dammit I want an expr</p>",
        "id": 124492254,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522596184
    },
    {
        "content": "<p>I read about them in the manual</p>",
        "id": 124492259,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522596191
    },
    {
        "content": "<p>I am concerned that I might have more than one <code>&lt;=</code> on my <code>nat</code></p>",
        "id": 124492267,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522596220
    },
    {
        "content": "<p><code>Npreorder</code> says that <code>nat</code> has the structure of a <code>preorder</code></p>",
        "id": 124492279,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522596242
    },
    {
        "content": "<p>I guess as an exercise you could write down the proof of <code>easy</code> using the <code>expr</code> constructors:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">open</span> <span class=\"n\">tactic</span> <span class=\"n\">expr</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">easy</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">do</span> <span class=\"n\">exact</span> <span class=\"err\">$</span> <span class=\"n\">lam</span> <span class=\"c\">/-</span><span class=\"cm\"> fill in here -/</span>\n</pre></div>",
        "id": 124492310,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1522596256
    },
    {
        "content": "<p>and the <code>&lt;</code> on it is I think called something like <code>Npreorder.lt</code></p>",
        "id": 124492323,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522596299
    },
    {
        "content": "<p>but the <code>&lt;</code> I want is called <code>has_lt.lt</code></p>",
        "id": 124492331,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522596319
    },
    {
        "content": "<p>Actually I don't even know what it's called</p>",
        "id": 124492373,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522596366
    },
    {
        "content": "<p>Yes, they are many <code>lt</code>s on <code>nat</code> and they all mean the same in the end.  AFAICT you have <code>has_lt.lt</code> everywhere though, as you should.</p>",
        "id": 124492379,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1522596395
    },
    {
        "content": "<p>it's called <code>Nhas_lt</code> I guess</p>",
        "id": 124492380,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522596396
    },
    {
        "content": "<p>I am not so sure about the <code>lt</code> coming from the preorder</p>",
        "id": 124492383,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522596417
    },
    {
        "content": "<p>I used type class inference to define the preorder on <code>nat</code></p>",
        "id": 124492391,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522596446
    },
    {
        "content": "<p>Ah, I understand now.  The question is about the relation between <code>Npreorder</code> and <code>Nhas_lt</code>: the terms <code>@preorder.to_has_lt nat Npreorder</code> and <code>Nhas_lt</code> are definitionally equal.  (And type-checking actually needs to verify this equality.)</p>",
        "id": 124492433,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1522596539
    },
    {
        "content": "<p>The more I elaborate, the greater the output of <code> set_option trace.type_context.is_def_eq true</code> becomes!</p>",
        "id": 124492439,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522596586
    },
    {
        "content": "<blockquote>\n<p>I guess as an exercise you could write down the proof of <code>easy</code> using the <code>expr</code> constructors:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">open</span> <span class=\"n\">tactic</span> <span class=\"n\">expr</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">easy</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">do</span> <span class=\"n\">exact</span> <span class=\"err\">$</span> <span class=\"n\">lam</span> <span class=\"c\">/-</span><span class=\"cm\"> fill in here -/</span>\n</pre></div>\n\n\n</blockquote>\n<p>Oh I like this comment. Thanks! I might start with something easier than <code>easy</code> but this looks like a fun game :-)</p>",
        "id": 124492993,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522597891
    },
    {
        "content": "<p>I might well find it a challenge to prove <code>1 + 1 = 2</code> in this mode</p>",
        "id": 124493033,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522597961
    },
    {
        "content": "<p>woo I made Prop</p>",
        "id": 124493239,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522598511
    },
    {
        "content": "<p><code>meta  definition  prop : expr (ff) := expr.sort level.zero</code></p>",
        "id": 124493240,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522598518
    },
    {
        "content": "<p>That's the proof that <code>expr</code> is inhabited</p>",
        "id": 124493279,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522598540
    },
    {
        "content": "<p>Note that <code>expr ff = pexpr</code></p>",
        "id": 124493342,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1522598755
    },
    {
        "content": "<p>I just noticed that expr was demanding a bool so I gave it one</p>",
        "id": 124493495,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522599107
    },
    {
        "content": "<p>Hmm, that's funny. <code>pexpr.lean</code> says <code> @[reducible]  meta  def  pexpr  := expr ff</code></p>",
        "id": 124493541,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522599191
    },
    {
        "content": "<p>but <code>#print pexpr</code> says that it's <code> id_rhs Type (expr ff) </code></p>",
        "id": 124493545,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522599224
    },
    {
        "content": "<p>rofl and <code>id_rhs</code> is an abbreviation. <span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> here's when you should use reducible, apparently, and abbreviations too.</p>",
        "id": 124493584,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522599297
    },
    {
        "content": "<p>so when exactly?</p>",
        "id": 124493591,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522599324
    },
    {
        "content": "<p>Oh this is all much too hard. I don't know how to turn anything at all into an expr. How do I turn a nat into an expr? How do I turn a Prop into an expr? How do I turn a proof into an expr? How do I turn a Type into an expr? Oh -- are these questions too general?</p>",
        "id": 124494493,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522601436
    },
    {
        "content": "<p>How do I turn a constructor into an expr? Is that a sensible question?</p>",
        "id": 124494496,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522601449
    },
    {
        "content": "<p>How do I turn<code> nat.zero</code> into an expr?</p>",
        "id": 124494501,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522601468
    },
    {
        "content": "<p>If <code>f : X -&gt; Y</code> and I have an expr <code>ex</code> representing the...name? <code>x : X</code> , how do I create an expr corresponding to <code>f x</code>?</p>",
        "id": 124494542,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522601568
    },
    {
        "content": "<p>How do I turn <code>eq.refl</code> into an expr?</p>",
        "id": 124494550,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522601630
    },
    {
        "content": "<p>This sort of exercise might be a really good bridge to the Programming In Lean book.</p>",
        "id": 124494589,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522601659
    },
    {
        "content": "<p>All this expr stuff is introduced at the same time as everything else somehow</p>",
        "id": 124494590,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522601670
    },
    {
        "content": "<p>Perhaps one can abstract it away first</p>",
        "id": 124494592,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522601677
    },
    {
        "content": "<p>and think about making exprs from usual Lean terms rather than letting the elaborator do it</p>",
        "id": 124494598,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522601711
    },
    {
        "content": "<p>Does the elaborator take a list of tokens and return an expr?</p>",
        "id": 124494647,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522601880
    },
    {
        "content": "<p>I am still at the stage where I don't know if I have the words right</p>",
        "id": 124494686,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522601896
    },
    {
        "content": "<p>I feel like this could be a cute blog post, explaining how to get from a string of unicode characters to an expr, even a really stupid string like <code>theorem  X : unit = unit := eq.refl unit</code></p>",
        "id": 124494741,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522602057
    },
    {
        "content": "<p>I don't know how to turn this into an expr</p>",
        "id": 124494748,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522602116
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>theorem  very_easy : unit = unit :=\nby  do to_expr ```(eq.refl unit) &gt;&gt;= exact\n</pre></div>",
        "id": 124498667,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522610966
    },
    {
        "content": "<p>that's kind of a cheat because I didn't start <code> by do exact $ </code></p>",
        "id": 124498669,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522610994
    },
    {
        "content": "<p>but all this stuff like <code>get_local</code> and <code>to_expr</code>, all these functions return <code>tactic</code> something.</p>",
        "id": 124498712,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522611034
    },
    {
        "content": "<p>Do I have to use the tactic monad?</p>",
        "id": 124498724,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522611091
    }
]