[
    {
        "content": "<p>Hello, I'm new to lean but I have some experience on agda. Since there's universe polymorphism, is there a <code>Type  ω</code> such that all other types <code>Type n</code> are in there? (for <code>n</code> natural)</p>",
        "id": 291772695,
        "sender_full_name": "Fernando Chu",
        "timestamp": 1659476556
    },
    {
        "content": "<p>No we only have one tower of universes. However you can declare universe variables or use <code>Type*</code> to get polymorphism</p>",
        "id": 291774921,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1659477873
    },
    {
        "content": "<p>But it really is « copy paste polymorphism » in the sense that the « same definition » at two different universe levels are really two different definitions from the point of view of the type theory</p>",
        "id": 291775126,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1659477990
    },
    {
        "content": "<p>Also in Lean each term has a unique type so we couldn’t really have such a definition</p>",
        "id": 291775220,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1659478049
    },
    {
        "content": "<p>Thanks! I'm new to this « copy paste polymorphism » .  From the  book, I have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universe</span> <span class=\"n\">u</span>\n<span class=\"kd\">def</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"o\">:=</span> <span class=\"n\">Prod</span> <span class=\"n\">α</span> <span class=\"n\">α</span>\n</code></pre></div>\n<p>Not that it's useful, but is it possible to get define make <code>F</code> particular to a universe? <code>def G' (α : Type 1) : Type 1 := F α</code> works because lean correctly unifies, but I'm wondering if there's a more explicit way to point out the universe level</p>",
        "id": 291777792,
        "sender_full_name": "Fernando Chu",
        "timestamp": 1659479688
    },
    {
        "content": "<p>You can use <code>F.{u}</code></p>",
        "id": 291777929,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1659479775
    },
    {
        "content": "<p>I see, thank you, I didn't know that worked for \"application\" too.  Just to be super sure, terms like <code>Type 10</code> are simple terms, right? I.e. there is no function application in it, the space is just part of the syntax for the term.</p>",
        "id": 291779358,
        "sender_full_name": "Fernando Chu",
        "timestamp": 1659480666
    },
    {
        "content": "<p>Yes, <code>Type 10</code> is not function application. It's a \"sort expression,\" where 10 is a level expression (not a <code>nat</code>).</p>",
        "id": 291780746,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1659481518
    },
    {
        "content": "<p>great, thank you all!</p>",
        "id": 291780859,
        "sender_full_name": "Fernando Chu",
        "timestamp": 1659481565
    },
    {
        "content": "<p>By the way, to explicitly quantify the universes in a definition the syntax is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"o\">:=</span> <span class=\"n\">Prod</span> <span class=\"n\">α</span> <span class=\"n\">α</span>\n</code></pre></div>",
        "id": 291780900,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1659481594
    },
    {
        "content": "<p>The <code>universes</code> declaration causes the universe level variables that you actually use in a definition to automatically be added there.</p>",
        "id": 291780986,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1659481671
    },
    {
        "content": "<p>ohh that's interesting, that notation only works for level expressions, right? They seem to be treated in a very special way with their own syntax</p>",
        "id": 291781372,
        "sender_full_name": "Fernando Chu",
        "timestamp": 1659481958
    },
    {
        "content": "<p><a href=\"https://leanprover.github.io/reference/expressions.html#universes\">https://leanprover.github.io/reference/expressions.html#universes</a> (that's not a complete specification; you can write things like <code>Type (max u v w)</code>)</p>",
        "id": 291781987,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1659482428
    },
    {
        "content": "<p>thank you, I hadn't found that reference, was checking <a href=\"https://leanprover.github.io/lean4/doc/whatIsLean.html\">https://leanprover.github.io/lean4/doc/whatIsLean.html</a> instead. I suppose that reference is for Lean3 but probably most applies for Lean4</p>",
        "id": 291783878,
        "sender_full_name": "Fernando Chu",
        "timestamp": 1659483947
    },
    {
        "content": "<p>This is a lean 3 stream -- questions about lean 4 go in the lean4 stream but as far as I know nothing changed here</p>",
        "id": 291811987,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1659512761
    }
]