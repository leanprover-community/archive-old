[
    {
        "content": "<p>I'd like to rewrite the left hand side of <code>length l + (n - length l) = max n (length l)</code> to n, but <code>rw add_sub</code> gives me this error:</p>\n<div class=\"codehilite\"><pre><span></span>rewrite tactic failed, did not find instance of the pattern in the target expression\n  ?m_3 + (?m_4 - ?m_5)\n</pre></div>\n\n\n<p>How may I tell Lean that <code>?m_3</code> and <code>?m_5</code> should be <code>length l</code>?</p>",
        "id": 188712007,
        "sender_full_name": "Yufan Lou",
        "timestamp": 1582273720
    },
    {
        "content": "<p>That's not the problem. Lean would match that if it could, but what lean is not doing a very good job of saying is that <code>+</code> and <code>-</code> in the pattern are not the same as the <code>+</code> and <code>-</code> in your goal</p>",
        "id": 188712129,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582273842
    },
    {
        "content": "<p>because nat subtraction (in your goal) is not the same as subtraction in a group (which is what the theorem you are applying is about)</p>",
        "id": 188712167,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582273900
    },
    {
        "content": "<p>You need to use <code>nat.add_sub</code></p>",
        "id": 188712175,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582273912
    },
    {
        "content": "<p>ah that's why if I try to <code>rw add_sub _ n _</code> I get a <code>cannot synthesize class instance</code> error for <code>add_group nat</code></p>",
        "id": 188712257,
        "sender_full_name": "Yufan Lou",
        "timestamp": 1582273964
    },
    {
        "content": "<p>Right, because nat is not an additive group</p>",
        "id": 188712269,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582273982
    },
    {
        "content": "<p>However, most theorems about additive groups have analogues on nat, with the same names with <code>nat.</code> in front</p>",
        "id": 188712300,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582274025
    },
    {
        "content": "<p>they usually have extra side conditions about things being less than other things</p>",
        "id": 188712311,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582274040
    },
    {
        "content": "<p>I'm using <a href=\"https://leanprover.github.io/live\" target=\"_blank\" title=\"https://leanprover.github.io/live\">https://leanprover.github.io/live</a> , is the theorem up there yet?</p>",
        "id": 188712357,
        "sender_full_name": "Yufan Lou",
        "timestamp": 1582274049
    },
    {
        "content": "<p>I may have guessed the names wrong but all of these theorems are quite old</p>",
        "id": 188712373,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582274073
    },
    {
        "content": "<p>It's <code>nat.add_sub_of_le</code></p>",
        "id": 188712419,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582274158
    },
    {
        "content": "<p><code>rw ←nat.add_sub_assoc</code> worked too thx</p>",
        "id": 188712468,
        "sender_full_name": "Yufan Lou",
        "timestamp": 1582274181
    },
    {
        "content": "<p>add_sub_assoc says something else</p>",
        "id": 188712485,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582274205
    },
    {
        "content": "<p>oh <code>nat.add_sub_of_le</code> gets me straight to <code>n</code> nice thx<br>\nit didn't show up in the autocomplete tho</p>",
        "id": 188712603,
        "sender_full_name": "Yufan Lou",
        "timestamp": 1582274312
    },
    {
        "content": "<p>Even better, <code>nat.sub_add_eq_max</code> is almost exactly your statement, after commuting on the left</p>",
        "id": 188712622,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582274339
    },
    {
        "content": "<p><code>unknown identifier 'nat.sub_add_eq_max'</code> <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span>‍♂️</p>",
        "id": 188712705,
        "sender_full_name": "Yufan Lou",
        "timestamp": 1582274410
    },
    {
        "content": "<p><code>import data.nat.basic</code></p>",
        "id": 188712713,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582274420
    },
    {
        "content": "<p><code>open nat</code> doesn't give me a lot huh</p>",
        "id": 188712727,
        "sender_full_name": "Yufan Lou",
        "timestamp": 1582274444
    },
    {
        "content": "<p>open nat doesn't do anything except allow you to leave off the <code>nat.</code> on lemmas</p>",
        "id": 188712752,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582274472
    },
    {
        "content": "<p><code>import</code> loads new files into your session so you have more theorems</p>",
        "id": 188712761,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582274491
    },
    {
        "content": "<p><code>data.nat.basic</code> is the mathlib file for all the missing nat lemmas</p>",
        "id": 188712776,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582274518
    },
    {
        "content": "<p>ahh i see</p>",
        "id": 188712835,
        "sender_full_name": "Yufan Lou",
        "timestamp": 1582274540
    },
    {
        "content": "<p>There is a much newer and better version of Lean online at leanprover-community</p>",
        "id": 188715281,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582277357
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/lean-web-editor/\" target=\"_blank\" title=\"https://leanprover-community.github.io/lean-web-editor/\">https://leanprover-community.github.io/lean-web-editor/</a></p>",
        "id": 188715308,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582277398
    },
    {
        "content": "<p>It has a much more up to date lean and mathlib</p>",
        "id": 188715352,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582277410
    }
]