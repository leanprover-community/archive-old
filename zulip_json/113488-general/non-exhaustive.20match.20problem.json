[
    {
        "content": "<p>The following code errors:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">type</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">type</span>\n<span class=\"bp\">|</span> <span class=\"n\">B</span>  <span class=\"o\">:</span> <span class=\"n\">type</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"n\">type</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">cA</span> <span class=\"o\">:</span> <span class=\"n\">val</span> <span class=\"n\">type.A</span>\n<span class=\"bp\">|</span> <span class=\"n\">cB</span> <span class=\"o\">:</span> <span class=\"n\">val</span> <span class=\"n\">type.B</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">wrap</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">type</span><span class=\"o\">},</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">wrap</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">wrap</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">wrap.val</span> <span class=\"n\">val.cA</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n</code></pre></div>\n<p>with the error message:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">non</span><span class=\"bp\">-</span><span class=\"n\">exhaustive</span> <span class=\"k\">match</span><span class=\"o\">,</span> <span class=\"n\">the</span> <span class=\"n\">following</span> <span class=\"n\">cases</span> <span class=\"n\">are</span> <span class=\"n\">missing</span><span class=\"o\">:</span>\n<span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">wrap.val</span> <span class=\"n\">val.cB</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>even though <code>_</code> is supposed to handle that case.</p>\n<p>There are two workarounds that I found:</p>\n<ol>\n<li>Change <code>_</code> to <code>(wrap.val val.cB)</code>.</li>\n<li>Change <code>(wrap.val val.cA)</code> to <code>(@wrap.val type.A val.cA)</code>.</li>\n</ol>\n<p>But I wonder if the problem above is  expected.</p>",
        "id": 215671007,
        "sender_full_name": "Sorawee Porncharoenwase",
        "timestamp": 1604551605
    },
    {
        "content": "<p>yes, this is a known issue. I forget exactly what the problem is but I think it has something to do with dependent pattern matching making it difficult to instantiate the wildcard branch where it needs to go</p>",
        "id": 215671541,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604552428
    },
    {
        "content": "<p>I don't think we have an open issue at <a href=\"https://github.com/leanprover-community/lean\">https://github.com/leanprover-community/lean</a> yet though.</p>",
        "id": 215671636,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1604552555
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean/issues/1594\">leanprover/lean#1594</a></p>",
        "id": 215671642,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604552568
    }
]