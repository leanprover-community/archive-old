[
    {
        "content": "<p>We don't have <code>lattice_bot</code>. It turns out it is the correct generality for the following definition:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- A finite partition of `a : α` is a pairwise disjoint finite set of elements whose supremum is</span>\n<span class=\"sd\">`a`. -/</span>\n<span class=\"kd\">@[ext]</span> <span class=\"kd\">structure</span> <span class=\"n\">finpartition</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">bounded_lattice</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">parts</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">disjoint</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">parts</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">pairwise_disjoint</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">sup_parts</span> <span class=\"o\">:</span> <span class=\"n\">parts.sup</span> <span class=\"n\">id</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">not_bot_mem</span> <span class=\"o\">:</span> <span class=\"bp\">⊥</span> <span class=\"bp\">∉</span> <span class=\"n\">parts</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 257590748,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634239387
    },
    {
        "content": "<p>I could replace the final field by <code>(not_bot_of_mem {b : α} : b ∈ parts → ¬ is_bot b)</code>, but that's pretty artificial and, most importantly, I still can't prove lemmas in terms of <code>⊥</code> . So do people mind if I define <code>lattice_bot</code>?</p>",
        "id": 257591078,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634239511
    },
    {
        "content": "<p>My use case is <code>finset α</code>, which is indeed not a <code>bounded_lattice</code>.</p>",
        "id": 257591180,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634239550
    },
    {
        "content": "<p><code>finset α</code> is a semilattice_sup_bot, right?</p>",
        "id": 257593903,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1634240742
    },
    {
        "content": "<p>Yep, but <code>pairwise_disjoint</code> needs a <code>semilattice_inf_bot</code>. I really need both <code>sup</code> and <code>inf</code> here</p>",
        "id": 257594521,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634241014
    },
    {
        "content": "<p>I wonder if we should consider breaking out <code>has_top</code> as a <code>Prop</code> valued mixin. When we have <code>partial_order</code> (rather than <code>preorder</code>) the bottom element is unique and we could nonconstructively provide it via <code>⊥</code>.</p>",
        "id": 257596199,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1634241689
    },
    {
        "content": "<p>(Thereby hopefully getting rid of <code>semilattice_(sup|inf)_(top|bot)</code>, and avoiding the need here for <code>lattice_(top|bot)</code>.</p>",
        "id": 257596349,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1634241741
    },
    {
        "content": "<p>Yeah, I was already thinking that when adding <code>distrib_lattice_bot</code> a while back.</p>",
        "id": 257599381,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634242958
    },
    {
        "content": "<p>The question is how far we want to go that way. For example, what about decoupling <code>has_inf</code> and <code>has_sup</code> as well?</p>",
        "id": 257599480,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634242991
    },
    {
        "content": "<p>I think the problem will be that we'll no longer be able to write <code>bounded_lattice</code>, but instead some huge chain of <code>[order_bot] [order_top] [semilattice_inf] [semilattice_sup]</code>. Perhaps we should wait to see if <code>[[lattice]]</code> notation as discussed previously (i.e. automatically add all transitively required typeclass arguments) might be available in Lean4.</p>",
        "id": 257618325,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1634251747
    },
    {
        "content": "<p>Then we could redefine <code>bounded_lattice</code> as a completely empty typeclass (no fields, no ancestors!), but that requires all these constituent parts.</p>",
        "id": 257618515,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1634251867
    },
    {
        "content": "<p>That's not the only obstacle, right? I thought there was this exponential explosion of underlying terms when computing  the prod of the prod of the prod...</p>",
        "id": 257619546,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634252446
    },
    {
        "content": "<p>Did we just decide that this doesn't come up enough in practice to bother?</p>",
        "id": 257619582,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634252469
    },
    {
        "content": "<p>I think <a href=\"#narrow/stream/113488-general/topic/what.20is.20a.20diamond.3F\">this</a> is the main previous discussion of this blow-up.</p>",
        "id": 257624701,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1634255505
    },
    {
        "content": "<p>But I don't understand this well enough to guess how this would affect the <code>bounded_lattice</code> change discussed above.</p>",
        "id": 257625016,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1634255676
    }
]