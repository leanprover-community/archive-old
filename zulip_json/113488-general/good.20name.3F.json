[
    {
        "content": "<p>What would be a good name for the following function?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">noname</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"bp\">.</span><span class=\"n\">zip_with</span> <span class=\"n\">f</span> <span class=\"n\">l</span><span class=\"bp\">.</span><span class=\"n\">tail</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">prod</span>\n</code></pre></div>",
        "id": 204861577,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1595544100
    },
    {
        "content": "<p>I'm mostly interested in the additive version of this with <code>f = dist</code> or <code>f = edist</code>.</p>",
        "id": 204861640,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1595544129
    },
    {
        "content": "<p>is it a <code>add_comm_monoid</code>? then you could use finset sum / prod, which i think has more lemmas than list sum / prod</p>",
        "id": 204861660,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1595544164
    },
    {
        "content": "<p>For <code>l = a₀ :: a₁ :: a₃ :: a₄</code> we have <code>noname l f = f a₀ a₁ * f a₁ a₂ * f a₃ a₄</code>.</p>",
        "id": 204861838,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1595544348
    },
    {
        "content": "<p>I think it's easier to express this using <code>list</code>, not <code>finset</code>.</p>",
        "id": 204861882,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1595544364
    },
    {
        "content": "<p>My question is how to call this.</p>",
        "id": 204861891,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1595544373
    },
    {
        "content": "<p>ah, thanks, I had not understood the definition before</p>",
        "id": 204861898,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1595544392
    },
    {
        "content": "<p>maybe something like <code>sequential_prod</code> or <code>map_prod_sequential</code></p>",
        "id": 204861959,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1595544472
    },
    {
        "content": "<p>in math i might call it a product over f at consecutive pairwise elements</p>",
        "id": 204861967,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1595544479
    },
    {
        "content": "<p>(I'm a little surprised that <code>zip_with</code> is not called <code>map2</code>)</p>",
        "id": 204862022,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1595544502
    },
    {
        "content": "<p>i think zip_with is a haskell name and map2 is a mathlib name?</p>",
        "id": 204862039,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1595544523
    },
    {
        "content": "<p>pandas would call this something like <code>l.rolling(2).agg(f).prod()</code></p>",
        "id": 204862263,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1595544700
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"252300\">Jalex Stark</span> <a href=\"#narrow/stream/113488-general/topic/good.20name.3F/near/204862039\">said</a>:</p>\n<blockquote>\n<p>i think zip_with is a haskell name and map2 is a mathlib name?</p>\n</blockquote>\n<p>I wouldn't call it a mathlib name, since the only time <code>map2</code>occurs in the library is <code>nonempty.map2</code> (contributed by me).<br>\nI probably got the naming scheme from Coq: <a href=\"https://coq.github.io/doc/master/api/coq/Util/List/index.html#val-map2\">https://coq.github.io/doc/master/api/coq/Util/List/index.html#val-map2</a> (if something exists for a unary function, appending a <code>2</code> means the corresponding thing for a binary function)</p>",
        "id": 204862294,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1595544722
    },
    {
        "content": "<p><code>list.map₂</code> is from core.</p>",
        "id": 204864147,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1595546129
    },
    {
        "content": "<p>and has the same type signature as <code>list.zip_with</code></p>",
        "id": 204864391,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1595546401
    },
    {
        "content": "<p>they have slightly different implementations but I think they compute the same function</p>",
        "id": 204864499,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1595546498
    },
    {
        "content": "<p>Yeah, it's the same function with two implementations in the same file. Never change, Lean.</p>",
        "id": 204864569,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1595546554
    },
    {
        "content": "<p>they're both from core, defined in the same file :O</p>",
        "id": 204864614,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1595546625
    },
    {
        "content": "<p>we don't have to remove it if we add the right simp lemma :P</p>",
        "id": 204864617,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1595546630
    }
]