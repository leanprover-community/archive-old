[
    {
        "content": "<p>I'm in a proof where my final goal is <code>alternating_map.has_scalar = mul_action.to_has_scalar</code>.</p>\n<p><code>has_scalar</code> has only one field - how do I change the equality to that field and get things to unfold?</p>",
        "id": 220149777,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1608141429
    },
    {
        "content": "<p>Do cases or congr do what you want?</p>",
        "id": 220150180,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1608141619
    },
    {
        "content": "<p><code>cases</code> needs an argument</p>",
        "id": 220150258,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1608141653
    },
    {
        "content": "<p>And <code>congr</code> fails with no error</p>",
        "id": 220150270,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1608141663
    },
    {
        "content": "<p>(I got to this goal by applying congr anyway)</p>",
        "id": 220150295,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1608141673
    },
    {
        "content": "<p>A mwe:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">has_scalar.ext</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">has_scalar</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a.smul</span> <span class=\"bp\">=</span> <span class=\"n\">b.smul</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 220152412,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1608142670
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span> golfed it with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">has_scalar.ext</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">has_scalar</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"n\">a.smul</span> <span class=\"bp\">=</span> <span class=\"n\">b.smul</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span>\n<span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"n\">rfl</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 220154094,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1608143515
    },
    {
        "content": "<p>A non-golfed version:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">has_scalar.ext</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">has_scalar</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a.smul</span> <span class=\"bp\">=</span> <span class=\"n\">b.smul</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">tactic.unfreeze_local_instances</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"n\">dsimp</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 220154652,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1608143763
    },
    {
        "content": "<p>Golfed even more:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">ext</span><span class=\"o\">]</span> <span class=\"n\">has_scalar</span>\n</code></pre></div>",
        "id": 220155039,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1608143949
    },
    {
        "content": "<p>I just noticed that we actually already have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/module_ext\">docs#module_ext</a>, perhaps this should be expanded to at least <code>semimodule_ext</code></p>",
        "id": 220156645,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1608144722
    },
    {
        "content": "<p>And I think ultimately I need a nat version of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/add_comm_group.module.subsingleton\">docs#add_comm_group.module.subsingleton</a> to close my diamond, which ought to be straightforward</p>",
        "id": 220156751,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1608144775
    },
    {
        "content": "<p>Done in <a href=\"https://github.com/leanprover-community/mathlib/issues/5396\">#5396</a></p>",
        "id": 220158887,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1608145863
    }
]