[
    {
        "content": "<p>I thought I'd try writing up the example sheets I'm supervising in (nonidiomatic) lean:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.set.lattice</span>\n<span class=\"kn\">import</span> <span class=\"n\">order.boolean_algebra</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">cued</span>\n\n<span class=\"c1\">-- yes, constants / axioms are bad but I want to reduce boilerplate for pedagogy</span>\n<span class=\"kd\">constant</span> <span class=\"bp\">Ω</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span>\n<span class=\"kd\">constant</span> <span class=\"n\">ℙ</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"bp\">Ω</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">pos</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"bp\">Ω</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">ℙ</span> <span class=\"n\">s</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">certain</span> <span class=\"o\">:</span> <span class=\"n\">ℙ</span> <span class=\"o\">(</span><span class=\"n\">set.univ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">disj</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">disjoint</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">ℙ</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">∪</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">ℙ</span> <span class=\"n\">A</span> <span class=\"bp\">+</span> <span class=\"n\">ℙ</span> <span class=\"n\">B</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">impossible</span> <span class=\"o\">:</span> <span class=\"n\">ℙ</span> <span class=\"bp\">∅</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">suffices</span> <span class=\"n\">ℙ</span> <span class=\"n\">set.univ</span> <span class=\"bp\">+</span> <span class=\"n\">ℙ</span> <span class=\"bp\">∅</span> <span class=\"bp\">=</span> <span class=\"n\">ℙ</span> <span class=\"n\">set.univ</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">rwa</span> <span class=\"bp\">←</span><span class=\"n\">add_right_eq_self</span><span class=\"o\">,</span>\n<span class=\"k\">calc</span> <span class=\"n\">ℙ</span> <span class=\"n\">set.univ</span> <span class=\"bp\">+</span> <span class=\"n\">ℙ</span> <span class=\"bp\">∅</span> <span class=\"bp\">=</span> <span class=\"n\">ℙ</span> <span class=\"o\">(</span><span class=\"n\">set.univ</span> <span class=\"bp\">∪</span> <span class=\"bp\">∅</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"n\">disj</span> <span class=\"o\">(</span><span class=\"n\">set.disjoint_empty</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n                  <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">ℙ</span> <span class=\"n\">set.univ</span>        <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"n\">set.union_empty</span>\n</code></pre></div>\n<p>The proofI have on paper does this in the other order, by first doing the <code>calc</code> and then applying <code>add_right_eq_self</code>. I can get this order with <code>have _, from</code>, but that feels a bit ugly:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">impossible</span> <span class=\"o\">:</span> <span class=\"n\">ℙ</span> <span class=\"bp\">∅</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">have</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"k\">from</span>  <span class=\"c1\">-- this is just noise!</span>\n<span class=\"k\">calc</span> <span class=\"n\">ℙ</span> <span class=\"n\">set.univ</span> <span class=\"bp\">+</span> <span class=\"n\">ℙ</span> <span class=\"bp\">∅</span> <span class=\"bp\">=</span> <span class=\"n\">ℙ</span> <span class=\"o\">(</span><span class=\"n\">set.univ</span> <span class=\"bp\">∪</span> <span class=\"bp\">∅</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"n\">disj</span> <span class=\"o\">(</span><span class=\"n\">set.disjoint_empty</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n                  <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">ℙ</span> <span class=\"n\">set.univ</span>        <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"n\">set.union_empty</span><span class=\"o\">,</span>\n<span class=\"kd\">by</span> <span class=\"n\">rwa</span> <span class=\"bp\">←</span><span class=\"n\">add_right_eq_self</span>\n</code></pre></div>\n<p>Is there another nice way to spell this?</p>",
        "id": 270945836,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1644222479
    },
    {
        "content": "<p>Perhaps <code>have calc</code>?</p>",
        "id": 270946085,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1644222641
    },
    {
        "content": "<p>I've wished for a slightly less noisy version of that as well. Ideally <code>have foo, calc ....</code> would work.</p>",
        "id": 270946120,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1644222666
    },
    {
        "content": "<p>Ooh, I like <code>have calc</code>, if it can be made to work</p>",
        "id": 270946159,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1644222702
    },
    {
        "content": "<p><code>have := calc</code> is pretty close to that already</p>",
        "id": 270946177,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644222715
    },
    {
        "content": "<p>there is no need to give the type ascription in a calc block since it comes with its own type ascription</p>",
        "id": 270946278,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644222751
    },
    {
        "content": "<p><code>have := calc</code> doesn't seem legal in term mode</p>",
        "id": 270946606,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1644222974
    },
    {
        "content": "<p>Or <code>have, calc</code></p>",
        "id": 270946607,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1644222975
    },
    {
        "content": "<p><code>have, calc</code> is also a syntax error</p>",
        "id": 270946663,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1644223017
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> It's not, but I'm not sure how worthwhile it is to extend lean 3 term syntax at this point</p>",
        "id": 270946666,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644223019
    },
    {
        "content": "<p>you should just stay in tactic mode</p>",
        "id": 270946733,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644223056
    },
    {
        "content": "<p>you can do so even while sticking to a very restricted tactic grammar if you are worried about overwhelming readers</p>",
        "id": 270946840,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644223118
    },
    {
        "content": "<p><code>have _, by calc</code> is probably the tersest equivalent in term mode</p>",
        "id": 270946904,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644223175
    },
    {
        "content": "<p>or <code>let this := calc</code></p>",
        "id": 270946966,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644223208
    },
    {
        "content": "<p>Can't you do <code>add_right_eq_self.mpr $ calc... </code>?</p>",
        "id": 270947937,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1644223816
    },
    {
        "content": "<p>Oh I see you explicitly don't want said order</p>",
        "id": 270948630,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1644224248
    }
]