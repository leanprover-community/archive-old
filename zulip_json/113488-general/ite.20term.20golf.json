[
    {
        "content": "<p>Suppose I need to prove <code>ite (x = y) tt ff = tt → x = y</code> and <code>x = y → ite (x = y) tt ff = tt</code>. Is there a succint way to do this in term mode? (I know <code>simp</code> and <code>split_ifs</code> is amazing here, but I'd like to do inversion by hand if possible)</p>",
        "id": 127155648,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1527406139
    },
    {
        "content": "<p>this should take care of the second part: <a href=\"https://github.com/leanprover/lean/blob/master/library/init/logic.lean#L839\" target=\"_blank\" title=\"https://github.com/leanprover/lean/blob/master/library/init/logic.lean#L839\">https://github.com/leanprover/lean/blob/master/library/init/logic.lean#L839</a></p>",
        "id": 127156020,
        "sender_full_name": "Nicholas Scheel",
        "timestamp": 1527407031
    },
    {
        "content": "<p>for the first part I wonder if something like the following would work (untested):</p>\n<div class=\"codehilite\"><pre><span></span>λ h,\nif p : (x = y) then p else\n  bool.no_confusion (eq.trans (eq.symm h) (if_neg p))\n</pre></div>\n\n\n<p>basically you decide the proposition (equivalent to the by_cases tactic) and then return the true case, or prove the false case is absurd</p>",
        "id": 127156150,
        "sender_full_name": "Nicholas Scheel",
        "timestamp": 1527407309
    },
    {
        "content": "<p>maybe this is easier than no_confusion: <a href=\"https://github.com/leanprover/lean/blob/master/library/init/logic.lean\" target=\"_blank\" title=\"https://github.com/leanprover/lean/blob/master/library/init/logic.lean\">https://github.com/leanprover/lean/blob/master/library/init/logic.lean</a></p>",
        "id": 127156160,
        "sender_full_name": "Nicholas Scheel",
        "timestamp": 1527407400
    },
    {
        "content": "<p><code>absurd (eq.symm (eq.trans .....)) bool.ff_ne_tt</code></p>",
        "id": 127156203,
        "sender_full_name": "Nicholas Scheel",
        "timestamp": 1527407447
    },
    {
        "content": "<p>btw I think this is just <code>if p then tt else ff</code>: <a href=\"https://github.com/leanprover/lean/blob/master/library/init/logic.lean#L590\" target=\"_blank\" title=\"https://github.com/leanprover/lean/blob/master/library/init/logic.lean#L590\">https://github.com/leanprover/lean/blob/master/library/init/logic.lean#L590</a></p>",
        "id": 127156220,
        "sender_full_name": "Nicholas Scheel",
        "timestamp": 1527407506
    },
    {
        "content": "<p>use <code>to_bool</code>, it has lots of lemmas for this</p>",
        "id": 127164043,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527426718
    },
    {
        "content": "<p>thanks Nicholas / Mario for the pointers</p>",
        "id": 127165905,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1527430764
    }
]