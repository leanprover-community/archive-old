[
    {
        "content": "<p>Here is a statement that feels totally obvious to me, but I have absolutely no idea how to prove it formally.</p>\n<p>Does anyone know how to approach this proof?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">collatz</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"k\">else</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">collatz_terms_in</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">collatz_terms_in</span> <span class=\"o\">(</span><span class=\"n\">collatz</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">t</span>\n\n<span class=\"c1\">-- \"if it terminates in t steps, it also terminates in t' steps, with t' &gt; t\"</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">t</span> <span class=\"n\">t'</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">collatz_terms_in</span> <span class=\"n\">n</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">&lt;</span> <span class=\"n\">t'</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">collatz_terms_in</span> <span class=\"n\">n</span> <span class=\"n\">t'</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 279234784,
        "sender_full_name": "Aaron Bies",
        "timestamp": 1650221371
    },
    {
        "content": "<p>I recommend you try to prove the easier version with <code>succ t</code> / <code>t + 1</code> first</p>",
        "id": 279235345,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1650222108
    },
    {
        "content": "<p>I imagine you'd find this easier to prove if you replace <code>collatz_terms_in</code> with an inductive proposition, as then I think you'd get the induction principle you need for free</p>",
        "id": 279235502,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1650222279
    },
    {
        "content": "<p>That is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">collatz_terms_in</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">one</span> <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">collatz_terms_in</span> <span class=\"mi\">1</span> <span class=\"n\">t</span>\n<span class=\"bp\">|</span> <span class=\"n\">of_collatz</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">t</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">collatz_terms_in</span> <span class=\"o\">(</span><span class=\"n\">collatz</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">collatz_terms_in</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"bp\">+</span>  <span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 279235620,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1650222456
    },
    {
        "content": "<p>Using the original definition:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">t</span> <span class=\"n\">t'</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">collatz_terms_in</span> <span class=\"n\">n</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">&lt;</span> <span class=\"n\">t'</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">collatz_terms_in</span> <span class=\"n\">n</span> <span class=\"n\">t'</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">replace</span> <span class=\"n\">h₂</span> <span class=\"o\">:=</span> <span class=\"n\">le_of_lt</span> <span class=\"n\">h₂</span><span class=\"o\">,</span> <span class=\"n\">induction'</span> <span class=\"n\">h₂</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">assumption</span> <span class=\"o\">},</span>\n  <span class=\"n\">change</span> <span class=\"n\">t</span> <span class=\"bp\">≤</span> <span class=\"n\">t'</span> <span class=\"n\">at</span> <span class=\"n\">h₂</span><span class=\"o\">,</span> <span class=\"n\">by_cases</span> <span class=\"n\">h₃</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">subst</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">triv</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"n\">collatz_terms_in</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"n\">clear'</span> <span class=\"n\">t'</span> <span class=\"n\">ih</span> <span class=\"n\">h₂</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">t</span> <span class=\"k\">with</span> <span class=\"n\">t</span> <span class=\"n\">ih</span> <span class=\"n\">generalizing</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">collatz_terms_in</span> <span class=\"n\">at</span> <span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">h₃</span> <span class=\"o\">},</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">h₄</span> <span class=\"o\">:</span> <span class=\"n\">collatz</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">h₄</span><span class=\"o\">,</span> <span class=\"n\">triv</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"n\">collatz_terms_in</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">collatz_terms_in</span> <span class=\"n\">at</span> <span class=\"n\">h₁</span><span class=\"o\">,</span>\n  <span class=\"n\">repeat</span> <span class=\"o\">{</span> <span class=\"n\">assumption</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 279236358,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1650223517
    },
    {
        "content": "<p>Using Eric's definition:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">t</span> <span class=\"n\">t'</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">collatz_terms_in</span> <span class=\"n\">n</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">&lt;</span> <span class=\"n\">t'</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">collatz_terms_in</span> <span class=\"n\">n</span> <span class=\"n\">t'</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">replace</span> <span class=\"n\">h₂</span> <span class=\"o\">:=</span> <span class=\"n\">le_of_lt</span> <span class=\"n\">h₂</span><span class=\"o\">,</span> <span class=\"n\">induction'</span> <span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">left</span> <span class=\"o\">},</span>\n  <span class=\"n\">cases</span> <span class=\"n\">t'</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">h₂</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"n\">nat.succ_le_succ_iff</span> <span class=\"n\">at</span> <span class=\"n\">h₂</span><span class=\"o\">,</span> <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">ih</span> <span class=\"n\">h₂</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 279236568,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1650223872
    },
    {
        "content": "<p>Thank you, I will try to understand how this works</p>",
        "id": 279236966,
        "sender_full_name": "Aaron Bies",
        "timestamp": 1650224441
    },
    {
        "content": "<p>What do I have to import for it to find <code>induction'</code>?</p>",
        "id": 279236978,
        "sender_full_name": "Aaron Bies",
        "timestamp": 1650224468
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.induction</span>\n</code></pre></div>",
        "id": 279236985,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1650224481
    },
    {
        "content": "<p>The theorem is a bit more general if you switch the less-than to a less-than-or-equal.</p>\n<p>Here's Patrick's second proof with that change and in more of a mathlib style.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">t</span> <span class=\"n\">t'</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">collatz_terms_in</span> <span class=\"n\">n</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">≤</span> <span class=\"n\">t'</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">collatz_terms_in</span> <span class=\"n\">n</span> <span class=\"n\">t'</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction'</span> <span class=\"n\">h₁</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">constructor</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">t'</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">h₂</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">nat.succ_le_succ_iff</span> <span class=\"n\">at</span> <span class=\"n\">h₂</span><span class=\"o\">,</span>\n      <span class=\"n\">use</span> <span class=\"n\">ih</span> <span class=\"n\">h₂</span><span class=\"o\">,</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 279237143,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1650224750
    },
    {
        "content": "<p>Here's a different version of Patrick's first proof, using a slightly different induction strategy and using <code>simp</code> to pass the necessary hypotheses to the definition unfoldings:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">t</span> <span class=\"n\">t'</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">collatz_terms_in</span> <span class=\"n\">n</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">≤</span> <span class=\"n\">t'</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">collatz_terms_in</span> <span class=\"n\">n</span> <span class=\"n\">t'</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">t'</span> <span class=\"k\">with</span> <span class=\"n\">t'</span> <span class=\"n\">ih</span> <span class=\"n\">generalizing</span> <span class=\"n\">t</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nonpos_iff_eq_zero</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h₂</span><span class=\"o\">,</span>\n    <span class=\"n\">subst</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n    <span class=\"n\">assumption</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">by_cases</span> <span class=\"n\">h₃</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h₃</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">collatz_terms_in</span><span class=\"o\">,</span> <span class=\"n\">h₃</span><span class=\"o\">,</span> <span class=\"n\">not_false_iff</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">h₁</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">collatz_terms_in</span><span class=\"o\">,</span> <span class=\"n\">h₃</span><span class=\"o\">,</span> <span class=\"n\">not_false_iff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">⊢</span> <span class=\"n\">h₁</span><span class=\"o\">,</span>\n        <span class=\"n\">apply</span> <span class=\"n\">ih</span> <span class=\"n\">h₁</span><span class=\"o\">,</span>\n        <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">nat.succ_le_succ_iff</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">h₂</span><span class=\"o\">,</span> <span class=\"o\">}</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 279237923,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1650225958
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/computation.run_for\">docs#computation.run_for</a> may be useful for this sort of definitions.</p>",
        "id": 279238117,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1650226214
    }
]