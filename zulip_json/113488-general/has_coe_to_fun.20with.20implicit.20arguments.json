[
    {
        "content": "<p>I am having trouble getting <code>has_coe_to_fun</code> to work with implicit arguments in the way that I would like.  Consider the following:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">basic</span> <span class=\"n\">linear_algebra</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">ℚ</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n\n<span class=\"n\">def</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">→</span><span class=\"err\">ₗ</span><span class=\"o\">[</span><span class=\"n\">ℚ</span><span class=\"o\">]</span> <span class=\"n\">V</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">),</span> <span class=\"n\">v</span><span class=\"o\">,</span>\n  <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">),</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n  <span class=\"n\">smul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">),</span> <span class=\"n\">rfl</span> <span class=\"o\">}</span>\n\n<span class=\"n\">def</span> <span class=\"n\">f1</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"n\">V</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">→</span><span class=\"err\">ₗ</span><span class=\"o\">[</span><span class=\"n\">ℚ</span><span class=\"o\">]</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n<span class=\"n\">def</span> <span class=\"n\">f2</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">→</span><span class=\"err\">ₗ</span><span class=\"o\">[</span><span class=\"n\">ℚ</span><span class=\"o\">]</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"n\">v</span>\n<span class=\"n\">def</span> <span class=\"n\">f3</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"n\">v</span>\n</pre></div>\n\n\n<p>Definitions <code>f1</code> and <code>f2</code> work (via the <code>has_coe_to_fun</code> instance for <code>linear_map</code>) but they are awkward.  Definition <code>f3</code> does not work: Lean says</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">function</span> <span class=\"n\">expected</span> <span class=\"n\">at</span>\n  <span class=\"n\">f</span>\n<span class=\"n\">term</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"err\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">→</span><span class=\"err\">ₗ</span><span class=\"o\">[</span><span class=\"n\">ℚ</span><span class=\"o\">]</span> <span class=\"err\">?</span><span class=\"n\">m_1</span>\n<span class=\"n\">Additional</span> <span class=\"n\">information</span><span class=\"o\">:</span>\n<span class=\"n\">c</span><span class=\"o\">:</span><span class=\"err\">\\</span><span class=\"n\">Users</span><span class=\"err\">\\</span><span class=\"n\">Neil</span> <span class=\"n\">Strickland</span><span class=\"err\">\\</span><span class=\"n\">Google</span> <span class=\"n\">Drive</span><span class=\"err\">\\</span><span class=\"n\">Lean</span><span class=\"err\">\\</span><span class=\"n\">lib</span><span class=\"err\">\\</span><span class=\"n\">src</span><span class=\"err\">\\</span><span class=\"n\">algebra</span><span class=\"err\">\\</span><span class=\"n\">linmap</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"mi\">10</span><span class=\"o\">:</span><span class=\"mi\">22</span><span class=\"o\">:</span> <span class=\"kn\">context</span><span class=\"o\">:</span> <span class=\"n\">switched</span> <span class=\"n\">to</span> <span class=\"n\">simple</span> <span class=\"n\">application</span> <span class=\"n\">elaboration</span> <span class=\"n\">procedure</span> <span class=\"n\">because</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">use</span> <span class=\"n\">expected</span> <span class=\"n\">type</span> <span class=\"n\">to</span> <span class=\"n\">elaborate</span> <span class=\"n\">it</span><span class=\"o\">,</span> <span class=\"n\">error</span> <span class=\"n\">message</span>\n  <span class=\"n\">too</span> <span class=\"n\">many</span> <span class=\"n\">arguments</span>\n</pre></div>\n\n\n<p>I don't understand where \"too many arguments\" is coming from.  Is there a way around this?</p>",
        "id": 170881798,
        "sender_full_name": "Neil Strickland",
        "timestamp": 1563187606
    },
    {
        "content": "<p>Too many arguments is because a term of type <code>V →ₗ[ℚ] V</code> takes no arguments before it is coerced, so one argument is too many. I think  <code>def f3 (v : V) : V := (f : V -&gt; V) v</code> should work.</p>",
        "id": 170882873,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1563188809
    },
    {
        "content": "<p>In fact <code>def f3 (v : V) : V := (f : V → V) v</code> gives</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">invalid</span> <span class=\"n\">type</span> <span class=\"n\">ascription</span><span class=\"o\">,</span> <span class=\"n\">term</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"err\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">→</span><span class=\"err\">ₗ</span><span class=\"o\">[</span><span class=\"n\">ℚ</span><span class=\"o\">]</span> <span class=\"err\">?</span><span class=\"n\">m_1</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"err\">?</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span>\n</pre></div>\n\n\n<p>I'm not sure why that is.  Anyway, in the situation that led me to this minimal example, the term corresponding to <code>V</code> is rather large, so I want to avoid having to mention it if possible.</p>",
        "id": 170883678,
        "sender_full_name": "Neil Strickland",
        "timestamp": 1563189615
    },
    {
        "content": "<p>One thing that always gave me trouble with <code>has_coe_to_fun</code> is when I would hope that the type of the argument would help infer some of the parameters of the type of the object being coerced to function. Would thing that would help is make <code>V</code> an explicit parameter and call <code>f</code> as <code>f V v</code></p>",
        "id": 170891844,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1563197023
    }
]