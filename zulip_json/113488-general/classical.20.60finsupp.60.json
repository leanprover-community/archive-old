[
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/mathlib/issues/6333\">#6333</a> <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> add some <code>[decidable_eq]</code> assumptions to <code>finsupp</code>. What do you think about an alternative approach: make it absolutely classical and noncomputable? I mean something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">finsupp</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">to_fun</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">M₀</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">finite_support'</span> <span class=\"o\">:</span> <span class=\"n\">set.finite</span> <span class=\"o\">(</span><span class=\"n\">function.support</span> <span class=\"n\">to_fun</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>Then we can have <code>f.support = f.finite_support.to_finset</code>. We loose all definitional equalities about <code>f.support</code> but one can (almost) forget about constructive <code>finset</code>s when dealing with <code>α →₀ M₀</code>.</p>",
        "id": 231119604,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1616213007
    },
    {
        "content": "<p>I don't think we can remove any of the decidable_eq assumptions that were added in that PR</p>",
        "id": 231119661,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616213071
    },
    {
        "content": "<p><code>finsupp</code> is already classical</p>",
        "id": 231119666,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616213081
    },
    {
        "content": "<p>It's classical but it has some data besides <code>to_fun</code>.</p>",
        "id": 231119678,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1616213110
    },
    {
        "content": "<p>the issue is that <code>support</code> returns a <code>finset</code>, and <code>finset</code> has operations that require decidable_eq</p>",
        "id": 231119679,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616213113
    },
    {
        "content": "<p>If you don't want decidable_eq assumptions, don't make reference to these finset ops</p>",
        "id": 231119702,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616213144
    },
    {
        "content": "<p>that can be done by using sets instead of finsets, or making noncomputable finset ops</p>",
        "id": 231119752,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616213169
    },
    {
        "content": "<p>I had a second look at your PR. Indeed in most (all?) cases we can't avoid these <code>[decidable_eq]</code> assumptions.</p>",
        "id": 231119806,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1616213255
    },
    {
        "content": "<p>(all) indeed. They were found by removing the <code>open_locale classical</code> at the top of the file and looking for theorems whose statements don't typecheck</p>",
        "id": 231119866,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616213299
    },
    {
        "content": "<p>Then ignore my suggestion (at least for now).</p>",
        "id": 231119912,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1616213332
    }
]