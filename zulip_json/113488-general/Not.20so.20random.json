[
    {
        "content": "<p>If you run this file from the command line</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">control.random</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">io</span> <span class=\"n\">list</span> <span class=\"n\">nat</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">rand_nat'</span> <span class=\"o\">(</span><span class=\"n\">lo</span> <span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">rand</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">seed</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">rand_nat</span> <span class=\"n\">seed.down</span> <span class=\"n\">lo</span> <span class=\"n\">hi</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">id</span> <span class=\"n\">ulift.up</span><span class=\"o\">⟩</span>\n\n<span class=\"sd\">/-- Runs the program. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">main</span> <span class=\"o\">:</span> <span class=\"n\">io</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">l</span> <span class=\"bp\">←</span> <span class=\"n\">mmap</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">io.run_rand</span> <span class=\"o\">(</span><span class=\"n\">rand_nat'</span> <span class=\"mi\">0</span> <span class=\"mi\">10</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"mi\">10</span><span class=\"o\">),</span>\n  <span class=\"n\">print_ln</span> <span class=\"n\">l</span>\n</code></pre></div>\n<p>you always get the same result. This looks like Lean gets the same seed from the system over and over again.</p>",
        "id": 268205187,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1642365076
    },
    {
        "content": "<p>If you don't do <a href=\"https://leanprover-community.github.io/mathlib_docs/find/io.set_rand_gen\">docs#io.set_rand_gen</a>, it uses C++'s <code>std::rand</code>, I guess seeded automatically by <code>std::srand(1)</code> (the vm never calls <code>std::srand</code> itself).</p>\n<p>You can use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/mk_std_gen\">docs#mk_std_gen</a> to create seeded random number generators, but then it will use a pseudorandom number generator written in Lean.</p>\n<p>It's pretty common for languages to have pseudorandom number generators that are seeded with a constant unless you seed it yourself. (Long ago I remember typing <code>randomize timer</code> in QBasic, to use the current time as a seed.)</p>",
        "id": 268205800,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1642365937
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113488-general/topic/Not.20so.20random/near/268205800\">said</a>:</p>\n<blockquote>\n<p>(Long ago I remember typing <code>randomize timer</code> in QBasic, to use the current time as a seed.)</p>\n</blockquote>\n<p>Ha, me too!</p>",
        "id": 268205850,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1642365970
    },
    {
        "content": "<p>00's kids ...</p>",
        "id": 268205874,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1642366030
    },
    {
        "content": "<p>I know about <code>mk_std_gen</code>, and running it from the command line was my attempt to not get the same seed over and over again.</p>",
        "id": 268205880,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1642366051
    },
    {
        "content": "<p>Is there really no way to get nondeterminism?</p>",
        "id": 268206128,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1642366346
    },
    {
        "content": "<p>There's nothing in the vm that calls <code>std::srand</code>, so not using the C++ generator.</p>",
        "id": 268206214,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1642366460
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113488-general/topic/Not.20so.20random/near/268205800\">said</a>:</p>\n<blockquote>\n<p>If you don't do <a href=\"https://leanprover-community.github.io/mathlib_docs/find/io.set_rand_gen\">docs#io.set_rand_gen</a>, it uses C++'s <code>std::rand</code>, I guess seeded automatically by <code>std::srand(1)</code> (the vm never calls <code>std::srand</code> itself).</p>\n<p>You can use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/mk_std_gen\">docs#mk_std_gen</a> to create seeded random number generators, but then it will use a pseudorandom number generator written in Lean.</p>\n<p>It's pretty common for languages to have pseudorandom number generators that are seeded with a constant unless you seed it yourself. (Long ago I remember typing <code>randomize timer</code> in QBasic, to use the current time as a seed.)</p>\n</blockquote>\n<p>Is this true? <code>io.run_rand</code> uses <code>mk_generator</code> which says it seeds a random number generator, and the seed is generated using the instance of <code>monad_io_random</code></p>",
        "id": 268206332,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1642366624
    },
    {
        "content": "<p>And that instance is implemented in C++, with the <code>rand</code> part of it depending on <code>std::rand()</code></p>",
        "id": 268206440,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1642366779
    },
    {
        "content": "<p><code>io.run_rand</code> does do <code>mk_std_gen</code> for you, using whatever the current random generator is for a seed. If you didn't do <code>io.set_rand_gen</code>, it's the unseeded <code>std::rand</code>.</p>",
        "id": 268206672,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1642366954
    },
    {
        "content": "<p>At least, this is all how I've understood the code. The key part for the behavior of <code>set_rand_gen</code> is <a href=\"https://github.com/leanprover-community/lean/blob/master/src/library/vm/vm_io.cpp#L904\">https://github.com/leanprover-community/lean/blob/master/src/library/vm/vm_io.cpp#L904</a></p>",
        "id": 268206785,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1642367103
    },
    {
        "content": "<p>(<code>is_simple</code> checks that the object is not a pointer.)</p>",
        "id": 268206869,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1642367202
    },
    {
        "content": "<p>Ah I see, I was also looking at the same bit of code, but I didn't know about the behaviour of <code>std::rand</code> before seeding occurred. I agree with you!</p>",
        "id": 268207056,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1642367420
    },
    {
        "content": "<p>I guess there's no way to get the current time in Lean?</p>\n<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> I don't see a good cross-platform way to seed the random number generator and get nondeterminism. It looks like you can (1) run a program that reports the time and then capture the standard output, (2) <a href=\"https://leanprover-community.github.io/mathlib_docs/find/io.net.connect\">docs#io.net.connect</a> to some random host for HTTP and rely on the headers containing a timestamp, so you can hash the response to get a seed(!), (3) have a file containing a seed that Lean reads, and by alternative means you update it each time you run lean, or (4) patch lean to have a function that gives the current time.</p>",
        "id": 268207519,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1642368101
    },
    {
        "content": "<p>I was expecting such a timer function to already exist.</p>",
        "id": 268207836,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1642368432
    },
    {
        "content": "<p>It looks like in Lean 4 you can look forward to <code>io.get_random_bytes</code>, which uses <code>/dev/urandom</code> on Linux and <a href=\"https://docs.microsoft.com/en-us/windows/win32/api/bcrypt/nf-bcrypt-bcryptgenrandom\">BCryptGenRandom</a> on Windows.</p>",
        "id": 268207893,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1642368491
    },
    {
        "content": "<p>I wonder if we can use <code>io.read</code> to get bytes from <code>/dev/urandom</code> already in Lean 3?</p>",
        "id": 268208900,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1642369810
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span> Yeah, certainly, it's just not cross-platform</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">control.random</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">io</span> <span class=\"n\">list</span> <span class=\"n\">nat</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">rand_bytes</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">io</span> <span class=\"o\">(</span><span class=\"n\">buffer</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">h</span> <span class=\"bp\">←</span> <span class=\"n\">mk_file_handle</span> <span class=\"s2\">\"/dev/urandom\"</span> <span class=\"n\">mode.read</span> <span class=\"n\">tt</span><span class=\"o\">,</span>\n  <span class=\"n\">chrs</span> <span class=\"bp\">←</span> <span class=\"n\">io.fs.read</span> <span class=\"n\">h</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">when</span> <span class=\"o\">(</span><span class=\"n\">chrs.size</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">$</span> <span class=\"n\">io.fail</span> <span class=\"s2\">\"did not read enough bytes of randomness\"</span><span class=\"o\">,</span>\n  <span class=\"n\">pure</span> <span class=\"bp\">$</span> <span class=\"n\">chrs.map</span> <span class=\"n\">char.val</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">rand_seed</span> <span class=\"o\">:</span> <span class=\"n\">io</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">bytes</span> <span class=\"bp\">←</span> <span class=\"n\">rand_bytes</span> <span class=\"mi\">8</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">seed</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">bytes.foldl</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"mi\">256</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">),</span>\n  <span class=\"n\">set_rand_gen</span> <span class=\"bp\">$</span> <span class=\"n\">mk_std_gen</span> <span class=\"n\">seed</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">rand_nat'</span> <span class=\"o\">(</span><span class=\"n\">lo</span> <span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">rand</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">seed</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">rand_nat</span> <span class=\"n\">seed.down</span> <span class=\"n\">lo</span> <span class=\"n\">hi</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">id</span> <span class=\"n\">ulift.up</span><span class=\"o\">⟩</span>\n\n<span class=\"sd\">/-- Runs the program. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">main</span> <span class=\"o\">:</span> <span class=\"n\">io</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">rand_seed</span><span class=\"o\">,</span>\n  <span class=\"n\">l</span> <span class=\"bp\">←</span> <span class=\"n\">mmap</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">io.run_rand</span> <span class=\"o\">(</span><span class=\"n\">rand_nat'</span> <span class=\"mi\">0</span> <span class=\"mi\">10</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"mi\">10</span><span class=\"o\">),</span>\n  <span class=\"n\">print_ln</span> <span class=\"n\">l</span>\n</code></pre></div>",
        "id": 268213172,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1642375628
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> Since you mentioned that running from the command line was an attempted workaround, then for one of the many things it might be a workaround for I thought I'd mention that <code>#eval</code> runs IO actions.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"n\">set_rand_gen</span> <span class=\"bp\">$</span> <span class=\"n\">mk_std_gen</span> <span class=\"mi\">37</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">io.rand</span> <span class=\"mi\">0</span> <span class=\"mi\">5</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">print_ln</span>\n<span class=\"k\">#eval</span> <span class=\"n\">io.rand</span> <span class=\"mi\">0</span> <span class=\"mi\">5</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">print_ln</span>\n<span class=\"k\">#eval</span> <span class=\"n\">io.rand</span> <span class=\"mi\">0</span> <span class=\"mi\">5</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">print_ln</span>\n</code></pre></div>",
        "id": 268302243,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1642443918
    },
    {
        "content": "<p>Oh, very cool! And it's also much faster than running it from the command line.</p>",
        "id": 268302343,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1642443977
    }
]