[
    {
        "content": "<p>For the perfectoid project we need gadgets of the form <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Γ</mi><mo>∪</mo><mo stretchy=\"false\">{</mo><mn>0</mn><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\Gamma \\cup \\{0\\}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">Γ</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∪</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\">0</span><span class=\"mclose\">}</span></span></span></span>, and we formalised this using a type class <code>group_with_zero</code>. Examples are (i) fields and division rings, (ii) <code>nnreal</code>, (iii) <code>with_zero G</code> for any group <code>G</code>.</p>\n<p>It would be very helpful if we could inject this structure below <code>field</code> in the algebraic hierarchy. What is the best way to do this? Should I make a PR to core lean? Can this be done without touching core? Should fields be moved out of core to mathlib?</p>",
        "id": 191599493,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585051277
    },
    {
        "content": "<p>Would it suffice to have a typeclass instance?</p>",
        "id": 191600159,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585051849
    },
    {
        "content": "<p><code>instance [field F] : group_with_zero F := ...</code></p>",
        "id": 191600169,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585051863
    },
    {
        "content": "<p>(also, I think this should assume <code>division_ring</code> instead, no? <code>field</code> would give you a <code>comm_group_with_zero</code>)</p>",
        "id": 191600278,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585051941
    },
    {
        "content": "<p>Yes, <code>division_ring</code> is better.</p>",
        "id": 191600308,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585051960
    },
    {
        "content": "<p>what are the axioms of <code>group_with_zero</code>?</p>",
        "id": 191600593,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585052157
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">class</span> <span class=\"n\">group_with_zero</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n  <span class=\"kn\">extends</span> <span class=\"n\">monoid</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">has_inv</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">zero_ne_one_class</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">mul_zero_class</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">[</span><span class=\"n\">has_decidable_eq</span> <span class=\"o\">:</span> <span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"o\">(</span><span class=\"n\">inv_zero</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">mul_inv_cancel</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 191600662,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585052182
    },
    {
        "content": "<p>The <code>decidable_eq</code> is an artifact</p>",
        "id": 191600682,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585052193
    },
    {
        "content": "<p>I forget where we ended up regarding <code>decidable_eq</code> for <code>division_ring</code></p>",
        "id": 191600730,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585052233
    },
    {
        "content": "<p>I think we just use classical logic, in which case it would be consistent to do the same here</p>",
        "id": 191600781,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585052266
    },
    {
        "content": "<p>Yes, this is old code</p>",
        "id": 191600912,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585052336
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> The reason that it would be really nice to inject it below <code>division_ring</code> is that lemmas like <code>inv_zero</code> could have a nice name and work for both of the cases. Currently we need to use <code>group_with_zero.inv_zero</code> because the assumptions on <code>inv_zero</code> are \"too strong\".</p>",
        "id": 191601959,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585053067
    },
    {
        "content": "<p>meh, that's already done in core in a few places</p>",
        "id": 191602003,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585053098
    },
    {
        "content": "<p>Idem dito for</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">mul_inv_cancel&#39;</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"n\">group_with_zero</span><span class=\"bp\">.</span><span class=\"n\">mul_inv_cancel</span> <span class=\"n\">a</span> <span class=\"n\">h</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">mul_inv_cancel_assoc_left</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"k\">calc</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">mul_assoc</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span>\n               <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>             <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">mul_inv_cancel_assoc_right</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"k\">calc</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">mul_assoc</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n               <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">b</span>             <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">inv_ne_zero&#39;</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">assume</span> <span class=\"n\">a_eq_0</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">a_eq_0</span><span class=\"o\">]</span> <span class=\"kn\">using</span> <span class=\"n\">mul_inv_cancel&#39;</span> <span class=\"n\">a</span> <span class=\"n\">h</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">inv_mul_cancel&#39;</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">calc</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹⁻¹</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">inv_ne_zero&#39;</span> <span class=\"bp\">_</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n         <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹⁻¹</span>             <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n         <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>                       <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">inv_ne_zero&#39;</span> <span class=\"bp\">_</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">inv_mul_cancel_assoc_left</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"k\">calc</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">mul_assoc</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span>\n               <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>             <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">inv_mul_cancel_assoc_right</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"k\">calc</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">mul_assoc</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n               <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">b</span>             <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n</pre></div>",
        "id": 191602009,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585053101
    },
    {
        "content": "<p>for example most of the <code>division_ring</code> lemmas have namespace <code>division_ring</code> because they conflict with group lemmas</p>",
        "id": 191602031,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585053120
    },
    {
        "content": "<p>Is there a reason why <code>field</code> and <code>division_ring</code> should stay in core?</p>",
        "id": 191602076,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585053124
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/group.20with.20zero/near/191602031\" title=\"#narrow/stream/113488-general/topic/group.20with.20zero/near/191602031\">said</a>:</p>\n<blockquote>\n<p>for example most of the <code>division_ring</code> lemmas have namespace <code>division_ring</code> because they conflict with group lemmas</p>\n</blockquote>\n<p>Right, and now we'll have a third conflict. Why not reduce them?</p>",
        "id": 191602107,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585053151
    },
    {
        "content": "<p><code>mk0</code> will also be duplicated.</p>",
        "id": 191607630,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585056031
    },
    {
        "content": "<p>Although that one is in mathlib. So we could deduplicate, I guess.</p>",
        "id": 191607685,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585056056
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/group.20with.20zero/near/191602107\" title=\"#narrow/stream/113488-general/topic/group.20with.20zero/near/191602107\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/group.20with.20zero/near/191602031\" title=\"#narrow/stream/113488-general/topic/group.20with.20zero/near/191602031\">said</a>:</p>\n<blockquote>\n<p>for example most of the <code>division_ring</code> lemmas have namespace <code>division_ring</code> because they conflict with group lemmas</p>\n</blockquote>\n<p>Right, and now we'll have a third conflict. Why not reduce them?</p>\n</blockquote>\n<p>I don't think there will be a third conflict. For lemmas about division there are two kinds -- those that work under no assumptions about zero-ness (perhaps because they are theorems about monoids or groups, which don't have a zero) and those which have explicit assumptions that something has to be non-zero. The group ones v the field ones, basically.</p>\n<p>In fact can you just load all the group_with_zero lemmas into <code>monoid</code> but just ask for the typeclass <code>with_zero</code> on your monoid, and also <code>with_inv</code> if you want it to be a group with 0. How many of them work with that set-up?</p>",
        "id": 191610484,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585057345
    },
    {
        "content": "<p>I meant a third naming conflict.</p>",
        "id": 191612112,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585058061
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> We will get two definitions of <code>has_div</code> on division rings...</p>",
        "id": 191634786,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585066664
    },
    {
        "content": "<p>that are defeq?</p>",
        "id": 191634884,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585066689
    },
    {
        "content": "<p>You can't just do some old structure command magic?</p>",
        "id": 191635919,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585067050
    },
    {
        "content": "<p>The fields of the has_div structure are defeq</p>",
        "id": 191636094,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585067132
    },
    {
        "content": "<p>But that's not good enough, right?</p>",
        "id": 191636156,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585067150
    },
    {
        "content": "<p>What is the reason that we try to keep fields in core?</p>",
        "id": 191636269,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585067174
    },
    {
        "content": "<p>I understand that <code>nat</code> has to be in core. And hence <code>add_monoid</code> must be in core. But everything starting from rings and beyond?? Could go in mathlib, I think.</p>",
        "id": 191636384,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585067214
    },
    {
        "content": "<p><code>nat</code> is a <code>linear_ordered_semiring</code>. Not sure if core needs to know about this.</p>",
        "id": 191636700,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585067317
    },
    {
        "content": "<p>My impression from <a href=\"#narrow/stream/113488-general/topic/3.2E7.20and.20maths\" title=\"#narrow/stream/113488-general/topic/3.2E7.20and.20maths\">this thread</a> is that it's not a big deal to move stuff out of core now and indeed might be a good idea given that Lean 4 core will have much less math. If there's some consensus on what should be done, I'd be happy to help out too.</p>",
        "id": 191638154,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1585067871
    },
    {
        "content": "<p><code>ring</code> is to <code>monoid</code> as <code>division_ring</code> is to <code>group_with_zero</code> as <code>comm_ring</code> is to <code>comm_monoid</code> as <code>field</code> is to <code>comm_group_with_zero</code>. This makes it sound like all of them are fundamental. Johan has just basically discovered a fundamental structure which is often ignored by mathematicians but which is helpful for formalisation.</p>",
        "id": 191653013,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585074253
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110193\">@Cyril Cohen</span> have you ever heard of a group with 0? Could you just drop them into Coq's algebra heirarchy without any difficulty?</p>",
        "id": 191653256,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585074362
    },
    {
        "content": "<p>There isn't any problem adding a new element in the middle of the hierarchy later, you just add a couple instances and that's it</p>",
        "id": 191653399,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585074422
    },
    {
        "content": "<p>The main reason you might not want to do this is because some theorems will generalize and there will be duplication there</p>",
        "id": 191653537,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585074488
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> So you say it's not a problem that there are two paths to <code>has_div</code>?</p>",
        "id": 191653818,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585074631
    },
    {
        "content": "<p>not if they are defeq</p>",
        "id": 191653835,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585074642
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">div</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group_with_zero</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">g</span> <span class=\"bp\">*</span> <span class=\"n\">h</span><span class=\"bp\">⁻¹</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">- The division operation on a group with zero element. -/</span>\n<span class=\"kn\">instance</span> <span class=\"n\">group_with_zero</span><span class=\"bp\">.</span><span class=\"n\">has_div</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group_with_zero</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">has_div</span> <span class=\"n\">G</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">div</span><span class=\"bp\">⟩</span>\n</pre></div>",
        "id": 191653842,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585074646
    },
    {
        "content": "<p>And exactly the same definition exists for division rings in core.</p>",
        "id": 191653870,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585074663
    },
    {
        "content": "<p>What's the definition in core?</p>",
        "id": 191653872,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585074663
    },
    {
        "content": "<p>Also, the \"some theorems\" turn out to be several hundreds lines of duplication...</p>",
        "id": 191654000,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585074725
    },
    {
        "content": "<p>I think the definition in core could be generalized to a <code>has_mul</code> <code>has_inv</code></p>",
        "id": 191654001,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585074725
    },
    {
        "content": "<p>well, that's expensive...</p>",
        "id": 191654089,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585074773
    },
    {
        "content": "<p>What do you think of taking all of it out of core and putting it in mathlib?</p>",
        "id": 191654154,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585074807
    },
    {
        "content": "<p>It is used by <code>tactic.norm_num</code></p>",
        "id": 191654189,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585074824
    },
    {
        "content": "<p>and possibly some bits of algebraic normalizer that no one has touched in years</p>",
        "id": 191654287,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585074861
    },
    {
        "content": "<p>What? <code>division_rings</code> are used in core?</p>",
        "id": 191654329,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585074882
    },
    {
        "content": "<p>But can't we move the stuff that uses it to mathlib as well?</p>",
        "id": 191654365,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585074898
    },
    {
        "content": "<p>I can't imagine that there is <code>C++</code> code that depends on <code>division_ring</code></p>",
        "id": 191654401,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585074912
    },
    {
        "content": "<p>there is</p>",
        "id": 191654582,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585075005
    },
    {
        "content": "<p>Oooh, wow</p>",
        "id": 191654602,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585075015
    },
    {
        "content": "<p>There are examples of using <code>norm_num</code> to do numeric simplification in fields</p>",
        "id": 191654645,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585075040
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean/blob/master/src/library/norm_num.cpp#L380-L390\" target=\"_blank\" title=\"https://github.com/leanprover-community/lean/blob/master/src/library/norm_num.cpp#L380-L390\">this bit of C++</a> uses <a href=\"https://github.com/leanprover-community/lean/blob/master/library/init/algebra/norm_num.lean#L105-L107\" target=\"_blank\" title=\"https://github.com/leanprover-community/lean/blob/master/library/init/algebra/norm_num.lean#L105-L107\">this theorem about fields</a></p>",
        "id": 191655184,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585075316
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/2240\" title=\"https://github.com/leanprover-community/mathlib/issues/2240\">#2240</a></p>",
        "id": 191722607,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585130756
    },
    {
        "content": "<p>Monoids with zero appear in some approaches to \"the field with one element\" (see 2.1.1 on page 12 of <a href=\"https://arxiv.org/abs/1801.05337\" title=\"https://arxiv.org/abs/1801.05337\">\"F_1 for everyone\"</a>). (I found this stuff via <a href=\"https://arxiv.org/abs/1809.03542\" title=\"https://arxiv.org/abs/1809.03542\">a paper by Baker and Lorscheid</a> about the moduli spaces of matroids.)</p>",
        "id": 191725305,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1585132247
    },
    {
        "content": "<p>By the way, what happened to your matroid formalization? Was it ever PR'ed to mathlib?</p>",
        "id": 191725501,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585132358
    },
    {
        "content": "<p>It's still pending some big refactor. I'm still not happy with the way I deal with submatroids.</p>",
        "id": 191725665,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1585132453
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span> In <code>group_with_zero</code> I require that <code>0 ≠ 1</code>. Should that also be done for <code>monoid_with_zero</code>?</p>",
        "id": 191725860,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585132554
    },
    {
        "content": "<p>It seems that the page you linked to doesn't want that requirement.</p>",
        "id": 191725953,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585132594
    },
    {
        "content": "<p>But it would be satisfied by <code>F_1</code></p>",
        "id": 191725983,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585132613
    },
    {
        "content": "<blockquote>\n<p>Should that also be done for <code>monoid_with_zero</code>?</p>\n</blockquote>\n<p>Hmm, I'm not sure. I think ease of doing things in Lean would be most important here, and I don't have enough experience with algebra to say.</p>",
        "id": 191727399,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1585133331
    },
    {
        "content": "<p>Chapter 3 of <a href=\"http://oliver.impa.br/2018-Blueprints/versions/lecturenotes180521.pdf\" title=\"http://oliver.impa.br/2018-Blueprints/versions/lecturenotes180521.pdf\">Lorscheid's lecture notes \"Blueprints and tropical scheme theory\"</a> does algebra over monoids with zero, including prime ideals and localization.</p>",
        "id": 191730534,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1585135183
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span> Thanks. I can try to refactor to include <code>monoid_with_zero</code> in the hierarchy.</p>",
        "id": 191731064,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585135556
    },
    {
        "content": "<p>Then you can start on diistrib_with_zero</p>",
        "id": 191732651,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585136538
    },
    {
        "content": "<p>Asking if 0 ne 1 feels a bit like asking if the zero ring is a field</p>",
        "id": 191732735,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585136596
    },
    {
        "content": "<p>But my instincts are not helping. I guess the idea is that we should just concentrate on the objects which are of use to us, and for group_with_zero we definitely want 0 ne 1 because I don't want to the zero ring to have any valuations</p>",
        "id": 191732923,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585136733
    },
    {
        "content": "<p>For monoid_with_zero I don't think I care -- the issue is simply what people need. I guess if you don't assume it then you can prove that every ring is a monoid with 0</p>",
        "id": 191734031,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585137540
    },
    {
        "content": "<p>So this seems natural.</p>",
        "id": 191734049,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585137553
    },
    {
        "content": "<p>So... I changed some things, and now I get this build error</p>\n<div class=\"codehilite\"><pre><span></span>mathlib/src/data/complex/basic.lean:28:4: error: definition &#39;of_real&#39; is noncomputable, it depends on &#39;real.division_ring&#39;\n</pre></div>",
        "id": 191758987,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585148808
    },
    {
        "content": "<p>But as far as I know, I didn't change the computability of anything</p>",
        "id": 191759026,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585148825
    },
    {
        "content": "<p>How do I debug this issue?</p>",
        "id": 191759059,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585148839
    },
    {
        "content": "<p>I think it pulls in the wrong type class instance somewhere.  I'd add noncomputable to <code>of_real</code> and then stare at the term with <code>pp.all</code> enabled.  Is this in the PR that you've just closed?</p>",
        "id": 191763354,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1585150137
    },
    {
        "content": "<p>Let me try.</p>",
        "id": 191763421,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585150159
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">noncomputable</span> <span class=\"n\">def</span> <span class=\"n\">complex</span><span class=\"bp\">.</span><span class=\"n\">of_real</span> <span class=\"o\">:</span> <span class=\"n\">real</span> <span class=\"bp\">→</span> <span class=\"n\">complex</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">real</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span><span class=\"n\">re</span> <span class=\"o\">:=</span> <span class=\"n\">r</span><span class=\"o\">,</span>\n   <span class=\"n\">im</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">has_zero</span><span class=\"bp\">.</span><span class=\"n\">zero</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">real</span>\n           <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">no_zero_divisors</span><span class=\"bp\">.</span><span class=\"n\">to_has_zero</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">real</span>\n              <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">gwz</span><span class=\"bp\">.</span><span class=\"n\">no_zero_divisors</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">real</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">division_ring</span><span class=\"bp\">.</span><span class=\"n\">to_group_with_zero</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">real</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">division_ring</span><span class=\"o\">)))}</span>\n</pre></div>",
        "id": 191763994,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585150363
    },
    {
        "content": "<p>So, it's now using this <code>group_with_zero</code> stuff</p>",
        "id": 191764041,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585150376
    },
    {
        "content": "<p>Hmm, I guess I should lower some instance priorities?</p>",
        "id": 191764205,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585150433
    },
    {
        "content": "<p>We've had similar problems when we removed the <code>decidable_eq</code> parent from fields.</p>",
        "id": 191764376,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1585150488
    },
    {
        "content": "<p>The problem there was that every field with decidable equality is a Euclidean ring (and every Euclidean ring is a ring, etc.).  But if you use this instance with <code>open_locale classical</code>, then you get instances using classical decidability.  And suddenly multiplication is noncomputable.</p>",
        "id": 191764748,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1585150623
    },
    {
        "content": "<p>I've put low priority on that instance and it seems to work.</p>",
        "id": 191764823,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1585150654
    },
    {
        "content": "<p>Ok, this can be a bit subtle.  I lowered the priority of <code>euclidean_domain.to_nonzero_comm_ring</code> instead: <a href=\"https://github.com/leanprover-community/mathlib/blob/e719f8ee3b0de0f02e3e32ff2a196f9703b63083/src/algebra/euclidean_domain.lean#L14\" title=\"https://github.com/leanprover-community/mathlib/blob/e719f8ee3b0de0f02e3e32ff2a196f9703b63083/src/algebra/euclidean_domain.lean#L14\">https://github.com/leanprover-community/mathlib/blob/e719f8ee3b0de0f02e3e32ff2a196f9703b63083/src/algebra/euclidean_domain.lean#L14</a></p>",
        "id": 191765112,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1585150748
    },
    {
        "content": "<p>Ok, I've lowered some priorities. Let's see what happens</p>",
        "id": 191765363,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585150819
    },
    {
        "content": "<p>Do you know which one of the instances is noncomputable?  They all seem fine to me.</p>",
        "id": 191766941,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1585151338
    },
    {
        "content": "<p>I have no clue</p>",
        "id": 191767024,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585151370
    },
    {
        "content": "<p>But lowering the priorities helped</p>",
        "id": 191767050,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585151378
    },
    {
        "content": "<p>That said, both <code>no_zero_divisors.to_has_zero</code> and <code>gwz.no_zero_divisors</code> should have a lower priority.  I believe <code>#lint</code> should complain.</p>",
        "id": 191767058,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1585151381
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span> I've factored out monoid with zero. But I didn't prove many lemmas for them.</p>",
        "id": 191812040,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585170909
    },
    {
        "content": "<p>OK, thanks! To be quite honest the algebraic hierarchy intimidates me still so I don't know that I'll have any intelligent comments on your code.</p>",
        "id": 191812501,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1585171167
    }
]