[
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/mathlib/pull/13089\">#13089</a> I'm adding</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">subtype.decidable_le</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"bp\">@</span><span class=\"n\">decidable_rel</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">≤</span><span class=\"o\">)]</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"bp\">@</span><span class=\"n\">decidable_rel</span> <span class=\"o\">(</span><span class=\"n\">subtype</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">≤</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">decidable_of_iff</span> <span class=\"n\">_</span> <span class=\"n\">subtype.coe_le_coe</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">subtype.decidable_lt</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"bp\">@</span><span class=\"n\">decidable_rel</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">&lt;</span><span class=\"o\">)]</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"bp\">@</span><span class=\"n\">decidable_rel</span> <span class=\"o\">(</span><span class=\"n\">subtype</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">&lt;</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">decidable_of_iff</span> <span class=\"n\">_</span> <span class=\"n\">subtype.coe_lt_coe</span>\n</code></pre></div>\n<p>This breaks stuff because we also have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">subtype.linear_order</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_order</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">linear_order</span> <span class=\"o\">(</span><span class=\"n\">subtype</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">decidable_eq</span> <span class=\"o\">:=</span> <span class=\"n\">subtype.decidable_eq</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span> <span class=\"n\">linear_order.lift</span> <span class=\"n\">coe</span> <span class=\"n\">subtype.coe_injective</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>which derives decidability differently. Is it okay if I simply turn this last one into</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">subtype.linear_order</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_order</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">linear_order</span> <span class=\"o\">(</span><span class=\"n\">subtype</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">decidable_eq</span> <span class=\"o\">:=</span> <span class=\"n\">subtype.decidable_eq</span><span class=\"o\">,</span>\n  <span class=\"n\">decidable_le</span> <span class=\"o\">:=</span> <span class=\"n\">subtype.decidable_le</span><span class=\"o\">,</span>\n  <span class=\"n\">decidable_lt</span> <span class=\"o\">:=</span> <span class=\"n\">subtype.decidable_lt</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span> <span class=\"n\">linear_order.lift</span> <span class=\"n\">coe</span> <span class=\"n\">subtype.coe_injective</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 277392611,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1648806442
    },
    {
        "content": "<p>Note that the <code>max_def</code>/<code>min_def</code> fields fail, but I can fix those easily.</p>",
        "id": 277392718,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1648806504
    },
    {
        "content": "<p>Yeah, it's fine to change that.<br>\nThis is exactly the reason why the <code>decidable_eq</code> field was given explicitly: to make other <code>decidable</code> proofs definitionally equal.</p>",
        "id": 277393363,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1648806827
    }
]