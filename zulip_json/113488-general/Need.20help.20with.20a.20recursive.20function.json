[
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"373970\">Aaron Bies</span> has marked this topic as unresolved.</p>",
        "id": 278228710,
        "sender_full_name": "Notification Bot",
        "timestamp": 1649366848
    },
    {
        "content": "<p>I'm afraid I'm stuck again,</p>\n<p>I tried to prove that <code>shift</code> always returns an odd number unless the input was 0, but I keep getting <code>unexpected occurrence of recursive function</code> and I don't know what it wants me to do.</p>\n<p>(I'm sorry this is a lot of code)</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>my code</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.int.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">shift</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">1</span> <span class=\"bp\">∧</span> <span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n    <span class=\"k\">then</span> <span class=\"k\">have</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n      <span class=\"kd\">begin</span>\n        <span class=\"n\">refine</span> <span class=\"n\">nat.div_lt_self</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"bp\">;</span>\n        <span class=\"n\">linarith</span><span class=\"o\">,</span>\n      <span class=\"kd\">end</span><span class=\"o\">,</span> <span class=\"n\">shift</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n    <span class=\"k\">else</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">shift_def</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">shift</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">1</span> <span class=\"bp\">∧</span> <span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"n\">shift</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"n\">shift</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">shift_base</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">1</span> <span class=\"bp\">∧</span> <span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">shift</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">shift_def</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">ite_eq_iff</span><span class=\"o\">,</span>\n  <span class=\"n\">right</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">shift_mul_2</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">shift</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">shift</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">shift_def</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">nlinarith</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h2</span><span class=\"o\">,</span> <span class=\"n\">shift_def</span><span class=\"o\">],</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"c1\">-- Error: unexpected occurrence of recursive function</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">shift_odd</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">shift</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">1</span> <span class=\"bp\">∧</span> <span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">cases</span> <span class=\"n\">hb</span> <span class=\"k\">with</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n    <span class=\"n\">right</span><span class=\"o\">,</span>\n\n    <span class=\"k\">let</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">nk</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n      <span class=\"k\">have</span> <span class=\"n\">kd</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">kd</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">nat.mul_div_cancel'</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">nat.dvd_iff_mod_eq_zero</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n    <span class=\"kd\">end</span><span class=\"o\">,</span>\n\n    <span class=\"c1\">-- aids the proof that recurion is well-founded</span>\n    <span class=\"k\">have</span> <span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n      <span class=\"n\">refine</span> <span class=\"n\">nat.div_lt_self</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">nlinarith</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nat.one_lt_bit0_iff</span><span class=\"o\">],</span> <span class=\"o\">}</span>\n    <span class=\"kd\">end</span><span class=\"o\">,</span>\n\n    <span class=\"n\">simp</span> <span class=\"bp\">*</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n\n    <span class=\"c1\">-- recursion happens here</span>\n    <span class=\"k\">have</span> <span class=\"n\">rec</span> <span class=\"o\">:=</span> <span class=\"n\">shift_odd</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">or_iff_not_imp_left</span> <span class=\"n\">at</span> <span class=\"n\">rec</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">shift_mul_2</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">rec</span><span class=\"o\">,</span>\n\n    <span class=\"n\">linarith</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span> <span class=\"o\">{</span>\n    <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">shift_base</span> <span class=\"n\">n</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">finish</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n</div></div>",
        "id": 278228726,
        "sender_full_name": "Aaron Bies",
        "timestamp": 1649366860
    },
    {
        "content": "<p>I suspect <code>finish</code> is using the lemma itself for the same <code>n</code></p>",
        "id": 278229612,
        "sender_full_name": "Reid Barton",
        "timestamp": 1649367335
    },
    {
        "content": "<p>There might be similar issues with <code>simp * at *</code></p>",
        "id": 278229726,
        "sender_full_name": "Reid Barton",
        "timestamp": 1649367401
    },
    {
        "content": "<p>Those are good points</p>",
        "id": 278230213,
        "sender_full_name": "Aaron Bies",
        "timestamp": 1649367722
    },
    {
        "content": "<p>I never really understood how to mix the equation compiler and tactic proofs, personally I think it's easier to go about it this way:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">shift_odd</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">shift</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">nat.strong_induction_on</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">intros</span> <span class=\"n\">n</span> <span class=\"n\">rec</span><span class=\"o\">,</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">1</span> <span class=\"bp\">∧</span> <span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">cases</span> <span class=\"n\">hb</span> <span class=\"k\">with</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n    <span class=\"n\">right</span><span class=\"o\">,</span>\n\n    <span class=\"k\">let</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">nk</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n      <span class=\"k\">have</span> <span class=\"n\">kd</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">kd</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">nat.mul_div_cancel'</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">nat.dvd_iff_mod_eq_zero</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n    <span class=\"kd\">end</span><span class=\"o\">,</span>\n\n    <span class=\"c1\">-- aids the proof that recurion is well-founded</span>\n    <span class=\"k\">have</span> <span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n      <span class=\"n\">refine</span> <span class=\"n\">nat.div_lt_self</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">nlinarith</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nat.one_lt_bit0_iff</span><span class=\"o\">],</span> <span class=\"o\">}</span>\n    <span class=\"kd\">end</span><span class=\"o\">,</span>\n\n    <span class=\"n\">specialize</span> <span class=\"n\">rec</span> <span class=\"n\">k</span> <span class=\"n\">term</span><span class=\"o\">,</span>\n\n    <span class=\"n\">simp</span> <span class=\"bp\">*</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n\n    <span class=\"c1\">-- recursion happens here</span>\n    <span class=\"n\">rw</span> <span class=\"n\">or_iff_not_imp_left</span> <span class=\"n\">at</span> <span class=\"n\">rec</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">shift_mul_2</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">rec</span><span class=\"o\">,</span>\n\n    <span class=\"n\">linarith</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span> <span class=\"o\">{</span>\n    <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">shift_base</span> <span class=\"n\">n</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"gr\">sorry</span> <span class=\"c1\">-- obviously follows from hb somehow</span>\n  <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 278230285,
        "sender_full_name": "Reid Barton",
        "timestamp": 1649367758
    },
    {
        "content": "<p>oooh I was not aware of <code>nat.strong_induction_on</code></p>",
        "id": 278230814,
        "sender_full_name": "Aaron Bies",
        "timestamp": 1649368093
    },
    {
        "content": "<p>Thank you very much!</p>",
        "id": 278230827,
        "sender_full_name": "Aaron Bies",
        "timestamp": 1649368103
    },
    {
        "content": "<p><code>induction n using nat.binary_rec</code> might yield a shorter proof, but I haven't tried</p>",
        "id": 278231122,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649368306
    }
]