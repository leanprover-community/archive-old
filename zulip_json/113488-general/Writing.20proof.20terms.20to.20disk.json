[
    {
        "content": "<p>Is there a command I could use to write a proof term to disk? Something like #print, but where I could specify a file where to write the term.</p>",
        "id": 179014307,
        "sender_full_name": "John Tristan",
        "timestamp": 1571966227
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110111\">@Keeley Hoek</span>?</p>",
        "id": 179014515,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1571966491
    },
    {
        "content": "<p>I take it putting <code>#print some_term</code> at the end of <code>some_file.lean</code> and running <code>lean some_file.lean &gt; output_file</code> from the command line won't do for some reason?</p>",
        "id": 179014874,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1571967064
    },
    {
        "content": "<p>I have zero experience with programming in Lean, but I bet someone could rig something together following <a href=\"https://github.com/leanprover-community/lean/blob/master/leanpkg/leanpkg/main.lean#L10\" target=\"_blank\" title=\"https://github.com/leanprover-community/lean/blob/master/leanpkg/leanpkg/main.lean#L10\">this</a> function from <code>leanpkg</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">system</span><span class=\"bp\">.</span><span class=\"n\">io</span>\n\n<span class=\"n\">def</span> <span class=\"n\">write_file</span> <span class=\"o\">(</span><span class=\"n\">fn</span> <span class=\"o\">:</span> <span class=\"n\">string</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">cnts</span> <span class=\"o\">:</span> <span class=\"n\">string</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">mode</span> <span class=\"o\">:=</span> <span class=\"n\">io</span><span class=\"bp\">.</span><span class=\"n\">mode</span><span class=\"bp\">.</span><span class=\"n\">write</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">io</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span> <span class=\"n\">do</span>\n<span class=\"n\">h</span> <span class=\"err\">←</span> <span class=\"n\">io</span><span class=\"bp\">.</span><span class=\"n\">mk_file_handle</span> <span class=\"n\">fn</span> <span class=\"n\">io</span><span class=\"bp\">.</span><span class=\"n\">mode</span><span class=\"bp\">.</span><span class=\"n\">write</span><span class=\"o\">,</span>\n<span class=\"n\">io</span><span class=\"bp\">.</span><span class=\"n\">fs</span><span class=\"bp\">.</span><span class=\"n\">write</span> <span class=\"n\">h</span> <span class=\"n\">cnts</span><span class=\"bp\">.</span><span class=\"n\">to_char_buffer</span><span class=\"o\">,</span>\n<span class=\"n\">io</span><span class=\"bp\">.</span><span class=\"n\">fs</span><span class=\"bp\">.</span><span class=\"n\">close</span> <span class=\"n\">h</span>\n</pre></div>",
        "id": 179015010,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1571967275
    },
    {
        "content": "<p>It does work actually, thanks for the idea. In general, I might need to write different proof terms to different files so I don't know if this trick will always do it.</p>",
        "id": 179015028,
        "sender_full_name": "John Tristan",
        "timestamp": 1571967305
    },
    {
        "content": "<p>Following up on this is there a way to control the amount of inlining? Let me clarify with an example.<br>\nConsider the following snippet:</p>\n<p>/- start -/<br>\nopen nat</p>\n<p>def isEven(n : ℕ): Prop := ∃ k: ℕ, n = 2 * k</p>\n<p>def double(n: ℕ): ℕ := 2 * n </p>\n<p>lemma doubleIsEven: ∀ n: ℕ, isEven(double(n)) :=<br>\nbegin<br>\n    intros,<br>\n    unfold double,<br>\n    unfold isEven,<br>\n    existsi n,<br>\n    trivial,<br>\nend</p>\n<p>def P := doubleIsEven(2:nat)</p>\n<p>#print P<br>\n/- end -/</p>\n<p>It prints: <br>\ndef P : isEven (double 2) :=<br>\ndoubleIsEven 2</p>\n<p>But ideally, what I want is to print the term of doubleIsEven applied to 2 and beta reduced.<br>\nIs it something that I could do? Does it even make sense?</p>",
        "id": 179015317,
        "sender_full_name": "John Tristan",
        "timestamp": 1571967777
    },
    {
        "content": "<p>Maybe what you want is <code>#reduce P</code>?</p>",
        "id": 179015437,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1571967966
    },
    {
        "content": "<p>I actually gave it a try and I end up with the message \"Exists.intro 2 (eq.refl 4)\"</p>",
        "id": 179015486,
        "sender_full_name": "John Tristan",
        "timestamp": 1571968079
    },
    {
        "content": "<p>Yeah, I'm not sure how to get it to display the result with notation...</p>",
        "id": 179015619,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1571968232
    },
    {
        "content": "<p>If you put <code>set_option pp.implicit true</code> in the line before you get to see the implicit arguments to <code>Exists.intro</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"n\">Exists</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"bp\">ℕ</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"mi\">4</span> <span class=\"bp\">=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">mul</span> <span class=\"mi\">2</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"bp\">ℕ</span> <span class=\"mi\">4</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 179015778,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1571968469
    },
    {
        "content": "<p>Interesting, thank you</p>",
        "id": 179016109,
        "sender_full_name": "John Tristan",
        "timestamp": 1571968993
    },
    {
        "content": "<p>In community lean there are functions <code>io.serialize</code> and <code>io.deserialize</code> which write proof terms (actually, any <code>expr</code>) in lean's binary serial format to and from disk.</p>",
        "id": 179016939,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1571970278
    },
    {
        "content": "<p>That is, <a href=\"https://github.com/leanprover-community/lean\" target=\"_blank\" title=\"https://github.com/leanprover-community/lean\">https://github.com/leanprover-community/lean</a> lean 3.5.0c</p>",
        "id": 179016951,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1571970323
    },
    {
        "content": "<p>For big <code>expr</code>s you don't want to use anything else if you need to load them back in, because io buffer stuff in lean has abysmal performance</p>",
        "id": 179016997,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1571970371
    },
    {
        "content": "<p>But the original point of adding that was so big tactics like <code>omega</code> and (maybe <code>vampire</code>?, hopefully, eventually <code>rewrite_search</code>) could save their boring autogenerated proof of an easy fact, without having to recompute every time the library was compiled</p>",
        "id": 179017012,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1571970430
    },
    {
        "content": "<p>Thanks a lot!</p>",
        "id": 179017085,
        "sender_full_name": "John Tristan",
        "timestamp": 1571970568
    },
    {
        "content": "<p>No problem, no idea but just in case you're completely new to metaprogramming in lean you'll probably want to look at <code>environment.get</code> in core to obtain the <code>expr</code> underlying any declaration you ask for</p>",
        "id": 179017164,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1571970717
    },
    {
        "content": "<p>I am indeed completely to metaprogramming in lean, and very new to lean itself, so thanks for the tip!</p>",
        "id": 179017474,
        "sender_full_name": "John Tristan",
        "timestamp": 1571971269
    }
]