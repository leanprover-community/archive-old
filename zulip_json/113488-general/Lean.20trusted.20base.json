[
    {
        "content": "<p>Does anyone know if there is a breakdown of the Lean trusted base somewhere? As in, \"to trust your Lean code/proofs, you have to accept ...\", which is done for Coq in its wiki: <a href=\"https://github.com/coq/coq/wiki/Presentation#what-do-i-have-to-trust-when-i-see-a-proof-checked-by-coq\" target=\"_blank\" title=\"https://github.com/coq/coq/wiki/Presentation#what-do-i-have-to-trust-when-i-see-a-proof-checked-by-coq\">https://github.com/coq/coq/wiki/Presentation#what-do-i-have-to-trust-when-i-see-a-proof-checked-by-coq</a></p>\n<p>And is there anything similar to the Coq <code>Print Assumptions &lt;name&gt;.</code> command (<a href=\"https://coq.inria.fr/refman/proof-engine/vernacular-commands.html#coq:cmd.print-assumptions\" target=\"_blank\" title=\"https://coq.inria.fr/refman/proof-engine/vernacular-commands.html#coq:cmd.print-assumptions\">https://coq.inria.fr/refman/proof-engine/vernacular-commands.html#coq:cmd.print-assumptions</a>) in Lean?</p>",
        "id": 154966417,
        "sender_full_name": "Karl Palmskog",
        "timestamp": 1547264135
    },
    {
        "content": "<p>I'm sure others are more knowledgeable than me, but for the first question you might be interested in <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>'s paper on <a href=\"https://github.com/digama0/lean-type-theory/releases\" target=\"_blank\" title=\"https://github.com/digama0/lean-type-theory/releases\">the type theory of Lean</a> and <a href=\"https://github.com/leanprover/lean/blob/master/doc/faq.md\" target=\"_blank\" title=\"https://github.com/leanprover/lean/blob/master/doc/faq.md\">the 2nd to last question of the FAQ</a>.</p>\n<p>For the second question, does:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">axioms</span> <span class=\"bp\">&lt;</span><span class=\"n\">name</span><span class=\"bp\">&gt;</span>\n</pre></div>\n\n\n<p>give you what you want? There's also a <a href=\"https://github.com/leanprover/mathlib/blob/caa2076038e2d5a84fd05e9988fbe31d01a7f6ba/tactic/where.lean\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/blob/caa2076038e2d5a84fd05e9988fbe31d01a7f6ba/tactic/where.lean\"><code>#where</code> command in mathlib</a> which will give you some more detailed environment info as well.</p>",
        "id": 154967503,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1547266314
    },
    {
        "content": "<p>hmm, assumptions seem to be different from axioms (section variables apparently don't count). But I guess print axioms can give some hint of what has been added.</p>",
        "id": 154972114,
        "sender_full_name": "Karl Palmskog",
        "timestamp": 1547275775
    },
    {
        "content": "<p>Section variables are added to the types of any definitions in the section which use them, and so they would be supplied where that definition is used.</p>",
        "id": 154973055,
        "sender_full_name": "Reid Barton",
        "timestamp": 1547277793
    }
]