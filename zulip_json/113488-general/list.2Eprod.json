[
    {
        "content": "<p>Was there any point in time where <code>list.prod [t]</code> was definitionally equivalent to <code>t * 1</code>?</p>",
        "id": 128334739,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529451028
    },
    {
        "content": "<p>and was there any point in time where <code>list.prod (x :: L) = x * list.prod L</code> was <code>rfl</code>?</p>",
        "id": 128335761,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529452660
    },
    {
        "content": "<p>I think not. The foldl implementation is faster and Leo has been pretty aggressive with optimization from the start</p>",
        "id": 128335831,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1529452771
    },
    {
        "content": "<p>interesting. my category repo seems to answer yes to my questions</p>",
        "id": 128335838,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529452795
    },
    {
        "content": "<p>i.e. a code worked some time ago, and now it doesn't</p>",
        "id": 128335887,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529452810
    },
    {
        "content": "<p>You can have an even clearer answer and use <code>git blame</code> on the definition of <code>list.product</code></p>",
        "id": 128335915,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1529452851
    },
    {
        "content": "<p>how do I do that?</p>",
        "id": 128335924,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529452868
    },
    {
        "content": "<p>Do you use emacs and magit?</p>",
        "id": 128335941,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1529452910
    },
    {
        "content": "<p>eh... not really</p>",
        "id": 128335996,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529452938
    },
    {
        "content": "<p>You can get the instructions on using <code>git blame</code> by typing <code>man git-blame</code> in a terminal</p>",
        "id": 128336002,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1529452973
    },
    {
        "content": "<p>Alternatively, you go to GitHub, and lookup the relevant line: <a href=\"https://github.com/leanprover/mathlib/blob/e1f795d0d929fa6b5458a04bd6bb5889e503b0bf/data/list/basic.lean#L1054\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/blob/e1f795d0d929fa6b5458a04bd6bb5889e503b0bf/data/list/basic.lean#L1054\">https://github.com/leanprover/mathlib/blob/e1f795d0d929fa6b5458a04bd6bb5889e503b0bf/data/list/basic.lean#L1054</a><br>\nThen you click on the <code>...</code> to the left of that line, and choose <code>git blame</code>. That gives you <a href=\"https://github.com/leanprover/mathlib/blob/e1f795d0d929fa6b5458a04bd6bb5889e503b0bf/data/list/basic.lean#L1054\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/blob/e1f795d0d929fa6b5458a04bd6bb5889e503b0bf/data/list/basic.lean#L1054\">https://github.com/leanprover/mathlib/blob/e1f795d0d929fa6b5458a04bd6bb5889e503b0bf/data/list/basic.lean#L1054</a></p>",
        "id": 128347985,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1529476283
    },
    {
        "content": "<p>But I don't see an easy option to walk through the history of that line. On the command line you <em>can</em> do that, with <code>git log</code> and some options. See also <a href=\"https://flummox-engineering.blogspot.com/2016/05/view-specific-lines-of-source-code-in-git-history.html\" target=\"_blank\" title=\"https://flummox-engineering.blogspot.com/2016/05/view-specific-lines-of-source-code-in-git-history.html\">https://flummox-engineering.blogspot.com/2016/05/view-specific-lines-of-source-code-in-git-history.html</a></p>",
        "id": 128348026,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1529476330
    },
    {
        "content": "<p>I traced it back, it was always <code>foldl</code>. I ported the definition from Lean2's library. I think we should change it to <code>foldr</code> then we get the expected equalities.</p>",
        "id": 128362377,
        "sender_full_name": "Johannes HÃ¶lzl",
        "timestamp": 1529501093
    },
    {
        "content": "<p>Is there a way to use <code>foldr</code> as the definition but run <code>foldl</code> implementation in the VM?</p>",
        "id": 128362751,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1529501706
    },
    {
        "content": "<p>If you want to patch Lean, then yes.</p>",
        "id": 128362770,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1529501756
    },
    {
        "content": "<p>That sounds less trivial than the \"yes\" suggests <span class=\"emoji emoji-1f61d\" title=\"stuck out tongue closed eyes\">:stuck_out_tongue_closed_eyes:</span></p>",
        "id": 128362903,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1529501924
    },
    {
        "content": "<p><code>{-# RULES #-}</code>with a proof obligation would be neat...</p>",
        "id": 128364747,
        "sender_full_name": "Reid Barton",
        "timestamp": 1529504299
    },
    {
        "content": "<p>you could probably write it <code>@[rule]</code> before a lemma</p>",
        "id": 128364931,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1529504546
    },
    {
        "content": "<blockquote>\n<p>and was there any point in time where <code>list.prod (x :: L) = x * list.prod L</code> was <code>rfl</code>?</p>\n</blockquote>\n<p>I don't think it was even equal to that with non commutative multiplication, <code>list.prod (x :: L) = list.prod L * x</code>at the moment.</p>",
        "id": 128368155,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1529508884
    },
    {
        "content": "<p>I found myself wanting the foldr definition for <a href=\"https://github.com/leanprover-community/mathlib/issues/10674\">#10674</a>, as there the definitional equality is important. I ended up having to define a foldr version of sum there for my recursor's type to work</p>",
        "id": 264384007,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639093672
    },
    {
        "content": "<p>(xref <a href=\"https://github.com/leanprover-community/mathlib/pull/161\">#161</a> for reference)</p>",
        "id": 265148551,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639658026
    }
]