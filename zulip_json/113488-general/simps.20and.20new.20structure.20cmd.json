[
    {
        "content": "<p>How do I customize <code>simps</code> projections for new-style structures like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/homeomorph\">docs#homeomorph</a>?</p>",
        "id": 220743113,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1608677211
    },
    {
        "content": "<p>I want to generate <code>simp</code> lemmas at least for <code>apply</code> and <code>symm_apply</code>.</p>",
        "id": 220743299,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1608677358
    },
    {
        "content": "<p>Another question about <code>simps</code>: can I generate both <code>simp</code> lemmas for non-applied coercions and non-simp lemmas for applied coercions?</p>",
        "id": 220743336,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1608677392
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> I only know <code>simps</code> via cargo cult, but are you looking for something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">locally_constant</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">to_fun</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">is_locally_constant</span> <span class=\"o\">:</span> <span class=\"n\">is_locally_constant</span> <span class=\"n\">to_fun</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">locally_constant</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_to_fun</span> <span class=\"o\">(</span><span class=\"n\">locally_constant</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">locally_constant.to_fun</span><span class=\"o\">⟩</span>\n\n<span class=\"n\">initialize_simps_projections</span> <span class=\"n\">locally_constant</span> <span class=\"o\">(</span><span class=\"n\">to_fun</span> <span class=\"bp\">→</span> <span class=\"n\">apply</span><span class=\"o\">)</span>\n<span class=\"c1\">-- ^^^^^^^^^^^^^^^^^</span>\n</code></pre></div>",
        "id": 220765098,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1608705866
    },
    {
        "content": "<p>I found the code for <code>equiv</code>. The problem with <code>homeomorph</code> is that there is no <code>homeomorph.to_fun</code>, only <code>equiv.to_fun (homeomorph.to_equiv _)</code></p>",
        "id": 220836027,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1608765839
    },
    {
        "content": "<p>Can you add a custom simps projection like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/equiv.simps.inv_fun\">docs#equiv.simps.inv_fun</a>?</p>",
        "id": 220836479,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1608766289
    },
    {
        "content": "<p>I don't know how should I name them to make <a href=\"https://leanprover-community.github.io/mathlib_docs/attributes.html#simps\">attr#simps</a> recognize them.</p>",
        "id": 220836645,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1608766426
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> ?</p>",
        "id": 220836728,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1608766488
    },
    {
        "content": "<p>At a guess, adding a lemma <code>homeomorph.simps.to_equiv</code> with a lemma statement of what you expect <code>apply</code> to be might make progress</p>",
        "id": 220836934,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1608766705
    },
    {
        "content": "<p>I'm afraid that <code>@[simps]</code> currently doesn't support making a custom projection that is a composition of two projections.<br>\nIf I understand correctly, you have the following problem: right out of the box <code>@[simps]</code> will state lemmas using <code>⇑(f.to_equiv)</code>, and you want them to be stated using <code>⇑f</code>. These are definitionally equal, but not syntactically so. </p>\n<p>Let me see if I can add the functionality to <code>@[simps]</code> (at some point). Can you give me an explicit example (maybe from the library) of a definition and the precise simp lemmas you want to generate?</p>",
        "id": 220840448,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1608770848
    },
    {
        "content": "<p>Related issue: <a href=\"https://github.com/leanprover-community/mathlib/issues/3837\">#3837</a></p>",
        "id": 220840450,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1608770852
    },
    {
        "content": "<p>Question: does using <code>old_structure_cmd</code> for <code>homeomorph</code> break other things? It would at least \"solve\" this problem.</p>",
        "id": 220840665,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1608771167
    },
    {
        "content": "<p>You can take any definition about <code>homeomorph</code> (e.g., <a href=\"https://leanprover-community.github.io/mathlib_docs/find/homeomorph.trans\">docs#homeomorph.trans</a>). I want to have <code>⇑(h₁.trans h₂) x = h₂ (h₁ x)</code> and <code>⇑(h₁.trans h₂).symm x = h₁.symm (h₂.symm x)</code>.</p>",
        "id": 220848346,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1608784656
    },
    {
        "content": "<p>Ideally, I want to have the following lemmas (possibly, with other names):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.homeomorph</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">homeomorph</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">γ</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">hab</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">≃ₜ</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hbc</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">≃ₜ</span> <span class=\"n\">γ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">trans_to_equiv</span> <span class=\"o\">(</span><span class=\"n\">hab.trans</span> <span class=\"n\">hbc</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_equiv</span> <span class=\"bp\">=</span> <span class=\"n\">hab.to_equiv.trans</span> <span class=\"n\">hbc.to_equiv</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">coe_trans</span> <span class=\"o\">:</span> <span class=\"bp\">⇑</span><span class=\"o\">(</span><span class=\"n\">hab.trans</span> <span class=\"n\">hbc</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">hbc</span> <span class=\"bp\">∘</span> <span class=\"n\">hab</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">coe_trans_symm</span> <span class=\"o\">:</span> <span class=\"bp\">⇑</span><span class=\"o\">(</span><span class=\"n\">hab.trans</span> <span class=\"n\">hbc</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"bp\">=</span> <span class=\"n\">hab.symm</span> <span class=\"bp\">∘</span> <span class=\"n\">hbc.symm</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">trans_apply</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">hab.trans</span> <span class=\"n\">hbc</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">hbc</span> <span class=\"o\">(</span><span class=\"n\">hab</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">trans_symm_apply</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">hab.trans</span> <span class=\"n\">hbc</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">hab.symm</span> <span class=\"o\">(</span><span class=\"n\">hbc.symm</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 220848394,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1608784688
    },
    {
        "content": "<p>Presumably ideally you'd like the entire api of <code>equiv</code> to be duplicated on your type?</p>",
        "id": 220858332,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1608801198
    },
    {
        "content": "<p>Which sounds like the same pain point as we have with the <code>_hom</code> structures</p>",
        "id": 220858341,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1608801237
    },
    {
        "content": "<p>Having no polymorphism associated with the <code>extends</code> feature seems to be a recurring pain</p>",
        "id": 220858407,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1608801309
    },
    {
        "content": "<p>Here I'm not talking about this problem. It's about <code>@[simps]</code></p>",
        "id": 220890332,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1608843708
    },
    {
        "content": "<p><code>homeomorph.trans</code> is just an example. Actually, I'm more interested in definitions like <a href=\"https://github.com/leanprover-community/mathlib/blob/55e72001cf7b9ad568ca601becf22002500d526e/src/analysis/special_functions/trigonometric.lean#L1670\"><code>sin_local_homeomorph</code></a></p>",
        "id": 220890403,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1608843811
    }
]