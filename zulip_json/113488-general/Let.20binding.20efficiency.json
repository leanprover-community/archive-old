[
    {
        "content": "<p>If a term <code>foo</code> appears multiple times in a definition in such a way that each occurrence of it will have to be normalized,  does the definition become more efficiently computable by using <code>let x := foo in</code> in the beginning? The assumption is that <code>x</code> will be structured in a way that forces (some) normalization with the let binding (e.g., if <code>foo : A Ã— B</code>, then <code>let (a,b) := foo</code>).</p>",
        "id": 152446520,
        "sender_full_name": "Seul Baek",
        "timestamp": 1545609844
    },
    {
        "content": "<p>yes, although lean does that sometimes on its own, during the common subexpression elimination pass</p>",
        "id": 152446627,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1545610108
    },
    {
        "content": "<p>do you mean in the VM or the kernel?</p>",
        "id": 152446628,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1545610126
    },
    {
        "content": "<p>Note that <code>let (a,b) := foo</code> is not a let binding at all, it is just notation for a recursor</p>",
        "id": 152446634,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1545610156
    },
    {
        "content": "<p>I meant the kernel, although I'd be curious about the VM as well.</p>",
        "id": 152446693,
        "sender_full_name": "Seul Baek",
        "timestamp": 1545610258
    },
    {
        "content": "<p>In the kernel, I am not positive but I would guess that it depends on how shared the expression object is in memory</p>",
        "id": 152446698,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1545610275
    },
    {
        "content": "<p>using a let binding like that is a good way to make sure that the same expression object is used in each place</p>",
        "id": 152446700,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1545610305
    },
    {
        "content": "<p>but there will be some overhead with unfolding it</p>",
        "id": 152446702,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1545610321
    },
    {
        "content": "<p>The kernel caches the whnf operation, so it won't need to calculate it many times if it is asked for multiple times</p>",
        "id": 152446745,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1545610370
    },
    {
        "content": "<p>but I'm not sure whether the same expression in different contexts can cause a problem (since this might mean renaming vars and unsharing)</p>",
        "id": 152446751,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1545610412
    },
    {
        "content": "<p>The main downside I'm experiencing with <code>let</code> is that it doesn't play nice with the simplifier when I have to prove properties about definitions which include it (<code>_match_1</code> all over the place) and requires extra definitional lemmas for unfolding. So I was wondering if there are reasons to use it other than its concision.</p>",
        "id": 152446851,
        "sender_full_name": "Seul Baek",
        "timestamp": 1545610651
    },
    {
        "content": "<p>If <code>let (a,b) := foo</code> is not a let binding, is there something else I can do to normalize <code>foo</code> and bind it to fresh term(s)?</p>",
        "id": 152446991,
        "sender_full_name": "Seul Baek",
        "timestamp": 1545610823
    },
    {
        "content": "<p>like I said, it's just a recursor. If you don't like the <code>_match_1</code> stuff, you can use tactics instead to construct the term, which don't leave this junk in the term</p>",
        "id": 152447329,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1545611592
    },
    {
        "content": "<p>i.e. <code>by cases foo with a b; exact</code></p>",
        "id": 152447337,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1545611608
    },
    {
        "content": "<p>it's equivalent to writing <code>prod.rec</code> explicitly in the term</p>",
        "id": 152447343,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1545611634
    },
    {
        "content": "<p>I see. Thanks!</p>",
        "id": 152447817,
        "sender_full_name": "Seul Baek",
        "timestamp": 1545612688
    }
]