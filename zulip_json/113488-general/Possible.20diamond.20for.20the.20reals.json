[
    {
        "content": "<p>This came up as part of a discussion in another thread -- a possible diamond in the uniform space structure of the reals:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.uniform_space.compare_reals</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">rational_cau_seq_pkg.induction_on</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"c1\">-- error on this line</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Error message:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">synthesized</span> <span class=\"n\">type</span> <span class=\"kd\">class</span> <span class=\"kd\">instance</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">definitionally</span> <span class=\"n\">equal</span> <span class=\"n\">to</span> <span class=\"n\">expression</span> <span class=\"n\">inferred</span> <span class=\"kd\">by</span> <span class=\"n\">typing</span> <span class=\"n\">rules</span><span class=\"o\">,</span> <span class=\"n\">synthesized</span>\n  <span class=\"n\">pseudo_metric_space.to_uniform_space</span>\n<span class=\"n\">inferred</span>\n  <span class=\"n\">is_absolute_value.uniform_space</span> <span class=\"n\">abs</span>\n</code></pre></div>",
        "id": 293936178,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1660755216
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_absolute_value.uniform_space\">docs#is_absolute_value.uniform_space</a> feels like a bad instance</p>",
        "id": 293936365,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1660755268
    },
    {
        "content": "<p>Oh, but it's not an instance!</p>",
        "id": 293936415,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1660755283
    },
    {
        "content": "<p>It's part of <code>rational_cau_seq_pkg</code></p>",
        "id": 293936528,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1660755320
    },
    {
        "content": "<p>Okay, maybe not a diamond, but this makes <code>rational_cau_seq_pkg</code> fairly unusable.</p>",
        "id": 293936622,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1660755345
    },
    {
        "content": "<p>To be honest, <code>rational_cau_seq_pkg</code> isn't meant to be usable. It's a leaf declaration whose only purpose is to be a consistency check.</p>",
        "id": 293938290,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1660755842
    },
    {
        "content": "<p>Regardless of this (non?)diamond, can we put that statement, or something like it, in the docstring?</p>",
        "id": 293938661,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1660755965
    },
    {
        "content": "<p>I think it should be a fairly easy fix, but I won't have time to do it myself today.</p>",
        "id": 293938950,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1660756075
    },
    {
        "content": "<p>One should just use the uniform space structure on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Q</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Q}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8556em;vertical-align:-0.1667em;\"></span><span class=\"mord mathbb\">Q</span></span></span></span> arising from the metric space structure, instead of this bespoke one.</p>",
        "id": 293939072,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1660756109
    },
    {
        "content": "<p>Or more generally for the absolute value thing</p>",
        "id": 293939244,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1660756180
    },
    {
        "content": "<p>Oh, this uniform space structure coming from an absolute value is more general, but it should still be possible to make them defeq</p>",
        "id": 293939930,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1660756440
    },
    {
        "content": "<p>Maybe a docstsring would indeed suffice for now ;)</p>",
        "id": 293940013,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1660756458
    }
]