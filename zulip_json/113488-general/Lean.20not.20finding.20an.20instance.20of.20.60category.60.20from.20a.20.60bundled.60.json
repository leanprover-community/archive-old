[
    {
        "content": "<p>I'm having a small spot of trouble constructing an instance of a category. We covered the Eilenberg-Steenrod axioms in my Algebraic Topology class earlier today and I wanted to have a crack at them. I've been fiddling around trying to define the category of topological pairs, and after a few messier attempts decided to try mimicking the approach from <code>topology.category.Top.basic</code>. </p>\n<p>I've defined a <code>class topological_pair (α : Type u) extends topological_space α := (subset  : set α)</code>,  <code>@[reducible] def Pairs : Type (u+1) := bundled topological_pair </code>, and even an <code>instance concrete_category_pair_map : unbundled_hom @pair_map</code>, but then on the subsequent few lines it seems that Lean is still failing to find an instance of <code>category Pairs</code> (and <code>has_hom Pairs</code>,  and <code>category_struct Pairs</code>), although I was under the impression that it was supposed to be able to infer this from its definition as a <code>bundled topological_pair</code> (there is an <code>instance : category (bundled c)</code> in <code>category_theory.concrete_category.bundled_hom</code>, which I have imported). Lean seems to have no trouble finding an instance of <code>category Top</code> just fine in <code>topology.category.Top.basic</code>, which has a near-identical setup, so I'm not sure where I'm going wrong.</p>\n<p>I've been fiddling with things for the last hour trying to fix this -- what am I misunderstanding?</p>\n<p>The errors are the <code>-- TODO</code> lines in this teeny file: <a href=\"https://github.com/jjcrawford/leanprover_experiments/blob/master/src/Eilenberg-Steenrod.lean\" target=\"_blank\" title=\"https://github.com/jjcrawford/leanprover_experiments/blob/master/src/Eilenberg-Steenrod.lean\">https://github.com/jjcrawford/leanprover_experiments/blob/master/src/Eilenberg-Steenrod.lean</a></p>",
        "id": 177608044,
        "sender_full_name": "Jack Crawford",
        "timestamp": 1570537684
    },
    {
        "content": "<p>First thought: use <code>embedding</code></p>",
        "id": 177608315,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1570537913
    },
    {
        "content": "<p>You probably don't want to tie yourself down to subsets</p>",
        "id": 177608364,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1570537925
    },
    {
        "content": "<p>Thanks, this seems like good advice! I didn't know about <code>embedding</code>, and <code>set</code> just seemed sufficient for a first attempt (I expected to probably have to re-engineer it a few times later anyway). I'll try rewriting it in terms of embedding soon.</p>",
        "id": 177608883,
        "sender_full_name": "Jack Crawford",
        "timestamp": 1570538339
    },
    {
        "content": "<p>Another thought -- if you use <code>embedding</code> (and I like Johan think it's a good idea) then your <code>pair_map</code> could be a structure consisting of a map alpha-&gt;beta (why not just use regular maths notation like X and Y for this regular maths stuff?) and also a map U -&gt; V for the two subsets plus a proof that the diagram commutes.</p>",
        "id": 177608955,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1570538383
    },
    {
        "content": "<p>As for the category theory stuff, I was hoping I could make some quick useful comment but I've never used categories seriously before so I can't. I can tell you what the error is though -- I think. As far as I can see <code>Pairs</code> is just some random type, I am not sure if it has a category structure, so when you start using the category theory arrows Lean doesn't know what to do with them.</p>",
        "id": 177609262,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1570538613
    },
    {
        "content": "<p>^ yeah, this is definitely the case. I'm just not sure why Lean can't see the <code>instance : category (bundled c)</code> from <code>category_theory.concrete_category.bundled_hom</code>, since my <code>Pairs</code> is defined as a <code>bundled topological_pair</code> (and is even <code>@[reducible]</code>).</p>",
        "id": 177609574,
        "sender_full_name": "Jack Crawford",
        "timestamp": 1570538821
    },
    {
        "content": "<p>The category structure should come for free, at least, this is how it seemed to work for the definition of <code>Top</code></p>",
        "id": 177609632,
        "sender_full_name": "Jack Crawford",
        "timestamp": 1570538880
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> Could I bother you to have a quick look and see if you can identify why this isn't working?</p>",
        "id": 177609748,
        "sender_full_name": "Jack Crawford",
        "timestamp": 1570538954
    },
    {
        "content": "<p><em>puts on Scott voice</em> I think you need a <code>topological_space</code> instance for <code>topological_pair</code>s</p>",
        "id": 177609868,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1570539039
    },
    {
        "content": "<p>No, it's that you've written <code>Type</code> instead of <code>Type u</code> in a few places.</p>",
        "id": 177610219,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1570539283
    },
    {
        "content": "<p>oh! I was wondering whether it might have to be some silly universe thing that was eluding me, thanks!</p>",
        "id": 177610321,
        "sender_full_name": "Jack Crawford",
        "timestamp": 1570539344
    },
    {
        "content": "<p>That absolutely did the job. I'll have to keep track of my <code>Type</code>s a little more closely.</p>",
        "id": 177610493,
        "sender_full_name": "Jack Crawford",
        "timestamp": 1570539424
    },
    {
        "content": "<p>You had only described the morphisms in the special case of pairs in the actual universe, but then you wanted to talk about the category of pairs in some ridiculous imaginary universe. One solution to this is to only use universe variables when you need to... (which might include contributing to mathlib, where you never know if someone will later want to use ridiculous universes. :-)</p>",
        "id": 177610621,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1570539497
    },
    {
        "content": "<p>The other solution is to get in the habit of using arbitrary universes from the beginning.</p>",
        "id": 177610643,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1570539512
    },
    {
        "content": "<p>Maybe the next time I have a problem I'll just use the chaotic evil <code>Type _</code> ;~)</p>",
        "id": 177611207,
        "sender_full_name": "Jack Crawford",
        "timestamp": 1570539848
    },
    {
        "content": "<p>I think this <code>class topological_pair (α : Type u) extends topological_space α := (subset : set α)</code> is going to be too weird to use in practice. This is like saying: <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span></span></span></span> is a topological pair if it's a topological space and also it has some distinguished subset <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">A</span></span></span></span>. But when you want to state the axioms you're going to need to consider the same space <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span></span></span></span> with two different subspaces and it will be awkward to express.</p>",
        "id": 177626109,
        "sender_full_name": "Reid Barton",
        "timestamp": 1570547871
    },
    {
        "content": "<p>It's probably better to define a structure like <a href=\"https://github.com/rwbarton/lean-homotopy-theory/blob/lean-3.4.2/src/homotopy_theory/topological_spaces/pair.lean#L22\" target=\"_blank\" title=\"https://github.com/rwbarton/lean-homotopy-theory/blob/lean-3.4.2/src/homotopy_theory/topological_spaces/pair.lean#L22\">https://github.com/rwbarton/lean-homotopy-theory/blob/lean-3.4.2/src/homotopy_theory/topological_spaces/pair.lean#L22</a> (or you can use embeddings if you like) and construct the category instance manually</p>",
        "id": 177626208,
        "sender_full_name": "Reid Barton",
        "timestamp": 1570547917
    },
    {
        "content": "<p>Also, you probably want to use <code>AddCommGroup</code> not <code>CommGroup</code></p>",
        "id": 177627432,
        "sender_full_name": "Reid Barton",
        "timestamp": 1570548594
    }
]