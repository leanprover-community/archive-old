[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span>, <span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span>, I was experimenting with sparse categories (I think they are an excellent idea), but ran into this pesky issue:</p>\n<div class=\"codehilite\"><pre><span></span>import category_theory.category\n\nuniverses u v\n\nnamespace category_theory\n\nvariables {C : Type u} [category_struct.{v} C]\n\ninstance sparse_category [‚àÄ X Y : C, subsingleton (X ‚ü∂ Y)] : category.{v} C := { }\n\nlemma foo [‚àÄ X Y : C, subsingleton (X ‚ü∂ Y)] (X Y : C) (f : X ‚ü∂ Y) : ùüô X ‚â´ f = f :=\nbegin\n  simp,\nend\n\nend category_theory\n</pre></div>\n\n\n<p>For some reason the <code>simp</code> fails, and can't apply the simp lemma <code>category.id_comp</code>. I can't work out what's going on here. Any ideas??</p>",
        "id": 162112631,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1553936742
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">[</span><span class=\"bp\">‚àÄ</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"n\">subsingleton</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"err\">‚ü∂</span> <span class=\"n\">Y</span><span class=\"o\">)]</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"err\">‚ü∂</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">ùüô</span> <span class=\"n\">X</span> <span class=\"err\">‚â´</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"n\">category</span><span class=\"bp\">.</span><span class=\"n\">id_comp</span> <span class=\"bp\">_</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"c1\">-- goals accomplished!</span>\n<span class=\"kn\">end</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">kernel failed to type check declaration &#39;foo&#39; this is usually due to a buggy tactic or a bug in the builtin elaborator</span>\n<span class=\"cm\">elaborated type:</span>\n<span class=\"cm\">  ‚àÄ {C : Type u} [_inst_1 : category_struct C] [_inst_2 : ‚àÄ (X Y : C), subsingleton (X ‚ü∂ Y)] (X Y : C)</span>\n<span class=\"cm\">  (f : X ‚ü∂ Y), ùüô X ‚â´ f = f</span>\n<span class=\"cm\">elaborated value:</span>\n<span class=\"cm\">  Œª {C : Type u} [_inst_1 : category_struct C] [_inst_2 : ‚àÄ (X Y : C), subsingleton (X ‚ü∂ Y)] (X Y : C)</span>\n<span class=\"cm\">  (f : X ‚ü∂ Y), category.id_comp C f</span>\n<span class=\"cm\">nested exception message:</span>\n<span class=\"cm\">invalid reference to undefined universe level parameter &#39;v&#39;</span>\n<span class=\"cm\">-/</span>\n</pre></div>",
        "id": 162114498,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553940025
    },
    {
        "content": "<p>It's a universe issue?</p>",
        "id": 162114502,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553940049
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">set_option</span> <span class=\"n\">pp</span><span class=\"bp\">.</span><span class=\"n\">universes</span> <span class=\"n\">true</span>\n<span class=\"kn\">set_option</span> <span class=\"n\">pp</span><span class=\"bp\">.</span><span class=\"kn\">notation</span> <span class=\"n\">false</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">[</span><span class=\"bp\">‚àÄ</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"n\">subsingleton</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"err\">‚ü∂</span> <span class=\"n\">Y</span><span class=\"o\">)]</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"err\">‚ü∂</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">ùüô</span> <span class=\"n\">X</span> <span class=\"err\">‚â´</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"n\">category</span><span class=\"bp\">.</span><span class=\"n\">id_comp&#39;</span> <span class=\"bp\">_</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"c1\">-- goals accomplished!</span>\n<span class=\"kn\">end</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">kernel failed to type check declaration &#39;foo&#39; this is usually due to a buggy tactic or a bug in the builtin elaborator</span>\n<span class=\"cm\">elaborated type:</span>\n<span class=\"cm\">  ‚àÄ {C : Type u} [_inst_1 : category_struct.{v u} C]</span>\n<span class=\"cm\">  [_inst_2 : ‚àÄ (X Y : C), subsingleton.{v+1} (has_hom.hom.{v u} X Y)] (X Y : C) (f : has_hom.hom.{v u} X Y),</span>\n<span class=\"cm\">    eq.{v+1} (category_struct.comp.{v u} (category_struct.id.{v u} X) f) f</span>\n<span class=\"cm\">elaborated value:</span>\n<span class=\"cm\">  Œª {C : Type u} [_inst_1 : category_struct.{v u} C]</span>\n<span class=\"cm\">  [_inst_2 : ‚àÄ (X Y : C), subsingleton.{v+1} (has_hom.hom.{v u} X Y)] (X Y : C) (f : has_hom.hom.{v u} X Y),</span>\n<span class=\"cm\">    category.id_comp&#39;.{v u} C f</span>\n<span class=\"cm\">nested exception message:</span>\n<span class=\"cm\">invalid reference to undefined universe level parameter &#39;v&#39;</span>\n<span class=\"cm\">-/</span>\n</pre></div>",
        "id": 162114642,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553940324
    },
    {
        "content": "<p>ah... that looks like it could be the problem!</p>",
        "id": 162115170,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1553941218
    },
    {
        "content": "<p>Hmm... it's a problem, but apparently not the problem! </p>\n<div class=\"codehilite\"><pre><span></span>lemma foo [‚àÄ X Y : C, subsingleton.{v} (X ‚ü∂ Y)] (X Y : C) (f : X ‚ü∂ Y) : ùüô X ‚â´ f = f :=\nbegin\n  refine category.id_comp&#39; _ f, -- goals accomplished!\nend\n</pre></div>\n\n\n<p>works, but you still can't prove that lemma by <code>simp</code>.</p>",
        "id": 162115377,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1553941669
    },
    {
        "content": "<p>hmm, okay. For some reason that I don't understand <code>simp</code> can't cope with synthesising category instances via <code>instance sparse_category [‚àÄ X Y : C, subsingleton (X ‚ü∂ Y)] : category.{v} C := { }</code>.</p>",
        "id": 162115621,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1553942090
    },
    {
        "content": "<p>The workaround is just to have this be a <code>def</code> instead, and you just use it to build the instance once and for all, rather than looking up the subsingleton instances at each use.</p>",
        "id": 162115638,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1553942126
    },
    {
        "content": "<p>(That's probably the more sensible use anyway.)</p>",
        "id": 162115640,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1553942137
    }
]