[
    {
        "content": "<p>What's going on here?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">definition</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">},</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">X</span>\n\n<span class=\"kn\">definition</span> <span class=\"n\">Zero</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"n\">i</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"o\">(</span><span class=\"n\">Zero</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"c1\">-- fails</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Zero</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"c1\">-- works</span>\n</pre></div>",
        "id": 129193790,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1530873345
    },
    {
        "content": "<p>change λ (X : Type) to λ {X : Type}?</p>",
        "id": 129193835,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1530873390
    },
    {
        "content": "<p>What does that change mean?</p>",
        "id": 129193846,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1530873426
    },
    {
        "content": "<p>It doesn't fix the problem</p>",
        "id": 129193849,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1530873429
    },
    {
        "content": "<p>never mind then</p>",
        "id": 129193852,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1530873436
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">definition</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">},</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">X</span>\n\n<span class=\"kn\">definition</span> <span class=\"n\">Zero</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"n\">i</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"o\">(</span><span class=\"n\">Zero</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"c1\">-- fails</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Zero</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"c1\">-- works</span>\n</pre></div>",
        "id": 129193853,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1530873445
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>invalid type ascription, term has type\n  (?m_1 → ?m_1) → ?m_1 → ?m_1 : Type\nbut is expected to have type\n  Nat : Type 1\n</pre></div>",
        "id": 129193856,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1530873456
    },
    {
        "content": "<p>It's a universe issue?</p>",
        "id": 129193858,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1530873464
    },
    {
        "content": "<p>change the pi</p>",
        "id": 129193861,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1530873466
    },
    {
        "content": "<p>brackets</p>",
        "id": 129193864,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1530873471
    },
    {
        "content": "<p>Zero has type <code>(? -&gt; ?) -&gt; ? -&gt; ?</code> or something</p>",
        "id": 129193918,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1530873508
    },
    {
        "content": "<p>or use <code>⦃</code></p>",
        "id": 129193934,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1530873562
    },
    {
        "content": "<p>for weakly implicit</p>",
        "id": 129193940,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1530873590
    },
    {
        "content": "<blockquote>\n<p>change λ (X : Type) to λ {X : Type}?</p>\n</blockquote>\n<p>This is syntactically valid but does it change anything?</p>",
        "id": 129194314,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1530874162
    },
    {
        "content": "<p>my guess is that if you don't state the type the inferred type will be <code>Pi {X}, ...</code> for one of them and <code>Pi (X), ...</code> for the other one.</p>",
        "id": 129194378,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1530874263
    },
    {
        "content": "<p>In this case the binder on the lambda doesn't matter, since it is explicitly given the type <code>Nat</code></p>",
        "id": 129194534,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1530874498
    },
    {
        "content": "<p>All that matters for elaboration purposes is whether <code>Nat</code> is defined as <code>Pi {X : Type}, ...</code> or <code>Pi (X : Type), ...</code></p>",
        "id": 129194551,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1530874542
    },
    {
        "content": "<p>Do I correctly infer from Kevin's example that Lean does not remember that <code>Zero</code> has type <code>Nat</code>, even if it is explicitly told so during the <code>definition</code>? So it uses that fact while type checking the definition, but afterwards throws it away and only stores the term (or something)?</p>",
        "id": 129194690,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1530874773
    },
    {
        "content": "<p>I think the problem is that when Lean sees <code>Zero</code> with <code>{}</code> it immediately tries to fill in the <code>{}</code> variable, so <code>Zero</code> is the same as <code>@Zero _</code> which is not the same as <code>@Zero</code></p>",
        "id": 129194746,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1530874837
    },
    {
        "content": "<p>If you use <code>{{}}</code> then Lean decides to wait until later before guessing what goes in the brackets</p>",
        "id": 129194750,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1530874858
    },
    {
        "content": "<p>The easiest fix is just to use <code>(X : Type)</code> I guess</p>",
        "id": 129194801,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1530874935
    },
    {
        "content": "<p>When defining a type as a pi like this, you almost never want to use <code>Pi {X}</code> because of \"surprises\" like this</p>",
        "id": 129194807,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1530874981
    },
    {
        "content": "<p>This is one of the main use cases for <code>Pi {{X}}</code></p>",
        "id": 129194818,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1530875006
    },
    {
        "content": "<p>like in the definition of <code>set.subset</code></p>",
        "id": 129194820,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1530875018
    }
]