[
    {
        "content": "<p>What is the status of hammers (like sledgehammer) in lean? Development in Coq seems to be somewhat stalled, but there are some interesting datasets:<br>\n<a href=\"https://coq.discourse.group/t/coqhammer-1-1-1-for-coq-8-9/327/12\" target=\"_blank\" title=\"https://coq.discourse.group/t/coqhammer-1-1-1-for-coq-8-9/327/12\">https://coq.discourse.group/t/coqhammer-1-1-1-for-coq-8-9/327/12</a><br>\n<a href=\"https://coq.discourse.group/t/machine-learning-and-hammers-for-coq/303\" target=\"_blank\" title=\"https://coq.discourse.group/t/machine-learning-and-hammers-for-coq/303\">https://coq.discourse.group/t/machine-learning-and-hammers-for-coq/303</a></p>\n<p>Chantal Keller is doing nice work with on safely importing SMT proofs into Coq, and she is defining her own intermediate format. Could the same be used for lean?<br>\n<a href=\"https://github.com/smtcoq/smtcoq\" target=\"_blank\" title=\"https://github.com/smtcoq/smtcoq\">https://github.com/smtcoq/smtcoq</a></p>",
        "id": 190706517,
        "sender_full_name": "Bas Spitters",
        "timestamp": 1584356299
    },
    {
        "content": "<p>I've been working on a sledgehammer-like tool.  Here are the slides from FoMM in January: <a href=\"https://gebner.org/pdfs/2020-01-08_fomm20_leanhammer.pdf\" target=\"_blank\" title=\"https://gebner.org/pdfs/2020-01-08_fomm20_leanhammer.pdf\">https://gebner.org/pdfs/2020-01-08_fomm20_leanhammer.pdf</a></p>",
        "id": 190706600,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1584356370
    },
    {
        "content": "<p>However due to performance issues, I don't think this will ever make it into Lean3/mathlib.  Any future work will happen in Lean 4.</p>",
        "id": 190706763,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1584356471
    },
    {
        "content": "<p>Nice! How much of this can be modularized? You don't seem to be using any parts of sledgehammer, coqhammer, deephol, ...<br>\nBTW did you look at easycrypt? It uses why3 as an intermediate, and is quite pleasant to use.</p>",
        "id": 190707685,
        "sender_full_name": "Bas Spitters",
        "timestamp": 1584357095
    },
    {
        "content": "<p>No, everything I've had for FoMM is homegrown.  Since then, I've hooked up the relevance filter from CoqHammer (because it's pretty generic and written in C++, which is nice since Lean is also C++).  But in my tests it didn't perform any better than the dumb filters I was using before.</p>",
        "id": 190708020,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1584357314
    },
    {
        "content": "<p>I don't think it makes sense to reuse translations at all.  It's pretty short and straightforward code, but it depends very much on the logic of the proof assistant.</p>",
        "id": 190708284,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1584357471
    },
    {
        "content": "<p>I didn't know about easycrypt.  I'll take a look but it seems extremely specific (\"reasoning about relational properties of probabilistic computations with adversarial code\").</p>",
        "id": 190708417,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1584357560
    },
    {
        "content": "<p>What are the relevant differences between classical Coq, isabelle and lean?</p>",
        "id": 190708430,
        "sender_full_name": "Bas Spitters",
        "timestamp": 1584357578
    },
    {
        "content": "<p>Easycrypt has an ambient logic: Classical HOL. There tactic language is ssr with an smt tactic. The libraries are fairly close copies of math-comp.</p>",
        "id": 190708599,
        "sender_full_name": "Bas Spitters",
        "timestamp": 1584357674
    },
    {
        "content": "<p>They have more rewriting build in than Coq.</p>",
        "id": 190708714,
        "sender_full_name": "Bas Spitters",
        "timestamp": 1584357729
    },
    {
        "content": "<p>Isabelle is very much different from the other two: the logic is simply-typed lambda calculus, which is much weaker than the type theories of Lean and Coq, and also much closer to what external provers expect.  Additionally, type classes in Isabelle are much more restricted than in Lean: they are coherent, which means that there is a unique instance per type.  Hence you just need predicates for type classes that say which type has a type class, and you can e.g. write <code>add(a,b)</code> for addition (in a sound translation).  In Lean and Coq, you can have multiple implementations of addition for a type so you might need to carry around an additional argument that says which type class instance you use.</p>",
        "id": 190708948,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1584357867
    },
    {
        "content": "<p>The differences between Lean and Coq are smaller.  Coq has more syntactic features that you need to encode: in a addition to lambdas, they also have fixpoints and match expressions.  On the other hand, Lean makes an auxiliary definitions if you write a <code>match</code>, and also adds equational lemmas that hide the actual implementation as recursors.  You typically don't want to definitionally unfold the auxiliary definition, and only use the equational lemmas.</p>",
        "id": 190709170,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1584358008
    },
    {
        "content": "<p>Thanks. I understood you translated lean to HOL (as in your slides). From that point on, one could imagine that similar tools could be used as for isabelle and easycrypt.<br>\nF* of course is another data point. However, I understand that the translation they are doing to smt solvers is not really well understood.</p>",
        "id": 190714184,
        "sender_full_name": "Bas Spitters",
        "timestamp": 1584361368
    }
]