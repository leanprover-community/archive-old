[
    {
        "content": "<p>I'm experiencing problems coercing linear maps to functions. For example:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">module</span>\n<span class=\"kn\">set_option</span> <span class=\"n\">pp</span><span class=\"bp\">.</span><span class=\"n\">all</span> <span class=\"n\">true</span>\n<span class=\"n\">def</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span><span class=\"err\">ₗ</span><span class=\"o\">[</span><span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_fun</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_fun</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span> <span class=\"c1\">-- works</span>\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">foo</span> <span class=\"n\">α</span> <span class=\"bp\">_</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">foo</span> <span class=\"n\">α</span> <span class=\"bp\">_</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span> <span class=\"c1\">-- works</span>\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">foo</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span> <span class=\"c1\">-- error at `foo`: function expected</span>\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">coe_fn</span> <span class=\"n\">foo</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">coe_fn</span> <span class=\"n\">foo</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span> <span class=\"c1\">-- error at `coe_fn` is the same</span>\n</pre></div>\n\n\n<p>The error for <code>foo x y</code> is, with <code>pp.all</code> enabled:</p>\n<div class=\"codehilite\"><pre><span></span>function expected at\n  @foo α ?m_1 x\nterm has type\n  @linear_map.{0 0 0} α α α ?m_1 (@ring.to_add_comm_group.{0} α ?m_1) (@ring.to_add_comm_group.{0} α ?m_1)\n    (@ring.to_module.{0} α ?m_1)\n    (@ring.to_module.{0} α ?m_1)\n</pre></div>\n\n\n<p>Passing <code>α</code> (or the <code>comm_ring</code> instance) explicitly does fix the issue as the second working example shows, but shouldn't <code>α</code> be determined automatically from the type of <code>x</code>? And if not, why is it shown with <code>pp.all</code> enabled? I don't really understand what I'm doing wrong here.</p>",
        "id": 186188074,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1579617191
    },
    {
        "content": "<p>The <code>linear_algebra</code> lemmas all use coercion to go from linear maps to functions, so I'd prefer that over writing <code>(foo x).to_fun</code>.</p>",
        "id": 186188195,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1579617270
    },
    {
        "content": "<p>This is the same as the equiv coercion issue. If you have <code>e : equiv a b</code> and you want to form the application <code>e x</code> where <code>x : a</code>, it only works if <code>a</code> and <code>b</code> don't contain metavariables. But often <code>e</code> is some term (like your <code>foo</code>) in which you want to determine a metavariable from the type of <code>x</code>, but that's impossible because then the coercion cannot fire yet.</p>",
        "id": 186191554,
        "sender_full_name": "Reid Barton",
        "timestamp": 1579619225
    },
    {
        "content": "<p>I think the core problem was that type instance search won't fire when the goal type still contains metavariables.</p>",
        "id": 186191683,
        "sender_full_name": "Reid Barton",
        "timestamp": 1579619298
    }
]