[
    {
        "content": "<p>Hi there,</p>\n<p>I'm doing a project on topos theory and proof-assistants, and I would like to write some proofs about intuitionistic type theory as presented in Lambek and Scott \"Introduction to Higher Order Logic\", specifically I'm proving that its associated category is a topos. The sequent-tree-proofs are laborious to organise and write out by hand. Would Lean be an appropriate tool for this?</p>\n<p>I essentially want to define Term's inductively, and then create and work with sequents of the form \"p |--_X q\", where |--_X is entailment with a subscript set X of variables, and p,q are Terms with free variables all in X. I am imagining then implementing the rules of deduction as axioms like this, \"axiom rule : A -&gt; B\" where A and B are entailment expressions as before.</p>\n<p>I am unsure how I should marry Lean's existing type theory with the one I'm modelling. Should I endeavour to completely separate them? For example, one rule is \"(r|--_X p &amp; q) iff (r|--_X p) and (r|--_X q)\", in which case I imagine I should write my own conjuction for the use of \"&amp;\" and use the existing \"and\" and \"iff\" in Lean's library.</p>",
        "id": 194032029,
        "sender_full_name": "Billy Price",
        "timestamp": 1586958244
    },
    {
        "content": "<p>This sounds like approximately the right approach except that, instead of using <code>axiom</code>, make \"p |--_X q\" an inductive Prop with the rules of deduction as constructors.</p>",
        "id": 194032856,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586958561
    },
    {
        "content": "<p>Or maybe a type rather than a prop depending on what you want to do with it</p>",
        "id": 194033438,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586958781
    },
    {
        "content": "<p><a href=\"https://flypitch.github.io/\" title=\"https://flypitch.github.io/\">https://flypitch.github.io/</a> is probably useful as an example of embedding other theories into Lean.</p>",
        "id": 194034004,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586959011
    },
    {
        "content": "<p>Something like this? I'm still new to lean and I'm 100% certain this is wrong.<br>\n\"inductive entails (X : set) (p : Term) (q: Term)<br>\n| self_entail : entails X p p<br>\n\"</p>",
        "id": 194034049,
        "sender_full_name": "Billy Price",
        "timestamp": 1586959044
    },
    {
        "content": "<p><code> ```lean </code> at the top of your code and <code> ``` </code> at the bottom to quote it with syntax highlighting</p>",
        "id": 194034200,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586959094
    },
    {
        "content": "<p>On top of Flypitch, there is also <a href=\"https://softwarefoundations.cis.upenn.edu/plf-current/Types.html#lab174\" title=\"https://softwarefoundations.cis.upenn.edu/plf-current/Types.html#lab174\">https://softwarefoundations.cis.upenn.edu/plf-current/Types.html#lab174</a>, which shows something related but not quite (also it's in Coq, so you have to translate syntax)</p>",
        "id": 194034396,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1586959194
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/Intuitionistic.20Type.20Theory.20Proofs/near/194034004\" title=\"#narrow/stream/113488-general/topic/Intuitionistic.20Type.20Theory.20Proofs/near/194034004\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://flypitch.github.io/\" title=\"https://flypitch.github.io/\">https://flypitch.github.io/</a> is probably useful as an example of embedding other theories into Lean.</p>\n</blockquote>\n<p>Is their use of the unicode \\entails a defined notation or is that already part of lean?</p>",
        "id": 194034894,
        "sender_full_name": "Billy Price",
        "timestamp": 1586959394
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> <span class=\"user-mention\" data-user-id=\"116045\">@Jesse Michael Han</span></p>",
        "id": 194036131,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586959876
    },
    {
        "content": "<p>we define our own notion of provability for first-order logic, see fol.lean in the Flypitch repo</p>",
        "id": 194066828,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1586972658
    },
    {
        "content": "<p>Provability is defined in the repository:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">prf</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">formula</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">formula</span> <span class=\"n\">L</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n<span class=\"bp\">|</span> <span class=\"n\">axm</span>     <span class=\"o\">{</span><span class=\"err\">Γ</span> <span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"err\">∈</span> <span class=\"err\">Γ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">prf</span> <span class=\"err\">Γ</span> <span class=\"n\">A</span>\n<span class=\"bp\">|</span> <span class=\"n\">impI</span>    <span class=\"o\">{</span><span class=\"err\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"err\">$</span> <span class=\"n\">formula</span> <span class=\"n\">L</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">prf</span> <span class=\"o\">(</span><span class=\"n\">insert</span> <span class=\"n\">A</span> <span class=\"err\">Γ</span><span class=\"o\">)</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">prf</span> <span class=\"err\">Γ</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"err\">⟹</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">impE</span>    <span class=\"o\">{</span><span class=\"err\">Γ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">B</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">prf</span> <span class=\"err\">Γ</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"err\">⟹</span> <span class=\"n\">B</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">prf</span> <span class=\"err\">Γ</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">prf</span> <span class=\"err\">Γ</span> <span class=\"n\">B</span>\n<span class=\"bp\">|</span> <span class=\"n\">falsumE</span> <span class=\"o\">{</span><span class=\"err\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"err\">$</span> <span class=\"n\">formula</span> <span class=\"n\">L</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">prf</span> <span class=\"o\">(</span><span class=\"n\">insert</span> <span class=\"err\">∼</span><span class=\"n\">A</span> <span class=\"err\">Γ</span><span class=\"o\">)</span> <span class=\"err\">⊥</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">prf</span> <span class=\"err\">Γ</span> <span class=\"n\">A</span>\n<span class=\"bp\">|</span> <span class=\"n\">allI</span>    <span class=\"o\">{</span><span class=\"err\">Γ</span> <span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">prf</span> <span class=\"o\">(</span><span class=\"n\">lift_formula1</span> <span class=\"err\">&#39;&#39;</span> <span class=\"err\">Γ</span><span class=\"o\">)</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">prf</span> <span class=\"err\">Γ</span> <span class=\"o\">(</span><span class=\"bp\">∀</span><span class=\"err\">&#39;</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">allE₂</span>   <span class=\"o\">{</span><span class=\"err\">Γ</span><span class=\"o\">}</span> <span class=\"n\">A</span> <span class=\"n\">t</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">prf</span> <span class=\"err\">Γ</span> <span class=\"o\">(</span><span class=\"bp\">∀</span><span class=\"err\">&#39;</span> <span class=\"n\">A</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">prf</span> <span class=\"err\">Γ</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">[</span><span class=\"n\">t</span> <span class=\"bp\">//</span> <span class=\"mi\">0</span><span class=\"o\">])</span>\n<span class=\"bp\">|</span> <span class=\"n\">ref</span>     <span class=\"o\">(</span><span class=\"err\">Γ</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">prf</span> <span class=\"err\">Γ</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"err\">≃</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">subst₂</span>  <span class=\"o\">{</span><span class=\"err\">Γ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">prf</span> <span class=\"err\">Γ</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"err\">≃</span> <span class=\"n\">t</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">prf</span> <span class=\"err\">Γ</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">[</span><span class=\"n\">s</span> <span class=\"bp\">//</span> <span class=\"mi\">0</span><span class=\"o\">]))</span> <span class=\"o\">:</span> <span class=\"n\">prf</span> <span class=\"err\">Γ</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">[</span><span class=\"n\">t</span> <span class=\"bp\">//</span> <span class=\"mi\">0</span><span class=\"o\">])</span>\n</pre></div>\n\n\n<p><a href=\"https://github.com/flypitch/flypitch/blob/master/src/fol.lean#L816\" title=\"https://github.com/flypitch/flypitch/blob/master/src/fol.lean#L816\">https://github.com/flypitch/flypitch/blob/master/src/fol.lean#L816</a></p>\n<p>This is all done on top of our internal definition of formula of first-order logic.<br>\nHere <code> prf Γ A</code> stands for <code>Γ ⊢ A</code>. So for example <code>impE</code> states that if <code>Γ ⊢ A ⟹ B</code> and <code>Γ ⊢ A</code> then <code>Γ ⊢ B</code>. Some of the other rules are a bit more tricky to decipher, this is because we're using de Bruijn indices for formulas. More details can be found in the two papers we wrote about it: <a href=\"https://flypitch.github.io/papers/\" title=\"https://flypitch.github.io/papers/\">https://flypitch.github.io/papers/</a></p>",
        "id": 194259192,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1587014541
    },
    {
        "content": "<p>I'm trying to write the inductive definition of a Formula in my type theory, in which every Type has a powerset type. One of the Formulas is of the form \"a \\in \\alpha\", where A is a type, a : A, and \\alpha : PA. However Lean is not happy when I try to define this constructor on the last line - \"universe level of type_of(arg <a href=\"https://github.com/leanprover-community/mathlib/issues/1\" title=\"https://github.com/leanprover-community/mathlib/issues/1\">#1</a>) of 'TypeTheory.Formula.elem' is too big for the corresponding inductive datatype\"</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">structure</span> <span class=\"n\">PowerSet</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">Formula</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span>\n<span class=\"bp\">|</span> <span class=\"n\">top</span> <span class=\"o\">:</span> <span class=\"n\">Formula</span>\n<span class=\"bp\">|</span> <span class=\"n\">bot</span> <span class=\"o\">:</span> <span class=\"n\">Formula</span>\n<span class=\"bp\">|</span> <span class=\"n\">and</span> <span class=\"o\">:</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span>\n<span class=\"bp\">|</span> <span class=\"n\">or</span>  <span class=\"o\">:</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span>\n<span class=\"bp\">|</span> <span class=\"n\">imp</span> <span class=\"o\">:</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span>\n<span class=\"bp\">|</span> <span class=\"n\">elem</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">PowerSet</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span>\n</pre></div>\n\n\n<p>I imagine its because I've defined a lot of things to be of type <code>Type</code>, but I don't really understand where things should live. Those things being: the types of my theory (instances of A in my code above), the powersets of those types (same level as normal types?), and Formulas.</p>",
        "id": 195264794,
        "sender_full_name": "Billy Price",
        "timestamp": 1587784039
    },
    {
        "content": "<p>Perhaps try adding the type parameter <code>A</code> to <code>Formula</code> itself, i.e. <code>inductive Formula (A : Type) : Type</code></p>",
        "id": 195264855,
        "sender_full_name": "Donald Sebastian Leung",
        "timestamp": 1587784189
    },
    {
        "content": "<p>Okay cool, I'd like to know why that worked, but also it seems like now every constructor of Formula now depends on this type, which I don't think I want.</p>",
        "id": 195264974,
        "sender_full_name": "Billy Price",
        "timestamp": 1587784382
    },
    {
        "content": "<p>More precisely, this makes it so that there is only one type over which <code>elem</code> can work</p>",
        "id": 195266490,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587787268
    },
    {
        "content": "<p>You can make <code>Formula</code> live in <code>Type 1</code> and then it will work, but the better question is what you intend to do with an uncountable number of formulas</p>",
        "id": 195266529,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587787322
    },
    {
        "content": "<p>I think you need some constraints on what types are supposed to exist in your type theory</p>",
        "id": 195266549,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587787353
    },
    {
        "content": "<p>Why would it be uncountable? Surely the fact that it's defined inductively only gives me countably many?</p>",
        "id": 195267534,
        "sender_full_name": "Billy Price",
        "timestamp": 1587789223
    },
    {
        "content": "<p><code>elem x</code> is different for each <code>x : Type</code></p>",
        "id": 195267583,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587789303
    },
    {
        "content": "<p>what does <code>PowerSet A</code> do?</p>",
        "id": 195267607,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587789346
    },
    {
        "content": "<p>it has no constructor so there can be no instances of it...</p>",
        "id": 195267646,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587789368
    },
    {
        "content": "<p>actually it's a <code>structure</code> so there is one for each <code>A</code></p>",
        "id": 195267653,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587789413
    },
    {
        "content": "<p>I am ambivalent to what PowerSet A is, just that it's also a type in the same way that A is</p>",
        "id": 195267662,
        "sender_full_name": "Billy Price",
        "timestamp": 1587789439
    },
    {
        "content": "<p>but the problem is that <code>A</code> can be anything</p>",
        "id": 195267663,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587789452
    },
    {
        "content": "<p>I claim that <code>PowerSet A -&gt; false</code> for all <code>A</code></p>",
        "id": 195267669,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587789467
    },
    {
        "content": "<p>that's false, <code>PowerSet A ~= unit</code></p>",
        "id": 195267706,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587789483
    },
    {
        "content": "<p>I don't understand structures</p>",
        "id": 195267783,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587789539
    },
    {
        "content": "<p>Yeah okay, well here's my updated attempt (doesn't compile)</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">type</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"n\">prod</span> <span class=\"o\">:</span> <span class=\"n\">type</span> <span class=\"bp\">→</span> <span class=\"n\">type</span> <span class=\"bp\">→</span> <span class=\"n\">type</span>\n<span class=\"bp\">|</span> <span class=\"n\">pow</span>  <span class=\"o\">:</span> <span class=\"n\">type</span> <span class=\"bp\">→</span> <span class=\"n\">type</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">Formula</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"n\">top</span> <span class=\"o\">:</span> <span class=\"n\">Formula</span>\n<span class=\"bp\">|</span> <span class=\"n\">bot</span> <span class=\"o\">:</span> <span class=\"n\">Formula</span>\n<span class=\"bp\">|</span> <span class=\"n\">and</span> <span class=\"o\">:</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span>\n<span class=\"bp\">|</span> <span class=\"n\">or</span>  <span class=\"o\">:</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span>\n<span class=\"bp\">|</span> <span class=\"n\">imp</span> <span class=\"o\">:</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span>\n<span class=\"bp\">|</span> <span class=\"n\">elem</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">type</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">type</span><span class=\"bp\">.</span><span class=\"n\">pow</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span>\n</pre></div>",
        "id": 195267784,
        "sender_full_name": "Billy Price",
        "timestamp": 1587789542
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"255481\">@Billy Price</span> What I think you want is an inductive type declaring the valid types of your theory. At minimum, it should include <code>PowerSet</code> and some fixed collection of base types</p>",
        "id": 195267791,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587789558
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">PowerSet</span><span class=\"bp\">.</span><span class=\"n\">rec</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">PowerSet</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">Sort</span> <span class=\"n\">u_1</span><span class=\"o\">},</span> <span class=\"n\">C</span> <span class=\"n\">PowerSet</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"bp\">→</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">PowerSet</span> <span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"n\">C</span> <span class=\"n\">n</span>\n</pre></div>",
        "id": 195267792,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587789559
    },
    {
        "content": "<p>now I can claim that <code>type -&gt; false</code></p>",
        "id": 195267797,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587789580
    },
    {
        "content": "<p>This is the Type theory I am trying to model in Lean. <a href=\"http://therisingsea.org/notes/ch2018-lecture9.pdf\" title=\"http://therisingsea.org/notes/ch2018-lecture9.pdf\">http://therisingsea.org/notes/ch2018-lecture9.pdf</a></p>",
        "id": 195267839,
        "sender_full_name": "Billy Price",
        "timestamp": 1587789603
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> A structure is like an inductive type with one constructor and many arguments. So it is basically a product of all the fields, and the 0-ary case is unit</p>",
        "id": 195267843,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587789614
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">structure</span> <span class=\"n\">PowerSet</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">Formula</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span>\n<span class=\"bp\">|</span> <span class=\"n\">top</span> <span class=\"o\">:</span> <span class=\"n\">Formula</span>\n<span class=\"bp\">|</span> <span class=\"n\">bot</span> <span class=\"o\">:</span> <span class=\"n\">Formula</span>\n<span class=\"bp\">|</span> <span class=\"n\">and</span> <span class=\"o\">:</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span>\n<span class=\"bp\">|</span> <span class=\"n\">or</span>  <span class=\"o\">:</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span>\n<span class=\"bp\">|</span> <span class=\"n\">imp</span> <span class=\"o\">:</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span>\n<span class=\"bp\">|</span> <span class=\"n\">elem</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">PowerSet</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span>\n</pre></div>",
        "id": 195267847,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587789628
    },
    {
        "content": "<p>I'm not sure if this is the intended interpretation</p>",
        "id": 195267853,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587789653
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I see</p>",
        "id": 195267872,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587789661
    },
    {
        "content": "<p>Here's an easy fix:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">type</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">prod</span> <span class=\"o\">:</span> <span class=\"n\">type</span> <span class=\"bp\">→</span> <span class=\"n\">type</span> <span class=\"bp\">→</span> <span class=\"n\">type</span>\n<span class=\"bp\">|</span> <span class=\"n\">pow</span>  <span class=\"o\">:</span> <span class=\"n\">type</span> <span class=\"bp\">→</span> <span class=\"n\">type</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">Formula</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">top</span> <span class=\"o\">:</span> <span class=\"n\">Formula</span>\n<span class=\"bp\">|</span> <span class=\"n\">bot</span> <span class=\"o\">:</span> <span class=\"n\">Formula</span>\n<span class=\"bp\">|</span> <span class=\"n\">and</span> <span class=\"o\">:</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span>\n<span class=\"bp\">|</span> <span class=\"n\">or</span>  <span class=\"o\">:</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span>\n<span class=\"bp\">|</span> <span class=\"n\">imp</span> <span class=\"o\">:</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span>\n<span class=\"bp\">|</span> <span class=\"n\">elem</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">type</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span>\n</pre></div>",
        "id": 195267914,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587789724
    },
    {
        "content": "<p>The problem is that you don't have a grammar of terms that can inhabit a type</p>",
        "id": 195267926,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587789742
    },
    {
        "content": "<p>here I'm just assuming they are numbered variables, and the type checking is separate</p>",
        "id": 195267929,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587789764
    },
    {
        "content": "<p>Also, <code>type</code> is empty</p>",
        "id": 195267934,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587789791
    },
    {
        "content": "<p>Here's a more well typed version</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">type</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">prod</span> <span class=\"o\">:</span> <span class=\"n\">type</span> <span class=\"bp\">→</span> <span class=\"n\">type</span> <span class=\"bp\">→</span> <span class=\"n\">type</span>\n<span class=\"bp\">|</span> <span class=\"n\">pow</span>  <span class=\"o\">:</span> <span class=\"n\">type</span> <span class=\"bp\">→</span> <span class=\"n\">type</span>\n\n<span class=\"n\">def</span> <span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">type</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">type</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">term</span> <span class=\"n\">a</span> <span class=\"bp\">×</span> <span class=\"n\">term</span> <span class=\"n\">b</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">type</span><span class=\"bp\">.</span><span class=\"n\">pow</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">term</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">Formula</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">top</span> <span class=\"o\">:</span> <span class=\"n\">Formula</span>\n<span class=\"bp\">|</span> <span class=\"n\">bot</span> <span class=\"o\">:</span> <span class=\"n\">Formula</span>\n<span class=\"bp\">|</span> <span class=\"n\">and</span> <span class=\"o\">:</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span>\n<span class=\"bp\">|</span> <span class=\"n\">or</span>  <span class=\"o\">:</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span>\n<span class=\"bp\">|</span> <span class=\"n\">imp</span> <span class=\"o\">:</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span>\n<span class=\"bp\">|</span> <span class=\"n\">elem</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">type</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"o\">(</span><span class=\"n\">type</span><span class=\"bp\">.</span><span class=\"n\">pow</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span>\n</pre></div>\n\n\n<p>but it's still not good because there are too many elements of <code>term (type.pow a)</code></p>",
        "id": 195267987,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587789919
    },
    {
        "content": "<p>Yeah I need to add Unit and Omega, where Omega is interpreted as the type of propositions. At the moment I was modelling Omega with Formula, without explicitly calling it a <code>type</code>, maybe I should try that</p>",
        "id": 195268047,
        "sender_full_name": "Billy Price",
        "timestamp": 1587789988
    },
    {
        "content": "<p>I <strong>don't</strong> think the intended meaning is \"1 is a Type, Ω is a Type, AxB is a type for each A and B, PA is a type for each A, <strong>and this is all there is to it</strong>\"</p>",
        "id": 195268051,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587790030
    },
    {
        "content": "<p>i.e. I don't agree with the use of <code>inductive</code></p>",
        "id": 195268052,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587790035
    },
    {
        "content": "<p>The problem is that this is going to turn into an inductive-recursive type if you aren't careful</p>",
        "id": 195268053,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587790035
    },
    {
        "content": "<p>because the definition of <code>term</code> depends on <code>formula</code> and vice versa</p>",
        "id": 195268056,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587790065
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> Would it not be possible to inject the semantics of each of these types later on?</p>",
        "id": 195268148,
        "sender_full_name": "Billy Price",
        "timestamp": 1587790268
    },
    {
        "content": "<p>When I look at the lecture notes you linked, I see a description of a structure, a system of constraints that defines a \"type system\", not an inductive type enumerating all possible terms</p>",
        "id": 195268188,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587790356
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">type</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">one</span> <span class=\"bp\">|</span> <span class=\"n\">Omega</span> <span class=\"bp\">|</span> <span class=\"n\">prod</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">type</span><span class=\"o\">)</span> <span class=\"bp\">|</span> <span class=\"n\">pow</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">type</span><span class=\"o\">)</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">type</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">prod</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">type</span><span class=\"o\">,</span> <span class=\"n\">term</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"o\">(</span><span class=\"n\">type</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">elem</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">type</span><span class=\"o\">,</span> <span class=\"n\">term</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"o\">(</span><span class=\"n\">type</span><span class=\"bp\">.</span><span class=\"n\">pow</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"n\">type</span><span class=\"bp\">.</span><span class=\"n\">Omega</span>\n<span class=\"c1\">-- what is b3?</span>\n<span class=\"bp\">|</span> <span class=\"n\">and</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"n\">type</span><span class=\"bp\">.</span><span class=\"n\">Omega</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"n\">type</span><span class=\"bp\">.</span><span class=\"n\">Omega</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"n\">type</span><span class=\"bp\">.</span><span class=\"n\">Omega</span>\n<span class=\"bp\">|</span> <span class=\"n\">or</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"n\">type</span><span class=\"bp\">.</span><span class=\"n\">Omega</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"n\">type</span><span class=\"bp\">.</span><span class=\"n\">Omega</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"n\">type</span><span class=\"bp\">.</span><span class=\"n\">Omega</span>\n<span class=\"bp\">|</span> <span class=\"n\">imp</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"n\">type</span><span class=\"bp\">.</span><span class=\"n\">Omega</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"n\">type</span><span class=\"bp\">.</span><span class=\"n\">Omega</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"n\">type</span><span class=\"bp\">.</span><span class=\"n\">Omega</span>\n<span class=\"c1\">-- what is b5??</span>\n</pre></div>",
        "id": 195268191,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587790383
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> and then I looked deeper, and they defined \"Pure type theory\" to be basically the inductive thing</p>",
        "id": 195268193,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587790402
    },
    {
        "content": "<p>I'm not sure how to formalize \"a variable x of type A\"</p>",
        "id": 195268195,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587790411
    },
    {
        "content": "<p>which is required in b3 and b5</p>",
        "id": 195268196,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587790418
    },
    {
        "content": "<p>but here's b2 formalized <span class=\"user-mention\" data-user-id=\"255481\">@Billy Price</span></p>",
        "id": 195268197,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587790437
    },
    {
        "content": "<p>A variable of type A would be a constructor <code>| var {A : type} : nat -&gt; term A</code></p>",
        "id": 195268262,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587790559
    },
    {
        "content": "<p>Awesome, thanks. For the variables, I just need them to act such that I can substitute terms of the <code>type</code> that the variable is associated to.</p>",
        "id": 195268301,
        "sender_full_name": "Billy Price",
        "timestamp": 1587790578
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">type</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">one</span> <span class=\"bp\">|</span> <span class=\"n\">Omega</span> <span class=\"bp\">|</span> <span class=\"n\">prod</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">type</span><span class=\"o\">)</span> <span class=\"bp\">|</span> <span class=\"n\">pow</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">type</span><span class=\"o\">)</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">type</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">prod</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">type</span><span class=\"o\">,</span> <span class=\"n\">term</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"o\">(</span><span class=\"n\">type</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">elem</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">type</span><span class=\"o\">,</span> <span class=\"n\">term</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"o\">(</span><span class=\"n\">type</span><span class=\"bp\">.</span><span class=\"n\">pow</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"n\">type</span><span class=\"bp\">.</span><span class=\"n\">Omega</span>\n<span class=\"bp\">|</span> <span class=\"n\">sep</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">type</span><span class=\"o\">,</span> <span class=\"n\">term</span> <span class=\"n\">type</span><span class=\"bp\">.</span><span class=\"n\">Omega</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"o\">(</span><span class=\"n\">type</span><span class=\"bp\">.</span><span class=\"n\">pow</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">and</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"n\">type</span><span class=\"bp\">.</span><span class=\"n\">Omega</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"n\">type</span><span class=\"bp\">.</span><span class=\"n\">Omega</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"n\">type</span><span class=\"bp\">.</span><span class=\"n\">Omega</span>\n<span class=\"bp\">|</span> <span class=\"n\">or</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"n\">type</span><span class=\"bp\">.</span><span class=\"n\">Omega</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"n\">type</span><span class=\"bp\">.</span><span class=\"n\">Omega</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"n\">type</span><span class=\"bp\">.</span><span class=\"n\">Omega</span>\n<span class=\"bp\">|</span> <span class=\"n\">imp</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"n\">type</span><span class=\"bp\">.</span><span class=\"n\">Omega</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"n\">type</span><span class=\"bp\">.</span><span class=\"n\">Omega</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"n\">type</span><span class=\"bp\">.</span><span class=\"n\">Omega</span>\n<span class=\"bp\">|</span> <span class=\"n\">all</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">type</span><span class=\"o\">,</span> <span class=\"n\">term</span> <span class=\"n\">type</span><span class=\"bp\">.</span><span class=\"n\">Omega</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"n\">type</span><span class=\"bp\">.</span><span class=\"n\">Omega</span>\n<span class=\"bp\">|</span> <span class=\"n\">ex</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">type</span><span class=\"o\">,</span> <span class=\"n\">term</span> <span class=\"n\">type</span><span class=\"bp\">.</span><span class=\"n\">Omega</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"n\">type</span><span class=\"bp\">.</span><span class=\"n\">Omega</span>\n</pre></div>",
        "id": 195268303,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587790591
    },
    {
        "content": "<p>how does this look</p>",
        "id": 195268305,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587790596
    },
    {
        "content": "<p>If you use de bruijn variables you don't need the index on <code>sep</code>,<code>all</code>,<code>ex</code></p>",
        "id": 195268316,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587790669
    },
    {
        "content": "<p>and you are still missing <code>var</code></p>",
        "id": 195268357,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587790706
    },
    {
        "content": "<p>also <code>star</code>,<code>true</code>,<code>false</code></p>",
        "id": 195268365,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587790769
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">type</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">one</span> <span class=\"bp\">|</span> <span class=\"n\">Omega</span> <span class=\"bp\">|</span> <span class=\"n\">prod</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">type</span><span class=\"o\">)</span> <span class=\"bp\">|</span> <span class=\"n\">pow</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">type</span><span class=\"o\">)</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">type</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">type</span><span class=\"o\">,</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"n\">A</span>\n<span class=\"bp\">|</span> <span class=\"n\">star</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"n\">type</span><span class=\"bp\">.</span><span class=\"n\">one</span>\n<span class=\"bp\">|</span> <span class=\"n\">true</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"n\">type</span><span class=\"bp\">.</span><span class=\"n\">Omega</span>\n<span class=\"bp\">|</span> <span class=\"n\">false</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"n\">type</span><span class=\"bp\">.</span><span class=\"n\">Omega</span>\n<span class=\"bp\">|</span> <span class=\"n\">prod</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">type</span><span class=\"o\">,</span> <span class=\"n\">term</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"o\">(</span><span class=\"n\">type</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">elem</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">type</span><span class=\"o\">,</span> <span class=\"n\">term</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"o\">(</span><span class=\"n\">type</span><span class=\"bp\">.</span><span class=\"n\">pow</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"n\">type</span><span class=\"bp\">.</span><span class=\"n\">Omega</span>\n<span class=\"bp\">|</span> <span class=\"n\">sep</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">type</span><span class=\"o\">,</span> <span class=\"n\">term</span> <span class=\"n\">type</span><span class=\"bp\">.</span><span class=\"n\">Omega</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"o\">(</span><span class=\"n\">type</span><span class=\"bp\">.</span><span class=\"n\">pow</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">and</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"n\">type</span><span class=\"bp\">.</span><span class=\"n\">Omega</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"n\">type</span><span class=\"bp\">.</span><span class=\"n\">Omega</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"n\">type</span><span class=\"bp\">.</span><span class=\"n\">Omega</span>\n<span class=\"bp\">|</span> <span class=\"n\">or</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"n\">type</span><span class=\"bp\">.</span><span class=\"n\">Omega</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"n\">type</span><span class=\"bp\">.</span><span class=\"n\">Omega</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"n\">type</span><span class=\"bp\">.</span><span class=\"n\">Omega</span>\n<span class=\"bp\">|</span> <span class=\"n\">imp</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"n\">type</span><span class=\"bp\">.</span><span class=\"n\">Omega</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"n\">type</span><span class=\"bp\">.</span><span class=\"n\">Omega</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"n\">type</span><span class=\"bp\">.</span><span class=\"n\">Omega</span>\n<span class=\"bp\">|</span> <span class=\"n\">all</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">type</span><span class=\"o\">,</span> <span class=\"n\">term</span> <span class=\"n\">type</span><span class=\"bp\">.</span><span class=\"n\">Omega</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"n\">type</span><span class=\"bp\">.</span><span class=\"n\">Omega</span>\n<span class=\"bp\">|</span> <span class=\"n\">ex</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">type</span><span class=\"o\">,</span> <span class=\"n\">term</span> <span class=\"n\">type</span><span class=\"bp\">.</span><span class=\"n\">Omega</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"n\">type</span><span class=\"bp\">.</span><span class=\"n\">Omega</span>\n</pre></div>",
        "id": 195268421,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587790915
    },
    {
        "content": "<p>what do you mean by use de Bruijn variables?</p>",
        "id": 195268458,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587790929
    },
    {
        "content": "<p>that is, binders are defined so that all variable numbers shift up by one and variable number 0 becomes the newly introduced variable</p>",
        "id": 195268466,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587790974
    },
    {
        "content": "<p>same question from me, and I'm also curious how in Lean I could go about \"actually substituting terms\" in either of these cases.</p>",
        "id": 195268467,
        "sender_full_name": "Billy Price",
        "timestamp": 1587790981
    },
    {
        "content": "<p>You have to define <code>subst</code> by recursion</p>",
        "id": 195268472,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587790996
    },
    {
        "content": "<p>This is as opposed to named variables where you say \"variable k is bound now\" and all other variable names stay the same (and variable k outside the binder is not accessible from inside the binder)</p>",
        "id": 195268478,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587791040
    },
    {
        "content": "<p>here it makes just as much sense to use <code>string</code> as <code>nat</code> for the names of variables, but you need to know that there is a way to get fresh variables when you need them</p>",
        "id": 195268518,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587791082
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">type</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">one</span> <span class=\"bp\">|</span> <span class=\"n\">Omega</span> <span class=\"bp\">|</span> <span class=\"n\">prod</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">type</span><span class=\"o\">)</span> <span class=\"bp\">|</span> <span class=\"n\">pow</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">type</span><span class=\"o\">)</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">type</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">type</span><span class=\"o\">,</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"n\">A</span>\n<span class=\"bp\">|</span> <span class=\"n\">star</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"n\">type</span><span class=\"bp\">.</span><span class=\"n\">one</span>\n<span class=\"bp\">|</span> <span class=\"n\">true</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"n\">type</span><span class=\"bp\">.</span><span class=\"n\">Omega</span>\n<span class=\"bp\">|</span> <span class=\"n\">false</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"n\">type</span><span class=\"bp\">.</span><span class=\"n\">Omega</span>\n<span class=\"bp\">|</span> <span class=\"n\">prod</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">type</span><span class=\"o\">,</span> <span class=\"n\">term</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"o\">(</span><span class=\"n\">type</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">elem</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">type</span><span class=\"o\">,</span> <span class=\"n\">term</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"o\">(</span><span class=\"n\">type</span><span class=\"bp\">.</span><span class=\"n\">pow</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"n\">type</span><span class=\"bp\">.</span><span class=\"n\">Omega</span>\n<span class=\"bp\">|</span> <span class=\"n\">sep</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">type</span><span class=\"o\">,</span> <span class=\"n\">term</span> <span class=\"n\">type</span><span class=\"bp\">.</span><span class=\"n\">Omega</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"o\">(</span><span class=\"n\">type</span><span class=\"bp\">.</span><span class=\"n\">pow</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">and</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"n\">type</span><span class=\"bp\">.</span><span class=\"n\">Omega</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"n\">type</span><span class=\"bp\">.</span><span class=\"n\">Omega</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"n\">type</span><span class=\"bp\">.</span><span class=\"n\">Omega</span>\n<span class=\"bp\">|</span> <span class=\"n\">or</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"n\">type</span><span class=\"bp\">.</span><span class=\"n\">Omega</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"n\">type</span><span class=\"bp\">.</span><span class=\"n\">Omega</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"n\">type</span><span class=\"bp\">.</span><span class=\"n\">Omega</span>\n<span class=\"bp\">|</span> <span class=\"n\">imp</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"n\">type</span><span class=\"bp\">.</span><span class=\"n\">Omega</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"n\">type</span><span class=\"bp\">.</span><span class=\"n\">Omega</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"n\">type</span><span class=\"bp\">.</span><span class=\"n\">Omega</span>\n<span class=\"bp\">|</span> <span class=\"n\">all</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">type</span><span class=\"o\">,</span> <span class=\"n\">term</span> <span class=\"n\">type</span><span class=\"bp\">.</span><span class=\"n\">Omega</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"n\">type</span><span class=\"bp\">.</span><span class=\"n\">Omega</span>\n<span class=\"bp\">|</span> <span class=\"n\">ex</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">type</span><span class=\"o\">,</span> <span class=\"n\">term</span> <span class=\"n\">type</span><span class=\"bp\">.</span><span class=\"n\">Omega</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"n\">type</span><span class=\"bp\">.</span><span class=\"n\">Omega</span>\n\n<span class=\"n\">def</span> <span class=\"n\">FV</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">type</span><span class=\"o\">},</span> <span class=\"n\">term</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">finset</span> <span class=\"bp\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">term</span><span class=\"bp\">.</span><span class=\"n\">var</span> <span class=\"n\">A</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"n\">term</span><span class=\"bp\">.</span><span class=\"n\">star</span> <span class=\"o\">:=</span> <span class=\"err\">∅</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"n\">term</span><span class=\"bp\">.</span><span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"err\">∅</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"n\">term</span><span class=\"bp\">.</span><span class=\"n\">false</span> <span class=\"o\">:=</span> <span class=\"err\">∅</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">term</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">FV</span> <span class=\"n\">a</span> <span class=\"err\">∪</span> <span class=\"n\">FV</span> <span class=\"n\">b</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">term</span><span class=\"bp\">.</span><span class=\"n\">elem</span> <span class=\"n\">A</span> <span class=\"n\">a</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">FV</span> <span class=\"n\">a</span> <span class=\"err\">∪</span> <span class=\"n\">FV</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">term</span><span class=\"bp\">.</span><span class=\"n\">sep</span> <span class=\"n\">A</span> <span class=\"n\">a</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">FV</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">erase</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">term</span><span class=\"bp\">.</span><span class=\"n\">and</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">FV</span> <span class=\"n\">p</span> <span class=\"err\">∪</span> <span class=\"n\">FV</span> <span class=\"n\">q</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">term</span><span class=\"bp\">.</span><span class=\"n\">or</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">FV</span> <span class=\"n\">p</span> <span class=\"err\">∪</span> <span class=\"n\">FV</span> <span class=\"n\">q</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">term</span><span class=\"bp\">.</span><span class=\"n\">imp</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">FV</span> <span class=\"n\">p</span> <span class=\"err\">∪</span> <span class=\"n\">FV</span> <span class=\"n\">q</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">term</span><span class=\"bp\">.</span><span class=\"n\">all</span> <span class=\"n\">A</span> <span class=\"n\">φ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">FV</span> <span class=\"n\">φ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">erase</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">term</span><span class=\"bp\">.</span><span class=\"n\">ex</span> <span class=\"n\">A</span> <span class=\"n\">φ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">FV</span> <span class=\"n\">φ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">erase</span> <span class=\"n\">n</span>\n</pre></div>",
        "id": 195268519,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587791090
    },
    {
        "content": "<p>yep</p>",
        "id": 195268528,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587791109
    },
    {
        "content": "<p>this doesn't use de Bruijn though</p>",
        "id": 195268531,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587791125
    },
    {
        "content": "<p>no</p>",
        "id": 195268532,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587791129
    },
    {
        "content": "<p>this is the named variables approach</p>",
        "id": 195268534,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587791136
    },
    {
        "content": "<p>The other major issue with named variables is that alpha equivalence is a thing</p>",
        "id": 195268548,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587791159
    },
    {
        "content": "<p>do I just remove the N if I want to use de Bruijn?</p>",
        "id": 195268594,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587791180
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">type</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">one</span> <span class=\"bp\">|</span> <span class=\"n\">Omega</span> <span class=\"bp\">|</span> <span class=\"n\">prod</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">type</span><span class=\"o\">)</span> <span class=\"bp\">|</span> <span class=\"n\">pow</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">type</span><span class=\"o\">)</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">type</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">type</span><span class=\"o\">,</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"n\">A</span>\n<span class=\"bp\">|</span> <span class=\"n\">star</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"n\">type</span><span class=\"bp\">.</span><span class=\"n\">one</span>\n<span class=\"bp\">|</span> <span class=\"n\">true</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"n\">type</span><span class=\"bp\">.</span><span class=\"n\">Omega</span>\n<span class=\"bp\">|</span> <span class=\"n\">false</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"n\">type</span><span class=\"bp\">.</span><span class=\"n\">Omega</span>\n<span class=\"bp\">|</span> <span class=\"n\">prod</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">type</span><span class=\"o\">,</span> <span class=\"n\">term</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"o\">(</span><span class=\"n\">type</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">elem</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">type</span><span class=\"o\">,</span> <span class=\"n\">term</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"o\">(</span><span class=\"n\">type</span><span class=\"bp\">.</span><span class=\"n\">pow</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"n\">type</span><span class=\"bp\">.</span><span class=\"n\">Omega</span>\n<span class=\"bp\">|</span> <span class=\"n\">sep</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">type</span><span class=\"o\">,</span> <span class=\"n\">term</span> <span class=\"n\">type</span><span class=\"bp\">.</span><span class=\"n\">Omega</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"o\">(</span><span class=\"n\">type</span><span class=\"bp\">.</span><span class=\"n\">pow</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">and</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"n\">type</span><span class=\"bp\">.</span><span class=\"n\">Omega</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"n\">type</span><span class=\"bp\">.</span><span class=\"n\">Omega</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"n\">type</span><span class=\"bp\">.</span><span class=\"n\">Omega</span>\n<span class=\"bp\">|</span> <span class=\"n\">or</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"n\">type</span><span class=\"bp\">.</span><span class=\"n\">Omega</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"n\">type</span><span class=\"bp\">.</span><span class=\"n\">Omega</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"n\">type</span><span class=\"bp\">.</span><span class=\"n\">Omega</span>\n<span class=\"bp\">|</span> <span class=\"n\">imp</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"n\">type</span><span class=\"bp\">.</span><span class=\"n\">Omega</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"n\">type</span><span class=\"bp\">.</span><span class=\"n\">Omega</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"n\">type</span><span class=\"bp\">.</span><span class=\"n\">Omega</span>\n<span class=\"bp\">|</span> <span class=\"n\">all</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">type</span><span class=\"o\">,</span> <span class=\"n\">term</span> <span class=\"n\">type</span><span class=\"bp\">.</span><span class=\"n\">Omega</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"n\">type</span><span class=\"bp\">.</span><span class=\"n\">Omega</span>\n<span class=\"bp\">|</span> <span class=\"n\">ex</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">type</span><span class=\"o\">,</span> <span class=\"n\">term</span> <span class=\"n\">type</span><span class=\"bp\">.</span><span class=\"n\">Omega</span> <span class=\"bp\">→</span> <span class=\"n\">term</span> <span class=\"n\">type</span><span class=\"bp\">.</span><span class=\"n\">Omega</span>\n</pre></div>",
        "id": 195268596,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587791197
    },
    {
        "content": "<p>like this?</p>",
        "id": 195268597,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587791199
    },
    {
        "content": "<p>It affects <code>FV</code> and <code>subst</code></p>",
        "id": 195268598,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587791200
    },
    {
        "content": "<p>but yes, in the definition itself that's all</p>",
        "id": 195268601,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587791211
    },
    {
        "content": "<p>you need operations like <code>lift</code> too</p>",
        "id": 195268607,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587791227
    },
    {
        "content": "<p>what's the signature of <code>lift</code>?</p>",
        "id": 195268608,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587791237
    },
    {
        "content": "<p><code>lift' : nat -&gt; nat -&gt; term A -&gt; term A</code> is such that <code>lift' k n</code> changes <code>var i</code> to <code>var i</code> if <code>i &lt; k</code> and <code>var (i+n)</code> otherwise</p>",
        "id": 195268662,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587791313
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">FV</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">type</span><span class=\"o\">},</span> <span class=\"n\">term</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">finset</span> <span class=\"bp\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">term</span><span class=\"bp\">.</span><span class=\"n\">var</span> <span class=\"n\">A</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"n\">term</span><span class=\"bp\">.</span><span class=\"n\">star</span> <span class=\"o\">:=</span> <span class=\"err\">∅</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"n\">term</span><span class=\"bp\">.</span><span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"err\">∅</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"n\">term</span><span class=\"bp\">.</span><span class=\"n\">false</span> <span class=\"o\">:=</span> <span class=\"err\">∅</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">term</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">FV</span> <span class=\"n\">a</span> <span class=\"err\">∪</span> <span class=\"n\">FV</span> <span class=\"n\">b</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">term</span><span class=\"bp\">.</span><span class=\"n\">elem</span> <span class=\"n\">A</span> <span class=\"n\">a</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">FV</span> <span class=\"n\">a</span> <span class=\"err\">∪</span> <span class=\"n\">FV</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">term</span><span class=\"bp\">.</span><span class=\"n\">sep</span> <span class=\"n\">A</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">((</span><span class=\"n\">FV</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">erase</span> <span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">image</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">pred</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">term</span><span class=\"bp\">.</span><span class=\"n\">and</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">FV</span> <span class=\"n\">p</span> <span class=\"err\">∪</span> <span class=\"n\">FV</span> <span class=\"n\">q</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">term</span><span class=\"bp\">.</span><span class=\"n\">or</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">FV</span> <span class=\"n\">p</span> <span class=\"err\">∪</span> <span class=\"n\">FV</span> <span class=\"n\">q</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">term</span><span class=\"bp\">.</span><span class=\"n\">imp</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">FV</span> <span class=\"n\">p</span> <span class=\"err\">∪</span> <span class=\"n\">FV</span> <span class=\"n\">q</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">term</span><span class=\"bp\">.</span><span class=\"n\">all</span> <span class=\"n\">A</span> <span class=\"n\">φ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">((</span><span class=\"n\">FV</span> <span class=\"n\">φ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">erase</span> <span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">image</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">pred</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">term</span><span class=\"bp\">.</span><span class=\"n\">ex</span> <span class=\"n\">A</span> <span class=\"n\">φ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">((</span><span class=\"n\">FV</span> <span class=\"n\">φ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">erase</span> <span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">image</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">pred</span>\n</pre></div>",
        "id": 195268668,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587791332
    },
    {
        "content": "<p>is this right?</p>",
        "id": 195268669,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587791334
    },
    {
        "content": "<p>You should consult the flypitch project, they worked this all out</p>",
        "id": 195268671,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587791344
    },
    {
        "content": "<p><a href=\"https://github.com/flypitch/flypitch/blob/master/src/fol.lean#L252-L255\" title=\"https://github.com/flypitch/flypitch/blob/master/src/fol.lean#L252-L255\">https://github.com/flypitch/flypitch/blob/master/src/fol.lean#L252-L255</a></p>",
        "id": 195268679,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587791379
    },
    {
        "content": "<p>see also <a href=\"https://github.com/flypitch/flypitch/blob/master/src/fol.lean#L610-L616\" title=\"https://github.com/flypitch/flypitch/blob/master/src/fol.lean#L610-L616\">https://github.com/flypitch/flypitch/blob/master/src/fol.lean#L610-L616</a> for how binders affect things</p>",
        "id": 195268721,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587791417
    },
    {
        "content": "<p>Yeah I've been consulting that as much as possible, but I found it a little difficult to translate to my theory, thank you both for guiding me.</p>",
        "id": 195268731,
        "sender_full_name": "Billy Price",
        "timestamp": 1587791453
    },
    {
        "content": "<p>I think in flypitch they never bothered to define FV, because in de bruijn world it is just as good to say \"all variables are less than n\"</p>",
        "id": 195268737,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587791499
    },
    {
        "content": "<p>So if I use de bruijn indices, have I completely avoided the need for alpha equivalence?</p>",
        "id": 195268780,
        "sender_full_name": "Billy Price",
        "timestamp": 1587791555
    },
    {
        "content": "<p>yes, that's their secret weapon</p>",
        "id": 195268782,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587791576
    },
    {
        "content": "<p>I would imagine this would need to be hardwired into how <code>all</code>, <code>ex</code> and <code>sep</code> are defined, but it seems like you said otherwise above?</p>",
        "id": 195268825,
        "sender_full_name": "Billy Price",
        "timestamp": 1587791687
    },
    {
        "content": "<p>Well, it's a type theory, so there isn't much of a \"definition\" of all,ex,sep</p>",
        "id": 195268833,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587791720
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 195268836,
        "sender_full_name": "Billy Price",
        "timestamp": 1587791738
    },
    {
        "content": "<p>they are just primitive constants, and so far as that goes you just get to remove the <code>x</code></p>",
        "id": 195268837,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587791741
    },
    {
        "content": "<p>The actual content comes in when you write down the rules of the type theory</p>",
        "id": 195268841,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587791759
    },
    {
        "content": "<p>So if I construct a term with var 7 in it, I have decided at that moment that 7 is bound to the 7th binder \"out\" from the appearance of 7?</p>",
        "id": 195268951,
        "sender_full_name": "Billy Price",
        "timestamp": 1587791951
    },
    {
        "content": "<p>And the lifting is to change that number in case I want to bind it to a different \"level\" binder?</p>",
        "id": 195268958,
        "sender_full_name": "Billy Price",
        "timestamp": 1587791986
    },
    {
        "content": "<p>yes, although the convention is that if there are fewer than 7 binders then it is a free variable and you haven't decided yet what to bind it to</p>",
        "id": 195268995,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587792004
    },
    {
        "content": "<p>Right, you need lifting when you want to move an expression from an outer context under a binder without accidentally capturing the new variable</p>",
        "id": 195269001,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587792058
    },
    {
        "content": "<p>I find it helpful to think of the expression like <code>x : nat, y : nat |- x + y</code> carrying its context with it, where here <code>x</code> is var 1 and <code>y</code> is var 0, and lift corresponds to moving this expression into a new context <code>x : nat, y : nat, z : nat |- x + y</code> where now <code>x</code> is var 2 and <code>y</code> is var 1</p>",
        "id": 195269060,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587792210
    },
    {
        "content": "<p>Thats makes it seem that you'd only ever need to lift by 1?</p>",
        "id": 195269108,
        "sender_full_name": "Billy Price",
        "timestamp": 1587792353
    },
    {
        "content": "<p>The general lift comes up when you define lift by recursion</p>",
        "id": 195269167,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587792390
    },
    {
        "content": "<p>Ah okay</p>",
        "id": 195269169,
        "sender_full_name": "Billy Price",
        "timestamp": 1587792403
    },
    {
        "content": "<p>Do I need to use lift again (with negative n?) when you want to substitute a variable for a term?</p>",
        "id": 195269217,
        "sender_full_name": "Billy Price",
        "timestamp": 1587792515
    },
    {
        "content": "<p>You use <code>subst : term A -&gt; term A -&gt; term A</code>, which has the effect of substituting variable 0 for t and lowering all other variables by 1</p>",
        "id": 195269226,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587792558
    },
    {
        "content": "<p>So I'm limited to only substituting variable 0?</p>",
        "id": 195269229,
        "sender_full_name": "Billy Price",
        "timestamp": 1587792599
    },
    {
        "content": "<p>The general version of this also has to include a lift component, where variable k gets substituted, variables above k get reduced by 1, and variables below k stay the same</p>",
        "id": 195269232,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587792602
    },
    {
        "content": "<p>You should only ever have to substitute variable 0</p>",
        "id": 195269285,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587792624
    },
    {
        "content": "<p>because of the way the binders are set up</p>",
        "id": 195269288,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587792636
    },
    {
        "content": "<p>I'm not sure I follow, you just said I could substitute for general variable k</p>",
        "id": 195269298,
        "sender_full_name": "Billy Price",
        "timestamp": 1587792668
    },
    {
        "content": "<p>Like with lift, where you only actually need to lift by 1 but other lifts come up in the inductive definition, in subst you only need to substitute variable 0 but as you go through the binders it stops being variable 0</p>",
        "id": 195269337,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587792724
    },
    {
        "content": "<p>you should look at <code>subst_realize</code>, <code>subst_term</code> and <code>subst_formula</code> in flypitch to see how it is done</p>",
        "id": 195269389,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587792872
    },
    {
        "content": "<p>Cheers, will do</p>",
        "id": 195269393,
        "sender_full_name": "Billy Price",
        "timestamp": 1587792914
    },
    {
        "content": "<p>Thanks again for your help :)</p>",
        "id": 195269502,
        "sender_full_name": "Billy Price",
        "timestamp": 1587793086
    },
    {
        "content": "<p>I think we really need to create a new stream here. We have a math string so that people who are not interested in maths can avoid math messages. I don't know how to call that new stream, and maybe we need more than one, but I would really like to avoid seeing all those discussions about embedding other type theories or ZFC into Lean, and all those discussions about proving programs. I'm very happy that other people find this interesting and use Lean for this purpose. But many people around here have zero interest in those things and can't contribute any useful comment. This is a pretty high traffic chat so we need order. We can't put such specialized discussion in the general stream I also guess some people would actually ask more computer science questions if we had a dedicated stream.</p>",
        "id": 195277082,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1587807518
    },
    {
        "content": "<p>Perhaps we could create a stream \"computer science\"?</p>\n<p>Or should we name it \"type theory\" / \"PL theory\"?</p>",
        "id": 195277516,
        "sender_full_name": "Donald Sebastian Leung",
        "timestamp": 1587808236
    },
    {
        "content": "<p>And I just had my standard half second of utter confusion about why piecewise linear theory enters this discussion. I  proves once again we really need to sort things a bit.</p>",
        "id": 195277569,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1587808323
    },
    {
        "content": "<p>Computer Science, Logic, Program Verification</p>",
        "id": 195277583,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587808350
    },
    {
        "content": "<p>I think we need to separate CS/logic from Program verification, but people who understand those things should tell us</p>",
        "id": 195277592,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1587808392
    },
    {
        "content": "<p>My apologies, I'm new to Zulip Chat so I wasn't sure where else to put this topic.</p>",
        "id": 195279537,
        "sender_full_name": "Billy Price",
        "timestamp": 1587811866
    },
    {
        "content": "<p>It's a fine place to put it :-) But it's certainly true that for people like Patrick and me, we can understand a lot of the chat in general but just don't have the CS background to follow stuff like this because we're mathematicians</p>",
        "id": 195280134,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587812931
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"255481\">@Billy Price</span> there is <em>no reason</em> to apologize. I'm exactly pointing out that you had no choice, and this is a problem.</p>",
        "id": 195280643,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1587813715
    },
    {
        "content": "<p>Okay no worries :)</p>",
        "id": 195280701,
        "sender_full_name": "Billy Price",
        "timestamp": 1587813786
    },
    {
        "content": "<p>Let me emphasize: when I write I'm happy that people work on this topic, use Lean for this, and ask questions about it, I <em>really</em> mean it. And I'm also super happy there are so many messages on this chat. But we simply need ways to filter out stuff. There is no hierarchy involved here, only a lot of people with a lot of different priorities, and only 24 hours a day.</p>",
        "id": 195280898,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1587814152
    },
    {
        "content": "<p>I haven't seen any more discussion of this. Who's decision is it regarding making new streams?</p>",
        "id": 195558946,
        "sender_full_name": "Billy Price",
        "timestamp": 1588078599
    },
    {
        "content": "<p>Anyone can create one. But it would be natural for <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> to decide something here</p>",
        "id": 195558988,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588078626
    },
    {
        "content": "<p>I guess we can do a type theory stream, CS is too broad</p>",
        "id": 195559025,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588078649
    },
    {
        "content": "<p>Logic is also a bit unclear</p>",
        "id": 195559156,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588078697
    },
    {
        "content": "<p>Just to clarify, we're talking about making a stream on the same level as \"announce\", \"general\", \"maths\" etc? Do you call the ones inside those substreams?</p>",
        "id": 195559205,
        "sender_full_name": "Billy Price",
        "timestamp": 1588078731
    },
    {
        "content": "<p>Yes, same level</p>",
        "id": 195559242,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588078746
    },
    {
        "content": "<p>Program verification would be cool, although I think there has been vanishingly small amount of discussion on this topic here</p>",
        "id": 195559245,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588078748
    },
    {
        "content": "<p>Things inside are called topics or threads</p>",
        "id": 195559278,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588078762
    },
    {
        "content": "<p>(Zulip says topic)</p>",
        "id": 195559311,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588078776
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/Intuitionistic.20Type.20Theory.20Proofs/near/195559245\" title=\"#narrow/stream/113488-general/topic/Intuitionistic.20Type.20Theory.20Proofs/near/195559245\">said</a>:</p>\n<blockquote>\n<p>Program verification would be cool, although I think there has been vanishingly small amount of discussion on this topic here</p>\n</blockquote>\n<p>I hope that would help raise this amount</p>",
        "id": 195559415,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588078805
    },
    {
        "content": "<p>Those things are self-sustaining. Program verification is not visible here, hence people don't ask many questions</p>",
        "id": 195559490,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588078842
    },
    {
        "content": "<p>Should they be default streams? I think last time we found out that it's better to make them default at creation time rather than later</p>",
        "id": 195559523,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588078860
    },
    {
        "content": "<p>Yup, just make things default. that will also help new users</p>",
        "id": 195559642,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588078890
    },
    {
        "content": "<p>It is easier to disable a stream than to discover it</p>",
        "id": 195559676,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588078906
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 195559820,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588078945
    }
]