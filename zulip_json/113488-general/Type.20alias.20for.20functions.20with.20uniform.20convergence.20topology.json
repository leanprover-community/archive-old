[
    {
        "content": "<p>When I introduced <a href=\"https://leanprover-community.github.io/mathlib_docs/find/uniform_convergence.topological_space\">docs#uniform_convergence.topological_space</a> and all the related things a while ago, I had to decide wether I should just make them non-instance constructions on <code>X -&gt; Y</code> or make them instances on a type synonym. For the reasons mentionned below, I chose not to make a type alias, but this question came up in basically all of the PR reviews related to this and after working with my definitions my opinion is not clear anymore, so I figured it would be nice to discuss it properly.</p>\n<p>So, basically, my main point for <em>not</em> introducing a type alias was that, in most of the use case I have in mind, we only use this topology on a more specific hom type, not just bare functions (typically, continuous linear maps or bounded continuous maps), which suggests that it may not help at all to make them instances (except for developping the basic theory, but we can have local instances).<br>\nAnother reason I was reluctant to make a type alias is that I'm never quite sure how to make them work properly, especially for function types. Typically, I remember having troubles when using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/weak_dual\">docs#weak_dual</a>, because type ascriptions between defeq types are sometimes completely ignored, which means that in some cases one has to use <code>@</code>s anyway, and I fear this would be annoying here too.<br>\nAlso, this is a minor concern, but if we want to make a type alias for <a href=\"https://leanprover-community.github.io/mathlib_docs/find/uniform_convergence.topology\">docs#uniform_convergence.topology</a>, then we almost surely want one for <a href=\"https://leanprover-community.github.io/mathlib_docs/find/uniform_convergence_on.topology\">docs#uniform_convergence_on.topology</a>, which means a lot of boilerplate.</p>\n<p>On the other hand, <a href=\"https://github.com/leanprover-community/mathlib/pull/16467\">#16467</a> is a clear case where we <em>do</em> use uniform convergence on bare functions: one key fact about equicontinuity is that a family <code>ùìï : Œπ ‚Üí X ‚Üí Œ±</code> is equicontinuous at iff the function <code>swap ùìï : X ‚Üí Œπ ‚Üí Œ±</code> is continuous at <em>when <code>Œπ ‚Üí Œ±</code> is equipped with the topology of uniform convergence</em>.  And, although I wrote in the docstring of this lemma that it should only be used for API building, there are a lot of places where it is really useful to factor code (see for example the <code>topology/algebra/equicontinuity</code> file introduced in <a href=\"https://github.com/leanprover-community/mathlib/pull/17128\">#17128</a>). </p>\n<p>So at that point, I'm not sure what to do anymore. Basically the question is \"is it worth investing in the boilerplate required by the type-alias approach, or will this be used rarely enough that having something slightly painful is fine ?\", and I'd like to get some opinion on that before trying the type-alias approach.</p>\n<p>cc <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> <span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> <span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> <span class=\"user-mention\" data-user-id=\"412682\">@Moritz Doll</span> <span class=\"user-mention\" data-user-id=\"197836\">@Jireh Loreaux</span></p>",
        "id": 309089275,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1668117980
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"268315\">Anatole Dedecker</span> <a href=\"#narrow/stream/113488-general/topic/Type.20alias.20for.20functions.20with.20uniform.20convergence.20topology/near/309089275\">said</a>:</p>\n<blockquote>\n<p>type ascriptions between defeq types are sometimes completely ignored</p>\n</blockquote>\n<p>Try to avoid type ascriptions to translate between defeq types. Instead use functions like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/order_dual.to_dual\">docs#order_dual.to_dual</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/order_dual.of_dual\">docs#order_dual.of_dual</a>. You are allowed to abuse defeq, but only if the type of what you're doing is already known (e.g. <a href=\"https://leanprover-community.github.io/mathlib_docs/find/order_dual.forall\">docs#order_dual.forall</a>). Although I realize that this might be annoying for function types... Maybe you only need the function to your type alias (e.g. <code>to_uniform (swap ùìï)</code>) but you can make your eliminator (<code>of_uniform</code>) silent. I think this will be fine, since if <code>f</code> lives in your type alias, <code>f x</code> can still only mean one thing, and I expect you won't use any/much type-classes on the type <code>X -&gt; Y</code> itself.</p>\n<p>I would try the type alias if I were you.</p>",
        "id": 309208146,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1668178717
    },
    {
        "content": "<p>Thanks for your input Floris!</p>",
        "id": 309215218,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1668180985
    },
    {
        "content": "<p>I would also try the type alias. Like Floris, I expect it should work pretty smoothly.</p>",
        "id": 309216349,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1668181340
    },
    {
        "content": "<p>I've just opened <a href=\"https://github.com/leanprover-community/mathlib/pull/17516\">#17516</a> which implements the type alias approach (I still need to adapt all the docstrings, but apart from that it is ready for review). I works quite smoothly indeed, although I find the \"try adding <code>of_fun</code>s until Lean infers what you want\" part quite unsatisfying, but I think overall it is an improvement over what we currently have.</p>",
        "id": 309440832,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1668337380
    },
    {
        "content": "<p>It should now be ready for review</p>",
        "id": 309463659,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1668350406
    }
]