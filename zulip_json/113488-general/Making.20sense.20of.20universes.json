[
    {
        "content": "<p>I'm having trouble understanding how Lean handles universes in category theory. For example, consider the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.homotopy.fundamental_groupoid</span>\n\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span>\n\n<span class=\"kd\">abbreviation</span> <span class=\"n\">π</span> <span class=\"o\">:=</span> <span class=\"n\">fundamental_groupoid.fundamental_groupoid_functor</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Top.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}}</span> <span class=\"o\">{</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">Top.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}}</span>\n\n<span class=\"sd\">/-- The induced map of the left projection map X × Y → X -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">proj_left</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">π.obj</span> <span class=\"o\">(</span><span class=\"n\">Top.of</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">×</span> <span class=\"n\">B</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"n\">α</span> <span class=\"bp\">⥤</span> <span class=\"o\">(</span><span class=\"n\">π.obj</span> <span class=\"n\">A</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">π.map</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">continuous_fst</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>Note that this doesn't work because <code>A</code> and <code>B</code> are different universes. The error message is hard to decipher, so I don't know exactly what went wrong, however. If I change <code>B</code> to also be in universe <code>u</code>, then the example works. Similarly, if I change <code>A</code> to be in universe <code>max u v</code>, the example works. I guess this means that <code>π.obj A</code> has to be in the same universe as <code>(π.obj (Top.of (A × B))).α</code>.</p>\n<p>What I want is for <code>A</code> to live in universe <code>u</code>, <code>B</code> to live in universe <code>v</code>, <code>A × B</code> to live in universe <code>max u v</code>,  and then <code>(π.obj A).α</code> to be promoted to universe <code>max u v</code>.</p>\n<p>Eventually, I want to be able to use the fundamental groupoid on spaces like <code>I × X</code>(where <code>I</code> is the unit interval), which is useful because it is the domain of homotopies. However, is using <code>ulift</code> to promote <code>I</code> to the same universe as <code>X</code> really the best way? Or can I make some of this projection stuff work even when the two spaces are in different universes?</p>",
        "id": 268102811,
        "sender_full_name": "Praneeth Kolichala",
        "timestamp": 1642219138
    },
    {
        "content": "<p>Inspect the type of <code>\\pi.map</code> after writing <code>set_option pp.universes true</code></p>",
        "id": 268103660,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1642220438
    },
    {
        "content": "<p>It's because of the fact that pi is a functor.</p>",
        "id": 268103664,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1642220449
    },
    {
        "content": "<p>You are trying to apply <code>fundamental_groupoid_functor: Top ⥤ category_theory.Groupoid</code> to the morphism <code>A × B ⟶ A</code> in <code>Top</code>, but <code>A × B</code> and <code>A</code> aren't in the same universe, while objects in a category (<code>Top</code> here) have to be in the same universe, so there isn't such a morphism no matter which universe Lean specializes <code>Top</code> to. I think your best chance is to factor out the <code>map</code> part of <code>fundamental_groupoid_functor</code> as <code>fundamental_groupoid_map</code> that takes a continuous map argument (which is polymorphic in two independent universe variables for the source and the target) instead of a morphism in <code>Top</code>, and use it to define your <code>proj_left</code> instead.</p>",
        "id": 268103824,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1642220684
    },
    {
        "content": "<p>In lean-homotopy-theory I specialized most stuff to <code>Type</code> due to this issue (and because I felt no particular need to handle larger universes), e.g. in <a href=\"https://github.com/rwbarton/lean-homotopy-theory/blob/lean-3.4.2/src/homotopy_theory/topological_spaces/cylinder.lean\">https://github.com/rwbarton/lean-homotopy-theory/blob/lean-3.4.2/src/homotopy_theory/topological_spaces/cylinder.lean</a></p>",
        "id": 268104092,
        "sender_full_name": "Reid Barton",
        "timestamp": 1642221171
    }
]