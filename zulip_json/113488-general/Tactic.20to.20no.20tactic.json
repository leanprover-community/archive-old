[
    {
        "content": "<p>Is there an easy way to re-write the last function without using tactic?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">section</span>\n<span class=\"kn\">parameters</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable</span> <span class=\"n\">p</span><span class=\"o\">]</span>\n<span class=\"n\">def</span> <span class=\"n\">cnd₁</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n<span class=\"n\">def</span> <span class=\"n\">cnd₂</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n<span class=\"n\">def</span> <span class=\"kn\">check</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">p</span> <span class=\"k\">then</span> <span class=\"n\">cnd₁</span> <span class=\"k\">else</span> <span class=\"n\">cnd₂</span>\n<span class=\"n\">def</span> <span class=\"n\">f₁</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">:</span><span class=\"n\">cnd₁</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n<span class=\"n\">def</span> <span class=\"n\">f₂</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">:</span><span class=\"n\">cnd₂</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n<span class=\"n\">def</span> <span class=\"n\">f</span>  <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">:</span><span class=\"kn\">check</span><span class=\"o\">):</span> <span class=\"n\">nat</span> <span class=\"o\">:=</span> <span class=\"c1\">-- if p then f₁ cnd₁ else f₂ cnd₂</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">p</span> <span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"kn\">check</span><span class=\"o\">,</span><span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">c</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">f₁</span> <span class=\"n\">c</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">f₂</span> <span class=\"n\">c</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 125479107,
        "sender_full_name": "Nima",
        "timestamp": 1524281309
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>theorem check_of_p (h : p) : check ↔ cnd₁ := iff_of_eq (if_pos h)\ntheorem check_of_not_p (h : ¬ p) : check ↔ cnd₂ := iff_of_eq (if_neg h)\n\ndef f (c:check) : nat :=\nif h : p then\n  f₁ ((check_of_p h).1 c)\nelse\n  f₂ ((check_of_not_p h).1 c)\n</pre></div>",
        "id": 125479500,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524282291
    },
    {
        "content": "<p>Thank you, <code>if_pos</code> and <code>if_neg</code> are what I was looking for.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">f&#39;</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">:</span><span class=\"kn\">check</span><span class=\"o\">):</span> <span class=\"n\">nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">h</span><span class=\"o\">:</span><span class=\"n\">p</span> <span class=\"k\">then</span> <span class=\"n\">f₁</span> <span class=\"o\">(</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"o\">(</span><span class=\"n\">if_pos</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n  <span class=\"k\">else</span>        <span class=\"n\">f₁</span> <span class=\"o\">(</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"o\">(</span><span class=\"n\">if_neg</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 125481942,
        "sender_full_name": "Nima",
        "timestamp": 1524288274
    },
    {
        "content": "<p>Nima beats Mario</p>",
        "id": 125482384,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524289351
    },
    {
        "content": "<p>I wrote it that way for a reason. You should not rely on definitional expansion in this way as it is brittle. The point of the lemma is to isolate the unfolding of <code>check</code> so that this isn't happening in an ambiguous context</p>",
        "id": 125482438,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524289483
    },
    {
        "content": "<p>The usage of <code>iff</code> is by convention since these are propositions</p>",
        "id": 125482447,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524289534
    }
]