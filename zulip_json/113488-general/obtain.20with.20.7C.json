[
    {
        "content": "<p>I thought that <code>obtain</code> had the same parser as <code>rcases</code> and <code>rintro</code>, but it doesn't work when there is a bar at the top level:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"bp\">∨</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">obtain</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"bp\">|</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"bp\">∨</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"c1\">-- parser fail</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 193750742,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586763015
    },
    {
        "content": "<p>The parentheses shouldn't even be necessary in this case since the <code>:</code> terminates the pattern, so <code>obtain h | h : true ∨ true := p</code> could even be made to work</p>",
        "id": 193750773,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586763080
    },
    {
        "content": "<p>but the docs seem to suggest that a \\&lt; \\&gt; has to come at the top level</p>",
        "id": 193750779,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586763097
    },
    {
        "content": "<p>I'm almost certain <code>obtain</code> uses the <code>rcases</code> parser, so this is probably a precedence issue or something. Could you open an issue (if you don't feel like fixing yourself)? I can look into it but not immediately.</p>",
        "id": 193751096,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1586763512
    },
    {
        "content": "<p>Technically parentheses are not legal there anyway since we are parsing token by token -- they are only supported if there is direct support for them, as in <code>rintro</code></p>",
        "id": 193751191,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586763701
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>  <span class=\"k\">obtain</span> <span class=\"n\">h</span> <span class=\"bp\">|</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"bp\">∨</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n</pre></div>\n\n\n<p>works</p>",
        "id": 193751256,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586763749
    },
    {
        "content": "<p>oh</p>",
        "id": 193751273,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586763804
    },
    {
        "content": "<p>yeah, just found that out myself</p>",
        "id": 193751282,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586763813
    },
    {
        "content": "<p>is this a new tactic?</p>",
        "id": 193751335,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586763856
    },
    {
        "content": "<p>somewhat?</p>",
        "id": 193751340,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586763866
    },
    {
        "content": "<p>it's at least 6 months old by now</p>",
        "id": 193751344,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586763878
    },
    {
        "content": "<p>It's just <code>rcases</code> with its arguments in a different order</p>",
        "id": 193751359,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586763910
    },
    {
        "content": "<p>I think the docstring threw me off with <code>obtain ⟨patt⟩ : type := proof</code></p>",
        "id": 193751418,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586764007
    },
    {
        "content": "<p>which makes it look like the pattern needs to be in brackets</p>",
        "id": 193751422,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586764027
    },
    {
        "content": "<p>it would be nice to add support for type ascriptions inside an rcases pattern so you can also write <code>obtain (h : true) | (h : true) := p,</code></p>",
        "id": 193751500,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586764140
    }
]