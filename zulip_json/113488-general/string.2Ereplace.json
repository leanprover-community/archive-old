[
    {
        "content": "<p>Currently, <code>to_additive</code> can replace substrings that don't contain <code>_</code> to guess the additive version of the name.<br>\nSo <code>mul</code> becomes <code>add</code>, and <code>one</code> becomes <code>zero</code>.<br>\nI would like to add support for mapping <code>one_le</code> to <code>nonneg</code> and <code>one_lt</code> to <code>pos</code>, etc...</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\">- Dictionary of words used by `to_additive.guess_name` to autogenerate</span>\n<span class=\"cm\">names. -/</span>\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">tokens_dict</span> <span class=\"o\">:</span> <span class=\"n\">native</span><span class=\"bp\">.</span><span class=\"n\">rb_map</span> <span class=\"n\">string</span> <span class=\"n\">string</span> <span class=\"o\">:=</span>\n<span class=\"n\">native</span><span class=\"bp\">.</span><span class=\"n\">rb_map</span><span class=\"bp\">.</span><span class=\"n\">of_list</span> <span class=\"err\">$</span>\n<span class=\"o\">[(</span><span class=\"s2\">&quot;one_le&quot;</span><span class=\"o\">,</span> <span class=\"s2\">&quot;nonneg&quot;</span><span class=\"o\">),</span> <span class=\"c1\">-- this doesn&#39;t work</span>\n  <span class=\"o\">(</span><span class=\"s2\">&quot;mul&quot;</span><span class=\"o\">,</span> <span class=\"s2\">&quot;add&quot;</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"s2\">&quot;one&quot;</span><span class=\"o\">,</span> <span class=\"s2\">&quot;zero&quot;</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"s2\">&quot;inv&quot;</span><span class=\"o\">,</span> <span class=\"s2\">&quot;neg&quot;</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"s2\">&quot;prod&quot;</span><span class=\"o\">,</span> <span class=\"s2\">&quot;sum&quot;</span><span class=\"o\">)]</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">- Autogenerate target name for `to_additive`. -/</span>\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">guess_name</span> <span class=\"o\">:</span> <span class=\"n\">string</span> <span class=\"bp\">→</span> <span class=\"n\">string</span> <span class=\"o\">:=</span>\n<span class=\"n\">string</span><span class=\"bp\">.</span><span class=\"n\">map_tokens</span> <span class=\"err\">&#39;</span><span class=\"bp\">_</span><span class=\"err\">&#39;</span> <span class=\"err\">$</span>\n<span class=\"n\">string</span><span class=\"bp\">.</span><span class=\"n\">map_tokens</span> <span class=\"err\">&#39;&#39;&#39;</span> <span class=\"err\">$</span>\n<span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">tokens_dict</span><span class=\"bp\">.</span><span class=\"n\">find</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">get_or_else</span> <span class=\"n\">s</span>\n</code></pre></div>",
        "id": 198855969,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590563051
    },
    {
        "content": "<p>Is there some sort of <code>string.replace</code> or anything I could use for this?</p>",
        "id": 198856030,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590563129
    },
    {
        "content": "<p>As you can see, <code>guess_name</code> splits the name on <code>_</code> and <code>'</code>, maps subwords using <code>tokens_dict</code>, then joins the results.</p>",
        "id": 198856104,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1590563182
    },
    {
        "content": "<p>Yes... that's why I'm asking here...</p>",
        "id": 198856126,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590563204
    },
    {
        "content": "<p>I would like to have a fancier <code>guess_name</code>, but since lean isn't python, I don't know how to do this.</p>",
        "id": 198856158,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590563233
    },
    {
        "content": "<p><code>import data.string.regex</code> didn't work <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 198856535,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590563475
    },
    {
        "content": "<p>We need someone to formalise Chomsky's formal languages etc...</p>",
        "id": 198856555,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590563499
    },
    {
        "content": "<p>Should I write a <code>string.replace</code> or is that something that typically needs VM support?</p>",
        "id": 198857706,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590564423
    },
    {
        "content": "<p>Look at <code>data.string.defs</code> and <code>data.string.basic</code>.  If you can find nothing there, you can always convert the string to a list of characters and back.</p>",
        "id": 198858019,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1590564613
    },
    {
        "content": "<p>Hmmm... it's not there</p>",
        "id": 198858826,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590565182
    },
    {
        "content": "<p>I'll see if I get get something working</p>",
        "id": 198858835,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590565193
    },
    {
        "content": "<p>Why not use a function that processes the list after splitting so that <code>tr (\"one\" :: \"le\" :: s) = \"nonneg\" :: tr s</code></p>",
        "id": 198859130,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590565402
    },
    {
        "content": "<p>that way you don't have to do any string manipulation, and you also don't introduce false matches like <code>zone_le ~&gt; znonneg</code></p>",
        "id": 198859202,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590565447
    },
    {
        "content": "<p>Yup, that's what I'm trying now</p>",
        "id": 198859623,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590565791
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\">- Dictionary used by `to_additive.guess_name` to autogenerate names. -/</span>\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">tr</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">string</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">string</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"s2\">&quot;one&quot;</span> <span class=\"bp\">::</span> <span class=\"s2\">&quot;le&quot;</span> <span class=\"bp\">::</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"s2\">&quot;nonneg&quot;</span> <span class=\"bp\">::</span> <span class=\"n\">tr</span> <span class=\"n\">s</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"s2\">&quot;one&quot;</span> <span class=\"bp\">::</span> <span class=\"s2\">&quot;lt&quot;</span> <span class=\"bp\">::</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"s2\">&quot;pos&quot;</span>    <span class=\"bp\">::</span> <span class=\"n\">tr</span> <span class=\"n\">s</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"s2\">&quot;le&quot;</span> <span class=\"bp\">::</span> <span class=\"s2\">&quot;one&quot;</span> <span class=\"bp\">::</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"s2\">&quot;nonpos&quot;</span> <span class=\"bp\">::</span> <span class=\"n\">tr</span> <span class=\"n\">s</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"s2\">&quot;lt&quot;</span> <span class=\"bp\">::</span> <span class=\"s2\">&quot;one&quot;</span> <span class=\"bp\">::</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"s2\">&quot;neg&quot;</span>    <span class=\"bp\">::</span> <span class=\"n\">tr</span> <span class=\"n\">s</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"s2\">&quot;mul&quot;</span> <span class=\"bp\">::</span> <span class=\"n\">s</span><span class=\"o\">)</span>         <span class=\"o\">:=</span> <span class=\"s2\">&quot;add&quot;</span>    <span class=\"bp\">::</span> <span class=\"n\">tr</span> <span class=\"n\">s</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"s2\">&quot;inv&quot;</span> <span class=\"bp\">::</span> <span class=\"n\">s</span><span class=\"o\">)</span>         <span class=\"o\">:=</span> <span class=\"s2\">&quot;neg&quot;</span>    <span class=\"bp\">::</span> <span class=\"n\">tr</span> <span class=\"n\">s</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"s2\">&quot;div&quot;</span> <span class=\"bp\">::</span> <span class=\"n\">s</span><span class=\"o\">)</span>         <span class=\"o\">:=</span> <span class=\"s2\">&quot;sub&quot;</span>    <span class=\"bp\">::</span> <span class=\"n\">tr</span> <span class=\"n\">s</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"s2\">&quot;one&quot;</span> <span class=\"bp\">::</span> <span class=\"n\">s</span><span class=\"o\">)</span>         <span class=\"o\">:=</span> <span class=\"s2\">&quot;zero&quot;</span>   <span class=\"bp\">::</span> <span class=\"n\">tr</span> <span class=\"n\">s</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"s2\">&quot;prod&quot;</span> <span class=\"bp\">::</span> <span class=\"n\">s</span><span class=\"o\">)</span>        <span class=\"o\">:=</span> <span class=\"s2\">&quot;sum&quot;</span>    <span class=\"bp\">::</span> <span class=\"n\">tr</span> <span class=\"n\">s</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">::</span> <span class=\"n\">s</span><span class=\"o\">)</span>             <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">::</span> <span class=\"n\">tr</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span>                   <span class=\"o\">:=</span> <span class=\"o\">[]</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">- Autogenerate target name for `to_additive`. -/</span>\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">guess_name</span> <span class=\"o\">:</span> <span class=\"n\">string</span> <span class=\"bp\">→</span> <span class=\"n\">string</span> <span class=\"o\">:=</span>\n<span class=\"n\">string</span><span class=\"bp\">.</span><span class=\"n\">map_tokens</span> <span class=\"err\">&#39;&#39;&#39;</span> <span class=\"err\">$</span>\n<span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">string</span><span class=\"bp\">.</span><span class=\"n\">intercalate</span> <span class=\"o\">(</span><span class=\"n\">string</span><span class=\"bp\">.</span><span class=\"n\">singleton</span> <span class=\"err\">&#39;</span><span class=\"bp\">_</span><span class=\"err\">&#39;</span><span class=\"o\">)</span> <span class=\"err\">$</span>\n<span class=\"n\">tr</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">split_on</span> <span class=\"err\">&#39;</span><span class=\"bp\">_</span><span class=\"err\">&#39;</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 198860738,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590566534
    },
    {
        "content": "<p>Nope, I see what I need to fix</p>",
        "id": 198860842,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590566616
    },
    {
        "content": "<p><code>tr [\"foo\", \"one\"]</code>?</p>",
        "id": 198860849,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1590566619
    },
    {
        "content": "<p>Exactly</p>",
        "id": 198861030,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590566719
    },
    {
        "content": "<p>Fixed</p>",
        "id": 198861077,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590566753
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">guess_name</span> <span class=\"s2\">&quot;le_mul_of_one_le_right&#39;&quot;</span> <span class=\"c1\">-- &quot;le_add_of_nonneg_right&#39;&quot;</span>\n</code></pre></div>",
        "id": 198861174,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590566792
    }
]