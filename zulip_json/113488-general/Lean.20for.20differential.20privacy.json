[
    {
        "content": "<p>The goal of differential privacy is to share information about a database without giving away information about individuals in that database. I'd like to share a collaboration with some colleagues working in that area. I helped them to verify their latest result: <a href=\"https://arxiv.org/pdf/2205.03470.pdf\">https://arxiv.org/pdf/2205.03470.pdf</a>. Search the PDF for \"Lean\" to see the interesting bits ;-).</p>\n<p>The formalization process revealed that the first version of the theorem was flawed and we had to fix it. All authors and all reviewers had missed that flaw before we started to formalize.</p>",
        "id": 285642608,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1654847802
    },
    {
        "content": "<p>Very nice!<br>\nI am very happy to read that you found the <code>measurability</code> tactic useful. The paper also mentions in section 3.2 that some measurability proofs had to be done by hand. I would be glad to know about any measurability goal that the tactic did not solve, but which should be simple enough for it to work. I want to work on that tactic again soon, in particular to make it prove <code>strongly_measurable</code> goals but also to improve it generally.</p>",
        "id": 285645109,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1654849556
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"350992\">@Rémy Degenne</span> Here are two examples:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- lean_version = \"leanprover-community/lean:3.32.1\"</span>\n<span class=\"c1\">-- mathlib = {git = \"https://github.com/leanprover-community/mathlib\", rev = \"2e1e98fac6fa181ce57f9ce04914bf4cbe3120bd\"}</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">measure_theory.constructions.pi</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.matrix.notation</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">measure_theory</span>\n\n<span class=\"kd\">@[measurability]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">measurable.vec_cons</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">measurable_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">measurable_space</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">measurable</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"n\">measurable</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">measurable</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">matrix.vec_cons</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">O</span> <span class=\"bp\">Ω</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">measurable_space</span> <span class=\"n\">O</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">measurable_space</span> <span class=\"bp\">Ω</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">measurable</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">oω</span> <span class=\"o\">:</span> <span class=\"n\">O</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"bp\">Ω</span><span class=\"o\">)),</span>\n    <span class=\"n\">matrix.vec_cons</span> <span class=\"n\">oω.fst</span> <span class=\"n\">matrix.vec_empty</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">measurable.vec_cons</span><span class=\"o\">,</span>\n  <span class=\"n\">measurability</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">O</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">measurable_space</span> <span class=\"n\">O</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">O</span> <span class=\"bp\">×</span> <span class=\"n\">O</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">hs</span><span class=\"o\">:</span> <span class=\"n\">measurable_set</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">measurable_set</span>\n    <span class=\"o\">{</span><span class=\"n\">ω</span> <span class=\"o\">:</span> <span class=\"n\">O</span> <span class=\"bp\">×</span> <span class=\"n\">O</span> <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">ω.snd</span><span class=\"o\">,</span> <span class=\"n\">ω.fst</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">measurable.prod_mk</span><span class=\"o\">,</span>\n  <span class=\"n\">measurability</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Note that the mathlib version is a bit old. Maybe the issues have been fixed in the meantime?</p>\n<p>For the first example, I don't understand at all why I have to apply <code>measurable.vec_cons</code> manually. </p>\n<p>In the second example, I'd understand if it is beyond the scope of the tactic to apply <code>measurable.prod_mk</code> automatically, but maybe it's worth considering.</p>",
        "id": 285648569,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1654851749
    },
    {
        "content": "<p>Thanks! I'll look into it.</p>",
        "id": 285651019,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1654853126
    }
]