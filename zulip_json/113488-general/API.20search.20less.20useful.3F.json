[
    {
        "content": "<p>Is it just my imagination, or has the API search on our webpage <br>\n<a href=\"https://leanprover-community.github.io/mathlib_docs/\">https://leanprover-community.github.io/mathlib_docs/</a><br>\nbecome less useful recently?</p>\n<p>IIRC, we used to be able to type, for example, <code>add monoid hom</code> and have <code>add_monoid_hom</code> appear in the automatically populated list. <br>\nThis is no longer the case. </p>\n<p>Am I just misremembering?</p>",
        "id": 269783960,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1643395851
    },
    {
        "content": "<p>Gabriel just did a big change to search.</p>",
        "id": 269784190,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643395959
    },
    {
        "content": "<p>It seems that you should now do substrings. So <code>addmonhom</code> should work</p>",
        "id": 269784208,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1643395972
    },
    {
        "content": "<p>I'm trying to debug it <a href=\"#narrow/stream/113488-general/topic/edit.20distance.20for.20ranking.20search.20results/near/269777384\">right now</a></p>",
        "id": 269784245,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1643395989
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/API.20search.20less.20useful.3F/near/269784208\">said</a>:</p>\n<blockquote>\n<p>It seems that you should now do substrings. So <code>addmonhom</code> should work</p>\n</blockquote>\n<p>Why is this better?</p>",
        "id": 269784412,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1643396049
    },
    {
        "content": "<p>it's faster, is the essence</p>",
        "id": 269784455,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1643396062
    },
    {
        "content": "<p>Gabriel said that it's not intended. I'm trying to understand why whitespaces are making the queries return nothing</p>",
        "id": 269784547,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1643396106
    },
    {
        "content": "<p>you can sort of game it to your advantage, too, for example I can type <code>nfringofinteger</code> for <a href=\"https://leanprover-community.github.io/mathlib_docs/find/number_field.ring_of_integers\">docs#number_field.ring_of_integers</a></p>",
        "id": 269784557,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1643396112
    },
    {
        "content": "<p>Yeah, just tried what Eric said and it's indeed very nice!</p>",
        "id": 269784611,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643396136
    },
    {
        "content": "<p>Maybe I'm just a gumpy mathematician, but I would still like to be able to write <code>ring of integers</code></p>",
        "id": 269784724,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1643396174
    },
    {
        "content": "<p>Maybe whitespace can count as \"match any character\"</p>",
        "id": 269784836,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1643396222
    },
    {
        "content": "<p>I think the most useful interpretation of whitespace would be conjunction.  That is, <code>ring of integers</code> would require all of <code>ring</code> and <code>of</code> and <code>integers</code> to match the declaration name.  Which is kind of what was happening before.</p>",
        "id": 269784951,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1643396275
    },
    {
        "content": "<p>The new search finds all declaration where the letters of the pattern occur in the declaration in the same order.</p>",
        "id": 269785177,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1643396359
    },
    {
        "content": "<p>What if we strip whitespaces from the user's input?</p>",
        "id": 269785245,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1643396384
    },
    {
        "content": "<p>As a regular expression, right now <code>ring int</code> seems like it searches for <code>.*r.*i.*n.*g.* .*i.*n.*t.*</code>, but it could search for <code>`.*r.*i.*n.*g.*..*i.*n.*t.*</code> instead and perhaps make grumpy mathematicians happy, so long as you get the right order.</p>\n<p>Conjunction makes sense, too.</p>",
        "id": 269785252,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1643396387
    },
    {
        "content": "<p>The idea was to bring the search closer to how it works in vscode in Lean 4 (with ctrl+p #).</p>",
        "id": 269785366,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1643396415
    },
    {
        "content": "<p>Hmm, feels a bit weird because a search field in a browser and a development environment are very different contexts (maybe this is because it's causing some strangeness)</p>",
        "id": 269785920,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1643396621
    },
    {
        "content": "<p>Elaborating a bit further, we expect that hitting the space bar (or ESC) closes/cancels out search queries in dev environments. But we also (unconsciously?) expect that white spaces don't crash the query altogether in web browsers.<br>\nWhat do you guys think? <a href=\"https://github.com/leanprover-community/doc-gen/pull/155\">https://github.com/leanprover-community/doc-gen/pull/155</a></p>",
        "id": 269791055,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1643398902
    },
    {
        "content": "<p>BTW, would it be hard to search in docstrings too? E.g., I want to type \"pigeonhole\" and see the list of pigeonhole principle lemmas in mathlib.</p>",
        "id": 269791144,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1643398933
    },
    {
        "content": "<p>Currently I use <code>git grep</code> (more precisely, Emacs's <code>vc-git-grep</code>)</p>",
        "id": 269791216,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1643398969
    },
    {
        "content": "<p>I go for VSCode search 50% of the time, honestly</p>",
        "id": 269791236,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1643398982
    },
    {
        "content": "<blockquote>\n<p>BTW, would it be hard to search in docstrings too?</p>\n</blockquote>\n<p>There's another thread discussing a PR implementing that <a href=\"https://github.com/leanprover-community/doc-gen/pull/131\">https://github.com/leanprover-community/doc-gen/pull/131</a> but it's horribly slow.  You can try it out at <a href=\"http://leanprover-community.github.io/mathlib_docs_demo\">http://leanprover-community.github.io/mathlib_docs_demo</a></p>",
        "id": 269793734,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1643400036
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> you can try <code>add monoid hom</code> again <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 269801071,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1643403346
    },
    {
        "content": "<p>Nice!</p>",
        "id": 269801141,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1643403372
    },
    {
        "content": "<p>And with <code>rng f ntgrs</code>, we get <code>number_field.ring_of_integers</code> as well!</p>",
        "id": 269801244,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1643403436
    },
    {
        "content": "<p>I think something that would be nice would be to prioritize <code>def</code>s over lemmata, because right now, finding (for example) <code>number_field.ring_of_integers</code> the way you usually would (ring of integers) prioritizes all of the <code>function_field.ring_of_integers</code> lemmas.</p>",
        "id": 269809918,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1643407890
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/113488-general/topic/API.20search.20less.20useful.3F/near/269809918\">said</a>:</p>\n<blockquote>\n<p>I think something that would be nice would be to prioritize <code>def</code>s over lemmata, because right now, finding (for example) <code>number_field.ring_of_integers</code> the way you usually would (ring of integers) prioritizes all of the <code>function_field.ring_of_integers</code> lemmas.</p>\n</blockquote>\n<p>I've noticed this many times when searching for the definition of the integral (!),<br>\n<a href=\"https://leanprover-community.github.io/mathlib_docs/find/measure_theory.integral\">docs#measure_theory.integral</a><br>\nwhich doesn't turn up anywhere on the list of things when you type \"integral\" into the API search box.</p>",
        "id": 269827772,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1643419742
    },
    {
        "content": "<p>The first link at the 404 page for <a href=\"https://leanprover-community.github.io/mathlib_docs/find/convert\">docs#convert</a> is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/convert\">https://leanprover-community.github.io/mathlib_docs/find/convert</a>, which just links back to the same 404 page.  Is this intended or unavoidable behaviour?</p>",
        "id": 269886288,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1643487562
    }
]