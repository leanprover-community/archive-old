[
    {
        "content": "<p>Could this be a simp lemma?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">forall_or_imp</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">q</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"bp\">;</span> <span class=\"n\">intros</span><span class=\"o\">,</span>\n\n  <span class=\"k\">have</span> <span class=\"n\">ra</span> <span class=\"o\">:=</span> <span class=\"n\">a_1</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">ra</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">ra</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">qx</span><span class=\"o\">,</span> <span class=\"n\">a_1</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">or.inr</span> <span class=\"n\">qx</span><span class=\"o\">)⟩,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">a_2</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">a_1</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">a_2</span><span class=\"o\">,</span> <span class=\"n\">assumption</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">a_1</span><span class=\"o\">,</span> <span class=\"n\">solve_by_elim</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 211279304,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1601050500
    },
    {
        "content": "<p>try <code>simp [or_imp_distrib]</code>?</p>",
        "id": 211279744,
        "sender_full_name": "Reid Barton",
        "timestamp": 1601050736
    },
    {
        "content": "<p>I think I need to take a step back here. Why is <code>simp</code> producing a less simple result than <code>simp [-list.mem_cons_iff]</code>?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"n\">list.pairwise.nil</span>\n\n<span class=\"sd\">/--</span>\n<span class=\"sd\">Fails with:</span>\n<span class=\"sd\">⊢ (R i₁ i₂ ∧ R i₁ i₃) ∧ R i₂ i₃ ↔</span>\n<span class=\"sd\">    (∀ (a' : α), a' = i₂ ∨ a' = i₃ → R i₁ a') ∧ R i₂ i₃ -/</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">i₁</span> <span class=\"n\">i₂</span> <span class=\"n\">i₃</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">i₁</span> <span class=\"n\">i₂</span> <span class=\"bp\">∧</span> <span class=\"n\">R</span> <span class=\"n\">i₁</span> <span class=\"n\">i₃</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">R</span> <span class=\"n\">i₂</span> <span class=\"n\">i₃</span> <span class=\"bp\">↔</span> <span class=\"o\">[</span><span class=\"n\">i₁</span><span class=\"o\">,</span> <span class=\"n\">i₂</span><span class=\"o\">,</span> <span class=\"n\">i₃</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">pairwise</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp</span>\n\n<span class=\"sd\">/-- succeeds, list.mem_cons_iff would not match the final goal anyway -/</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">i₁</span> <span class=\"n\">i₂</span> <span class=\"n\">i₃</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">i₁</span> <span class=\"n\">i₂</span> <span class=\"bp\">∧</span> <span class=\"n\">R</span> <span class=\"n\">i₁</span> <span class=\"n\">i₃</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">R</span> <span class=\"n\">i₂</span> <span class=\"n\">i₃</span> <span class=\"bp\">↔</span> <span class=\"o\">[</span><span class=\"n\">i₁</span><span class=\"o\">,</span> <span class=\"n\">i₂</span><span class=\"o\">,</span> <span class=\"n\">i₃</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">pairwise</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"n\">list.mem_cons_iff</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 211279960,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1601050872
    },
    {
        "content": "<p><code>squeeze_simp</code> reveals the difference is</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code> example {α : Type} {R : α → α → Prop} {i₁ i₂ i₃ : α} : (R i₁ i₂ ∧ R i₁ i₃) ∧ R i₂ i₃ ↔ [i₁, i₂, i₃].pairwise R :=\n by {\n   simp only [list.not_mem_nil, and_true, forall_prop_of_false, list.pairwise.nil, forall_eq, not_false_iff, list.pairwise_cons, forall_true_iff,\n<span class=\"gd\">-      list.mem_cons_iff, list.mem_singleton, and_self],</span>\n<span class=\"gi\">+      list.ball_cons],</span>\n }\n</code></pre></div>\n\n<p>Is <code>list.ball_cons</code> somehow lower priority than <code>list.mem_cons_iff</code>?</p>",
        "id": 211280657,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1601051191
    },
    {
        "content": "<p>just a sanity check--<code>forall_mem_cons</code> is the same as <code>ball_cons</code> modulo binder types and being a simp lemma or not, right?</p>",
        "id": 211283476,
        "sender_full_name": "Reid Barton",
        "timestamp": 1601052507
    },
    {
        "content": "<p>Let's check...: <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.forall_mem_cons\">docs#list.forall_mem_cons</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.ball_cons\">docs#list.ball_cons</a></p>",
        "id": 211283629,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1601052583
    },
    {
        "content": "<p>It looks like the problem is that <code>list.ball_cons</code> is a simp lemma whose LHS is not in simp-normal form (it can be rewritten by <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.mem_cons_iff\">docs#list.mem_cons_iff</a>, which is another simp lemma)</p>",
        "id": 211283848,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1601052679
    },
    {
        "content": "<p>Which presumably the linter misses because it's part of core and not mathlib?</p>",
        "id": 211283907,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1601052717
    },
    {
        "content": "<p>I'm a bit confused because I thought that <code>simp</code> generally operates from the outside in, so it should apply <code>list.ball_cons</code> before <code>list.mem_cons_iff</code> anyways</p>",
        "id": 211284284,
        "sender_full_name": "Reid Barton",
        "timestamp": 1601052895
    },
    {
        "content": "<p>I'm quite sure simp operates from the inside out.</p>",
        "id": 211292663,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1601057027
    },
    {
        "content": "<p>Yes, see e.g. <a href=\"#narrow/stream/113488-general/topic/Simp.20normal.20form/near/188829903\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Simp.20normal.20form/near/188829903</a></p>",
        "id": 211292797,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1601057082
    },
    {
        "content": "<p>So is the conclusion is that the lean core simp lemma is bad?</p>",
        "id": 211309111,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1601063372
    },
    {
        "content": "<p>Hmm, I see. Well, in any case this ordering is not something that can be affected by priorities.</p>",
        "id": 211309736,
        "sender_full_name": "Reid Barton",
        "timestamp": 1601063662
    },
    {
        "content": "<p>I think the thing to do is:</p>\n<ul>\n<li>Remove the bad simp lemma from core</li>\n<li>Add the simp lemma I have above so that the lemma in core is just <code>by simp</code> anyway.</li>\n</ul>",
        "id": 211317901,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1601067953
    },
    {
        "content": "<p>Will try next week</p>",
        "id": 211317967,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1601067982
    },
    {
        "content": "<p>I ran the <code>simp_nf</code> linter on core, here is the output:<br>\n<a href=\"https://github.com/leanprover-community/mathlib/runs/1167546135\">https://github.com/leanprover-community/mathlib/runs/1167546135</a><br>\nI couldn't find the offending lemma in there (but maybe it's one of the other simp linters that finds it?) <br>\nIf you are fixing core, it would be great if you also fix some of the other lemmas caught by the linter.</p>",
        "id": 211326521,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1601074085
    },
    {
        "content": "<p>I'm now running other linters also on core (but not the ones that produce output in mathlib): <a href=\"https://github.com/leanprover-community/mathlib/runs/1168317987\">https://github.com/leanprover-community/mathlib/runs/1168317987</a></p>",
        "id": 211326538,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1601074108
    },
    {
        "content": "<p>Looks like you'll want to remove the <code>-T100000</code> here <a href=\"https://github.com/leanprover-community/mathlib/blob/master/.github/workflows/build.yml#L54\">https://github.com/leanprover-community/mathlib/blob/master/.github/workflows/build.yml#L54</a></p>",
        "id": 211326943,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1601074452
    },
    {
        "content": "<p>I don't think we should remove any involved simp lemmas</p>",
        "id": 211329978,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601077650
    },
    {
        "content": "<p>It's not ideal, but I think it is better to have a non-confluent set of simp lemmas than to have a weak set</p>",
        "id": 211330042,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601077697
    },
    {
        "content": "<p>the real problem here is that we use <code>\\forall x \\in l, p x</code> to represent the operator one might write as <code>all p l</code></p>",
        "id": 211330066,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601077737
    },
    {
        "content": "<p>This operator is in some sense dual to <code>list.mem</code>, defined using and instead of or</p>",
        "id": 211330094,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601077790
    },
    {
        "content": "<p>The <code>simp_nf</code>does not check confluence, but whether other simp lemmas first simplify a subexpression of the LHS before this simp lemma has a chance of firing. Therefore, all positives of the <code>simp_nf</code> lemmas are simp lemmas that never fire. See <a href=\"https://leanprover-community.github.io/mathlib_docs/notes.html#simp-normal%20form\">https://leanprover-community.github.io/mathlib_docs/notes.html#simp-normal%20form</a></p>",
        "id": 211348790,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1601107878
    },
    {
        "content": "<p>Never fire unless the overlapping lemma is excluded via <code>-</code>, as in my example</p>",
        "id": 211351106,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1601111785
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> I'm not exactly sure who you are responding to, but it is not true that <code>list.mem_cons_iff'</code> never fires. It is non-confluent but the LHS is in simp normal form</p>",
        "id": 211358733,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601124806
    },
    {
        "content": "<p>the problem is that while the LHS of <code>list.mem_cons_iff'</code> itself is in simp normal form, there are instantiations of the LHS (with simp normal terms) that are not in simp normal form</p>",
        "id": 211358787,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601124876
    },
    {
        "content": "<p>I think <code>list.ball_cons</code> is the lemma in question</p>",
        "id": 211358810,
        "sender_full_name": "Reid Barton",
        "timestamp": 1601124955
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code> <span class=\"k\">#print</span> <span class=\"n\">list.bex_cons</span> <span class=\"c\">/-</span><span class=\"cm\"> Left-hand side simplifies from</span>\n<span class=\"cm\">  ∃ (x : α) (H : x ∈ a :: l), p x</span>\n<span class=\"cm\">to</span>\n<span class=\"cm\">  ∃ (x : α), (x = a ∨ x ∈ l) ∧ p x</span>\n<span class=\"cm\">using</span>\n<span class=\"cm\">  [exists_prop, list.mem_cons_iff]</span>\n<span class=\"cm\">Try to change the left-hand side to the simplified term!</span>\n<span class=\"cm\"> -/</span>\n<span class=\"k\">#print</span> <span class=\"n\">list.ball_cons</span> <span class=\"c\">/-</span><span class=\"cm\"> simp can prove this:</span>\n<span class=\"cm\">  by simp only [list.mem_cons_iff, list.forall_mem_cons']</span>\n<span class=\"cm\">One of the lemmas above could be a duplicate.</span>\n<span class=\"cm\">If that's not the case try reordering lemmas or adding @[priority].</span>\n<span class=\"cm\"> -/</span>\n</code></pre></div>",
        "id": 211358850,
        "sender_full_name": "Reid Barton",
        "timestamp": 1601124973
    },
    {
        "content": "<p>oh, that's just <code>list.mem_cons_iff</code> by another name</p>",
        "id": 211358859,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601125008
    },
    {
        "content": "<p>maybe the \"simp can prove this\" linter caught it first?</p>",
        "id": 211358863,
        "sender_full_name": "Reid Barton",
        "timestamp": 1601125016
    },
    {
        "content": "<p>Exactly</p>",
        "id": 211358877,
        "sender_full_name": "Reid Barton",
        "timestamp": 1601125033
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/Case-bashing.20.60list.2Epairwise.60.20with.20.60simp.60/near/211358859\">said</a>:</p>\n<blockquote>\n<p>oh, that's just <code>list.mem_cons_iff</code> by another name</p>\n</blockquote>\n<p>Can we remove one of the names to make this less confusing?</p>",
        "id": 211358946,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1601125092
    },
    {
        "content": "<p>To be fair, this is a cross-repo simp incoherence, so it's not like we can point a finger at any particular lemma</p>",
        "id": 211359032,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601125213
    },
    {
        "content": "<p>we could unset the simp attribute from those lemmas in <code>data.list.basic</code></p>",
        "id": 211359039,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601125246
    },
    {
        "content": "<p>That's a good idea- what's the syntax for removing an attribute?</p>",
        "id": 211359060,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1601125291
    },
    {
        "content": "<p><code>attribute [-simp] list.ball_cons</code></p>",
        "id": 211359071,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601125312
    },
    {
        "content": "<p>actually you might not be able to</p>",
        "id": 211359073,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601125320
    },
    {
        "content": "<p>I don't think that works for non-local unsets</p>",
        "id": 211359115,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601125332
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113488-general/topic/Case-bashing.20.60list.2Epairwise.60.20with.20.60simp.60/near/211283476\">said</a>:</p>\n<blockquote>\n<p>just a sanity check--<code>forall_mem_cons</code> is the same as <code>ball_cons</code> modulo binder types and being a simp lemma or not, right?</p>\n</blockquote>\n<p>Opened <a href=\"https://github.com/leanprover-community/mathlib/issues/4279\">#4279</a> to make this obvious from the source code</p>",
        "id": 211359459,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1601125887
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/Case-bashing.20.60list.2Epairwise.60.20with.20.60simp.60/near/211279304\">said</a>:</p>\n<blockquote>\n<p>Could this be a simp lemma?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">forall_eq_or_imp</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">q</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>\n\n</blockquote>\n<p>Opened <a href=\"https://github.com/leanprover-community/mathlib/issues/4281\">#4281</a> to find out.</p>",
        "id": 211359912,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1601126646
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/Case-bashing.20.60list.2Epairwise.60.20with.20.60simp.60/near/211358733\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"111080\">Floris van Doorn</span> I'm not exactly sure who you are responding to, but it is not true that <code>list.mem_cons_iff'</code> never fires. It is non-confluent but the LHS is in simp normal form</p>\n</blockquote>\n<p>I was responding to you, under the assumption you were responding to me. :-) <br>\nI agree that we should not remove simp lemmas just to keep things confluent, but we should remove simp lemmas in core flagged by the linter.</p>",
        "id": 211382407,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1601153813
    },
    {
        "content": "<p>What's the right way to deal with core having a simp lemma from <code>A -&gt; C</code> and mathlib introducing two new ones from <code>A -&gt; B</code> and <code>B -&gt; C</code>? Put both new lemmas in core? Remove the annotation retroactively in mathlib?</p>",
        "id": 211383712,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1601156133
    }
]