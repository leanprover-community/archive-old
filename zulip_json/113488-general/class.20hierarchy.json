[
    {
        "content": "<p>I've realized that I don't understand why creating <code>M*N</code> classes (e.g., <code>ordered_semiring</code> etc) is better for typeclass search than mixins. If we have <code>M * N</code> typeclasses, then there are very exponentially many paths from, e.g., <code>ordered_add_monoid</code> to <code>linear_ordered_field</code>, and Lean has to check every path. Am I correct?<br>\nBTW, should we ask Daniel Selsam (not tagging him for now) what will work better in Lean 4?</p>",
        "id": 214726553,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603816473
    },
    {
        "content": "<p>Is it motivated by saving characters? <code>[semiring S] [ordered_semiring S] [left_cancel_semiring S]</code> is longer to type than <code>[ordered_left_cancel_semiring S]</code>, even though that's not a good argument.</p>",
        "id": 214728046,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1603817091
    },
    {
        "content": "<p>I don't think that saving characters is a good goal. If we'll find out (this is a big IF) that mixins work better than <code>M * N * K</code> classes, then we can come up with a syntax telling Lean to introduce <code>[left_cancel_semiring S]</code> and all typeclasses on <code>S</code> needed as arguments to <code>left_cancel_semiring</code>. E.g., something like <code>[!left_cancel_semiring S]</code>.</p>",
        "id": 214731026,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603818259
    },
    {
        "content": "<p>I've seen that suggestion before as <code>[[left_cancel_semiring S]]</code>, and agree that it would be  a solution to the typing problem</p>",
        "id": 214733252,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1603819184
    },
    {
        "content": "<p>I think that main issues we should discuss are (a) elaboration speed; (b) maintainability.</p>",
        "id": 214737691,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603820987
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> (I think) has optimized the type class search algorithm so that it caches failures during the search. So it doesn't have to search all exponentially paths, but it still has to go through all <code>M * N</code> classes.</p>",
        "id": 214738075,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1603821145
    },
    {
        "content": "<p>How does it know that different paths lead to the same value?</p>",
        "id": 214738315,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603821261
    },
    {
        "content": "<p>With the order-algebra interface, I'm also wondering whether it's better to separate out the order class, e.g. <code>[linear_order G] [ordered_group G]</code>. I'm not sure if there is much gained by also separating out <code>[group G]</code>, since the fields <code>ordered_*</code> class will greatly depend on <code>*</code>.</p>",
        "id": 214738330,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1603821269
    },
    {
        "content": "<p>I <em>think</em> the algorithm assumes that diamonds lead to definitionally equal instances.</p>",
        "id": 214738386,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1603821293
    },
    {
        "content": "<p>In many cases it doesn't matter: if it couldn't find <code>comm_ring S</code> when coming from <code>ring S</code> then it also cannot find <code>comm_ring S</code> when coming from <code>comm_semigroup S</code>.</p>",
        "id": 214738562,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1603821373
    }
]