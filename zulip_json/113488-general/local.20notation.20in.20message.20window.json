[
    {
        "content": "<p>I have a local infix notation for an operation which is a local variable. Is there any hope to see Lean using this notation in the Lean messages window?</p>",
        "id": 125571696,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524494269
    },
    {
        "content": "<p>No idea, anyone? That would really help me.</p>",
        "id": 125574186,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524497491
    },
    {
        "content": "<p>I've struggled with that too. Recently, I had an idea but I haven't tried it yet. What's the type of your variable?</p>",
        "id": 125574294,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524497587
    },
    {
        "content": "<p>It's a composition law</p>",
        "id": 125574380,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524497663
    },
    {
        "content": "<p><code>op : R → R → R</code></p>",
        "id": 125574393,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524497690
    },
    {
        "content": "<p><code>local infix ` ◆ `:70 := op</code></p>",
        "id": 125574400,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524497704
    },
    {
        "content": "<p>Cool. Let's try this:</p>\n<div class=\"codehilite\"><pre><span></span>def my_op := op\n\nlocal infix ` ◆ `:70 := my_op op\n</pre></div>",
        "id": 125574420,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524497738
    },
    {
        "content": "<p>breaks everything <span class=\"emoji emoji-1f61e\" title=\"disappointed\">:disappointed:</span></p>",
        "id": 125574479,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524497809
    },
    {
        "content": "<p>Was that not what you were going for?</p>",
        "id": 125574569,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524497929
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">my_op</span> <span class=\"o\">:=</span> <span class=\"n\">op</span>\n\n<span class=\"n\">local</span> <span class=\"kn\">infix</span> <span class=\"bp\">`</span> <span class=\"err\">◆</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">70</span> <span class=\"o\">:=</span> <span class=\"n\">my_op</span>\n</pre></div>",
        "id": 125574605,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524497992
    },
    {
        "content": "<p>I think that's what he means</p>",
        "id": 125574607,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524497995
    },
    {
        "content": "<p>I understood he meant that</p>",
        "id": 125574667,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524498019
    },
    {
        "content": "<p>still breaks everything</p>",
        "id": 125574669,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524498025
    },
    {
        "content": "<p>is <code>op</code> a <code>parameter</code> or a variable?</p>",
        "id": 125574679,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524498042
    },
    {
        "content": "<p>variable</p>",
        "id": 125574684,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524498049
    },
    {
        "content": "<p>Are you inside a section?</p>",
        "id": 125574689,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524498061
    },
    {
        "content": "<p>Can you make it a parameter?</p>",
        "id": 125574703,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524498072
    },
    {
        "content": "<p>no</p>",
        "id": 125574704,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524498072
    },
    {
        "content": "<p>I meant no I'm not inside a section</p>",
        "id": 125574709,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524498084
    },
    {
        "content": "<p>I don't know about parameters</p>",
        "id": 125574719,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524498095
    },
    {
        "content": "<p><span class=\"emoji emoji-1f606\" title=\"laughing\">:laughing:</span> I thought so. They're not great in Lean but sometimes you need them. Before I go there, can you show me the output of <code>#check @my_op</code>?</p>",
        "id": 125574794,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524498161
    },
    {
        "content": "<p><code>my_op : Π {R : Type u_3}, (R → R → R) → R → R → R</code></p>",
        "id": 125574877,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524498245
    },
    {
        "content": "<p>let's just forget that algebraic hierarchy</p>",
        "id": 125574897,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524498298
    },
    {
        "content": "<p>With a variable, if you use <code>my_op</code> somewhere, you need to provide an argument for each variable. With parameters, inside the section, the parameters are a bit like constant. Inside tactic proofs, they get a bit flaky though.</p>",
        "id": 125575047,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524498480
    },
    {
        "content": "<p>I don't see the relation between the hierarchy and the problem we discuss here</p>",
        "id": 125575092,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524498489
    },
    {
        "content": "<p>Try making <code>op</code> a parameter and wrap it and the related definitions in a section</p>",
        "id": 125575103,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524498511
    }
]