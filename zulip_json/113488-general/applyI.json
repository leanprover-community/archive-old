[
    {
        "content": "<p>Is there a variant on apply or refine which turns <code>[...]</code> arguments which couldn't be solved into new goals?</p>",
        "id": 133495991,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536307343
    },
    {
        "content": "<p>What are <code>[...]</code> arguments?</p>",
        "id": 133496017,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1536307429
    },
    {
        "content": "<p>Class arguments</p>",
        "id": 133496109,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536307527
    },
    {
        "content": "<p>Or instances rather</p>",
        "id": 133496113,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536307535
    },
    {
        "content": "<p><code>apply_with</code> allows you to provide a <code>apply_cfg</code> structure. I think <code>{ instances := ff }</code>should add them to the goals.</p>",
        "id": 133496114,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1536307538
    },
    {
        "content": "<p>Ooh</p>",
        "id": 133496119,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536307543
    },
    {
        "content": "<p>Yes, it worked.</p>",
        "id": 133496402,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536307922
    },
    {
        "content": "<p>Does <code>convert</code> work? I'm a big convert to <code>convert</code>. It seems to allow me to write proofs forwards like a mathematician would. \"This term is actually the answer; I'll now pick up the pieces\".</p>",
        "id": 133498215,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536310400
    },
    {
        "content": "<p>Huh, it does!</p>",
        "id": 133498553,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536310842
    },
    {
        "content": "<p>That's really good to know--I already wrote a couple \"backwards\" proofs involving instances (which I think are really forwards, in the sense that you are building up new known statements from old ones, rather than breaking down the goal) and I was annoyed that I couldn't write them in the normal fashion.</p>",
        "id": 133498721,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536311049
    },
    {
        "content": "<p>How long has <code>convert</code> existed? I can't believe I didn't notice it wasn't there. I only found it was there about a week ago and now I kind of feel stupid that I hadn't realised that I wanted it.</p>",
        "id": 133498749,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536311134
    },
    {
        "content": "<p>For example</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">begin</span>\n  <span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"err\">↝</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">),</span> <span class=\"n\">is_iso</span> <span class=\"o\">(</span><span class=\"n\">colimit</span><span class=\"bp\">.</span><span class=\"n\">pre</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"n\">G</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n  <span class=\"k\">begin</span> <span class=\"n\">intro</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">colimit</span><span class=\"bp\">.</span><span class=\"n\">pre_comp</span><span class=\"o\">,</span> <span class=\"n\">apply_instance</span><span class=\"o\">,</span> <span class=\"kn\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">is_cofinal_of_induced_is_iso</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>is now</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">begin</span>\n  <span class=\"n\">convert</span> <span class=\"n\">is_cofinal_of_induced_is_iso</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">colimit</span><span class=\"bp\">.</span><span class=\"n\">pre_comp</span><span class=\"o\">,</span> <span class=\"n\">apply_instance</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 133498793,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536311166
    },
    {
        "content": "<p><a href=\"#narrow/stream/116395-maths/subject/ZFC.20equality/near/127216190\" title=\"#narrow/stream/116395-maths/subject/ZFC.20equality/near/127216190\">https://leanprover.zulipchat.com/#narrow/stream/116395-maths/subject/ZFC.20equality/near/127216190</a><br>\nWe need better documentation!</p>",
        "id": 133498834,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536311263
    },
    {
        "content": "<p>April<br>\n<a href=\"#narrow/stream/113488-general/subject/apply.20with.20new.20equality.20goals/near/125558382\" title=\"#narrow/stream/113488-general/subject/apply.20with.20new.20equality.20goals/near/125558382\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/subject/apply.20with.20new.20equality.20goals/near/125558382</a></p>",
        "id": 133498835,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536311269
    },
    {
        "content": "<p>Maybe it would still be good to have an <code>applyI</code> tactic which is just <code>apply</code> with <code>{ instances := ff }</code>, though.</p>",
        "id": 133502820,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536316871
    },
    {
        "content": "<p>maybe we should have 32768 names for our 15 boolean configurations of <code>simp</code></p>",
        "id": 133503124,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536317305
    },
    {
        "content": "<p>Indeed I would love to read more examples of using convert.</p>",
        "id": 133503487,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536317906
    }
]