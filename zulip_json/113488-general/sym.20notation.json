[
    {
        "content": "<p>Is there a better notation to build concrete elements in <code>sym</code>?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.sym.basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">sym</span> <span class=\"n\">α</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span>\n<span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">b</span> <span class=\"o\">::</span> <span class=\"n\">c</span> <span class=\"o\">::</span> <span class=\"n\">sym.nil</span>\n</code></pre></div>",
        "id": 254088063,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1632159449
    },
    {
        "content": "<p>(<a href=\"https://leanprover-community.github.io/mathlib_docs/find/sym\">docs#sym</a>)</p>",
        "id": 254088114,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1632159468
    },
    {
        "content": "<p>Eric, the documentation bot <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span></p>",
        "id": 254088194,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1632159486
    },
    {
        "content": "<p>No one's ever really wanted to before <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span>.  I'd suggest using <code>::</code> like that, though if you want there's also</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">sym</span> <span class=\"n\">α</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"o\">⟨[</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">],</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 254088419,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1632159576
    },
    {
        "content": "<p>Why is <code>[, , ]</code> notation not implemented for <code>has_insert</code> and <code>has_nil</code>?</p>",
        "id": 254088582,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1632159636
    },
    {
        "content": "<p>Oh wait, there's no <code>has_nil</code>!</p>",
        "id": 254088604,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1632159646
    },
    {
        "content": "<p>I didn't check -- I'm pretty sure it's using the coercion from <code>list</code> there.</p>",
        "id": 254088659,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1632159672
    },
    {
        "content": "<p><code>sym</code> has no <a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_insert\">docs#has_insert</a> anyway (nor can it, the types aren't right)</p>",
        "id": 254088966,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1632159790
    },
    {
        "content": "<p>Well, <code>has_insert</code> could well be heterogenous if we wanted to.</p>",
        "id": 254089160,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1632159857
    },
    {
        "content": "<p>There's <a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_emptyc\">docs#has_emptyc</a></p>",
        "id": 254091893,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1632160918
    },
    {
        "content": "<p>Can you use set notation <code>{a, b, c}</code> ?</p>",
        "id": 254101067,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1632164634
    },
    {
        "content": "<p>No, that requires <code>has_insert</code> which can't apply here</p>",
        "id": 254108308,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1632167844
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span>, you might have to fiddle with out_param to avoid confusing the elaborator</p>",
        "id": 254108453,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1632167901
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110044\">Chris Hughes</span> <a href=\"#narrow/stream/113488-general/topic/sym.20notation/near/254101067\">said</a>:</p>\n<blockquote>\n<p>Can you use set notation <code>{a, b, c}</code> ?</p>\n</blockquote>\n<p>Didn't have much success doing so...</p>",
        "id": 254108493,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1632167929
    },
    {
        "content": "<p>Oh yeah, I'm not yet friend with the elaborator.</p>",
        "id": 254108525,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1632167944
    },
    {
        "content": "<p>Why <code>has_insert</code> can't apply here? We can define it to mean <code>cons</code>.</p>",
        "id": 254468293,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1632362435
    },
    {
        "content": "<p>Because it has signature <code>insert : A → B → B</code> which doesn't unify with cons.</p>",
        "id": 254482001,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1632374126
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.sym.basic</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_t</span> <span class=\"o\">(</span><span class=\"n\">sym</span> <span class=\"n\">α</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">multiset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"n\">subtype.val</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">sym.coe_nil</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">sym.nil</span> <span class=\"o\">:</span> <span class=\"n\">sym</span> <span class=\"n\">α</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">multiset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">{}</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">sym.coe_cons</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">sym</span> <span class=\"n\">α</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">((</span><span class=\"n\">sym.cons</span> <span class=\"n\">a</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">multiset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">::</span><span class=\"bp\">ₘ</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">multiset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n  <span class=\"n\">refl</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">decidable_eq</span> <span class=\"o\">(</span><span class=\"n\">sym</span> <span class=\"n\">α</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n<span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">multiset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">y</span>\n  <span class=\"k\">then</span> <span class=\"n\">is_true</span> <span class=\"o\">(</span><span class=\"n\">subtype.ext</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n  <span class=\"k\">else</span> <span class=\"n\">is_false</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">congr_arg</span> <span class=\"n\">_</span> <span class=\"n\">H</span><span class=\"o\">))</span>\n\n<span class=\"kd\">notation</span> <span class=\"bp\">`</span><span class=\"n\">s</span><span class=\"o\">[</span><span class=\"bp\">`</span> <span class=\"n\">l</span><span class=\"o\">:(</span><span class=\"n\">foldr</span> <span class=\"bp\">`</span><span class=\"o\">,</span> <span class=\"bp\">`</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">sym.cons</span> <span class=\"n\">h</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"n\">sym.nil</span> <span class=\"bp\">`</span><span class=\"o\">]</span><span class=\"bp\">`</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">l</span>\n\n<span class=\"c1\">-- for some reason, wouldn't work with subtype.decidable</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">s</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"n\">s</span><span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">dec_trivial</span>\n</code></pre></div>",
        "id": 254492311,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1632381730
    }
]