[
    {
        "content": "<p>We have probably discussed this before, but I'm not sure if there is a consensus. What are the pros and cons of changing the definition of <code>monoid_hom</code> to only assume <code>has_one M</code>, <code>has_mul M</code>, <code>has_one N</code>, and <code>has_mul N</code> (in other words, a lawless monoid), instead of assuming lawful monoids?</p>\n<p>Would it even be feasible to refactor the library to use such a definition? Or are the headaches simply to big to bother?</p>",
        "id": 196864353,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588921984
    },
    {
        "content": "<ol>\n<li>Lean won't be able to fine <code>[monoid M] [monoid N]</code> by unification.</li>\n<li>This will break concrete categories.</li>\n</ol>",
        "id": 196864684,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1588922250
    },
    {
        "content": "<p>But Lean can find <code>has_one</code> and <code>has_mul</code> by unification, right?</p>",
        "id": 196864704,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588922278
    },
    {
        "content": "<p>(2) is a serious problem</p>",
        "id": 196864724,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588922283
    },
    {
        "content": "<p>Probably we can adjust concrete categories but now we just label <code>monoid_hom</code> as a bundled hom.</p>",
        "id": 196864806,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1588922336
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">instance</span> <span class=\"n\">bundled_hom</span> <span class=\"o\">:</span> <span class=\"n\">bundled_hom</span> <span class=\"bp\">@</span><span class=\"n\">monoid_hom</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨@</span><span class=\"n\">monoid_hom</span><span class=\"bp\">.</span><span class=\"n\">to_fun</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">monoid_hom</span><span class=\"bp\">.</span><span class=\"n\">id</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">monoid_hom</span><span class=\"bp\">.</span><span class=\"n\">comp</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">monoid_hom</span><span class=\"bp\">.</span><span class=\"n\">coe_inj</span><span class=\"bp\">⟩</span>\n</code></pre></div>",
        "id": 196864993,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1588922517
    },
    {
        "content": "<p>I don't know whether this will work well with <code>λ M N mM mN, @monoid_hom M N mM.to_has_one ...</code></p>",
        "id": 196865084,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1588922591
    },
    {
        "content": "<p>You can try</p>",
        "id": 196865086,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1588922598
    },
    {
        "content": "<p>See <code>lawless-homs</code> for my first attempt at this. I'm running into more problems than I expected.</p>",
        "id": 196865089,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588922607
    },
    {
        "content": "<p>I wanted this (UPD: in <code>free_monoid_product.normalized</code>) to define a <code>monoid_hom</code> before I can define a <code>monoid</code> but decided not to try.</p>",
        "id": 196865188,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1588922663
    },
    {
        "content": "<p>You get <code>multiplicative nat</code> at some point, and it infers the wrong <code>has_one</code> and <code>has_mul</code>. As in... they are correct, but it expects a different path.</p>",
        "id": 196865198,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588922676
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/113488-general/topic/minimalist.20assumptions/near/196865188\" title=\"#narrow/stream/113488-general/topic/minimalist.20assumptions/near/196865188\">said</a>:</p>\n<blockquote>\n<p>I wanted this to define a <code>monoid_hom</code> before I can define a <code>monoid</code> but decided not to try.</p>\n</blockquote>\n<p>Same here.</p>",
        "id": 196865205,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588922686
    }
]