[
    {
        "content": "<p>Is there a better name for the type <code>{y : Y // ∃ x : X, f x = y}</code> than <code>↥(set.range f)</code>?</p>",
        "id": 192787852,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585911913
    },
    {
        "content": "<p>And could I have asked this question to some algorithm which then finds me this type somewhere in mathlib or Lean?</p>",
        "id": 192787885,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585911959
    },
    {
        "content": "<p>I would like to learn to be a better namer.</p>",
        "id": 192787933,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585911973
    },
    {
        "content": "<p>what's wrong with that name?</p>",
        "id": 192788441,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585912372
    },
    {
        "content": "<p>The head symbol?</p>",
        "id": 192788460,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585912392
    },
    {
        "content": "<p>we don't have that many specific defined subtypes except through set coercion</p>",
        "id": 192788493,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585912427
    },
    {
        "content": "<p>I was just checking there wasn't some <code>subtype.range f</code> or something.</p>",
        "id": 192788504,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585912438
    },
    {
        "content": "<p>as for a magic refolding tactic, that's beyond me to automate atm</p>",
        "id": 192788577,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585912482
    },
    {
        "content": "<p>I mean you could just try to rewrite with all equational lemmas backwards but that won't help if you messed up the way you wrote it like if the equation is the wrong way around</p>",
        "id": 192788637,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585912530
    },
    {
        "content": "<p>I wanted to prove that the closure operator on sets of reals is a Galois insertion</p>",
        "id": 192789818,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585913488
    },
    {
        "content": "<p>But this must just be a general predicate on an endomorphism of a type -- \"induces a Galois insertion\". For example id has that property and it would not surprise me if comp preserved it too. This is some known thing in CS I guess?</p>",
        "id": 192789927,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585913568
    },
    {
        "content": "<p>Oh it would have to be endomorphisms of a lattice or something</p>",
        "id": 192790100,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585913695
    },
    {
        "content": "<p>It's literally called a closure operator.</p>",
        "id": 192808613,
        "sender_full_name": "Reid Barton",
        "timestamp": 1585922924
    },
    {
        "content": "<p><a href=\"https://en.wikipedia.org/wiki/Closure_operator#Closure_operators_on_partially_ordered_sets\" title=\"https://en.wikipedia.org/wiki/Closure_operator#Closure_operators_on_partially_ordered_sets\">https://en.wikipedia.org/wiki/Closure_operator#Closure_operators_on_partially_ordered_sets</a></p>",
        "id": 192808890,
        "sender_full_name": "Reid Barton",
        "timestamp": 1585923011
    },
    {
        "content": "<p>Do we have closure operators in Lean?</p>",
        "id": 192813108,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585924676
    },
    {
        "content": "<p>No, except in that as you already noted they're basically equivalent to Galois insertions.</p>",
        "id": 192851188,
        "sender_full_name": "Reid Barton",
        "timestamp": 1585941074
    }
]