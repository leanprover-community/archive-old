[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">a</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">integral_domain</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">roots_of_unity</span> <span class=\"mi\">37</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">ζ</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">is_primitive_root</span> <span class=\"n\">ζ</span> <span class=\"mi\">37</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"bp\">λ</span> <span class=\"n\">ζ</span><span class=\"o\">,</span> <span class=\"o\">⟨(</span><span class=\"n\">ζ</span> <span class=\"o\">:</span> <span class=\"n\">units</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"n\">is_primitive_root.mk_of_lt</span> <span class=\"n\">ζ</span> <span class=\"gr\">sorry</span> <span class=\"gr\">sorry</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">l</span> <span class=\"n\">hl'</span> <span class=\"n\">hl</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">)⟩,</span>\n  <span class=\"c1\">-- h : ↑↑ζ ^ l = 1</span>\n  <span class=\"n\">norm_cast</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- h : ↑↑(ζ ^ l) = 1</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">units.coe_eq_one</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"c1\">-- it is a `norm_cast` lemma?</span>\n  <span class=\"c1\">-- h : ↑(ζ ^ l) = 1</span>\n  <span class=\"n\">norm_cast</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"c1\">-- I should not have to do this!</span>\n  <span class=\"c1\">-- h : ζ ^ l = 1</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Having to do this is... kind of absurd. Furthermore, if you turn this into an <code>example</code>, you suddenly get the second <code>norm_cast</code> not working (I assume the <code>def/example</code> typechecking difference). Is there any reason this happens, or any way to fix it? I'll also attach my full code below to see whether I'm <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a>-ing myself :)</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">exists_primitive_root_iff_card_roots_of_unity</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">ζ</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">is_primitive_root</span> <span class=\"n\">ζ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">fintype.card</span> <span class=\"o\">(</span><span class=\"n\">roots_of_unity</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">ζ</span><span class=\"o\">,</span> <span class=\"n\">hζ</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">roots_of_unity.is_cyclic</span> <span class=\"n\">R</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">exists_generator</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"o\">⟨</span><span class=\"n\">ζ</span><span class=\"o\">,</span> <span class=\"n\">hζ</span><span class=\"o\">⟩,</span> <span class=\"n\">is_primitive_root.card_roots_of_unity</span> <span class=\"n\">hζ</span><span class=\"o\">,</span>\n          <span class=\"bp\">λ</span> <span class=\"n\">hn</span><span class=\"o\">,</span> <span class=\"o\">⟨(</span><span class=\"n\">ζ</span> <span class=\"o\">:</span> <span class=\"n\">units</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"c1\">-- the double coe is to be able to unfold order_of</span>\n                 <span class=\"n\">is_primitive_root.mk_of_lt</span> <span class=\"n\">ζ</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">l</span> <span class=\"n\">hl'</span> <span class=\"n\">hl</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">)⟩⟩,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">hn</span><span class=\"o\">,</span> <span class=\"n\">fintype.card_pos_iff</span><span class=\"o\">],</span> <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">ζ</span><span class=\"o\">⟩</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">convert</span> <span class=\"n\">pow_order_of_eq_one</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">hn</span><span class=\"o\">,</span> <span class=\"n\">order_of_units</span><span class=\"o\">,</span> <span class=\"n\">order_of_subgroup</span><span class=\"o\">,</span> <span class=\"n\">order_of_eq_card_of_forall_mem_gpowers</span> <span class=\"n\">hζ</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">order_of_eq_card_of_forall_mem_gpowers</span> <span class=\"n\">hζ</span> <span class=\"n\">at</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n  <span class=\"n\">norm_cast</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">units.coe_eq_one</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"c1\">-- it is a `norm_cast` lemma?</span>\n  <span class=\"n\">norm_cast</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"c1\">-- I should not have to do this!</span>\n  <span class=\"n\">exact</span> <span class=\"n\">pow_eq_one_of_lt_order_of'</span> <span class=\"n\">hl'.ne'</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">rwa</span> <span class=\"n\">hn</span><span class=\"o\">)</span> <span class=\"n\">h</span>\n  <span class=\"c1\">-- this lemma's name is nonsensical and has a pointless `'`</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n</div></div>",
        "id": 257278324,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1634075981
    },
    {
        "content": "<p>I think this might be an independent issue but not all roots of unity are primitive</p>",
        "id": 257281776,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1634077782
    },
    {
        "content": "<p>Deeply aware of that after messing with <code>cyclotomic</code> for so long :b easiest way to make an mwe though</p>",
        "id": 257284859,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1634079683
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span> Do you know what is going on?</p>",
        "id": 257310675,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634100796
    },
    {
        "content": "<p>I'll try to look into this, my guess is missing <code>norm_cast</code> lemmas in <code>is_primitive_root</code>. <code>coe_eq_one</code> probably isn't a good <code>norm_cast</code> lemma since there's separate handling for numerals.</p>",
        "id": 257530324,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1634216461
    }
]