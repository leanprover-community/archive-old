[
    {
        "content": "<p>I just learned that <code>fact</code> doesn't mean factorial in Lean, and if <code>nat</code> is open, <code>#check fact</code> is ambiguous. Doesn't that seem unfortunate?</p>",
        "id": 196959849,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1588978626
    },
    {
        "content": "<p>It's a new design in mathlib. It's actually not a shorthand for anything but it helps us have propositions as type classes. We could put it in its own namespace to minimize this kind of surprise</p>",
        "id": 196969679,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1588992415
    },
    {
        "content": "<p>I agree that it is a bit unfortunate. <span class=\"user-mention\" data-user-id=\"110865\">@Jeremy Avigad</span> I usually write <code>n.fact</code> to get around this, and it also reads nice. Even better would be to add</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">localized</span> <span class=\"s2\">&quot;postfix `!` := nat.fact&quot;</span> <span class=\"k\">in</span> <span class=\"n\">nat</span>\n</code></pre></div>\n\n\n<p>To the <code>data/nat/fact</code> file. (Modulo trivial typos). Then we can simply write <code>n!</code> after <code>open_locale nat</code>.</p>",
        "id": 196970148,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588993257
    },
    {
        "content": "<p>We could also rename <code>nat.fact</code> to <code>nat.factorial</code></p>",
        "id": 196970163,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588993321
    },
    {
        "content": "<p>I think we should do all of those (-;</p>",
        "id": 196970347,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588993584
    },
    {
        "content": "<p>I'm fine with <code>factorial</code>, it's unambiguous. Mathematicians have this great notation <code>!</code> for it though :-) How about getting that working then nobody needs to worry about the name :-)</p>",
        "id": 196977775,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589008106
    },
    {
        "content": "<p>The lemmas still use the name.</p>",
        "id": 196979306,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1589011025
    },
    {
        "content": "<p>I think it makes sense that <code>fact</code> is the abbreviation of the word fact instead of the abbreviation of the word factorial.</p>",
        "id": 196981671,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589015024
    },
    {
        "content": "<p>There are other reasonable synonyms for <code>fact</code>: <code>given</code> or <code>assuming</code> come to mind quickly.  But there aren't that many other names for <code>factorial</code>, and <code>n.factorial</code> is quite a bit longer than <code>n.fact</code>.  Though the postfix notation also looks nice.</p>",
        "id": 196981784,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1589015258
    },
    {
        "content": "<p>In fact, <code>fact</code> is one of those \"filler\" words that conveys little meaning here. Why not something like <code>to_typeclass</code> that says something more informative?</p>",
        "id": 196982149,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589015999
    },
    {
        "content": "<p><code>[witness P]</code>?</p>",
        "id": 196986649,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1589023110
    },
    {
        "content": "<p>What's the story with global instances of <code>fact</code>? I was under the vague impression that there weren't supposed to be any, but some do exist.</p>",
        "id": 208493782,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598806361
    },
    {
        "content": "<p>My understanding was \"don't make too many\", rather than \"don't many any at all\"</p>",
        "id": 208499442,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1598814325
    },
    {
        "content": "<p>I prefer to only have local(ized) instances, but I'm also fine with the looser \"don't have many\"</p>",
        "id": 208505069,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1598822936
    },
    {
        "content": "<p>I feel like this is something we could easily regret later. I'd vote for \"none, unless they come with a detailed doc-string explaining exactly why <code>local attribute [instance]</code> won't cut it\".</p>",
        "id": 208512555,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598836000
    },
    {
        "content": "<p>Ideally enforced by the linter! :-)</p>",
        "id": 208512564,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598836017
    },
    {
        "content": "<p>Hi! I'm wondering why this lemma doesn't see <code>hp</code> and fails to synthesize a type class instance of <code>fact p.prime</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.field</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.char_p</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"n\">p.prime</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">char_p</span> <span class=\"n\">F</span> <span class=\"n\">p</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">test</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">frobenius</span> <span class=\"n\">F</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"gr\">sorry</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 275015750,
        "sender_full_name": "Ashwin Iyengar",
        "timestamp": 1647024225
    },
    {
        "content": "<p>Oh nevermind this seems to work.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.field</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.char_p</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"n\">p.prime</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">char_p</span> <span class=\"n\">F</span> <span class=\"n\">p</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">test</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">frobenius</span> <span class=\"n\">F</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"gr\">sorry</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Why is it that naming the fact <code>hp</code> suddenly makes it fail?</p>",
        "id": 275015949,
        "sender_full_name": "Ashwin Iyengar",
        "timestamp": 1647024327
    },
    {
        "content": "<p>If you name an instance then it doesn't get included automatically in the local context unless the name is mentioned in the statement of the lemma. You can see just clicking before the final <code>sorry</code> that the instance is not present in the first situation and is there in the second.</p>",
        "id": 275016154,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1647024429
    },
    {
        "content": "<p>(also, in your first example you didn't even have it in instance brackets!)</p>",
        "id": 275016585,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1647024658
    },
    {
        "content": "<p>The first one also is using parentheses instead of square brackets, which is another reason it fails. I keep rediscovering and forgetting the rule Kevin's mentioned, that even if it were <code>[hp : fact p.prime]</code> it wouldn't be included.</p>",
        "id": 275016590,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1647024661
    },
    {
        "content": "<p>thanks all! that makes sense.</p>",
        "id": 275016835,
        "sender_full_name": "Ashwin Iyengar",
        "timestamp": 1647024749
    },
    {
        "content": "<p>One thing that clarified this stuff for me is that Lean doesn't really care much about what kind of brackets you use before the colon when elaborating:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.char_p</span>\n\n<span class=\"c1\">-- works even though we use round brackets</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h0</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"n\">p.prime</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hF</span> <span class=\"o\">:</span> <span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">char_p</span> <span class=\"n\">F</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">frobenius</span> <span class=\"n\">F</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"gr\">sorry</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">frobenius : Π (R : Type u) [_inst_1 : comm_semiring R] (p : ℕ)</span>\n<span class=\"cm\">[_inst_3 : fact (nat.prime p)] [_inst_4 : char_p R p], R →+* R</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>My mental model a while ago was that this would fail because type class inference won't find <code>comm_semiring F</code> or <code>fact p.prime</code> -- but it finds them just fine. With a revised mental model it's easy to understand the labelling thing: I wouldn't expect <code>variable (Y : Type)</code> to be included in a lemma statement if it didn't mention <code>Y</code>, so similarly I wouldn't expect <code>variable [hp : fact p.prime]</code> to be included in a statement if it doesn't mention <code>hp</code>.</p>",
        "id": 275022431,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1647026887
    }
]