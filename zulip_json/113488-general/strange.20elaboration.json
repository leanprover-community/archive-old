[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">normed_space</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">normed_group</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n\n<span class=\"c1\">-- ∀ (ε : ℝ), ε &gt; 0 → ∥t.sum f∥ &lt; ε</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"err\">∥</span> <span class=\"n\">t</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"n\">f</span> <span class=\"err\">∥</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">skip</span>\n\n<span class=\"c1\">-- ∀ (ε : ℕ), ε &gt; 0 → ∥∑ (i : α) in t, f i∥ &lt; ↑ε</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"err\">∥</span> <span class=\"o\">(</span><span class=\"err\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"err\">∥</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">skip</span>\n</code></pre></div>",
        "id": 200385623,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1591774261
    },
    {
        "content": "<p>the epsilon in the second example is (wrongly) interpreted as a natural number</p>",
        "id": 200385646,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1591774273
    },
    {
        "content": "<p>the notation is irrelevant:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"c1\">-- ∀ (ε : ℕ), ε &gt; 0 → ∥∑ (i : α) in t, f i∥ &lt; ↑ε</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"err\">∥</span> <span class=\"n\">t</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"err\">∥</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">skip</span>\n</code></pre></div>",
        "id": 200385718,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1591774327
    },
    {
        "content": "<p>strangely enough the type is correct again if <code>&gt; 0</code> is removed:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">normed_space</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">normed_group</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n\n<span class=\"c1\">-- ∀ (ε : ℝ), ε &gt; 0 → ∥t.sum f∥ &lt; ε</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"err\">∥</span> <span class=\"n\">t</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"n\">f</span> <span class=\"err\">∥</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">skip</span>\n\n<span class=\"c1\">-- ∀ (ε : ℝ), ∥t.sum (λ (i : α), f i)∥ &lt; ε</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">ε</span><span class=\"o\">,</span> <span class=\"err\">∥</span> <span class=\"n\">t</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"err\">∥</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">skip</span>\n\n<span class=\"c1\">-- INCORRECT</span>\n<span class=\"c1\">-- ∀ (ε : ℕ), ε &gt; 0 → ∥t.sum (λ (i : α), f i)∥ &lt; ↑ε</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"err\">∥</span> <span class=\"n\">t</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"err\">∥</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">skip</span>\n</code></pre></div>",
        "id": 200385858,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1591774454
    },
    {
        "content": "<p>In what sense is it incorrect? It looks like lean was able to type it either way</p>",
        "id": 200387752,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591776189
    },
    {
        "content": "<p>The <code>0</code> is the source of the nat defaulting</p>",
        "id": 200387798,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591776231
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> then why does it get elaborated as \\R in the first example?</p>",
        "id": 200388324,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1591776607
    },
    {
        "content": "<p>maybe not \"incorrect\" but rather \"inconsistent\"</p>",
        "id": 200388337,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1591776629
    },
    {
        "content": "<p>nat defaulting has always been a little weird, since it is somewhat outside the usual elaboration process. It happens \"late\" but it still has to trigger before type inference is complete</p>",
        "id": 200388368,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591776666
    },
    {
        "content": "<p>so should I change it to the longer form <code>\\forall \\e : \\R, \\e &gt; 0 \\to</code>?</p>",
        "id": 200388400,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1591776700
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/runs/756776916\">https://github.com/leanprover-community/mathlib/runs/756776916</a></p>",
        "id": 200388411,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1591776714
    },
    {
        "content": "<p>I've never really been convinced it is a good idea, but the original point was so that people could just write <code>#eval 1 + 1</code> and get something sensible</p>",
        "id": 200388413,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591776717
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/3014\">https://github.com/leanprover-community/mathlib/pull/3014</a></p>",
        "id": 200388415,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1591776717
    },
    {
        "content": "<p>AFAIR you can use <code>ε &gt; (0 : real)</code>.</p>",
        "id": 200388490,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1591776764
    },
    {
        "content": "<p>You can also .. ninja'd</p>",
        "id": 200388504,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591776780
    },
    {
        "content": "<p>oh</p>",
        "id": 200388525,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1591776801
    },
    {
        "content": "<p>we should make <code>∀(ε : ℝ) &gt; 0,</code> work</p>",
        "id": 200388556,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591776833
    },
    {
        "content": "<p>it's a bit silly that you can't put a type ascription there</p>",
        "id": 200388612,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591776855
    },
    {
        "content": "<p>#lean4 ?</p>",
        "id": 200388669,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1591776904
    },
    {
        "content": "<p>3.x should be able to handle it without too much work</p>",
        "id": 200388959,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591777107
    },
    {
        "content": "<p>although I'm not in a position to hack on lean ATM</p>",
        "id": 200388979,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591777132
    }
]