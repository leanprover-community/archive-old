[
    {
        "content": "<p>just in case anybody else is interested in proofs by reflection: <a href=\"https://people.csail.mit.edu/jgross/personal-website/papers/2018-reification-by-parametricity-itp-draft.pdf\" target=\"_blank\" title=\"https://people.csail.mit.edu/jgross/personal-website/papers/2018-reification-by-parametricity-itp-draft.pdf\">https://people.csail.mit.edu/jgross/personal-website/papers/2018-reification-by-parametricity-itp-draft.pdf</a></p>",
        "id": 127486086,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1527992153
    },
    {
        "content": "<p>it's my favorite topic right now since i'm trying to teach myself how to write reflective tactics in lean</p>",
        "id": 127486131,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1527992229
    },
    {
        "content": "<p>i wish i was in oxford so i could attend the workshops at ITP :|</p>",
        "id": 127486177,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1527992328
    },
    {
        "content": "<p>does lean have a <code>vm_compute</code> equivalent?</p>",
        "id": 127486552,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1527993173
    },
    {
        "content": "<p>No. <span class=\"user-mention\" data-user-id=\"110865\">@Jeremy Avigad</span> This paper relates to our discussion about proof by <code>#eval</code></p>",
        "id": 127486600,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527993262
    },
    {
        "content": "<p>I had a conversation with <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> a while back on proofs by reflection. He was pointing out to me that they are not as beneficial in Lean as they are in Coq because of some details of computation in the kernel</p>",
        "id": 127486602,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1527993286
    },
    {
        "content": "<p>I don't remember which detail that was</p>",
        "id": 127486604,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1527993295
    },
    {
        "content": "<p>It's possible to do proof by reflection using the <em>kernel</em> for computation, but it's not very fast</p>",
        "id": 127486617,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527993343
    },
    {
        "content": "<p>doing proof by reflection using the VM is not supported (directly)</p>",
        "id": 127486658,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527993368
    },
    {
        "content": "<p>but you can use tactics, computing in the VM, to craft appropriate theorems as certificates for the kernel</p>",
        "id": 127486661,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527993402
    },
    {
        "content": "<p>is there an example of that in lean? I think the idea of verified decision procedures is very appealing theoretically</p>",
        "id": 127486668,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1527993441
    },
    {
        "content": "<p><code>norm_num</code> and <code>ring</code> use this latter strategy</p>",
        "id": 127486669,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527993456
    },
    {
        "content": "<p><code>cooper</code> uses kernel reflection, and <code>vm_cooper</code> uses \"tactic reflection\"</p>",
        "id": 127486708,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527993488
    },
    {
        "content": "<p>and in lean 4, i think we will be able to extract tactics and use them?</p>",
        "id": 127486709,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1527993498
    },
    {
        "content": "<p>sure, that's one thing compilation should allow</p>",
        "id": 127486711,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527993529
    },
    {
        "content": "<p>not tactics, i mean regular function defs</p>",
        "id": 127486712,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1527993537
    },
    {
        "content": "<p>so we could extract the <code>check_is_even</code> program as described in the paper and have it run in C++</p>",
        "id": 127486718,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1527993567
    },
    {
        "content": "<p>You can <code>#eval check_is_even</code> currently</p>",
        "id": 127486719,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527993583
    },
    {
        "content": "<p>to run in the VM</p>",
        "id": 127486756,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527993603
    },
    {
        "content": "<p>or you can <code>#reduce check_is_even</code> to run in the kernel</p>",
        "id": 127486764,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527993620
    },
    {
        "content": "<p>but, in a sense, we can't reason about vm evaluation, it's outside lean, is my current understanding</p>",
        "id": 127487123,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1527994548
    },
    {
        "content": "<p>if there was a <code>#eval that produced exprs</code> we could though</p>",
        "id": 127487175,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1527994655
    },
    {
        "content": "<p>no but we can trust the results</p>",
        "id": 127487290,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527994893
    },
    {
        "content": "<p>like if we evaluate a <code>bool</code> expr and get <code>tt</code> we believe the same should hold true of reduce</p>",
        "id": 127487328,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527994925
    },
    {
        "content": "<p>The reasoning would go into the definition of the function being evaluated itself</p>",
        "id": 127487339,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527994969
    },
    {
        "content": "<p>reasoning would go into the definition? do you have a concrete example? I don't quite follow. As I understand it the kernel is quite strict. If we use nat, it will reduce everything strictly using the zero / succ nat representation. However, vm evaluation might use a bignum library for speed. How can we say their behavior is equivalent?<br>\n(maybe I should just be reading more about reflection / I don't understand how Lean uses GMP)</p>",
        "id": 127487721,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1527995775
    },
    {
        "content": "<p>The assumption, the trust, goes into assuming that the VM respects the lean model. You verify the lean model</p>",
        "id": 127487986,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527996321
    },
    {
        "content": "<p>ah, gotcha</p>",
        "id": 127488045,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1527996390
    },
    {
        "content": "<p>But that's not much different from assuming the kernel is correctly implemented in C++. You expand your trust level a bit and get fast evaluation</p>",
        "id": 127488054,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527996422
    },
    {
        "content": "<p>it's interesting to me that reflection is slow because generating the reified syntax and reducing the output of the interpretation function are such huge constant overheads. I would've guessed that the manipulations you might do on the AST you create would've been a bigger deal in practice for most problems</p>",
        "id": 127488200,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1527996712
    },
    {
        "content": "<p>well, you weren't kidding about kernel computation</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">is_even</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">is_even</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">ssuc</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">is_even</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">is_even</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">))</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">prove_even</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">constructor</span><span class=\"o\">}]</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">is_even</span> <span class=\"mi\">2000</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">do</span> <span class=\"n\">timetac</span> <span class=\"s2\">&quot;&quot;</span> <span class=\"n\">prove_even</span>\n\n<span class=\"n\">def</span> <span class=\"n\">check_is_even</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span>\n<span class=\"bp\">|</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"n\">tt</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">zero</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">ff</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n&#39;</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">check_is_even</span> <span class=\"n\">n&#39;</span>\n\n<span class=\"n\">local</span> <span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"n\">elab_as_eliminator</span><span class=\"o\">]</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">case_strong_induction_on</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">cie_sound</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">check_is_even</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">tt</span> <span class=\"bp\">→</span> <span class=\"n\">is_even</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">case_strong_induction_on</span> <span class=\"n\">n</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">is_even</span><span class=\"bp\">.</span><span class=\"n\">zero</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n&#39;</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">n&#39;</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span><span class=\"o\">,</span> <span class=\"k\">have</span> <span class=\"n\">h₃</span> <span class=\"o\">:</span> <span class=\"n\">check_is_even</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">ff</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">contradiction</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">m</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span> <span class=\"n\">h₃</span><span class=\"o\">,</span> <span class=\"n\">is_even</span><span class=\"bp\">.</span><span class=\"n\">ssuc</span> <span class=\"bp\">_</span> <span class=\"o\">((</span><span class=\"n\">h₂</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">le_succ</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">h₃</span><span class=\"o\">)))</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">is_even</span> <span class=\"mi\">2000</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">do</span> <span class=\"n\">timetac</span> <span class=\"s2\">&quot;&quot;</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">exact</span> <span class=\"n\">cie_sound</span> <span class=\"mi\">2000</span> <span class=\"n\">rfl</span><span class=\"o\">]</span>\n</pre></div>",
        "id": 127495213,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1528014110
    }
]