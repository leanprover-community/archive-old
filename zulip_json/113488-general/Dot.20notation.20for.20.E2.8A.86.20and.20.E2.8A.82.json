[
    {
        "content": "<p>We currently have no dot notation relating <code>⊆</code> and <code>⊂</code> because we have no analog of <code>preorder</code> for them. This is very annoying because then you have lemmas like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.ssubset_of_subset_of_ssubset\">docs#finset.ssubset_of_subset_of_ssubset</a> which take ages to write down. I'm thinking of defining such a thing. Given that it's only used by <code>set</code> and <code>finset</code>, an unbundled relation class should be enough while easy and lightweight.</p>\n<p>Are people against the idea? If not, how should it be called? <code>is_preorder</code> is already taken.</p>",
        "id": 267559861,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641895482
    },
    {
        "content": "<p><code>ordered_set_like</code>?</p>",
        "id": 267560528,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1641895907
    },
    {
        "content": "<p>I was thinking of a more general class</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">TBD</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">is_preorder</span> <span class=\"n\">α</span> <span class=\"n\">r</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">right_iff_left_not_left</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span> <span class=\"n\">r</span> <span class=\"n\">b</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 267560802,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641896086
    },
    {
        "content": "<p>Or maybe just</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">TBD</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">right_iff_left_not_left</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span> <span class=\"n\">r</span> <span class=\"n\">b</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>because we're really only needing the interaction. Existing typeclasses already handle each of <code>⊆</code> and <code>⊂</code> alone</p>",
        "id": 267560957,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641896168
    },
    {
        "content": "<p>I see! So assuming a name like <code>strict_nonstrict_order</code>, the actual dot-notated lemmas you want look like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">has_ssubset.ssubset.subset</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_subset</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_ssubset</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">strict_nonstrict_order</span> <span class=\"o\">(</span><span class=\"bp\">⊆</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">⊂</span><span class=\"o\">)]</span>\n  <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">⊂</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">⊆</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">_</span>\n</code></pre></div>\n<p>Right?</p>",
        "id": 267562130,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1641896890
    },
    {
        "content": "<p>Yes, exactly!</p>",
        "id": 267562153,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641896915
    },
    {
        "content": "<p>I would definitely remove the <code>extends</code> since you'll get a dangerous instance.</p>",
        "id": 267562328,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1641897009
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113488-general/topic/Dot.20notation.20for.20.E2.8A.86.20and.20.E2.8A.82/near/267560802\">said</a>:</p>\n<blockquote>\n<p>I was thinking of a more general class</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">TBD</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">is_preorder</span> <span class=\"n\">α</span> <span class=\"n\">r</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">right_iff_left_not_left</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span> <span class=\"n\">r</span> <span class=\"n\">b</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>The <code>TBD.to_is_preorder</code> this creates is dangerous as is has no way to infer <code>s</code>. So your other suggestion is the right one</p>",
        "id": 267562368,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1641897031
    },
    {
        "content": "<p>I definitely the <code>extends</code> too <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 267562373,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641897034
    },
    {
        "content": "<p>I also definitely the <code>extends</code>, simultaneously it seems</p>",
        "id": 267562399,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1641897056
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/11381\">#11381</a></p>",
        "id": 267593734,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641913384
    }
]