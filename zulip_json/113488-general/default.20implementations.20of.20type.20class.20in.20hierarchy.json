[
    {
        "content": "<p>Say I have the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Foo</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Bar</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Foo</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I would like some kind of mechanism (a macro?) that will allow me to define an instance of <code>Bar</code> by just specifying <code>bar</code> and having it use that implementation for <code>foo</code>. In other others, I want to write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Bar</span> <span class=\"n\">nat</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">bar</span> <span class=\"o\">:=</span> <span class=\"mi\">10</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>and have it automatically set <code>foo := 10</code> as well. Is this possible?</p>",
        "id": 280276924,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1651009815
    },
    {
        "content": "<p>IIRC, I think you can just add <code>(to_Foo := default_def_here)</code> to the declaration of the <code>Bar</code> class (syntax might be different in Lean 4, and it's also possible I've botched this entirely). Is that what you're looking for?</p>",
        "id": 280277766,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1651010269
    },
    {
        "content": "<p>Let me try. I'm using Lean 3.</p>",
        "id": 280277855,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1651010294
    },
    {
        "content": "<p>Oh, your capitalization threw me off.</p>",
        "id": 280277877,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1651010309
    },
    {
        "content": "<p>Oh cool. You're right. Nice.</p>",
        "id": 280277885,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1651010313
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Bar</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Foo</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"n\">bar</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 280277984,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651010381
    },
    {
        "content": "<p>Yep. For some reason, I was reluctant to try the obvious.</p>",
        "id": 280278160,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1651010440
    },
    {
        "content": "<p>What distinguishes new fields from new default values is whether you specify the type or not. For example, this throws an error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Bar</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Foo</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"o\">:=</span> <span class=\"n\">bar</span><span class=\"o\">)</span> <span class=\"c1\">-- `foo` is already a field of `Foo`</span>\n</code></pre></div>",
        "id": 280278228,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651010475
    },
    {
        "content": "<p>I see. Didn't know that.</p>",
        "id": 280278298,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1651010515
    }
]