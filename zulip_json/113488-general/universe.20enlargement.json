[
    {
        "content": "<p>Suppose I have a universe-polymorphic proposition <code>P.{u} : Prop</code> and a proof of <code>P.{u0}</code> <em>as a term</em> (either in the empty context, or, ideally, in a context which only contains variables whose types are <code>Type v</code> for <code>v &lt;= u0</code>). Is it then true that I can also prove <code>P.{u1}</code>, for any <code>u1 &gt;= u0</code>?</p>",
        "id": 194927638,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587561132
    },
    {
        "content": "<p>Is this something I could prove just by inducting over the proof term?</p>",
        "id": 194927663,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587561147
    },
    {
        "content": "<p>Obviously it depends on my axioms, since for example I could consistently assume that <code>Type 0</code> has no inaccessibles, which I can prove is false in <code>Type 1</code>. I mean using the usual axioms of Lean.</p>",
        "id": 194927727,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587561179
    },
    {
        "content": "<p>Let <code>P.{u} = |Type u| &lt; |Type 1|</code> and <code>u0 = 0</code></p>",
        "id": 194934891,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587564110
    },
    {
        "content": "<p>You need only the usual axioms to prove that <code>P.{0}</code> is true and <code>P.{1}</code> is false</p>",
        "id": 194935110,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587564192
    },
    {
        "content": "<p>Hmm, right. I need to find a better way to express what I mean.</p>",
        "id": 194936548,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587564777
    },
    {
        "content": "<p>One true thing is that there is a model of lean where the universes are any increasing countable sequence of inaccessibles, not necessarily the minimal one, which suggests that it is possible to convert any proof using universes <code>Type 0, ..., Type k</code> into one using <code>Type u_0, ..., Type u_k</code> where <code>u_0 &lt; ... &lt; u_k</code>. However this is not so easy because of the existence of the universe successor function: <code>Type 0</code> has type <code>Type 1</code> but <code>Type u_0</code> does not have type <code>Type u_1</code>. So this doesn't work without modification</p>",
        "id": 194937351,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587565066
    }
]