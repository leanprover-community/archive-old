[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">bool</span><span class=\"o\">,</span> <span class=\"n\">bnot</span> <span class=\"o\">(</span>\n  <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"bp\">||</span> <span class=\"n\">P</span> <span class=\"bp\">||</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"bp\">||</span> <span class=\"bp\">¬</span><span class=\"n\">Q</span> <span class=\"bp\">||</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"bp\">||</span> <span class=\"n\">Q</span> <span class=\"bp\">||</span> <span class=\"bp\">¬</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"bp\">||</span> <span class=\"n\">R</span> <span class=\"bp\">||</span> <span class=\"bp\">¬</span><span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"bp\">&amp;&amp;</span>\n  <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"bp\">||</span> <span class=\"n\">S</span> <span class=\"bp\">||</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"bp\">||</span> <span class=\"bp\">¬</span><span class=\"n\">U</span> <span class=\"bp\">||</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"bp\">||</span> <span class=\"n\">S</span> <span class=\"bp\">||</span> <span class=\"bp\">¬</span><span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"n\">S</span> <span class=\"bp\">||</span> <span class=\"bp\">¬</span><span class=\"n\">R</span> <span class=\"bp\">||</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"bp\">&amp;&amp;</span>\n  <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"bp\">||</span> <span class=\"bp\">¬</span><span class=\"n\">Q</span> <span class=\"bp\">||</span> <span class=\"bp\">¬</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"n\">Q</span> <span class=\"bp\">||</span> <span class=\"n\">U</span> <span class=\"bp\">||</span> <span class=\"bp\">¬</span><span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"n\">P</span> <span class=\"bp\">||</span> <span class=\"bp\">¬</span><span class=\"n\">R</span> <span class=\"bp\">||</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">||</span> <span class=\"bp\">¬</span><span class=\"n\">U</span> <span class=\"bp\">||</span> <span class=\"bp\">¬</span><span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"bp\">&amp;&amp;</span>\n  <span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"n\">R</span> <span class=\"bp\">||</span> <span class=\"bp\">¬</span><span class=\"n\">P</span> <span class=\"bp\">||</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">||</span> <span class=\"bp\">¬</span><span class=\"n\">R</span> <span class=\"bp\">||</span> <span class=\"bp\">¬</span><span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"n\">R</span> <span class=\"bp\">||</span> <span class=\"bp\">¬</span><span class=\"n\">Q</span> <span class=\"bp\">||</span> <span class=\"bp\">¬</span><span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"bp\">||</span> <span class=\"n\">R</span> <span class=\"bp\">||</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"bp\">&amp;&amp;</span>\n  <span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"n\">U</span> <span class=\"bp\">||</span> <span class=\"n\">P</span> <span class=\"bp\">||</span> <span class=\"bp\">¬</span><span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"bp\">||</span> <span class=\"bp\">¬</span><span class=\"n\">Q</span> <span class=\"bp\">||</span> <span class=\"bp\">¬</span><span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"bp\">||</span> <span class=\"n\">R</span> <span class=\"bp\">||</span> <span class=\"bp\">¬</span><span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">||</span> <span class=\"n\">P</span> <span class=\"bp\">||</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">&amp;&amp;</span>\n  <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"bp\">||</span> <span class=\"n\">P</span> <span class=\"bp\">||</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"n\">U</span> <span class=\"bp\">||</span> <span class=\"n\">Q</span> <span class=\"bp\">||</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"n\">U</span> <span class=\"bp\">||</span> <span class=\"n\">R</span> <span class=\"bp\">||</span> <span class=\"bp\">¬</span><span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"n\">S</span> <span class=\"bp\">||</span> <span class=\"bp\">¬</span><span class=\"n\">U</span> <span class=\"bp\">||</span> <span class=\"bp\">¬</span><span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">&amp;&amp;</span>\n  <span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"n\">U</span> <span class=\"bp\">||</span> <span class=\"bp\">¬</span><span class=\"n\">S</span> <span class=\"bp\">||</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"n\">S</span> <span class=\"bp\">||</span> <span class=\"n\">P</span> <span class=\"bp\">||</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"bp\">||</span> <span class=\"n\">Q</span> <span class=\"bp\">||</span> <span class=\"bp\">¬</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"n\">S</span> <span class=\"bp\">||</span> <span class=\"bp\">¬</span><span class=\"n\">R</span> <span class=\"bp\">||</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"bp\">&amp;&amp;</span>\n  <span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"n\">Q</span> <span class=\"bp\">||</span> <span class=\"bp\">¬</span><span class=\"n\">S</span> <span class=\"bp\">||</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"bp\">||</span> <span class=\"n\">R</span> <span class=\"bp\">||</span> <span class=\"bp\">¬</span><span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"bp\">||</span> <span class=\"n\">Q</span> <span class=\"bp\">||</span> <span class=\"bp\">¬</span><span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"bp\">||</span> <span class=\"bp\">¬</span><span class=\"n\">S</span> <span class=\"bp\">||</span> <span class=\"bp\">¬</span><span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"bp\">&amp;&amp;</span>\n  <span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"n\">U</span> <span class=\"bp\">||</span> <span class=\"n\">R</span> <span class=\"bp\">||</span> <span class=\"bp\">¬</span><span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"n\">U</span> <span class=\"bp\">||</span> <span class=\"n\">P</span> <span class=\"bp\">||</span> <span class=\"bp\">¬</span><span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"n\">R</span> <span class=\"bp\">||</span> <span class=\"bp\">¬</span><span class=\"n\">P</span> <span class=\"bp\">||</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"bp\">||</span> <span class=\"n\">S</span> <span class=\"bp\">||</span> <span class=\"bp\">¬</span><span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"bp\">&amp;&amp;</span>\n  <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"bp\">||</span> <span class=\"bp\">¬</span><span class=\"n\">U</span> <span class=\"bp\">||</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"n\">S</span> <span class=\"bp\">||</span> <span class=\"n\">R</span> <span class=\"bp\">||</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"n\">P</span> <span class=\"bp\">||</span> <span class=\"bp\">¬</span><span class=\"n\">Q</span> <span class=\"bp\">||</span> <span class=\"bp\">¬</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"n\">P</span> <span class=\"bp\">||</span> <span class=\"n\">R</span> <span class=\"bp\">||</span> <span class=\"bp\">¬</span><span class=\"n\">S</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"c1\">-- squeeze_simp, -- hangs?</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"c1\">-- works</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>AITP making me think about 3SAT. <code>squeeze_simp</code> can't tell me how <code>simp</code> did it.</p>",
        "id": 210406803,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1600356661
    },
    {
        "content": "<p>PS I've never used bool before.</p>",
        "id": 210407229,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1600356889
    },
    {
        "content": "<p>Same behaviour for <code>∀ P Q R S U : bool, ff = ( </code></p>",
        "id": 210407453,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1600356997
    },
    {
        "content": "<p>Independent of this, can anyone give me an easy way to change a DIMACS (or whatever it's called) file (as for example output by <a href=\"https://toughsat.appspot.com/\">toughsat</a>) into a Lean file of either the above form or the analogous <code>Prop</code> form?</p>",
        "id": 210407815,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1600357141
    },
    {
        "content": "<p>I'm trying to set a good example sheet question</p>",
        "id": 210407874,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1600357167
    },
    {
        "content": "<p>here's a quick terrible hack that probably does what you want:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n<span class=\"kn\">import</span> <span class=\"nn\">itertools</span>\n<span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">argv</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"s2\">&quot;r&quot;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n  <span class=\"n\">clauses</span> <span class=\"o\">=</span> <span class=\"p\">[[</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s2\">&quot; &quot;</span><span class=\"p\">)[:</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]]</span> <span class=\"k\">for</span> <span class=\"n\">c</span> <span class=\"ow\">in</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">readlines</span><span class=\"p\">()</span> <span class=\"k\">if</span> <span class=\"n\">c</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">!=</span> <span class=\"s1\">&#39;c&#39;</span> <span class=\"ow\">and</span> <span class=\"n\">c</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">!=</span> <span class=\"s1\">&#39;p&#39;</span><span class=\"p\">]</span>\n  <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;∀ </span><span class=\"si\">%s</span><span class=\"s2\"> : bool, </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span>\n    <span class=\"p\">(</span><span class=\"s2\">&quot; &quot;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"s2\">&quot;x</span><span class=\"si\">%d</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"n\">x</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"p\">{</span><span class=\"nb\">abs</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">itertools</span><span class=\"o\">.</span><span class=\"n\">chain</span><span class=\"o\">.</span><span class=\"n\">from_iterable</span><span class=\"p\">(</span><span class=\"n\">clauses</span><span class=\"p\">)}),</span>\n     <span class=\"s2\">&quot; &amp;&amp; &quot;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"s2\">&quot;(</span><span class=\"si\">%s</span><span class=\"s2\">)&quot;</span> <span class=\"o\">%</span> <span class=\"s2\">&quot; || &quot;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"s2\">&quot;x</span><span class=\"si\">%d</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"n\">x</span> <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span> <span class=\"k\">else</span> <span class=\"s2\">&quot;¬x</span><span class=\"si\">%d</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"o\">-</span><span class=\"n\">x</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">c</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">c</span> <span class=\"ow\">in</span> <span class=\"n\">clauses</span><span class=\"p\">)))</span>\n</code></pre></div>",
        "id": 210413047,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1600359318
    },
    {
        "content": "<p><code>squeeze_simp</code> can be very slow (quadratic in the number of lemmas it uses?), so maybe leave it alone for 10 minutes and see what comes out of it?</p>",
        "id": 210413082,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1600359339
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> That's right. It might be worth adding a flag to make it faster. It gets slow because, once it has a <code>simp</code> list, it tries to prune the lemmas that don't contribute to the proof. If we don't try to minimize, it gets faster.</p>",
        "id": 210414303,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1600359933
    },
    {
        "content": "<p>Oh lol I've just realised the nots should be <code>!</code>s :-)</p>",
        "id": 210416352,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1600360938
    },
    {
        "content": "<p>I'm such a boolnoob</p>",
        "id": 210416394,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1600360959
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> Just a quick note, for these examples <code>simp</code> is overkilling, in fact, you don't need to <code>import tactic</code></p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">bool</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">bool</span><span class=\"o\">,</span> <span class=\"n\">bnot</span> <span class=\"o\">(</span>\n  <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"bp\">||</span> <span class=\"n\">P</span> <span class=\"bp\">||</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"bp\">||</span> <span class=\"bp\">¬</span><span class=\"n\">Q</span> <span class=\"bp\">||</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"bp\">||</span> <span class=\"n\">Q</span> <span class=\"bp\">||</span> <span class=\"bp\">¬</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"bp\">||</span> <span class=\"n\">R</span> <span class=\"bp\">||</span> <span class=\"bp\">¬</span><span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"bp\">&amp;&amp;</span>\n  <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"bp\">||</span> <span class=\"n\">S</span> <span class=\"bp\">||</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"bp\">||</span> <span class=\"bp\">¬</span><span class=\"n\">U</span> <span class=\"bp\">||</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"bp\">||</span> <span class=\"n\">S</span> <span class=\"bp\">||</span> <span class=\"bp\">¬</span><span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"n\">S</span> <span class=\"bp\">||</span> <span class=\"bp\">¬</span><span class=\"n\">R</span> <span class=\"bp\">||</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"bp\">&amp;&amp;</span>\n  <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"bp\">||</span> <span class=\"bp\">¬</span><span class=\"n\">Q</span> <span class=\"bp\">||</span> <span class=\"bp\">¬</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"n\">Q</span> <span class=\"bp\">||</span> <span class=\"n\">U</span> <span class=\"bp\">||</span> <span class=\"bp\">¬</span><span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"n\">P</span> <span class=\"bp\">||</span> <span class=\"bp\">¬</span><span class=\"n\">R</span> <span class=\"bp\">||</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">||</span> <span class=\"bp\">¬</span><span class=\"n\">U</span> <span class=\"bp\">||</span> <span class=\"bp\">¬</span><span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"bp\">&amp;&amp;</span>\n  <span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"n\">R</span> <span class=\"bp\">||</span> <span class=\"bp\">¬</span><span class=\"n\">P</span> <span class=\"bp\">||</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">||</span> <span class=\"bp\">¬</span><span class=\"n\">R</span> <span class=\"bp\">||</span> <span class=\"bp\">¬</span><span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"n\">R</span> <span class=\"bp\">||</span> <span class=\"bp\">¬</span><span class=\"n\">Q</span> <span class=\"bp\">||</span> <span class=\"bp\">¬</span><span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"bp\">||</span> <span class=\"n\">R</span> <span class=\"bp\">||</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"bp\">&amp;&amp;</span>\n  <span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"n\">U</span> <span class=\"bp\">||</span> <span class=\"n\">P</span> <span class=\"bp\">||</span> <span class=\"bp\">¬</span><span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"bp\">||</span> <span class=\"bp\">¬</span><span class=\"n\">Q</span> <span class=\"bp\">||</span> <span class=\"bp\">¬</span><span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"bp\">||</span> <span class=\"n\">R</span> <span class=\"bp\">||</span> <span class=\"bp\">¬</span><span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">||</span> <span class=\"n\">P</span> <span class=\"bp\">||</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">&amp;&amp;</span>\n  <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"bp\">||</span> <span class=\"n\">P</span> <span class=\"bp\">||</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"n\">U</span> <span class=\"bp\">||</span> <span class=\"n\">Q</span> <span class=\"bp\">||</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"n\">U</span> <span class=\"bp\">||</span> <span class=\"n\">R</span> <span class=\"bp\">||</span> <span class=\"bp\">¬</span><span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"n\">S</span> <span class=\"bp\">||</span> <span class=\"bp\">¬</span><span class=\"n\">U</span> <span class=\"bp\">||</span> <span class=\"bp\">¬</span><span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">&amp;&amp;</span>\n  <span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"n\">U</span> <span class=\"bp\">||</span> <span class=\"bp\">¬</span><span class=\"n\">S</span> <span class=\"bp\">||</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"n\">S</span> <span class=\"bp\">||</span> <span class=\"n\">P</span> <span class=\"bp\">||</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"bp\">||</span> <span class=\"n\">Q</span> <span class=\"bp\">||</span> <span class=\"bp\">¬</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"n\">S</span> <span class=\"bp\">||</span> <span class=\"bp\">¬</span><span class=\"n\">R</span> <span class=\"bp\">||</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"bp\">&amp;&amp;</span>\n  <span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"n\">Q</span> <span class=\"bp\">||</span> <span class=\"bp\">¬</span><span class=\"n\">S</span> <span class=\"bp\">||</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"bp\">||</span> <span class=\"n\">R</span> <span class=\"bp\">||</span> <span class=\"bp\">¬</span><span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"bp\">||</span> <span class=\"n\">Q</span> <span class=\"bp\">||</span> <span class=\"bp\">¬</span><span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"bp\">||</span> <span class=\"bp\">¬</span><span class=\"n\">S</span> <span class=\"bp\">||</span> <span class=\"bp\">¬</span><span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"bp\">&amp;&amp;</span>\n  <span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"n\">U</span> <span class=\"bp\">||</span> <span class=\"n\">R</span> <span class=\"bp\">||</span> <span class=\"bp\">¬</span><span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"n\">U</span> <span class=\"bp\">||</span> <span class=\"n\">P</span> <span class=\"bp\">||</span> <span class=\"bp\">¬</span><span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"n\">R</span> <span class=\"bp\">||</span> <span class=\"bp\">¬</span><span class=\"n\">P</span> <span class=\"bp\">||</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"bp\">||</span> <span class=\"n\">S</span> <span class=\"bp\">||</span> <span class=\"bp\">¬</span><span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"bp\">&amp;&amp;</span>\n  <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"bp\">||</span> <span class=\"bp\">¬</span><span class=\"n\">U</span> <span class=\"bp\">||</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"n\">S</span> <span class=\"bp\">||</span> <span class=\"n\">R</span> <span class=\"bp\">||</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"n\">P</span> <span class=\"bp\">||</span> <span class=\"bp\">¬</span><span class=\"n\">Q</span> <span class=\"bp\">||</span> <span class=\"bp\">¬</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"n\">P</span> <span class=\"bp\">||</span> <span class=\"n\">R</span> <span class=\"bp\">||</span> <span class=\"bp\">¬</span><span class=\"n\">S</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"n\">dec_trivial</span>\n</code></pre></div>",
        "id": 210430704,
        "sender_full_name": "Minchao Wu",
        "timestamp": 1600367387
    },
    {
        "content": "<p>Thanks. Marijn Heule sent me this: <a href=\"https://www.cs.utexas.edu/~marijn/game/\">https://www.cs.utexas.edu/~marijn/game/</a></p>",
        "id": 210443510,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1600373096
    },
    {
        "content": "<p>That game is really annoying</p>",
        "id": 210444675,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1600373668
    },
    {
        "content": "<p>I won!</p>",
        "id": 210444941,
        "sender_full_name": "Reid Barton",
        "timestamp": 1600373789
    },
    {
        "content": "<p>Me too! I used an \"algorithm\" of click until the board is completely coloured, then repeatedly find a triple of reds, and double click a random one of those 3. I'm curious if that procedure has a name in 3-sat literature.</p>",
        "id": 210447679,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1600375133
    },
    {
        "content": "<p>related: <a href=\"https://en.wikipedia.org/wiki/Bogosort\">https://en.wikipedia.org/wiki/Bogosort</a></p>",
        "id": 210449188,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1600375810
    },
    {
        "content": "<p>Hahah I think the bogosort analogue would be more like, pick a random assignment, assign everything check for SAT, unassign everything, repeat. Perhaps my approach is the Bozosort analogue?!</p>",
        "id": 210449624,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1600376030
    },
    {
        "content": "<p>GSAT might be fitting!</p>",
        "id": 210451673,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1600376958
    },
    {
        "content": "<p>Actually, random assignment is a pretty good strategy if satisfying assignments have high probability</p>",
        "id": 210458462,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600381106
    },
    {
        "content": "<p>which might be the case due to structural features of the problem</p>",
        "id": 210458482,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600381123
    },
    {
        "content": "<p>These questions typically have one satisfying solution apparently</p>",
        "id": 210482679,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1600410295
    },
    {
        "content": "<p>well the interesting ones do, but a big portion of what a sat solver does is triage where it tries to determine quickly if a problem is easy. A lot of sat problems are literally bottlenecked on parsing the input</p>",
        "id": 210524088,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600438424
    }
]