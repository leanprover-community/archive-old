[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n<span class=\"kn\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">- Add an extra element `1` to a type -/</span>\n<span class=\"n\">def</span> <span class=\"n\">with_one</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">option</span> <span class=\"n\">α</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">with_one</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">monad</span> <span class=\"n\">with_one</span> <span class=\"o\">:=</span> <span class=\"n\">option</span><span class=\"bp\">.</span><span class=\"n\">monad</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_one</span> <span class=\"o\">(</span><span class=\"n\">with_one</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">none</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">inhabited</span> <span class=\"o\">(</span><span class=\"n\">with_one</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"mi\">1</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">[</span><span class=\"n\">nonempty</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">nontrivial</span> <span class=\"o\">(</span><span class=\"n\">with_one</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">option</span><span class=\"bp\">.</span><span class=\"n\">nontrivial</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_t</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">with_one</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">some</span><span class=\"bp\">⟩</span>\n\n<span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">irreducible</span><span class=\"o\">]</span> <span class=\"n\">with_one</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">one_ne_coe</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">with_one</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">option</span><span class=\"bp\">.</span><span class=\"n\">no_confusion</span> <span class=\"n\">h</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">coe_ne_one</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">with_one</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">with_one</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">option</span><span class=\"bp\">.</span><span class=\"n\">no_confusion</span> <span class=\"n\">h</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">ne_one_iff_exists</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">with_one</span> <span class=\"n\">α</span><span class=\"o\">},</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n<span class=\"bp\">|</span> <span class=\"mi\">1</span>       <span class=\"o\">:=</span> <span class=\"bp\">⟨λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">false</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"err\">$</span> <span class=\"n\">h</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">rintros</span> <span class=\"bp\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">ha</span><span class=\"bp\">⟩</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">simpa</span> <span class=\"kn\">using</span> <span class=\"n\">h</span> <span class=\"o\">}</span><span class=\"bp\">⟩</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">with_one</span><span class=\"bp\">.</span><span class=\"n\">coe_ne_one</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">with_one</span>\n</code></pre></div>\n\n\n<p>produces  a SIGSEGV for me on Ubuntu 18.04 with Lean 3.18.4 . Can anyone else reproduce? This is pretty much directly from mathlib <code>algebra.group.with_one</code> except that I have added the <code>attribute [irreducible] with_one</code> line, possibly too early -- but I didn't expect a segfault.</p>",
        "id": 207249677,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597751380
    },
    {
        "content": "<p>You can't use <code>option.no_confusion</code> after marking it irreducible</p>",
        "id": 207249810,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1597751470
    },
    {
        "content": "<p>No idea why it segfaults though</p>",
        "id": 207249844,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1597751500
    },
    {
        "content": "<p>Please remove references to mathlib and file as a bug.  Segfaults are always bugs.</p>",
        "id": 207250482,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1597752035
    },
    {
        "content": "<p>I've already cleared out the mathlib imports. Can someone else confirm it's segfaulting for them?</p>",
        "id": 207251354,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597752746
    },
    {
        "content": "<p>nontrivial?</p>",
        "id": 207251374,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1597752768
    },
    {
        "content": "<p>I think I've minimised it to the point where there's no mathlib imports, and commenting out any line won't segfault anymore.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n\n<span class=\"n\">def</span> <span class=\"n\">with_one</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">option</span> <span class=\"n\">α</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_one</span> <span class=\"o\">(</span><span class=\"n\">with_one</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">none</span><span class=\"bp\">⟩</span>\n\n<span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">irreducible</span><span class=\"o\">]</span> <span class=\"n\">with_one</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">ne_one_iff_exists</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">with_one</span> <span class=\"n\">α</span><span class=\"o\">},</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n<span class=\"bp\">|</span> <span class=\"mi\">1</span>       <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"kn\">using</span> <span class=\"o\">}</span><span class=\"bp\">⟩</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>\n\n\n<p>If whatever is between the braces contains <code>using</code> then it crashes. Otherwise Lean just complains about unknown identifier or something else.</p>\n<p><a href=\"https://github.com/leanprover-community/lean/issues/450\">lean#450</a> . The issue title is vague since I don't really know what is going on tbh.</p>",
        "id": 207251866,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1597753145
    },
    {
        "content": "<p>Thanks Shing. I was minimising and restarting Lean in VS Code and then when I would restart VS Code it wouldn't segfault any more -- I had got as far as I did by constantly restarting VS Code</p>",
        "id": 207252211,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597753394
    },
    {
        "content": "<p>For minimizing crashes I generally test from the command line--I don't totally trust emacs to accurately report what is happening when Lean is crashing (though it does seem to generally work)</p>",
        "id": 207253190,
        "sender_full_name": "Reid Barton",
        "timestamp": 1597754101
    },
    {
        "content": "<p>If you use a debug build of lean then you actually get an error message instead of a segfault.  This makes it a bit easier.</p>",
        "id": 207253354,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1597754185
    }
]