[
    {
        "content": "<p>hmm they're used extensively in mathlib... but I heard that if I use typeclasses a lot I will get... diamonds? well color me clueless I haven't used typeclasses before even though I know the syntax... hmm so what are diamonds? are they dangerous? how can I avoid them?</p>",
        "id": 263248677,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1638339085
    },
    {
        "content": "<p>in rust there are traits, they are similar to typeclasses in many ways but diamonds don't exist in rust</p>",
        "id": 263248696,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1638339121
    },
    {
        "content": "<p>There's a description of \"the diamond problem\" with an example on page 5: <a href=\"https://arxiv.org/abs/2001.04301\">https://arxiv.org/abs/2001.04301</a></p>",
        "id": 263249217,
        "sender_full_name": "Chris B",
        "timestamp": 1638339672
    },
    {
        "content": "<p>I'm not sure if it's mentioned in that paper, but another flavor of the diamond problem is when through diamond inheritance you get conflicting definitions for things -- a subtle problem that affects theorem proving in contrast to normal software development is that the conflicting definitions might be equal but not <em>definitionally</em> equal.</p>\n<p>I'm half-remembering a case involving algebraic structures and the natural numbers where the two operations were equal, but one inducted on the left argument and the other on the right.  <em>Edit:</em> I think it was this: <a href=\"https://github.com/leanprover-community/mathlib/commit/63801552184f2a519c95a45561300547837915cc\">https://github.com/leanprover-community/mathlib/commit/63801552184f2a519c95a45561300547837915cc</a></p>",
        "id": 263250036,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1638340552
    },
    {
        "content": "<p>That's a good point. In Rust you can only have one implementation of a trait for a given type, so it doesn't matter which path you chase to get to the bottom of what looks like a diamond (I'm sure there's a counter-example for some <code>unsafe box dyn &amp;&amp;*FnOnce</code> something or other).</p>",
        "id": 263250483,
        "sender_full_name": "Chris B",
        "timestamp": 1638341117
    },
    {
        "content": "<p>Does <a href=\"https://leanprover-community.github.io/glossary.html#diamond\">glossary#diamond</a> work? [edit: yes it does <span aria-label=\"octopus\" class=\"emoji emoji-1f419\" role=\"img\" title=\"octopus\">:octopus:</span>]</p>",
        "id": 263250492,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1638341145
    },
    {
        "content": "<p>So when someone reports that they have found a diamond, how does that manifest?  Something running much more slowly than it should?  Or Lean thinking there's a mismatch between things that appear to be identical?</p>",
        "id": 263262419,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1638350402
    },
    {
        "content": "<p>You will get goals of the form <code>foo = foo</code> that aren't provable by <code>rfl</code>.</p>",
        "id": 263262519,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1638350462
    },
    {
        "content": "<p>That's a typical example of how a diamond manifests</p>",
        "id": 263262560,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1638350484
    },
    {
        "content": "<p>Because secretly under the hood the goal is something like <code>@foo (bar.to_baz _inst_1) = @foo (quux.to_baz (bar.to_quux _inst_1))</code> and the two ways of getting <code>baz</code> from <code>bar</code> aren't definitionally equal.</p>",
        "id": 263262735,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1638350593
    },
    {
        "content": "<p>In the past I've seen Lean complain that some function expected argument <code>x</code> but was provided <code>x</code> (for some expression <code>x</code>).  Might that be a result of a diamond?</p>",
        "id": 263262899,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1638350690
    },
    {
        "content": "<p>Possibly</p>",
        "id": 263264246,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1638351509
    }
]