[
    {
        "content": "<p>I've been struggling to decide whether the following is provable constructively:<br>\nlemma not_forall_exists_nat (p : ℕ -&gt; bool) : ¬ (∀ (a : ℕ), p a) -&gt; ∃ (a : ℕ), ¬ p a</p>\n<p>I don't see any way to prove it, so I've mostly given up hope that it is provable, but my intuition says that there is in fact a constructive procedure for producing the witness, which is to just check each natural in order. I imagine the way to show it is unprovable would be to exhibit some strange Godelian p.</p>",
        "id": 186181588,
        "sender_full_name": "Vlad Firoiu",
        "timestamp": 1579612934
    },
    {
        "content": "<p>I think it is unprovable constructively, with the counterexample Kripke model looking like ℕ union {*}, with <code>* ≤ n</code> for each n. At <code>*</code>, <code>p</code> never holds; at <code>n</code>, only <code>p n</code> holds. Then <code>* |- ¬ (∀a, p a)</code> (since at each point, at most one a satisfies <code>p a</code>), <code>* ||- ∀ a, p a ∨ ¬ p a</code> (since at each point <code>n</code>, just check whether <code>n = a</code>), but not <code>* ||- ∃ a, ¬ p a</code> (let <code>n</code> be the corresponding instantiation of <code>a</code>, then <code>n ≥ *</code> and <code>p n</code> is true but <code>_|_</code> is false).</p>",
        "id": 186183582,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1579614403
    },
    {
        "content": "<p>It is provable constructively.</p>",
        "id": 186196734,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1579622385
    },
    {
        "content": "<p>How?</p>",
        "id": 186197108,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1579622569
    },
    {
        "content": "<p>ah never mind my proof is circular.</p>",
        "id": 186197257,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1579622661
    },
    {
        "content": "<p>however such an <code>a</code> can be found computably</p>",
        "id": 186197275,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1579622670
    },
    {
        "content": "<p>But not in a predictable amount of time</p>",
        "id": 186197464,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1579622782
    },
    {
        "content": "<p>As far as I understand, it is a requirement for a constructive proof</p>",
        "id": 186197551,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1579622845
    },
    {
        "content": "<p>Disclaimer: I'm not an expert in constructive math</p>",
        "id": 186197643,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1579622894
    },
    {
        "content": "<blockquote>\n<p>But not in a predictable amount of time</p>\n</blockquote>\n<p>I don't think that's a requirement for constructiveness. Well foundedness of <code>&lt;</code> on <code>with_top nat</code> can be proven constructively, but there's no bound on termination time.</p>",
        "id": 186200144,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1579624256
    },
    {
        "content": "<p>This is surprisingly hard to do constructively </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">find</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"bp\">//</span> <span class=\"n\">p</span> <span class=\"n\">n</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n</pre></div>",
        "id": 186202710,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1579625692
    },
    {
        "content": "<p>Then see disclaimer ;)</p>",
        "id": 186222705,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1579637924
    },
    {
        "content": "<p>It is not provable constructively. This is also known as <a href=\"https://en.wikipedia.org/wiki/Markov%27s_principle\" target=\"_blank\" title=\"https://en.wikipedia.org/wiki/Markov%27s_principle\">Markov's principle</a></p>",
        "id": 186229787,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1579642076
    }
]