[
    {
        "content": "<p>Given <a href=\"https://github.com/leanprover-community/mathlib/issues/2686\">#2686</a> and our recent attempts at creating yaml lists that can be auto-nicified into websites. Should we start a <code>freek.yaml</code> somewhere?</p>",
        "id": 197658356,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589529576
    },
    {
        "content": "<p>I think we already had a list somewhere of what was done</p>",
        "id": 197658369,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589529591
    },
    {
        "content": "<p>I made an issue earlier today: <a href=\"https://github.com/leanprover-community/leanprover-community.github.io/issues/14\">https://github.com/leanprover-community/leanprover-community.github.io/issues/14</a></p>",
        "id": 197658461,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589529642
    },
    {
        "content": "<p>There's a <code>100-thms</code> branch with the list. I don't think that's the best place for it.</p>",
        "id": 197658783,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1589529849
    },
    {
        "content": "<p>Yeah, I should have copied the link to <span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span>'s list from my issue: <a href=\"https://github.com/leanprover-community/mathlib/blob/100-thms/docs/100-theorems.md\">https://github.com/leanprover-community/mathlib/blob/100-thms/docs/100-theorems.md</a></p>",
        "id": 197658850,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589529892
    },
    {
        "content": "<p>Aah, right, the branch. Completely forgotten about that.</p>",
        "id": 197659054,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589530013
    },
    {
        "content": "<p>We recently moved all the other files like this to the website, so I agree that we should move the info there to the website. I don't much mind whether it's in YAML form or markdown.</p>",
        "id": 197659291,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589530179
    },
    {
        "content": "<p>I think it should something like</p>\n<div class=\"codehilite\"><pre><span></span><code> <span class=\"nt\">freek</span><span class=\"p\">:</span>\n <span class=\"nt\">1</span><span class=\"p\">:</span>\n  <span class=\"p p-Indicator\">-</span> <span class=\"nt\">title</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">The Irrationality of the Square Root of 2</span>\n  <span class=\"p p-Indicator\">-</span> <span class=\"nt\">decl</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">irr_sqrt_two</span>\n  <span class=\"p p-Indicator\">-</span> <span class=\"nt\">author</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">mathlib</span>\n <span class=\"nt\">2</span><span class=\"p\">:</span>\n  <span class=\"p p-Indicator\">-</span> <span class=\"nt\">title</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">Fundamental Theorem of Algebra</span>\n  <span class=\"p p-Indicator\">-</span> <span class=\"nt\">decl</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">analysis.complex.exists_root</span>\n  <span class=\"p p-Indicator\">-</span> <span class=\"nt\">author</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">Chris Hughes</span>\n</code></pre></div>",
        "id": 197659777,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589530453
    },
    {
        "content": "<p>All the other stuff can be auto-generated, and kept up to date. If the name of a <code>decl</code> changes, the check-broken-link script will notify us.</p>",
        "id": 197659831,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589530496
    },
    {
        "content": "<p>I've almost converted the list into a yaml</p>",
        "id": 197662827,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589532464
    },
    {
        "content": "<p><a href=\"https://gist.github.com/jcommelin/61d3cc00744aa0b445c9f182d0044885\">https://gist.github.com/jcommelin/61d3cc00744aa0b445c9f182d0044885</a></p>",
        "id": 197663579,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589532866
    },
    {
        "content": "<p>It will need a little bit of extra post-processing, I guess</p>",
        "id": 197663599,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589532881
    },
    {
        "content": "<p>But that is better discussed once we know exactly how we want to parse it</p>",
        "id": 197663615,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589532893
    },
    {
        "content": "<p>I'm not convinced this is a good idea, unless someone wants to push through this list.</p>",
        "id": 197664997,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589533685
    },
    {
        "content": "<p>What is the downside?</p>",
        "id": 197665013,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589533701
    },
    {
        "content": "<p>For No. 38 you can put <code>real.am_gm_weighted</code> from <code>analysis/mean_inequalities</code></p>",
        "id": 197665037,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589533718
    },
    {
        "content": "<p>No. 46 should be in <code>quadratic_discriminant</code></p>",
        "id": 197665080,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589533762
    },
    {
        "content": "<p>\"push through this list\" = \"prove the rest of the theorems\"?</p>",
        "id": 197665084,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589533767
    },
    {
        "content": "<p>This list is 100% about communication, and we are not doing well on this (arguably not so interesting) target</p>",
        "id": 197665114,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589533797
    },
    {
        "content": "<p>I mean we can maintained this list, but displaying on the website seems like a bad idea</p>",
        "id": 197665181,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589533819
    },
    {
        "content": "<p>quadratic_eq_zero_iff_discrim_eq_square</p>",
        "id": 197665210,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589533837
    },
    {
        "content": "<p>Maintaining is important. Because the number on Freek's website is there.</p>",
        "id": 197665226,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589533847
    },
    {
        "content": "<p>It better go up</p>",
        "id": 197665233,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589533850
    },
    {
        "content": "<p>We miss many simple problems because we have no high school geometry.</p>",
        "id": 197665274,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589533883
    },
    {
        "content": "<p>I wouldn't display this list anywhere before we hit 75</p>",
        "id": 197665279,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589533888
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/113488-general/topic/freek.2Eyaml/near/197665210\">said</a>:</p>\n<blockquote>\n<p>quadratic_eq_zero_iff_discrim_eq_square</p>\n</blockquote>\n<p>That's not about quartics, right?</p>",
        "id": 197665288,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589533899
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/freek.2Eyaml/near/197665233\">said</a>:</p>\n<blockquote>\n<p>It better go up</p>\n</blockquote>\n<p>your point is that people are \"grading\" the Lean theorem prover by its score on this list?</p>",
        "id": 197665307,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589533914
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/freek.2Eyaml/near/197665279\">said</a>:</p>\n<blockquote>\n<p>I wouldn't display this list anywhere before we hit 75</p>\n</blockquote>\n<p>That's fine. But let's keep a log. And let's tell Freek when he should bump the number on his site.</p>",
        "id": 197665356,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589533927
    },
    {
        "content": "<p>Only people who use proof assistants that are above 70</p>",
        "id": 197665367,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589533941
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"252300\">@Jalex Stark</span> some people do. I think Freek's list get's quite a lot of hits.</p>",
        "id": 197665377,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589533946
    },
    {
        "content": "<p>I'm not a fan of this list, because it has not much mathematical meaning and is very poorly specified. But indeed people know about it, and I think it can be a nice project to work on it, especially since many easy things are missing</p>",
        "id": 197665480,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589534020
    },
    {
        "content": "<p>I don't think the list is particularly useful. But Freek's site does get a fair amount of traffic and right now it directs here: <a href=\"https://github.com/leanprover-community/mathlib/blob/100-thms/docs/100-theorems.md\">https://github.com/leanprover-community/mathlib/blob/100-thms/docs/100-theorems.md</a><br>\nI think it doesn't hurt to make a nicer landing page than that, since people will see it anyway. I don't care in the slightest if we link to that landing page from our site.</p>",
        "id": 197665526,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1589534039
    },
    {
        "content": "<p>I agree, I'm not a fan either.</p>",
        "id": 197665528,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589534039
    },
    {
        "content": "<p>Jalex, I'm sure you can contribute a couple of them</p>",
        "id": 197665632,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589534089
    },
    {
        "content": "<p>Why don't we turn them into Kata? Outsource the problem (-;</p>",
        "id": 197665700,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589534131
    },
    {
        "content": "<p>that doesn't actually outsoruce the problem :P</p>",
        "id": 197665729,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589534148
    },
    {
        "content": "<p>For reference, <a href=\"http://cs.ru.nl\">cs.ru.nl</a> (Freek's site) is the third biggest referrer to the mathlib repo over the last two weeks (I think). Second only to GitHub and Twitter.</p>",
        "id": 197665791,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1589534166
    },
    {
        "content": "<p>For instance it seems we don't have 10:Euler's Generalization of Fermat's Little Theorem. If this is indeed missing then you can fill it in half an hour</p>",
        "id": 197665800,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589534173
    },
    {
        "content": "<p>I think we actually have it</p>",
        "id": 197665841,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589534195
    },
    {
        "content": "<p>People are crazy</p>",
        "id": 197665844,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589534196
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">git</span> <span class=\"n\">grep</span> <span class=\"n\">Euler</span>\n<span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">field_theory</span><span class=\"bp\">/</span><span class=\"n\">finite</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"c\">/-</span><span class=\"cm\">- The Fermat-Euler totient theorem. `nat.modeq.pow_totient` is an alternative statement</span>\n<span class=\"cm\">src/field_theory/finite.lean:/-- The Fermat-Euler totient theorem. `zmod.pow_totient` is an alternative statement</span>\n<span class=\"cm\">src/number_theory/quadratic_reciprocity.lean:/-- Euler&#39;s Criterion: A unit `x` of `zmod p` is a square if and only if `x ^ (p / 2) = 1`. -/</span>\n<span class=\"cm\">src/number_theory/quadratic_reciprocity.lean:/-- Euler&#39;s Criterion: a nonzero `a : zmod p` is a square if and only if `x ^ (p / 2) = 1`. -/</span>\n</code></pre></div>",
        "id": 197665866,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589534219
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110596\">Rob Lewis</span> <a href=\"#narrow/stream/113488-general/topic/freek.2Eyaml/near/197665791\">said</a>:</p>\n<blockquote>\n<p>For reference, <a href=\"http://cs.ru.nl\">cs.ru.nl</a> (Freek's site) is the third biggest referrer to the mathlib repo over the last two weeks (I think). Second only to GitHub and Twitter.</p>\n</blockquote>\n<p>Actually second by unique viewers, third by total viewers.</p>",
        "id": 197665914,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1589534251
    },
    {
        "content": "<p>I see Lean also isn't listed under Cramer's Rule (97) but I see a lot of stuff about <code>cramer</code>--I think this one is recent?</p>",
        "id": 197665919,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589534254
    },
    {
        "content": "<p>I guess I care about \"first impressions\" of Lean, so I'll start working at it</p>",
        "id": 197665938,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589534265
    },
    {
        "content": "<p>Can we first decide if we want the yaml?</p>",
        "id": 197665953,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589534276
    },
    {
        "content": "<p>And where to put it?</p>",
        "id": 197665959,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589534280
    },
    {
        "content": "<p>Editing github gists is not the best UX (-;</p>",
        "id": 197666015,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589534293
    },
    {
        "content": "<p>I say yes, in the website repo.</p>",
        "id": 197666057,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1589534318
    },
    {
        "content": "<p>Also The Triangle Inequality (91)</p>",
        "id": 197666086,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589534347
    },
    {
        "content": "<p>Triangle inequality? Again what does that mean??</p>",
        "id": 197666236,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589534428
    },
    {
        "content": "<p>We defined metric spaces. Does that count as triangle inequality?</p>",
        "id": 197666282,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589534454
    },
    {
        "content": "<p>Apparently in Isabelle it means the definition of <code>class ordered_ab_group_add_abs</code> <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 197666301,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589534464
    },
    {
        "content": "<p>Ridiculous indeed</p>",
        "id": 197666342,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589534492
    },
    {
        "content": "<p>I think I would be more comfortable with something more like Coq's</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">Lemma</span> <span class=\"n\">triangle</span> <span class=\"o\">:</span>\n  <span class=\"k\">forall</span> <span class=\"n\">x0</span> <span class=\"n\">y0</span> <span class=\"n\">x1</span> <span class=\"n\">y1</span> <span class=\"n\">x2</span> <span class=\"n\">y2</span><span class=\"o\">:</span><span class=\"n\">R</span><span class=\"o\">,</span>\n    <span class=\"n\">dist_euc</span> <span class=\"n\">x0</span> <span class=\"n\">y0</span> <span class=\"n\">x1</span> <span class=\"n\">y1</span> <span class=\"o\">&lt;=</span> <span class=\"n\">dist_euc</span> <span class=\"n\">x0</span> <span class=\"n\">y0</span> <span class=\"n\">x2</span> <span class=\"n\">y2</span> <span class=\"o\">+</span> <span class=\"n\">dist_euc</span> <span class=\"n\">x2</span> <span class=\"n\">y2</span> <span class=\"n\">x1</span> <span class=\"n\">y1</span><span class=\"o\">.</span>\n</code></pre></div>",
        "id": 197666376,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589534511
    },
    {
        "content": "<p>Then we have this for <code>real_inner_product</code> spaces</p>",
        "id": 197666511,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589534581
    },
    {
        "content": "<p>(through an instance)</p>",
        "id": 197666518,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589534589
    },
    {
        "content": "<p>Should we also claim Pythagoras then?</p>",
        "id": 197666548,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589534611
    },
    {
        "content": "<p>The Mean Value Theorem:  <code>exists_deriv_eq_slope</code></p>",
        "id": 197666626,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589534652
    },
    {
        "content": "<p>It would be nice to add a <code>real_inner_product</code> instance on <code>[fintype ι] ι → real</code>.</p>",
        "id": 197666857,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589534783
    },
    {
        "content": "<p>May be under a type tag</p>",
        "id": 197666871,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589534791
    },
    {
        "content": "<p>Then claim Cauchy-Schwarz inequality</p>",
        "id": 197666881,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589534804
    },
    {
        "content": "<p>Really, I wish we had a new list of 100 theorems (or fewer would be fine, if each one is more substantial).</p>",
        "id": 197667565,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589535183
    },
    {
        "content": "<p>I think that list that Rocky and Ryan are currently translating is already much better</p>",
        "id": 197667613,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589535221
    },
    {
        "content": "<p>But it covers only undergraduate math</p>",
        "id": 197667636,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589535234
    },
    {
        "content": "<p>seems like a good property for a list which is meant to appeal to non-experts?</p>",
        "id": 197667707,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589535265
    },
    {
        "content": "<p>Yes and no. There are a couple of things that are appealing to non-expert like Fermat-Wiles</p>",
        "id": 197668152,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589535526
    },
    {
        "content": "<p>But those tend not to be formalized</p>",
        "id": 197668163,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589535536
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/leanprover-community.github.io/blob/newsite/data/100.yaml\">https://github.com/leanprover-community/leanprover-community.github.io/blob/newsite/data/100.yaml</a><br>\nPlease add new data to this <span aria-label=\"up\" class=\"emoji emoji-2b06\" role=\"img\" title=\"up\">:up:</span> file</p>",
        "id": 197668617,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589535802
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/113488-general/topic/freek.2Eyaml/near/197666626\">said</a>:</p>\n<blockquote>\n<p>The Mean Value Theorem:  <code>exists_deriv_eq_slope</code></p>\n</blockquote>\n<p>Added</p>",
        "id": 197668748,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589535883
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span> Didn't you add something that was on this list?</p>",
        "id": 197668782,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589535904
    },
    {
        "content": "<p>The 3 backticks <a href=\"https://github.com/leanprover-community/leanprover-community.github.io/blob/96c3c3a38fecb8f14bbd8cb413cdb355fd6dbc05/data/100.yaml#L235\">here</a> look like a copy+paste error, possibly?</p>",
        "id": 197668901,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589535972
    },
    {
        "content": "<p>Yup, the data wasn't very structured. I turned it into yaml using vim command recordings. Sometimes something slipped through</p>",
        "id": 197668999,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589536066
    },
    {
        "content": "<p>For linkifying, you should try to make sure the declaration names have the full namespace.</p>",
        "id": 197669003,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1589536068
    },
    {
        "content": "<p>I confirm this is what it looks like</p>",
        "id": 197669009,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589536073
    },
    {
        "content": "<p>And I also wanted to write Rob's message</p>",
        "id": 197669058,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589536086
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110596\">Rob Lewis</span> <a href=\"#narrow/stream/113488-general/topic/freek.2Eyaml/near/197669003\">said</a>:</p>\n<blockquote>\n<p>For linkifying, you should try to make sure the declaration names have the full namespace.</p>\n</blockquote>\n<p>Yup. I hoped to crowdsource that part (-;</p>",
        "id": 197669061,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589536088
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123965\">Bryan Gin-ge Chen</span> <a href=\"#narrow/stream/113488-general/topic/freek.2Eyaml/near/197668901\">said</a>:</p>\n<blockquote>\n<p>The 3 backticks <a href=\"https://github.com/leanprover-community/leanprover-community.github.io/blob/96c3c3a38fecb8f14bbd8cb413cdb355fd6dbc05/data/100.yaml#L235\">here</a> look like a copy+paste error, possibly?</p>\n</blockquote>\n<p>They are gone now</p>",
        "id": 197669134,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589536154
    },
    {
        "content": "<p>so we want to put links to the appropriate files in mathlib?</p>",
        "id": 197669139,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589536159
    },
    {
        "content": "<p>No... rather full declaration names</p>",
        "id": 197669150,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589536172
    },
    {
        "content": "<p>That is likely more stable</p>",
        "id": 197669158,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589536180
    },
    {
        "content": "<p>Currently we have only the last bit of the name, but not the namespace</p>",
        "id": 197669223,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589536206
    },
    {
        "content": "<p>so we want a string that if you are in a project that depends on mathlib, and you type this string, it will either tell you that you are missing imports or will show you the theorem?</p>",
        "id": 197669276,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589536256
    },
    {
        "content": "<p>I think the references in <a href=\"https://github.com/leanprover-community/leanprover-community.github.io/blob/newsite/data/overview.yaml\">https://github.com/leanprover-community/leanprover-community.github.io/blob/newsite/data/overview.yaml</a> are better: they are easy to transform to links to the dosc API, which contains links to code</p>",
        "id": 197669340,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589536308
    },
    {
        "content": "<p>And they are easy to check automatically</p>",
        "id": 197669395,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589536324
    },
    {
        "content": "<p>If you do</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">all</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">some</span><span class=\"bp\">.</span><span class=\"n\">cool</span><span class=\"bp\">.</span><span class=\"n\">theorem_name</span>\n</code></pre></div>\n\n\n<p>Then you should get a result.</p>",
        "id": 197669397,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589536326
    },
    {
        "content": "<p>Aah, ok. Let's do what <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> suggests</p>",
        "id": 197669443,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589536367
    },
    {
        "content": "<p>Of course, if we move code and/or files, this breaks. But that shouldn't happen too often</p>",
        "id": 197669483,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589536398
    },
    {
        "content": "<p>This can be monitored by CI</p>",
        "id": 197669511,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589536420
    },
    {
        "content": "<p>The doc gen tool keeps a map from declaration name to file name (and line number). So from a full identifier you can predict its link in the html docs and the GH source. The map isn't exposed right now, but it can be if/when needed.</p>",
        "id": 197669929,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1589536641
    },
    {
        "content": "<p>so is this the string we want to attach to <a href=\"https://github.com/leanprover-community/mathlib/issues/22\">#22</a>?<br>\ndata/real/cardinality.html#cardinal.not_countable_real</p>",
        "id": 197670168,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589536783
    },
    {
        "content": "<p>Lol, we should explain the linkifier about <code>freek#22</code></p>",
        "id": 197670249,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589536817
    },
    {
        "content": "<p>(Johan, I'm not following what you just said; I don't know if I was meant to)</p>",
        "id": 197670304,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589536854
    },
    {
        "content": "<p>I would say yes to both questions</p>",
        "id": 197670343,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589536871
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/data/real/cardinality.html#cardinal.not_countable_real\">https://leanprover-community.github.io/mathlib_docs/data/real/cardinality.html#cardinal.not_countable_real</a></p>",
        "id": 197670371,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589536884
    },
    {
        "content": "<p>And then chop of the base URL</p>",
        "id": 197670384,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589536894
    },
    {
        "content": "<p>Johan meant you created a link to the 22nd issue of mathlib</p>",
        "id": 197670390,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589536899
    },
    {
        "content": "<p>Johan, this is what Jalex did</p>",
        "id": 197670470,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589536933
    },
    {
        "content": "<p>is the point that there's later some magic that will add back in the base url?</p>",
        "id": 197670500,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589536950
    },
    {
        "content": "<p>so someone could click it to go to the theorem statement?</p>",
        "id": 197670514,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589536959
    },
    {
        "content": "<p>Yup</p>",
        "id": 197670520,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589536962
    },
    {
        "content": "<p>Okay, I'll spend the next half hour or so putting the declarations that already exist into that format, and then submit as a PR</p>",
        "id": 197670575,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589536997
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 197670624,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589537032
    },
    {
        "content": "<p>Great!</p>",
        "id": 197670630,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589537036
    },
    {
        "content": "<p>I don't know yaml that well</p>",
        "id": 197670652,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589537042
    },
    {
        "content": "<p>Sometimes we want multiple entries for a <code>decl</code>, so I put them in what I thought was a list.</p>",
        "id": 197670700,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589537060
    },
    {
        "content": "<p>Maybe this means we have to put <code>[...]</code> around every entry</p>",
        "id": 197670720,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589537072
    },
    {
        "content": "<p>But that's nothing a regex couldn't do</p>",
        "id": 197670727,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589537082
    },
    {
        "content": "<p>The magic of YaML is there is not much to know</p>",
        "id": 197670756,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589537097
    },
    {
        "content": "<p>\"\"\" <br>\nWe couldn’t find any code matching 'sqrt_two' in leanprover-community/mathlib<br>\n\"\"\"</p>",
        "id": 197670812,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589537136
    },
    {
        "content": "<p>(I guess in my first pass I'll just PR the theorems for which the existing declaration can be found in mathlib by searching its name, which I suspect is most of them)</p>",
        "id": 197670931,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589537197
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/freek.2Eyaml/near/197669397\">said</a>:</p>\n<blockquote>\n<p>If you do</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">all</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">some</span><span class=\"bp\">.</span><span class=\"n\">cool</span><span class=\"bp\">.</span><span class=\"n\">theorem_name</span>\n</code></pre></div>\n\n\n<p>Then you should get a result.</p>\n</blockquote>\n<p>is there literally a thing called <code>import all</code>?</p>",
        "id": 197671033,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589537279
    },
    {
        "content": "<p>You can generate <code>src/all.lean</code> by running <code>scripts/mk_all.sh</code> .</p>",
        "id": 197671174,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589537359
    },
    {
        "content": "<p>It's irrational_sqrt_two</p>",
        "id": 197671292,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589537435
    },
    {
        "content": "<p>in <code>data.real.irrational</code></p>",
        "id": 197671310,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589537451
    },
    {
        "content": "<p>I think I made a PR<br>\n<a href=\"https://github.com/leanprover-community/leanprover-community.github.io/pull/16\">https://github.com/leanprover-community/leanprover-community.github.io/pull/16</a></p>",
        "id": 197675658,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589540727
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"252300\">@Jalex Stark</span> Great! I left a little comment. Thanks for the effort!</p>",
        "id": 197675966,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589540952
    },
    {
        "content": "<p>so I'm at the PR page and I want to make further edits to the file, but i haven't figured out how yet</p>",
        "id": 197676544,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589541385
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"252300\">@Jalex Stark</span> You have a branch?</p>",
        "id": 197676707,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589541511
    },
    {
        "content": "<p>Now it parses to this JSON (see below). Probably we should remove all \"- \".</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"p\">{</span>\n  <span class=\"nt\">&quot;100thms&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"nt\">&quot;1&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n      <span class=\"p\">{</span>\n        <span class=\"nt\">&quot;title&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;The Irrationality of the Square Root of 2&quot;</span>\n      <span class=\"p\">},</span>\n      <span class=\"p\">{</span>\n        <span class=\"nt\">&quot;decl&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;data/real/irrational.html#irrational_sqrt_two&quot;</span>\n      <span class=\"p\">},</span>\n      <span class=\"p\">{</span>\n        <span class=\"nt\">&quot;author&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;mathlib&quot;</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">],</span>\n    <span class=\"nt\">&quot;2&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n      <span class=\"p\">{</span>\n        <span class=\"nt\">&quot;title&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Fundamental Theorem of Algebra&quot;</span>\n      <span class=\"p\">},</span>\n      <span class=\"p\">{</span>\n        <span class=\"nt\">&quot;decl&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;analysis/complex/polynomial.html#complex.exists_root&quot;</span>\n      <span class=\"p\">},</span>\n      <span class=\"p\">{</span>\n        <span class=\"nt\">&quot;author&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Chris Hughes&quot;</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">]</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 197676735,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589541534
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/freek.2Eyaml/near/197676707\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"252300\">Jalex Stark</span> You have a branch?</p>\n</blockquote>\n<p>I don't know; i made the PR link by clicking buttons in the github web client</p>",
        "id": 197676781,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589541578
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"252300\">@Jalex Stark</span> How did you create the PR? Completely on Github? Or did you work with a local git clone of the repo?</p>",
        "id": 197676786,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589541579
    },
    {
        "content": "<p>Aha</p>",
        "id": 197676789,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589541584
    },
    {
        "content": "<p>The easiest thing would be to <code>git clone</code> the repo, and then <code>git checkout khanh93:patch-1</code></p>",
        "id": 197676873,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589541616
    },
    {
        "content": "<p>That's the branch that github created for you</p>",
        "id": 197676884,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589541625
    },
    {
        "content": "<p>After that, just edit the file, <code>git commit</code>, <code>git push</code>, and you're done.</p>",
        "id": 197676898,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589541638
    },
    {
        "content": "<p>okay, i'll try that</p>",
        "id": 197676916,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589541652
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> Are you suggesting we switch to json?</p>",
        "id": 197676934,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589541670
    },
    {
        "content": "<p>No, I wanted to show the effect of using \"- \"</p>",
        "id": 197676958,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589541687
    },
    {
        "content": "<p>I suggest we use</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"nn\">---</span>\n<span class=\"nt\">100thms</span><span class=\"p\">:</span>\n  <span class=\"s\">&#39;1&#39;</span><span class=\"p p-Indicator\">:</span>\n    <span class=\"nt\">title</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">The Irrationality of the Square Root of 2</span>\n    <span class=\"nt\">decl</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">data/real/irrational.html#irrational_sqrt_two</span>\n    <span class=\"nt\">author</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">mathlib</span>\n  <span class=\"s\">&#39;2&#39;</span><span class=\"p p-Indicator\">:</span>\n    <span class=\"nt\">title</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">Fundamental Theorem of Algebra</span>\n    <span class=\"nt\">decl</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">analysis/complex/polynomial.html#complex.exists_root</span>\n    <span class=\"nt\">author</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">Chris Hughes</span>\n</code></pre></div>",
        "id": 197677048,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589541740
    },
    {
        "content": "<p>/me doesn't know yaml</p>",
        "id": 197677071,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589541766
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> What should we do with multiple decls?</p>",
        "id": 197677086,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589541782
    },
    {
        "content": "<p>Put them in a list? What is the idiomatic yaml solution?</p>",
        "id": 197677097,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589541792
    },
    {
        "content": "<p>I don't know what is the idiomatic yaml solution.</p>",
        "id": 197677175,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589541844
    },
    {
        "content": "<p>I'd put then in a list</p>",
        "id": 197677200,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589541862
    },
    {
        "content": "<p>Either using</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"nt\">decl</span><span class=\"p\">:</span> <span class=\"p p-Indicator\">[</span><span class=\"nv\">decl1</span><span class=\"p p-Indicator\">,</span> <span class=\"nv\">decl2</span><span class=\"p p-Indicator\">]</span>\n</code></pre></div>\n\n\n<p>or using</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"nt\">decl</span><span class=\"p\">:</span>\n  <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">decl1</span>\n  <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">decl2</span>\n</code></pre></div>",
        "id": 197677236,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589541898
    },
    {
        "content": "<p>I think 2 is better, unless we like long lines</p>",
        "id": 197677268,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589541921
    },
    {
        "content": "<p>Both parse to the same data structure</p>",
        "id": 197677292,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589541941
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/freek.2Eyaml/near/197676873\">said</a>:</p>\n<blockquote>\n<p>The easiest thing would be to <code>git clone</code> the repo, and then <code>git checkout khanh93:patch-1</code></p>\n</blockquote>\n<p>I did <code>git clone &lt;appropriate url&gt;</code> and then <code>cd leanprover-community.github.io/</code> but <code>git checkout khanh93:patch-1</code> resulted in error <code>error: pathspec 'khanh93:patch-1' did not match any file(s) known to git</code><br>\nProbably my confusion will dissolve if I leave this alone for a day and then do a close read of e.g. the <a href=\"https://blog.scottlowe.org/2015/01/27/using-fork-branch-git-workflow/\">tutorial</a> we link to from the \"contribute to mathlib\" page</p>",
        "id": 197677535,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589542106
    },
    {
        "content": "<p>O.o.... now I'm confused</p>",
        "id": 197677575,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589542131
    },
    {
        "content": "<p>What does <code>git branch</code> say?</p>",
        "id": 197677614,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589542160
    },
    {
        "content": "<p><code>* newsite</code></p>",
        "id": 197677633,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589542175
    },
    {
        "content": "<p>Hmm, so it didn't download your branch</p>",
        "id": 197677645,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589542188
    },
    {
        "content": "<p><code>git fetch origin</code>?</p>",
        "id": 197677651,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589542193
    },
    {
        "content": "<p>Why does this newsite branch still exist?</p>",
        "id": 197677660,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589542202
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/freek.2Eyaml/near/197677651\">said</a>:</p>\n<blockquote>\n<p><code>git fetch origin</code>?</p>\n</blockquote>\n<p>gave no errors and no output</p>",
        "id": 197677720,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589542219
    },
    {
        "content": "<p>O.o... <span class=\"user-mention\" data-user-id=\"252300\">@Jalex Stark</span> I gave bad advice</p>",
        "id": 197677727,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589542221
    },
    {
        "content": "<p>Apparently github forked the repo for you</p>",
        "id": 197677745,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589542233
    },
    {
        "content": "<p>Oh I see</p>",
        "id": 197677752,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589542239
    },
    {
        "content": "<p><a href=\"https://github.com/khanh93/leanprover-community.github.io/tree/patch-1\">https://github.com/khanh93/leanprover-community.github.io/tree/patch-1</a></p>",
        "id": 197677756,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589542243
    },
    {
        "content": "<p>This is because ofgithub pages requirements</p>",
        "id": 197677770,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589542254
    },
    {
        "content": "<p>So it is branch <code>patch-1</code> in another repo</p>",
        "id": 197677772,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589542256
    },
    {
        "content": "<p>okay</p>",
        "id": 197677782,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589542261
    },
    {
        "content": "<p>So <code>git remote -v</code></p>",
        "id": 197677805,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589542275
    },
    {
        "content": "<p>you made a comment that was also a suggested edit, how did you do that?</p>",
        "id": 197677809,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589542278
    },
    {
        "content": "<p>And then <code>git remote add</code> where you change <code>leanprover-community</code> into <code>khanh93</code></p>",
        "id": 197677833,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589542295
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"252300\">Jalex Stark</span> <a href=\"#narrow/stream/113488-general/topic/freek.2Eyaml/near/197677809\">said</a>:</p>\n<blockquote>\n<p>you made a comment that was also a suggested edit, how did you do that?</p>\n</blockquote>\n<p>Through the github interface</p>",
        "id": 197677856,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589542313
    },
    {
        "content": "<p>do you know which buttons you pressed?</p>",
        "id": 197677915,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589542333
    },
    {
        "content": "<p>If you go to \"Changed files\" on the PR page, you can click on a line, leave a comment, and there is a button for \"Suggestions\"</p>",
        "id": 197677917,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589542336
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/hFDveNdQXTpJ_lZj9wo_8AWJ/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/hFDveNdQXTpJ_lZj9wo_8AWJ/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/hFDveNdQXTpJ_lZj9wo_8AWJ/image.png\"></a></div>",
        "id": 197677996,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589542399
    },
    {
        "content": "<p>It's the first icon in the toolbar of the comment window</p>",
        "id": 197678019,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589542419
    },
    {
        "content": "<p>nice, thanks</p>",
        "id": 197678035,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589542433
    },
    {
        "content": "<p>it does in fact say \"insert a suggestion\" when you mouse over it, so I should have found it on my own... I just kind of enter a panic whenever I have to interact with github</p>",
        "id": 197678102,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589542458
    },
    {
        "content": "<p>Okay, I think it's in a state where if I walk away from it, it will soon either get accepted or someone will raise another issue?</p>",
        "id": 197678442,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589542672
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"252300\">@Jalex Stark</span> I've merged it. We can convert to Yury's format in a next step.</p>",
        "id": 197678973,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589542996
    },
    {
        "content": "<p>Does \"merged\" imply that I should now treat the PR page as an archive?</p>",
        "id": 197679082,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589543055
    },
    {
        "content": "<p>like if I wanted to make more similar edits, I would open a new one?</p>",
        "id": 197679119,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589543088
    },
    {
        "content": "<p>(I don't have any similar edits right now, otherwise they would have made it into the one you just merged <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span> )</p>",
        "id": 197679151,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589543111
    },
    {
        "content": "<p>Yes</p>",
        "id": 197679155,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589543112
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"252300\">@Jalex Stark</span>  And next time, feel free to start a branch on the main repo. You should have the rights to do that (-;<br>\nIt doesn't matter too much, unless it's collaborative, because then others can also push to the branch.</p>",
        "id": 197681247,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589544600
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/freek.2Eyaml/near/197676934\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> Are you suggesting we switch to json?</p>\n</blockquote>\n<p>YAML is a superset of JSON<br>\nso technically, a JSON file <em>is</em> a YAML, I have used this trick many times in my life</p>",
        "id": 197686055,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1589547446
    },
    {
        "content": "<p>I added infinite ramsey, it's currently in the extras branch of my combi project</p>",
        "id": 197690570,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1589549598
    },
    {
        "content": "<p>I haven't PR'd to mathlib because it depends on Reid's crec</p>",
        "id": 197690935,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1589549705
    },
    {
        "content": "<p>Aha, I see</p>",
        "id": 197691833,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589549964
    },
    {
        "content": "<p><code>crec</code> should be in mathlib</p>",
        "id": 197703283,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589554458
    },
    {
        "content": "<p>Okay, where should it go? And can someone help me document it?</p>",
        "id": 197703329,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1589554479
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/freek.2Eyaml/near/197666342\">said</a>:</p>\n<blockquote>\n<p>Ridiculous indeed</p>\n</blockquote>\n<p>Just reading this thread now, but I talked to Freek about the issue of the list being poorly-specified and he said that it was not poorly specified as far as a mathematician was concerned (we all know what the triangle inequality is, even if we all think it means different things). He made it clear that it was a design decision not to formally specify anything, because he did not want to put words into formalisers heads. This example with <a href=\"#narrow/stream/116395-maths/topic/Seifert--van.20Kampen.20theorem\">S-vK</a> is perhaps a neat summary of the consequences of this.</p>",
        "id": 197704868,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589555070
    },
    {
        "content": "<p>I guess that means people should care about what the statements look like in different ITPs, and not just the number of statements proved</p>",
        "id": 197705086,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589555156
    },
    {
        "content": "<p>Well, there's a difference between formally specifying things and writing an informal statement of what the theorem is supposed to be</p>",
        "id": 197705538,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589555314
    },
    {
        "content": "<p>well freek did that, it's just very informal. In particular, there are theorems which if proven in an ITP, one can go ahead and say \"yeah that satisfies the description freek gave\", and who cares if there are more than one such theorem.</p>",
        "id": 197705960,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589555478
    },
    {
        "content": "<p>I'm actually impressed that he has managed to interact with so many theorem proving communities and still retain his connection to mathematical vaguery. I would absolutely be tempted to give something very close to formal statements for these if I were in his position</p>",
        "id": 197705995,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589555485
    },
    {
        "content": "<p>Yeah but the moment you say set or type you're making implicit foundational assumptions. I think Freek was very smart to stay out of this business and to write something which mathematicians could read</p>",
        "id": 197708634,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589556447
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/freek.2Eyaml/near/197681247\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"252300\">Jalex Stark</span>  And next time, feel free to start a branch on the main repo. You should have the rights to do that (-;<br>\nIt doesn't matter too much, unless it's collaborative, because then others can also push to the branch.</p>\n</blockquote>\n<p>I'm sorry I need so much handholding. What does it mean to start a branch on the main repo? As far as I can tell it means that I have to replace step 1 of this <a href=\"https://blog.scottlowe.org/2015/01/27/using-fork-branch-git-workflow/\">instruction set</a> with something else. Will I then be able to follow the rest of it normally?</p>",
        "id": 197722862,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589562638
    },
    {
        "content": "<p>You can replace the first 3 bullet points with \"Clone mathlib\"</p>",
        "id": 197722955,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589562701
    },
    {
        "content": "<p>After that</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"nb\">cd</span> mathlib/\ngit checkout -b my-cool-branch\n<span class=\"c1\"># do some changes</span>\ngit add foo bar quux more stuff\ngit commit\ngit push\n<span class=\"c1\"># this will tell you that you need to set a tracking branch or something</span>\n<span class=\"c1\"># just execute the command that it gives you</span>\n</code></pre></div>",
        "id": 197723166,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589562792
    },
    {
        "content": "<p>After that, it will even give you back a URL to start the PR (-;</p>",
        "id": 197723214,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589562814
    },
    {
        "content": "<p>Maybe we should put this somewhere in a little doc</p>",
        "id": 197723365,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589562879
    },
    {
        "content": "<p>But the workflow only works after someone gave you write access to the repo. (Which you got somewhere last week, I think.)</p>",
        "id": 197723431,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589562910
    },
    {
        "content": "<p>okay so after cloning mathlib and <code>checkout</code>ing my branch, I make a .lean file<br>\nVSCode complains about \"leanpkg.path does not exist\" <br>\nI'm obviously supposed to do something with the elan toolchain</p>",
        "id": 197724702,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589563553
    },
    {
        "content": "<p>VSCode is suggesting <code>leanpkg configure</code> but I'm worried that's wrong</p>",
        "id": 197724764,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589563570
    },
    {
        "content": "<p>You should be using <code>leanproject</code> for some of these steps.</p>",
        "id": 197724800,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589563589
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/freek.2Eyaml/near/197722955\">said</a>:</p>\n<blockquote>\n<p>You can replace the first 3 bullet points with \"Clone mathlib\"</p>\n</blockquote>\n<p>okay, so I think I misinterpreted \"clone mathlib\" as \"run <code>git clone &lt;url i get from visiting mathlib page&gt;</code>\"</p>",
        "id": 197724877,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589563630
    },
    {
        "content": "<p>does someone have a better interpretation of \"clone mathlib\"?</p>",
        "id": 197724949,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589563673
    },
    {
        "content": "<p>That works, but you'll still want to use <code>leanproject</code> to get olean files, and I think <code>leanproject</code> will also create a <code>leanpkg.path</code> file.</p>",
        "id": 197724958,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589563677
    },
    {
        "content": "<p>okay, so let's say we're adding to the beginning of Johan's list of steps</p>",
        "id": 197725073,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589563720
    },
    {
        "content": "<p>From where you're at, <code>leanpkg configure</code> should be fine, then <code>leanproject get-mathlib-cache</code> will help you avoid having to build mathlib yourself.</p>",
        "id": 197725098,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589563733
    },
    {
        "content": "<p>is <code>git clone blah</code> first?</p>",
        "id": 197725101,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589563735
    },
    {
        "content": "<p>I think it's probably more useful to forget where I'm at, especially since I'm likely to misreport it. We want a set of instructions that if exactly followed, allow one to do the \"make a branch of mathlib\" style of development</p>",
        "id": 197725121,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589563748
    },
    {
        "content": "<p>Maybe it should be <code>leanproject get mathlib</code></p>",
        "id": 197725123,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589563749
    },
    {
        "content": "<p>Yeah, <code>leanproject get mathlib</code> would replace \"clone mathlib\".</p>",
        "id": 197725147,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589563767
    },
    {
        "content": "<p>It's too long ago, since I did this...</p>",
        "id": 197725156,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589563773
    },
    {
        "content": "<p>does that mean you do this only once?</p>",
        "id": 197725260,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589563808
    },
    {
        "content": "<p>and then somehow keep your branch up-to-date or something?</p>",
        "id": 197725286,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589563822
    },
    {
        "content": "<p>Yeah, pretty much. We should add a \"Working on mathlib\" section to <a href=\"https://leanprover-community.github.io/install/project.html\">the project page</a>.</p>",
        "id": 197725336,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589563853
    },
    {
        "content": "<p>sure, I think we are currently interactively writing part of it</p>",
        "id": 197725419,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589563870
    },
    {
        "content": "<p><code>git pull</code>, <code>git fetch</code>, <code>git merge</code> are all you need to keep your branch up-to-date (as well as <code>git checkout</code> if you're switching between different branches). (Plus <code>leanproject get-mathlib-cache</code> or the git hooks to fetch oleans all the time).</p>",
        "id": 197725455,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589563895
    },
    {
        "content": "<p>Right, once you have <code>mathlib/</code> set up, you just create 1001 branches in it.</p>",
        "id": 197725469,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589563902
    },
    {
        "content": "<p>so i did <code>leanproject get mathlib</code></p>",
        "id": 197725543,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589563931
    },
    {
        "content": "<p>do we think that I'm ready to check out a branch?</p>",
        "id": 197725583,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589563951
    },
    {
        "content": "<p><code>cd mathlib/</code></p>",
        "id": 197725594,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589563957
    },
    {
        "content": "<p>And then <code>git checkout -b my-first-branch</code></p>",
        "id": 197725639,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589563981
    },
    {
        "content": "<p>right, thanks, I am mixing layers of abstraction</p>",
        "id": 197725642,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589563982
    },
    {
        "content": "<p>nvm</p>",
        "id": 197725667,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589563991
    },
    {
        "content": "<p>?</p>",
        "id": 197725678,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589563999
    },
    {
        "content": "<p>never mind. I understand the mixing</p>",
        "id": 197725707,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589564015
    },
    {
        "content": "<p>Anyway, you have a branch now?</p>",
        "id": 197725724,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589564026
    },
    {
        "content": "<p>oh okay, I still think it was bad of me to do such mixing, we will want to write a literally correct sequence of terminal commands in the article</p>",
        "id": 197725740,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589564041
    },
    {
        "content": "<p>(Remember that one of the keys to git is liberal usage of <code>git status</code> to see what state your repository is currently in and what branch you're on)</p>",
        "id": 197725781,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1589564045
    },
    {
        "content": "<p>(easy to get confused if you don't keep on making the computer tell you what state you're in)</p>",
        "id": 197725827,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1589564066
    },
    {
        "content": "<p><code>git status</code> told me this</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">On</span> <span class=\"n\">branch</span> <span class=\"n\">freek</span><span class=\"bp\">-</span><span class=\"mi\">42</span>\n<span class=\"n\">nothing</span> <span class=\"n\">to</span> <span class=\"n\">commit</span><span class=\"o\">,</span> <span class=\"n\">working</span> <span class=\"n\">tree</span> <span class=\"n\">clean</span>\n</code></pre></div>\n\n\n<p>how should I interpret it?</p>",
        "id": 197725877,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589564094
    },
    {
        "content": "<p>that I have a clean copy of <code>mathlib</code> waiting for edits to be made to it?</p>",
        "id": 197725920,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589564115
    },
    {
        "content": "<p>That means you're successfully switched to the branch <code>freek-42</code> and that your repo contains no diffs</p>",
        "id": 197725930,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1589564120
    },
    {
        "content": "<p>So now <code>mkdir -p archive/100/42</code></p>",
        "id": 197726068,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589564172
    },
    {
        "content": "<p>And then add your files in that folder</p>",
        "id": 197726088,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589564186
    },
    {
        "content": "<p>Then <code>git add archive/100/42/*</code></p>",
        "id": 197726115,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589564204
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"252300\">@Jalex Stark</span> One important thing: do you like editors in the terminal, like vim, nano, or emacs?</p>",
        "id": 197726163,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589564235
    },
    {
        "content": "<p>i am passably competent with emacs but prefer using Sublime and VSCode</p>",
        "id": 197726195,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589564261
    },
    {
        "content": "<p>I know it's a bit daunting to read a whole book, but I really recommend the <a href=\"https://git-scm.com/book/en/v2\">git book</a> for wrapping your head around <code>git</code>.</p>",
        "id": 197726281,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589564287
    },
    {
        "content": "<p>A nontrivial proportion of my day job is handholding quant-finance researchers through git, I'm happy to answer large numbers of stupid questions if you have them</p>",
        "id": 197726290,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1589564291
    },
    {
        "content": "<p>Because <code>git commit</code> might open vim for you, and then <a href=\"https://stackoverflow.com/questions/11828270/how-do-i-exit-the-vim-editor\">https://stackoverflow.com/questions/11828270/how-do-i-exit-the-vim-editor</a> will contain a wealth of information on just how to get out of it.</p>",
        "id": 197726356,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589564328
    },
    {
        "content": "<p><code>git config --global core.editor \"emacs\"</code></p>",
        "id": 197726413,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589564369
    },
    {
        "content": "<p>The git interface in VS Code is pretty intuitive, though sometimes you still have to push from the command line.</p>",
        "id": 197726435,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589564382
    },
    {
        "content": "<p>It's only for writing &lt; 10 lines of commit message, usually only 1 line.</p>",
        "id": 197726444,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589564386
    },
    {
        "content": "<p>So if you know emacs, you'll probably want that as your editor on the command line</p>",
        "id": 197726525,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589564409
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"117987\">Patrick Stevens</span> <a href=\"#narrow/stream/113488-general/topic/freek.2Eyaml/near/197726290\">said</a>:</p>\n<blockquote>\n<p>A nontrivial proportion of my day job is handholding quant-finance researchers through git, I'm happy to answer large numbers of stupid questions if you have them</p>\n</blockquote>\n<p>amazing, in my job as a quant-finance researcher we use mercurial, and i've had people handhold me through how to use it enough times that I'm now just thoroughly embarrassed to ask for more help<br>\nso i don't write work code that ends up in repos anymore</p>",
        "id": 197726633,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589564460
    },
    {
        "content": "<p>and here you are... adding freek-42 to a repo...</p>",
        "id": 197726742,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589564511
    },
    {
        "content": "<p>I just made <a href=\"https://github.com/leanprover-community/leanprover-community.github.io/pull/19\">https://github.com/leanprover-community/leanprover-community.github.io/pull/19</a> to try and display the data in a more pretty way, comments(/help) welcome, especially with respect to how we format lists of links and decls, and how to automatically find the doc link from a decl like \"inclusion_exclusion\"</p>",
        "id": 197727186,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1589564712
    },
    {
        "content": "<p>Also I feel we should add more attribution of the form <code>mathlib (Person who committed the theorem)</code> rather than simply <code>mathlib</code></p>",
        "id": 197728174,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1589565134
    },
    {
        "content": "<p>(i forked the conversation about developing on a branch of mathlib to <a href=\"#narrow/stream/113488-general/topic/learning.20to.20branch/near/197731335\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/learning.20to.20branch/near/197731335</a>)</p>",
        "id": 197731516,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589566635
    },
    {
        "content": "<p>I think <code>mathlib</code> attribution means \"lost to time\"</p>",
        "id": 197731582,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589566670
    },
    {
        "content": "<p>From 1 to 3 levels of nesting might be excessive; how about freek-100/82_cubing_a_cube.lean?</p>",
        "id": 197732078,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589566885
    },
    {
        "content": "<p>If we actually want multiple files, we could then create a directory (same way we do in mathlib itself)</p>",
        "id": 197732121,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589566906
    },
    {
        "content": "<p>BTW I don't think freek gets the credit for the list of theorems, as his page will tell you</p>",
        "id": 197732432,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589567026
    },
    {
        "content": "<p>Where is there three levels of nesting? I proposed <code>archive/100/thm.lean</code> naming</p>",
        "id": 197732621,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589567104
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113488-general/topic/freek.2Eyaml/near/197732121\">said</a>:</p>\n<blockquote>\n<p>If we actually want multiple files, we could then create a directory (same way we do in mathlib itself)</p>\n</blockquote>\n<p>thanks, I think this is the convention i was missing</p>",
        "id": 197732631,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589567108
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/freek.2Eyaml/near/197732621\">said</a>:</p>\n<blockquote>\n<p>Where is there three levels of nesting? I proposed <code>archive/100/thm.lean</code> naming</p>\n</blockquote>\n<p>I proposed something worse in my <code>git status</code> messages</p>",
        "id": 197732677,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589567132
    },
    {
        "content": "<p>I think it's nice to have the theorem number</p>",
        "id": 197732822,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589567180
    },
    {
        "content": "<p>Those can show up in the yaml file, md docs and in the module doc for the file</p>",
        "id": 197732907,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589567222
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/freek.2Eyaml/near/197732432\">said</a>:</p>\n<blockquote>\n<p>BTW I don't think freek gets the credit for the list of theorems, as his page will tell you</p>\n</blockquote>\n<p>hmm okay, but from a sociological point of view, the only reason we care about writing up proofs of these theorems is because freek has a popular webpage about them, and he puts in maintenance work</p>",
        "id": 197732926,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589567229
    },
    {
        "content": "<p>but I expect this folder is not going to contain 100 files because many of them are in mathlib proper</p>",
        "id": 197732965,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589567250
    },
    {
        "content": "<p>i'd be happy with any folder name that is significantly more informative than \"100\"</p>",
        "id": 197733003,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589567274
    },
    {
        "content": "<p>at least based on what I have seen elsewhere this is usually called the \"100 theorems list\"</p>",
        "id": 197733067,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589567293
    },
    {
        "content": "<p><code>100theorems</code> seems fine to me</p>",
        "id": 197733104,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589567312
    },
    {
        "content": "<p>You probably won't need more than one file per theorem. If the proof is large enough to require multiple files then the supporting work should probably be in mathlib</p>",
        "id": 197733163,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589567341
    },
    {
        "content": "<p>yeah that seems true</p>",
        "id": 197733210,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589567374
    },
    {
        "content": "<p>Agreed, I just wanted to leave an out for odd cases (e.g., imagine the cube dissection proof was a lot bigger, or something)</p>",
        "id": 197733227,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589567382
    },
    {
        "content": "<p>so i guess i should not call my thing <code>42_dumb_name</code> but instead think harder and call it <code>smart_name</code>?</p>",
        "id": 197733341,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589567437
    },
    {
        "content": "<p>All the theorems in Freek's list have actual names</p>",
        "id": 197733386,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589567464
    },
    {
        "content": "<p>I suspect that's part of the eligibility criterion to be frank</p>",
        "id": 197733466,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589567522
    },
    {
        "content": "<p>ah, nice<br>\nI'll go with <code>sum_of_the_reciprocals_of_the_triangular_numbers.lean</code> for now</p>",
        "id": 197733529,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589567544
    },
    {
        "content": "<p>I kind of like including the number, but I think it's also fine without given that we're maintaining that list (which also includes entries for the ones in mathlib proper). Was that the question?</p>",
        "id": 197733563,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589567568
    },
    {
        "content": "<p>i want consistency across files in whether they're numbered or not</p>",
        "id": 197733746,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589567659
    },
    {
        "content": "<p>so since we think not-numbering is okay, and there is already a not-numbered contribution, I think we should not-number</p>",
        "id": 197733778,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589567681
    },
    {
        "content": "<p>(but I like numbering and wish that there wasn't an argument against it)</p>",
        "id": 197733851,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589567709
    },
    {
        "content": "<p>Well you're moving the file anyways</p>",
        "id": 197733905,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589567741
    },
    {
        "content": "<p>What's the argument against numbering? I also think numbers in the filenames would be useful.</p>",
        "id": 197733931,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589567757
    },
    {
        "content": "<p>(side thought: 2 digits should be fine, since 100 is Descartes's rule of signs which presumably would be in mathlib proper)</p>",
        "id": 197734123,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589567858
    },
    {
        "content": "<p>I think numbers would be okay but I don't want to imply that all numbers should exist</p>",
        "id": 197734132,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589567865
    },
    {
        "content": "<p>because the folder is actually only for \"orphaned\" 100 theorems</p>",
        "id": 197734255,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589567908
    },
    {
        "content": "<p>if all the numbers existed (and many of them were just one import and one theorem statement whose proof was a reference to mathlib), then instead of a separately-maintained yaml, we could just have the docs page</p>",
        "id": 197734287,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589567920
    },
    {
        "content": "<p>We should probably also add to that directory a readme pointing at the list in the docs though, otherwise people might think these are all we have.</p>",
        "id": 197734384,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589567973
    },
    {
        "content": "<p>You could do that with a single <em>file</em>, with mod comments for description, but if it's a folder then the organization in mathlib docs will not be great</p>",
        "id": 197734424,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589567992
    },
    {
        "content": "<p>that makes sense</p>",
        "id": 197734545,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589568038
    },
    {
        "content": "<p>and at that point there's no sense having files for theorems-already-in-mathlib</p>",
        "id": 197734579,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589568054
    },
    {
        "content": "<p>I thought that the readme in the directory was the index?</p>",
        "id": 197734584,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589568056
    },
    {
        "content": "<p>the readme in which directory?</p>",
        "id": 197734637,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589568083
    },
    {
        "content": "<p>I'm not sure exactly how the yaml turns into something human readable</p>",
        "id": 197734639,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589568085
    },
    {
        "content": "<p>the <code>archive/100theorems</code> directory</p>",
        "id": 197734673,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589568103
    },
    {
        "content": "<p>it seems reasonable to put the yaml file there</p>",
        "id": 197734714,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589568120
    },
    {
        "content": "<p>that makes sense</p>",
        "id": 197734789,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589568134
    },
    {
        "content": "<p>where is it living now?</p>",
        "id": 197734796,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589568138
    },
    {
        "content": "<p>and then there is documentation overlap with the readme.md file</p>",
        "id": 197734797,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589568138
    },
    {
        "content": "<p>There's a PR to build an HTML file from the YAML <a href=\"https://github.com/leanprover-community/leanprover-community.github.io/pull/19\">here</a>.</p>",
        "id": 197734848,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589568163
    },
    {
        "content": "<p>could the PR also build the readme.md file?</p>",
        "id": 197735001,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589568235
    },
    {
        "content": "<p>I don't know if I want to write markdown in a yaml file though</p>",
        "id": 197735068,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589568249
    },
    {
        "content": "<p>It could, we should settle on one place for it though. Either the community website with all the other former \"extra\" docs, or in mathlib where it might be a bit out of place.</p>",
        "id": 197735143,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589568285
    },
    {
        "content": "<p>I suppose it could be a template like <code>100.html</code></p>",
        "id": 197735150,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589568288
    },
    {
        "content": "<p>Maybe the simpler solution would be to have the readme.md just be a link to <code>100.html</code></p>",
        "id": 197735258,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589568332
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/freek.2Eyaml/near/197731582\">said</a>:</p>\n<blockquote>\n<p>I think <code>mathlib</code> attribution means \"lost to time\"</p>\n</blockquote>\n<p>That's not true in the current file though, some things such as MVT were added very recently but only say mathlib rather than Yury! AM-GM is also recent</p>",
        "id": 197735515,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1589568446
    },
    {
        "content": "<blockquote>\n<p>AM-GM is also recent</p>\n</blockquote>\n<p>And is also contributed by me.</p>",
        "id": 197756707,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589579589
    },
    {
        "content": "<p>Do we have a page that displays information from <code>100.yaml</code>?</p>",
        "id": 197951328,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589815787
    },
    {
        "content": "<p>Not yet, I think</p>",
        "id": 197951392,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589815803
    },
    {
        "content": "<p>See <a href=\"https://github.com/leanprover-community/leanprover-community.github.io/pull/19\">https://github.com/leanprover-community/leanprover-community.github.io/pull/19</a></p>",
        "id": 197951563,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589815864
    },
    {
        "content": "<p>Fixed some issues with this PR. I'm going to merge it and fix the rest later. I think this is OK because we have no links pointing to the new page.</p>",
        "id": 197976509,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589826307
    },
    {
        "content": "<p>Cool thanks, that sounds good.</p>",
        "id": 197978543,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1589827169
    },
    {
        "content": "<p>Merged, fixing compile.</p>",
        "id": 197978871,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589827328
    },
    {
        "content": "<p>It seems that we shouldn't use <code>import markdown</code></p>",
        "id": 197978881,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589827338
    },
    {
        "content": "<p>Oh, I noticed that the other day, sorry I forgot to comment. <code>markdown</code> is a new dependency. Should probably use whatever markdown compiler the rest of the site generator is using.</p>",
        "id": 197978963,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1589827386
    },
    {
        "content": "<p>Ah mistletoe, I missed that thanks</p>",
        "id": 197979135,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1589827475
    },
    {
        "content": "<p>I can push the fix now</p>",
        "id": 197979349,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1589827596
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/100.html\">https://leanprover-community.github.io/100.html</a></p>",
        "id": 197979485,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589827678
    },
    {
        "content": "<p>Already fixed</p>",
        "id": 197979512,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589827682
    },
    {
        "content": "<p>Who will tell Freek about the update?</p>",
        "id": 197979816,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589827809
    },
    {
        "content": "<p>It would be nice if we went through the items on this list and made sure the declarations had nice doc strings. I just clicked on the quadratic reciprocity link. It leads to a page in the docs where the interesting result looks completely unremarkable, heh.</p>",
        "id": 197979865,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1589827835
    },
    {
        "content": "<p>And our old list had all the statements.</p>",
        "id": 197979955,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589827889
    },
    {
        "content": "<p>The inception version of this project: give the current yaml file to the doc gen tool. It can find the theorem statements and doc strings and create a new yaml for the website generator.</p>",
        "id": 197980345,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1589828068
    },
    {
        "content": "<p>Yeah for quadratic reciprocity its probably better to link to the file rather than the specific theorem, but maybe linking to the file  under links and leave the decl as it is.</p>",
        "id": 197980494,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1589828150
    },
    {
        "content": "<p>Do we have jinja+markdown on this website?</p>",
        "id": 197982004,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589828827
    },
    {
        "content": "<p>I mean, can I write a template in markdown with jinja?</p>",
        "id": 197982027,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589828847
    },
    {
        "content": "<p>I had I added <a href=\"https://leanprover-community.github.io/100-missing.html\">https://leanprover-community.github.io/100-missing.html</a></p>",
        "id": 197984356,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589830125
    },
    {
        "content": "<p>The Prime Number Theorem might be feasible if someone figures how to make Mario's translation from MetaMath be about Lean reals and Lean primes...</p>",
        "id": 197984496,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589830200
    },
    {
        "content": "<p>Triangle inequality is a little ill defined but clearly there to some extent, possibly we should link to the definition of metric space and the fact that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"bold\">R</mi><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">\\mathbf R^n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68611em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbf\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span></span></span></span></span></span></span></span> with the 2-norm is a metric space?</p>",
        "id": 197985229,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1589830567
    },
    {
        "content": "<p>Many are all a bit ill-defined -- did you see the discussion about other formalisations of this in the other provers? At least one just links to the definition of an ordered abelian group or something :-)</p>",
        "id": 197985608,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589830769
    },
    {
        "content": "<p>Ah I missed that discussion, but yeah I noticed that the other provers interpret this in wildly different ways.</p>",
        "id": 197985767,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1589830846
    },
    {
        "content": "<p>We don't have an instance <code>[fintype n] inner_product_space (n → real)</code></p>",
        "id": 197986496,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589831213
    },
    {
        "content": "<p>It should be very easy to add this, probably under some type tag because we already have a <code>normed_space</code> instance.</p>",
        "id": 197986550,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589831241
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/freek.2Eyaml/near/197984496\">said</a>:</p>\n<blockquote>\n<p>The Prime Number Theorem might be feasible if someone figures how to make Mario's translation from MetaMath be about Lean reals and Lean primes...</p>\n</blockquote>\n<p>What is actually needed is a proof that the reals are unique up to isomorphism. I already have a proof that primes are primes, this is how Dirichlet works</p>",
        "id": 197989496,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589832731
    },
    {
        "content": "<p>that is, this is library work, it has nothing to do with metamath or interacting with the translated metamath library</p>",
        "id": 197989597,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589832786
    },
    {
        "content": "<p>What properties are we starting from to characterize the reals? This wikpedia page gives a few different paths<br>\n<a href=\"https://en.wikipedia.org/wiki/Real_closed_field\">https://en.wikipedia.org/wiki/Real_closed_field</a></p>",
        "id": 197990159,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589833109
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/Prime.20number.20theorem.20in.20lean/near/168494855\">said</a>:</p>\n<blockquote>\n<p>In this case, the reals are plenty overdetermined</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"252300\">@Jalex Stark</span>  see this discussion</p>",
        "id": 197991010,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1589833546
    },
    {
        "content": "<p>okay, thanks. I guess the answer is \"assume whatever you want, and then we can pare down the assumptions if necessary but we probably won't need to\"</p>",
        "id": 197991354,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589833716
    },
    {
        "content": "<p>Yeah, complete ordered archimidean field seems a reasonable triple of conditions though.</p>",
        "id": 197991541,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1589833813
    },
    {
        "content": "<p>I have that instance (actually in the form <code>inner_product_space (fin n → ℝ)</code> rather than for a general fintype) in my <a href=\"https://github.com/jsm28/bmo2-2020-lean/blob/master/src/euclidean_space.lean\">definition of Euclidean spaces</a> (along with versions of  4: Pythagorean Theorem, 65: Isosceles Triangle Theorem and 94: The Law of Cosines, as none of those require building up any nontrivial geometry beyond the inner product). It will take a few more PRs after <a href=\"https://github.com/leanprover-community/mathlib/issues/2720\">#2720</a> to get that into mathlib.</p>",
        "id": 197991545,
        "sender_full_name": "Joseph Myers",
        "timestamp": 1589833815
    },
    {
        "content": "<p>Joseph, you can probably also knock out 27:sum of the angles of a triangle with the same technology</p>",
        "id": 197991802,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589833938
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"266253\">@Joseph Myers</span> You should totally add these  to <a href=\"https://github.com/leanprover-community/leanprover-community.github.io/blob/newsite/data/100.yaml\">https://github.com/leanprover-community/leanprover-community.github.io/blob/newsite/data/100.yaml</a> even if they aren't yet in mathlib, several results there already are on different repos.</p>",
        "id": 197992186,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1589834127
    },
    {
        "content": "<p>Just use <code>links:</code> instead of <code>decl:</code></p>",
        "id": 197993878,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589835058
    },
    {
        "content": "<p>Another low hanging fruit is \"55: Product of Segments of Chords\". E.g.,</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">theorem</span> <span class=\"n\">product_of_chords</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">inner_product_space</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">real</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"err\">\\</span><span class=\"n\">bu</span> <span class=\"n\">z</span> <span class=\"err\">∈</span> <span class=\"n\">sphere</span> <span class=\"n\">x</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">c&#39;</span> <span class=\"o\">:</span> <span class=\"n\">real</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">c&#39;</span> <span class=\"err\">\\</span><span class=\"n\">bu</span> <span class=\"n\">z</span> <span class=\"err\">∈</span> <span class=\"n\">sphere</span> <span class=\"n\">x</span> <span class=\"n\">r</span> <span class=\"bp\">∧</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">c&#39;</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">norm</span> <span class=\"n\">z</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">dist</span> <span class=\"n\">y</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"n\">r</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>\n\n\n<p>almost immediately follows from <code>Vieta_formula_quadratic</code>. Probably you'll want to reformulate it for an affine space over <code>E</code>.</p>",
        "id": 197994695,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589835502
    },
    {
        "content": "<p>Basically this list is full of elementary geometry theorems that are all low hanging fruits if you start from linear algebra instead of starting with a version of Euclid's axioms.</p>",
        "id": 197997444,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589837103
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"266253\">@Joseph Myers</span> how far are we from Olympiad geometry?</p>",
        "id": 197997791,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589837283
    },
    {
        "content": "<p>I think we're a long way from being able to do formal versions of most synthetic Euclidean olympiad geometry proofs. (My formalisation of Euclidean spaces comes from trying to formalise a paper with one problem in each of the four olympiad subject areas - algebra, combinatorics, geometry, number theory - but the geometry problem on that paper doesn't actually involve that much synthetic geometry.)</p>\n<p>There's no written IMO syllabus, but the IMO Compendium has a list of 171 \"Basic Concepts and Facts\" that probably includes many of the results and definitions most likely to be used in solving olympiad problems. 66 of those are geometry (and of those 66, mathlib only has a few trigonometric identities right now). (Another 23 are graph theory, so also missing from mathlib. I think mathlib is doing better on the results and definitions from that list that are neither geometry nor graph theory, though it certainly doesn't have full coverage of them.) There are of course many more geometry results that might sometimes be useful (see e.g. Evan Chen's book Euclidean Geometry in Mathematical Olympiads).</p>\n<p>But there must also be hundreds of trivial lemmas that don't even get mentioned in olympiad proofs but are needed when formalising them, whenever you need to prove something that's obvious from a diagram (these two lines can't be parallel, these two points can't be the same, this point must be between these other two points, etc.). I'm not sure there's any good way to find those lemmas other than for someone (not me!) to try formalising synthetic solutions to a large number of problems, adding any such lemmas to mathlib along the way.</p>",
        "id": 198008063,
        "sender_full_name": "Joseph Myers",
        "timestamp": 1589844937
    },
    {
        "content": "<p>Yes, I agree that getting someone to formalise a bunch of geometry problems might be the way forward. Of course I have all Chris Bradley's old geometry example sheets and handourts -- unfortunately they're all in my office, which is inaccessible currently. I might try and get undergrads doing this. Is there some online resource for the basic stuff?</p>",
        "id": 198008347,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589845205
    },
    {
        "content": "<p>I think i have heard that groebner basis methods are a useful tool in automating synthetic geometry proofs? but i don't know anything about the algebraic geometry required to make the link</p>",
        "id": 198008433,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589845327
    },
    {
        "content": "<p>They're good for coordinate proofs. I suspect for many problems you'll run into fiddly configuration-dependence issues (need to prove that lines intersect rather than being parallel, need to prove something is an internal rather than an external bisector, etc.) before a reduction to proving a polynomial is in an ideal actually solves the original problem statement.</p>",
        "id": 198008615,
        "sender_full_name": "Joseph Myers",
        "timestamp": 1589845516
    },
    {
        "content": "<p>There must be plenty of online resources for basic olympiad geometry, but I don't know which are good.</p>",
        "id": 198008688,
        "sender_full_name": "Joseph Myers",
        "timestamp": 1589845589
    },
    {
        "content": "<p>okay, so the many small synthetic geometry lemmas we're talking about are required even for the reduction to coordinate geometry?</p>",
        "id": 198008698,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589845604
    },
    {
        "content": "<p>Reduction to coordinate geometry probably doesn't need them. But the coordinate statement of the problem will typically involve inequalities (when a problem says \"triangle\" it doesn't include degenerate triangles, when it says \"circle\" radius 0 isn't valid, when it says \"intersect\" it doesn't mean at infinity, when it says \"incentre\" it doesn't mean \"excentre\", etc.). And while Tarski's theorem says a coordinate formulation with inequalities is decidable (the first-order theory of real-closed fields is complete), deciding problems with inequalities is much harder in practice than deciding polynomial membership of an ideal using Gröbner bases. (You could get lucky if the conclusion you're asked to prove doesn't implicitly involve any inequalities and doesn't depend on any inequalities from the hypotheses. In theory even then things might not work, because it's possible the polynomial equations might only imply the polynomial result over the reals but not the complex numbers and the Nullstellensatz requires an algebraically closed field, but in practice that's unlikely to be a problem.)</p>",
        "id": 198009166,
        "sender_full_name": "Joseph Myers",
        "timestamp": 1589846122
    },
    {
        "content": "<p>My impression is that in Coq several of these things have been tried, the most successful in practice being the \"area method\", which is fast but isn't guaranteed to solve everything. On the other hand the Tarski algorithm is very slow</p>",
        "id": 198009417,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589846406
    },
    {
        "content": "<p>If someone will write definition/proofs for basic theorems about points, lines, angles, and circles, then I can participate in building advanced theorems from them using olympiad geometry style proofs.</p>",
        "id": 198014951,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589852553
    },
    {
        "content": "<p>I think that the basics should be done based on linear algebra because this way they're not completely useless for the rest of the library.</p>",
        "id": 198015005,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589852627
    },
    {
        "content": "<p>Then someone can separately prove that some sort of Euclid's axioms imply equivalence to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"double-struck\">R</mi><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">\\mathbb R^2</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span>.</p>",
        "id": 198015083,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589852710
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/freek.2Eyaml/near/198008347\">said</a>:</p>\n<blockquote>\n<p>Yes, I agree that getting someone to formalise a bunch of geometry problems might be the way forward. Of course I have all Chris Bradley's old geometry example sheets and handourts -- unfortunately they're all in my office, which is inaccessible currently. I might try and get undergrads doing this. Is there some online resource for the basic stuff?</p>\n</blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/113488-general/topic/freek.2Eyaml/near/198014951\">said</a>:</p>\n<blockquote>\n<p>If someone will write definition/proofs for basic theorems about points, lines, angles, and circles, then I can participate in building advanced theorems from them using olympiad geometry style proofs.</p>\n</blockquote>\n<p>I've been Leaning for a few months and am happy to slog through and formalize foundational geometry. Let me know if you find materials that would be applicable, or if anyone else also wants to work on this!</p>",
        "id": 198018411,
        "sender_full_name": "ROCKY KAMEN-RUBIO",
        "timestamp": 1589858227
    },
    {
        "content": "<p>materials? like idk euclid's elements? or the book of problems by evan chen linked earlier in the thread?</p>",
        "id": 198018552,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589858451
    },
    {
        "content": "<p>are you looking for a body of desired applications that tells you what the API should be?</p>",
        "id": 198018558,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589858474
    },
    {
        "content": "<p>the first ten lines of code are worth a lot more than a few paragraphs saying you want to work on the problem :P</p>",
        "id": 198018740,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589858806
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"252300\">Jalex Stark</span> <a href=\"#narrow/stream/113488-general/topic/freek.2Eyaml/near/198018558\">said</a>:</p>\n<blockquote>\n<p>are you looking for a body of desired applications that tells you what the API should be?</p>\n</blockquote>\n<p>My impression was <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>  was suggesting that following a set of class problems could be a good starting place for the API. </p>\n<p><span class=\"user-mention silent\" data-user-id=\"252300\">Jalex Stark</span> <a href=\"#narrow/stream/113488-general/topic/freek.2Eyaml/near/198018740\">said</a>:</p>\n<blockquote>\n<p>the first ten lines of code are worth a lot more than a few paragraphs saying you want to work on the problem :P</p>\n</blockquote>\n<p>You're right that I don't need that to actually start doing this haha</p>",
        "id": 198018794,
        "sender_full_name": "ROCKY KAMEN-RUBIO",
        "timestamp": 1589858933
    },
    {
        "content": "<p>Here's something close to a formally-specified problem:<br>\ndefine the \"angle\" for an ordered triple of points via the cosine / dot-product formula,<br>\nthen prove that the following two definitions of \"triangle ABC is isoceles\" are equivalent:</p>\n<ul>\n<li><code>angle A B C = angle A C B</code></li>\n<li><code>distance A B = distance A C</code></li>\n</ul>",
        "id": 198018814,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589858976
    },
    {
        "content": "<p>you should consider it a success if (after trying for 5 or 20 minutes) you realize that adding more basic definitions or doing some easier exercise first would be better</p>",
        "id": 198018862,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589859020
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"261068\">ROCKY KAMEN-RUBIO</span> <a href=\"#narrow/stream/113488-general/topic/freek.2Eyaml/near/198018794\">said</a>:</p>\n<blockquote>\n<p>My impression was <span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span>  was suggesting that following a set of class problems could be a good starting place for the API. </p>\n</blockquote>\n<p>oops I sure am good at ignoring quoted text</p>",
        "id": 198018889,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589859106
    },
    {
        "content": "<p>Note that <span class=\"user-mention\" data-user-id=\"266253\">@Joseph Myers</span> already started coding this, see <a href=\"#narrow/stream/113488-general/topic/freek.2Eyaml/near/197991545\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/freek.2Eyaml/near/197991545</a></p>",
        "id": 198019077,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589859411
    },
    {
        "content": "<p>So <span class=\"user-mention\" data-user-id=\"261068\">@ROCKY KAMEN-RUBIO</span> if you want to participate, then coordinate with Joseph, please.</p>",
        "id": 198019089,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589859432
    },
    {
        "content": "<p>I know a few very good sources of geometry problems but they're in Russian.</p>",
        "id": 198019152,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589859509
    },
    {
        "content": "<p>Are Hilbert's or Tarski's axioms of Euclidean geometry enough to practically prove Olympiad problems if you define some higher-level concepts on top of them?</p>",
        "id": 198021467,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1589862870
    },
    {
        "content": "<p>I think the answer has to be yes if the problems are definable from such axioms</p>",
        "id": 198021591,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589863021
    },
    {
        "content": "<p>The key word is \"practically\", I think, and I don't know the answer. It seems to be a lot of work to get to that point.</p>",
        "id": 198021645,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589863109
    },
    {
        "content": "<p>I think the roadmap we're suggesting here is to start by showing that the real plane (together with its affine subspaces) is a model of those axioms, and then build a library of stuff that is in principle provable from those axioms, but letting yourself shortcut with coordinate-y / linear algebraic proofs of stuff where convenient</p>",
        "id": 198021654,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589863148
    },
    {
        "content": "<p>and the hope is to build the library that people in practice use to solve these problems</p>",
        "id": 198021720,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589863209
    },
    {
        "content": "<p>Yes, this is a good approach, but even with such a library, there is a lot of configuration information to contend with.</p>",
        "id": 198021754,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589863293
    },
    {
        "content": "<p>A good milestone is just to prove that every triangle has an orthocenter.</p>",
        "id": 198021760,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589863319
    },
    {
        "content": "<p>An imperial undergrad went through some textbook in 2018 which started with Tarski's axioms and built up a huge amount of theory</p>",
        "id": 198035434,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589876989
    },
    {
        "content": "<p>It is completely undocumented but it closely follows a book which IIRC is in German</p>",
        "id": 198035512,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589877020
    },
    {
        "content": "<p><a href=\"https://github.com/ImperialCollegeLondon/xena-UROP-2018/blob/master/src/Geometry/README.md\">https://github.com/ImperialCollegeLondon/xena-UROP-2018/blob/master/src/Geometry/README.md</a></p>",
        "id": 198035757,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589877188
    },
    {
        "content": "<p>Rocky, it would be an interesting task to work out what the heck is going on in that repo. My impression is that <span class=\"user-mention\" data-user-id=\"120256\">@Ali Sever</span> proved a lot of stuff</p>",
        "id": 198035870,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589877249
    },
    {
        "content": "<p>I've almost finished my detailed walkthrough of my code. It'll be up today.</p>",
        "id": 198038573,
        "sender_full_name": "Ali Sever",
        "timestamp": 1589878806
    },
    {
        "content": "<p>I had no idea you were working on it Ali! That's great news! Euclid comes up again and again here</p>",
        "id": 198039420,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589879338
    },
    {
        "content": "<p>If I complete formalising the problem I'm aiming for, that will probably get the circumcentre and orthocentre (and the fact that the reflections of the circumcircle in the sides of the triangle pass through the orthocentre, or equivalently that the reflections of the orthocentre in the sides lie on the circumcircle).</p>",
        "id": 198046877,
        "sender_full_name": "Joseph Myers",
        "timestamp": 1589884444
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"252300\">@Jalex Stark</span> I have the forward direction of pons asinorum, which is true for any three points. The converse requires defining \"triangle\" first (= 2-simplex = 3 affine-independent points, since we want definitions to be valid in n dimensions where that's sensible), it's not true for all degenerate triangles.</p>",
        "id": 198047065,
        "sender_full_name": "Joseph Myers",
        "timestamp": 1589884585
    },
    {
        "content": "<p>Has anyone pinged Freek so far? I think that by now we can.</p>",
        "id": 198196565,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589980720
    },
    {
        "content": "<p>Freek's page is still pointing to the old list. The new list <a href=\"https://leanprover-community.github.io/100.html\">https://leanprover-community.github.io/100.html</a> has 9 items that are not on Freek's page.</p>",
        "id": 199867520,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591359473
    },
    {
        "content": "<p>New statements in lean: 10, 19, 31, 38, 42, 75, 78, 85, 91</p>",
        "id": 199868819,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591360266
    },
    {
        "content": "<p>Can we add statements to the new page?</p>",
        "id": 199874724,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1591363324
    },
    {
        "content": "<p>What do you mean?</p>",
        "id": 199875371,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591363639
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/113488-general/topic/freek.2Eyaml/near/199874724\">said</a>:</p>\n<blockquote>\n<p>Can we add statements to the new page?</p>\n</blockquote>\n<p>That sounds good to me, what were you thinking?<br>\nFormal or informal statements? Lean ones only for the completed ones in Lean?</p>",
        "id": 199878450,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1591365008
    },
    {
        "content": "<p>I mean quoting parts of apidocs with theorem statement.</p>",
        "id": 199905212,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1591376112
    },
    {
        "content": "<p>This would require support from doc generator</p>",
        "id": 199905263,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1591376136
    },
    {
        "content": "<p>Ah, I see what you mean. Your not talking about adding extra entries, but improving the html file generated from the yaml.</p>",
        "id": 199905460,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591376240
    },
    {
        "content": "<p>Yes, the old page has formal theorem statement right there.</p>",
        "id": 199905973,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1591376503
    },
    {
        "content": "<p>I sent Freek an email to update the links on his page, and add the 9 new entries.</p>",
        "id": 199953635,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1591413513
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> Thanks</p>",
        "id": 199954117,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591414583
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/113488-general/topic/freek.2Eyaml/near/199874724\">said</a>:</p>\n<blockquote>\n<p>Can we add statements to the new page?</p>\n</blockquote>\n<p>See <a href=\"#narrow/stream/113488-general/topic/mathlib.20map/near/199969108\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/mathlib.20map/near/199969108</a> . The doc gen tool can export a json file with this info but there are (minor) complications right now.</p>",
        "id": 199969394,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1591441582
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> Freek's page still says 29, and we already have (The Answer to the Great Question Of Life, the Universe and Everything).</p>",
        "id": 201214553,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1592437749
    },
    {
        "content": "<p>Did he answer your email?</p>",
        "id": 201214566,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1592437768
    },
    {
        "content": "<p>I just prodded him</p>",
        "id": 201240766,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592469023
    },
    {
        "content": "<p>I wonder whether in future the canonical thing to do is to prod him every time we go one position higher in the all time list</p>",
        "id": 201240864,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592469098
    },
    {
        "content": "<p>What about doing it only every ten items?</p>",
        "id": 201242867,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1592470553
    },
    {
        "content": "<p>Over in metamath land we usually report one after every one or maybe two items (depending on how hard the problem is or how much we care about getting the word out). I expect Freek just missed the email; there are often long delays but nothing malicious seeming, I think he is just a typical busy academic</p>",
        "id": 201243350,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592470883
    },
    {
        "content": "<p>He replied -- indeed he's worrying about a talk</p>",
        "id": 201251034,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592476342
    },
    {
        "content": "<p>He indeed didn't reply to my email yet. My experience is that he will get to it eventually.</p>",
        "id": 201313633,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1592507881
    },
    {
        "content": "<p>Freek replied and updated his webpage today. I will reply with the 4 new additions since last time :)</p>",
        "id": 201333675,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1592519612
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"252627\">@Jujian Zhang</span> do you want to add a link to your <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>e</mi></mrow><annotation encoding=\"application/x-tex\">e</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">e</span></span></span></span> is transcendental proof to our Freek 100 theorems list ? <a href=\"https://github.com/leanprover-community/leanprover-community.github.io/blob/newsite/data/100.yaml#L206\">https://github.com/leanprover-community/leanprover-community.github.io/blob/newsite/data/100.yaml#L206</a> number 67</p>",
        "id": 207459222,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1597869688
    },
    {
        "content": "<p>Yes, I will do that when I am home. Thank you for the link.</p>",
        "id": 207459811,
        "sender_full_name": "Jujian Zhang",
        "timestamp": 1597870074
    },
    {
        "content": "<p>Thank you for proving it!</p>",
        "id": 207459978,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1597870179
    },
    {
        "content": "<p>And don't forget to bring it to mathlib! This is much more important than this list.</p>",
        "id": 207460360,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1597870413
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113488-general/topic/freek.2Eyaml/near/198021760\">said</a>:</p>\n<blockquote>\n<p>A good milestone is just to prove that every triangle has an orthocenter.</p>\n</blockquote>\n<p>It took a while, and we're not really any closer to being able to do synthetic geometry proofs, but <a href=\"https://github.com/leanprover-community/mathlib/issues/3872\">#3872</a> defines <code>orthocenter</code> for a triangle (in terms of the n-dimensional generalization, <code>monge_point</code> for a simplex), and proves basic properties (lies in the altitudes, is the unique point in any two of the altitudes, position on the Euler line in relation to O and G).</p>\n<p>Now that I can state the answer to the geometry problem on the olympiad paper I'm formalizing (which required <code>orthocenter</code>), I can get onto formalizing the solution to that problem (having formalized the solutions to all the non-geometry problems on that paper some time ago).</p>",
        "id": 207480103,
        "sender_full_name": "Joseph Myers",
        "timestamp": 1597886288
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"266253\">@Joseph Myers</span> Wow! Thanks a lot for your continuous stream of PRs on this topic.</p>",
        "id": 207483878,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1597891610
    },
    {
        "content": "<p>For anyone interested, <span class=\"user-mention\" data-user-id=\"302826\">@Aaron Anderson</span> and I have got a sorry-free proof of Freek 45 in <a href=\"https://github.com/leanprover-community/mathlib/tree/freek-45\">a branch of mathlib</a>, and we're in the process of making PRs</p>",
        "id": 211312100,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1601064901
    },
    {
        "content": "<p>I was surfing <a href=\"https://leanprover-community.github.io/100.html\">our list</a> of the Freek 100 and was a bit surprised to see we don't officially have Cramer's rule, number 97, since I know we <a href=\"https://leanprover-community.github.io/mathlib_docs/linear_algebra/nonsingular_inverse.html#matrix.cramer_map\">essentially do</a>.</p>",
        "id": 213815133,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1603126762
    },
    {
        "content": "<p>Looking more closely though, I see all the hard work has been done but the actual statement of Cramer's rule isn't there so I guess I'll PR it. Just mentioning it unless somebody else is already on it!</p>",
        "id": 213815285,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1603126824
    },
    {
        "content": "<p>(in which case I will refrain)</p>",
        "id": 213815302,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1603126833
    },
    {
        "content": "<p>Go go go go go!!!</p>",
        "id": 213818684,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603128489
    }
]