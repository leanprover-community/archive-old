[
    {
        "content": "<p>If I have <code>sorry</code> listed in <code>#print axioms foo</code>, is there a way to find which declaration used in the proof of <code>foo</code> really uses <code>sorry</code>? I mean, with <code>sorry</code> explicitly written. I've checked by hand all the declaration used in the proof such a theorem, but I didn't found any <code>sorry</code>, so it must be some instance or whatever.</p>",
        "id": 301827143,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1664633652
    },
    {
        "content": "<p>The following should give you a path from <code>foo</code> to a declaration that uses <code>sorry</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">tactic.get_dependents_aux</span> <span class=\"o\">(</span><span class=\"n\">env</span> <span class=\"o\">:</span> <span class=\"n\">environment</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">name</span> <span class=\"bp\">→</span>\n  <span class=\"n\">bool</span> <span class=\"bp\">×</span> <span class=\"n\">list</span> <span class=\"n\">name</span> <span class=\"bp\">×</span> <span class=\"n\">name_map</span> <span class=\"n\">bool</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"o\">(</span><span class=\"n\">bool</span> <span class=\"bp\">×</span> <span class=\"n\">list</span> <span class=\"n\">name</span> <span class=\"bp\">×</span> <span class=\"n\">name_map</span> <span class=\"n\">bool</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"n\">x</span><span class=\"bp\">@</span><span class=\"o\">(</span><span class=\"n\">tt</span><span class=\"o\">,</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">pure</span> <span class=\"n\">x</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">ff</span><span class=\"o\">,</span> <span class=\"n\">p</span><span class=\"bp\">@</span><span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">ns</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">ns.find</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n    <span class=\"n\">d</span> <span class=\"bp\">←</span> <span class=\"n\">env.get</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"k\">let</span> <span class=\"n\">process</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"o\">(</span><span class=\"n\">bool</span> <span class=\"bp\">×</span> <span class=\"n\">list</span> <span class=\"n\">name</span> <span class=\"bp\">×</span> <span class=\"n\">name_map</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"k\">do</span>\n      <span class=\"n\">v.fold</span> <span class=\"o\">(</span><span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">ff</span><span class=\"o\">,</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">ns</span><span class=\"o\">))</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">e</span> <span class=\"n\">_</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"bp\">λ</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n        <span class=\"k\">if</span> <span class=\"n\">f</span> <span class=\"n\">e</span> <span class=\"k\">then</span> <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">tt</span><span class=\"o\">,</span> <span class=\"o\">[],</span> <span class=\"n\">p.2.2</span><span class=\"o\">)</span> <span class=\"k\">else</span>\n        <span class=\"k\">if</span> <span class=\"n\">e.is_constant</span> <span class=\"k\">then</span> <span class=\"n\">tactic.get_dependents_aux</span> <span class=\"n\">e.const_name</span> <span class=\"n\">p</span> <span class=\"k\">else</span> <span class=\"n\">pure</span> <span class=\"n\">p</span><span class=\"o\">),</span>\n    <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">ns</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">process</span> <span class=\"n\">d.value</span><span class=\"o\">,</span>\n    <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">b</span> <span class=\"k\">then</span> <span class=\"n\">n</span><span class=\"o\">::</span><span class=\"n\">l</span> <span class=\"k\">else</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">ns.insert</span> <span class=\"n\">n</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n  <span class=\"kd\">end</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">tactic.get_dependents</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span> <span class=\"n\">env</span> <span class=\"bp\">←</span> <span class=\"n\">tactic.get_env</span><span class=\"o\">,</span>\n  <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">ns</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">tactic.get_dependents_aux</span> <span class=\"n\">env</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">ff</span><span class=\"o\">,</span> <span class=\"o\">[],</span> <span class=\"n\">mk_name_map</span><span class=\"o\">),</span>\n  <span class=\"n\">pure</span> <span class=\"n\">l</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">tactic.print_path_to_sorry</span> <span class=\"o\">(</span><span class=\"n\">nm</span> <span class=\"o\">:</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">tactic.get_dependents</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">e.is_sorry.is_some</span><span class=\"o\">)</span> <span class=\"n\">nm</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">tactic.trace</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">tactic.print_path_to_sorry</span> <span class=\"bp\">`</span><span class=\"n\">foo</span>\n</code></pre></div>\n<p>(based on <a href=\"#narrow/stream/113489-new-members/topic/.22Does.20Theorem.20A.20depend.20on.20Theorem.20B.3F.22/near/262238284\">this post</a> by <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>)</p>",
        "id": 302076902,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1664807916
    },
    {
        "content": "<p>If this work then it should definitely be added to mathlib. This is a very useful tool for large projects.</p>",
        "id": 302080006,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1664808774
    },
    {
        "content": "<p>It works on <code>sphere_eversion</code> :-) I'll open a PR.</p>",
        "id": 302081112,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1664809124
    },
    {
        "content": "<p>Thanks! I ended up doing it by hand, but I agree it's very useful.</p>",
        "id": 302086594,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1664810707
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/16911\">#16911</a></p>",
        "id": 303439517,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1665495518
    },
    {
        "content": "<p>In which situation is <code>#print_sorry_in</code> supposed to print the same lemma more than once?</p>",
        "id": 311827079,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1669210509
    },
    {
        "content": "<p>Never. But I can imagine that it does it if you depend on the lemma via two different routes. Feel free to PR a fix.</p>",
        "id": 311842049,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1669215245
    },
    {
        "content": "<p>Actually, it doesn't happen to me. I just misinterpreted the output because of line wraps.</p>",
        "id": 311844124,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1669215828
    }
]