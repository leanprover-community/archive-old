[
    {
        "content": "<p>Has anyone looked at or is familiar with Lean formalisations of substructural type systems (like linear types whose instances have to be used exactly once)?</p>",
        "id": 136882886,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1541021507
    },
    {
        "content": "<p>If not that, perhaps someone has tried at least the base stuff like progress and preservation for simply-typed lambda calculus? I'm trying to follow <a href=\"https://softwarefoundations.cis.upenn.edu/current/plf-current/index.html\" target=\"_blank\" title=\"https://softwarefoundations.cis.upenn.edu/current/plf-current/index.html\">Programming Language Foundations</a>, except using de Brujin indices, but struggling a bit with the different Coq vs. Lean tactics.</p>",
        "id": 148018930,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1542693137
    },
    {
        "content": "<p>Ah, I know a contributor to Rust posted here once asking about linear types, but unfortunately I don't think they are an active member of this chat room</p>",
        "id": 148019057,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1542693456
    },
    {
        "content": "<p>if you have tactic questions feel free to ask, though</p>",
        "id": 148019058,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1542693465
    },
    {
        "content": "<p>although, looking over PLF, I don't know a good replacement for <code>eapply</code> and friends</p>",
        "id": 148019171,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1542693608
    },
    {
        "content": "<p>Hm, how about <code>inversion</code>?</p>",
        "id": 148019190,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1542693678
    },
    {
        "content": "<p><code>cases</code> will do it</p>",
        "id": 148019203,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1542693722
    },
    {
        "content": "<p>I think <span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> did some work with PTSs in lean, and he is currently working on model theory for first order logic using de bruijn indices. I don't know how much of his stuff is available or applicable to you though</p>",
        "id": 148023886,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542701800
    },
    {
        "content": "<p>I have not done PTSs in Lean, but in Coq only: <a href=\"http://florisvandoorn.com/ptsf/index.html\" target=\"_blank\" title=\"http://florisvandoorn.com/ptsf/index.html\">http://florisvandoorn.com/ptsf/index.html</a><br>\nI'm now indeed working on first-order logic in Lean also using de Bruijn variables: <a href=\"https://github.com/flypitch/flypitch/blob/master/src/fol.lean\" target=\"_blank\" title=\"https://github.com/flypitch/flypitch/blob/master/src/fol.lean\">https://github.com/flypitch/flypitch/blob/master/src/fol.lean</a><br>\nFirst-order logic is a bit simpler than lambda calculus, but the bookkeeping with de Bruijn variables is the same (search for <code>lift_term_at</code>, <code>lift_formula_at</code>, <code>subst_term</code> and <code>subst_formula</code> and their properties).</p>",
        "id": 148050772,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1542731209
    }
]