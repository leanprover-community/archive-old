[
    {
        "content": "<p>Is there a function that, given a term of a quotient type, gives the (fin)set of all the terms of the parent type that could have produced it? For example, something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.finset.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.list.perm</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">list</span>\n\n<span class=\"c1\">-- `decidable_eq α` is needed because proving `nodup l.permutations` is hard</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">multiset</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">quotient.lift_on</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">l.permutations.to_finset</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">l</span> <span class=\"n\">l'</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">l</span> <span class=\"bp\">~</span> <span class=\"n\">l'</span><span class=\"o\">),</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">ext</span> <span class=\"n\">sl</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mem_permutations</span><span class=\"o\">,</span> <span class=\"n\">mem_to_finset</span><span class=\"o\">],</span>\n    <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">hs</span><span class=\"o\">,</span> <span class=\"n\">hs.trans</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">hs</span><span class=\"o\">,</span> <span class=\"n\">hs.trans</span> <span class=\"n\">h.symm</span><span class=\"o\">⟩</span>\n  <span class=\"kd\">end</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 244363115,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1625010632
    },
    {
        "content": "<p>isn't that just <code>quotient.mk ⁻¹' {x}</code>?</p>",
        "id": 244363246,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1625010753
    },
    {
        "content": "<p>Is that computable?</p>",
        "id": 244363290,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1625010792
    },
    {
        "content": "<p>i mean lean lets me write it as a <code>def</code> without jamming <code>noncomputable</code> on it, but I guess it probably strongly depends on your <code>setoid</code> instance</p>",
        "id": 244363625,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1625011103
    },
    {
        "content": "<p><code>quotient.mk ⁻¹' {x}</code> is really a Prop. That's why it doesn't complain about computability. And given that <code>set (list nat)</code> is an uncountable type, I can't imagine a nice decision procedure that will evaluate it. For some fixed <code>x</code>, yes, that set is finite. But <code>set.finite.to_finset</code> _is_ noncomputable:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.finset.sort</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.list.perm</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.set.finite</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">list</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- `decidable_eq α` is needed because proving `nodup l.permutations` is hard</span>\n<span class=\"kd\">def</span> <span class=\"n\">quotient.inv</span> <span class=\"o\">:</span> <span class=\"n\">multiset</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">quotient.lift_on</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">l.permutations.to_finset</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">l</span> <span class=\"n\">l'</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">l</span> <span class=\"bp\">~</span> <span class=\"n\">l'</span><span class=\"o\">),</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">ext</span> <span class=\"n\">sl</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mem_permutations</span><span class=\"o\">,</span> <span class=\"n\">mem_to_finset</span><span class=\"o\">],</span>\n    <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">hs</span><span class=\"o\">,</span> <span class=\"n\">hs.trans</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">hs</span><span class=\"o\">,</span> <span class=\"n\">hs.trans</span> <span class=\"n\">h.symm</span><span class=\"o\">⟩</span>\n  <span class=\"kd\">end</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">set.finite.to_finset</span>\n\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"n\">quotient.inv</span> <span class=\"o\">({</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">)</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">{[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]}</span>\n<span class=\"cm\">-/</span>\n\n\n<span class=\"k\">#eval</span> <span class=\"n\">quotient.mk</span> <span class=\"bp\">⁻¹'</span> <span class=\"o\">({({</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">multiset</span> <span class=\"n\">ℕ</span><span class=\"o\">))</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">cannot evaluate function: 0 arguments given but expected 1</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 244364387,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1625011814
    }
]