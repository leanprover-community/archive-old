[
    {
        "content": "<p>I've had multiple situations now where there are two possible ways I might want to state a lemma, where the second is just the first with the equivalence moved to the other side.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">e</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">foo'</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">e.symm</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">e.eq_symm_apply</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">foo</span> <span class=\"c1\">-- or whatever the lemma is really called</span>\n</code></pre></div>\n<p>Depending on which way we want to rewrite, both versions are useful<br>\nSome places this comes up:</p>\n<ul>\n<li>associativity of the kronecker product, with <code>e = matrix.reindex (equiv.prod_assoc  _ _ _) (equiv.prod_assoc)</code> (<a href=\"https://leanprover-community.github.io/mathlib_docs/find/matrix.kronecker_map_assoc\">docs#matrix.kronecker_map_assoc</a>)</li>\n<li>associativity of tuple concatenation, with <code>e = fin.cast (add_assoc _ _ _)</code></li>\n</ul>\n<p>Should we have a <code>x =[e] y</code> notation for this type of thing, so that <code>foo.symm</code> gives <code>foo'</code> and we don't have to state both?</p>",
        "id": 261762741,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637142917
    },
    {
        "content": "<p>That would be really hard to read.</p>",
        "id": 261762868,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1637142982
    },
    {
        "content": "<p>The notation <code>=[e]</code> you mean?</p>",
        "id": 261762908,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637143004
    },
    {
        "content": "<p>Yes</p>",
        "id": 261763073,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1637143085
    },
    {
        "content": "<p>Expanding on the above, with a different notation of <code>x = y via e</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">has_canonical_symm</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f_inv</span> <span class=\"o\">:</span> <span class=\"n\">out_param</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">left_inv</span> <span class=\"o\">:</span> <span class=\"n\">left_inverse</span> <span class=\"n\">f_inv</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">right_inv</span> <span class=\"o\">:</span> <span class=\"n\">right_inverse</span> <span class=\"n\">f_inv</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">has_canonical_symm.equiv</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">f_inv</span> <span class=\"o\">:</span> <span class=\"n\">out_param</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)}</span>\n  <span class=\"o\">[</span><span class=\"n\">has_canonical_symm</span> <span class=\"n\">f</span> <span class=\"n\">f_inv</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">≃</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">f_inv</span><span class=\"o\">,</span> <span class=\"n\">has_canonical_symm.left_inv</span><span class=\"o\">,</span> <span class=\"n\">has_canonical_symm.right_inv</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">@[priority 1001]</span>\n<span class=\"kd\">instance</span> <span class=\"n\">has_canonical_symm.add_right_neg</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_group</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">has_canonical_symm</span> <span class=\"o\">(</span><span class=\"n\">equiv.add_right</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">equiv.add_right</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">has_canonical_symm.add_right</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_group</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">has_canonical_symm</span> <span class=\"o\">(</span><span class=\"n\">equiv.add_right</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">equiv.add_right</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">eq_via</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span>\n\n<span class=\"kd\">notation</span> <span class=\"n\">x</span> <span class=\"bp\">`</span> <span class=\"bp\">=</span> <span class=\"bp\">`</span> <span class=\"n\">y</span> <span class=\"bp\">`</span> <span class=\"n\">via</span> <span class=\"bp\">`</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"n\">eq_via</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">e</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">eq_via.symm</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f_inv</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">has_canonical_symm</span> <span class=\"n\">f</span> <span class=\"n\">f_inv</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"n\">via</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"n\">via</span> <span class=\"n\">f_inv</span> <span class=\"o\">:=</span>\n<span class=\"o\">((</span><span class=\"n\">has_canonical_symm.equiv</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">eq_symm_apply.mpr</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"n\">via</span> <span class=\"o\">(</span><span class=\"n\">equiv.add_right</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">h</span>  <span class=\"c1\">-- h : 1 = 2 via ⇑(equiv.add_right 1)</span>\n<span class=\"k\">#check</span> <span class=\"n\">h.symm</span>  <span class=\"c1\">-- h : 2 = 1 via ⇑(equiv.add_right (-1))</span>\n<span class=\"k\">#check</span> <span class=\"n\">h.symm.symm</span>  <span class=\"c1\">-- h : 1 = 2 via ⇑(equiv.add_right 1)</span>\n</code></pre></div>\n<p>where <code>has_canonical_symm</code> is really just a generalization of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ring_hom_inv_pair\">docs#ring_hom_inv_pair</a></p>",
        "id": 261764578,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637143916
    },
    {
        "content": "<p>I really don't like <code>=</code> being the symbol here!</p>",
        "id": 261764717,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1637144003
    },
    {
        "content": "<p>I'm not at all attached to <code>=</code>, if you suggest another symbol I'm happy to adjust the above; I'm asking more about whether this sort of API would be useful</p>",
        "id": 261764769,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637144037
    },
    {
        "content": "<p>Maybe something using <code>↦</code>? But I might be dubious about this with any symbol.</p>",
        "id": 261764824,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1637144052
    },
    {
        "content": "<p>To clarify, my thumbs-up is for <code>↦</code>.  That's the symbol I'd use on paper.</p>",
        "id": 261764906,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1637144115
    },
    {
        "content": "<p>I suppose the other option is that <code>eq_via.symm</code> just becomes dot notation on <code>eq</code></p>",
        "id": 261765036,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637144180
    },
    {
        "content": "<p>Then we don't need any special syntax, but we still have something to conveniently turn <code>x = f y</code> into <code>y = f_inv x</code></p>",
        "id": 261765058,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637144202
    },
    {
        "content": "<p>But I think that runs into unification trouble, since <code>f</code> is no longer distinguishable from <code>y</code> by the type alone</p>",
        "id": 261765140,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637144269
    },
    {
        "content": "<p>The advantage of a separate definition is that it is preserved by simp.  <code>f y</code> can easily turn into <code>x</code>.</p>",
        "id": 261765143,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1637144270
    },
    {
        "content": "<p>I adjusted the notation above. I also am sure the precedence is wrong, but that's a problem for if we think this is worth pursuing</p>",
        "id": 261765241,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637144319
    },
    {
        "content": "<p>I'd vote for the original <code>x =[e] y</code> because it matches HoTT and it makes symmetry and transitivity really obvious. (But I'm not a mathlib contributor.)</p>",
        "id": 261774581,
        "sender_full_name": "Sebastian Reichelt",
        "timestamp": 1637150395
    },
    {
        "content": "<p>The argument against that notation is that when <code>e</code> becomes long it becomes awfully hard to read <code>x</code> and <code>y</code>, which are arguably the interesting piece</p>",
        "id": 261774929,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637150586
    },
    {
        "content": "<p>That's true. BTW, if <code>e</code> was an equality instead of an equivalence, it would be <code>e ▸ x = y</code>. Maybe it's possible to use something similar? Just an idea.</p>",
        "id": 261776963,
        "sender_full_name": "Sebastian Reichelt",
        "timestamp": 1637151871
    },
    {
        "content": "<p>Related, but using equalities instead of <code>equiv</code>s:<br>\n<a href=\"#narrow/stream/113488-general/topic/heq.20alternative/near/213656799\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/heq.20alternative/near/213656799</a></p>",
        "id": 261781872,
        "sender_full_name": "Reid Barton",
        "timestamp": 1637154879
    },
    {
        "content": "<p>Which is probably an argument against using <code>=</code> in this notation, since the meaning in that thread is probably closer to what you'd expect</p>",
        "id": 261782061,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637154987
    }
]