[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">red</span><span class=\"bp\">.</span><span class=\"n\">step</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">bnot</span> <span class=\"o\">{</span><span class=\"n\">L₁</span> <span class=\"n\">L₂</span> <span class=\"n\">x</span> <span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">red</span><span class=\"bp\">.</span><span class=\"n\">step</span> <span class=\"o\">(</span><span class=\"n\">L₁</span> <span class=\"bp\">++</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">::</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">bnot</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">::</span> <span class=\"n\">L₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">L₁</span> <span class=\"bp\">++</span> <span class=\"n\">L₂</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>How do I tell Lean that whenever <code>red.step L1 L2</code> is true, it is also true that <code>list.sizeof L2 &lt; list.sizeof L1</code>?</p>",
        "id": 125289818,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524116254
    },
    {
        "content": "<p>I don't want to provide a custom proof at the end of every recursion</p>",
        "id": 125289821,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524116269
    },
    {
        "content": "<p>You could prove that <code>red.step</code> itself is well-founded...</p>",
        "id": 125289871,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524116296
    },
    {
        "content": "<p>it's in the wrong direction though</p>",
        "id": 125289872,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524116305
    },
    {
        "content": "<p><code>swap red.step</code> then</p>",
        "id": 125289874,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524116312
    },
    {
        "content": "<p>what is swap?</p>",
        "id": 125289890,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524116364
    },
    {
        "content": "<p>exactly what it sounds like</p>",
        "id": 125289892,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524116378
    },
    {
        "content": "<p>it's defined in <code>init.function</code> and swaps a binary operator (aka relation converse)</p>",
        "id": 125289895,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524116401
    },
    {
        "content": "<p>oh, I guess it is in <code>function</code> ns</p>",
        "id": 125289937,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524116435
    },
    {
        "content": "<p>right</p>",
        "id": 125289939,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524116441
    },
    {
        "content": "<p>so if I prove that <code>swap red.step</code> is well-founded, then I won't have to worry about anything?</p>",
        "id": 125289940,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524116451
    },
    {
        "content": "<p>do you suppose I prove <code>has_well_founded (list (α × bool))</code>?</p>",
        "id": 125289987,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524116525
    },
    {
        "content": "<p>No, except perhaps locally if you like</p>",
        "id": 125289991,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524116557
    },
    {
        "content": "<p>I mean, is it <code>has_well_founded (list (α × bool))</code> that I should prove?</p>",
        "id": 125289993,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524116568
    },
    {
        "content": "<p>and then I can use recursion?</p>",
        "id": 125289994,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524116573
    },
    {
        "content": "<p>yes</p>",
        "id": 125289995,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524116577
    },
    {
        "content": "<p>because \"prove well-founded\" is kinda vague of an instruction</p>",
        "id": 125290000,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524116587
    },
    {
        "content": "<p>you can also define a <code>well_founded</code> proof and then refer to it in your wf definition using <code>using_well_founded</code></p>",
        "id": 125290004,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524116615
    },
    {
        "content": "<p>there are several examples of that in mathlib, just look for the keyword</p>",
        "id": 125290010,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524116631
    },
    {
        "content": "<p>as I said, I don't want to write a custom proof at the end of every recursion</p>",
        "id": 125290053,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524116647
    },
    {
        "content": "<p>I will be doing recurison much</p>",
        "id": 125290054,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524116650
    },
    {
        "content": "<p>how would I prove that <code>red.step</code> is well-founded?</p>",
        "id": 125290109,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524116771
    },
    {
        "content": "<p>I don't know how to use list lengths to prove that it is well-founded</p>",
        "id": 125290113,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524116800
    },
    {
        "content": "<p>my first idea would be to use <code>subrelation.wf</code> and <code>inv_image.wf</code>.</p>",
        "id": 125290273,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1524117217
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">H1</span> <span class=\"o\">:</span> <span class=\"n\">step</span> <span class=\"n\">L₁</span> <span class=\"n\">L₄</span><span class=\"o\">,</span>\n<span class=\"err\">⊢</span> <span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">swap</span> <span class=\"n\">step</span> <span class=\"n\">L₄</span> <span class=\"n\">L₁</span>\n</pre></div>",
        "id": 125291560,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524119706
    },
    {
        "content": "<p>Lean's automater couldn't match this with \"assumption\"</p>",
        "id": 125291563,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524119717
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span></p>",
        "id": 125291564,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524119721
    },
    {
        "content": "<p>try <code>exact this</code> as the tactic instead</p>",
        "id": 125291620,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524119840
    },
    {
        "content": "<p>can I not change the tactic ;_;</p>",
        "id": 125291756,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524120018
    },
    {
        "content": "<p>Now I used <code>λ L₁ L₂, red.step L₂ L₁</code> as the well-founded relation instead and Lean is giving me ths ;_;</p>",
        "id": 125291845,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524120158
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">match</span> <span class=\"n\">failed</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">,</span>\n<span class=\"n\">L₃</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">bool</span><span class=\"o\">),</span>\n<span class=\"n\">red</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"bp\">_</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"err\">Σ&#39;</span> <span class=\"o\">{</span><span class=\"n\">L₁</span> <span class=\"n\">L₂</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">bool</span><span class=\"o\">)}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">red</span> <span class=\"n\">L₁</span> <span class=\"n\">L₂</span><span class=\"o\">),</span> <span class=\"n\">red</span> <span class=\"n\">L₂</span> <span class=\"n\">L₃</span><span class=\"o\">),</span> <span class=\"n\">red</span> <span class=\"o\">(</span><span class=\"bp\">_</span><span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">fst</span><span class=\"o\">)</span> <span class=\"n\">L₃</span><span class=\"o\">,</span>\n<span class=\"n\">L₁</span> <span class=\"n\">L₂</span> <span class=\"n\">L₄</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">bool</span><span class=\"o\">),</span>\n<span class=\"n\">H1</span> <span class=\"o\">:</span> <span class=\"n\">step</span> <span class=\"n\">L₁</span> <span class=\"n\">L₄</span><span class=\"o\">,</span>\n<span class=\"n\">H2</span> <span class=\"o\">:</span> <span class=\"n\">red</span> <span class=\"n\">L₄</span> <span class=\"n\">L₂</span><span class=\"o\">,</span>\n<span class=\"n\">H23</span> <span class=\"o\">:</span> <span class=\"n\">red</span> <span class=\"n\">L₂</span> <span class=\"n\">L₃</span>\n<span class=\"err\">⊢</span> <span class=\"n\">step</span> <span class=\"n\">L₁</span> <span class=\"n\">L₄</span>\n</pre></div>",
        "id": 125291850,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524120168
    },
    {
        "content": "<p>keru mouri</p>",
        "id": 125291860,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524120184
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> sauva mi</p>",
        "id": 125291948,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524120334
    },
    {
        "content": "<p>You should use <code>using_well_founded</code> like I said</p>",
        "id": 125291962,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524120362
    },
    {
        "content": "<p>I don’t want to use it after every single recursion ;_;</p>",
        "id": 125291996,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524120385
    },
    {
        "content": "<p>it's just one line, which you can copy around</p>",
        "id": 125291997,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524120387
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">red</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kn\">axiom</span> <span class=\"n\">red_length</span> <span class=\"o\">(</span><span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">red</span> <span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"bp\">→</span> <span class=\"n\">l₁</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">&lt;</span> <span class=\"n\">l₂</span><span class=\"bp\">.</span><span class=\"n\">length</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">red_well_founded</span> <span class=\"o\">:</span> <span class=\"n\">well_founded</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">red</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">subrelation</span><span class=\"bp\">.</span><span class=\"n\">wf</span> <span class=\"n\">red_length</span>\n<span class=\"o\">(</span><span class=\"n\">measure_wf</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">length</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>This might help if you haven't already worked it out.</p>",
        "id": 125467953,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1524258573
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> thanks, but it still bugs me to provide a proof of well-foundedness</p>",
        "id": 125473548,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524268306
    },
    {
        "content": "<p>so in the end I proved</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">red</span><span class=\"bp\">.</span><span class=\"n\">sizeof</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">L₁</span> <span class=\"n\">L₂</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">bool</span><span class=\"o\">)},</span> <span class=\"n\">red</span><span class=\"bp\">.</span><span class=\"n\">step</span> <span class=\"n\">L₁</span> <span class=\"n\">L₂</span> <span class=\"bp\">→</span> <span class=\"n\">L₂</span><span class=\"bp\">.</span><span class=\"n\">sizeof</span> <span class=\"bp\">&lt;</span> <span class=\"n\">L₁</span><span class=\"bp\">.</span><span class=\"n\">sizeof</span>\n</pre></div>\n\n\n<p>and then in recursions I do:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">red</span><span class=\"bp\">.</span><span class=\"n\">append</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">L₁</span> <span class=\"n\">L₂</span> <span class=\"n\">L₃</span> <span class=\"n\">L₄</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">bool</span><span class=\"o\">)},</span>\n  <span class=\"n\">red</span> <span class=\"n\">L₁</span> <span class=\"n\">L₃</span> <span class=\"bp\">→</span> <span class=\"n\">red</span> <span class=\"n\">L₂</span> <span class=\"n\">L₄</span> <span class=\"bp\">→</span> <span class=\"n\">red</span> <span class=\"o\">(</span><span class=\"n\">L₁</span> <span class=\"bp\">++</span> <span class=\"n\">L₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">L₃</span> <span class=\"bp\">++</span> <span class=\"n\">L₄</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">red</span><span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"n\">red</span><span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"o\">:=</span> <span class=\"n\">red</span><span class=\"bp\">.</span><span class=\"n\">refl</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">red</span><span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"o\">(</span><span class=\"n\">red</span><span class=\"bp\">.</span><span class=\"n\">step_trans</span> <span class=\"n\">H3</span> <span class=\"n\">H4</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">have</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"n\">red</span><span class=\"bp\">.</span><span class=\"n\">sizeof</span> <span class=\"n\">H3</span><span class=\"o\">,</span>\n  <span class=\"n\">red</span><span class=\"bp\">.</span><span class=\"n\">step_trans</span> <span class=\"o\">(</span><span class=\"n\">red</span><span class=\"bp\">.</span><span class=\"n\">step</span><span class=\"bp\">.</span><span class=\"n\">append_left</span> <span class=\"n\">H3</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">red</span><span class=\"bp\">.</span><span class=\"n\">append</span> <span class=\"n\">red</span><span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"n\">H4</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">red</span><span class=\"bp\">.</span><span class=\"n\">step_trans</span> <span class=\"n\">H1</span> <span class=\"n\">H2</span><span class=\"o\">)</span> <span class=\"n\">H3</span> <span class=\"o\">:=</span> <span class=\"k\">have</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"n\">red</span><span class=\"bp\">.</span><span class=\"n\">sizeof</span> <span class=\"n\">H1</span><span class=\"o\">,</span>\n  <span class=\"n\">red</span><span class=\"bp\">.</span><span class=\"n\">step_trans</span> <span class=\"o\">(</span><span class=\"n\">red</span><span class=\"bp\">.</span><span class=\"n\">step</span><span class=\"bp\">.</span><span class=\"n\">append_right</span> <span class=\"n\">H1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">red</span><span class=\"bp\">.</span><span class=\"n\">append</span> <span class=\"n\">H2</span> <span class=\"n\">H3</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 125473597,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524268355
    }
]