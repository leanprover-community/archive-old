[
    {
        "content": "<p>What is the purpose of this file: <a href=\"https://github.com/leanprover/lean/blob/ceacfa7445953cbc8860ddabc55407430a9ca5c3/library/init/algebra/classes.lean\" target=\"_blank\" title=\"https://github.com/leanprover/lean/blob/ceacfa7445953cbc8860ddabc55407430a9ca5c3/library/init/algebra/classes.lean\">https://github.com/leanprover/lean/blob/ceacfa7445953cbc8860ddabc55407430a9ca5c3/library/init/algebra/classes.lean</a><br>\nIt is used almost nowhere as far as I can see. It seems to be a sort of start of an algebraic hierarchy that is even unbundlerred than the current one...</p>",
        "id": 161450168,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553263483
    },
    {
        "content": "<p>Yes, this is Leo starting a new hierarchy, but Mario wasn't convinced so he didn't use it</p>",
        "id": 161450232,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1553263542
    },
    {
        "content": "<p>I use it in <a href=\"https://github.com/PatrickMassot/bigop/blob/master/src/bigop.lean\" target=\"_blank\" title=\"https://github.com/PatrickMassot/bigop/blob/master/src/bigop.lean\">https://github.com/PatrickMassot/bigop/blob/master/src/bigop.lean</a></p>",
        "id": 161450299,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1553263576
    },
    {
        "content": "<p>But it leads to higher order unification problems that are not easy to handle</p>",
        "id": 161450323,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1553263605
    },
    {
        "content": "<p>And I should really be grading exams...</p>",
        "id": 161450359,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1553263619
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Are those problems documented somewhere?</p>",
        "id": 161450645,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553263818
    },
    {
        "content": "<p>Aaah, I just found: <a href=\"#narrow/stream/113488-general/topic/is_left_id.20rw.20mystery\" title=\"#narrow/stream/113488-general/topic/is_left_id.20rw.20mystery\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/is_left_id.20rw.20mystery</a></p>",
        "id": 161451044,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553264108
    },
    {
        "content": "<p>I have also found those classes useful for rewriting modulo associativity and commutativity</p>",
        "id": 161457565,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1553268480
    },
    {
        "content": "<p>It is not flexible enough to cover associativity of composition in category theory though</p>",
        "id": 161457668,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1553268513
    },
    {
        "content": "<p>I guess one could try to write smarter tactics to get around the higher order unification problem. If <code>smart_rw</code> sees that you want to rewrite using a lemma tagged with <code>algebra</code>, then it looks in the goal to find terms that are \"tagged\" with <code>binop</code> (I'm making this up right now) and will try to plug those terms into the right slot of the rw-lemma.</p>",
        "id": 161457982,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553268759
    },
    {
        "content": "<p>The issue is not when you use an associativity lemma to rewrite. The issue is when you have an expression like <code>f ≫ g ≫ h ≫ i</code> and a lemma that could rewrite <code>g ≫ h</code> into something else</p>",
        "id": 161459525,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1553269858
    },
    {
        "content": "<p>Like <code>is_left_id</code>?</p>",
        "id": 161459564,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553269893
    },
    {
        "content": "<p>No</p>",
        "id": 161459667,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1553269936
    },
    {
        "content": "<p>You need to rely on associativity but indirectly</p>",
        "id": 161459693,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1553269959
    },
    {
        "content": "<p>Ok, in the thread that I linked to above, Patrick was already having issues with <code>is_left_id</code></p>",
        "id": 161459722,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553269991
    },
    {
        "content": "<p>Ah ok, I didn't see that</p>",
        "id": 161459752,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1553270025
    }
]