[
    {
        "content": "<p>What \"things\" are <code>binders</code> <code>foldr</code> <code>scoped</code>. I can't do <code>#check</code> on any of them. Is <code>foldr</code> different to <code>list.foldr</code> - the usage looks different.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">notation</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"bp\">`</span> <span class=\"n\">l</span><span class=\"o\">:(</span><span class=\"n\">foldr</span> <span class=\"bp\">`</span><span class=\"o\">,</span> <span class=\"bp\">`</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">cons</span> <span class=\"n\">h</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">nil</span> <span class=\"bp\">`</span><span class=\"o\">]</span><span class=\"bp\">`</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">l</span>\n<span class=\"kn\">notation</span> <span class=\"bp\">`∃!`</span> <span class=\"n\">binders</span> <span class=\"bp\">`</span><span class=\"o\">,</span> <span class=\"bp\">`</span> <span class=\"n\">r</span><span class=\"o\">:(</span><span class=\"n\">scoped</span> <span class=\"n\">P</span><span class=\"o\">,</span> <span class=\"n\">exists_unique</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">r</span>\n</code></pre></div>",
        "id": 202167673,
        "sender_full_name": "Billy Price",
        "timestamp": 1593232963
    },
    {
        "content": "<p>they are all magic pieces of syntax of the <code>notation</code> command</p>",
        "id": 202167758,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593233105
    },
    {
        "content": "<p>They are just keywords for the <code>notation</code> command. They have no meaning in Lean.</p>",
        "id": 202167762,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1593233109
    },
    {
        "content": "<p>Even the <code>(h t, list.cons h t)</code> isn't what it looks like - it's really more like <code>(\\lam h t, list.cons h t)</code></p>",
        "id": 202167775,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593233144
    },
    {
        "content": "<p>I see some mentions in the Lean reference manual on binders, but not much for foldr or foldl - is there documentation for them?</p>\n<p>I am generally familiar with foldr and foldr, but it'd be nice to see docs on them.</p>",
        "id": 202167951,
        "sender_full_name": "Billy Price",
        "timestamp": 1593233404
    },
    {
        "content": "<p>Also scoped and binders</p>",
        "id": 202167954,
        "sender_full_name": "Billy Price",
        "timestamp": 1593233415
    },
    {
        "content": "<p>Actually I do understand what binders is, but not how it becomes related to the rest of the expression</p>",
        "id": 202167964,
        "sender_full_name": "Billy Price",
        "timestamp": 1593233458
    },
    {
        "content": "<p>It's pretty much entirely pro forma. I don't think there are many reusable subparts of the <code>notation</code> command, just those particular keywords in that order</p>",
        "id": 202177910,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593251658
    },
    {
        "content": "<p>I'm trying to add notation for a diffeomorphism between two normed spaces. Here is my code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">geometry.manifold.diffeomorph</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"bp\">𝕜</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">nondiscrete_normed_field</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span>\n<span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">normed_group</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n<span class=\"o\">{</span><span class=\"n\">E'</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">normed_group</span> <span class=\"n\">E'</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E'</span><span class=\"o\">]</span>\n<span class=\"o\">{</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">H</span><span class=\"o\">]</span>\n<span class=\"o\">{</span><span class=\"n\">H'</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">H'</span><span class=\"o\">]</span>\n<span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">model_with_corners</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">I'</span> <span class=\"o\">:</span> <span class=\"n\">model_with_corners</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E'</span> <span class=\"n\">H'</span><span class=\"o\">)</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">charted_space</span> <span class=\"n\">H</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">smooth_manifold_with_corners</span> <span class=\"n\">I</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n<span class=\"o\">(</span><span class=\"n\">M'</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">M'</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">charted_space</span> <span class=\"n\">H'</span> <span class=\"n\">M'</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">smooth_manifold_with_corners</span> <span class=\"n\">I'</span> <span class=\"n\">M'</span><span class=\"o\">]</span>\n<span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">with_top</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">times_diffeomorph</span>\n\n<span class=\"kd\">notation</span> <span class=\"n\">E</span> <span class=\"bp\">`</span> <span class=\"bp\">≃ₘ^`</span> <span class=\"n\">n</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"bp\">`</span> <span class=\"bp\">𝕜</span> <span class=\"bp\">`</span><span class=\"o\">]</span> <span class=\"bp\">`</span> <span class=\"n\">E'</span> <span class=\"o\">:=</span> <span class=\"n\">times_diffeomorph</span> <span class=\"o\">(</span><span class=\"n\">model_with_corners_self</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">model_with_corners_self</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E'</span><span class=\"o\">)</span> <span class=\"n\">E</span> <span class=\"n\">E'</span> <span class=\"n\">n</span>\n\n<span class=\"kn\">protected</span> <span class=\"kd\">lemma</span> <span class=\"n\">times_cont_diff</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">≃ₘ^</span><span class=\"n\">n</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">E'</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">times_cont_diff</span> <span class=\"bp\">𝕜</span> <span class=\"n\">n</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">times_diffeomorph</span>\n</code></pre></div>\n<p>Lean fails to parse the lemma. What am I doing wrong? Does Lean assume that <code>[</code> in the lemma is a part of <code>n</code>?</p>",
        "id": 228667982,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1614805478
    },
    {
        "content": "<p>I see that notation for <a href=\"https://leanprover-community.github.io/mathlib_docs/find/times_diffeomorph\">docs#times_diffeomorph</a> between two manifolds uses some fancy parentheses. Should I do the same?</p>",
        "id": 228668223,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1614805567
    },
    {
        "content": "<p>If yes, how do I disambiguate new and old notation? Here is the existing notation:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">localized</span> <span class=\"s2\">\"notation M ` ≃ₘ^ `n `⟮` I `,` J `⟯` N := times_diffeomorph I J M N n\"</span> <span class=\"k\">in</span> <span class=\"n\">manifold</span>\n<span class=\"n\">localized</span> <span class=\"s2\">\"notation M ` ≃ₘ⟮` I `,` J `⟯` N := times_diffeomorph I J M N ⊤\"</span> <span class=\"k\">in</span> <span class=\"n\">manifold</span>\n</code></pre></div>",
        "id": 228668318,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1614805605
    },
    {
        "content": "<p>UPD: this works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">notation</span> <span class=\"n\">E</span> <span class=\"bp\">`</span> <span class=\"bp\">≃ₘ^`</span> <span class=\"n\">n</span><span class=\"o\">:</span><span class=\"mi\">1000</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"bp\">𝕜</span> <span class=\"bp\">`</span><span class=\"o\">]</span> <span class=\"bp\">`</span> <span class=\"n\">E'</span> <span class=\"o\">:=</span> <span class=\"n\">times_diffeomorph</span> <span class=\"o\">(</span><span class=\"n\">model_with_corners_self</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">model_with_corners_self</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E'</span><span class=\"o\">)</span> <span class=\"n\">E</span> <span class=\"n\">E'</span> <span class=\"n\">n</span>\n</code></pre></div>",
        "id": 228668661,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1614805729
    },
    {
        "content": "<p>What are the policies about priorities? What should I use instead of 1000 and 50?</p>",
        "id": 228668722,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1614805754
    }
]