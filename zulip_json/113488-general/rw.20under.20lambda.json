[
    {
        "content": "<p><code>rw</code> refuses to perform rewrites inside a lambda, as far as I can tell. Is there a convenient way to do so?<br>\nFor example, frequently my goal is of the form <code>∃ x, P x ∧ Q x</code> and I would like to rewrite it to <code>∃ x, P x ∧ Q' x</code> (where I know <code>Q x ↔ Q' x</code>).</p>",
        "id": 126107890,
        "sender_full_name": "Reid Barton",
        "timestamp": 1525458800
    },
    {
        "content": "<p>use <code>simp</code> instead of <code>rw</code> if you want to rewrite under lambda. If you don't want <code>simp</code> to use default <code>simp</code> rules, you can do <code>simp only [my_rule]</code></p>",
        "id": 126107975,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1525458952
    },
    {
        "content": "<p>Oops, I tried <code>simp only</code>, but I mixed up <code>.symm</code> and <code>.mpr</code> so it didn't appear to work. Thanks!</p>",
        "id": 126108133,
        "sender_full_name": "Reid Barton",
        "timestamp": 1525459168
    },
    {
        "content": "<p>See also <a href=\"https://github.com/leanprover/mathlib/blob/master/docs/extras/conv.md\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/blob/master/docs/extras/conv.md\">https://github.com/leanprover/mathlib/blob/master/docs/extras/conv.md</a></p>",
        "id": 126109753,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1525461586
    },
    {
        "content": "<p>I couldn't work out how to do this with <code>conv</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">conv</span> <span class=\"k\">begin</span>\n    <span class=\"c1\">-- use rw add_comm somehow</span>\n  <span class=\"kn\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 126111096,
        "sender_full_name": "Reid Barton",
        "timestamp": 1525463956
    },
    {
        "content": "<p>I tried <code>congr, funext, congr</code> but I got an error that I didn't understand on the second <code>congr</code></p>",
        "id": 126111175,
        "sender_full_name": "Reid Barton",
        "timestamp": 1525464056
    },
    {
        "content": "<p>try:</p>\n<div class=\"codehilite\"><pre><span></span>example : (∃ a b, a + b = 0) ↔ ∃ a b, b + a = 0 :=\nby conv in (_ + _) begin\n  rw add_comm,\nend\n</pre></div>",
        "id": 126111358,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1525464333
    },
    {
        "content": "<p>ah, interesting</p>",
        "id": 126111674,
        "sender_full_name": "Reid Barton",
        "timestamp": 1525464795
    },
    {
        "content": "<p>This would also work, btw:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">conv</span> <span class=\"k\">in</span> <span class=\"o\">(</span><span class=\"bp\">_</span> <span class=\"bp\">+</span> <span class=\"bp\">_</span><span class=\"o\">)</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">add_comm</span> <span class=\"o\">},</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 126112393,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1525465904
    },
    {
        "content": "<p><code>conv in ( _ = _)</code> would also work, but I would be interested in seeing a solution without pattern matching. It seems we lack some navigation tactic (like <code>to_lhs</code>/<code>to_rhs</code>,  <code>congr</code>). <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span>  <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> any idea?</p>",
        "id": 126115523,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1525470492
    }
]