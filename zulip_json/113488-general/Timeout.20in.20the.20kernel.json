[
    {
        "content": "<p>I'm getting a timeout error in <a href=\"https://github.com/leanprover-community/mathlib/pull/14894\">#14894</a> which from the profiler output appears to be thrown in the kernel typechecking stage, after elaboration finishes relatively quickly (less than half a second). Any tips on fixing a timeout in the kernel like this?</p>",
        "id": 289294804,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1657615858
    },
    {
        "content": "<p>As far as I can tell, there is no heavy refl going on: if I replace the <code>show</code> with a <code>rw</code>, the same symptoms occur.</p>",
        "id": 289294938,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1657615953
    },
    {
        "content": "<p>I've got a debug build in GDB, the timeout really comes from a kernel defeq check about 150 calls down the stack, so it's definitely the kernel going down some weird path here. Also something I learned today: apparently kernel checking starts with a fresh heartbeat counter since it's in a new thread.</p>",
        "id": 289295757,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1657616549
    },
    {
        "content": "<p>By the way, after merging (in particular after <a href=\"https://github.com/leanprover-community/mathlib/pull/15251\">#15251</a>) the timeout doesn't appear in the build but it's still there in my editor.</p>",
        "id": 289304287,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1657621932
    },
    {
        "content": "<p>I'm just going to go ahead and split the lemma into two parts since it's already dangerously close to timing out on master.</p>",
        "id": 289305631,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1657622910
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span> in your GitHub commit message regarding this you make claims of the form \"this used to take 90k heartbeats, now it only takes 60k\". How are you measuring this?</p>",
        "id": 289829491,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1657979848
    },
    {
        "content": "<p>I used a low-tech way: write <code>set_option profiler true</code> before the declaration and <code>#exit</code> after, then run the command <code>lean -T${N} ${FILE}</code> (where <code>${N}</code> is the number of heartbeats and <code>${FILE}</code> the file containing the declaration). When a timeout error pops up, if the profiler output mentions \"decl post-processing\" then the timeout is probably in the kernel. Then use binary search on <code>${N}</code> to determine the approximate value for which the timeout occurs.</p>",
        "id": 289837953,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1657992034
    },
    {
        "content": "<p>Here's one more presumable example of timeout in the kernel; if the final <code>sorry</code> is there, it shows \"goals accomplished\", but once <code>sorry</code> is removed it timeouts.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">category_theory.products.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory.functor.currying</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory.products.associator</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory.category.Cat</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">u‚ÇÅ</span> <span class=\"n\">u‚ÇÇ</span> <span class=\"n\">u‚ÇÉ</span> <span class=\"n\">v‚ÇÅ</span> <span class=\"n\">v‚ÇÇ</span> <span class=\"n\">v‚ÇÉ</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u‚ÇÅ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">category.</span><span class=\"o\">{</span><span class=\"n\">v‚ÇÅ</span><span class=\"o\">}</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n          <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u‚ÇÇ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">category.</span><span class=\"o\">{</span><span class=\"n\">v‚ÇÇ</span><span class=\"o\">}</span> <span class=\"n\">B</span><span class=\"o\">]</span>\n          <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u‚ÇÉ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">category.</span><span class=\"o\">{</span><span class=\"n\">v‚ÇÉ</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">prod_functor_to_functor_prod</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">‚•§</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">√ó</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">‚•§</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"bp\">‚•§</span> <span class=\"n\">A</span> <span class=\"bp\">‚•§</span> <span class=\"n\">B</span> <span class=\"bp\">√ó</span> <span class=\"n\">C</span> <span class=\"o\">:=</span>\n<span class=\"n\">curry_obj</span> <span class=\"bp\">$</span> <span class=\"n\">functor.prod'</span>\n  <span class=\"o\">(</span><span class=\"n\">uncurry.obj</span> <span class=\"bp\">$</span> <span class=\"n\">category_theory.prod.fst</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">uncurry.obj</span> <span class=\"bp\">$</span> <span class=\"n\">category_theory.prod.snd</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">functor_prod_to_prod_functor</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">‚•§</span> <span class=\"n\">B</span> <span class=\"bp\">√ó</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"bp\">‚•§</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">‚•§</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">√ó</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">‚•§</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">functor.prod'</span>\n  <span class=\"o\">(</span><span class=\"n\">curry_obj</span> <span class=\"bp\">$</span> <span class=\"n\">uncurry.obj</span> <span class=\"o\">(</span><span class=\"mi\">ùü≠</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">‚ãô</span> <span class=\"n\">category_theory.prod.fst</span> <span class=\"n\">B</span> <span class=\"n\">C</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">curry_obj</span> <span class=\"bp\">$</span> <span class=\"n\">uncurry.obj</span> <span class=\"o\">(</span><span class=\"mi\">ùü≠</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">‚ãô</span> <span class=\"n\">category_theory.prod.snd</span> <span class=\"n\">B</span> <span class=\"n\">C</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">eq_to_hom_fst</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">√ó</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">prod.fst</span> <span class=\"o\">(</span><span class=\"n\">eq_to_hom</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">eq_to_hom</span> <span class=\"o\">(</span><span class=\"n\">congr_arg</span> <span class=\"n\">prod.fst</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">eq_to_hom_map</span> <span class=\"o\">(</span><span class=\"n\">category_theory.prod.fst</span> <span class=\"n\">B</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">eq_to_hom_snd</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">√ó</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">prod.snd</span> <span class=\"o\">(</span><span class=\"n\">eq_to_hom</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">eq_to_hom</span> <span class=\"o\">(</span><span class=\"n\">congr_arg</span> <span class=\"n\">prod.snd</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">eq_to_hom_map</span> <span class=\"o\">(</span><span class=\"n\">category_theory.prod.snd</span> <span class=\"n\">B</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">hom_inv_id'</span> <span class=\"o\">:</span> <span class=\"n\">prod_functor_to_functor_prod</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"bp\">‚ãô</span> <span class=\"n\">functor_prod_to_prod_functor</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"bp\">=</span> <span class=\"mi\">ùü≠</span> <span class=\"n\">_</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">prod_functor_to_functor_prod</span><span class=\"o\">,</span> <span class=\"n\">functor_prod_to_prod_functor</span><span class=\"o\">,</span> <span class=\"n\">curry_obj</span><span class=\"o\">,</span> <span class=\"n\">uncurry</span><span class=\"o\">],</span>\n  <span class=\"n\">apply</span> <span class=\"n\">category_theory.functor.ext</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span><span class=\"o\">,</span> <span class=\"n\">ext</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"o\">‚ü®‚ü®</span><span class=\"n\">_</span><span class=\"o\">‚ü©,</span> <span class=\"o\">‚ü®</span><span class=\"n\">_</span><span class=\"o\">‚ü©‚ü©,</span> <span class=\"n\">simp</span> <span class=\"o\">},</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span> <span class=\"c1\">-- elaboration of hom_inv_id' took 5.29s</span>\n  <span class=\"c1\">-- remove sorry: timeout (more than one minute)</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 289868232,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1658040174
    }
]