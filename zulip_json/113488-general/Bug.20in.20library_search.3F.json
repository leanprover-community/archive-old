[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">punit</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">library_search</span> <span class=\"c1\">-- Try this: refine punit.rec a</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">punit</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">refine</span> <span class=\"n\">punit.rec</span> <span class=\"n\">a</span>\n  <span class=\"c1\">-- type mismatch at application `punit.rec a` term `a` has type `α : Type` but is expected to have type `?m_1 punit.star : Sort ?`</span>\n</code></pre></div>",
        "id": 225436736,
        "sender_full_name": "Yevhenii Diomidov",
        "timestamp": 1612656835
    },
    {
        "content": "<p>more like a bug in pretty printing; lean has an issue with printing terms that don't re-parse at the same level of explicitness</p>",
        "id": 225437038,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612657353
    },
    {
        "content": "<p>Some more examples:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">punit</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">punit.rec</span> <span class=\"n\">a</span> <span class=\"c1\">-- same error as above</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">punit</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">refine</span> <span class=\"n\">punit.rec</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"c1\">-- works</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">punit</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">punit.rec</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"c1\">-- also works</span>\n</code></pre></div>",
        "id": 225437094,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1612657455
    },
    {
        "content": "<p>this isn't likely to be fixed in lean 3; lean 4 has a proper support for this through a \"delaborator\" that can add only just enough implicit information to parse correctly</p>",
        "id": 225437097,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612657463
    },
    {
        "content": "<p>when writing terms manually, the suggested fix is <code>\\lam x, punit.rec a x</code></p>",
        "id": 225437154,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612657566
    }
]