[
    {
        "content": "<p>A friend pointed out to me that one of these three proofs doesn't work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"bp\">+</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"mi\">0</span><span class=\"bp\">+</span><span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"n\">congr_arg</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">t</span><span class=\"bp\">+</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"n\">congr_arg</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">+</span><span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"bp\">+</span><span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"n\">congr_arg</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"bp\">+</span><span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"n\">h</span>\n</code></pre></div>\n<p>Can you guess which without using Lean? I cannot figure out what is going on from the error message in the one which fails.</p>",
        "id": 230098295,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1615583523
    },
    {
        "content": "<p>My bet (haven't checked) is that the second one fails, with the error that <code>h</code> does not have the type <code>2*b = 2*0</code></p>",
        "id": 230100440,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615584485
    },
    {
        "content": "<p>A fun fact is that the error goes away when I replace <code>congr_arg</code> with <code>@congr_arg _ _ _ _</code>.</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>It's the one that uses <code>λ</code> rather than <code>fun</code>.</p>\n</div></div>",
        "id": 230101225,
        "sender_full_name": "Mathieu Guay-Paquet",
        "timestamp": 1615584788
    },
    {
        "content": "<p>another fun fact is that the error goes away if you use <code>(congr_arg (λ t, a+2*t) h : _)</code>. (assuming my guess is correct)</p>",
        "id": 230101397,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615584855
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>  you have (one of?) the right error, but your fun fact seems false</p>",
        "id": 230102096,
        "sender_full_name": "Mathieu Guay-Paquet",
        "timestamp": 1615585142
    },
    {
        "content": "<p>Oh no wait it's true, I entered it wrong</p>",
        "id": 230102154,
        "sender_full_name": "Mathieu Guay-Paquet",
        "timestamp": 1615585171
    },
    {
        "content": "<p>I didn't think lean would be able to report both errors here, usually it only gets one per application</p>",
        "id": 230102265,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615585212
    },
    {
        "content": "<p>I see 2 errors in the infoview, but they're under different headings, so you're probably still right</p>",
        "id": 230102440,
        "sender_full_name": "Mathieu Guay-Paquet",
        "timestamp": 1615585309
    },
    {
        "content": "<p>anyway, what's happening is that since <code>congr_arg</code> has no special elaborator markings on it, and it has the type <code>f x = f y</code>, lean tries to match this pattern against the goal which is <code>add a (2*b) = add a (2*0)</code>, and decides that <code>f := add a</code> and <code>x := 2*b</code>, <code>y := 2*0</code>. This eventually leads to a failure, and the resulting errors. With the <code>: _</code> trick, it has no expected type to match against so it leaves <code>f,x,y</code> as unbound, and eventually uses <code>h</code> and the provided lambda to produce the right answer. The target type becomes <code>(λ t, a+2*t) b = (λ t, a+2*t) 0</code> at this point, and this is then unified against <code>a+2*b = a+2*0</code>, which succeeds</p>",
        "id": 230102802,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615585473
    },
    {
        "content": "<p>In the first example, the application heuristic fails, because <code>add (2*b) a = add (2*0) a</code> does not have the form <code>f x = f y</code> (since <code>add (2*b)</code> is not defeq to <code>add (2*0)</code>), so it falls back on checking the type as in the <code>: _</code> version, which works</p>",
        "id": 230103024,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615585582
    },
    {
        "content": "<p>In the third example, it uses the application heuristic, leading to <code>f := add a</code> and <code>x := b</code>, <code>y := 0</code>, but this time it works, because <code>(fun t, a+t)</code> is defeq to <code>add a</code> and <code>h</code> actually does have the type <code>b = 0</code></p>",
        "id": 230103116,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615585629
    }
]