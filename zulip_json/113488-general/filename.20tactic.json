[
    {
        "content": "<p>Is there a tactic (or way to write a tactic) which returns the filename (and line/col number would be better) of the file it is being run in?  I want the file to be the entry point file with the <code>begin ... end</code> block or <code>by</code> block.  This might be too much to ask for, but it doesn't hurt to ask.</p>",
        "id": 194573534,
        "sender_full_name": "Jason Rute",
        "timestamp": 1587260918
    },
    {
        "content": "<p>If that is not possible or even if it is: Is there a way to label traces with the filename (when being run from the command line).  The error messages are labeled with the file name, e.g.:</p>\n<div class=\"codehilite\"><pre><span></span>/tmp/tmp_lean_project/src/test.lean:3:0: error: tactic failed, there are unsolved goals\nstate:\n‚ä¢ true\n</pre></div>\n\n\n<p>Can one do the same for traces?</p>",
        "id": 194573737,
        "sender_full_name": "Jason Rute",
        "timestamp": 1587261315
    },
    {
        "content": "<p>Have a look at <code>env.decl_olean decl_name</code>.</p>",
        "id": 194575131,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1587264024
    },
    {
        "content": "<p>That requires that you know a declaration made in the current file. Hopefully there is something better.</p>",
        "id": 194575135,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1587264046
    },
    {
        "content": "<p>Actually, read the linters, they must do this.</p>",
        "id": 194575137,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1587264061
    },
    {
        "content": "<p>But it doesn't return anything for declarations in the current file.</p>",
        "id": 194575142,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587264078
    },
    {
        "content": "<p>Seems so, it only uses <code>env.decl_olean</code>.</p>",
        "id": 194575155,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1587264111
    },
    {
        "content": "<p>I mean, as a terrible hack you can synthesize a new declaration, then use <code>decl_olean</code> to find the file it was defined in... <span aria-label=\"nauseated\" class=\"emoji emoji-1f922\" role=\"img\" title=\"nauseated\">:nauseated:</span></p>",
        "id": 194575201,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1587264223
    },
    {
        "content": "<p>I thought about trying to generate a warning, since those are also labelled with the position, but I couldn't figure out a way to make it happen. If you were at top level, it would be doable.</p>",
        "id": 194575256,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587264267
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113488-general/topic/filename.20tactic/near/194575201\" title=\"#narrow/stream/113488-general/topic/filename.20tactic/near/194575201\">said</a>:</p>\n<blockquote>\n<p>I mean, as a terrible hack you can synthesize a new declaration, then use <code>decl_olean</code> to find the file it was defined in... <span aria-label=\"nauseated\" class=\"emoji emoji-1f922\" role=\"img\" title=\"nauseated\">:nauseated:</span></p>\n</blockquote>\n<p>I tried this and it doesn't work because there is no location information for declarations in the current file (the name <code>decl_olean</code> is a hint)</p>",
        "id": 194575274,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587264305
    },
    {
        "content": "<p>Ah!</p>",
        "id": 194575277,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1587264321
    },
    {
        "content": "<p>though I don't see why Lean couldn't provide it in principle</p>",
        "id": 194575279,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587264324
    },
    {
        "content": "<p><code>decl_pos</code> also returns nothing</p>",
        "id": 194575283,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587264333
    },
    {
        "content": "<p>What does \"top level\" mean here?  Outside of any definition, theorem, etc?</p>",
        "id": 194575322,
        "sender_full_name": "Jason Rute",
        "timestamp": 1587264368
    },
    {
        "content": "<p>Yes, where you could put a top-level command</p>",
        "id": 194575327,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587264397
    },
    {
        "content": "<p>For example, <code>#eval false</code></p>",
        "id": 194575387,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587264525
    },
    {
        "content": "<p>Hmm, thinking outside the box, if you're willing to interact with Lean through the server interface, you could obtain location information that way</p>",
        "id": 194575505,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587264831
    },
    {
        "content": "<p>It can be as simple as feeding Lean the whole file as a batch</p>",
        "id": 194575542,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587264844
    },
    {
        "content": "<p>then use a tactic which invokes <code>trace</code></p>",
        "id": 194575547,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587264861
    },
    {
        "content": "<p>Our editors know where to put the trace, so it must be in the server output</p>",
        "id": 194575568,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587264883
    },
    {
        "content": "<p>Yeah, what I'm working on now isn't using the server.  Worse case, I can run each file individually.</p>",
        "id": 194575582,
        "sender_full_name": "Jason Rute",
        "timestamp": 1587264946
    },
    {
        "content": "<p>Are you using <code>lean --make</code>?</p>",
        "id": 194575631,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587265032
    },
    {
        "content": "<p>I don't know whether it is compatible with <code>--server</code></p>",
        "id": 194575633,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587265042
    },
    {
        "content": "<p>Probably <code>lean filename</code> or  <code>lean --make filename</code>.</p>",
        "id": 194575741,
        "sender_full_name": "Jason Rute",
        "timestamp": 1587265280
    },
    {
        "content": "<p>Curious, how do you add warnings at the top level?</p>",
        "id": 194575743,
        "sender_full_name": "Jason Rute",
        "timestamp": 1587265297
    },
    {
        "content": "<p><code>#eval false</code> was an example. I'm not sure if you can avoid the extraneous output.</p>",
        "id": 194575878,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587265487
    },
    {
        "content": "<p>you can use <code>lean --run</code> to read a lean file and put <code>#eval main</code> at the bottom</p>",
        "id": 194575933,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587265569
    }
]