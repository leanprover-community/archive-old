[
    {
        "content": "<p>I could not minimize this error.</p>",
        "id": 127342120,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527735947
    },
    {
        "content": "<p><a href=\"https://gist.github.com/kckennylau/a62295136d2daf48146f6fcdb8e37a49\" target=\"_blank\" title=\"https://gist.github.com/kckennylau/a62295136d2daf48146f6fcdb8e37a49\">https://gist.github.com/kckennylau/a62295136d2daf48146f6fcdb8e37a49</a></p>",
        "id": 127342121,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527735948
    },
    {
        "content": "<p>error:</p>",
        "id": 127342122,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527735951
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">field</span> <span class=\"err\">&#39;</span><span class=\"n\">right_inv&#39;</span>\n  <span class=\"err\">?</span><span class=\"n\">m_1</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">right_inverse</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"n\">alg_hom</span> <span class=\"o\">(</span><span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"n\">φ</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"o\">(</span><span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single</span> <span class=\"mi\">1</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">),</span>\n       <span class=\"bp\">⟨λ</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">),</span>\n          <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">f</span> <span class=\"n\">A</span> <span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">c</span> <span class=\"o\">(</span><span class=\"n\">monoid</span><span class=\"bp\">.</span><span class=\"n\">pow</span> <span class=\"n\">r</span> <span class=\"n\">n</span><span class=\"o\">)),</span>\n        <span class=\"bp\">_⟩</span><span class=\"o\">)</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">right_inverse</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"n\">alg_hom</span> <span class=\"o\">(</span><span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"n\">φ</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"o\">(</span><span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single</span> <span class=\"mi\">1</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"bp\">⟨λ</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"n\">c</span> <span class=\"err\">•</span> <span class=\"n\">r</span> <span class=\"err\">^</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"bp\">_⟩</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 127342123,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527735955
    },
    {
        "content": "<p>where <code>?m_1</code> was a literal underscore</p>",
        "id": 127342164,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527735967
    },
    {
        "content": "<p>that's it folks, an underscore has a type error</p>",
        "id": 127342165,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527735973
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span></p>",
        "id": 127342171,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527735990
    },
    {
        "content": "<p>I think we've seen this happen before</p>",
        "id": 127344095,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527739996
    },
    {
        "content": "<p>were you making a big structure and doing crazy stuff like sorrying out constants?</p>",
        "id": 127344099,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527740038
    },
    {
        "content": "<p>I find these sorts of things a bit annoying to do for reasons like this</p>",
        "id": 127344193,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527740168
    }
]