[
    {
        "content": "<p>I feel like <code>rsuffices</code> is misnamed. It's not a recursive <code>suffices</code>. What would alternative names be, before <a href=\"https://github.com/leanprover-community/mathlib/pull/16159\">#16159</a> lands and makes renaming painful?</p>",
        "id": 294353670,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1660939171
    },
    {
        "content": "<p>I like the name <code>rsuffices</code> since its intuitive if you know what the other <code>r</code>-version of tactics do</p>",
        "id": 294354227,
        "sender_full_name": "Jason KY.",
        "timestamp": 1660939373
    },
    {
        "content": "<p>The game here is \"<code>obtain</code> is to <code>have</code> as ____ is to <code>suffices</code>\", right?</p>",
        "id": 294370461,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1660947287
    },
    {
        "content": "<p>Which makes <code>rsuffices</code> look like a bad name because we're not using similar syntax to <code>rcases</code></p>",
        "id": 294370865,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1660947578
    },
    {
        "content": "<p>for the record, <a href=\"https://github.com/leanprover-community/mathlib/pull/15735\">#15735</a> was quite a fan of the name. I originally named it as <code>suffices'</code>.</p>",
        "id": 294370954,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1660947631
    },
    {
        "content": "<p>one thing to note about <code>rsuffices</code> and that may be worth fixing is that:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rsuffices</span> <span class=\"o\">(</span><span class=\"n\">ha</span><span class=\"bp\">|</span><span class=\"n\">hb</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">,</span>\n<span class=\"o\">{</span> <span class=\"o\">{</span> <span class=\"n\">stuff_for_p</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">stuff_for_q</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n<span class=\"o\">{</span> <span class=\"n\">rest</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>is invalid syntax, and instead you have to skip the outer grouping bracket. I don't know how much of an issue this is.</p>",
        "id": 294371088,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1660947741
    },
    {
        "content": "<p>I actually expect that behavior. It's quite nice.</p>",
        "id": 294371115,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1660947771
    },
    {
        "content": "<p>Maybe it's actually <code>obtain</code> that is badly named and it should be called <code>rhave</code>.</p>",
        "id": 294371197,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1660947838
    },
    {
        "content": "<p>in some ways I feel like <code>obtain</code> should be called <code>have</code></p>",
        "id": 294371275,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1660947860
    },
    {
        "content": "<p><a href=\"#narrow/stream/113488-general/topic/rsuffices.3F/near/281623150\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/rsuffices.3F/near/281623150</a> <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 294371284,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1660947868
    },
    {
        "content": "<p>I mean, yeah. In an ideal world we wouldn't have <code>have</code>/<code>haveI</code>/<code>obtain</code> (and no <code>obtainI</code>?!), <code>cases</code>/<code>casesI</code>/<code>rcases</code>, <code>intro</code>/<code>intros</code>/<code>rintro</code>/<code>rintros</code>/<code>introsI</code>, but just one of each family.</p>",
        "id": 294371397,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1660947957
    },
    {
        "content": "<p>you forgot <code>introsI</code> L) I was going to add <code>obtainI/rcasesI</code> as it's useful for <a href=\"https://leanprover-community.github.io/mathlib_docs/find/eq_zero_or_ne_zero\">docs#eq_zero_or_ne_zero</a>, but I agree it's a bit of a farce we need all this</p>",
        "id": 294371484,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1660948013
    },
    {
        "content": "<p>The I versions are a necessary evil to avoid performance issues I believe</p>",
        "id": 294371531,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1660948051
    },
    {
        "content": "<p>That's still 2x blowup on the number of tactics <span aria-label=\"frown\" class=\"emoji emoji-1f641\" role=\"img\" title=\"frown\">:frown:</span></p>",
        "id": 294371555,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1660948074
    },
    {
        "content": "<p>it'll be gone in lean4!</p>",
        "id": 294371603,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1660948087
    },
    {
        "content": "<p>Although I guess they could just unfreeze the cache if trying to intro without unfreezing fails</p>",
        "id": 294371614,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1660948096
    },
    {
        "content": "<p>They could use a flag, like <code>!</code>, for resetting the instance cache. (So <code>have!</code> or <code>intros!</code>)</p>",
        "id": 294372384,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1660948613
    },
    {
        "content": "<p>there is some kind of precedent for this: i believe LTE uses a zero-width space for <code>by exactI</code></p>",
        "id": 294372449,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1660948677
    },
    {
        "content": "<p>yep: <a href=\"https://github.com/leanprover-community/lean-liquid/blob/master/src/hacks_and_tricks/by_exactI_hack.lean\">https://github.com/leanprover-community/lean-liquid/blob/master/src/hacks_and_tricks/by_exactI_hack.lean</a></p>",
        "id": 294372521,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1660948714
    },
    {
        "content": "<p>Sometimes I've wondered what it would be like if we had a more systematic approach to flags, perhaps <code>intros/I</code> for the <code>/I</code> flag, rather than needing to come up with some symbol for each one. The thought experiment is \"if the syntax were solved, would we use more flags?\"</p>",
        "id": 294372549,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1660948740
    },
    {
        "content": "<p>You'd write <code>tactic/a/b/c</code> to apply multiple flags. One precedent is MS-DOS switches, and another is an odd language called Rebol that has \"refinements\" for a similar purpose to give function variants.</p>",
        "id": 294372600,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1660948773
    },
    {
        "content": "<p><code>intros x y z { unfreeze := tt }</code> feels like our standard syntax for flags</p>",
        "id": 294399959,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1660977959
    },
    {
        "content": "<p>Of course, that's longer than <code>unfreezingI { intros x y z }</code></p>",
        "id": 294400013,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1660977988
    },
    {
        "content": "<p>You can almost always replace <code>tacticI</code> with <code>resetI, tactic</code> or <code>tactic, resetI</code> or <code>unfreezingI { tactic }</code> which is why I didn't make copies of all tactics to begin with, only the common ones</p>",
        "id": 294402897,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1660980233
    }
]