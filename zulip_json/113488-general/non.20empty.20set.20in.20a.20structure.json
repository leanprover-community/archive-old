[
    {
        "content": "<p>An interpretation in description logics should have a domain as a non-empty set and mappings from atomic symbols to subsets of the domain or subset of the cartesian product of the domain.  Using</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Interpretation</span> <span class=\"o\">(</span><span class=\"n\">AtomicConcept</span> <span class=\"n\">AtomicRole</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">mk</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">δ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"n\">atom_C</span> <span class=\"o\">:</span> <span class=\"n\">AtomicConcept</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">δ</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"n\">atom_R</span> <span class=\"o\">:</span> <span class=\"n\">AtomicRole</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">δ</span> <span class=\"bp\">×</span> <span class=\"n\">δ</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>is not enough, how to make the domain an explicit nonempty set of <code>set δ</code>? The <code>nonempty δ</code> is a proposition, not a type constructor like <code>set</code>...</p>",
        "id": 226733027,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1613599284
    },
    {
        "content": "<p>Are you saying that every concept is a nonempty set?</p>",
        "id": 226734022,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613599545
    },
    {
        "content": "<p>Or only that the universe delta is nonempty</p>",
        "id": 226734061,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613599557
    },
    {
        "content": "<p>if the latter, you just need a field <code>(nonemp : nonempty δ)</code> in the structure</p>",
        "id": 226734201,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613599589
    },
    {
        "content": "<p>I see. Now to create a concrete interpretation, I have to provide a proof that NAT is non-empty. With the help of <code>show_term</code> and using <code>norm_num</code> in:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"n\">Interpretation.mk</span> <span class=\"n\">ℕ</span> <span class=\"kd\">begin</span> <span class=\"n\">show_term</span> <span class=\"o\">{</span> <span class=\"n\">norm_num</span><span class=\"o\">,</span> <span class=\"o\">}</span> <span class=\"kd\">end</span> <span class=\"n\">ic</span> <span class=\"n\">ir</span>\n</code></pre></div>\n<p>I got a quite unexpected complicated term <code>(id (propext (λ {α : Type} [_inst_1 : inhabited α], iff_true_intro nonempty_of_inhabited))).mpr</code>. Is that the simplest form to proof that NAT is nonempty?</p>",
        "id": 226744227,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1613604832
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 226744949,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1613605277
    },
    {
        "content": "<p>you misspelt 37</p>",
        "id": 226745499,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613605611
    },
    {
        "content": "<p>MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Interpretation</span> <span class=\"o\">(</span><span class=\"n\">AtomicConcept</span> <span class=\"n\">AtomicRole</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">δ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">nonemp</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"n\">δ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">atom_C</span> <span class=\"o\">:</span> <span class=\"n\">AtomicConcept</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">δ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">atom_R</span> <span class=\"o\">:</span> <span class=\"n\">AtomicRole</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">δ</span> <span class=\"bp\">×</span> <span class=\"n\">δ</span><span class=\"o\">))</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">def</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">def</span> <span class=\"n\">ic</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">def</span> <span class=\"n\">ir</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">def</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Interpretation</span> <span class=\"n\">C</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">⟩,</span> <span class=\"n\">ic</span><span class=\"o\">,</span> <span class=\"n\">ir</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 226746146,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613606033
    },
    {
        "content": "<p>BTW it's generally not recommended to make single letter definitions like this, because they tend to overlap with local variables which leads to confusion</p>",
        "id": 226746246,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613606086
    },
    {
        "content": "<p>Since <code>nonempty</code> is a typeclass, you can put it in square brackets and then lean will go find the proof that nat is nonempty for you</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Interpretation</span> <span class=\"o\">(</span><span class=\"n\">AtomicConcept</span> <span class=\"n\">AtomicRole</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">δ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"n\">nonemp</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"n\">δ</span><span class=\"o\">]</span>\n<span class=\"o\">(</span><span class=\"n\">atom_C</span> <span class=\"o\">:</span> <span class=\"n\">AtomicConcept</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">δ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">atom_R</span> <span class=\"o\">:</span> <span class=\"n\">AtomicRole</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">δ</span> <span class=\"bp\">×</span> <span class=\"n\">δ</span><span class=\"o\">))</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">def</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">def</span> <span class=\"n\">ic</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">def</span> <span class=\"n\">ir</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">def</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Interpretation</span> <span class=\"n\">C</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">ic</span><span class=\"o\">,</span> <span class=\"n\">ir</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 226746394,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613606192
    },
    {
        "content": "<p>Sorry, I didn't understand the joke about 37!</p>",
        "id": 226756343,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1613614181
    },
    {
        "content": "<p>Thank you <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>, I was able to complete the proof. But my first option failed with a mysterious error in the line <a href=\"https://github.com/arademaker/alc-lean/blob/master/src/alc.lean#L224\">https://github.com/arademaker/alc-lean/blob/master/src/alc.lean#L224</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"kd\">class</span> <span class=\"kd\">instance</span> <span class=\"n\">for</span>\n<span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">,</span>\n<span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">Concept</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n<span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Interpretation</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">univ</span> <span class=\"bp\">=</span> <span class=\"bp\">∅</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">nonempty</span> <span class=\"n\">i.δ</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">,</span>\n<span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">Concept</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n<span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Interpretation</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">univ</span> <span class=\"bp\">=</span> <span class=\"bp\">∅</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">false</span>\n</code></pre></div>\n<p>Line <a href=\"https://github.com/arademaker/alc-lean/blob/master/src/alc.lean#L227\">https://github.com/arademaker/alc-lean/blob/master/src/alc.lean#L227</a> is fine but not explicit.  Lines <a href=\"https://github.com/arademaker/alc-lean/blob/master/src/alc.lean#L233-L235\">https://github.com/arademaker/alc-lean/blob/master/src/alc.lean#L233-L235</a> may be too explicit. I suspect the necessity of passing the implicit arguments in <a href=\"https://github.com/arademaker/alc-lean/blob/master/src/alc.lean#L230\">https://github.com/arademaker/alc-lean/blob/master/src/alc.lean#L230</a> has something to do with the error in line 224.</p>",
        "id": 226757044,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1613614992
    },
    {
        "content": "<p>For data, make sure you use <code>let</code> or <code>set</code>. <code>have i : Interpretation a b := ...</code> throws the actual data away</p>",
        "id": 226757166,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1613615150
    },
    {
        "content": "<p>Wow!! I didn't know that!! Thank you <span class=\"user-mention\" data-user-id=\"308899\">@Yakov Pechersky</span>! Where should I have read about it?</p>",
        "id": 226757321,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1613615317
    },
    {
        "content": "<p>I don't think the tactic documentation says this explicitly. But <code>have</code> is for Prop and <code>let / set</code> is for things with data content. In your case, you have the structure (data) that you made, and you're trying to get the <code>nonempty</code> record of it.</p>",
        "id": 226757406,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1613615438
    },
    {
        "content": "<p>yes yes! I thought that <code>let</code> and <code>have</code> would have the same behavior! Thank you very much. now all my alternatives make much more sense.</p>",
        "id": 226757528,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1613615594
    }
]