[
    {
        "content": "<p>Here's a minimised version of what is holding up <a href=\"https://github.com/leanprover-community/mathlib/issues/3716\">#3716</a>. Is this a bug in <code>simp</code> or expected behaviour?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">! # foo -/</span>\n\n<span class=\"n\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">option</span> <span class=\"n\">α</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">has_coe</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">some</span><span class=\"bp\">⟩</span>\n\n<span class=\"n\">def</span> <span class=\"n\">foo</span><span class=\"bp\">.</span><span class=\"n\">mul</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">foo</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">foo</span> <span class=\"bp\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"n\">some</span> <span class=\"mi\">37</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_mul</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">foo</span><span class=\"bp\">.</span><span class=\"n\">mul</span><span class=\"bp\">⟩</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">foo</span><span class=\"bp\">.</span><span class=\"n\">coe_mul</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">! # bar -/</span>\n\n<span class=\"n\">def</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">option</span> <span class=\"n\">α</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">has_coe</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">bar</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">some</span><span class=\"bp\">⟩</span>\n\n<span class=\"n\">def</span> <span class=\"n\">bar</span><span class=\"bp\">.</span><span class=\"n\">mul</span> <span class=\"o\">:</span> <span class=\"n\">bar</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">bar</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">bar</span> <span class=\"bp\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"n\">some</span> <span class=\"mi\">37</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_mul</span> <span class=\"o\">(</span><span class=\"n\">bar</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">bar</span><span class=\"bp\">.</span><span class=\"n\">mul</span><span class=\"bp\">⟩</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">bar</span><span class=\"bp\">.</span><span class=\"n\">coe_mul</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">bar</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"bp\">#</span><span class=\"n\">lint</span> <span class=\"n\">only</span> <span class=\"n\">simp_nf</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> Checking 10 declarations (plus 22 automatically generated ones) in the current file -/</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> The `simp_nf` linter reports: -/</span>\n<span class=\"c\">/-</span><span class=\"cm\"> SOME SIMP LEMMAS ARE NOT IN SIMP-NORMAL FORM.</span>\n<span class=\"cm\">see note [simp-normal form] for tips how to debug this.</span>\n<span class=\"cm\">https://leanprover-community.github.io/mathlib_docs/notes.html#simp-normal%20form</span>\n<span class=\"cm\">: -/</span>\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">foo</span><span class=\"bp\">.</span><span class=\"n\">coe_mul</span> <span class=\"c\">/-</span><span class=\"cm\"> Left-hand side simplifies from</span>\n<span class=\"cm\">  ↑(a * b)</span>\n<span class=\"cm\">to</span>\n<span class=\"cm\">  ↑a * ↑b</span>\n<span class=\"cm\">using</span>\n<span class=\"cm\">  [bar.coe_mul]</span>\n<span class=\"cm\">Try to change the left-hand side to the simplified term!</span>\n<span class=\"cm\"> -/</span>\n</code></pre></div>\n\n\n<p>The linter is complaining that <code>simp</code> can make progress with<code>foo.coe_mul</code> using <code>bar.coe_mul</code> which is a counterintuitive way around but this is perhaps not the issue. The issue is that instead of proving <code>bar.coe_mul</code> by <code>rfl</code> one tries <code>simp</code> then one gets into what I would claim was some sort of a corrupted state:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">bar</span><span class=\"bp\">.</span><span class=\"n\">coe_mul</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">bar</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- ⊢ ↑a * ↑b = ↑a * ↑b</span>\n  <span class=\"c1\">-- This is @eq (bar ℕ) (_ : foo ℕ) (_ : bar ℕ)</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>The simplifier trace indicates that it is using nothing other than <code>foo.coe_mul</code> here. Should one expect the simplifier to apply this lemma?</p>\n<p>In my use case, <code>foo = with_zero</code> and <code>bar = with_one</code>. Johan suggested that I made these irreducible. I tried this, but <a href=\"#narrow/stream/113488-general/topic/I.20broke.20the.20tests/near/207314317\">that's another story</a>.</p>",
        "id": 207314363,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597783736
    },
    {
        "content": "<p>Just to be clear -- I would not expect the simplifier to see through the definition of <code>bar</code> (and in particular to see that it is equal to <code>foo</code>) without being told to unfold it.</p>",
        "id": 207319754,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597786682
    },
    {
        "content": "<p><code>simp</code> matches certain kinds of arguments definitionally. I don't remember the exact rules though.</p>",
        "id": 207319816,
        "sender_full_name": "Reid Barton",
        "timestamp": 1597786745
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"bp\">=</span> <span class=\"n\">bar</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"bp\">=</span> <span class=\"n\">option</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n\n\n<p>:-/</p>",
        "id": 207319822,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597786753
    },
    {
        "content": "<p>I think that <code>simp</code> should be strongly discouraged from applying <code>with_zero</code> lemmas to <code>with_one X</code>. Am I wrong?Should I make these things irreducible? What about <code>with_bot</code> and <code>with_top</code>? Users can make them locally irreducible if they want to argue in this nonprincipled way. It does mean repeating the <code>option</code> API 4 more times though :-/</p>",
        "id": 207319933,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597786849
    }
]