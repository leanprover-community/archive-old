[
    {
        "content": "<p>Can you do Gabriel's exercise?</p>",
        "id": 124504672,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522624812
    },
    {
        "content": "<p><a href=\"#narrow/stream/113488-general/subject/elaborator\" title=\"#narrow/stream/113488-general/subject/elaborator\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/subject/elaborator</a></p>",
        "id": 124504673,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522624834
    },
    {
        "content": "<p><code> theorem  very_easy : unit = unit :=\nby  do exact $ ???</code></p>",
        "id": 124504678,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522624888
    },
    {
        "content": "<p>Can you make an expr which corresponds to <code>eq.refl unit</code>?</p>",
        "id": 124504679,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522624908
    },
    {
        "content": "<p>Talking of tactics reminded me of this.</p>",
        "id": 124504716,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522624925
    },
    {
        "content": "<p>I could only make a <code>tactic expr</code></p>",
        "id": 124504720,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522624947
    },
    {
        "content": "<p>Is that against the rules of the game?</p>",
        "id": 124504727,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1522625035
    },
    {
        "content": "<p>I wasn't sure.</p>",
        "id": 124504764,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522625043
    },
    {
        "content": "<p>because I know absolutely nothing about exprs</p>",
        "id": 124504768,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522625060
    },
    {
        "content": "<p>or whether it's possible to make them</p>",
        "id": 124504769,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522625065
    },
    {
        "content": "<p>I thought that <code>eq.refl unit</code> was an expression in Lean</p>",
        "id": 124504770,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522625100
    },
    {
        "content": "<p>but I don't think it has type expr</p>",
        "id": 124504776,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522625109
    },
    {
        "content": "<p>For unit, you could do: <code>do exact $ expr.const ``unit.star []</code></p>",
        "id": 124504777,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1522625118
    },
    {
        "content": "<p>stop at that one</p>",
        "id": 124504819,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522625208
    },
    {
        "content": "<p>that one works</p>",
        "id": 124504820,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522625210
    },
    {
        "content": "<p>were you having a backtick nightmare? ;-)</p>",
        "id": 124504824,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522625223
    },
    {
        "content": "<p>Yeah and I don't have an anti-tick shampoo!</p>",
        "id": 124504830,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1522625245
    },
    {
        "content": "<p>How do you escape ticks?</p>",
        "id": 124504832,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1522625256
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>open tactic expr\ndefinition  very_easy : unit :=\nby  do exact $ expr.const ``unit.star []\n</pre></div>",
        "id": 124504833,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522625266
    },
    {
        "content": "<p>result!</p>",
        "id": 124504835,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522625274
    },
    {
        "content": "<p>There should be only one tick before <code>unit.star</code> though</p>",
        "id": 124504875,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1522625298
    },
    {
        "content": "<p><code>expr.const</code> wants a <code>name</code></p>",
        "id": 124504876,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522625311
    },
    {
        "content": "<p>oh we are doing the bad thing which Patrick complained about</p>",
        "id": 124504877,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522625323
    },
    {
        "content": "<p>he wants us to buzz off to another thread</p>",
        "id": 124504878,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522625339
    },
    {
        "content": "<p>Co-opting a channel?</p>",
        "id": 124504883,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1522625347
    },
    {
        "content": "<p>topic</p>",
        "id": 124504885,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522625388
    },
    {
        "content": "<p>Oh that was clever. I didn't know you could change in the middle</p>",
        "id": 124504929,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522625438
    },
    {
        "content": "<p>So a constructor is a <code>const</code>?</p>",
        "id": 124504937,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522625485
    },
    {
        "content": "<p><span class=\"emoji emoji-1f601\" title=\"grin\">:grin:</span> There's an option to change the topic of everything that comes after a certain post</p>",
        "id": 124504939,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1522625499
    },
    {
        "content": "<p>Yes, that's correct</p>",
        "id": 124504940,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1522625513
    },
    {
        "content": "<p>so how to change something like eq.refl into an expr?</p>",
        "id": 124504979,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522625530
    },
    {
        "content": "<p>Lean compiles <code>inductive</code> types into constants and axioms</p>",
        "id": 124504980,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1522625531
    },
    {
        "content": "<p>Same thing <code>const `eq.refl [`u]</code> ... with the exception of the universe level</p>",
        "id": 124504989,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1522625590
    },
    {
        "content": "<p>because then you could use <code>expr.app</code> to apply the function</p>",
        "id": 124504991,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522625598
    },
    {
        "content": "<p>Yes, you would first apply it to a <code>Sort u</code> and then to whatever term you want prove equal to itself</p>",
        "id": 124505033,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1522625696
    },
    {
        "content": "<p><code> infer type failed, incorrect number of universe levels</code></p>",
        "id": 124505039,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522625708
    },
    {
        "content": "<p>woo, new error messages</p>",
        "id": 124505040,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522625714
    },
    {
        "content": "<p>That's curious! I'm pretty sure there should be only one</p>",
        "id": 124505078,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1522625765
    },
    {
        "content": "<p>I honestly think that playing around with this sort of thing would be a good introduction to tactics.</p>",
        "id": 124505083,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522625819
    },
    {
        "content": "<p>because it gives you the idea of what an expr really is and begins to introduce stuff like the backtick hell before going meta</p>",
        "id": 124505089,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522625857
    },
    {
        "content": "<p>What you can do to see what's wrong is:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">do</span> <span class=\"n\">c</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">mk_const</span> <span class=\"bp\">`</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">refl</span><span class=\"bp\">`</span><span class=\"o\">,</span>\n   <span class=\"n\">trace</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"bp\">.</span><span class=\"n\">to_raw_fmt</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 124505090,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1522625866
    },
    {
        "content": "<p>Interesting! Thanks for the suggestion. I'll add some of that to my tutorial</p>",
        "id": 124505130,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1522625897
    },
    {
        "content": "<p>Am I right in thinking that tactics could really be said to be acting on the exprs</p>",
        "id": 124505139,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522625948
    },
    {
        "content": "<p>and that you really have to have some sort of clear idea of what an expr is before moving on to tactics?</p>",
        "id": 124505141,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522625967
    },
    {
        "content": "<p>Yes, that's really the main data structure</p>",
        "id": 124505142,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1522625971
    },
    {
        "content": "<p>so everyone has an informal idea of what one is</p>",
        "id": 124505146,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522625991
    },
    {
        "content": "<p>Completely</p>",
        "id": 124505147,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1522625993
    },
    {
        "content": "<p>because they have written some Lean code</p>",
        "id": 124505148,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522625999
    },
    {
        "content": "<p>and they are told that they are constructing expressions of certain types</p>",
        "id": 124505189,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522626010
    },
    {
        "content": "<p>And maybe an explanation of what a proof goal is would also help</p>",
        "id": 124505190,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1522626023
    },
    {
        "content": "<p>but actually they are not constructing the exprs themselves</p>",
        "id": 124505191,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522626025
    },
    {
        "content": "<p>What is a proof goal?</p>",
        "id": 124505192,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522626031
    },
    {
        "content": "<p>There is some \"interesting\" comment in PIL</p>",
        "id": 124505193,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522626041
    },
    {
        "content": "<p>there it is, p38</p>",
        "id": 124505236,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522626130
    },
    {
        "content": "<p><code>8.5 Metavariables and Unification\n[This section is still under construction. It will discuss the notion of a metavariable and\nits local context, with the interesting bit of information that goals in the tactic state are\nnothing more than metavariables. So the goal list is really just a list of metavariables,\nwhich can help us make sense of the get_goals and set_goals tactics. It will also discuss\nthe unify tactic.]</code></p>",
        "id": 124505237,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522626148
    },
    {
        "content": "<p>A proof goal is basically an unassigned meta variable. It has no special status. You can think of a proof in tactic mode as creating one metavariable, saying that it's the proof of the main goal and then telling you to assign a value to that metavariable <code>v</code> by calling <code>set_goals [v]</code></p>",
        "id": 124505289,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1522626323
    },
    {
        "content": "<p>But you can set any list of unassigned metavariables as the goals in a proof even if they are not relevant.</p>",
        "id": 124505326,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1522626364
    },
    {
        "content": "<p>Does that make sense?</p>",
        "id": 124505385,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1522626524
    },
    {
        "content": "<p>set_goals doesn't make sense, but I can guess what it means.</p>",
        "id": 124505441,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522626704
    },
    {
        "content": "<p>so it makes some sort of sense</p>",
        "id": 124505442,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522626711
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> To construct an expr, you can use the <code> `(...)</code> syntax</p>",
        "id": 124505672,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522627243
    },
    {
        "content": "<p>There is one backtick and two backticks and three backticks and none of them really make much sense to me</p>",
        "id": 124505679,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522627279
    },
    {
        "content": "<p>I can read the definitions but they don't stick yet</p>",
        "id": 124505680,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522627290
    },
    {
        "content": "<p>I am wondering if playing with exprs like this without thinking about tactics would be a better way to explain how all the backticks work</p>",
        "id": 124505681,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522627313
    },
    {
        "content": "<p>If you want to implement <code>have</code> for example, you could do it this way:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">my_have</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">::</span> <span class=\"n\">gs</span><span class=\"o\">)</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">get_goals</span><span class=\"o\">,</span>\n   <span class=\"n\">prf</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">mk_meta_var</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"c1\">-- the side goal</span>\n   <span class=\"n\">g&#39;</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">mk_mvar</span><span class=\"o\">,</span> <span class=\"c1\">-- not giving a type, we&#39;ll let `unify` guess it</span>\n   <span class=\"k\">let</span> <span class=\"n\">prove_g</span> <span class=\"o\">:=</span> <span class=\"n\">expr</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"n\">expr</span><span class=\"bp\">.</span><span class=\"n\">lam</span> <span class=\"n\">h</span> <span class=\"n\">binder_info</span><span class=\"bp\">.</span><span class=\"n\">default</span> <span class=\"n\">p</span> <span class=\"n\">g&#39;</span><span class=\"o\">)</span> <span class=\"n\">prf</span><span class=\"o\">,</span>\n   <span class=\"n\">unify</span> <span class=\"n\">prove_g</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n   <span class=\"n\">set_goals</span> <span class=\"o\">(</span><span class=\"n\">prf</span> <span class=\"bp\">::</span> <span class=\"n\">g&#39;</span> <span class=\"bp\">::</span> <span class=\"n\">gs</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 124505728,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1522627422
    },
    {
        "content": "<p>aah but now you're in tactic mode</p>",
        "id": 124505766,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522627445
    },
    {
        "content": "<p>I was wondering whether one could write something about creating raw exprs without ever mentioning the tactic monad</p>",
        "id": 124505771,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522627462
    },
    {
        "content": "<p>as an introduction to the backtick notation and to exprs</p>",
        "id": 124505772,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522627473
    },
    {
        "content": "<p>Yes, for two reasons: so that we can set and get the goals and so that we can create metavariables that are valid within the scope of the current proof</p>",
        "id": 124505774,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1522627491
    },
    {
        "content": "<p>without having to introduce them at the same time as introducing all the tactic monad stuff</p>",
        "id": 124505775,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522627495
    },
    {
        "content": "<p>Oh ... and for unification. Since a meta variable is meaningful only in the context of a specific proof, you need the proof state when you assign a value to one.</p>",
        "id": 124505783,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1522627556
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>open tactic\ntheorem very_easy : unit = unit :=\nby do exact `(eq.refl unit)\n\ntheorem very_easy₂ : unit = unit :=\nby do mk_eq_refl `(unit) &gt;&gt;= exact\n\ntheorem very_easy₃ : unit = unit :=\nby do exact $\n  (expr.const ``eq.refl [level.of_nat 2] : expr)\n  (expr.sort $ level.of_nat 1)\n  (expr.const ``unit [])\n</pre></div>",
        "id": 124505822,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522627585
    },
    {
        "content": "<p>But we're not discharging a goal completely here</p>",
        "id": 124505823,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1522627587
    },
    {
        "content": "<p>it was <code>level.of_nat 1</code> I  was missing</p>",
        "id": 124505824,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522627614
    },
    {
        "content": "<p>Thanks Mario.</p>",
        "id": 124505825,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522627619
    },
    {
        "content": "<p>you can also write <code>level.succ level.zero</code></p>",
        "id": 124505830,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522627629
    },
    {
        "content": "<p>oh wow there is <code>mk_eq_refl</code></p>",
        "id": 124505832,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522627676
    },
    {
        "content": "<p>Ah! That's the part I didn't think of! you were trying to prove <code>unit = unit</code></p>",
        "id": 124505873,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1522627692
    },
    {
        "content": "<p>I was trying to learn basic stuff about how to build exprs without going into tactic mode</p>",
        "id": 124505874,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522627712
    },
    {
        "content": "<p>no <code>expr.app</code> in version 3?</p>",
        "id": 124505879,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522627760
    },
    {
        "content": "<p>what's going on there?</p>",
        "id": 124505880,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522627782
    },
    {
        "content": "<p>The last example is a bit artifical though, since usually you will not construct a complete expr by hand like that. Here's a half-tactic way to construct it:</p>\n<div class=\"codehilite\"><pre><span></span>theorem very_easy₄ : unit = unit :=\nby do\n  u ← mk_const ``unit,\n  e ← mk_app ``eq.refl [u],\n  exact e\n</pre></div>",
        "id": 124505881,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522627798
    },
    {
        "content": "<p>I thought Lean was expecting one expr after the dollar sign and you passed three?</p>",
        "id": 124505883,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522627801
    },
    {
        "content": "<p>It's because of:</p>\n<div class=\"codehilite\"><pre><span></span>meta instance : has_coe_to_fun (expr elab) :=\n{ F := λ e, expr elab → expr elab, coe := λ e, expr.app e }\n</pre></div>",
        "id": 124505924,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1522627834
    },
    {
        "content": "<p><code>expr</code> has a lovely coe_fn instance that allows you to write applications like that</p>",
        "id": 124505925,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522627844
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>theorem very_easy₃&#39; : unit = unit :=\nby do exact $\n  expr.app (expr.app\n    (expr.const ``eq.refl [level.of_nat 2])\n    (expr.sort $ level.of_nat 1))\n  (expr.const ``unit [])\n</pre></div>",
        "id": 124505969,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522627933
    }
]