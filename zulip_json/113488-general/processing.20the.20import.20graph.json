[
    {
        "content": "<p>I think the graphviz output from leanproject produces a graph laid out in that way, but I think the result is far too cluttered to be interpretable.</p>",
        "id": 264264273,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639034078
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/Is.20a.20monolithic.20mathlib.20sustainable.3F/near/264264273\">said</a>:</p>\n<blockquote>\n<p>I think the graphviz output from leanproject produces a graph laid out in that way, but I think the result is far too cluttered to be interpretable.</p>\n</blockquote>\n<p>I might know some tricks.  Can someone point me to the .dot file behind that graph?   Even better the tool that generates the dot graph so I can also run it on the Lean4 codebase?</p>",
        "id": 264264978,
        "sender_full_name": "Chris Lovett",
        "timestamp": 1639034825
    },
    {
        "content": "<p>A raw and auto-updated gexf file is available at <a href=\"https://leanprover-community.github.io/mathlib_docs/import.gexf\">https://leanprover-community.github.io/mathlib_docs/import.gexf</a></p>",
        "id": 264265188,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639035071
    },
    {
        "content": "<p>I think <code>leanproject import-graph</code> can generate a .dot file, but it's very slow and it's easy and faster to generate one from the gexf</p>",
        "id": 264265260,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639035139
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"434989\">@Chris Lovett</span> <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> I changed this to a new topic, because I think it's interesting enough to deserve further discussion.</p>",
        "id": 264265392,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1639035277
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"434989\">@Chris Lovett</span> I don't think that the existing tools will work directly on Lean 4 code.</p>",
        "id": 264265413,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1639035304
    },
    {
        "content": "<p>If you can generate a similar gexf file you can point the online import viewer at it and it will mostly work</p>",
        "id": 264265618,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639035506
    },
    {
        "content": "<p>It seems what's asked by <span class=\"user-mention\" data-user-id=\"434989\">@Chris Lovett</span> is along the lines of this:</p>\n<blockquote>\n<p>The problem of order preserving hierarchical agglomerative clustering can be said to belong to the family of acyclic graph partitioning problems (Herrmann et al., 2017). If we consider the<br>\nstrict partial order to be a directed acyclic graph (DAG), the task is to partition the vertices into groups (levels?) so that the groups together with the arrows still makes up a DAG.</p>\n</blockquote>\n<p>From the paper <a href=\"https://arxiv.org/abs/2004.12488\">https://arxiv.org/abs/2004.12488</a> that I just found</p>",
        "id": 264267678,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1639037349
    },
    {
        "content": "<p>Thanks for the link.  I did grouping by simply splitting the names on \".\" and \":\" and made a hierarchical graph that also automatically creates links between parent groups if any child node in group A has a link to a child node in group B.  Then I run tarjans algorithm on the resulting top level <a href=\"https://github.com/clovett/dgml/tree/master/demos/Lean/mathlib/mathlib.svg\">graph for mathlib</a>, and it is essentially one big strongly coupled component (very circular, everything is reachable from everything pretty much), see all the red in the diagram.  </p>\n<p>So when this happens another trick is to \"slice and dice\" by throwing away detail - for example, I can take one node and focus down to it's immediate neighborhood ( only links 1 step away from that node), and break all circularity turning it into a tree, and I saved each of those with the name of that node, for example <a href=\"https://raw.githubusercontent.com/clovett/dgml/master/demos/Lean/mathlib/data.svg\">data.svg</a> or <a href=\"https://raw.githubusercontent.com/clovett/dgml/master/demos/Lean/mathlib/group_theory.svg\">group_theory</a>, from this we find there are some top level things like <a href=\"https://raw.githubusercontent.com/clovett/dgml/master/demos/Lean/mathlib/representation_theory.svg\">representation_theory</a>  and there are some bottom level things like order, data, tactic and <a href=\"https://raw.githubusercontent.com/clovett/dgml/master/demos/Lean/mathlib/logic.svg\">logic</a> but <a href=\"https://raw.githubusercontent.com/clovett/dgml/master/demos/Lean/mathlib/number_theory.svg\">number_theory</a> kind of turns that upside down).  You can also drill down and expand each one of these areas and see what is <a href=\"https://raw.githubusercontent.com/clovett/dgml/master/demos/Lean/mathlib/inside.svg\">inside.svg</a> and you find that set_theory has a pretty loverly internal structure... I also see some diamonds :-)</p>",
        "id": 264276338,
        "sender_full_name": "Chris Lovett",
        "timestamp": 1639042789
    },
    {
        "content": "<p>That first graph looks like some Chinese dragon (-;</p>",
        "id": 264278659,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1639044100
    },
    {
        "content": "<p>Here's another view inside \"tactic\" namespace, while it is complex, unlike most of the other namespaces it does not have any cycles which means it has very nice top to bottom layering.<br>\n<a href=\"/user_uploads/3121/dG6sUAOgppVFRAGk5ScDwXYq/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/dG6sUAOgppVFRAGk5ScDwXYq/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/dG6sUAOgppVFRAGk5ScDwXYq/image.png\"></a></div>",
        "id": 264404606,
        "sender_full_name": "Chris Lovett",
        "timestamp": 1639113720
    },
    {
        "content": "<p>Group theory on the other hand has a couple cycles in it:<br>\n<a href=\"/user_uploads/3121/c5k-WXzIBEs_E_pQS_56k4ho/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/c5k-WXzIBEs_E_pQS_56k4ho/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/c5k-WXzIBEs_E_pQS_56k4ho/image.png\"></a></div>",
        "id": 264404817,
        "sender_full_name": "Chris Lovett",
        "timestamp": 1639113965
    },
    {
        "content": "<p>What I don't know is whether the \"import\" graph is the right one to be looking at... I mean I guess it should be interesting because it implies some sort of type dependencies across those imports otherwise they would not be there, assuming we've done proper garbage collection on unnecessary imports.</p>",
        "id": 264404860,
        "sender_full_name": "Chris Lovett",
        "timestamp": 1639114049
    },
    {
        "content": "<p>You should be looking at files, not folders. All of the cycles in your graph are coming from folders</p>",
        "id": 264406573,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1639116028
    },
    {
        "content": "<p>In particular, folders represent \"topical\" hierarchy, while files respect dependency hierarchy. A given topic might need to be revisited several times with more and more dependencies, and any given mathematical topic has no upper bound on the dependencies it might need, so you are sure to get cycles if you merge all nodes within a folder</p>",
        "id": 264406695,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1639116131
    }
]