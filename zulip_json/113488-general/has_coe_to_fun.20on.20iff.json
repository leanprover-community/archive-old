[
    {
        "content": "<p>What would the opinion be on adding:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_to_fun</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"bp\">↔</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">iff.mp</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>The argument would be twofold:</p>\n<ul>\n<li>It's consistent with how <code>equiv</code> decays to a function in the forward direction</li>\n<li>It would enable dot notation for things like <code>and.comm</code>:</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">∧</span> <span class=\"n\">Q</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"n\">h.comm</span>\n</code></pre></div>",
        "id": 225458828,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612696450
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 225458874,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612696547
    },
    {
        "content": "<p>/poll Is this a good idea?</p>",
        "id": 225458926,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612696572
    },
    {
        "content": "<p>For teaching that would be a <em>disaster</em>.</p>",
        "id": 225461881,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1612700859
    },
    {
        "content": "<p>How so? The model only changes from \"an <code>iff</code> is a pair of a forward and backward implication\" to \"an <code>iff</code> is a forward implication with an associated backward implication\". That difference doesn't seem particularly troublesome.</p>",
        "id": 225462303,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612701529
    },
    {
        "content": "<p>You can use <code>and.symm</code> instead of <code>and.comm</code> if you want the version that works with dot notation</p>",
        "id": 225466441,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612708361
    },
    {
        "content": "<p>Also, has_coe_to_fun doesn't enable the use of dot notation like this</p>",
        "id": 225466463,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612708393
    },
    {
        "content": "<p>It does enable dot notation, the <code>#check</code> above works iff you also include the instance I start this thread with</p>",
        "id": 225466604,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612708580
    },
    {
        "content": "<p><code>and.symm</code> is just an example, there are many other cases where the lack of this coercion makes us pick between a weak statement with dot notation, a strong statement without, or having to come up with two names for the same thing</p>",
        "id": 225466633,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612708670
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/has_coe_to_fun.20on.20iff/near/225462303\">said</a>:</p>\n<blockquote>\n<p>How so? The model only changes from \"an <code>iff</code> is a pair of a forward and backward implication\" to \"an <code>iff</code> is a forward implication with an associated backward implication\". That difference doesn't seem particularly troublesome.</p>\n</blockquote>\n<p>Students already have a lot of difficulties with the distinction between implication and equivalences. Anything that blurs this distinction would be awful.</p>",
        "id": 225469610,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1612712454
    },
    {
        "content": "<p>For what it's worth, I still sometimes find the use of <code>equiv</code>s as functions difficult to parse since the names are not what I intuitively expect. However, the inconsistency between <code>equiv</code> and <code>iff</code> here is a bit strange.</p>\n<p><del>Lean 3 doesn't give us any way to disable instances once they've been declared, right? What about Lean 4?</del></p>",
        "id": 225469963,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1612712920
    },
    {
        "content": "<p>Sure it does, <code>local attribute [-instance]</code></p>",
        "id": 225470979,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612714257
    },
    {
        "content": "<p>Except in this case we need to go in the other direction. Have a <code>def</code> and let Eric use <code>local attribute [instance]</code> when he wants to use it.</p>",
        "id": 225471047,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1612714344
    },
    {
        "content": "<p>I also have thought that the inconsistency between <code>equiv</code> and <code>iff</code> was odd. I wouldn't want mathlib to change the way it states theorems if this were a feature (so we would keep both <code>and.symm</code> and <code>and.comm</code>), but it would be nice being able to write <code>foo a h</code> rather than <code>(foo a).mp h</code>.</p>\n<p>Maybe as a compromise, since for teaching you wouldn't want students to unwittingly use iffs in place of implications, we introduce a <code>mathlib</code> locale with fancy features such as this one.</p>",
        "id": 283890281,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1653489031
    },
    {
        "content": "<p>I like the idea because it means I don't have to write .1 everywhere</p>",
        "id": 283908994,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1653496990
    },
    {
        "content": "<p>This sounds like a terrible idea because <code>has_coe_to_fun</code> is quite fragile and our current use already breaks often enough. Further, iffs are usually quite polymorphic, so Lean will have an even harder time unifying.</p>",
        "id": 283909249,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1653497100
    },
    {
        "content": "<p>In this case, <code>has_coe_to_fun</code> shouldn't be fragile at all afaict.</p>",
        "id": 283909518,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1653497226
    },
    {
        "content": "<p>It should work just as well as writing <code>.1</code> manually.</p>",
        "id": 283909576,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1653497246
    },
    {
        "content": "<p>Yeah, that's my understanding -- when you syntactically have <code>x y</code> and <code>x</code> isn't obviously a function, then Lean will use a <code>has_coe_to_fun</code> instance for <code>x</code>.</p>",
        "id": 283910322,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1653497541
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113488-general/topic/has_coe_to_fun.20on.20iff/near/283909249\">said</a>:</p>\n<blockquote>\n<p>This sounds like a terrible idea because <code>has_coe_to_fun</code> is quite fragile and our current use already breaks often enough. Further, iffs are usually quite polymorphic, so Lean will have an even harder time unifying.</p>\n</blockquote>\n<p>If you're describing what I think you are (the various breakage to dot notation in bundled homs every time someone adds a new typeclass in the hierarchy), that's not relevant here because:</p>\n<ul>\n<li>Almost no one is going to state or a theorem with <code>iff.mp</code> in the statement, whether it's spelt with <code>coe_fn</code> or otherwise</li>\n<li><code>iff</code> has no typeclass arguments which can end up unified incorrectly</li>\n</ul>",
        "id": 283919701,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1653501865
    }
]