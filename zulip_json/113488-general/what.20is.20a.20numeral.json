[
    {
        "content": "<p>My understanding is that <code>37</code> is a numeral. Is <code>(37 : real)</code> a numeral? My understanding is that <code>real.pi</code> is not a numeral. Is <code>-37</code> a numeral? Is <code>1/37</code> a numeral? What is a numeral? I would not expect <code>norm_num</code> to prove <code>pi&gt;3</code> but I would expect it to prove <code>1/37&gt;0</code>. The documentation of <code>norm_num</code> says it proves theorems about <code>numerical expressions</code>. Is the idea that <code>1/37</code> is not a numeral but it's a \"numerical expression\"? Sorry for such weird questions, I'm writing notes for my course and I'd rather get things right the first time than have people complain that I'm not using terminology correctly.</p>",
        "id": 268132317,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1642262558
    },
    {
        "content": "<p>By numeral, I mean a \"numeric <a href=\"https://en.wikipedia.org/wiki/Literal_(computer_programming)\">literal</a>\", so an expression denoting a fixed number that cannot be decomposed into subexpressions. So <code>37</code>, <code>3.7</code>, <code>0x25</code> and <code>0b00100101</code> are all numerals in Lean, <code>-37</code> is not a numeral since it applies the <code>-</code> operator to <code>37</code>.</p>\n<p>I believe <span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span> introduced me to this term, so he may have a more authoritative opinion.</p>",
        "id": 268134835,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1642265486
    },
    {
        "content": "<p>Presumably \"numerical expressions\" in this context means expressions consisting only of numerals and operators known to <code>norm_num</code>.</p>",
        "id": 268134923,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1642265586
    },
    {
        "content": "<p>\"Cannot be decomposed into subexpressions\" is maybe a bit off, since <code>37</code> is built of applications of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/bit0\">docs#bit0</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/bit1\">docs#bit1</a>, etc. In the Lean 3 context specifically, I'd say a numeral is either <code>has_zero.zero</code> or a sequence of 0 or more applications of <code>bit0</code> and <code>bit1</code> to <code>has_one.one</code>. The type class requirements on these defintions mean that this only make sense over a type with 0, 1, and +.</p>",
        "id": 268135130,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1642265847
    },
    {
        "content": "<p>Then you wouldn't call <code>3.7</code> a numeral?</p>",
        "id": 268135239,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1642265929
    },
    {
        "content": "<p><code>37</code>, <code>0x25</code> are numerals in this sense. <code>3.7</code> is not, but it is a \"numerical expression\": a sequence of applications of ring operations to numerals.</p>",
        "id": 268135242,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1642265930
    },
    {
        "content": "<p>So</p>\n<blockquote>\n<p>Is the idea that 1/37 is not a numeral but it's a \"numerical expression\"?</p>\n</blockquote>\n<p>is right.</p>",
        "id": 268135407,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1642266048
    },
    {
        "content": "<p>Right, I should make clear that by \"subexpressions\" I mean subexpressions in the source code. In the way that <code>a + b</code> can be decomposed into <code>a</code>, <code>+</code> and <code>b</code>, but not into <code>has_add.add</code> nor <code>nat.has_add</code>.</p>",
        "id": 268135415,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1642266054
    },
    {
        "content": "<p>At least in the original C++ implementation of <code>norm_num</code> there was a third distinction, \"generalized numerals\" or something like that, which would have included <code>1/37</code> and <code>-37</code>. It's supposed to capture the notion of a fully reduced numeral expression.</p>",
        "id": 268135523,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1642266180
    },
    {
        "content": "<p>Something like, \"a numeral, or the negation of a numeral, or the division of two numerals, or the negation of the division of two numerals\"</p>",
        "id": 268135546,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1642266218
    },
    {
        "content": "<p><code>norm_num</code> applied to a numeral expression should produce a generalized numeral.</p>",
        "id": 268135605,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1642266259
    },
    {
        "content": "<p>Thanks a lot for these comments!</p>",
        "id": 268137107,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1642268086
    },
    {
        "content": "<p>I believe I have used the term \"rational numeral\" or \"integer numeral\" to refer (in <code>norm_num</code> docs) to what Rob calls \"generalized numeral\"</p>",
        "id": 268140459,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1642272520
    },
    {
        "content": "<p>so <code>1/3</code> is a rational numeral but <code>2/6</code> is not, and <code>-13</code> is an integer numeral</p>",
        "id": 268140484,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1642272587
    },
    {
        "content": "<p>it is like \"simp-normal form\" but for <code>norm_num</code> instead</p>",
        "id": 268140533,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1642272609
    },
    {
        "content": "<p>Usually, when I say numeral without qualification I mean natural numeral though, so <code>0</code> or <code>1</code> or <code>37</code> but not <code>2+2</code> or <code>-5</code></p>",
        "id": 268140549,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1642272659
    },
    {
        "content": "<p>the term overlaps a lot with \"numeric literal\" which deals with the actual parser input, so for example <code>0x20</code> is a hexadecimal literal and <code>32</code> is a (decimal) numeric literal. I probably use the terms interchangeably most of the time</p>",
        "id": 268140676,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1642272834
    }
]