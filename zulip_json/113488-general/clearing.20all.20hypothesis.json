[
    {
        "content": "<p>I want to focus on one of five subgoals. I do this using an inelegant combination of <code>swap</code>s and <code>sorry</code>s. Once I am there, at the heart of the matter, I realise that my context is gigantic; I don't think I'll be using <code>add_left_neg</code> any more, for example. <br>\nIs there a command which just clears as much of the context as it is possible to do? I have come to an interesting sub-question and I want to see better what's going on.</p>",
        "id": 163821809,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555798993
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"c\">/-</span><span class=\"cm\">-</span>\n<span class=\"cm\">`clear h₁ ... hₙ` tries to clear each hypothesis `hᵢ` from the local context.</span>\n<span class=\"cm\">-/</span>\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">clear</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">ident</span><span class=\"bp\">*</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">clear_lst</span>\n</pre></div>\n\n\n<p>Can I use this tactic somehow? I don't speak meta.</p>",
        "id": 163821871,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555799088
    },
    {
        "content": "<p>I am getting sick of</p>\n<div class=\"codehilite\"><pre><span></span>clear tactic failed, hypothesis &#39;zero_add&#39; depends on &#39;add_assoc&#39;\n</pre></div>\n\n\n<p>holes</p>",
        "id": 163821900,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555799160
    },
    {
        "content": "<p>ha ha I've got an algorithm</p>",
        "id": 163822098,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555799440
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>  <span class=\"n\">clear</span> <span class=\"n\">right_distrib</span> <span class=\"n\">left_distrib</span> <span class=\"n\">add_comm</span> <span class=\"n\">add_zero</span> <span class=\"n\">add_assoc</span> <span class=\"n\">add</span><span class=\"o\">,</span>\n</pre></div>\n\n\n<p>found by switching view to the weird ctrl-shift-alt-enter \"info view\" which I never use, and then just clearing the first thing it complained about as well. This is getting through it nicely.</p>",
        "id": 163822120,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555799506
    },
    {
        "content": "<p>Feel free to use: <a href=\"https://github.com/avigad/qpf/blob/97befa73d34ed26137dbb991941d5ce1b1a3e794/src/for_mathlib.lean#L614-L618\" target=\"_blank\" title=\"https://github.com/avigad/qpf/blob/97befa73d34ed26137dbb991941d5ce1b1a3e794/src/for_mathlib.lean#L614-L618\">https://github.com/avigad/qpf/blob/97befa73d34ed26137dbb991941d5ce1b1a3e794/src/for_mathlib.lean#L614-L618</a></p>",
        "id": 163822169,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1555799562
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>  <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"n\">zero_1</span> <span class=\"bp\">=</span> <span class=\"n\">zero</span><span class=\"o\">),</span>\n  <span class=\"c1\">-- refl still fails</span>\n  <span class=\"n\">clear</span> <span class=\"n\">add_left_neg</span><span class=\"o\">,</span> <span class=\"c1\">-- only 20 more to go</span>\n  <span class=\"n\">clear</span> <span class=\"n\">zero_add</span><span class=\"o\">,</span>\n  <span class=\"n\">clear</span> <span class=\"n\">right_distrib</span> <span class=\"n\">left_distrib</span> <span class=\"n\">add_comm</span> <span class=\"n\">add_zero</span> <span class=\"n\">add_assoc</span> <span class=\"n\">add</span><span class=\"o\">,</span>\n  <span class=\"n\">clear</span> <span class=\"n\">neg</span><span class=\"o\">,</span>\n  <span class=\"n\">clear</span> <span class=\"n\">mul_one</span> <span class=\"n\">one_mul</span> <span class=\"n\">mul_assoc</span> <span class=\"n\">mul</span><span class=\"o\">,</span>\n  <span class=\"n\">clear</span> <span class=\"n\">one</span><span class=\"o\">,</span>\n  <span class=\"n\">clear</span> <span class=\"n\">add_zero_1</span> <span class=\"n\">add_left_neg_1</span> <span class=\"n\">zero_add_1</span> <span class=\"n\">add_assoc_1</span> <span class=\"n\">add_1</span><span class=\"o\">,</span>\n  <span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">  clear tactic failed, hypothesis &#39;add_left_neg_1&#39; depends on &#39;add_zero_1&#39;</span>\n\n<span class=\"cm\">  dammit my algo failed!</span>\n<span class=\"cm\">  -/</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>Dammit my algo just failed!</p>",
        "id": 163822236,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555799701
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">clear_except</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">ident</span> <span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"k\">let</span> <span class=\"n\">ns</span> <span class=\"o\">:=</span> <span class=\"n\">name_set</span><span class=\"bp\">.</span><span class=\"n\">of_list</span> <span class=\"n\">xs</span><span class=\"o\">,</span>\n   <span class=\"n\">local_context</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">mmap&#39;</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">,</span>\n     <span class=\"n\">when</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"n\">ns</span><span class=\"bp\">.</span><span class=\"n\">contains</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">local_pp_name</span><span class=\"o\">)</span> <span class=\"err\">$</span>\n<span class=\"n\">try</span> <span class=\"err\">$</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">clear</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"err\">∘</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">reverse</span>\n</pre></div>\n\n\n<p>Simon's tactic.</p>",
        "id": 163822252,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555799754
    },
    {
        "content": "<p>I don't understand a word of it, but let's give it a go</p>",
        "id": 163822297,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555799769
    },
    {
        "content": "<p>It doesn't delete all my files, does it?</p>",
        "id": 163822300,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555799785
    },
    {
        "content": "<p>As far as you know, no it doesn't</p>",
        "id": 163822304,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1555799801
    },
    {
        "content": "<p><code>unknown identifier 'parse'</code></p>",
        "id": 163822317,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555799847
    },
    {
        "content": "<p>I'm not very good at meta</p>",
        "id": 163822320,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555799852
    },
    {
        "content": "<p>you have to spoonfeed me :-/</p>",
        "id": 163822322,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555799865
    },
    {
        "content": "<p>Give me a moment, I'll PR it</p>",
        "id": 163822324,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1555799867
    },
    {
        "content": "<p>Just update mathlib to HEAD</p>",
        "id": 163822544,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1555800197
    },
    {
        "content": "<p>Revision 9daa1a579fd86c537229c34a00a18a23fdad4db8</p>",
        "id": 163822545,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1555800207
    },
    {
        "content": "<p>And now I have to compile mathlib manually, right?</p>",
        "id": 163822874,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555800724
    },
    {
        "content": "<p>You have given me an assembly manual for your new tool, and now I have to build it myself.</p>",
        "id": 163822882,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555800748
    },
    {
        "content": "<p>I've learnt a lot more about git recently. The perfectoid project has taught me a lot about teamwork.</p>",
        "id": 163822894,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555800788
    },
    {
        "content": "<p>:) yeah, unfortunately, being on the bleeding edge means you have to do more work yourself. You can also wait until it gets into the nightly build</p>",
        "id": 163822951,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1555800890
    },
    {
        "content": "<p>I don't mind compiling. I am only just beginning to realise that it's much better for you to make a PR than it is to start posting code here. it's easier for both you and me.</p>",
        "id": 163822969,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555800928
    },
    {
        "content": "<p>you get a preliminary version up and running at your end, throw out a new branch and I can get it, compile, and test it. It's all just dawning on me really, how all this stuff works.</p>",
        "id": 163823020,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555800997
    },
    {
        "content": "<p>I find it really interesting how important it is to learning to write very large proofs to learn to just use the tools effectively</p>",
        "id": 163823219,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1555801327
    },
    {
        "content": "<p>We're 11000 lines in and are running into technical issues with the typeclass system; debugging these instances is, for me, the best way of understanding them; it's better than just asking. I am finally learning to find my own way around Lean.</p>",
        "id": 163823237,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555801422
    },
    {
        "content": "<p>I like the idea of <code>clear_except</code>, but it would be nice if it can be written <code>clear - h1 h2</code></p>",
        "id": 163826406,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1555807014
    },
    {
        "content": "<p>Are you suggesting we put it into core?</p>",
        "id": 163826418,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1555807064
    },
    {
        "content": "<p>that or make a <code>clear'</code></p>",
        "id": 163826591,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1555807328
    },
    {
        "content": "<p>Actually maybe that's a thing we can do on the community fork now... update all the core tactics to match the primed versions</p>",
        "id": 163826598,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1555807362
    },
    {
        "content": "<p>they should all be backward compatible afaik</p>",
        "id": 163826600,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1555807381
    },
    {
        "content": "<p>I agree with the latest statement.</p>",
        "id": 163826604,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1555807382
    },
    {
        "content": "<p>The thing with the <code>clear - h</code> idea is: does <code>clear h - h'</code> mean anything? Should it mean something?</p>",
        "id": 163826613,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1555807426
    },
    {
        "content": "<p>the thing after clear is a list of names so it's not a problem</p>",
        "id": 163826744,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1555807678
    },
    {
        "content": "<p>I was thinking only <code>clear h1 h2</code> or <code>clear - h1 h2</code></p>",
        "id": 163826805,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1555807716
    },
    {
        "content": "<p><code>clear h - h'</code> doesn't really mean anything not expressible with one of the other two options</p>",
        "id": 163826815,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1555807746
    },
    {
        "content": "<p>And if you want to clear everything, you write <code>clear -</code> which I don't like</p>",
        "id": 163826936,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1555807929
    },
    {
        "content": "<p>Maybe we could have a tactic called <code>clear_all</code> and add options <code>clear_all - h0 h1</code></p>",
        "id": 163826942,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1555807955
    },
    {
        "content": "<p>btw this notation exactly matches the coq tactic iirc</p>",
        "id": 163826998,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1555808045
    },
    {
        "content": "<p>what about <code>clear * - h1 h2</code>?</p>",
        "id": 163827002,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1555808074
    },
    {
        "content": "<p>also there is another predicate I can imagine saying which isn't expressible: clear everything except for <code>x</code> and the hypotheses that depend on <code>x</code></p>",
        "id": 163827067,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1555808207
    },
    {
        "content": "<p>Oh, <code>clear_except</code> works <em>really</em> well for me! Thank you Simon -- you are a master tool maker when it comes to things like this.</p>",
        "id": 163830363,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555814126
    },
    {
        "content": "<p>A tactic state with over 30 hypotheses became</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Huber_pair</span><span class=\"o\">,</span>\n<span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"err\">↥</span><span class=\"o\">(</span><span class=\"n\">Spa</span> <span class=\"n\">A</span><span class=\"o\">),</span>\n<span class=\"n\">zero</span> <span class=\"n\">zero_1</span> <span class=\"o\">:</span> <span class=\"n\">ring_completion</span> <span class=\"o\">(</span><span class=\"n\">valuation_field</span> <span class=\"o\">(</span><span class=\"n\">out</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">)))</span>\n<span class=\"err\">⊢</span> <span class=\"n\">zero_1</span> <span class=\"bp\">=</span> <span class=\"n\">zero</span>\n</pre></div>",
        "id": 163830433,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555814229
    },
    {
        "content": "<p>I cheated: I've been using it for over a year so I had some time to improve it</p>",
        "id": 163830438,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1555814270
    }
]