[
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.list.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">list</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">has_period</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"n\">p</span> <span class=\"bp\">≤</span> <span class=\"n\">l.length</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">p</span> <span class=\"bp\">&lt;</span> <span class=\"n\">l.length</span><span class=\"o\">),</span>\n                 <span class=\"n\">l.nth_le</span> <span class=\"n\">n</span> <span class=\"o\">((</span><span class=\"n\">n.le_add_right</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans_lt</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">l.nth_le</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">reverse_period</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">l.has_period</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">l.reverse.has_period</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n<span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">l.length_reverse.symm</span> <span class=\"bp\">▸</span> <span class=\"n\">h.1</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"n\">hn</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">length_reverse</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n  <span class=\"n\">replace</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">h.2</span> <span class=\"o\">(</span><span class=\"n\">l.length</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">≤</span> <span class=\"n\">l.length</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">tsub_tsub</span><span class=\"o\">],</span>\n    <span class=\"n\">apply</span> <span class=\"n\">le_tsub_of_add_le_left</span><span class=\"o\">,</span>\n    <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">add_assoc</span><span class=\"o\">,</span> <span class=\"n\">add_comm</span><span class=\"o\">,</span> <span class=\"n\">nat.add_one_le_iff</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">l.length</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">p</span> <span class=\"bp\">+</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">l.length</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">tsub_add_cancel_of_le</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">h'</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">list</span>\n</code></pre></div>\n<p>This may be related to some type inconsistencies, but I can't figure out how to deal with it properly...</p>",
        "id": 278072976,
        "sender_full_name": "FR",
        "timestamp": 1649272815
    },
    {
        "content": "<p>this is usually if <code>h</code> is involved in  a proof of something else</p>",
        "id": 278075835,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1649274193
    },
    {
        "content": "<p><code>rw [length_reverse] at hn</code> cannot modify <code>hn</code> because it's referenced in the goal expression. What you can do instead is to create a new assumption: <code>have hn₁ := hn, rw [length_reverse] at hn₁</code></p>\n<p>The reason <code>simp only [h'] at h</code> fails is unrelated (it's because of the metavariable coming from <code>replace h := h.2 (l.length - 1 - n - p) _</code>. You have to provide a proof instead of <code>_</code> if you plan to rewrite it.</p>",
        "id": 278099421,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1649287276
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.list.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">list.has_period</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"n\">p</span> <span class=\"bp\">≤</span> <span class=\"n\">l.length</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span><span class=\"o\">,</span> <span class=\"n\">l.nth_le</span> <span class=\"n\">n</span> <span class=\"n\">h₁</span> <span class=\"bp\">=</span> <span class=\"n\">l.nth_le</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"n\">h₂</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">reverse_period</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">l.has_period</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">l.reverse.has_period</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span><span class=\"o\">,</span> <span class=\"n\">use</span> <span class=\"o\">[</span><span class=\"kd\">by</span> <span class=\"n\">rwa</span> <span class=\"n\">list.length_reverse</span><span class=\"o\">],</span>\n  <span class=\"n\">simp_rw</span> <span class=\"n\">list.length_reverse</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">rintro</span> <span class=\"n\">n</span> <span class=\"n\">h₃</span> <span class=\"n\">h₄</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">list.nth_le_reverse'</span><span class=\"o\">,</span> <span class=\"n\">list.nth_le_reverse'</span><span class=\"o\">],</span> <span class=\"n\">rotate</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">repeat</span>\n  <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">nat.exists_eq_add_of_lt</span> <span class=\"n\">h₃</span> <span class=\"k\">with</span> <span class=\"n\">k</span> <span class=\"n\">h₅</span><span class=\"o\">,</span> <span class=\"n\">simp_rw</span> <span class=\"n\">h₅</span><span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">linarith</span> <span class=\"o\">},</span>\n  <span class=\"n\">symmetry</span><span class=\"o\">,</span> <span class=\"n\">specialize</span> <span class=\"n\">h₂</span> <span class=\"o\">(</span><span class=\"n\">l.length</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">p</span><span class=\"o\">))</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">repeat</span>\n  <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">nat.exists_eq_add_of_lt</span> <span class=\"n\">h₄</span> <span class=\"k\">with</span> <span class=\"n\">k</span> <span class=\"n\">h₅</span><span class=\"o\">,</span> <span class=\"n\">simp_rw</span> <span class=\"n\">h₅</span><span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">linarith</span> <span class=\"o\">},</span>\n  <span class=\"n\">convert</span> <span class=\"n\">h₂</span><span class=\"o\">,</span> <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">nat.exists_eq_add_of_lt</span> <span class=\"n\">h₄</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">],</span> <span class=\"n\">ring_nf</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">add_tsub_cancel_left</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 278102950,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1649290066
    },
    {
        "content": "<p>I get it. Thanks!</p>",
        "id": 278140534,
        "sender_full_name": "FR",
        "timestamp": 1649325544
    }
]