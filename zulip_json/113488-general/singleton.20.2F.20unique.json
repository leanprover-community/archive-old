[
    {
        "content": "<p>It has been remarked before that we need a class that is <code>nonempty</code> + <code>subsingleton</code>. I guess the canonical name would be <code>singleton</code>. How would people want to define it?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">class</span> <span class=\"n\">singleton</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">elem</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">uniq</span> <span class=\"o\">:</span> <span class=\"err\">\\</span><span class=\"k\">Pi</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 156348116,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1547793769
    },
    {
        "content": "<p>why not just take nonempty and subsingleton as assumptions together?</p>",
        "id": 156348829,
        "sender_full_name": "Nicholas Scheel",
        "timestamp": 1547795030
    },
    {
        "content": "<p>I guess there are two options: either we make an inductive <code>Prop</code>, or we make a thing that lives in <code>Type*</code> but has an easy projector to the element.</p>",
        "id": 156349297,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1547795837
    },
    {
        "content": "<p>I'm not sure what is best.</p>",
        "id": 156349300,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1547795846
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110294\">@Johannes Hölzl</span> There is probably common wisdom on this in the wider community. What would you suggest?</p>",
        "id": 156349909,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1547796889
    },
    {
        "content": "<p>Hm, this is a case which is not often used. But I would guess the <code>Type*</code> variant could be more helpful.</p>",
        "id": 156349975,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1547796979
    },
    {
        "content": "<p>It is not? Ooh, that surprises me.</p>",
        "id": 156349979,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1547797010
    },
    {
        "content": "<p>Up to now we didn't need it in mathlib...</p>",
        "id": 156349989,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1547797035
    },
    {
        "content": "<p>Where would you put it?</p>",
        "id": 156350044,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1547797107
    },
    {
        "content": "<p>Somewhere in <code>data/</code>?</p>",
        "id": 156350048,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1547797128
    },
    {
        "content": "<p>Maybe even in <code>logic/basic.lean</code>? Plus the <code>unit</code> instance.</p>",
        "id": 156350123,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1547797260
    },
    {
        "content": "<p>Is it ok to extend <code>inhabited</code>?</p>",
        "id": 156350136,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1547797298
    },
    {
        "content": "<p>Or is that wrong for semantic reasons?</p>",
        "id": 156350138,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1547797307
    },
    {
        "content": "<p>I still don't know the semantics of all those types like <code>inhabited</code>, <code>default</code>, etc...</p>",
        "id": 156350189,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1547797332
    },
    {
        "content": "<p>Yes, extend <code>inhabited</code> and derive <code>subsingleton</code></p>",
        "id": 156350275,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1547797514
    },
    {
        "content": "<p>Ooop <span class=\"emoji emoji-1f648\" title=\"see no evil\">:see_no_evil:</span> the name <code>singleton</code> is of course already taken by singleton sets...</p>",
        "id": 156351117,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1547798707
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> Do you have a good suggestion for a name?</p>",
        "id": 156351184,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1547798792
    },
    {
        "content": "<p>nope</p>",
        "id": 156351186,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1547798800
    },
    {
        "content": "<p>Aahrg, <code>punit.inhabited</code> is only for <code>Type</code>, not <code>Type u</code>.</p>",
        "id": 156351566,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1547799380
    },
    {
        "content": "<p>I guess the name <code>contractible</code> is to HoTT, right?</p>",
        "id": 156351834,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1547799799
    },
    {
        "content": "<p>Maybe <code>unique</code>?</p>",
        "id": 156351888,
        "sender_full_name": "Reid Barton",
        "timestamp": 1547799852
    },
    {
        "content": "<p>Yes, that might work. But I'dd like to also emphasise the existence.</p>",
        "id": 156351908,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1547799885
    },
    {
        "content": "<p>People might think that <code>unique</code> is a variant on <code>subsingleton</code>.</p>",
        "id": 156351921,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1547799904
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/mathlib/issues/605\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/issues/605\">#605</a> <span class=\"user-mention\" data-user-id=\"110294\">@Johannes Hölzl</span></p>",
        "id": 156352558,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1547800796
    },
    {
        "content": "<p>what's wrong with just <code>inhabited</code> + <code>subsingleton</code> or <code>nonempty</code> + <code>subsingleton</code>?</p>",
        "id": 156352717,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1547800970
    },
    {
        "content": "<p>That it's longer to write?</p>",
        "id": 156352733,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1547800989
    },
    {
        "content": "<p>not good enough, definitions are worth more than that</p>",
        "id": 156352740,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1547801023
    },
    {
        "content": "<p>When I'm pulling a limit cone through and adjoint functor I want to spend as little time with these stupid classes...</p>",
        "id": 156352747,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1547801041
    },
    {
        "content": "<p>aha, okay sure I've seen this. Are you perhaps saying this about a subtype?</p>",
        "id": 156352802,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1547801070
    },
    {
        "content": "<p>No...</p>",
        "id": 156352805,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1547801084
    },
    {
        "content": "<p>Why do you think that?</p>",
        "id": 156352807,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1547801091
    },
    {
        "content": "<p>That's the way it usually goes with universal properties</p>",
        "id": 156352821,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1547801106
    },
    {
        "content": "<p>there exists a unique map satisfying such and such property</p>",
        "id": 156352831,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1547801132
    },
    {
        "content": "<p>Ok, maybe. I haven't thought of it like that. But there are no subtypes in sight with what I'm doing right now.</p>",
        "id": 156352835,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1547801136
    },
    {
        "content": "<p>Aah, but that's all packaged into <code>cone_morphism</code></p>",
        "id": 156352839,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1547801149
    },
    {
        "content": "<p>I want to say that <code>c</code> is a limit cone if <code>\\Pi t, unique (cone_morphism c t)</code></p>",
        "id": 156352901,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1547801182
    },
    {
        "content": "<p>why not say that in two conditions?</p>",
        "id": 156352910,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1547801210
    },
    {
        "content": "<p>you have a morphism and a proof of uniqueness</p>",
        "id": 156352916,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1547801222
    },
    {
        "content": "<p>And then adjunctions give me <code>equiv</code>s, and <code>equiv.unique_of_equiv</code> will let me easily manipulate it.</p>",
        "id": 156352918,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1547801223
    },
    {
        "content": "<p>It's too unbundled.</p>",
        "id": 156352929,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1547801237
    },
    {
        "content": "<p>I agree that that is also useful. And it is what we have right now in the library.</p>",
        "id": 156352935,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1547801267
    },
    {
        "content": "<p>It's good when you are applying these things in concrete cases.</p>",
        "id": 156352937,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1547801280
    },
    {
        "content": "<p>But for abstract category theory, I think it becomes a lot easier to manipulate these things when they are bundled.</p>",
        "id": 156352990,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1547801303
    },
    {
        "content": "<p>I take it you don't want to use this like a typeclass then?</p>",
        "id": 156353025,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1547801396
    },
    {
        "content": "<p>Uuuh, I don't know?</p>",
        "id": 156353084,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1547801411
    },
    {
        "content": "<p>what does <code>equiv.unique_of_equiv</code> say?</p>",
        "id": 156353100,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1547801440
    },
    {
        "content": "<p>If <code>X \\equiv Y</code> and you know <code>unique Y</code> then you get <code>unique X</code>.</p>",
        "id": 156353116,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1547801468
    },
    {
        "content": "<p>But you knew that.</p>",
        "id": 156353117,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1547801479
    },
    {
        "content": "<p>You want code.</p>",
        "id": 156353119,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1547801483
    },
    {
        "content": "<p>and that's all you intend to do with <code>unique</code>, besides using the projections directly?</p>",
        "id": 156353124,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1547801503
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/mathlib/pull/605/files#diff-a714d761eac2ec5a2e4b0ed4592f9c46R474\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/pull/605/files#diff-a714d761eac2ec5a2e4b0ed4592f9c46R474\">https://github.com/leanprover/mathlib/pull/605/files#diff-a714d761eac2ec5a2e4b0ed4592f9c46R474</a></p>",
        "id": 156353126,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1547801511
    },
    {
        "content": "<p>Eehm, yes, for the time being.</p>",
        "id": 156353185,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1547801542
    },
    {
        "content": "<p>By the way, you can define <code>unique</code> in a simpler way, with only one quantifier</p>",
        "id": 156353191,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1547801555
    },
    {
        "content": "<p>there is <code>x : A</code> and <code>\\forall y, x = y</code></p>",
        "id": 156353197,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1547801571
    },
    {
        "content": "<p>Yes, I've derived those versions. But I wanted to be as symmetric as possible.</p>",
        "id": 156353208,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1547801585
    },
    {
        "content": "<p>Or is that not useful?</p>",
        "id": 156353214,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1547801596
    },
    {
        "content": "<p>For the structure you want the axiom to be easy to prove. Probably when one picks a default it will be easy to work with</p>",
        "id": 156353269,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1547801652
    },
    {
        "content": "<p>like how one shows a zero ring is <code>unique</code>, you show every element is 0, and hence every element is equal</p>",
        "id": 156353286,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1547801691
    },
    {
        "content": "<p>saves you a step</p>",
        "id": 156353291,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1547801699
    },
    {
        "content": "<p>Ok, fine. I'll rewrite that.</p>",
        "id": 156353310,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1547801740
    },
    {
        "content": "<p>besides, the two quantifier version is available as <code>subsingleton.eq</code></p>",
        "id": 156353313,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1547801753
    },
    {
        "content": "<p>Ok, sure.</p>",
        "id": 156353468,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1547801944
    },
    {
        "content": "<p>I don't have any better suggestions for the name than <code>unique</code></p>",
        "id": 156353487,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1547801960
    },
    {
        "content": "<p>but I think it might be usable as a regular type</p>",
        "id": 156353504,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1547802002
    },
    {
        "content": "<p>Ok, so <code>structure</code> instead of <code>class</code>?</p>",
        "id": 156353638,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1547802133
    },
    {
        "content": "<p>maybe a <code>class</code> on some days? If you use <code>attribute [class] unique</code> after the definition you can use it as a class when you feel like it but the projections won't have inst implicit</p>",
        "id": 156353676,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1547802208
    },
    {
        "content": "<p>Aah, maybe that helps.</p>",
        "id": 156353700,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1547802224
    },
    {
        "content": "<p>I guess I should make some simp-lemmas. And then hopefully <code>tidy</code> can work with this nicely.</p>",
        "id": 156353753,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1547802255
    },
    {
        "content": "<p>Here are some interesting facts: <code>subsingleton (unique A)</code>, and <code>unique (unique A) &lt;-&gt; unique A</code>, <code>unique A -&gt; unique B</code> if <code>f : A -&gt; B</code> is a surjection (not required to be a bijection)</p>",
        "id": 156353770,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1547802297
    },
    {
        "content": "<p>Yep... would you like all of those?</p>",
        "id": 156353798,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1547802329
    },
    {
        "content": "<p>if you are going to define a thing you should prove all the basic theorems</p>",
        "id": 156353802,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1547802347
    },
    {
        "content": "<p>Where should those go?</p>",
        "id": 156353873,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1547802376
    },
    {
        "content": "<p><code>logic/basic</code>?</p>",
        "id": 156353875,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1547802390
    },
    {
        "content": "<p>how about <code>logic/unique</code> unless there is a reason to merge it</p>",
        "id": 156353945,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1547802490
    },
    {
        "content": "<p>I don't think there are currently any new definitions in <code>logic/basic</code></p>",
        "id": 156353950,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1547802515
    },
    {
        "content": "<p>but <code>logic/basic</code> probably needs a refactor, it's a bit of a grab bag</p>",
        "id": 156353964,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1547802550
    },
    {
        "content": "<p>it literally has a <code>miscellaneous</code> section, that's never a good sign</p>",
        "id": 156353971,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1547802583
    },
    {
        "content": "<p>Ok, I can start <code>logic/unique</code></p>",
        "id": 156354031,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1547802618
    },
    {
        "content": "<p>If I do the <code>attribute [class]</code> thing, and I assume <code>[unique X]</code> then it still doesn't infer <code>inhabited X</code>. So I have to state those inferences by hand?</p>",
        "id": 156354050,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1547802660
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Should I include simp-lemmas like this?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">inhabited</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">to_inhabited</span> <span class=\"err\">‹</span><span class=\"n\">unique</span> <span class=\"n\">α</span><span class=\"err\">›</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">eq_default</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">default</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">uniq</span> <span class=\"bp\">_</span> <span class=\"n\">a</span>\n</pre></div>",
        "id": 156354355,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1547803069
    },
    {
        "content": "<p>you have to mark <code>unique.to_inhabited</code> as <code>instance</code></p>",
        "id": 156354405,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1547803107
    },
    {
        "content": "<p><code>eq_default</code> won't work</p>",
        "id": 156354416,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1547803136
    },
    {
        "content": "<p>neither will <code>default_eq</code></p>",
        "id": 156354429,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1547803148
    },
    {
        "content": "<p>Why not?</p>",
        "id": 156354443,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1547803190
    },
    {
        "content": "<p>It would be cool if <code>simp</code> would just simplify every element to the default.</p>",
        "id": 156354515,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1547803207
    },
    {
        "content": "<p>simp lemmas with a variable on the left trigger on anything</p>",
        "id": 156354520,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1547803213
    },
    {
        "content": "<p>at least that's what lean says; I don't see why that's a problem but it's explicitly rejected by <code>simp</code></p>",
        "id": 156354529,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1547803236
    },
    {
        "content": "<p>Aah, and simp doesn't know yet if the <code>unique X</code> instance will be found or not.</p>",
        "id": 156354548,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1547803257
    },
    {
        "content": "<p>well, it could just try to apply it on every term... you know I think this is a bad idea</p>",
        "id": 156354584,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1547803295
    },
    {
        "content": "<blockquote>\n<p>you have to mark <code>unique.to_inhabited</code> as <code>instance</code></p>\n</blockquote>\n<p>Like so: <code>attribute [instance] unique.to_inhabited</code>?</p>",
        "id": 156354647,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1547803332
    },
    {
        "content": "<p>yes</p>",
        "id": 156354650,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1547803337
    },
    {
        "content": "<p>But then</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">unique</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">inhabited</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span>\n</pre></div>\n\n\n<p>still fails.</p>",
        "id": 156354671,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1547803358
    },
    {
        "content": "<p>oh, I guess that's because the <code>unique</code> is explicit in <code>unique.to_inhabited</code>. So you will have to make an instance like you did</p>",
        "id": 156355179,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1547803850
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Should the following be done with instances or not?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">of_surjective</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">surjective</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">inhabited</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">inhabited</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">default</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">default</span> <span class=\"o\">}</span>\n</pre></div>",
        "id": 156356937,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1547805650
    },
    {
        "content": "<p><code>hf</code> is not required...</p>",
        "id": 156357666,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1547806609
    },
    {
        "content": "<p>Lol... I've been thinking too much about <code>unique</code> <span class=\"emoji emoji-1f600\" title=\"grinning\">:grinning:</span></p>",
        "id": 156357745,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1547806692
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110294\">@Johannes Hölzl</span> <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I pushed an update to <a href=\"https://github.com/leanprover/mathlib/issues/605\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/issues/605\">#605</a></p>",
        "id": 156357779,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1547806786
    },
    {
        "content": "<p>Woops, forgot to <code>git add</code> the new file.</p>",
        "id": 156358134,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1547807202
    }
]