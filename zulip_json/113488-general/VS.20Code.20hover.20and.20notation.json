[
    {
        "content": "<p>I just noticed something interesting with hovering over the <code>\\gg</code> notation in the category theory library. <a href=\"/user_uploads/3121/gUhpb7LFiM3VhCis4UcHOpgJ/tensorclip.png\" target=\"_blank\" title=\"tensorclip.png\">tensorclip.png</a> <a href=\"/user_uploads/3121/jjD_Bn8en27R70x3zqd4Z4SY/ggclip.png\" target=\"_blank\" title=\"ggclip.png\">ggclip.png</a> <a href=\"/user_uploads/3121/v-LcuFrGbcya2pqFoaduAAhe/compclip.png\" target=\"_blank\" title=\"compclip.png\">compclip.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/gUhpb7LFiM3VhCis4UcHOpgJ/tensorclip.png\" target=\"_blank\" title=\"tensorclip.png\"><img src=\"/user_uploads/3121/gUhpb7LFiM3VhCis4UcHOpgJ/tensorclip.png\"></a></div><div class=\"message_inline_image\"><a href=\"/user_uploads/3121/jjD_Bn8en27R70x3zqd4Z4SY/ggclip.png\" target=\"_blank\" title=\"ggclip.png\"><img src=\"/user_uploads/3121/jjD_Bn8en27R70x3zqd4Z4SY/ggclip.png\"></a></div><div class=\"message_inline_image\"><a href=\"/user_uploads/3121/v-LcuFrGbcya2pqFoaduAAhe/compclip.png\" target=\"_blank\" title=\"compclip.png\"><img src=\"/user_uploads/3121/v-LcuFrGbcya2pqFoaduAAhe/compclip.png\"></a></div><p>If I hover over the tensor <code>‚äó</code> symbol then I get simultaneously the keyboard shortcut for the notation and the type of the term which the notation stands for. I've noticed in the past that for some notation this doesn't work, one just gets the shortcut (which is annoying when you're trying to learn the category theory library and are trying to get on top of an infinite amount of notation). For example if you hover over the <code>\\gg</code> <code>‚â´</code> symbol then you only get its keyboard shortcut, not what it means. But I noticed today that if you hover slightly to the left of the symbol then you get the type of the term! Is this intended?</p>",
        "id": 190655935,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584291591
    },
    {
        "content": "<p>My guess is that VS Code (or vscode-lean) sees the \\gg symbol as multiple characters so the positions might get screwed up. Unicode strikes again!</p>",
        "id": 190656232,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1584291874
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> any ideas on whether we could fix this?</p>",
        "id": 190656328,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1584291966
    },
    {
        "content": "<p>One possible theory: the hover for the notation and the type have different ranges.  Vscode picks the first range.  Maybe it's also a problem that the range for the type is actually a position (I.e. length 0).</p>",
        "id": 190656621,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1584292382
    },
    {
        "content": "<p>Personally I'm just really pleased that I've stumbled upon this workaround :-)</p>",
        "id": 190656911,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584292788
    },
    {
        "content": "<p>This is a bit weird.  I see both hovers in <code>functor.lean</code> no matter which parts of the <code>&gt;&gt;</code> I'm on, but in <code>monoidal/category.lean</code> I have the problem for both <code>(X)</code> and <code>&gt;&gt;</code>.</p>",
        "id": 190657352,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1584293448
    },
    {
        "content": "<p>Ah, ah, oh no, arrgh.</p>",
        "id": 190657374,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1584293499
    },
    {
        "content": "<p>Of course it's a Unicode issue.  The hover works as expected for the <em>first</em> symbol on a line, but fails on the following ones.</p>",
        "id": 190657426,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1584293545
    },
    {
        "content": "<p>And this makes it obvious what the bug is: Lean counts <code>‚äó</code> as one character, vscode counts it as two characters.  So for the first symbol in a line the two counts coincide and hence the notation and the type hovers agree on the column.  For the second symbol, they are off by one character.</p>",
        "id": 190657496,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1584293646
    },
    {
        "content": "<p>is there a more permanent way to fix this? like making lean respect vscode counting conventions</p>",
        "id": 190657652,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584293830
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123965\">Bryan Gin-ge Chen</span> <a href=\"#narrow/stream/113488-general/topic/VS.20Code.20hover.20and.20notation/near/190656328\" title=\"#narrow/stream/113488-general/topic/VS.20Code.20hover.20and.20notation/near/190656328\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> any ideas on whether we could fix this?</p>\n</blockquote>\n<p>We need to translate the UTF-16 positions used in vscode to the Unicode codepoint positions used in Lean, and back.  So when we receive positions from Lean, we need to translate to UTF-16.  And the other way around when we ask lean something.</p>",
        "id": 190657655,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1584293848
    },
    {
        "content": "<p>Would it be better to do this in Lean itself or should we write something in lean-client-js?</p>",
        "id": 190657720,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1584293932
    },
    {
        "content": "<blockquote>\n<p>like making lean respect vscode counting conventions<br>\nWould it be better to do this in Lean itself</p>\n</blockquote>\n<p>I don't believe it is worth the effort to change Lean to internally store positions in UTF-16.  (It also seems just <em>wrong</em> to me.)</p>\n<p>We can put the translation code between the two \"formats\" on either the Lean side or the javascript side.  I don't know what will happen in 4, and for now it's probably easier to do in javascript.  Whether we do this in the <code>lean-client-js</code> library or in the vscode extension itself, I don't have a strong opinion on.</p>",
        "id": 190657836,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1584294106
    },
    {
        "content": "<p>I think there will be more and more ways of interacting with Lean besides the VScode extension (format_lean, leancrawler, machine learning, new pedagogical tools...) so it would be nice to fix the problem close to the Lean end, unless VS code is clearly wrong and Lean is right.</p>",
        "id": 190657927,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1584294237
    },
    {
        "content": "<p>OK, maybe <code>lean-client-js</code> is the right place then. I wasn't thinking of making any very deep changes to Lean, just adding some functions in <code>src/shell/server.cpp</code> to tweak the positions in the JSON output.</p>",
        "id": 190658029,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1584294328
    },
    {
        "content": "<p>I think everything using python to talk to Lean currently bypasses `lean-client-js.</p>",
        "id": 190658089,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1584294383
    },
    {
        "content": "<p><del>Oh, that's a good argument in favor of making changes to the Lean server then.</del></p>",
        "id": 190658114,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1584294422
    },
    {
        "content": "<p>In this case I think it's really vscode that is weird.  I think only javascript (and java) count <code>ùüô</code> as two characters.  Most other languages (including python for example) count it as one.</p>",
        "id": 190658133,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1584294476
    },
    {
        "content": "<p>See also this fun thread: <a href=\"https://github.com/microsoft/language-server-protocol/issues/376\" target=\"_blank\" title=\"https://github.com/microsoft/language-server-protocol/issues/376\">https://github.com/microsoft/language-server-protocol/issues/376</a></p>",
        "id": 190658291,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1584294680
    },
    {
        "content": "<p>Oh, I get it. Yes, I retract my earlier statements.</p>",
        "id": 190658298,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1584294684
    },
    {
        "content": "<p>I don't think that we should change this in the Lean server.  This just shifts the problem, then python tools will break.  I still think the easiest fix is in the vscode extension or lean-client-js.</p>",
        "id": 190658304,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1584294709
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> Any executive decisions on string length in Lean 4?  UTF-8 byte count, UTF-16 code units, Unicode codepoints, graphemes?</p>",
        "id": 190658373,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1584294787
    },
    {
        "content": "<p>UTF-8 byte count + Unicode codepoints</p>",
        "id": 190658392,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1584294839
    },
    {
        "content": "<p>Just to clarify: I made an error.  The character <code>‚äó</code> is represented as a single UTF-16 code unit and is hence fine.  However <code>ùüô</code> requires two UTF-16 code units and therefore causes the issue at hand.</p>",
        "id": 190658733,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1584295173
    },
    {
        "content": "<p>why does unicode codepoint count matter?</p>",
        "id": 190658955,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584295374
    },
    {
        "content": "<p>I see byte count for lean + utf-16 codepoints for vscode/js</p>",
        "id": 190659017,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584295403
    },
    {
        "content": "<p>the nature of the breakage seems to suggest that lean is sending utf-8 codepoint count to vscode</p>",
        "id": 190659108,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584295505
    },
    {
        "content": "<p>I dunno.  Some people probably expect <code>example : \"ùüô\".length = 1 := rfl</code> to work.</p>",
        "id": 190659110,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1584295510
    },
    {
        "content": "<p>It should, but that's another matter</p>",
        "id": 190659125,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584295531
    },
    {
        "content": "<p>That's just the behavior of the lean <code>string.length</code> function</p>",
        "id": 190659138,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584295551
    },
    {
        "content": "<p>There is no such thing as \"UTF-8 codepoint\".  There are Unicode codepoints, and there are UTF-8 bytes.</p>",
        "id": 190659140,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1584295557
    },
    {
        "content": "<p>I don't know what terminology to use here</p>",
        "id": 190659181,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584295575
    },
    {
        "content": "<p>Lean sends (number of) Unicode codepoints to vscode.  In vscode we interpret this number as a number of UTF-16 code units.</p>",
        "id": 190659199,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1584295611
    },
    {
        "content": "<p>I mean the thing where <code>ùüô</code> has 1 unicode codepoint, two utf-16 code units(?) and three bytes</p>",
        "id": 190659200,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584295612
    },
    {
        "content": "<p>Yes, that's the terminology.  But it's four bytes in UTF-8.</p>",
        "id": 190659217,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1584295644
    },
    {
        "content": "<p>why doesn't lean send byte counts via its RPC and client-js converts to utf-16</p>",
        "id": 190659233,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584295674
    },
    {
        "content": "<p>Because that would be just as awkward and Lean doesn't store the byte count anywhere?  Internally, Lean 3 only stores the <code>(line, column)</code> pair that you see in the error messages on the command line.  This <code>column</code> is calculated using Unicode code points.</p>",
        "id": 190659341,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1584295743
    },
    {
        "content": "<p>oh, I thought it was bytes internally</p>",
        "id": 190659349,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584295781
    },
    {
        "content": "<p>I'm glad category theory has found this practical application to coding.</p>",
        "id": 190660354,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584296860
    }
]