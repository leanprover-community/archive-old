[
    {
        "content": "<p>The following <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> immediately crashes for me with <code>Server has stopped due to signal SIGSEGV.</code>  If I comment out the <code>induction</code> line then it compiles ok.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.multiset.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">multiset.map_insert</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">multiset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">multiset.map</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">insert</span> <span class=\"n\">a</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">insert</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">multiset.map</span> <span class=\"n\">g</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">S</span> <span class=\"n\">using</span> <span class=\"n\">multiset.induction_on'</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 269486795,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1643233309
    },
    {
        "content": "<p>Unable to reproduce.<br>\nWindows 10, Lean: v3.38.0, Mathlib: 7ee41aab<br>\nI see error:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>induction tactic failed, failed to create new goal\n</code></pre></div>",
        "id": 269487358,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1643233611
    },
    {
        "content": "<p>And then, for no reason I can diagnose, it will sometimes stop causing a crash and will instead simply raise the error <code>induction tactic failed, failed to create new goal</code>.</p>",
        "id": 269487381,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1643233624
    },
    {
        "content": "<p>Segfaults here too, even with just <code>lean foo.lean</code>.</p>",
        "id": 269487462,
        "sender_full_name": "Julian Berman",
        "timestamp": 1643233674
    },
    {
        "content": "<p>And then closing and re-starting VS Code reproduces the crashing behaviour.</p>",
        "id": 269487476,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1643233681
    },
    {
        "content": "<p>A workaround is to use the <code>refine</code> tactic. I've run into <code>induction</code> bugs before (not crashes, but incorrect types), and that's generally been the advice.</p>",
        "id": 269487631,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1643233761
    },
    {
        "content": "<p>segfaults on my M1 mac, doesn't segfault on my Windows machine</p>",
        "id": 269487759,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1643233812
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Thread</span> <span class=\"mi\">2</span> <span class=\"n\">Crashed</span><span class=\"o\">:</span>\n<span class=\"mi\">0</span>   <span class=\"n\">lean</span>                                   <span class=\"mi\">0x104905ce0</span> <span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">rb_map</span><span class=\"bp\">&lt;</span><span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">name</span><span class=\"o\">,</span> <span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">metavar_decl</span><span class=\"o\">,</span> <span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">name_quick_cmp</span><span class=\"bp\">&gt;</span><span class=\"o\">::</span><span class=\"n\">find</span><span class=\"o\">(</span><span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">name</span> <span class=\"n\">const</span><span class=\"bp\">&amp;</span><span class=\"o\">)</span> <span class=\"n\">const</span> <span class=\"bp\">+</span> <span class=\"mi\">52</span>\n<span class=\"mi\">1</span>   <span class=\"n\">lean</span>                                   <span class=\"mi\">0x104905cd0</span> <span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">rb_map</span><span class=\"bp\">&lt;</span><span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">name</span><span class=\"o\">,</span> <span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">metavar_decl</span><span class=\"o\">,</span> <span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">name_quick_cmp</span><span class=\"bp\">&gt;</span><span class=\"o\">::</span><span class=\"n\">find</span><span class=\"o\">(</span><span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">name</span> <span class=\"n\">const</span><span class=\"bp\">&amp;</span><span class=\"o\">)</span> <span class=\"n\">const</span> <span class=\"bp\">+</span> <span class=\"mi\">36</span>\n<span class=\"mi\">2</span>   <span class=\"n\">lean</span>                                   <span class=\"mi\">0x104905b9c</span> <span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">metavar_context</span><span class=\"o\">::</span><span class=\"n\">find_metavar_decl</span><span class=\"o\">(</span><span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">expr</span> <span class=\"n\">const</span><span class=\"bp\">&amp;</span><span class=\"o\">)</span> <span class=\"n\">const</span> <span class=\"bp\">+</span> <span class=\"mi\">28</span>\n<span class=\"mi\">3</span>   <span class=\"n\">lean</span>                                   <span class=\"mi\">0x1049c4248</span> <span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">intron_core</span><span class=\"o\">(</span><span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">environment</span> <span class=\"n\">const</span><span class=\"bp\">&amp;</span><span class=\"o\">,</span> <span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">options</span> <span class=\"n\">const</span><span class=\"bp\">&amp;</span><span class=\"o\">,</span> <span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">metavar_context</span><span class=\"bp\">&amp;</span><span class=\"o\">,</span> <span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">expr</span> <span class=\"n\">const</span><span class=\"bp\">&amp;</span><span class=\"o\">,</span> <span class=\"n\">unsigned</span> <span class=\"n\">int</span><span class=\"o\">,</span> <span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">buffer</span><span class=\"bp\">&lt;</span><span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">name</span><span class=\"o\">,</span> <span class=\"mi\">16</span><span class=\"n\">u</span><span class=\"bp\">&gt;&amp;</span><span class=\"o\">,</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">__1</span><span class=\"o\">::</span><span class=\"n\">function</span><span class=\"bp\">&lt;</span><span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">name</span> <span class=\"o\">(</span><span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">local_context</span> <span class=\"n\">const</span><span class=\"bp\">&amp;</span><span class=\"o\">,</span> <span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">name</span> <span class=\"n\">const</span><span class=\"bp\">&amp;</span><span class=\"o\">)</span><span class=\"bp\">&gt;</span> <span class=\"n\">const</span><span class=\"bp\">&amp;</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">100</span>\n<span class=\"mi\">4</span>   <span class=\"n\">lean</span>                                   <span class=\"mi\">0x1049f4040</span> <span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">set_intron</span><span class=\"o\">(</span><span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">expr</span><span class=\"bp\">&amp;</span><span class=\"o\">,</span> <span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">type_context_old</span><span class=\"bp\">&amp;</span><span class=\"o\">,</span> <span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">options</span> <span class=\"n\">const</span><span class=\"bp\">&amp;</span><span class=\"o\">,</span> <span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">expr</span> <span class=\"n\">const</span><span class=\"bp\">&amp;</span><span class=\"o\">,</span> <span class=\"n\">unsigned</span> <span class=\"n\">int</span><span class=\"o\">,</span> <span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">optional</span><span class=\"bp\">&lt;</span><span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">name</span><span class=\"bp\">&gt;</span> <span class=\"n\">const</span><span class=\"bp\">&amp;</span><span class=\"o\">,</span> <span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">list</span><span class=\"bp\">&lt;</span><span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">name</span><span class=\"bp\">&gt;&amp;</span><span class=\"o\">,</span> <span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">buffer</span><span class=\"bp\">&lt;</span><span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">name</span><span class=\"o\">,</span> <span class=\"mi\">16</span><span class=\"n\">u</span><span class=\"bp\">&gt;&amp;</span><span class=\"o\">,</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">272</span>\n<span class=\"mi\">5</span>   <span class=\"n\">lean</span>                                   <span class=\"mi\">0x1049f125c</span> <span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">induction</span><span class=\"o\">(</span><span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">environment</span> <span class=\"n\">const</span><span class=\"bp\">&amp;</span><span class=\"o\">,</span> <span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">options</span> <span class=\"n\">const</span><span class=\"bp\">&amp;</span><span class=\"o\">,</span> <span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">transparency_mode</span> <span class=\"n\">const</span><span class=\"bp\">&amp;</span><span class=\"o\">,</span> <span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">metavar_context</span><span class=\"bp\">&amp;</span><span class=\"o\">,</span> <span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">expr</span> <span class=\"n\">const</span><span class=\"bp\">&amp;</span><span class=\"o\">,</span> <span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">expr</span> <span class=\"n\">const</span><span class=\"bp\">&amp;</span><span class=\"o\">,</span> <span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">name</span> <span class=\"n\">const</span><span class=\"bp\">&amp;</span><span class=\"o\">,</span> <span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">list</span><span class=\"bp\">&lt;</span><span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">name</span><span class=\"bp\">&gt;&amp;</span><span class=\"o\">,</span> <span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">list</span><span class=\"bp\">&lt;</span><span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">list</span><span class=\"bp\">&lt;</span><span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">expr</span><span class=\"bp\">&gt;</span> <span class=\"bp\">&gt;*</span><span class=\"o\">,</span> <span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">list</span><span class=\"bp\">&lt;</span><span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">rb_map</span><span class=\"bp\">&lt;</span><span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">name</span><span class=\"o\">,</span> <span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">expr</span><span class=\"o\">,</span> <span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">name_quick_cmp</span><span class=\"bp\">&gt;</span> <span class=\"bp\">&gt;*</span><span class=\"o\">,</span> <span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">buffer</span><span class=\"bp\">&lt;</span><span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">name</span><span class=\"o\">,</span> <span class=\"mi\">16</span><span class=\"n\">u</span><span class=\"bp\">&gt;&amp;</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">4684</span>\n<span class=\"mi\">6</span>   <span class=\"n\">lean</span>                                   <span class=\"mi\">0x1049f4490</span> <span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">induction_tactic_core</span><span class=\"o\">(</span><span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">transparency_mode</span> <span class=\"n\">const</span><span class=\"bp\">&amp;</span><span class=\"o\">,</span> <span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">expr</span> <span class=\"n\">const</span><span class=\"bp\">&amp;</span><span class=\"o\">,</span> <span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">name</span> <span class=\"n\">const</span><span class=\"bp\">&amp;</span><span class=\"o\">,</span> <span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">list</span><span class=\"bp\">&lt;</span><span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">name</span><span class=\"bp\">&gt;</span> <span class=\"n\">const</span><span class=\"bp\">&amp;</span><span class=\"o\">,</span> <span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">tactic_state</span> <span class=\"n\">const</span><span class=\"bp\">&amp;</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">284</span>\n<span class=\"mi\">7</span>   <span class=\"n\">lean</span>                                   <span class=\"mi\">0x1049f5188</span> <span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">tactic_induction</span><span class=\"o\">(</span><span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">vm_obj</span> <span class=\"n\">const</span><span class=\"bp\">&amp;</span><span class=\"o\">,</span> <span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">vm_obj</span> <span class=\"n\">const</span><span class=\"bp\">&amp;</span><span class=\"o\">,</span> <span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">vm_obj</span> <span class=\"n\">const</span><span class=\"bp\">&amp;</span><span class=\"o\">,</span> <span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">vm_obj</span> <span class=\"n\">const</span><span class=\"bp\">&amp;</span><span class=\"o\">,</span> <span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">vm_obj</span> <span class=\"n\">const</span><span class=\"bp\">&amp;</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">216</span>\n<span class=\"mi\">8</span>   <span class=\"n\">lean</span>                                   <span class=\"mi\">0x104be691c</span> <span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">vm_state</span><span class=\"o\">::</span><span class=\"n\">invoke_fn</span><span class=\"o\">(</span><span class=\"n\">void</span><span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">unsigned</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">2488</span>\n<span class=\"mi\">9</span>   <span class=\"n\">lean</span>                                   <span class=\"mi\">0x104be9334</span> <span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">vm_state</span><span class=\"o\">::</span><span class=\"n\">invoke_cfun</span><span class=\"o\">(</span><span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">vm_decl</span> <span class=\"n\">const</span><span class=\"bp\">&amp;</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">96</span>\n<span class=\"mi\">10</span>  <span class=\"n\">lean</span>                                   <span class=\"mi\">0x104be7f20</span> <span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">vm_state</span><span class=\"o\">::</span><span class=\"n\">run</span><span class=\"o\">()</span> <span class=\"bp\">+</span> <span class=\"mi\">1968</span>\n<span class=\"mi\">11</span>  <span class=\"n\">lean</span>                                   <span class=\"mi\">0x104be750c</span> <span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">vm_state</span><span class=\"o\">::</span><span class=\"n\">invoke_closure</span><span class=\"o\">(</span><span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">vm_obj</span> <span class=\"n\">const</span><span class=\"bp\">&amp;</span><span class=\"o\">,</span> <span class=\"n\">unsigned</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">328</span>\n<span class=\"mi\">12</span>  <span class=\"n\">lean</span>                                   <span class=\"mi\">0x104be9da0</span> <span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">vm_state</span><span class=\"o\">::</span><span class=\"n\">invoke</span><span class=\"o\">(</span><span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">vm_obj</span> <span class=\"n\">const</span><span class=\"bp\">&amp;</span><span class=\"o\">,</span> <span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">vm_obj</span> <span class=\"n\">const</span><span class=\"bp\">&amp;</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">600</span>\n<span class=\"mi\">13</span>  <span class=\"n\">lean</span>                                   <span class=\"mi\">0x1049b3be0</span> <span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">tactic_with_ast</span><span class=\"o\">(</span><span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">vm_obj</span> <span class=\"n\">const</span><span class=\"bp\">&amp;</span><span class=\"o\">,</span> <span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">vm_obj</span> <span class=\"n\">const</span><span class=\"bp\">&amp;</span><span class=\"o\">,</span> <span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">vm_obj</span> <span class=\"n\">const</span><span class=\"bp\">&amp;</span><span class=\"o\">,</span> <span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">vm_obj</span> <span class=\"n\">const</span><span class=\"bp\">&amp;</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">148</span>\n<span class=\"mi\">14</span>  <span class=\"n\">lean</span>                                   <span class=\"mi\">0x104be658c</span> <span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">vm_state</span><span class=\"o\">::</span><span class=\"n\">invoke_fn</span><span class=\"o\">(</span><span class=\"n\">void</span><span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">unsigned</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1576</span>\n<span class=\"mi\">15</span>  <span class=\"n\">lean</span>                                   <span class=\"mi\">0x104be9334</span> <span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">vm_state</span><span class=\"o\">::</span><span class=\"n\">invoke_cfun</span><span class=\"o\">(</span><span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">vm_decl</span> <span class=\"n\">const</span><span class=\"bp\">&amp;</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">96</span>\n<span class=\"mi\">16</span>  <span class=\"n\">lean</span>                                   <span class=\"mi\">0x104be7f20</span> <span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">vm_state</span><span class=\"o\">::</span><span class=\"n\">run</span><span class=\"o\">()</span> <span class=\"bp\">+</span> <span class=\"mi\">1968</span>\n<span class=\"mi\">17</span>  <span class=\"n\">lean</span>                                   <span class=\"mi\">0x104be750c</span> <span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">vm_state</span><span class=\"o\">::</span><span class=\"n\">invoke_closure</span><span class=\"o\">(</span><span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">vm_obj</span> <span class=\"n\">const</span><span class=\"bp\">&amp;</span><span class=\"o\">,</span> <span class=\"n\">unsigned</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">328</span>\n<span class=\"mi\">18</span>  <span class=\"n\">lean</span>                                   <span class=\"mi\">0x104be9da0</span> <span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">vm_state</span><span class=\"o\">::</span><span class=\"n\">invoke</span><span class=\"o\">(</span><span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">vm_obj</span> <span class=\"n\">const</span><span class=\"bp\">&amp;</span><span class=\"o\">,</span> <span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">vm_obj</span> <span class=\"n\">const</span><span class=\"bp\">&amp;</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">600</span>\n<span class=\"mi\">19</span>  <span class=\"n\">lean</span>                                   <span class=\"mi\">0x104c27a20</span> <span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">scope_trace</span><span class=\"o\">(</span><span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">vm_obj</span> <span class=\"n\">const</span><span class=\"bp\">&amp;</span><span class=\"o\">,</span> <span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">vm_obj</span> <span class=\"n\">const</span><span class=\"bp\">&amp;</span><span class=\"o\">,</span> <span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">vm_obj</span> <span class=\"n\">const</span><span class=\"bp\">&amp;</span><span class=\"o\">,</span> <span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">vm_obj</span> <span class=\"n\">const</span><span class=\"bp\">&amp;</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">308</span>\n<span class=\"mi\">20</span>  <span class=\"n\">lean</span>                                   <span class=\"mi\">0x104be658c</span> <span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">vm_state</span><span class=\"o\">::</span><span class=\"n\">invoke_fn</span><span class=\"o\">(</span><span class=\"n\">void</span><span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">unsigned</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1576</span>\n<span class=\"mi\">21</span>  <span class=\"n\">lean</span>                                   <span class=\"mi\">0x104be9334</span> <span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">vm_state</span><span class=\"o\">::</span><span class=\"n\">invoke_cfun</span><span class=\"o\">(</span><span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">vm_decl</span> <span class=\"n\">const</span><span class=\"bp\">&amp;</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">96</span>\n<span class=\"mi\">22</span>  <span class=\"n\">lean</span>                                   <span class=\"mi\">0x104be7f20</span> <span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">vm_state</span><span class=\"o\">::</span><span class=\"n\">run</span><span class=\"o\">()</span> <span class=\"bp\">+</span> <span class=\"mi\">1968</span>\n<span class=\"mi\">23</span>  <span class=\"n\">lean</span>                                   <span class=\"mi\">0x104be750c</span> <span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">vm_state</span><span class=\"o\">::</span><span class=\"n\">invoke_closure</span><span class=\"o\">(</span><span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">vm_obj</span> <span class=\"n\">const</span><span class=\"bp\">&amp;</span><span class=\"o\">,</span> <span class=\"n\">unsigned</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">328</span>\n<span class=\"mi\">24</span>  <span class=\"n\">lean</span>                                   <span class=\"mi\">0x104be9da0</span> <span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">vm_state</span><span class=\"o\">::</span><span class=\"n\">invoke</span><span class=\"o\">(</span><span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">vm_obj</span> <span class=\"n\">const</span><span class=\"bp\">&amp;</span><span class=\"o\">,</span> <span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">vm_obj</span> <span class=\"n\">const</span><span class=\"bp\">&amp;</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">600</span>\n<span class=\"mi\">25</span>  <span class=\"n\">lean</span>                                   <span class=\"mi\">0x1049a3d04</span> <span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">interaction_monad</span><span class=\"bp\">&lt;</span><span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">tactic_state</span><span class=\"bp\">&gt;</span><span class=\"o\">::</span><span class=\"n\">evaluator</span><span class=\"o\">::</span><span class=\"n\">operator</span><span class=\"o\">()(</span><span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">expr</span> <span class=\"n\">const</span><span class=\"bp\">&amp;</span><span class=\"o\">,</span> <span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">buffer</span><span class=\"bp\">&lt;</span><span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">vm_obj</span><span class=\"o\">,</span> <span class=\"mi\">16</span><span class=\"n\">u</span><span class=\"bp\">&gt;</span> <span class=\"n\">const</span><span class=\"bp\">&amp;</span><span class=\"o\">,</span> <span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">tactic_state</span> <span class=\"n\">const</span><span class=\"bp\">&amp;</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">372</span>\n<span class=\"mi\">26</span>  <span class=\"n\">lean</span>                                   <span class=\"mi\">0x104a708d4</span> <span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">tactic_evaluator</span><span class=\"o\">::</span><span class=\"n\">operator</span><span class=\"o\">()(</span><span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">expr</span> <span class=\"n\">const</span><span class=\"bp\">&amp;</span><span class=\"o\">,</span> <span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">buffer</span><span class=\"bp\">&lt;</span><span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">vm_obj</span><span class=\"o\">,</span> <span class=\"mi\">16</span><span class=\"n\">u</span><span class=\"bp\">&gt;</span> <span class=\"n\">const</span><span class=\"bp\">&amp;</span><span class=\"o\">,</span> <span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">tactic_state</span> <span class=\"n\">const</span><span class=\"bp\">&amp;</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">28</span>\n<span class=\"mi\">27</span>  <span class=\"n\">lean</span>                                   <span class=\"mi\">0x1049a4254</span> <span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">interaction_monad</span><span class=\"bp\">&lt;</span><span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">tactic_state</span><span class=\"bp\">&gt;</span><span class=\"o\">::</span><span class=\"n\">evaluator</span><span class=\"o\">::</span><span class=\"n\">operator</span><span class=\"o\">()(</span><span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">expr</span> <span class=\"n\">const</span><span class=\"bp\">&amp;</span><span class=\"o\">,</span> <span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">tactic_state</span> <span class=\"n\">const</span><span class=\"bp\">&amp;</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">80</span>\n<span class=\"mi\">28</span>  <span class=\"n\">lean</span>                                   <span class=\"mi\">0x104dd11a8</span> <span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">elaborator</span><span class=\"o\">::</span><span class=\"n\">invoke_tactic</span><span class=\"o\">(</span><span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">expr</span> <span class=\"n\">const</span><span class=\"bp\">&amp;</span><span class=\"o\">,</span> <span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">expr</span> <span class=\"n\">const</span><span class=\"bp\">&amp;</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">472</span>\n<span class=\"mi\">29</span>  <span class=\"n\">lean</span>                                   <span class=\"mi\">0x104dd1c58</span> <span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">elaborator</span><span class=\"o\">::</span><span class=\"n\">synthesize_using_tactics</span><span class=\"o\">()</span> <span class=\"bp\">+</span> <span class=\"mi\">156</span>\n<span class=\"mi\">30</span>  <span class=\"n\">lean</span>                                   <span class=\"mi\">0x104db8334</span> <span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">elaborator</span><span class=\"o\">::</span><span class=\"n\">synthesize</span><span class=\"o\">()</span> <span class=\"bp\">+</span> <span class=\"mi\">88</span>\n<span class=\"mi\">31</span>  <span class=\"n\">lean</span>                                   <span class=\"mi\">0x104dd3330</span> <span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">elaborator</span><span class=\"o\">::</span><span class=\"n\">elaborate_with_type</span><span class=\"o\">(</span><span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">expr</span> <span class=\"n\">const</span><span class=\"bp\">&amp;</span><span class=\"o\">,</span> <span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">expr</span> <span class=\"n\">const</span><span class=\"bp\">&amp;</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">528</span>\n<span class=\"mi\">32</span>  <span class=\"n\">lean</span>                                   <span class=\"mi\">0x104e0c540</span> <span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">task_builder</span><span class=\"bp\">&lt;</span><span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">expr</span><span class=\"bp\">&gt;</span><span class=\"o\">::</span><span class=\"n\">base_task_imp</span><span class=\"bp\">&lt;</span><span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">single_definition_cmd_core</span><span class=\"o\">(</span><span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">parser_info</span><span class=\"bp\">&amp;</span><span class=\"o\">,</span> <span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">decl_cmd_kind</span><span class=\"o\">,</span> <span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">ast_data</span><span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">cmd_meta</span><span class=\"o\">)::</span><span class=\"bp\">$</span><span class=\"n\">_0</span><span class=\"o\">::</span><span class=\"n\">operator</span><span class=\"o\">()(</span><span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"n\">const</span><span class=\"o\">::</span><span class=\"bp\">'</span><span class=\"n\">lambda'</span><span class=\"o\">()</span><span class=\"bp\">&gt;</span><span class=\"o\">::</span><span class=\"n\">execute</span><span class=\"o\">(</span><span class=\"n\">void</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">704</span>\n<span class=\"mi\">33</span>  <span class=\"n\">lean</span>                                   <span class=\"mi\">0x10496e6c8</span> <span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">library_scopes_imp</span><span class=\"o\">::</span><span class=\"n\">execute</span><span class=\"o\">(</span><span class=\"n\">void</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">100</span>\n<span class=\"mi\">34</span>  <span class=\"n\">lean</span>                                   <span class=\"mi\">0x1047a1ac0</span> <span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">cancellable_task_imp</span><span class=\"o\">::</span><span class=\"n\">execute</span><span class=\"o\">(</span><span class=\"n\">void</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">60</span>\n<span class=\"mi\">35</span>  <span class=\"n\">lean</span>                                   <span class=\"mi\">0x1047e2eb8</span> <span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">task_cell</span><span class=\"bp\">&lt;</span><span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">expr</span><span class=\"bp\">&gt;</span><span class=\"o\">::</span><span class=\"n\">execute</span><span class=\"o\">()</span> <span class=\"bp\">+</span> <span class=\"mi\">144</span>\n<span class=\"mi\">36</span>  <span class=\"n\">lean</span>                                   <span class=\"mi\">0x1047a14c4</span> <span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">task_queue</span><span class=\"o\">::</span><span class=\"n\">execute</span><span class=\"o\">(</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">__1</span><span class=\"o\">::</span><span class=\"n\">shared_ptr</span><span class=\"bp\">&lt;</span><span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">gtask_cell</span><span class=\"bp\">&gt;</span> <span class=\"n\">const</span><span class=\"bp\">&amp;</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">396</span>\n<span class=\"mi\">37</span>  <span class=\"n\">lean</span>                                   <span class=\"mi\">0x10496c5dc</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">__1</span><span class=\"o\">::</span><span class=\"n\">__function</span><span class=\"o\">::</span><span class=\"n\">__func</span><span class=\"bp\">&lt;</span><span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">mt_task_queue</span><span class=\"o\">::</span><span class=\"n\">spawn_worker</span><span class=\"o\">()::</span><span class=\"bp\">$</span><span class=\"n\">_2</span><span class=\"o\">,</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">__1</span><span class=\"o\">::</span><span class=\"n\">allocator</span><span class=\"bp\">&lt;</span><span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">mt_task_queue</span><span class=\"o\">::</span><span class=\"n\">spawn_worker</span><span class=\"o\">()::</span><span class=\"bp\">$</span><span class=\"n\">_2</span><span class=\"bp\">&gt;</span><span class=\"o\">,</span> <span class=\"n\">void</span> <span class=\"o\">()</span><span class=\"bp\">&gt;</span><span class=\"o\">::</span><span class=\"n\">operator</span><span class=\"o\">()()</span> <span class=\"bp\">+</span> <span class=\"mi\">668</span>\n<span class=\"mi\">38</span>  <span class=\"n\">lean</span>                                   <span class=\"mi\">0x10479e098</span> <span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">lthread</span><span class=\"o\">::</span><span class=\"n\">imp</span><span class=\"o\">::</span><span class=\"n\">_main</span><span class=\"o\">(</span><span class=\"n\">void</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">44</span>\n<span class=\"mi\">39</span>  <span class=\"n\">libsystem_pthread.dylib</span>                <span class=\"mi\">0x190ca5240</span> <span class=\"n\">_pthread_start</span> <span class=\"bp\">+</span> <span class=\"mi\">148</span>\n<span class=\"mi\">40</span>  <span class=\"n\">libsystem_pthread.dylib</span>                <span class=\"mi\">0x190ca0024</span> <span class=\"n\">thread_start</span> <span class=\"bp\">+</span> <span class=\"mi\">8</span>\n</code></pre></div>",
        "id": 269487775,
        "sender_full_name": "Julian Berman",
        "timestamp": 1643233819
    },
    {
        "content": "<p>it's also platform specific, yipee</p>",
        "id": 269487776,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1643233820
    },
    {
        "content": "<p>Just to confirm that it's not specific to <code>multiset</code>, the following also crashes when the <code>induction</code> line is uncommented:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.big_operators.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_monoid</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">g1</span> <span class=\"n\">g2</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">g1</span> <span class=\"n\">a</span> <span class=\"bp\">∣</span> <span class=\"n\">g2</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">S.prod</span> <span class=\"n\">g1</span> <span class=\"bp\">∣</span> <span class=\"n\">S.prod</span> <span class=\"n\">g2</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"c1\">-- induction S using finset.induction_on',</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 269487915,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1643233911
    },
    {
        "content": "<p>(In fact this <code>finset</code> example is where I first encountered this problem while editing <a href=\"https://github.com/leanprover-community/mathlib/pull/11521\">#11521</a>, but at the time I couldn't reproduce it.)</p>",
        "id": 269488088,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1643233989
    },
    {
        "content": "<p>Here's the <code>refine</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.multiset.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">multiset.map_insert</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">multiset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">multiset.map</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">insert</span> <span class=\"n\">a</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">insert</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">multiset.map</span> <span class=\"n\">g</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">revert</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"n\">multiset.induction_on'</span> <span class=\"n\">S</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">b</span> <span class=\"n\">s</span> <span class=\"n\">hb</span> <span class=\"n\">hs</span> <span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"gr\">sorry</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n    <span class=\"gr\">sorry</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 269488117,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1643234004
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"422543\">@Stuart Presnell</span> If you change that <code>example</code> to <code>lemma foo</code> does it still crash?</p>",
        "id": 269488276,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1643234075
    },
    {
        "content": "<p>It does</p>",
        "id": 269488321,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1643234101
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/113488-general/topic/Crash.20with.20induction_on'/near/269487759\">said</a>:</p>\n<blockquote>\n<p>segfaults on my M1 mac, doesn't segfault on my Windows machine</p>\n</blockquote>\n<p>What editor are you using on the Windows machine?  Does the example crash when the editor is closed and newly re-started?</p>",
        "id": 269488605,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1643234221
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"422543\">Stuart Presnell</span> <a href=\"#narrow/stream/113488-general/topic/Crash.20with.20induction_on'/near/269488605\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/113488-general/topic/Crash.20with.20induction_on'/near/269487759\">said</a>:</p>\n<blockquote>\n<p>segfaults on my M1 mac, doesn't segfault on my Windows machine</p>\n</blockquote>\n<p>What editor are you using on the Windows machine?  Does the example crash when the editor is closed and newly re-started?</p>\n</blockquote>\n<p>in VSCode 1.63.2, mathlib PR 946454a830, this does not crash on my windows machine. (Lean 3.38.0). On my m1 mac, it does; exact same Lean version (hand compiled because I don't want rosetta, but otherwise the same)</p>",
        "id": 269490518,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1643235101
    },
    {
        "content": "<p>Don't use <code>induction using</code>, it's flaky and more broken than I thought</p>",
        "id": 269491919,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643235715
    },
    {
        "content": "<p>&lt;deleted, I didn't realize there were more&gt;</p>",
        "id": 269492019,
        "sender_full_name": "Julian Berman",
        "timestamp": 1643235766
    },
    {
        "content": "<p>What happens if you say classical before induction using, that might help?</p>",
        "id": 269497203,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1643238758
    },
    {
        "content": "<p>Is the lean4 version of <code>induction using</code> better?</p>",
        "id": 269530592,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1643264603
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> <a href=\"#narrow/stream/113488-general/topic/Crash.20with.20induction_on'/near/269497203\">said</a>:</p>\n<blockquote>\n<p>What happens if you say classical before induction using, that might help?</p>\n</blockquote>\n<p>Thanks for the suggestion.  I've just tried that and both of the above examples still crash with the addition of <code>classical</code>.</p>",
        "id": 269546589,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1643276602
    }
]