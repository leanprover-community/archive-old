[
    {
        "content": "<p>Suppose that <code>A</code> is an <code>R</code>-algebra. Would <code>is_scalar_tower R A A</code> be an evil instance?<br>\n(We already have <code>is_scalar_tower R R A</code>.)</p>",
        "id": 214448148,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603571771
    },
    {
        "content": "<p>The point was to try and implement commutative triangles and that's certainly a commutative triangle...</p>",
        "id": 214448363,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1603572103
    },
    {
        "content": "<p>What about when R=A?</p>",
        "id": 214448419,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1603572147
    },
    {
        "content": "<p>Yup, that's exactly the case I'm worried about</p>",
        "id": 214448475,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603572243
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> taught me <a href=\"https://github.com/leanprover-community/mathlib/pull/4762#discussion_r511498954\">today</a> that when dealing with <code>Prop</code>, it doesn't matter to have duplicate instances.</p>",
        "id": 214448509,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1603572254
    },
    {
        "content": "<p>Right, but I'm fearing that things might start to loop at some point</p>",
        "id": 214448518,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603572282
    },
    {
        "content": "<p>Do you mean, if Lean is trying to find an instance of <code>is_scalar_tower</code>, knows about transitivity so is trying to fill in a gap using transitivity, but gets stuck on the self-instance of <code>is_scalar_tower</code>?</p>",
        "id": 214448635,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1603572399
    },
    {
        "content": "<p>Maybe... I just get confused when thinking about these issues. They ought not to exist <span aria-label=\"confused\" class=\"emoji emoji-1f615\" role=\"img\" title=\"confused\">:confused:</span></p>",
        "id": 214448998,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603572877
    },
    {
        "content": "<p>This is ok as long as we don't define transitive insurance at the same time.</p>",
        "id": 214450863,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603575407
    },
    {
        "content": "<p>Otherwise we need to do something like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_coe_t\">docs#has_coe_t</a></p>",
        "id": 214450892,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603575474
    },
    {
        "content": "<p>If we think of <code>R</code> as fixed then we can reuse the method of <code>has_coe_t</code> and <code>R A A</code> is the base case.</p>",
        "id": 214452055,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603577117
    },
    {
        "content": "<p>If we let <code>R</code> vary as well... then it looks like some 2-dimensional version and I don't know what happens.</p>",
        "id": 214452064,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603577139
    },
    {
        "content": "<p>How did this discussion end up? I have lean complaining that it is missing <code>is_scalar_tower α β β</code> and I wonder if I should add it explicitely as an assumption.</p>",
        "id": 244411344,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1625054341
    },
    {
        "content": "<p>I think we already have an instance for <code>is_scalar_tower R A A</code>, but it might need an import</p>",
        "id": 244412388,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625054897
    },
    {
        "content": "<p>Recently <span class=\"user-mention\" data-user-id=\"240862\">@Oliver Nash</span> and I have been using <code>is_scalar_tower α β β</code> and <code>smul_comm_class α β β</code> to mean a weaker version of <code>algebra α β</code></p>",
        "id": 244412448,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625054933
    },
    {
        "content": "<p>Can you point out at where you used it, so that I can check what to import?</p>",
        "id": 244412681,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1625055065
    },
    {
        "content": "<p>No import needed, its <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_scalar_tower.right\">docs#is_scalar_tower.right</a> which is in the same file as the one that defines <code>algebra</code>.</p>",
        "id": 244415560,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625056447
    }
]