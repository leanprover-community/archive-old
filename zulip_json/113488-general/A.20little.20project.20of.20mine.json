[
    {
        "content": "<p>hello, I want to share a little project I did in lean 4. Its nowhere near complete, nor do i plan on finishing it. It has some useful elements, that could be used in a project, like heterogeneous lists, range list syntax, accessing nth element of product; but in truth this was just a project to get some experience in lean 4, and I think it did just that. I also want to thank everyone who helped me on the zulip. This used to be <code>lean4-Tuple</code>, but now it is much more. Here is the repo: <a href=\"https://github.com/crabbo-rave/Soup\">https://github.com/crabbo-rave/Soup</a></p>",
        "id": 276094734,
        "sender_full_name": "Joseph O",
        "timestamp": 1647887333
    },
    {
        "content": "<p>I wouldn't mind any feadback</p>",
        "id": 276094761,
        "sender_full_name": "Joseph O",
        "timestamp": 1647887345
    },
    {
        "content": "<p>Nice! Good learning experience. I'm glad to see your questions and the problems you face motivating some improvements on Lean 4. The piece of feedback that I have, just from looking at the README, is that you ate up multiple syntax variations to do the same thing here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"bp\">⟪</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"s2\">\"2\"</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">⟫.</span><span class=\"n\">nth</span> <span class=\"mi\">1</span> <span class=\"c1\">-- \"2\"</span>\n<span class=\"k\">#eval</span> <span class=\"bp\">⟪</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"s2\">\"2\"</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">⟫#</span><span class=\"mi\">1</span>\n<span class=\"k\">#eval</span> <span class=\"bp\">⟪</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"s2\">\"2\"</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">⟫@</span><span class=\"mi\">1</span>\n<span class=\"k\">#eval</span> <span class=\"bp\">⟪</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"s2\">\"2\"</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">⟫</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]</span>\n<span class=\"k\">#eval</span> <span class=\"bp\">⟪</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"s2\">\"2\"</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">⟫</span><span class=\"o\">::</span><span class=\"mi\">1</span>\n<span class=\"k\">#eval</span> <span class=\"bp\">⟪</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"s2\">\"2\"</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">⟫∧</span><span class=\"mi\">1</span>\n</code></pre></div>\n<p>It's usually better to standardize an unique notation to avoid coding styles hell</p>",
        "id": 276095652,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647887658
    },
    {
        "content": "<p>Oh yeah, the readme is very old</p>",
        "id": 276095830,
        "sender_full_name": "Joseph O",
        "timestamp": 1647887727
    },
    {
        "content": "<p>The syntax has changed. It just uses brackets now.</p>",
        "id": 276095853,
        "sender_full_name": "Joseph O",
        "timestamp": 1647887738
    },
    {
        "content": "<p>I updated it</p>",
        "id": 276096015,
        "sender_full_name": "Joseph O",
        "timestamp": 1647887799
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/113488-general/topic/A.20little.20project.20of.20mine/near/276095652\">said</a>:</p>\n<blockquote>\n<p>Nice! Good learning experience. I'm glad to see your questions and the problems you face motivating some improvements on Lean 4. The piece of feedback that I have, just from looking at the README, is that you ate up multiple syntax variations to do the same thing here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"bp\">⟪</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"s2\">\"2\"</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">⟫.</span><span class=\"n\">nth</span> <span class=\"mi\">1</span> <span class=\"c1\">-- \"2\"</span>\n<span class=\"k\">#eval</span> <span class=\"bp\">⟪</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"s2\">\"2\"</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">⟫#</span><span class=\"mi\">1</span>\n<span class=\"k\">#eval</span> <span class=\"bp\">⟪</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"s2\">\"2\"</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">⟫@</span><span class=\"mi\">1</span>\n<span class=\"k\">#eval</span> <span class=\"bp\">⟪</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"s2\">\"2\"</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">⟫</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]</span>\n<span class=\"k\">#eval</span> <span class=\"bp\">⟪</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"s2\">\"2\"</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">⟫</span><span class=\"o\">::</span><span class=\"mi\">1</span>\n<span class=\"k\">#eval</span> <span class=\"bp\">⟪</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"s2\">\"2\"</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">⟫∧</span><span class=\"mi\">1</span>\n</code></pre></div>\n<p>It's usually better to standardize an unique notation to avoid coding styles hell</p>\n</blockquote>\n<p>Now i only have 3</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">notation</span><span class=\"o\">:</span><span class=\"mi\">90</span> <span class=\"n\">p</span> <span class=\"s2\">\"#\"</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">nth</span> <span class=\"n\">p</span> <span class=\"bp\">#</span><span class=\"n\">i</span>\n<span class=\"kd\">notation</span><span class=\"o\">:</span><span class=\"mi\">90</span> <span class=\"n\">p</span> <span class=\"s2\">\"@\"</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">nth</span> <span class=\"n\">p</span> <span class=\"bp\">#</span><span class=\"n\">i</span>\n<span class=\"kd\">notation</span><span class=\"o\">:</span><span class=\"mi\">90</span> <span class=\"n\">p</span> <span class=\"s2\">\"[\"</span> <span class=\"n\">i</span> <span class=\"s2\">\"]\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">nth</span> <span class=\"n\">p</span> <span class=\"bp\">#</span><span class=\"n\">i</span>\n</code></pre></div>\n<p>Just for different programmers</p>",
        "id": 276096297,
        "sender_full_name": "Joseph O",
        "timestamp": 1647887941
    },
    {
        "content": "<p>Languages that allow the creation of your own syntax/macros are usually feared because \"Just for different programmers\" can turn into \"Just for different programmers not to understand each other\". Taking Lean 4 source code as an example, I like that <code>#[...]</code> is <em>the way</em> to represent arrays and that I don't need to know other syntax to recognize them</p>",
        "id": 276097911,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647888686
    },
    {
        "content": "<p>I don't mean to sound blunt though <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> <br>\nIt's your creation afterall, your library. I'm just expressing a worry that would come to my mind if I were to use it as a dependency</p>",
        "id": 276098658,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647889056
    },
    {
        "content": "<p>I see. Which do you suggest I stick to?</p>",
        "id": 276099868,
        "sender_full_name": "Joseph O",
        "timestamp": 1647889608
    },
    {
        "content": "<p>That's totally up to you <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 276100207,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647889802
    },
    {
        "content": "<p><code>@</code> is pretty neat</p>",
        "id": 276100479,
        "sender_full_name": "Joseph O",
        "timestamp": 1647889931
    },
    {
        "content": "<p>I would suggest only <code>l[i]</code> if you want a notation like this, and you should use <code>getOp</code> which magically enables this notation</p>",
        "id": 276121114,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647900976
    },
    {
        "content": "<p>the reason is that, like Arthur says, there is importance in consistency across the language to help people learn things</p>",
        "id": 276121220,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647901069
    },
    {
        "content": "<p>and this syntax is already used for getting elements of an array</p>",
        "id": 276121235,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647901081
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/A.20little.20project.20of.20mine/near/276121114\">said</a>:</p>\n<blockquote>\n<p>I would suggest only <code>l[i]</code> if you want a notation like this, and you should use <code>getOp</code> which magically enables this notation</p>\n</blockquote>\n<p>What is getOp?</p>",
        "id": 276130929,
        "sender_full_name": "Joseph O",
        "timestamp": 1647908874
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/blob/87bb299f085cc46ac9306820b85eecc59d447e85/src/Init/Data/String/Basic.lean#L55\">Example</a>. Apparently defining/implementing a <code>getOp</code> function in the namespace of your type allows you to do <code>[i]</code> on the terms of your type automagically:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">MyType</span> <span class=\"bp\">|</span> <span class=\"n\">hi</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">MyType.getOp</span> <span class=\"o\">(</span><span class=\"n\">self</span> <span class=\"o\">:</span> <span class=\"n\">MyType</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">idx</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">idx</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">MyType.hi</span><span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"c1\">-- 2</span>\n<span class=\"k\">#eval</span> <span class=\"n\">MyType.hi</span><span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"o\">]</span> <span class=\"c1\">-- 3</span>\n</code></pre></div>",
        "id": 276132543,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647910724
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/113488-general/topic/A.20little.20project.20of.20mine/near/276132543\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/leanprover/lean4/blob/87bb299f085cc46ac9306820b85eecc59d447e85/src/Init/Data/String/Basic.lean#L55\">Example</a>. Apparently defining/implementing a <code>getOp</code> function in the namespace of your type allows you to do <code>[i]</code> on the terms of your type automagically:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">MyType</span> <span class=\"bp\">|</span> <span class=\"n\">hi</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">MyType.getOp</span> <span class=\"o\">(</span><span class=\"n\">self</span> <span class=\"o\">:</span> <span class=\"n\">MyType</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">idx</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">idx</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">MyType.hi</span><span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"c1\">-- 2</span>\n<span class=\"k\">#eval</span> <span class=\"n\">MyType.hi</span><span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"o\">]</span> <span class=\"c1\">-- 3</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>That wont really work for me tbh</p>",
        "id": 276132859,
        "sender_full_name": "Joseph O",
        "timestamp": 1647911062
    },
    {
        "content": "<p>Since i take in <code>Fin'</code> rather than <code>Nat</code></p>",
        "id": 276132871,
        "sender_full_name": "Joseph O",
        "timestamp": 1647911083
    },
    {
        "content": "<p>so they would have to do <code>h[#i]</code>, but my notation abstracts that</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">notation</span><span class=\"o\">:</span><span class=\"mi\">90</span> <span class=\"n\">p</span> <span class=\"s2\">\"[\"</span> <span class=\"n\">i</span> <span class=\"s2\">\"]\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">nth</span> <span class=\"n\">p</span> <span class=\"bp\">#</span><span class=\"n\">i</span>\n</code></pre></div>",
        "id": 276132916,
        "sender_full_name": "Joseph O",
        "timestamp": 1647911146
    },
    {
        "content": "<p>What if they have a <code>Fin'</code> that they want to pass in though? I'm not sure hiding the <code>#</code> is a good idea</p>",
        "id": 276136143,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1647915198
    },
    {
        "content": "<p>The proof <code>by decide</code> inside of <code>#</code> might not work if you do a little bit more complicated operations on indices. As an experiment, try to implement bubble sort with two <code>for</code> loops(not with recursion), would you run into a problem or not?</p>\n<p>This might not apply to heterogenous lists, but for homogenous ones it is really nice to have <code>i</code> in <code>Fin n</code>. I often write a sum of all elements in a list: <code>sum fun i =&gt; a[i]</code>. In you notation l, <code>i</code> would be Nat and sum would need range specified. As I said, the use case for heterogeneous lists might be completely different and this might not apply.</p>",
        "id": 276160783,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1647940975
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/A.20little.20project.20of.20mine/near/276136143\">said</a>:</p>\n<blockquote>\n<p>What if they have a <code>Fin'</code> that they want to pass in though? I'm not sure hiding the <code>#</code> is a good idea</p>\n</blockquote>\n<p>Hmm.</p>",
        "id": 276335417,
        "sender_full_name": "Joseph O",
        "timestamp": 1648043307
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"467926\">@Joseph O</span>  For quite some time I wanted some mechanism for n-fold currying and uncurrying. For example, turning <code>f : Nat -&gt; Int -&gt; (Unit -&gt; Nat) -&gt; Nat</code> to <code>fun x =&gt; f x[0] x[1] x[2]</code> of type <code>HList [Nat,Int,Unit-&gt;Nat] -&gt; Nat</code>.  I got inspired and motivated by your project, so I finally did it.</p>\n<p>I has to do some tricky typeclasses but I have  a function <code>huncurry n</code> that uncurries <code>n</code> arguments:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">huncurry</span> <span class=\"mi\">3</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"n\">j</span><span class=\"o\">)</span>\n          <span class=\"bp\">=</span>\n          <span class=\"bp\">λ</span> <span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">xs</span><span class=\"o\">[</span><span class=\"bp\">#</span><span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"bp\">+</span> <span class=\"n\">xs</span><span class=\"o\">[</span><span class=\"bp\">#</span><span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">huncurry</span> <span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"n\">j</span><span class=\"o\">)</span>\n          <span class=\"bp\">=</span>\n          <span class=\"bp\">λ</span> <span class=\"n\">xs</span> <span class=\"n\">k</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">xs</span><span class=\"o\">[</span><span class=\"bp\">#</span><span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"bp\">+</span> <span class=\"n\">xs</span><span class=\"o\">[</span><span class=\"bp\">#</span><span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>  <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>What I particularly like is that the above is solved by <code>rfl</code>, so writing <code>huncurry 3 f</code> is identical to <code>λ xs =&gt;  f xs[#0] xs[#1] xs[#2]</code></p>\n<p>The full code(have skipped most of the proofs):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">HArray</span> <span class=\"o\">(</span><span class=\"n\">Ts</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">data</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"o\">(</span><span class=\"n\">Sigma</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">T</span><span class=\"o\">))</span>\n  <span class=\"n\">h_len</span> <span class=\"o\">:</span> <span class=\"n\">Ts.length</span> <span class=\"bp\">=</span> <span class=\"n\">data.size</span>\n  <span class=\"n\">typed</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">Ts.length</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">data.get</span> <span class=\"o\">(</span><span class=\"n\">h_len</span> <span class=\"bp\">▸</span> <span class=\"n\">i</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">Ts.get</span> <span class=\"n\">i</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">HArray</span>\n\n  <span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">Ts</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n\n  <span class=\"kd\">def</span> <span class=\"n\">get</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">HArray</span> <span class=\"n\">Ts</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">Ts.length</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Ts.get</span> <span class=\"n\">i</span>\n    <span class=\"o\">:=</span> <span class=\"n\">u.typed</span> <span class=\"n\">i</span> <span class=\"bp\">▸</span> <span class=\"o\">(</span><span class=\"n\">u.data.get</span> <span class=\"o\">(</span><span class=\"n\">u.h_len</span> <span class=\"bp\">▸</span> <span class=\"n\">i</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"mi\">2</span>\n\n  <span class=\"kd\">def</span> <span class=\"n\">getOp</span> <span class=\"o\">(</span><span class=\"n\">self</span> <span class=\"o\">:</span> <span class=\"n\">HArray</span> <span class=\"n\">Ts</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">idx</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">Ts.length</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Ts.get</span> <span class=\"n\">idx</span>\n    <span class=\"o\">:=</span> <span class=\"n\">self.typed</span> <span class=\"n\">idx</span> <span class=\"bp\">▸</span> <span class=\"o\">(</span><span class=\"n\">self.data.get</span> <span class=\"o\">(</span><span class=\"n\">self.h_len</span> <span class=\"bp\">▸</span> <span class=\"n\">idx</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"mi\">2</span>\n\n  <span class=\"kd\">def</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">HArray</span> <span class=\"n\">Ts</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">Ts.length</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Ts.get</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">HArray</span> <span class=\"n\">Ts</span>\n    <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">u.data.set</span> <span class=\"o\">(</span><span class=\"n\">u.h_len</span> <span class=\"bp\">▸</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">⟩),</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span> <span class=\"gr\">sorry</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">HArray</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">HCurryType</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">Xs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"kt\">Type</span>\n  <span class=\"n\">Y</span>  <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">reducible</span><span class=\"o\">]</span> <span class=\"n\">HCurryType.Xs</span> <span class=\"n\">HCurryType.Y</span>\n\n<span class=\"kd\">@[reducible]</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">HCurryType</span> <span class=\"mi\">0</span> <span class=\"n\">Y</span> <span class=\"n\">where</span>\n  <span class=\"n\">Xs</span> <span class=\"o\">:=</span> <span class=\"o\">[]</span>\n  <span class=\"n\">Y</span> <span class=\"o\">:=</span> <span class=\"n\">Y</span>\n\n<span class=\"kd\">@[reducible]</span>\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">HCurryType</span> <span class=\"n\">n</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">HCurryType</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">Xs</span> <span class=\"o\">:=</span> <span class=\"n\">X</span><span class=\"o\">::</span><span class=\"n\">t.Xs</span>\n  <span class=\"n\">Y</span> <span class=\"o\">:=</span> <span class=\"n\">t.Y</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">HCurry</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Xs'</span> <span class=\"n\">Xs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">index_valid</span> <span class=\"o\">:</span> <span class=\"n\">Xs'.length</span> <span class=\"bp\">+</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">Xs.length</span>\n  <span class=\"n\">types_valid</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"n\">j</span> <span class=\"bp\">&lt;</span> <span class=\"n\">Xs.length</span> <span class=\"bp\">→</span> <span class=\"n\">Xs'.get</span> <span class=\"o\">⟨</span><span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"gr\">sorry</span><span class=\"o\">⟩</span> <span class=\"bp\">=</span> <span class=\"n\">Xs.get</span> <span class=\"o\">⟨</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"gr\">sorry</span><span class=\"o\">⟩</span>\n  <span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n  <span class=\"n\">uncurry</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">HArray</span> <span class=\"n\">Xs</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">reducible</span><span class=\"o\">]</span> <span class=\"n\">HCurry.F</span> <span class=\"n\">HCurry.uncurry</span>\n\n<span class=\"kd\">@[reducible]</span>\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">Xs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">HCurry</span> <span class=\"n\">n</span> <span class=\"o\">[]</span> <span class=\"n\">Xs</span> <span class=\"n\">Y</span> <span class=\"n\">where</span>\n  <span class=\"n\">index_valid</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">types_valid</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">F</span> <span class=\"o\">:=</span> <span class=\"n\">Y</span>\n  <span class=\"n\">uncurry</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">y</span> <span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">y</span>\n\n<span class=\"kd\">@[reducible]</span>\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">HCurry</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Xs'</span><span class=\"o\">)</span> <span class=\"n\">Xs</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">HCurry</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">X'</span><span class=\"o\">::</span><span class=\"n\">Xs'</span><span class=\"o\">)</span> <span class=\"n\">Xs</span> <span class=\"n\">Y</span> <span class=\"n\">where</span>\n  <span class=\"n\">index_valid</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">types_valid</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">F</span> <span class=\"o\">:=</span> <span class=\"n\">X'</span> <span class=\"bp\">→</span> <span class=\"n\">c.F</span>\n  <span class=\"n\">uncurry</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span> <span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">let</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Xs.get</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span><span class=\"gr\">sorry</span><span class=\"o\">⟩</span> <span class=\"bp\">=</span> <span class=\"n\">X'</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n    <span class=\"k\">let</span> <span class=\"n\">xi</span> <span class=\"o\">:</span> <span class=\"n\">X'</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"bp\">▸</span> <span class=\"n\">xs</span><span class=\"o\">[⟨</span><span class=\"n\">i</span><span class=\"o\">,</span><span class=\"gr\">sorry</span><span class=\"o\">⟩])</span>\n    <span class=\"n\">c.uncurry</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">xi</span><span class=\"o\">)</span> <span class=\"n\">xs</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">huncurry</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">HCurryType</span> <span class=\"n\">n</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">ci</span> <span class=\"o\">:</span> <span class=\"n\">HCurry</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">HCurryType.Xs</span> <span class=\"n\">n</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">HCurryType.Xs</span> <span class=\"n\">n</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">HCurryType.Y</span> <span class=\"n\">n</span> <span class=\"n\">F</span><span class=\"o\">)]</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"k\">let</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">=</span> <span class=\"n\">ci.F</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n    <span class=\"n\">ci.uncurry</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"bp\">▸</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n\n<span class=\"n\">macro</span><span class=\"o\">:</span><span class=\"n\">max</span> <span class=\"s2\">\"#\"</span> <span class=\"n\">noWs</span> <span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(⟨</span><span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">decide</span><span class=\"o\">⟩)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">huncurry</span> <span class=\"mi\">3</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"n\">j</span><span class=\"o\">)</span>\n          <span class=\"bp\">=</span>\n          <span class=\"bp\">λ</span> <span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">xs</span><span class=\"o\">[</span><span class=\"bp\">#</span><span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"bp\">+</span> <span class=\"n\">xs</span><span class=\"o\">[</span><span class=\"bp\">#</span><span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>  <span class=\"n\">rfl</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">huncurry</span> <span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"n\">j</span><span class=\"o\">)</span>\n          <span class=\"bp\">=</span>\n          <span class=\"bp\">λ</span> <span class=\"n\">xs</span> <span class=\"n\">k</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">xs</span><span class=\"o\">[</span><span class=\"bp\">#</span><span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"bp\">+</span> <span class=\"n\">xs</span><span class=\"o\">[</span><span class=\"bp\">#</span><span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 276543939,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1648158636
    },
    {
        "content": "<p>Do you know about <a href=\"https://leanprover-community.github.io/mathlib_docs/find/function.has_uncurry\">docs#function.has_uncurry</a> in Lean 3?</p>",
        "id": 276544310,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1648158858
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/A.20little.20project.20of.20mine/near/276544310\">said</a>:</p>\n<blockquote>\n<p>Do you know about <a href=\"https://leanprover-community.github.io/mathlib_docs/find/function.has_uncurry\">docs#function.has_uncurry</a> in Lean 3?</p>\n</blockquote>\n<p>Now I do :) thanks. I guess I did it partially as an exercise, but I will look into mathlib's implementation to see how it is done there.</p>",
        "id": 276545097,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1648159275
    },
    {
        "content": "<p>One of my motivation was that I wanted to end up with <code>fun x =&gt; f x[0] x[1] x[2]</code> instead of <code>fun x =&gt; f x.1 x.2.1 x.2.2</code>.</p>",
        "id": 276545898,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1648159704
    },
    {
        "content": "<p>I find the docstring for <code>has_uncurry</code> very confusing, as it uses alpha/beta/gamma in a totally different way to the lean code it describes.</p>",
        "id": 276604041,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1648206826
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"346070\">@Tomas Skrivan</span> wow looks nice. Glad to hear you got inspired, though the code is perhaps a bit too complicated for me to understand yet. I hope to get there soon.</p>",
        "id": 279890382,
        "sender_full_name": "Joseph O",
        "timestamp": 1650670011
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/A.20little.20project.20of.20mine/near/276136143\">said</a>:</p>\n<blockquote>\n<p>What if they have a <code>Fin'</code> that they want to pass in though? I'm not sure hiding the <code>#</code> is a good idea</p>\n</blockquote>\n<p>ok I implemented <code>getOp</code> instead now. <br>\nThe current way to access the index is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"s2\">\"2\"</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"o\">][</span><span class=\"bp\">#</span><span class=\"mi\">1</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 279890492,
        "sender_full_name": "Joseph O",
        "timestamp": 1650670107
    }
]