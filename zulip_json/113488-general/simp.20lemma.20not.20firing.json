[
    {
        "content": "<p>I need some assistance with a simp lemma not firing. Unfortunately, I understand too little about the problem (actually, I don't understand anything) to create a MWE, but the problematic lemma is at the <code>arrow_category</code> branch on mathlib (oleans should be available via <code>leanproject</code>, I think). The problematic lemma is <a href=\"https://github.com/leanprover-community/mathlib/blob/6e57682b605199c8723f4995dab99d1328a05676/src/category_theory/limits/shapes/images.lean#L325\" title=\"https://github.com/leanprover-community/mathlib/blob/6e57682b605199c8723f4995dab99d1328a05676/src/category_theory/limits/shapes/images.lean#L325\">in <code>category_theory/limits/shapes/images.lean</code> on line 325</a>.</p>\n<p>An example where the lemma does not fire is in line 375: <code>simp only [image.map_comp_eq_comp_map]</code> does not work, while <code>rw image.map_comp_eq_comp_map</code> does.</p>\n<p>The simp linter also complains about this lemma with \"Left-hand side does not simplify. You need to debug this yourself using <code>set_option trace.simplify.rewrite true</code>\", but I can't seem to get that trace option to print anything interesting and I have no idea where to go from here, so any help would be appreciated.</p>",
        "id": 193474301,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1586449555
    },
    {
        "content": "<p>Oh, the help from the linter is a bit misleading.  You need to set <code>set_option trace.simplify true</code> then you also get information about lemmas that did <em>not</em> rewrite.</p>",
        "id": 193494357,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1586458709
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>2. [simplify.failure] fail to instantiate emetas: &#39;category_theory.limits.image.map_comp_eq_comp_map&#39; at\n@image.map C ùíû f h _inst_1 _inst_4 (sq ‚â´ sq&#39;) _inst_6\npartially instantiated lemma:\n@image.map_comp_eq_comp_map C ùíû f g _inst_1 ?x_5 sq ?x_7 h _inst_4 sq&#39; ?x_11 _inst_6\n</pre></div>",
        "id": 193494396,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1586458730
    },
    {
        "content": "<p>I think this is a bug in the simplifier, minimum wrecking example:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">class</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n<span class=\"n\">class</span> <span class=\"n\">B</span> <span class=\"o\">(</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">A</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span>\n\n<span class=\"n\">def</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">A</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">B</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üî</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"n\">iff</span><span class=\"bp\">.</span><span class=\"n\">rfl</span>\n\n<span class=\"c1\">-- fails</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">A</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">B</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üî</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">foo</span><span class=\"o\">]</span>\n</pre></div>",
        "id": 193496349,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1586459589
    },
    {
        "content": "<p>It seems that <code>foo</code> has unused arguments. Does it work if <code>P</code> has arguments <code>[A Œ±]</code> and <code>[B Œ±]</code>?</p>",
        "id": 193496646,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1586459725
    },
    {
        "content": "<p>Imagine that <code>B</code> is used in the proof.  It will work if <code>P</code> has an argument for <code>[B Œ±]</code> because then the argument to the simp lemma is filled in by unification.</p>",
        "id": 193496847,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1586459821
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/113488-general/topic/simp.20lemma.20not.20firing/near/193496847\" title=\"#narrow/stream/113488-general/topic/simp.20lemma.20not.20firing/near/193496847\">said</a>:</p>\n<blockquote>\n<p>Imagine that <code>B</code> is used in the proof.  It will work if <code>P</code> has an argument for <code>[B Œ±]</code> because then the argument to the simp lemma is filled in by unification.</p>\n</blockquote>\n<p>Very interesting, thank you for looking into this. I'm still confused though, because what you said sounds like this bug should not trigger when the statement of the simp lemma in question already uses all arguments, but I believe that for <code>image.map_comp_eq_comp_map</code>, the statement does in fact already use all of the arguments.</p>",
        "id": 193498189,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1586460479
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean/issues/181\" title=\"https://github.com/leanprover-community/lean/issues/181\">lean#181</a></p>",
        "id": 193506577,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1586464875
    }
]