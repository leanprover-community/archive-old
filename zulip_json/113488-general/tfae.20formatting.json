[
    {
        "content": "<p><code>tfae</code> is being used. Kudos to <span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> and <span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> for making the tactic work, and to <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> for using it.<br>\nHere's a question/proposal about formatting: shall we format <code>tfae</code> statements with one \"item\" per line?<br>\nPinging <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> and <span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span> for this style issue.</p>",
        "id": 184329515,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1577463389
    },
    {
        "content": "<p>Do you mean something like this?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">tfae_mem_nhds_within_Ioi</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">u&#39;</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hu&#39;</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">u&#39;</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">tfae</span> <span class=\"o\">[</span><span class=\"n\">s</span> <span class=\"err\">∈</span> <span class=\"n\">nhds_within</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">Ioi</span> <span class=\"n\">a</span><span class=\"o\">),</span> <span class=\"c\">/-</span><span class=\"cm\"> 0 -/</span>\n    <span class=\"n\">s</span> <span class=\"err\">∈</span> <span class=\"n\">nhds_within</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">Ioc</span> <span class=\"n\">a</span> <span class=\"n\">u&#39;</span><span class=\"o\">),</span> <span class=\"c\">/-</span><span class=\"cm\"> 1 -/</span>\n    <span class=\"n\">s</span> <span class=\"err\">∈</span> <span class=\"n\">nhds_within</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">Ioo</span> <span class=\"n\">a</span> <span class=\"n\">u&#39;</span><span class=\"o\">),</span> <span class=\"c\">/-</span><span class=\"cm\"> 2 -/</span>\n    <span class=\"bp\">∃</span> <span class=\"n\">u</span> <span class=\"err\">∈</span> <span class=\"n\">Ioc</span> <span class=\"n\">a</span> <span class=\"n\">u&#39;</span><span class=\"o\">,</span> <span class=\"n\">Ioo</span> <span class=\"n\">a</span> <span class=\"n\">u</span> <span class=\"err\">⊆</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"c\">/-</span><span class=\"cm\"> 3 -/</span>\n    <span class=\"bp\">∃</span> <span class=\"n\">u</span> <span class=\"err\">∈</span> <span class=\"n\">Ioi</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">Ioo</span> <span class=\"n\">a</span> <span class=\"n\">u</span> <span class=\"err\">⊆</span> <span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"c\">/-</span><span class=\"cm\"> 4 -/</span> <span class=\"o\">:=</span>\n</pre></div>",
        "id": 184329618,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1577463490
    },
    {
        "content": "<p>Yes, exactly</p>",
        "id": 184329647,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1577463539
    },
    {
        "content": "<p>Numbers help those writing <code>(tfae_mem_nhds_within_Ioi h s).out 0 3</code></p>",
        "id": 184329655,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1577463546
    },
    {
        "content": "<p>Hmmm, I now realise that <code>tfae_have</code> uses 1-based indexing, but <code>tfae.out</code> uses 0-based indexing...</p>",
        "id": 184329748,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1577463604
    },
    {
        "content": "<p>I guess that should be fixed</p>",
        "id": 184329758,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1577463614
    },
    {
        "content": "<p>Or even</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">tfae_mem_nhds_within_Ioi</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">tfae</span> <span class=\"o\">[</span><span class=\"n\">s</span> <span class=\"err\">∈</span> <span class=\"n\">nhds_within</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">Ioi</span> <span class=\"n\">a</span><span class=\"o\">),</span> <span class=\"c\">/-</span><span class=\"cm\"> 0 : `s` is a neighborhood of `a` within `(a, +∞)` -/</span>\n    <span class=\"n\">s</span> <span class=\"err\">∈</span> <span class=\"n\">nhds_within</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">Ioc</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">),</span> <span class=\"c\">/-</span><span class=\"cm\"> 1 : `s` is a neighborhood of `a` within `(a, b]` -/</span>\n    <span class=\"n\">s</span> <span class=\"err\">∈</span> <span class=\"n\">nhds_within</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">Ioo</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">),</span> <span class=\"c\">/-</span><span class=\"cm\"> 2 : `s` is a neighborhood of `a` within `(a, b)` -/</span>\n    <span class=\"bp\">∃</span> <span class=\"n\">u</span> <span class=\"err\">∈</span> <span class=\"n\">Ioc</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">Ioo</span> <span class=\"n\">a</span> <span class=\"n\">u</span> <span class=\"err\">⊆</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"c\">/-</span><span class=\"cm\"> 3 : `s` includes `(a, u)` for some `u ∈ (a, b]` -/</span>\n    <span class=\"bp\">∃</span> <span class=\"n\">u</span> <span class=\"err\">∈</span> <span class=\"n\">Ioi</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">Ioo</span> <span class=\"n\">a</span> <span class=\"n\">u</span> <span class=\"err\">⊆</span> <span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"c\">/-</span><span class=\"cm\"> 4 : `s` includes `(a, u)` for some `u &gt; a` -/</span> <span class=\"o\">:=</span>\n</pre></div>",
        "id": 184329791,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1577463671
    },
    {
        "content": "<p>I think I would put <code>:=</code> before comment <code>4</code></p>",
        "id": 184329800,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1577463701
    },
    {
        "content": "<p>But that's minor nitpicking</p>",
        "id": 184329806,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1577463718
    },
    {
        "content": "<p>Also, for one-line comments you can use <code>--</code>.</p>",
        "id": 184329852,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1577463748
    },
    {
        "content": "<p>Only if you don't put <code>:=</code> at the end of the line</p>",
        "id": 184329860,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1577463766
    },
    {
        "content": "<p>Yes. I was implicitly seconding your comment :)</p>",
        "id": 184329881,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1577463800
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">tfae_mem_nhds_within_Ioi</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">tfae</span> <span class=\"o\">[</span><span class=\"n\">s</span> <span class=\"err\">∈</span> <span class=\"n\">nhds_within</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">Ioi</span> <span class=\"n\">a</span><span class=\"o\">),</span> <span class=\"c1\">-- 0 : `s` is a neighborhood of `a` within `(a, +∞)`</span>\n    <span class=\"n\">s</span> <span class=\"err\">∈</span> <span class=\"n\">nhds_within</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">Ioc</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">),</span>   <span class=\"c1\">-- 1 : `s` is a neighborhood of `a` within `(a, b]`</span>\n    <span class=\"n\">s</span> <span class=\"err\">∈</span> <span class=\"n\">nhds_within</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">Ioo</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">),</span>   <span class=\"c1\">-- 2 : `s` is a neighborhood of `a` within `(a, b)`</span>\n    <span class=\"bp\">∃</span> <span class=\"n\">u</span> <span class=\"err\">∈</span> <span class=\"n\">Ioc</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">Ioo</span> <span class=\"n\">a</span> <span class=\"n\">u</span> <span class=\"err\">⊆</span> <span class=\"n\">s</span><span class=\"o\">,</span>    <span class=\"c1\">-- 3 : `s` includes `(a, u)` for some `u ∈ (a, b]`</span>\n    <span class=\"bp\">∃</span> <span class=\"n\">u</span> <span class=\"err\">∈</span> <span class=\"n\">Ioi</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">Ioo</span> <span class=\"n\">a</span> <span class=\"n\">u</span> <span class=\"err\">⊆</span> <span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"o\">:=</span>   <span class=\"c1\">-- 4 : `s` includes `(a, u)` for some `u &gt; a`</span>\n</pre></div>",
        "id": 184329889,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1577463814
    },
    {
        "content": "<p>It's too bad that those comments won't end up in the docstring</p>",
        "id": 184329941,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1577463883
    },
    {
        "content": "<p>In fact, I think it's quite important that these comments do end up in the docstring, because if the lemma gets used with <code>tfae.out</code> a person reading the code will probably want to hover over the lemma to see exactly which two equivalent statements are being used.</p>",
        "id": 184330505,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1577464488
    },
    {
        "content": "<p>I'll copy them to the docstring.</p>",
        "id": 184330868,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1577464834
    },
    {
        "content": "<p>I agree that the 0/1 indexing should be made consistent and that the numbers should appear in the docstring.</p>",
        "id": 184339803,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1577475944
    },
    {
        "content": "<p>Note that (I think) markdown will format a numbered list starting with 1, even if the input starts with 0. i.e.</p>\n<div class=\"codehilite\"><pre><span></span>0. `s` is a neighborhood...\n1. `s` is a neighborhood...\n</pre></div>\n\n\n<p>will get printed as </p>\n<div class=\"codehilite\"><pre><span></span>1. ...\n2. ...\n</pre></div>",
        "id": 184339878,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1577476011
    },
    {
        "content": "<p>So maybe we should use 1-based indexing. Or unordered lists with indices added manually.</p>",
        "id": 184339910,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1577476054
    },
    {
        "content": "<p>Actually, I think we could use an annotation so that we can write:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">tfae_mem_nhds_within_Ioi</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"k\">by</span> <span class=\"n\">tfae</span> <span class=\"o\">[</span>\n    <span class=\"n\">Ioi</span><span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"err\">∈</span> <span class=\"n\">nhds_within</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">Ioi</span> <span class=\"n\">a</span><span class=\"o\">),</span>\n    <span class=\"n\">Ioc</span><span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"err\">∈</span> <span class=\"n\">nhds_within</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">Ioc</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">),</span>\n    <span class=\"n\">Ioo</span><span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"err\">∈</span> <span class=\"n\">nhds_within</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">Ioo</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">),</span>\n    <span class=\"n\">ex_Ioc</span><span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">u</span> <span class=\"err\">∈</span> <span class=\"n\">Ioc</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">Ioo</span> <span class=\"n\">a</span> <span class=\"n\">u</span> <span class=\"err\">⊆</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n    <span class=\"n\">ex_Ioi</span><span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">u</span> <span class=\"err\">∈</span> <span class=\"n\">Ioi</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">Ioo</span> <span class=\"n\">a</span> <span class=\"n\">u</span> <span class=\"err\">⊆</span> <span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n</pre></div>\n\n\n<p>and then reference the names using <code>tfae_have Ioi &lt;-&gt; Ioo := tfae_mem_nhds_within_Ioi</code> or similar</p>",
        "id": 184350235,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1577490357
    },
    {
        "content": "<p>It could be syntax for <code>tfae [(\\lam Ioi, Ioi) s ∈ nhds_within a (Ioi a), ...</code></p>",
        "id": 184350298,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1577490435
    },
    {
        "content": "<p>I think I could have made <code>tfae_have</code> use 0-based indexing. But these new suggestions go beyond my skill set. They do look fancy. <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Would <code>tfae.out</code> be able to use those indices as well?</p>",
        "id": 184364303,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1577518839
    },
    {
        "content": "<p>if by <code>tfae.out</code> you mean the term, no</p>",
        "id": 184365274,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1577520427
    },
    {
        "content": "<p>I would also suggest keeping zero based indexing in <code>tfae.out</code></p>",
        "id": 184365276,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1577520448
    },
    {
        "content": "<p>adding extra layers in the actual terms is a bad idea</p>",
        "id": 184365278,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1577520466
    },
    {
        "content": "<p>Well, in that case I would just let everything be 0-based indexed stuff</p>",
        "id": 184367553,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1577525160
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110596\">Rob Lewis</span> <a href=\"#narrow/stream/113488-general/topic/tfae.20formatting/near/184339803\">said</a>:</p>\n<blockquote>\n<p>I agree that the 0/1 indexing should be made consistent and that the numbers should appear in the docstring.</p>\n</blockquote>\n<p>As of now they're still inconsistent, and I spent 30min figuring out what the problem was 3 days ago until I found this thread :)<br>\n<a href=\"https://github.com/leanprover-community/mathlib/pull/9802/commits/f42906d7c4aa1e3be5b7a71055306578165578f2#diff-0a4f6600b04949128dfb6b02c463b4cb330bdbc4da4e7cf630cdfb2b606be088R232\">proving it</a> vs. <a href=\"https://github.com/leanprover-community/mathlib/pull/9802/commits/f42906d7c4aa1e3be5b7a71055306578165578f2#diff-62be115a766f4e0569b3f52d773340c3ca6548acd6aa501fe5ba048fc0edbfbdR598\">using it</a></p>",
        "id": 259740350,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1635612652
    },
    {
        "content": "<p>Adding notes at <a href=\"https://leanprover-community.github.io/mathlib_docs/data/list/tfae.html#list.tfae.out\">https://leanprover-community.github.io/mathlib_docs/data/list/tfae.html#list.tfae.out</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/tactic/tfae.html#tactic.interactive.tfae_have\">https://leanprover-community.github.io/mathlib_docs/tactic/tfae.html#tactic.interactive.tfae_have</a> or <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#tfae\">https://leanprover-community.github.io/mathlib_docs/tactics.html#tfae</a> would be helpful, at least in my case.</p>",
        "id": 259741186,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1635613677
    },
    {
        "content": "<p>A PR with better docstrings would be very welcome!</p>",
        "id": 259744800,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1635618598
    }
]