[
    {
        "content": "<p>So I'm trying to prove this goal:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"n\">l'</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">a</span><span class=\"o\">},</span> <span class=\"n\">l</span> <span class=\"bp\">≤</span> <span class=\"n\">l'</span> <span class=\"bp\">→</span> <span class=\"n\">l'</span> <span class=\"bp\">≤</span> <span class=\"n\">pure</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">l</span> <span class=\"bp\">≤</span> <span class=\"n\">pure</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>When I use <code>by simp</code> to prove it, it get's confused and produces this goal:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"n\">l'</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">a</span><span class=\"o\">},</span> <span class=\"n\">l</span> <span class=\"bp\">≤</span> <span class=\"n\">l'</span> <span class=\"bp\">→</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"bp\">∈</span> <span class=\"n\">l'</span> <span class=\"bp\">→</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span>\n</code></pre></div>\n<p>Is this unavoidable?</p>",
        "id": 264929281,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1639517894
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> ?</p>",
        "id": 264929351,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1639517941
    },
    {
        "content": "<p>Also, what do you expect <code>simp</code> to do? <code>l' ≤ pure x</code> simplifies to <code>{x} ∈ l'</code>.</p>",
        "id": 264929607,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1639518018
    },
    {
        "content": "<p>Apply transitivity maybe?</p>",
        "id": 264929882,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1639518079
    },
    {
        "content": "<p>Well, when I write out the proof, it look like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">le_conv</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"k\">assume</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n    <span class=\"k\">assume</span> <span class=\"n\">l</span> <span class=\"n\">l'</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n    <span class=\"k\">assume</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">l</span> <span class=\"bp\">&lt;=</span> <span class=\"n\">l'</span><span class=\"o\">,</span>\n    <span class=\"k\">assume</span> <span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">l'</span> <span class=\"bp\">&lt;=</span> <span class=\"n\">pure</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">le_trans</span> <span class=\"n\">h</span> <span class=\"n\">h'</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 264930194,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1639518143
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">order.filter.basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">filter</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">≤</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hh</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">pure</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">F</span> <span class=\"bp\">≤</span> <span class=\"n\">pure</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"n\">le_trans</span> <span class=\"n\">h</span> <span class=\"n\">hh</span>\n</code></pre></div>",
        "id": 264930202,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1639518144
    },
    {
        "content": "<p>Is <code>simp</code> not smart enough to apply <code>le_trans</code> for me?</p>",
        "id": 264930301,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1639518200
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"n\">l'</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">l</span> <span class=\"bp\">≤</span> <span class=\"n\">l'</span> <span class=\"bp\">→</span> <span class=\"n\">l'</span> <span class=\"bp\">≤</span> <span class=\"n\">pure</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">l</span> <span class=\"bp\">≤</span> <span class=\"n\">pure</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">hl</span> <span class=\"n\">hl'</span><span class=\"o\">,</span> <span class=\"n\">hl.trans</span> <span class=\"n\">hl'</span>\n</code></pre></div>",
        "id": 264930329,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1639518220
    },
    {
        "content": "<p>Adam was faster</p>",
        "id": 264930347,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1639518229
    },
    {
        "content": "<p><code>simp</code> is not a tactic that solves <code>simple</code> things. Rather it's a tactic that simplifies expressions using lemmas tagged with <code>simp</code>.</p>",
        "id": 264930354,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1639518231
    },
    {
        "content": "<p>This is not at all <code>simp</code>'s job</p>",
        "id": 264930410,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1639518245
    },
    {
        "content": "<p>Well, I guess I'm confused about the purpose of <code>simp</code>.</p>",
        "id": 264930448,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1639518270
    },
    {
        "content": "<p>In this case, it applies <a href=\"https://leanprover-community.github.io/mathlib_docs/find/filter.le_pure_iff\">docs#filter.le_pure_iff</a></p>",
        "id": 264930481,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1639518287
    },
    {
        "content": "<p>In some cases, it automagically works. In others, I have to write the proofs.</p>",
        "id": 264930527,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1639518303
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/extras/simp.html\">https://leanprover-community.github.io/extras/simp.html</a></p>",
        "id": 264930528,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1639518303
    },
    {
        "content": "<p>Notice the <code>@[simp]</code> tag above the statement of the lemma.</p>",
        "id": 264930532,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1639518304
    },
    {
        "content": "<p>Bernd, everybody goes through this stage.</p>",
        "id": 264930575,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1639518324
    },
    {
        "content": "<p>Is there a tactic that applies le_trans for me?</p>",
        "id": 264930641,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1639518358
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">order.filter.basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">filter</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">≤</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hh</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">pure</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">F</span> <span class=\"bp\">≤</span> <span class=\"n\">pure</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">transitivity'</span><span class=\"o\">,</span>\n  <span class=\"n\">assumption'</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 264930767,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1639518423
    },
    {
        "content": "<p>I would like to write a one-liner, like <code>by le_trans</code> or something similar.</p>",
        "id": 264930768,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1639518423
    },
    {
        "content": "<p>Although if you look at the goals after <code>transitivity'</code>, you will see some metavariables, so this is not an ideal solution.</p>",
        "id": 264930808,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1639518445
    },
    {
        "content": "<p>Alright. Thanks guys. I'll stick with the long proof.</p>",
        "id": 264930983,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1639518522
    },
    {
        "content": "<p>Note that the proof is done by <code>tauto</code>, but this is a coincidence depending on the precise implementation of those definitions.</p>",
        "id": 264931204,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1639518612
    },
    {
        "content": "<p>Where is <code>tauto</code>? I keep getting <code>unknown identifier 'tauto'</code>.</p>",
        "id": 264931491,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1639518768
    },
    {
        "content": "<p>You should <code>import tactic</code> to make sure you have (almost) every toy at hand.</p>",
        "id": 264931557,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1639518812
    },
    {
        "content": "<p>For some reason, that's not working for me. Do I need to say <code>by tauto</code> or just <code>tauto</code>?</p>",
        "id": 264931695,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1639518870
    },
    {
        "content": "<p>OK, it's <code>by tauto</code>.</p>",
        "id": 264931767,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1639518908
    },
    {
        "content": "<p>Sure, you asked for a tactic, not a proof term.</p>",
        "id": 264931807,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1639518929
    },
    {
        "content": "<p>I never know when to use <code>by</code> and when not to use it.</p>",
        "id": 264931813,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1639518933
    },
    {
        "content": "<p><code>by</code> enters tactic mode, it's a shorter version of <code>begin end</code></p>",
        "id": 264931848,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1639518956
    },
    {
        "content": "<p>Ah. I'll have to remember. Thanks.</p>",
        "id": 264931943,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1639518990
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/glossary.html#tactic-mode\">glossary#tactic-mode</a></p>",
        "id": 264931982,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1639519011
    },
    {
        "content": "<p>So there's <code>by</code>, <code>{}</code> and <code>begin end</code>.</p>",
        "id": 264931996,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1639519018
    },
    {
        "content": "<p>Any more?</p>",
        "id": 264932017,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1639519028
    },
    {
        "content": "<p><code>{}</code> is grouping stuff, but it doesn't enter tactic mode.</p>",
        "id": 264932049,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1639519048
    },
    {
        "content": "<p>Oh...</p>",
        "id": 264932114,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1639519080
    },
    {
        "content": "<p>Writing <code>{ tauto }</code> instead of <code>by tauto</code> wouldn't work</p>",
        "id": 264932139,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1639519083
    },
    {
        "content": "<p>I guess I got confused because <code>begin end</code> is also used for grouping.</p>",
        "id": 264932533,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1639519251
    },
    {
        "content": "<p>Or at least, I think it is.</p>",
        "id": 264932552,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1639519259
    },
    {
        "content": "<p>You can use it for grouping, but it's a pretty verbose variant.</p>",
        "id": 264938609,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1639522533
    }
]