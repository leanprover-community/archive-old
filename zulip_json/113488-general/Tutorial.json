[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> Would you mind pushing your demo to a new <code>tutorial</code> branch on community fork? Maybe as <code>docs/tutorial/demo.lean</code>.</p>",
        "id": 135155789,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538636324
    },
    {
        "content": "<p>After that we could attempt answering Neil's questions in that branch as well.</p>",
        "id": 135155799,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538636349
    },
    {
        "content": "<p>Q1 and Q2 have been done. They can easily be entered.</p>",
        "id": 135155804,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538636368
    },
    {
        "content": "<p>Q3 shouldn't be hard either. Q4 needs work. Q5 should be rather easy again.</p>",
        "id": 135155874,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538636441
    },
    {
        "content": "<p>The point is that we should write lots of comments in those files. So that people can actually learn a lot of Lean. Instead of learning only a tiny bit of maths (that they actually knew already).</p>",
        "id": 135155893,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538636479
    },
    {
        "content": "<p>Ok, I'll do that</p>",
        "id": 135155894,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1538636480
    },
    {
        "content": "<p>If you're looking for help with this, I'd be happy to contribute. I think I should be able to do Q5.</p>",
        "id": 135156024,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1538636671
    },
    {
        "content": "<p>Sure! Please contribute!</p>",
        "id": 135156040,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538636709
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> Do you have time to do this before the talks start? Otherwise I can start the branch... and you can dump your demo later (-;</p>",
        "id": 135156234,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538637029
    },
    {
        "content": "<p>depends on the RER train. I'm leaving my house, let's see when I'll arrive in Orsay</p>",
        "id": 135156333,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1538637225
    },
    {
        "content": "<p>I would recommend using a top-level <code>tutorial</code> directory instead of the subdirectory  under <code>docs</code>. First, it's more discoverable (easier to find). Second, I think many people expect <code>docs</code> to not be code, which could lead people to not look in there for code.</p>",
        "id": 135156338,
        "sender_full_name": "Sean Leather",
        "timestamp": 1538637231
    },
    {
        "content": "<p>I'm fine with that. It depends on what the powers that be prefer (-; <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> <span class=\"user-mention\" data-user-id=\"110294\">@Johannes Hölzl</span></p>",
        "id": 135156397,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538637300
    },
    {
        "content": "<p>if we add tutorials, I would also prefer <code>tutorial</code> in the top level directory.</p>",
        "id": 135156595,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1538637601
    },
    {
        "content": "<p>But we could also have a separate repository in <code>leanprover-community</code> then its easier to contribute</p>",
        "id": 135156651,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1538637640
    },
    {
        "content": "<p>I think it is best to have this end up in mathlib. Because then we are forced to keep it working. Also: better discoverability</p>",
        "id": 135156668,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538637711
    },
    {
        "content": "<p>Stick it in the top level and it can be moved later</p>",
        "id": 135161048,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538644204
    },
    {
        "content": "<p>I've made some progress on Q5. Is someone (Patrick? Johan?) planning to make a branch in leanprover-community I can PR to?</p>",
        "id": 135240591,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1538726759
    },
    {
        "content": "<p>Sorry, I have to do some other stuff now. Please go ahead and create the branch</p>",
        "id": 135240650,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538726830
    },
    {
        "content": "<p>I'll create the branch if you want</p>",
        "id": 135240799,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1538727023
    },
    {
        "content": "<p>Sure, that'd be great.</p>",
        "id": 135240813,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1538727064
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/tree/tutorials\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/tree/tutorials\">https://github.com/leanprover-community/mathlib/tree/tutorials</a></p>",
        "id": 135240831,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1538727097
    },
    {
        "content": "<p>wait</p>",
        "id": 135240896,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1538727169
    },
    {
        "content": "<p>I messed up</p>",
        "id": 135240898,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1538727176
    },
    {
        "content": "<p>now it's ok</p>",
        "id": 135240985,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1538727250
    },
    {
        "content": "<p>Ok, I've pushed my demo file: <a href=\"https://github.com/leanprover-community/mathlib/commit/bf36dd1e66d373c53666ca4579649f767955ed42\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/commit/bf36dd1e66d373c53666ca4579649f767955ed42\">https://github.com/leanprover-community/mathlib/commit/bf36dd1e66d373c53666ca4579649f767955ed42</a></p>",
        "id": 135241326,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1538727805
    },
    {
        "content": "<p>OK, I've PR'd my file for review <a href=\"https://github.com/leanprover-community/mathlib/pull/6\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/pull/6\">here</a>.</p>",
        "id": 135241958,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1538728603
    },
    {
        "content": "<p>You don't have write access to the community fork?</p>",
        "id": 135242037,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538728772
    },
    {
        "content": "<p>Oh, I guess not.</p>",
        "id": 135242038,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1538728784
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> <span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> can one of you fix this?</p>",
        "id": 135242098,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538728822
    },
    {
        "content": "<p>Done</p>",
        "id": 135242854,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538729867
    },
    {
        "content": "<p>And now, I'm off. Good day!</p>",
        "id": 135242861,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538729880
    },
    {
        "content": "<p>Sleep tight!</p>",
        "id": 135242909,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538729893
    },
    {
        "content": "<p>Thanks :) <span class=\"emoji emoji-1f4a4\" title=\"zzz\">:zzz:</span></p>",
        "id": 135242942,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538729942
    },
    {
        "content": "<p>Thanks Simon!</p>",
        "id": 135254193,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1538745570
    },
    {
        "content": "<p>I've gone ahead and merged my PR. Here are two specific questions, and I would appreciate any other comments as well:</p>\n<p>1) I'm not sure how to finish <a href=\"https://github.com/leanprover-community/mathlib/blob/tutorials/tutorials/partitions.lean#L96\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/tutorials/tutorials/partitions.lean#L96\">this proof</a>.</p>\n<p>2) The forward and backward directions in the <code>iff.intro</code> <a href=\"https://github.com/leanprover-community/mathlib/blob/4752d91c7e0781e275e6a14edafcbf1a73b8c8ae/tutorials/partitions.lean#L134\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/4752d91c7e0781e275e6a14edafcbf1a73b8c8ae/tutorials/partitions.lean#L134\">here</a> are identical except that the roles of <code> s₁</code> and <code>s₂</code> are swapped. Is there a cleaner way to do this? I thought about using <code>wlog</code> but I couldn't figure out how to use it in this case.</p>",
        "id": 135254614,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1538746052
    },
    {
        "content": "<blockquote>\n<p>1) I'm not sure how to finish <a href=\"https://github.com/leanprover-community/mathlib/blob/tutorials/tutorials/partitions.lean#L96\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/tutorials/tutorials/partitions.lean#L96\">this proof</a>.</p>\n</blockquote>\n<p>Oh I love these questions. Mathematicians don't even give them a second thought. You have two finite types with the same cardinality and and you want to conclude that some operation on the type which only depends on the cardinality (e.g. the cardinality of the number of partitions) is the same for each. This is stupidly hard to do in Lean and it's coming up more and more. The general problem is that if you have two types which are equivalent (i.e. you are given inverse bijections between the types and proofs that the maps are inverse to each other on both sides) then a mathematician instantly identifies the types, and any reasonable theorem or definition constructed with one has an obvious counterpart for the other. Now someone will explain that yeah in theory this can all be done with <code>traversable</code> or <code>transportable</code> or something, but I can't do this because I don't really understand what needs to be done. We've just missed <span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> but he knows something about this sort of question. My guess is that you need to prove that if the cards are the same then there's an <code>equiv</code> (which might well be there), and then you want to prove that if <code>X equiv Y</code> then <code>partitions X equiv partitions Y</code> (which looks trivial but might involve some actual work) and then you want to prove that partitions X equiv partitions Y then the cards are the same, which might well be there.</p>",
        "id": 135259968,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538751631
    },
    {
        "content": "<p>Thanks for cueing me in <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>! That is indeed a nice question!</p>",
        "id": 135260449,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538752074
    },
    {
        "content": "<blockquote>\n<p>if the cards are the same then there's an equiv (which might well be there), </p>\n</blockquote>\n<p>Yeah, I was attempting to use <code>fintype.equiv_fin</code>for that but it gives me an equiv wrapped up in <code>trunc</code>... so I gave up and decided to ask for help.</p>",
        "id": 135260515,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1538752120
    },
    {
        "content": "<p>The example I ran into in around Feb/Mar time was that I had a complex of abelian groups <code>A -&gt; B -&gt; C</code> and an isomorphic (in the obvious sense) complex <code>A' -&gt; B' -&gt; C'</code> and wanted to deduce that these two complexes had isomorphic cohomology -- in fact I had several questions of this nature. I wanted the isomorphism to be explictly built for me by a tactic but in the end I don't think this ever happened.</p>",
        "id": 135261258,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538752809
    },
    {
        "content": "<p>People ground out proofs very quickly -- \"this is an isomorphism and this is an isomorphism so this map between kernels is an isomorphism, and now this map between images is an isomorphism, and...\" but they really had to build them</p>",
        "id": 135261330,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538752905
    },
    {
        "content": "<p>But I want proof by a tactic called <code>mathematical_intuition</code> or <code>transport_de_structure</code> or something</p>",
        "id": 135261383,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538752937
    },
    {
        "content": "<p>and my understanding was that making a tactic would somehow involve having to go through a bunch of Lean theorems or definitions applying to abelian groups, and tagging them with an attribute which is a claim that this function some of whose inputs or outputs are abelian groups \"naturally\" descends to a function whose inputs and outputs are equivalence classes of abelian groups, where the equivalence is given by group isomorphism.</p>",
        "id": 135261600,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538753155
    },
    {
        "content": "<p>And I think the idea was that some of the attribute-tagging could be done automatically.</p>",
        "id": 135261654,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538753176
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> I did build some isomorphisms with a tactic but I got some push back because transport was seem as redundant with transfer and I didn't take it any further</p>",
        "id": 135261659,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538753182
    },
    {
        "content": "<p><code>transfer</code>, that's it.</p>",
        "id": 135261668,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538753195
    },
    {
        "content": "<p>Thanks Simon.</p>",
        "id": 135261673,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538753202
    },
    {
        "content": "<p><span class=\"emoji emoji-1f44d\" title=\"+1\">:+1:</span></p>",
        "id": 135261691,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538753222
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span> <code>trunc</code> should not deter you. You can unwrap it when you're proving a proposition.</p>",
        "id": 135261724,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538753262
    },
    {
        "content": "<p>It just states that the object exists in a non constructive way</p>",
        "id": 135261750,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538753282
    },
    {
        "content": "<p>This is an important tactic for mathematicians and it isn't there. Bryan's question is a great example of an EIMHIL questions (easy in maths, hard in Lean). The exciting thing about this community is that several times in the past I have explicitly flagged things which were easy in maths but hard in Lean, and other members of the community like Simon, Mario and Johannes sometimes step up and make them easy in Lean. The <code>ring</code> tactic is a great example of this.</p>",
        "id": 135261789,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538753310
    },
    {
        "content": "<p>Look at <code>trunc.induction_on</code></p>",
        "id": 135261791,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538753311
    },
    {
        "content": "<p>Simon, do you know if is there a relatively easy way to patch up the sorry completely?</p>",
        "id": 135261831,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538753368
    },
    {
        "content": "<p>:D Glad to be helpful. I think Lean won't be as easy as math (!) but there certainly are a lot of low hanging fruits to make it a lot easier to use.</p>",
        "id": 135261837,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538753380
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110865\">@Jeremy Avigad</span> I would be really interested to hear your opinion on what a mathematician <em>means</em> when they say that two objects are \"canonically isomorphic\".</p>",
        "id": 135261924,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538753421
    },
    {
        "content": "<p>This is notion which is somehow still missing in my Lean experience.</p>",
        "id": 135261940,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538753433
    },
    {
        "content": "<p>I contributed to some mathoverflow chat about this once</p>",
        "id": 135261980,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538753482
    },
    {
        "content": "<p><a href=\"https://mathoverflow.net/questions/19644/what-is-the-definition-of-canonical/19663#19663\" target=\"_blank\" title=\"https://mathoverflow.net/questions/19644/what-is-the-definition-of-canonical/19663#19663\">https://mathoverflow.net/questions/19644/what-is-the-definition-of-canonical/19663#19663</a></p>",
        "id": 135262053,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538753544
    },
    {
        "content": "<blockquote>\n<p>Simon, do you know if is there a relatively easy way to patch up the sorry completely?</p>\n</blockquote>\n<p>I'll look into it</p>",
        "id": 135262059,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538753554
    },
    {
        "content": "<p>Oh I just wondered whether you knew immediately that this would be a relatively straightforward sorry to remove. Like when Patrick asks silly questions about subs on nats not working properly and I know I can prove every one because I just know how they work better than he does in some funny way.</p>",
        "id": 135262100,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538753637
    },
    {
        "content": "<p>I think he can do them too, but they just annoy him too much :-)</p>",
        "id": 135262150,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538753653
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> Ah, thanks! Up to now I've been getting away with just applying lemmas and not really thinking much about how things are actually set up using inductive types and such, but now I should probably turn my brain on.</p>",
        "id": 135262174,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1538753691
    },
    {
        "content": "<p>but I have no idea whether Bryan's sorry is easy to fill in or not. In some sense Neil Strickland is exhibiting a problem with doing mathematics in Lean here.</p>",
        "id": 135262176,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538753694
    },
    {
        "content": "<p>And it's a problem I stumbled upon when doing schemes and so no doubt is looming when the perfectoid project gets really moving again</p>",
        "id": 135262251,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538753776
    },
    {
        "content": "<p>We will need to be replacing complete topological rings with canonically isomorphic complete topological rings left right and centre.</p>",
        "id": 135262278,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538753816
    },
    {
        "content": "<p>where by canonically isomorphic I mean an explicit <code>equiv</code> of morphisms in the appropriate category.</p>",
        "id": 135262354,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538753885
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span> It's a common experience I find. E. W. Dijkstra had a nice way to put it: just let the symbols do the work.</p>",
        "id": 135262623,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538754187
    },
    {
        "content": "<p>It's taking me a little bit to boot up my brain but I have my coffee now so I should be able to understand a bit more. But Kevin had the right idea I think: you need a congruence lemma for <code>partition</code> with regards to <code>equiv</code></p>",
        "id": 135262725,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538754296
    },
    {
        "content": "<p>For the rest, let's see where the symbols take us</p>",
        "id": 135262743,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538754308
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> is that sorry above easy to fill in?</p>",
        "id": 135264259,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538755949
    },
    {
        "content": "<p>OK, I think I have a rough idea of what to look at now.  It's rather hard to figure out how to use something new, e.g. <code>equiv</code> when there isn't a chapter of TPiL to fall back on. It doesn't help that core lean has <code>has_equiv</code> which is apparently just unrelated notation. At least mathlib itself provides plenty of example code to learn from. Anyways, hopefully these tutorials will help future users...</p>",
        "id": 135264261,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1538755952
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/blob/tutorials/tutorials/partitions.lean#L96\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/tutorials/tutorials/partitions.lean#L96\">https://github.com/leanprover-community/mathlib/blob/tutorials/tutorials/partitions.lean#L96</a></p>",
        "id": 135264271,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538755971
    },
    {
        "content": "<p>I'm almost done proving:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">card_eq_of_equiv</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">to_set</span> <span class=\"err\">≃</span> <span class=\"n\">t</span><span class=\"bp\">.</span><span class=\"n\">to_set</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"bp\">=</span> <span class=\"n\">t</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"o\">:=</span>  <span class=\"bp\">...</span>\n</pre></div>\n\n\n<p>if you want to wait a moment</p>",
        "id": 135264295,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538756011
    },
    {
        "content": "<p><code>equiv X Y</code> is the best kind of bijection between two types <code>X</code> and <code>Y</code>.</p>",
        "id": 135264308,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538756022
    },
    {
        "content": "<p>It's an explicit map from <code>X</code> to <code>Y</code> and an explicit inverse.</p>",
        "id": 135264376,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538756056
    },
    {
        "content": "<p>Just saying \"there's a map and it's a bijection\" is slightly less information in Lean, because they need the computer science version of the axiom of choice (getting data from proofs of existence), so <code>equiv</code> is the important one to focus on.</p>",
        "id": 135264419,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538756127
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> Cool! I'm still digesting other code so you'll probably finish before I even get close to attempting my own version.</p>",
        "id": 135264426,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1538756147
    },
    {
        "content": "<p>The problem is that <code>equiv</code> is what mathematicians would think of as a canonical bijection between two sets.</p>",
        "id": 135264431,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538756152
    },
    {
        "content": "<p>There are other equivs too -- group isomorphisms, topological space isomorphism etc.</p>",
        "id": 135264494,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538756195
    },
    {
        "content": "<p>And then there is a whole bunch of stuff defined on types or groups or whatever, which descends to the equivalence classes under these various equivalence relations.</p>",
        "id": 135264510,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538756239
    },
    {
        "content": "<p>And for mathematicians these are all \"proof by obvious\", so it's clear there's a tactic brewing. But we don't have that tactic yet.</p>",
        "id": 135264591,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538756304
    },
    {
        "content": "<p>And without it, replacing a topological monoid with a canonically isomorphic topological monoid in a complex of topological monoids and then proving that the cohomology of the complex \"hasn't changed\" (when Lean actually can see that it _has_ changed in some sense) is going to be hard work I think.</p>",
        "id": 135264690,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538756430
    },
    {
        "content": "<p>It's certainly eye-opening (in a good way, probably). I remember having vaguely similar feelings about all the calculus I thought I knew when I took analysis.</p>",
        "id": 135264916,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1538756751
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span> The short answer to your question is: yes it's feasible. You need congruence of <code>partitions</code> with regards to <code>equiv</code> and congruence of <code>card</code> with regards to congruence as well. I'm completing the proof now if you want it. It you want to do it yourself, you can use these three hints:</p>\n<p>1. prove congruence of partitions<br>\n2. prove congruence of card<br>\n3. use trunc.induction_on</p>",
        "id": 135266320,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538758560
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> Great, thanks so much! Feel free to push your proofs into the tutorials branch if you'd like. I'll try to study them and add tutorial-style documentation later on.</p>",
        "id": 135266793,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1538759155
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> Great, thanks so much! Feel free to push your proofs into the tutorials branch if you'd like. I'll try to study them and add tutorial-style documentation later on.</p>\n</blockquote>\n<p>This should not be being documented. This should be being hidden by tactics, no?</p>",
        "id": 135266877,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538759247
    },
    {
        "content": "<p>\"We now do a big song and dance to replace an object with a canonically isomorphic object\". I'm sure the mathematicians would be fascinated :-)</p>",
        "id": 135266939,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538759289
    },
    {
        "content": "<p>I think there's something missing here.</p>",
        "id": 135266952,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538759314
    },
    {
        "content": "<p>It's rw for data somehow</p>",
        "id": 135266989,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538759357
    },
    {
        "content": "<p>We want a rw that eats equivs, not equalities and iffs, and works for data in situations where we only care about the answer up to canonical isomorphism.</p>",
        "id": 135267068,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538759420
    },
    {
        "content": "<p>That would be nice. It involves proving congruence about a ton of functions though. The nice thing about <code>=</code> is that every function preserves it.</p>",
        "id": 135267175,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538759523
    },
    {
        "content": "<p>Such a tactic as you're describing is doable. We only need to decide how high it needs to be on the priority list</p>",
        "id": 135267222,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538759595
    },
    {
        "content": "<p>I think we've had this discussion before. Wasn't there some hope that by proving some lemmas about the basic constructors in Lean one could then go on and get a machine to generate all the congruence lemmas automatically?</p>",
        "id": 135267239,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538759624
    },
    {
        "content": "<p>Can the <code>transfer</code> tactic be turned into this mega-rw tactic? Very often in mathematics people only care about the answer up to isomorphism or perhaps a well-defined notion of canonical isomorphism (maybe it's part of the story that the object is unique up to unique isomorphism, for example).</p>",
        "id": 135267426,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538759770
    },
    {
        "content": "<p>we want to be able to rewrite isomorphic perfectoid spaces. Is Lean up to that?</p>",
        "id": 135267545,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538759889
    },
    {
        "content": "<p>I remember building group isomorphism from their underlying type isomorphism but I don't remember the rest of the discussion that you're referring to.</p>",
        "id": 135267731,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538760120
    },
    {
        "content": "<p>But in my libraries, I have some code to construct an isomorphism from an arbitrary type to sums and pairs. With Jeremy, we're talking about adding support for reasoning about W-types which should complete the picture to building isomorphism to canonical type representations</p>",
        "id": 135267823,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538760209
    },
    {
        "content": "<p>Maybe that's what you're looking for?</p>",
        "id": 135267946,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538760317
    },
    {
        "content": "<p>I'm looking for magic</p>",
        "id": 135268845,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538761025
    },
    {
        "content": "<p><code>example (X Y : Type) (f : Type → Type) (h : equiv X Y) : equiv (f X) (f Y) := by rw h</code></p>",
        "id": 135268851,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538761029
    },
    {
        "content": "<p>Mario sometimes tells me that this isn't always true, but I'm not sure I've ever seen a mathematical example of it going wrong.</p>",
        "id": 135268880,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538761075
    },
    {
        "content": "<p>Here <code>equiv</code> could mean an <code>equiv</code> of structures, and then f is somehow known to preserve all the structure.</p>",
        "id": 135268942,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538761120
    },
    {
        "content": "<p>Is that magic Simon?</p>",
        "id": 135268989,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538761190
    },
    {
        "content": "<p>This time round I have a far more mature understanding of what I think is missing.</p>",
        "id": 135269044,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538761230
    },
    {
        "content": "<p>What we probably need is a type class to tell us that <code>f</code> preserves <code>equiv</code>. Then <code>iso_rw h</code> (a tactic we want to build) would know how to build the proof. As it is, <code>rw</code> builds its proofs using <code>congr_arg</code> and <code>congr_fun</code> which needs no assumptions about <code>f</code>. We need basically the same tools for <code>equiv</code>.</p>",
        "id": 135269222,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538761435
    },
    {
        "content": "<p>It would be interesting to find out when this is going to bite the perfectoid project and how badly it will bite it. With schemes it bit us when we were doing structure sheaves. Here we only have structure presheaves but who knows.</p>",
        "id": 135269351,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538761544
    },
    {
        "content": "<p>In the schemes project I ended up writing some really weird code.</p>",
        "id": 135269402,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538761573
    },
    {
        "content": "<p><a href=\"https://github.com/kbuzzard/lean-stacks-project/blob/53bea440dc519a1f6d023cbecc2dfe270499bbbf/src/tag01HR.lean#L210\" target=\"_blank\" title=\"https://github.com/kbuzzard/lean-stacks-project/blob/53bea440dc519a1f6d023cbecc2dfe270499bbbf/src/tag01HR.lean#L210\">https://github.com/kbuzzard/lean-stacks-project/blob/53bea440dc519a1f6d023cbecc2dfe270499bbbf/src/tag01HR.lean#L210</a></p>",
        "id": 135269745,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538761894
    },
    {
        "content": "<p>Over 350 (admittedly very inelegant and much commented) lines of code, to prove something which de Jong dismisses with one throwaway comment.</p>",
        "id": 135269818,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538761956
    },
    {
        "content": "<p>\"Thus we may apply Algebra, Lemma 10.23.1 to the module <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>M</mi><mi>f</mi></msub></mrow><annotation encoding=\"application/x-tex\">M_f</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.969438em;vertical-align:-0.286108em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.10903em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361079999999999em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\" style=\"margin-right:0.10764em;\">f</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"></span></span></span></span></span></span></span></span> over <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>R</mi><mi>f</mi></msub></mrow><annotation encoding=\"application/x-tex\">R_f</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.969438em;vertical-align:-0.286108em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361079999999999em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\" style=\"margin-right:0.10764em;\">f</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"></span></span></span></span></span></span></span></span> and the elements <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>g</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><mo>…</mo><mo separator=\"true\">,</mo><msub><mi>g</mi><mi>n</mi></msub></mrow><annotation encoding=\"application/x-tex\">g_1,\\ldots,g_n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.43056em;\"></span><span class=\"strut bottom\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathrm mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"minner\">…</span><span class=\"mpunct\">,</span><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span></span></span></span>.\" Note that Chris had already proved the lemma. The issue was applying it.</p>",
        "id": 135269955,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538762108
    },
    {
        "content": "<p>because <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>R</mi><mo>[</mo><mn>1</mn><mi mathvariant=\"normal\">/</mi><mi>f</mi><mo>]</mo><mo>[</mo><mn>1</mn><mi mathvariant=\"normal\">/</mi><mi>g</mi><mo>]</mo></mrow><annotation encoding=\"application/x-tex\">R[1/f][1/g]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.00773em;\">R</span><span class=\"mopen\">[</span><span class=\"mord mathrm\">1</span><span class=\"mord mathrm\">/</span><span class=\"mord mathit\" style=\"margin-right:0.10764em;\">f</span><span class=\"mclose\">]</span><span class=\"mopen\">[</span><span class=\"mord mathrm\">1</span><span class=\"mord mathrm\">/</span><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">g</span><span class=\"mclose\">]</span></span></span></span> was only canonically isomorphic to <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>R</mi><mo>[</mo><mn>1</mn><mi mathvariant=\"normal\">/</mi><mi>f</mi><mi>g</mi><mo>]</mo></mrow><annotation encoding=\"application/x-tex\">R[1/fg]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.00773em;\">R</span><span class=\"mopen\">[</span><span class=\"mord mathrm\">1</span><span class=\"mord mathrm\">/</span><span class=\"mord mathit\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">g</span><span class=\"mclose\">]</span></span></span></span></p>",
        "id": 135270021,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538762165
    },
    {
        "content": "<blockquote>\n<p>\"We now do a big song and dance to replace an object with a canonically isomorphic object\". I'm sure the mathematicians would be fascinated :-)</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>, have you seen <span class=\"user-mention\" data-user-id=\"130272\">@David Michael Roberts</span> attempt to summarise the latest disagreement between Mochizuki and Scholze? &lt;<a href=\"https://thehighergeometer.files.wordpress.com/2018/09/mochizuki_final1.pdf\" target=\"_blank\" title=\"https://thehighergeometer.files.wordpress.com/2018/09/mochizuki_final1.pdf\">https://thehighergeometer.files.wordpress.com/2018/09/mochizuki_final1.pdf</a>&gt;. It's very much about whether such replacements were valid or not.</p>",
        "id": 135284021,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1538776111
    },
    {
        "content": "<p>Wow I had not seen that. Thanks.</p>",
        "id": 135291222,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538786469
    },
    {
        "content": "<p>Is there an easy proof of this (is it secretly in mathlib)? I did this the hard way with <code>ext</code> and lots of digging back and forth through exists statements:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">embedding_of_finset</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"err\">↪</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span> <span class=\"err\">↪</span> <span class=\"n\">finset</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨λ</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">S</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"o\">{</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">injective</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">a₁</span> <span class=\"n\">a₂</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">ext</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span> <span class=\"err\">⊢</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">hex</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"o\">(</span><span class=\"n\">exists</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"n\">x</span> <span class=\"bp\">⟨</span><span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span><span class=\"o\">),</span>\n    <span class=\"n\">exact</span> <span class=\"n\">exists</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"n\">hex</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">y</span> <span class=\"n\">hy</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">hy</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">this</span> <span class=\"bp\">▸</span> <span class=\"n\">hy</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">})</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">hex</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"o\">(</span><span class=\"n\">exists</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"n\">x</span> <span class=\"bp\">⟨</span><span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span><span class=\"o\">),</span>\n    <span class=\"n\">exact</span> <span class=\"n\">exists</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"n\">hex</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">y</span> <span class=\"n\">hy</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">hy</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">this</span> <span class=\"bp\">▸</span> <span class=\"n\">hy</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">})</span> <span class=\"o\">}</span> <span class=\"o\">}</span><span class=\"bp\">⟩</span>\n</pre></div>",
        "id": 135298733,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1538801389
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>\"We now do a big song and dance to replace an object with a canonically isomorphic object\". I'm sure the mathematicians would be fascinated :-)</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>, have you seen <span class=\"user-mention\" data-user-id=\"130272\">@David Michael Roberts</span> attempt to summarise the latest disagreement between Mochizuki and Scholze? &lt;<a href=\"https://thehighergeometer.files.wordpress.com/2018/09/mochizuki_final1.pdf\" target=\"_blank\" title=\"https://thehighergeometer.files.wordpress.com/2018/09/mochizuki_final1.pdf\">https://thehighergeometer.files.wordpress.com/2018/09/mochizuki_final1.pdf</a>&gt;. It's very much about whether such replacements were valid or not.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"130272\">@David Michael Roberts</span> Thanks for writing these!</p>",
        "id": 135299119,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538802301
    },
    {
        "content": "<p>oops... I was too focused on the image properties and forgot about the fact that the function is injective</p>",
        "id": 135299259,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538802625
    },
    {
        "content": "<p>I pushed something like that to <code>tutorial</code> and called it <code>map'</code></p>",
        "id": 135299510,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538803322
    },
    {
        "content": "<p>Also, I finished the proof of <code>card_partitions_eq_card_partitions_fin</code> in the partition tutorial. It needed much more work than I thought</p>",
        "id": 135299600,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538803460
    },
    {
        "content": "<p>Ah, perfect! I was so engrossed in my attempt that I missed your commit.</p>",
        "id": 135299601,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1538803465
    },
    {
        "content": "<p>The big changes that I made was using <code>finset.sup</code> in the formulation of partition instead of using <code>multiset</code>s which required a few lemmas in <code>finset</code></p>",
        "id": 135299610,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538803557
    },
    {
        "content": "<p>Very nice! Using <code>sup</code> is much cleaner than the hack I was using with multiset.</p>\n<p><a href=\"https://gist.github.com/bryangingechen/4ba169f7db65711a07643cf213039049#file-partitions-lean-L282\" target=\"_blank\" title=\"https://gist.github.com/bryangingechen/4ba169f7db65711a07643cf213039049#file-partitions-lean-L282\">Here's what I had</a>. Now that I've looked at what you did, I see there's still a ton of stuff needed to fill in the sorry at line 292. In particular I hadn't even started on something like <code>partitions_congr</code> yet and that was definitely also necessary.</p>",
        "id": 135300028,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1538804419
    },
    {
        "content": "<blockquote>\n<blockquote>\n<blockquote>\n<p>\"We now do a big song and dance to replace an object with a canonically isomorphic object\". I'm sure the mathematicians would be fascinated :-)</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>, have you seen <span class=\"user-mention\" data-user-id=\"130272\">@David Michael Roberts</span> attempt to summarise the latest disagreement between Mochizuki and Scholze? &lt;<a href=\"https://thehighergeometer.files.wordpress.com/2018/09/mochizuki_final1.pdf\" target=\"_blank\" title=\"https://thehighergeometer.files.wordpress.com/2018/09/mochizuki_final1.pdf\">https://thehighergeometer.files.wordpress.com/2018/09/mochizuki_final1.pdf</a>&gt;. It's very much about whether such replacements were valid or not.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"130272\">@David Michael Roberts</span> Thanks for writing these!</p>\n</blockquote>\n<p>You're welcome!</p>",
        "id": 135300233,
        "sender_full_name": "David Michael Roberts",
        "timestamp": 1538804904
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> Just a heads-up, I'm rebuilding tutorial and I think your changes to <code>ext</code> have broken the proofs of various things in category_theory and holor.</p>",
        "id": 135300977,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1538806609
    },
    {
        "content": "<p>Sorry about that. You can revert them for now.</p>",
        "id": 135300987,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538806661
    },
    {
        "content": "<p>For the last <code>sorry</code>, do you need the lattice to be different from the lattice on finite sets?</p>",
        "id": 135301074,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538806842
    },
    {
        "content": "<p>Ok, I see your definition of subset. I'll pick it up tomorrow if you haven't managed to solve it</p>",
        "id": 135301119,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538806971
    },
    {
        "content": "<p>Yeah, I was thinking of implementing as a bonus <a href=\"https://en.wikipedia.org/wiki/Partition_of_a_set#Refinement_of_partitions\" target=\"_blank\" title=\"https://en.wikipedia.org/wiki/Partition_of_a_set#Refinement_of_partitions\">the lattice structure described here</a>.</p>",
        "id": 135301126,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1538806992
    },
    {
        "content": "<p>Ah! I see! You can somehow decrease a partition by taking one of its parts and splitting it, right?</p>",
        "id": 135301169,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538807104
    },
    {
        "content": "<p>Exactly.</p>",
        "id": 135301174,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1538807143
    },
    {
        "content": "<p>I think I could muddle my way through that eventually, though you're definitely welcome to work on it if you want to. I'd also appreciate comments on the other proofs / tutorial text that I've added if you've had a chance to look at them.</p>",
        "id": 135301305,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1538807404
    },
    {
        "content": "<p>If you use equivalence relations instead of partitions, this follows from the fact that equivalence relations have a Moore structure (they are closed under arbitrary intersection), so they have a complete lattice structure</p>",
        "id": 135301647,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538808301
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span> <a href=\"https://github.com/leanprover-community/mathlib/blob/tutorials/tutorials/partitions.lean#L109\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/tutorials/tutorials/partitions.lean#L109\">https://github.com/leanprover-community/mathlib/blob/tutorials/tutorials/partitions.lean#L109</a> Couldn't you just compare the <code>multiset.join</code> to the <code>multiset</code> that underlies our <code>finset</code>?</p>",
        "id": 135301756,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538808590
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span> Consider adding an example to <a href=\"https://github.com/leanprover-community/mathlib/blob/tutorials/tutorials/partitions.lean#L193\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/tutorials/tutorials/partitions.lean#L193\">https://github.com/leanprover-community/mathlib/blob/tutorials/tutorials/partitions.lean#L193</a> where the issue is multiplicity &gt; 1.</p>",
        "id": 135301989,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538809103
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span> <a href=\"https://github.com/leanprover-community/mathlib/blob/tutorials/tutorials/partitions.lean#L109\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/tutorials/tutorials/partitions.lean#L109\">https://github.com/leanprover-community/mathlib/blob/tutorials/tutorials/partitions.lean#L109</a> Couldn't you just compare the <code>multiset.join</code> to the <code>multiset</code> that underlies our <code>finset</code>?</p>\n</blockquote>\n<p>Thanks for pointing this out. In fact, Simon has created a better solution for this using <code>sup</code> which is used in <code>partition_of_disjoint_union</code> right below. I'll edit...</p>\n<p>I've added this example:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"o\">(</span><span class=\"n\">is_partition</span> <span class=\"o\">({{</span><span class=\"mi\">0</span><span class=\"o\">},</span> <span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">},</span> <span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">}}</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">4</span><span class=\"o\">)))</span> <span class=\"o\">:</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"c1\">-- ff</span>\n</pre></div>",
        "id": 135302186,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1538809580
    },
    {
        "content": "<p>I think this file could stand to be generalized quite a bit. I would want to see partitions defined as equivalence relations, forget the finiteness constraint, and forget the finset representatives</p>",
        "id": 135302235,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538809686
    },
    {
        "content": "<p>Then, given this, you can define the Bell numbers by a recurrence (so they compute fast), and prove that the number of partitions on a finite set is a bell number</p>",
        "id": 135302244,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538809735
    },
    {
        "content": "<p>At the same time, you can define an efficiently computable finset representation of a partition by recursion rather than filtering the universe</p>",
        "id": 135302257,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538809785
    },
    {
        "content": "<p>this both proves the recursion scheme for calculating its size, and also gives an efficiently computable partition function on finset</p>",
        "id": 135302304,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538809826
    },
    {
        "content": "<p>That sounds cool. Is there a good place to read about this approach?</p>",
        "id": 135302314,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1538809873
    },
    {
        "content": "<p>not particularly... basically finsets are bad for proving stuff when you don't need finiteness explicitly</p>",
        "id": 135302320,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538809918
    },
    {
        "content": "<p>you should use sets instead</p>",
        "id": 135302360,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538809927
    },
    {
        "content": "<p>especially since \"partition\" generalizes so nicely to the infinite case</p>",
        "id": 135302363,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538809954
    },
    {
        "content": "<p>If you need more details about some part about that let me know</p>",
        "id": 135302371,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538810013
    },
    {
        "content": "<p>It would be nice to have the <a href=\"https://en.wikipedia.org/wiki/Bell_triangle\" target=\"_blank\" title=\"https://en.wikipedia.org/wiki/Bell_triangle\">Bell triangle</a> used for calculating and defining the bell numbers</p>",
        "id": 135302418,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538810063
    },
    {
        "content": "<p>I guess Lean automatically memoizes computations? If I define <code>A n k = A (n-1) k + A n (k - 1)</code>, and I ask it to compute <code>A 10 5</code>, does that lead to combinatorial explosion? Or will it efficiently remember the terms it computed?</p>",
        "id": 135302637,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538810619
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> Do you know this?</p>",
        "id": 135302638,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538810637
    },
    {
        "content": "<p>Just for fun:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">bell_aux₁</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">list</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">list</span> <span class=\"bp\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">::</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">bell_triangle</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">list</span> <span class=\"bp\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">[])</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">::</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">let</span> <span class=\"n\">n&#39;</span> <span class=\"o\">:=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"k\">in</span> <span class=\"n\">bell_aux₁</span> <span class=\"n\">n&#39;</span> <span class=\"o\">(</span><span class=\"n\">bell_triangle</span> <span class=\"n\">n&#39;</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">bell_aux</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">list</span> <span class=\"bp\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span>     <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"o\">[])</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">bell_aux</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"n\">bell_aux₁</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">bell_triangle</span> <span class=\"n\">n</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">bell</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">bell_aux</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">bell</span> <span class=\"o\">(</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"mi\">20</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 135302991,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538811409
    },
    {
        "content": "<p>lean does not memoize things unless you tell it to. This is one of the major shortcomings of lean 3</p>",
        "id": 135303001,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538811435
    },
    {
        "content": "<p>Is the efficient partition function on finset that you had in mind one based on the \"Combinatorial Interpretation\" in the Bell triangle wiki page?</p>",
        "id": 135303250,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1538812034
    },
    {
        "content": "<p>Do we have a <code>memoize</code> monad that automagically does that for you?</p>",
        "id": 135303251,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538812058
    },
    {
        "content": "<p>I PR'd one to core back in the day, rejected</p>",
        "id": 135303295,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538812121
    },
    {
        "content": "<p>To do it in pure lean requires explicit maintenance of the accumulator data, in this case the <code>list nat</code> that forms the lines of the triangle as we progress</p>",
        "id": 135303301,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538812178
    },
    {
        "content": "<p>Right, but a pure Lean version might already be nice.</p>",
        "id": 135303345,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538812215
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span> Yes. That description of how to count partitions is exactly what you need to write a partition generating algorithm that obviously has length B_n</p>",
        "id": 135303346,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538812222
    },
    {
        "content": "<p>Lean can't figure out your accumulator data for you, at least not effectively</p>",
        "id": 135303357,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538812264
    },
    {
        "content": "<p>For example it's not completely obvious that you can calculate fibonacci numbers with a two number sliding window</p>",
        "id": 135303361,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538812292
    },
    {
        "content": "<p>I was thinking about a naive cache that would just remember all Fibonacci numbers. Don't bother about two number sliding windows. Or am I missing something?</p>",
        "id": 135303406,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538812385
    },
    {
        "content": "<p>Well, yes that can be done, indeed that's how lean used to work</p>",
        "id": 135303459,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538812532
    },
    {
        "content": "<p>Leo decided that this causes unpredictable performance characteristics (since it depends on how the equation compiler compiles your code)</p>",
        "id": 135303498,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538812568
    },
    {
        "content": "<p>so now it just follows what you tell it, and if you use a bad algorithm then it's your fault</p>",
        "id": 135303500,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538812595
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> I've just pushed a commit that moves the more general lemmas you wrote in <code>partitions</code> to more appropriate places in <code>data.finset</code>, <code>data.fintype</code> and <code>data.equiv.basic</code>. Also, one of the <code>tactic.tfae</code> tests still fails, even after I reverted the <code>tactic.ext</code> change.</p>\n<p>For now I think I'll leave the tutorial partitions file alone and see if I can make some progress working on Mario's idea in another file. If that turns out well that we can then decide whether we want to completely replace what we've done or perhaps include both approaches.</p>",
        "id": 135318182,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1538844485
    },
    {
        "content": "<p>The <code>tfae</code> problem is separate. Maybe we should just remove it from master while I fix it</p>",
        "id": 135327337,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538863267
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I'm stuck on something dumb:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">lattice</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">function</span>\n\n<span class=\"kn\">variable</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> We define a partition as a family of sets associated to an equivalence relation on a set -/</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">partition</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">blocks</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">empty_not_mem_blocks</span> <span class=\"o\">:</span> <span class=\"n\">blocks</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">blocks_partition</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"err\">∈</span> <span class=\"n\">blocks</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">b&#39;</span> <span class=\"err\">∈</span> <span class=\"n\">blocks</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"n\">b&#39;</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"err\">∉</span> <span class=\"n\">b&#39;</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">coe_of_setoid</span> <span class=\"o\">[</span><span class=\"n\">setoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">partition</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">blocks</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">t</span> <span class=\"bp\">|</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">s₁</span> <span class=\"n\">s₂</span><span class=\"o\">),</span> <span class=\"n\">s₁</span> <span class=\"err\">∈</span> <span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"n\">s₂</span> <span class=\"err\">∈</span> <span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"n\">s₁</span> <span class=\"bp\">≈</span> <span class=\"n\">s₂</span> <span class=\"o\">},</span>\n  <span class=\"n\">empty_not_mem_blocks</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">blocks_partition</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span> <span class=\"o\">}</span>\n</pre></div>\n\n\n<p>I can't seem to prove that the empty set isn't contained in <code>blocks</code>. I also tried <code>blocks :=  {t | ∃ a, s ∈ t → a ≈ s}</code> without success.</p>",
        "id": 135333218,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1538876272
    },
    {
        "content": "<p><code>blocks := {t | ∃ a, {b | a ≈ b} = t}</code></p>",
        "id": 135333262,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538876363
    },
    {
        "content": "<p>You can also write this as the range of a function</p>",
        "id": 135333265,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538876381
    },
    {
        "content": "<blockquote>\n<p><code>blocks :=  {t | ∃ a, s ∈ t → a ≈ s}</code></p>\n</blockquote>\n<p>This gives the set of subsets of some equivalence class</p>\n<blockquote>\n<p><code>blocks := {t | ∀ (s₁ s₂), s₁ ∈ t → s₂ ∈ t → s₁ ≈ s₂ }</code></p>\n</blockquote>\n<p>This gives the set of unions of equivalence classes</p>",
        "id": 135333318,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538876485
    },
    {
        "content": "<blockquote>\n<p><code>(empty_not_mem_blocks : blocks)</code></p>\n</blockquote>\n<p>The type on this isn't quite right...</p>",
        "id": 135333360,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538876548
    },
    {
        "content": "<p>But I don't think you should think much about this definition of partition. As far as possible you should just use equivalence relations</p>",
        "id": 135333367,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538876623
    },
    {
        "content": "<p>Ah, thanks! I need to be more careful...</p>\n<p>I do have <code>(empty_not_mem_blocks : ∅ ∉ blocks)</code>. I think I accidentally deleted it when I was  writing my previous message.</p>",
        "id": 135333410,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1538876670
    },
    {
        "content": "<p>I would hope to be able to use <code>quot</code> to talk about equivalence classes, rather than sets</p>",
        "id": 135333420,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538876738
    },
    {
        "content": "<p>but that doesn't fit in this definition of partition</p>",
        "id": 135333422,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538876750
    },
    {
        "content": "<p>OK, so I should just try to define poset / lattice instances on <code>setoid α</code>.</p>",
        "id": 135333519,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1538876940
    },
    {
        "content": "<p>yes, that should work</p>",
        "id": 135333682,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538877335
    },
    {
        "content": "<p>This works:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_subset</span> <span class=\"o\">(</span><span class=\"n\">setoid</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨λ</span> <span class=\"n\">r₁</span> <span class=\"n\">r₂</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"k\">let</span> <span class=\"n\">r1</span> <span class=\"o\">:=</span> <span class=\"n\">r₁</span><span class=\"bp\">.</span><span class=\"n\">r</span> <span class=\"k\">in</span> <span class=\"k\">let</span> <span class=\"n\">r2</span> <span class=\"o\">:=</span> <span class=\"n\">r₂</span><span class=\"bp\">.</span><span class=\"n\">r</span> <span class=\"k\">in</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"bp\">|</span> <span class=\"n\">r1</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"err\">⊆</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"bp\">|</span> <span class=\"n\">r2</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">}</span><span class=\"bp\">⟩</span>\n</pre></div>\n\n\n<p>This fails:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"n\">a22</span> <span class=\"o\">:</span> <span class=\"n\">has_subset</span> <span class=\"o\">(</span><span class=\"n\">setoid</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨λ</span> <span class=\"n\">r₁</span> <span class=\"n\">r₂</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"bp\">|</span> <span class=\"n\">r₁</span><span class=\"bp\">.</span><span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"err\">⊆</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"bp\">|</span> <span class=\"n\">r₂</span><span class=\"bp\">.</span><span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">}</span><span class=\"bp\">⟩</span>\n<span class=\"c\">/-</span><span class=\"cm\"> invalid field notation, function &#39;setoid.r&#39; does not have explicit argument with type (setoid ...) -/</span>\n</pre></div>\n\n\n<p>Anyone know why?</p>",
        "id": 135335317,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1538880993
    },
    {
        "content": "<p>Usually the <code>simp</code> proves these equalities between structures, but not this time:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">setoid_eq_iff_r_eq</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">r₁</span> <span class=\"n\">r₂</span> <span class=\"o\">:</span> <span class=\"n\">setoid</span> <span class=\"n\">α</span><span class=\"o\">},</span> <span class=\"n\">r₁</span> <span class=\"bp\">=</span> <span class=\"n\">r₂</span> <span class=\"bp\">↔</span> <span class=\"n\">r₁</span><span class=\"bp\">.</span><span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"n\">r₂</span><span class=\"bp\">.</span><span class=\"n\">r</span>\n<span class=\"bp\">|</span> <span class=\"bp\">⟨</span><span class=\"n\">r1</span><span class=\"o\">,</span> <span class=\"n\">e1</span><span class=\"bp\">⟩</span> <span class=\"bp\">⟨</span><span class=\"n\">r2</span><span class=\"o\">,</span> <span class=\"n\">e2</span><span class=\"bp\">⟩</span>\n<span class=\"o\">:=</span> <span class=\"k\">begin</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>What's the right way to do this? I don't know how to project out what I want from the equality <code>r₁ = r₂</code> between setoid structures.</p>",
        "id": 135336689,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1538884064
    },
    {
        "content": "<p>You can use <code>cases</code> on <code>r1</code>, <code>r2</code>, split the equivalence and use <code>cases</code> on the equality assumption in both cases.</p>",
        "id": 135337108,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538884971
    },
    {
        "content": "<p>Thanks. Did you mean something like this?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">eq_iff_r_eq</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">r₁</span> <span class=\"n\">r₂</span> <span class=\"o\">:</span> <span class=\"n\">setoid</span> <span class=\"n\">α</span><span class=\"o\">},</span> <span class=\"n\">r₁</span> <span class=\"bp\">=</span> <span class=\"n\">r₂</span> <span class=\"bp\">↔</span> <span class=\"n\">r₁</span><span class=\"bp\">.</span><span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"n\">r₂</span><span class=\"bp\">.</span><span class=\"n\">r</span>\n<span class=\"bp\">|</span> <span class=\"bp\">⟨</span><span class=\"n\">r1</span><span class=\"o\">,</span> <span class=\"n\">e1</span><span class=\"bp\">⟩</span> <span class=\"bp\">⟨</span><span class=\"n\">r2</span><span class=\"o\">,</span> <span class=\"n\">e2</span><span class=\"bp\">⟩</span>\n<span class=\"o\">:=</span> <span class=\"k\">begin</span>\n  <span class=\"n\">intros</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span>  <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>I'm getting a rather unhelpful error: <code>cases tactic failed, unexpected failure when introducing auxiliary equatilies</code>.</p>",
        "id": 135337309,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1538885411
    },
    {
        "content": "<p>That's odd. Try <code>injection h</code>, maybe that'll work</p>",
        "id": 135337320,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538885505
    },
    {
        "content": "<p>Yep, that worked. I don't know how to use <code>cases</code> in the second case though, since now the equality between structures is now in the goal.</p>",
        "id": 135337464,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1538885839
    },
    {
        "content": "<p>you can do <code>subst h</code></p>",
        "id": 135337504,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538885897
    },
    {
        "content": "<p><code>intro h, subst h</code> gives this error:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">subst</span> <span class=\"n\">tactic</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"kn\">hypothesis</span> <span class=\"err\">&#39;</span><span class=\"n\">h&#39;</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">form</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"n\">or</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">,</span>\n<span class=\"n\">eq_iff_r_eq</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">r₁</span> <span class=\"n\">r₂</span> <span class=\"o\">:</span> <span class=\"n\">setoid</span> <span class=\"n\">α</span><span class=\"o\">},</span> <span class=\"n\">r₁</span> <span class=\"bp\">=</span> <span class=\"n\">r₂</span> <span class=\"bp\">↔</span> <span class=\"bp\">@</span><span class=\"n\">r</span> <span class=\"n\">α</span> <span class=\"n\">r₁</span> <span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">r</span> <span class=\"n\">α</span> <span class=\"n\">r₂</span><span class=\"o\">,</span>\n<span class=\"n\">r1</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span>\n<span class=\"n\">e1</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">equivalence</span> <span class=\"n\">α</span> <span class=\"n\">r1</span><span class=\"o\">,</span>\n<span class=\"n\">r2</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span>\n<span class=\"n\">e2</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">equivalence</span> <span class=\"n\">α</span> <span class=\"n\">r2</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">r</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">mk</span> <span class=\"n\">α</span> <span class=\"n\">r1</span> <span class=\"n\">e1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">r</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">mk</span> <span class=\"n\">α</span> <span class=\"n\">r2</span> <span class=\"n\">e2</span><span class=\"o\">)</span>\n<span class=\"err\">⊢</span> <span class=\"bp\">@</span><span class=\"n\">mk</span> <span class=\"n\">α</span> <span class=\"n\">r1</span> <span class=\"n\">e1</span> <span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">mk</span> <span class=\"n\">α</span> <span class=\"n\">r2</span> <span class=\"n\">e2</span>\n</pre></div>",
        "id": 135337558,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1538886060
    },
    {
        "content": "<p>What if you do <code>dsimp at h</code> first?</p>",
        "id": 135337605,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538886131
    },
    {
        "content": "<p>Ah, perfect! Thanks so much!</p>",
        "id": 135337610,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1538886165
    },
    {
        "content": "<p><span class=\"emoji emoji-1f44d\" title=\"+1\">:+1:</span></p>",
        "id": 135337663,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538886268
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/blob/tutorials/order/partitions.lean\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/tutorials/order/partitions.lean\">Here's</a> the WIP complete lattice instance on setoids. I've completed the poset stuff and inf, top, bot but not much else, so a lot of the theorems are just broken skeletons from e.g. data.set.basic.</p>\n<p>Is there a clean way of defining the sup / union / join operation? This boils down to something like two elements a z are equivalent in the transitive closure of r1 and r2 if there exists a finite chain of equivalences r1 a b, r2 b c, r1 c d, ... , r_ y z.</p>",
        "id": 135340678,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1538893241
    },
    {
        "content": "<p>Aren't the relations in the setoid equivalences? They should be already transitive, symmetric and reflexive. sup and inf of <code>f : a -&gt; b -&gt; b -&gt; Prop</code> should be <code>λ x y, ∃ i, f i x y</code> and <code>λ x y, ∀ i, f i x y</code> respectively</p>",
        "id": 135340789,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538893519
    },
    {
        "content": "<p>Note that <code>eqv_gen</code> will allow you to take the \"span\" of an arbitrary relation, so you can just union up a bunch of things and take the span for the supremum</p>",
        "id": 135340915,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538893777
    },
    {
        "content": "<p>What's the span of a relation?</p>",
        "id": 135341333,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538894678
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> I'm not sure I understand. I guess your <code>f</code> is a family of equivalence relations indexed by <code>a</code>? I think your inf agrees with <a href=\"https://github.com/leanprover-community/mathlib/blob/tutorials/order/partitions.lean#L87\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/tutorials/order/partitions.lean#L87\">what I have</a>, but I don't think your sup is the correct one. Consider the following two equivalence relations r1 and r2 on the nats, the equivalence classes of r1 are {0,1}, {2,3}, {4,5}, ... and the equivalence classes of r2 are {0}, {1,2}, {3,4}, {5,6}, ....  The sup of r1 and r2 has only one equivalence class equal to nat, so in particular 0 is equivalent to 1000, but you need a very long chain of r1 and r2 relations to witness it.</p>",
        "id": 135341672,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1538895491
    },
    {
        "content": "<p><code>eqv_gen</code> is the equivalence closure of a relation, this is what Bryan wants</p>",
        "id": 135341680,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538895597
    },
    {
        "content": "<p>Because equivalence relations are closed under arbitrary intersection, you can construct a generic \"span\" function that gets the smallest equivalence relation including some specified relation, and <code>eqv_gen</code> is this</p>",
        "id": 135341740,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538895683
    },
    {
        "content": "<p>Thanks Mario! <code>eqv_gen</code> looks promising. It will probably take me some time to figure out how to use it though.</p>",
        "id": 135341836,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1538895947
    },
    {
        "content": "<p>In your case I think you want to take the <code>eqv_gen</code> of Simon's relation <code>λ x y, ∃ i, f i x y</code></p>",
        "id": 135341919,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538896110
    },
    {
        "content": "<p>OK great, I think I'm starting to get it. I think I would have never found this definition on my own.</p>",
        "id": 135342114,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1538896573
    },
    {
        "content": "<p>Note that it's not required to use that definition, and indeed there is a more \"abstract nonsense\" definition that makes the proof obligations easier. Define the intersection of an arbitrary indexed family of equivalence relations using Simon's definition; it is straightforward to show this is an equivalence relation. From this, you can define every other element of the complete lattice structure, the inf, the sup, the Sup, the top and bot</p>",
        "id": 135342177,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538896768
    },
    {
        "content": "<p>Do you use \"abstract nonsense\" interchangeably with category theory?</p>",
        "id": 135342226,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538896839
    },
    {
        "content": "<p>in this case it's lattice theory</p>",
        "id": 135342301,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538897018
    },
    {
        "content": "<p>but I guess posets are categories, so sure</p>",
        "id": 135342337,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538897043
    },
    {
        "content": "<p>So I see that the intersection works, but how do I get the union from it? Would I have to define it using the finite chains of relations manually?</p>",
        "id": 135342344,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1538897101
    },
    {
        "content": "<p>I haven't looked at that function too closely but I think you could take the union as I defined it and take its transitive, symmetric, reflexive closure</p>",
        "id": 135342950,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538898385
    },
    {
        "content": "<p>Does that make sense?</p>",
        "id": 135342951,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538898389
    },
    {
        "content": "<blockquote>\n<p>Do you use \"abstract nonsense\" interchangeably with category theory?</p>\n</blockquote>\n<p>This is the most common usage of the phrase \"abstract nonsense\" when you see it in the mathematical literature, but the category theory in question can range from a simple diagram chase to the adjoint functor theorem and possibly beyond.</p>",
        "id": 135342999,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538898494
    },
    {
        "content": "<p>You don't need to take any reflexive symmetric closures with the approach I suggested</p>",
        "id": 135343827,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538900416
    },
    {
        "content": "<p>Given an intersection construction, you can define the supremum as the intersection of all equivalence classes containing the inputs</p>",
        "id": 135343837,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538900457
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 135343843,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1538900474
    },
    {
        "content": "<p>But what about the union?</p>",
        "id": 135343905,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538900640
    },
    {
        "content": "<p>that is the union</p>",
        "id": 135343945,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538900656
    },
    {
        "content": "<p>i.e. <code>a \\sqcup b = Inf {s | a &lt;= s /\\ b &lt;= s}</code></p>",
        "id": 135343949,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538900687
    },
    {
        "content": "<p>similarly for arbitrary union</p>",
        "id": 135343955,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538900705
    },
    {
        "content": "<blockquote>\n<p>Given an intersection construction, you can define the supremum as the intersection of all equivalence classes containing the inputs</p>\n</blockquote>\n<p>Typo here? Should the supremum be defined in terms of the union of [...]</p>",
        "id": 135343958,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1538900708
    },
    {
        "content": "<p>no</p>",
        "id": 135343962,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538900716
    },
    {
        "content": "<p>Think of it as an approximation of the union \"from above\"</p>",
        "id": 135343971,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538900749
    },
    {
        "content": "<p>Ah, OK.</p>",
        "id": 135344018,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1538900769
    },
    {
        "content": "<p>the union is the LEAST upper bound, so you can just take the infimum of upper bounds</p>",
        "id": 135344019,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538900771
    },
    {
        "content": "<p>are there any <code>sorry</code> that I can fill?</p>",
        "id": 135344079,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538900887
    },
    {
        "content": "<p>Feel free to consider any broken proof in my files as a sorry. I'm not actively working on it at the moment.</p>",
        "id": 135344146,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1538901104
    },
    {
        "content": "<p>do I need to compile for 1 hour to find out which proof is broken?</p>",
        "id": 135344231,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538901257
    },
    {
        "content": "<p>Ah, OK. Well <code>inter_subset_right</code>, <code>inter_subset_left</code>, <code>subset_inter</code> are broken but the statements should be right. You can just delete their proofs and fill them in. Let me see if there are others.</p>",
        "id": 135344301,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1538901428
    },
    {
        "content": "<p>again, I need to compile for 1 hour to build this branch</p>",
        "id": 135344303,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538901452
    },
    {
        "content": "<p>so I don't really know what I can do</p>",
        "id": 135344306,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538901459
    },
    {
        "content": "<p>how do other people work on this branch?</p>",
        "id": 135344308,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538901471
    },
    {
        "content": "<p>how does <span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> work on this branch?</p>",
        "id": 135344350,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538901532
    },
    {
        "content": "<p>I guess we've all got faster computers? It takes my computer about 10 minutes to compile mathlib.</p>",
        "id": 135344402,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1538901611
    },
    {
        "content": "<p>do you have 24 threads?</p>",
        "id": 135344423,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538901703
    },
    {
        "content": "<p>The Activity monitor says lean is using 14 right now. I just started another build after switching branches. Let's see how long it takes.</p>",
        "id": 135344477,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1538901788
    },
    {
        "content": "<p>can't you see how many threads you have?</p>",
        "id": 135344480,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538901805
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/8KeKjpR28C3y92LYg_XEHFbR/2018-10-07.png\" target=\"_blank\" title=\"2018-10-07.png\">2018-10-07.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/8KeKjpR28C3y92LYg_XEHFbR/2018-10-07.png\" target=\"_blank\" title=\"2018-10-07.png\"><img src=\"/user_uploads/3121/8KeKjpR28C3y92LYg_XEHFbR/2018-10-07.png\"></a></div>",
        "id": 135344635,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538902100
    },
    {
        "content": "<p>Do you mean threads across all processes? It's something like 1800 threads and 360 processes. I'm on a 6 core macbook pro.</p>",
        "id": 135344636,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1538902139
    },
    {
        "content": "<p>I have 2 cores and 4 threads</p>",
        "id": 135344642,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538902167
    },
    {
        "content": "<p>I'm on a windows surface</p>",
        "id": 135344643,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538902175
    },
    {
        "content": "<p>That's really amazing. I'm sure the surface has its advantages. </p>\n<p>Oh yeah, you can now bind a key to toggle the infoview live updating in the VS code extension, in case you want to pause the tactic state while lean is busy. It's <code>lean.infoview.toggleUpdating</code> in the keyboard shortcuts.</p>",
        "id": 135344780,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1538902494
    },
    {
        "content": "<p>This branch seems to be all kinds of screwed up. There's something wrong in <code>data.finset</code> that I have to look at.</p>",
        "id": 135344793,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1538902545
    },
    {
        "content": "<blockquote>\n<p>That's really amazing. I'm sure the surface has its advantages. </p>\n</blockquote>\n<p>I guess it isn't designed to build lean</p>",
        "id": 135344845,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538902646
    },
    {
        "content": "<p>Yes, an ultrabook is not intended for heavy workstation programming</p>",
        "id": 135345229,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538903485
    },
    {
        "content": "<p>tutorial should now build properly. <code>order.partitions</code> is also filled out with sorries, so it should be more clear what's missing.</p>",
        "id": 135345608,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1538904303
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/blob/tutorials/order/partitions.lean#L68\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/tutorials/order/partitions.lean#L68\">Here's my definition for union using <code>eqv_gen</code></a> (is this right?).  Now this is what I need to show <code>union_subset</code> (forgive any typos introduced by my manual prettifying...):</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">,</span>\n<span class=\"n\">r₁</span> <span class=\"n\">r₂</span> <span class=\"n\">r₃</span> <span class=\"o\">:</span> <span class=\"n\">setoid</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"n\">r1</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">@</span><span class=\"n\">eqv_gen</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">s₁</span> <span class=\"n\">s₂</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"bp\">@</span><span class=\"n\">r</span> <span class=\"n\">α</span> <span class=\"n\">r₁</span> <span class=\"n\">s₁</span> <span class=\"n\">s₂</span> <span class=\"bp\">∨</span> <span class=\"bp\">@</span><span class=\"n\">r</span> <span class=\"n\">α</span> <span class=\"n\">r₂</span> <span class=\"n\">s₁</span> <span class=\"n\">s₂</span><span class=\"o\">),</span>\n<span class=\"n\">r2</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">r</span> <span class=\"n\">α</span> <span class=\"n\">r₃</span><span class=\"o\">,</span>\n<span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"n\">a_1</span> <span class=\"o\">:</span> <span class=\"n\">r1</span> <span class=\"n\">a</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n<span class=\"n\">h23</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"bp\">@</span><span class=\"n\">r</span> <span class=\"n\">α</span> <span class=\"n\">r₂</span> <span class=\"n\">a</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">r2</span> <span class=\"n\">a</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n<span class=\"n\">h13</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"bp\">@</span><span class=\"n\">r</span> <span class=\"n\">α</span> <span class=\"n\">r₁</span> <span class=\"n\">a</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">r2</span> <span class=\"n\">a</span> <span class=\"n\">y</span>\n<span class=\"err\">⊢</span> <span class=\"n\">r2</span> <span class=\"n\">a</span> <span class=\"n\">x</span>\n</pre></div>\n\n\n<p>Here's a very informal argument: <code>a_1</code> tells us that there's some finite chain of r₁  and r₂ equivalences between a and x, and and we then repeatedly apply h13 and h23 to each of the links of that chain to win. How do I do this?</p>",
        "id": 135359879,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1538933538
    },
    {
        "content": "<p>I have only half-been paying attention to this thread (and indeed Zulip) but I have a little time before bed. You're trying to prove that if r,s,t are three equivalence relations on a set, and both s and t are subsets of r, then the equivalence relation generated by s and t is a subset of r, right? Do you have that if x is a random relation contained in an equivalence relation r then the equivalence relation generated by x is also contained in r? It's trivial from this, right?</p>",
        "id": 135365476,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538945802
    },
    {
        "content": "<p>I'm asking if we have the universal property of \"equivalence relation generated by\".</p>",
        "id": 135365488,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538945862
    },
    {
        "content": "<p>you mean <code>rec_on</code></p>",
        "id": 135365545,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538945987
    },
    {
        "content": "<p>This would be trivial if you knew that the equivalence relation generated by an arbitrary relation was equal to the intersection of all the equivalence relations containing this relation. Sorry I'm late to the party; there's a lot of other noise in this thread too.</p>",
        "id": 135365546,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538945989
    },
    {
        "content": "<p>I think I can do what I want with <a href=\"https://github.com/leanprover/mathlib/blob/57194fa57e76721a517d6969ee88a6007f0722b3/logic/relation.lean#L367\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/blob/57194fa57e76721a517d6969ee88a6007f0722b3/logic/relation.lean#L367\"><code>relation.eqv_gen_mono</code></a>. That might be the same thing that you're saying.</p>",
        "id": 135365653,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1538946151
    },
    {
        "content": "<p>Kenny you're right</p>",
        "id": 135365655,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538946153
    },
    {
        "content": "<p>Is the question \"how do I fill in the sorry here: <a href=\"https://github.com/leanprover-community/mathlib/blob/1030f5324363a9213cf4b68f834fad0d124b8a13/order/partitions.lean#L110\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/1030f5324363a9213cf4b68f834fad0d124b8a13/order/partitions.lean#L110\">https://github.com/leanprover-community/mathlib/blob/1030f5324363a9213cf4b68f834fad0d124b8a13/order/partitions.lean#L110</a> \"?</p>",
        "id": 135365667,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538946216
    },
    {
        "content": "<p>If so, I am suggesting that you first prove that for an arbitrary relation x and an equiv reln r, x is a subset of r iff the equiv reln generated by x is a subset of r</p>",
        "id": 135365716,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538946288
    },
    {
        "content": "<p>and then the union thing is a triviality</p>",
        "id": 135365717,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538946298
    },
    {
        "content": "<p>and Kenny is suggesting that that the universal property of the relation is just the recursor</p>",
        "id": 135365728,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538946321
    },
    {
        "content": "<p>so this should be hopefully straightforward.</p>",
        "id": 135365730,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538946332
    },
    {
        "content": "<p>Do you want me to try or am I answering the wrong question <span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span> ?</p>",
        "id": 135365733,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538946344
    },
    {
        "content": "<p>Yes, that was the question. I think I've solved it just now though:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">union_subset</span> <span class=\"o\">{</span><span class=\"n\">r₁</span> <span class=\"n\">r₂</span> <span class=\"n\">r₃</span> <span class=\"o\">:</span> <span class=\"n\">setoid</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h13</span> <span class=\"o\">:</span> <span class=\"n\">r₁</span> <span class=\"err\">⊆</span> <span class=\"n\">r₃</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h23</span> <span class=\"o\">:</span> <span class=\"n\">r₂</span> <span class=\"err\">⊆</span> <span class=\"n\">r₃</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">r₁</span> <span class=\"err\">∪</span> <span class=\"n\">r₂</span> <span class=\"err\">⊆</span> <span class=\"n\">r₃</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">subset_def</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h13</span> <span class=\"n\">h23</span> <span class=\"err\">⊢</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">subset_def</span><span class=\"o\">,</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem_set_of_eq</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h13</span> <span class=\"n\">h23</span> <span class=\"err\">⊢</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">union_def</span><span class=\"o\">,</span> <span class=\"n\">rel_union</span><span class=\"o\">],</span>\n  <span class=\"n\">intros</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hor</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">r</span> <span class=\"n\">α</span> <span class=\"n\">r₁</span> <span class=\"n\">a</span> <span class=\"n\">x</span> <span class=\"bp\">∨</span> <span class=\"bp\">@</span><span class=\"n\">r</span> <span class=\"n\">α</span> <span class=\"n\">r₂</span> <span class=\"n\">a</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"bp\">@</span><span class=\"n\">r</span> <span class=\"n\">α</span> <span class=\"n\">r₃</span> <span class=\"n\">a</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">x</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">h13</span> <span class=\"n\">a</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h23</span> <span class=\"n\">a</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">H</span> <span class=\"o\">:=</span> <span class=\"n\">relation</span><span class=\"bp\">.</span><span class=\"n\">eqv_gen_mono</span> <span class=\"n\">hor</span> <span class=\"n\">a_1</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">relation</span><span class=\"bp\">.</span><span class=\"n\">eqv_gen_iff_of_equivalence</span> <span class=\"bp\">_</span> <span class=\"n\">r₃</span><span class=\"bp\">.</span><span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">x</span> <span class=\"n\">r₃</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"n\">H</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 135365828,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1538946561
    },
    {
        "content": "<p>I think <code>relation.eqv_gen_mono</code> is this property you are describing. And it does appear to me to be proved in the way you guys are suggesting. Thanks for the explanation though, without it, I was probably just going to go on not really understanding what was happening under the hood here!</p>",
        "id": 135365891,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1538946678
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> why did this come out so horrible:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">sub_of_gen_sub</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">setoid</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"bp\">@</span><span class=\"n\">setoid</span><span class=\"bp\">.</span><span class=\"n\">r</span> <span class=\"bp\">_</span> <span class=\"n\">s</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">eqv_gen</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"bp\">@</span><span class=\"n\">setoid</span><span class=\"bp\">.</span><span class=\"n\">r</span> <span class=\"bp\">_</span> <span class=\"n\">s</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">H2</span><span class=\"o\">,</span> <span class=\"n\">eqv_gen</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">H2</span> <span class=\"n\">H</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">setoid</span><span class=\"bp\">.</span><span class=\"n\">iseqv</span> <span class=\"n\">α</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">_</span> <span class=\"n\">H3</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">setoid</span><span class=\"bp\">.</span><span class=\"n\">iseqv</span> <span class=\"n\">α</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">H3</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">H4</span> <span class=\"n\">H5</span><span class=\"o\">,(</span><span class=\"bp\">@</span><span class=\"n\">setoid</span><span class=\"bp\">.</span><span class=\"n\">iseqv</span> <span class=\"n\">α</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">H4</span> <span class=\"n\">H5</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 135366475,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538947868
    },
    {
        "content": "<p>Oh it's because I should be using a typeclass</p>",
        "id": 135366478,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538947908
    },
    {
        "content": "<p>what do you mean by terrible?</p>",
        "id": 135366479,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538947910
    },
    {
        "content": "<p>oh</p>",
        "id": 135366480,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538947912
    },
    {
        "content": "<p>I didn't use typeclasses because I could see I'd have two equiv relns on alpha</p>",
        "id": 135366518,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538947923
    },
    {
        "content": "<p>well it's a lemma</p>",
        "id": 135366530,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538947959
    },
    {
        "content": "<p>the typeclass is local</p>",
        "id": 135366531,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538947964
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">sub_of_gen_sub</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">setoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">≈</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">eqv_gen</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">≈</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">H2</span><span class=\"o\">,</span> <span class=\"n\">eqv_gen</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">H2</span> <span class=\"n\">H</span>\n  <span class=\"n\">setoid</span><span class=\"bp\">.</span><span class=\"n\">refl</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">setoid</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">setoid</span><span class=\"bp\">.</span><span class=\"n\">trans</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 135366578,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538948044
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span> it's not mono, this is a slightly longer way around isn't it? Mono says if x sub y then the equiv reln gen by x is a subset of the equiv reln generated by y. To get the universal property from that you also need that the equiv reln generated by an equiv reln is itself, which is another lemma</p>",
        "id": 135366588,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538948080
    },
    {
        "content": "<p>inb4 <em>galois insertion</em></p>",
        "id": 135366590,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538948096
    },
    {
        "content": "<p>rofl</p>",
        "id": 135366594,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538948105
    },
    {
        "content": "<p>I can quite believe it.</p>",
        "id": 135366599,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538948109
    },
    {
        "content": "<p>Right, you can see I had to use <code>relation.eqv_gen_iff_of_equivalence</code>.</p>",
        "id": 135366600,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1538948112
    },
    {
        "content": "<p>although it might be a coinsertion</p>",
        "id": 135366601,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538948115
    },
    {
        "content": "<p>With <code>sub_of_gen_sub</code> (which is a relatively straightforward consequence of the recursor) the proof is simpler.</p>",
        "id": 135366602,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538948160
    },
    {
        "content": "<p>The lemma reduces you to checking that if X and Y are subsets of Z then so is X union Y, which will be in the library</p>",
        "id": 135366644,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538948202
    },
    {
        "content": "<p>I don't really understand</p>",
        "id": 135366692,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538948297
    },
    {
        "content": "<p>It wouldn't surprise me if <code>sub_of_gen_sub</code> is already in the library, perhaps under a better name.</p>",
        "id": 135366694,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538948311
    },
    {
        "content": "<p>this is just the preimage of the canonical embedding from the set of equivalence relations on A to P(A x A)</p>",
        "id": 135366695,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538948319
    },
    {
        "content": "<p>yes</p>",
        "id": 135366698,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538948335
    },
    {
        "content": "<p>Bryan is using subset notation in exactly this way</p>",
        "id": 135366704,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538948350
    },
    {
        "content": "<p>but he's not proving things this way</p>",
        "id": 135366705,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538948365
    },
    {
        "content": "<p>I did a search for <code>eqv_gen</code> in mathlib and it only showed up in <code>logic.relation</code> and Kenny's free group file.</p>",
        "id": 135366706,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1538948371
    },
    {
        "content": "<p>Kenny I'm sure both Bryan and I would be interested if you were to blow his code out of the water using a more high-powered way of thinking about this question.</p>",
        "id": 135366750,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538948425
    },
    {
        "content": "<p>blow his code out of the water?</p>",
        "id": 135366765,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538948482
    },
    {
        "content": "<p>Bryan, do you know what a Galois insertion is?</p>",
        "id": 135366766,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538948485
    },
    {
        "content": "<p>I'm about to have dinner, so I'll push what I have. Feel free to make arbitrary changes if you're willing to deal with the compile times.</p>\n<p>I was just about to ask whether I ought to know about Galois (co)insertions...</p>",
        "id": 135366782,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1538948522
    },
    {
        "content": "<p>So the idea is that the construction sending a random relation to an equivalence relation is an adjoint to the forgetful functor sending an equivalence relation to the underlying relation</p>",
        "id": 135366814,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538948561
    },
    {
        "content": "<blockquote>\n<p>Kenny I'm sure both Bryan and I would be interested if you were to blow his code out of the water using a more high-powered way of thinking about this question.</p>\n</blockquote>\n<p>I still don't know what the question is</p>",
        "id": 135366817,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538948568
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/blob/1030f5324363a9213cf4b68f834fad0d124b8a13/order/partitions.lean\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/1030f5324363a9213cf4b68f834fad0d124b8a13/order/partitions.lean\">https://github.com/leanprover-community/mathlib/blob/1030f5324363a9213cf4b68f834fad0d124b8a13/order/partitions.lean</a></p>",
        "id": 135366820,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538948573
    },
    {
        "content": "<p>Prove all the lemmas there but in a much better way</p>",
        "id": 135366822,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538948580
    },
    {
        "content": "<p>That's the question</p>",
        "id": 135366825,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538948583
    },
    {
        "content": "<p>I think</p>",
        "id": 135366826,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538948584
    },
    {
        "content": "<p>But the point is that you have something else here too -- these aren't just a pair of adjoint functors, because these are on posets (ordered by inclusion) and not just categories.</p>",
        "id": 135366884,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538948655
    },
    {
        "content": "<p>well give me an hour to compile the mathlib first...</p>",
        "id": 135366890,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538948667
    },
    {
        "content": "<p>I've changed some of the files</p>",
        "id": 135366891,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538948670
    },
    {
        "content": "<p>So there's a special name for this situation, called a Galois insertion.</p>",
        "id": 135366893,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538948681
    },
    {
        "content": "<p>so every time I change some files I need to spend one hour compiling the files</p>",
        "id": 135366901,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538948702
    },
    {
        "content": "<p>And there's a bunch of lemmas proved about Galois insertions which might make these sorts of arguments easier.</p>",
        "id": 135366903,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538948703
    },
    {
        "content": "<p>and in this hour my CPU will be fully used</p>",
        "id": 135366910,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538948711
    },
    {
        "content": "<p>and the computer will be mostly unusable</p>",
        "id": 135366914,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538948715
    },
    {
        "content": "<p>Kenny if you are only working on one branch which isn't master</p>",
        "id": 135366917,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538948733
    },
    {
        "content": "<p>then you should just commit the olean files to master :P</p>",
        "id": 135366920,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538948744
    },
    {
        "content": "<p>then whenever you checkout master again, the olean files will reappear</p>",
        "id": 135366924,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538948756
    },
    {
        "content": "<p>Kenny and Kevin, you should pay attention to what Simon is writing in the nextdoor thread</p>",
        "id": 135366967,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1538948802
    },
    {
        "content": "<p>Kenny should -- I can compile mathlib in 10 minutes and I never fiddle with it anyway ;-)</p>",
        "id": 135366974,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538948823
    },
    {
        "content": "<p>well...hardly ever</p>",
        "id": 135366981,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538948829
    },
    {
        "content": "<p>do all of you have like 30 cores?</p>",
        "id": 135367165,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538949219
    },
    {
        "content": "<blockquote>\n<p>And there's a bunch of lemmas proved about Galois insertions which might make these sorts of arguments easier.</p>\n</blockquote>\n<p>Are these lemmas in mathlib? There doesn't seem to be anything named <code>galois*</code>.</p>",
        "id": 135368008,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1538950989
    },
    {
        "content": "<p><code>galois.*</code>?</p>",
        "id": 135368009,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538951002
    },
    {
        "content": "<p>Oh oops, I was trying to search  the community fork.</p>",
        "id": 135368011,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1538951034
    },
    {
        "content": "<p>I remember reading about Galois connections whenever I learned about covering spaces. I don't remember insertions and coinsertions but the lean file seems clear enough.</p>",
        "id": 135368163,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1538951316
    },
    {
        "content": "<p>OK, I see the point now! The smart way to do all of this is to just use <code>lift_complete_lattice</code> on the complete lattice instance on subsets. Presumably that's what Kenny is up to now that an hour has passed. :)</p>",
        "id": 135369030,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1538953065
    },
    {
        "content": "<p>oh well I proved this</p>",
        "id": 135369082,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538953182
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">order</span><span class=\"bp\">.</span><span class=\"n\">complete_lattice</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">fintype</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">lattice</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">bounded_lattice</span><span class=\"bp\">.</span><span class=\"n\">of_fintype_inhabited_lattice</span>\n  <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">inhabited</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">lattice</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">bounded_lattice</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">top</span> <span class=\"o\">:=</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">fold</span> <span class=\"o\">(</span><span class=\"err\">⊔</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">default</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">id</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">univ</span><span class=\"o\">,</span>\n  <span class=\"n\">le_top</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n    <span class=\"n\">suffices</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">univ</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">fold</span> <span class=\"o\">(</span><span class=\"err\">⊔</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">default</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">id</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">univ</span><span class=\"o\">,</span>\n      <span class=\"k\">from</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">this</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">mem_univ</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n    <span class=\"n\">generalize</span> <span class=\"o\">:</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">univ</span> <span class=\"bp\">=</span> <span class=\"n\">U</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">U</span> <span class=\"k\">with</span> <span class=\"n\">U</span> <span class=\"n\">hu1</span><span class=\"o\">,</span>\n    <span class=\"n\">induction</span> <span class=\"n\">U</span> <span class=\"kn\">using</span> <span class=\"n\">quot</span><span class=\"bp\">.</span><span class=\"n\">ind</span> <span class=\"k\">with</span> <span class=\"n\">L</span><span class=\"o\">,</span>\n    <span class=\"n\">induction</span> <span class=\"n\">L</span> <span class=\"k\">with</span> <span class=\"n\">hd</span> <span class=\"n\">tl</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">false</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"o\">},</span>\n    <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">hx</span> <span class=\"k\">with</span> <span class=\"n\">rfl</span> <span class=\"bp\">|</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">le_sup_left</span> <span class=\"o\">},</span>\n    <span class=\"n\">transitivity</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">ih</span> <span class=\"o\">(</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">nodup_of_nodup_cons</span> <span class=\"n\">hu1</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">hx</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">le_sup_right</span> <span class=\"o\">}</span>\n  <span class=\"kn\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">bot</span> <span class=\"o\">:=</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">fold</span> <span class=\"o\">(</span><span class=\"err\">⊓</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">default</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">id</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">univ</span><span class=\"o\">,</span>\n  <span class=\"n\">bot_le</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n    <span class=\"n\">suffices</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">univ</span><span class=\"o\">,</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">fold</span> <span class=\"o\">(</span><span class=\"err\">⊓</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">default</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">id</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">univ</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n      <span class=\"k\">from</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">this</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">mem_univ</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n    <span class=\"n\">generalize</span> <span class=\"o\">:</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">univ</span> <span class=\"bp\">=</span> <span class=\"n\">U</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">U</span> <span class=\"k\">with</span> <span class=\"n\">U</span> <span class=\"n\">hu1</span><span class=\"o\">,</span>\n    <span class=\"n\">induction</span> <span class=\"n\">U</span> <span class=\"kn\">using</span> <span class=\"n\">quot</span><span class=\"bp\">.</span><span class=\"n\">ind</span> <span class=\"k\">with</span> <span class=\"n\">L</span><span class=\"o\">,</span>\n    <span class=\"n\">induction</span> <span class=\"n\">L</span> <span class=\"k\">with</span> <span class=\"n\">hd</span> <span class=\"n\">tl</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">false</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"o\">},</span>\n    <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">hx</span> <span class=\"k\">with</span> <span class=\"n\">rfl</span> <span class=\"bp\">|</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">inf_le_left</span> <span class=\"o\">},</span>\n    <span class=\"n\">transitivity</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">inf_le_right</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">ih</span> <span class=\"o\">(</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">nodup_of_nodup_cons</span> <span class=\"n\">hu1</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">hx</span> <span class=\"o\">}</span>\n  <span class=\"kn\">end</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span> <span class=\"o\">(</span><span class=\"n\">infer_instance</span> <span class=\"o\">:</span> <span class=\"n\">lattice</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n</pre></div>",
        "id": 135369083,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538953184
    },
    {
        "content": "<p>and realized that proving it is a complete lattice is impossible</p>",
        "id": 135369135,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538953220
    },
    {
        "content": "<p>Oh are you working on <code>tutorial/partitions.lean</code> or <code>order/partitions.lean</code>?</p>",
        "id": 135369151,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1538953289
    },
    {
        "content": "<p>what is the difference?</p>",
        "id": 135369193,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538953351
    },
    {
        "content": "<p><code>tutorial/partitions.lean</code> was my first try on finite sets. Mario told me I should do stuff with general sets and then specialize, so I made <code>order/partitions.lean</code>.</p>",
        "id": 135369199,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1538953411
    },
    {
        "content": "<p>Is the issue with finite partitions that <code>Sup</code> and <code>Inf</code> need to use <code>set</code>?</p>",
        "id": 135369238,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1538953497
    },
    {
        "content": "<p>I think we should have an instance of <code>\\Pi [fintype \\a], bounded_lattice (finset \\a)</code></p>",
        "id": 135369296,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538953678
    },
    {
        "content": "<blockquote>\n<p>Is the issue with finite partitions that <code>Sup</code> and <code>Inf</code> need to use <code>set</code>?</p>\n</blockquote>\n<p>yes</p>",
        "id": 135369504,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538954090
    },
    {
        "content": "<p>That's unfortunate. There should be a version of <code>complete_lattice</code> that works for finsets. Is that what your instance above does?</p>",
        "id": 135369556,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1538954166
    },
    {
        "content": "<p>no, that's <code>bounded_lattice</code></p>",
        "id": 135369571,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538954269
    },
    {
        "content": "<p>I don't think you can prove <code>complete_lattice</code>.</p>",
        "id": 135369573,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538954279
    },
    {
        "content": "<p>Partitions of finite sets have a complete lattice structure just as much as partitions of arbitrary sets do, so we should add <code>complete_lattice_finset</code>.</p>",
        "id": 135369687,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1538954480
    },
    {
        "content": "<p>I don't think so.</p>",
        "id": 135369731,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538954557
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> I am sorry to be slow to respond to your ping, but I have thought about it and I don't have any great insights here. I don't think the notion of a canonical isomorphism is a sharp concept, and your post gives as good a working definition as any. It would be nice to have automation the finds/constructs them for you.</p>",
        "id": 135369738,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1538954591
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> Why not?</p>",
        "id": 135369842,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1538954770
    },
    {
        "content": "<p>because given an arbitrary set of partitions I don't see how you can find its supremum.</p>",
        "id": 135369846,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538954789
    },
    {
        "content": "<p>let's just say our set is A = {0,1}</p>",
        "id": 135369850,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538954824
    },
    {
        "content": "<p>I give you a set S of partitions of A</p>",
        "id": 135369856,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538954832
    },
    {
        "content": "<p>how do you find the supremum of S?</p>",
        "id": 135369857,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538954840
    },
    {
        "content": "<p>let's say S is {{{0},{1}}} if Goldbach conjecture is true and and {} otherwise.</p>",
        "id": 135369902,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538954910
    },
    {
        "content": "<p>OK, but for finite partitions I only care about finsets of partitions which can't be that gross, right?</p>",
        "id": 135369979,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1538955035
    },
    {
        "content": "<p>but if you want to have a <code>complete_lattice</code> instance then you need to find the supremum for arbitrary sets</p>",
        "id": 135369992,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538955065
    },
    {
        "content": "<p>So you're saying that there's not even <code>complete_lattice</code> on <code>setoid</code>, as I was aiming to prove in <code>order/partitions.lean</code>...</p>",
        "id": 135370045,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1538955136
    },
    {
        "content": "<p>you can always make a <code>noncomputable def</code> :)</p>",
        "id": 135370047,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538955164
    },
    {
        "content": "<p>(don't make it an instance!)</p>",
        "id": 135370048,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538955169
    },
    {
        "content": "<p>I think I'm starting to get it. Do you happen to know which part of the galois insertion between the partial order on equivalence relations and that on subsets of <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>α</mi><mo>×</mo><mi>α</mi></mrow><annotation encoding=\"application/x-tex\">\\alpha \\times \\alpha</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.58333em;\"></span><span class=\"strut bottom\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.0037em;\">α</span><span class=\"mbin\">×</span><span class=\"mord mathit\" style=\"margin-right:0.0037em;\">α</span></span></span></span> is noncomputable?</p>",
        "id": 135370296,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1538955614
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> What do you think about having a <code>complete_lattice_finset</code>?</p>",
        "id": 135370318,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1538955674
    },
    {
        "content": "<p>none of the parts</p>",
        "id": 135370319,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538955688
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> <code>Sup</code> and <code>Inf</code> are inherently noncomputable, just from their types: <code>set A -&gt; A</code></p>",
        "id": 135371718,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538958152
    },
    {
        "content": "<p>This means that they take in no data and produce data</p>",
        "id": 135371721,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538958168
    },
    {
        "content": "<p>well <code>set (set A) -&gt; set A</code> is computable though</p>",
        "id": 135371723,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538958183
    },
    {
        "content": "<p>pointlessly so</p>",
        "id": 135371731,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538958193
    },
    {
        "content": "<p>you can computabilize any definition of that type</p>",
        "id": 135371734,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538958215
    },
    {
        "content": "<p>aha</p>",
        "id": 135371738,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538958233
    },
    {
        "content": "<p>thanks</p>",
        "id": 135371739,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538958239
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> Do you know if Neil got Lean working in the end?</p>",
        "id": 135448580,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539068014
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130308\">@Neil Strickland</span> Aah, you're on this Zulip. Can you confirm?</p>",
        "id": 135448584,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539068026
    },
    {
        "content": "<p>I'm looking at the first \"challenge\", namely: prove <code>2 + 2 = 4</code>. Your goal with this challenge is</p>\n<blockquote>\n<p>Key points: basic boilerplate at the top of the file, basic grammar of stating and proving, how to interact with the proof assistant.</p>\n</blockquote>\n<p>But in Lean you won't learn that from <code>2 + 2 = 4</code>. In idiomatic Lean, a file dedicated to that lemma would contain 1 line:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">two_add_two</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</pre></div>\n\n\n<p>No imports, no boiler plate, no interactions, no nothing.</p>",
        "id": 135448697,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539068170
    },
    {
        "content": "<p>I'm not really sure what state we left him in. At Dagstuhl he definitely had a working copy on the laptop he had with him, but that might not still be the case.</p>",
        "id": 135448700,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1539068197
    },
    {
        "content": "<p>I think the \"Key points\" deserve to be in a dedicated tutorial file. But I'm not sure if <code>2 + 2 = 4</code> is the right \"goal\" of that file.</p>",
        "id": 135448712,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539068241
    },
    {
        "content": "<p>Well -- even that file teaches you a few things: the lemma keyword, colon, colon-equals. You could also explain the red and green underlines, and the fact that the absence of these shows Lean approves. (Or ... is just not even running...)</p>",
        "id": 135448758,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1539068296
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 135450223,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1539070690
    },
    {
        "content": "<blockquote>\n<p>do all of you have like 30 cores?</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> , any reason you don't compile on a proper server?</p>",
        "id": 135450243,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1539070788
    },
    {
        "content": "<p>If you don't have one available, I suggest you get an account at the GCC compile farm: \"<a href=\"https://cfarm.tetaneutral.net\" target=\"_blank\" title=\"https://cfarm.tetaneutral.net\">https://cfarm.tetaneutral.net</a>\"</p>",
        "id": 135450297,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1539070848
    },
    {
        "content": "<p>They give accounts to open source contributors and have some servers that are commonly not too busy</p>",
        "id": 135450314,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1539070867
    },
    {
        "content": "<p>gcc20   22, 443 Dual Xeon   x86_64  Intel(R) Xeon(R) CPU X5670 @ 2.93GHz    2 CPU<br>\n12 cores 24 threads 24105 MB    825.0 GB    Debian 7.11 wheezy<br>\n3.2.0-4-amd64   1090 days   INRIA Rocquencourt  France</p>",
        "id": 135450320,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1539070893
    },
    {
        "content": "<p>Is mostly idle today.</p>",
        "id": 135450325,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1539070897
    },
    {
        "content": "<p>If you can get lean compiled on powerpc hardware you can run on IBM Power8 with 160 CPUs</p>",
        "id": 135450381,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1539070974
    },
    {
        "content": "<p>It's also at 99% idle ATM.</p>",
        "id": 135450385,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1539070986
    },
    {
        "content": "<p>I've never heard of this option</p>",
        "id": 135450516,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539071161
    },
    {
        "content": "<p>Maybe there is a possibility we can set up Jenkins on it as an alternative to Travis?</p>",
        "id": 135450564,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539071182
    },
    {
        "content": "<p>Here is what I just pushed for Challenge 1.<br>\n<a href=\"https://github.com/leanprover-community/mathlib/blob/tutorials/tutorials/two_add_two.lean\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/tutorials/tutorials/two_add_two.lean\">https://github.com/leanprover-community/mathlib/blob/tutorials/tutorials/two_add_two.lean</a></p>",
        "id": 135450973,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539071850
    },
    {
        "content": "<p>I didn't do any tactics yet. So that should be done in Challenge 2 \"Infinitude of primes\".</p>",
        "id": 135451044,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539071907
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130308\">@Neil Strickland</span> Would you mind adding a link to <a href=\"https://github.com/leanprover-community/mathlib/tree/tutorials/tutorials\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/tree/tutorials/tutorials\">https://github.com/leanprover-community/mathlib/tree/tutorials/tutorials</a> in you post on MO? Or is it ok with you if we edit the post while writing tutorials on the 5 challenges that you suggested?</p>",
        "id": 135451447,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539072423
    },
    {
        "content": "<p>General question <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> <span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span> should we leave active <code>#eval</code> and <code>#print</code> statements in these tutorials? Or should they be commented out, so that they don't spam ordinary mathlib-builds. I suppose it is easy enough for the user to uncomment them.</p>",
        "id": 135451645,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539072714
    },
    {
        "content": "<p>I'm not sure mathlib is the best place for them</p>",
        "id": 135451694,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539072746
    },
    {
        "content": "<p>them what?</p>",
        "id": 135451700,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539072775
    },
    {
        "content": "<p>the tutorials</p>",
        "id": 135451706,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539072787
    },
    {
        "content": "<p>I think it is</p>",
        "id": 135451713,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539072796
    },
    {
        "content": "<p>Especially if it is an interactive walkthrough</p>",
        "id": 135451716,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539072805
    },
    {
        "content": "<p>Because it forces us to make sure they compile</p>",
        "id": 135451717,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539072806
    },
    {
        "content": "<p>I don't know, I mean TPIL has code snippets and they only break occasionally, and it is reported and fixed</p>",
        "id": 135451773,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539072883
    },
    {
        "content": "<p>It's not like they are going to be based on really complicated things</p>",
        "id": 135451785,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539072904
    },
    {
        "content": "<blockquote>\n<p>It's not like they are going to be based on really complicated things</p>\n</blockquote>\n<p>One of the challenges is on nilpotent ideals... it would break helplessly by your module refactor.</p>",
        "id": 135451801,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539072956
    },
    {
        "content": "<p>They could just as easily be in a separate project. Even better, if a user downloads the tutorial project depending on mathlib then they are already in the right place to do work of their own</p>",
        "id": 135451848,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539072968
    },
    {
        "content": "<blockquote>\n<p>One of the challenges is on nilpotent ideals... it would break helplessly by your module refactor.</p>\n</blockquote>\n<p>what do you mean?</p>",
        "id": 135451861,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539072995
    },
    {
        "content": "<p>I'm not saying they never change, but they won't change often</p>",
        "id": 135451871,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539073006
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> <a href=\"https://mathoverflow.net/a/311159/21815\" target=\"_blank\" title=\"https://mathoverflow.net/a/311159/21815\">https://mathoverflow.net/a/311159/21815</a></p>",
        "id": 135451884,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539073047
    },
    {
        "content": "<p>yes?</p>",
        "id": 135451939,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539073090
    },
    {
        "content": "<p>That's homework for us (-;</p>",
        "id": 135451954,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539073124
    },
    {
        "content": "<p>I'd be pretty happy to see tutorials embedded in mathlib for now. Anything to avoid useful stuff bit-rotting away. :-)</p>",
        "id": 135454675,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1539076795
    },
    {
        "content": "<p>I agree that tutorials should go into in mathlib. I think that, as long as the plan is to keep mathlib monolithic (which seems to be working out for the most part), it should include tutorials. A reasonable alternative is to build a tutorial repository during mathlib's CI test phase.</p>",
        "id": 135455291,
        "sender_full_name": "Sean Leather",
        "timestamp": 1539077512
    },
    {
        "content": "<p>I still think it is a good idea to have a \"scratch\" repo that newbies can get to have a working setup in vscode with mathlib already hooked in, since this is the recommended use</p>",
        "id": 135455714,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539077952
    },
    {
        "content": "<p>What do you mean with \"recommended use\"?</p>",
        "id": 135455740,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539077975
    },
    {
        "content": "<p>I mean this is the way third parties use mathlib</p>",
        "id": 135455751,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539077996
    },
    {
        "content": "<p>you have a project, and this project imports mathlib</p>",
        "id": 135455802,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539078009
    },
    {
        "content": "<p>this is the format vscode is expecting</p>",
        "id": 135455809,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539078018
    },
    {
        "content": "<p>You can have mathlib as a global install and work with loose files, but I think this approach is less robust</p>",
        "id": 135455831,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539078056
    },
    {
        "content": "<p>Right, but I'm more thinking about mathematicians that want to contribute to mathlib</p>",
        "id": 135455852,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539078099
    },
    {
        "content": "<p>contributing to mathlib is another thing altogether</p>",
        "id": 135455859,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539078115
    },
    {
        "content": "<p>So they will end up hacking on the community fork asap</p>",
        "id": 135455901,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539078124
    },
    {
        "content": "<p>sure, in that case they are working on mathlib itself so there is already a project</p>",
        "id": 135455909,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539078143
    },
    {
        "content": "<p>I mean for new leaners, like the kids in Kevin's classes</p>",
        "id": 135455916,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539078162
    },
    {
        "content": "<p>Right, and they get to know that project by looking in <code>tutorials/</code></p>",
        "id": 135455917,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539078164
    },
    {
        "content": "<p>A scratch project is a good idea.</p>",
        "id": 135455933,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1539078183
    },
    {
        "content": "<p>I see. Well, I was more thinking about people like Neil.</p>",
        "id": 135455938,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539078188
    },
    {
        "content": "<p>I don't think Neil was ready to be a contributor</p>",
        "id": 135455947,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539078203
    },
    {
        "content": "<p>Just the bare minimum setup, with perhaps a file that reminds them where to go for more help.</p>",
        "id": 135455951,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1539078208
    },
    {
        "content": "<p>I assume people start out with projects on their own for a while, and then move to contribution if they are so inclined</p>",
        "id": 135455966,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539078235
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/hello-world\" target=\"_blank\" title=\"https://github.com/leanprover-community/hello-world\">https://github.com/leanprover-community/hello-world</a></p>",
        "id": 135455967,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539078238
    },
    {
        "content": "<p>And as Lean/mathlib improves, we actually hope a larger and larger fraction of the community are _not_ hacking on mathlib!</p>",
        "id": 135456022,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1539078275
    },
    {
        "content": "<p>Why?</p>",
        "id": 135456026,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539078286
    },
    {
        "content": "<p>I thought we wanted to be a massive monolith</p>",
        "id": 135456031,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539078298
    },
    {
        "content": "<p>(because they're actually doing maths, rather than filling in all the gaps before they can actually get started)</p>",
        "id": 135456033,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1539078302
    },
    {
        "content": "<p>There's ambiguity in the word “tutorial.” I was thinking of something more like a walkthrough of various features of mathlib. But a scratch/hello-world repository would also be useful.</p>",
        "id": 135456040,
        "sender_full_name": "Sean Leather",
        "timestamp": 1539078313
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> But why not do maths inside mathlib?</p>",
        "id": 135456045,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539078342
    },
    {
        "content": "<p>If I'm going to formalise a bunch of the boring-but-technical lemmas in my research paper, they don't belong in mathlib.</p>",
        "id": 135456047,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1539078348
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110045\">@Sean Leather</span>  I guess Kevin's mathlib docs pages already do that?</p>",
        "id": 135456049,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539078349
    },
    {
        "content": "<p>or because they're working out the lemmas for their research project. They don't belong in mathlib because they've got no idea if they're the right lemmas yet. But this is all dreaming. For the next couple of decades, I agree, all in mathlib. :-)</p>",
        "id": 135456127,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1539078454
    },
    {
        "content": "<blockquote>\n<p>I guess Kevin's mathlib docs pages already do that?</p>\n</blockquote>\n<p>Not in the sense that you can see examples in Lean of what is provable and how with mathlib.</p>",
        "id": 135456195,
        "sender_full_name": "Sean Leather",
        "timestamp": 1539078574
    },
    {
        "content": "<p>Perhaps I'm off-topic here with my own definition of tutorial — I'm not sure — but I was thinking of something that demonstrated usage of mathlib with proofs and words, not <em>just</em> words.</p>",
        "id": 135456299,
        "sender_full_name": "Sean Leather",
        "timestamp": 1539078683
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110045\">@Sean Leather</span> I think we can have both</p>",
        "id": 135457779,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539080623
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> Yep, we probably should.</p>",
        "id": 135457873,
        "sender_full_name": "Sean Leather",
        "timestamp": 1539080680
    },
    {
        "content": "<p>The Xena.zip file which I was going to use with my 1st years this year (until ICT delivered something much better) -- that was precisely what Mario was describing above. The way this seems to work is that once a year I am allowed to update what the Imperial College undergraduates see by default when they open up VS Code. This year they see a project with one file <code>test.lean</code> containing <code>import data.int.basic theorem 2+2=4:=rfl</code> and then all the lean and olean files for mathlib and lean (with mathlib as a dependency). This is what I would now call \"the bare minimum for mathematicians who are interested\". But it sounds like the community might be able to make a much better variant of this, which we could just generally advertise on GH. I think it's worth stressing that win10 users have no git and no command line, and I've met plenty of people who just want to get going. We make a better repo, and we replace Xena.zip with this repo and I document it on the installation page and people will be happier.</p>",
        "id": 135482607,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539103714
    },
    {
        "content": "<p>On the plane to Edinburgh, and then in my hotel room, I tried to write a tutorial/show case that we could show to people asking how it feels to use Lean and mathlib (among participants to this conference or other people). The first draft is at <a href=\"https://gist.github.com/PatrickMassot/79d7f53b3777c48e0910e131aedff7ea\" target=\"_blank\" title=\"https://gist.github.com/PatrickMassot/79d7f53b3777c48e0910e131aedff7ea\">https://gist.github.com/PatrickMassot/79d7f53b3777c48e0910e131aedff7ea</a>. Comments are welcome. Maybe we could put it inside our almost empty tutorial folder, or create a tutorial repository. Of course you need a recent mathlib to run it.</p>",
        "id": 166668832,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1558996949
    },
    {
        "content": "<p>Nice work Patrick! The comment on line 57 doesn't typecheck: <a href=\"https://gist.github.com/PatrickMassot/79d7f53b3777c48e0910e131aedff7ea#file-proof_tutorial-lean-L57\" target=\"_blank\" title=\"https://gist.github.com/PatrickMassot/79d7f53b3777c48e0910e131aedff7ea#file-proof_tutorial-lean-L57\">https://gist.github.com/PatrickMassot/79d7f53b3777c48e0910e131aedff7ea#file-proof_tutorial-lean-L57</a></p>",
        "id": 166689090,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1559027297
    },
    {
        "content": "<p><code>s/there/they/</code> on L97<br>\n<a href=\"https://gist.github.com/PatrickMassot/79d7f53b3777c48e0910e131aedff7ea#file-proof_tutorial-lean-L97\" target=\"_blank\" title=\"https://gist.github.com/PatrickMassot/79d7f53b3777c48e0910e131aedff7ea#file-proof_tutorial-lean-L97\">https://gist.github.com/PatrickMassot/79d7f53b3777c48e0910e131aedff7ea#file-proof_tutorial-lean-L97</a></p>",
        "id": 166689194,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1559027424
    },
    {
        "content": "<p><code>s/use/prove/</code> on L179 <a href=\"https://gist.github.com/PatrickMassot/79d7f53b3777c48e0910e131aedff7ea#file-proof_tutorial-lean-L179\" target=\"_blank\" title=\"https://gist.github.com/PatrickMassot/79d7f53b3777c48e0910e131aedff7ea#file-proof_tutorial-lean-L179\">https://gist.github.com/PatrickMassot/79d7f53b3777c48e0910e131aedff7ea#file-proof_tutorial-lean-L179</a></p>",
        "id": 166689398,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1559027671
    },
    {
        "content": "<p><code>s/re-enter/re-enters/</code> on L210</p>",
        "id": 166689496,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1559027788
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> I really like how you very naturally introduce <code>contrapose</code>, <code>linarith</code>, <code>library_search</code>, and <code>norm_cast</code>. Very good job!</p>",
        "id": 166689725,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1559028107
    },
    {
        "content": "<p><code>s/le_antisym/le_antisymm</code> on L104</p>",
        "id": 166689979,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1559028377
    },
    {
        "content": "<p><code>s/coutable/countable/</code> on L396</p>",
        "id": 166690071,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1559028483
    },
    {
        "content": "<p><code>s/infimums/infima/</code></p>",
        "id": 166690233,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1559028696
    },
    {
        "content": "<p>Missing <code>know</code> on L313. I find this sentence not very clear: I would add \"asserting that the inverse of a positive number is positive\" after \"relevant lemma\".</p>",
        "id": 166690299,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1559028742
    },
    {
        "content": "<p>Thank you very much! I enjoy it and find it helpful.</p>",
        "id": 166704975,
        "sender_full_name": "Adrian Chu",
        "timestamp": 1559041610
    },
    {
        "content": "<p>Thanks everybody, I updated the gist. What should we do now? Putting it inside <code>mathlib/docs/tutorial</code> is easy, but maybe creating a Lean tutorial repository containing a Lean project depending on mathlib would be easier to use for people who want to interact with the code. If a beginner follow instructions to start a new project then <code>mathlib/docs/tutorial</code> is hidden in <code>_target/deps</code></p>",
        "id": 166726429,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1559056505
    },
    {
        "content": "<blockquote>\n<p>One could argue a three lines long proof of this lemma is still two lines too long.</p>\n</blockquote>\n<p>I don't understand my own language, but for some reason it definitely should be \"a three line long proof\"</p>",
        "id": 166727815,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1559057456
    },
    {
        "content": "<p>Your language is really weird (contrary to French which is always completely logical :)</p>",
        "id": 166728502,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1559057902
    },
    {
        "content": "<p>I think there is no plural because it is \"three-line-long proof\"</p>",
        "id": 166729047,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1559058186
    },
    {
        "content": "<p>although I don't think the hyphens are common</p>",
        "id": 166729087,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1559058206
    },
    {
        "content": "<p>I was going to mention hyphens but I couldn't figure out where to put them</p>",
        "id": 166743456,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1559066862
    },
    {
        "content": "<p>it's actually a three-line proof</p>",
        "id": 166743580,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1559066951
    },
    {
        "content": "<p>or \"a proof that is three lines long\"</p>",
        "id": 166743754,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1559067072
    },
    {
        "content": "<p>I think Patrick just wanted to say that it's a long-proof <span aria-label=\"oops\" class=\"emoji emoji-1f643\" role=\"img\" title=\"oops\">:oops:</span></p>",
        "id": 166750866,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1559071863
    },
    {
        "content": "<p>Proper languages just allow you to chain words together whenever that's useful... <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 166751859,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1559072524
    },
    {
        "content": "<p>*allows</p>",
        "id": 166752069,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1559072661
    },
    {
        "content": "<p>Sorry, typo. I meant \"language<strong>s</strong>\"</p>",
        "id": 166752252,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1559072763
    }
]