[
    {
        "content": "<p>I did some linear programming last summer. I wouldn't describe it as a small project. If this should be in mathlib, in what form should it be. The version I did was actually somewhat efficiently computable. There are some lemmas that can be proven from the termination of the simplex algorithm, such as the duality theorem, but I guess the goal wouldn't be to have a computer program.</p>",
        "id": 196271676,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1588659950
    },
    {
        "content": "<p>Sorry, the original title of the thread was only about Lagrange interpolation...<br>\nI've modified the title</p>",
        "id": 196272793,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588661256
    },
    {
        "content": "<p>I also didn't label the linear programming issue with 'easy' <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 196272804,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588661276
    },
    {
        "content": "<p>Maybe the goal is also to have a computer program?</p>",
        "id": 196272852,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588661301
    },
    {
        "content": "<p>Or maybe we want two versions?</p>",
        "id": 196272857,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588661309
    },
    {
        "content": "<p>One <code>meta</code>, and one for proving?</p>",
        "id": 196272914,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588661380
    },
    {
        "content": "<p>Just because it's executable doesn't make it <code>meta</code>..</p>",
        "id": 196274226,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1588662782
    },
    {
        "content": "<p>Wouldn't a fast, untrusted implementation be more useful than a slow, trusted one though? You can easily verify the solution to any given linear program</p>",
        "id": 196280285,
        "sender_full_name": "David Wärn",
        "timestamp": 1588667627
    },
    {
        "content": "<p>But we also want one for proving stuff, right?</p>",
        "id": 196282235,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588668804
    },
    {
        "content": "<p>I think we want some way to prove strong duality for linear programming over an ordered field</p>",
        "id": 196283279,
        "sender_full_name": "David Wärn",
        "timestamp": 1588669444
    },
    {
        "content": "<p>Is anyone working on this? </p>\n<p>I recently started learning LP and the book I'm currently following has a purely geometry proof of the duality theorems that do not use the halting of the simplex algorithm. Something to do with Farkas' lemma and complementary slackness, still don't understand these fully...</p>",
        "id": 242600741,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1623679211
    },
    {
        "content": "<p>Yes, I am working on a related project. <span class=\"user-mention\" data-user-id=\"110865\">@Jeremy Avigad</span> and I are developing a library to solve convex optimization problems. That subsumes LP problems. The plan is to let external solvers do the hard work and verify the results using duality. We are still at the beginning of the project, but I have a proof of weak duality of cone programming (also subsumes LP). It's not up to date with the current mathlib, but I could make it mathlib-ready if you are interested.</p>",
        "id": 242606901,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1623681598
    },
    {
        "content": "<p>And <span class=\"user-mention\" data-user-id=\"132858\">@Ramon Fernandez Mir</span> is working on integrating SOS programming solvers into Lean. This could probably extended to work for LPs as well.</p>",
        "id": 242609455,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1623682563
    },
    {
        "content": "<p>Oh, wow. Even if you could just add the definitions to mathlib that'd be great. Then I can have some standardized framework to experiment with.</p>",
        "id": 242610874,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1623683044
    },
    {
        "content": "<p>Maybe it's actually the definitions that are not up to date :D</p>",
        "id": 242610959,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1623683076
    },
    {
        "content": "<p>I did this before matrices and inner products were as advanced as they are now in mathlib.</p>",
        "id": 242611044,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1623683109
    },
    {
        "content": "<p>Here you can have a look: <a href=\"https://github.com/skbaek/cvx/blob/master/src/cone_program.lean\">https://github.com/skbaek/cvx/blob/master/src/cone_program.lean</a></p>",
        "id": 242611232,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1623683182
    },
    {
        "content": "<p>Don't try to load it up in Lean, though. It's all a bit broken now :D</p>",
        "id": 242611291,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1623683204
    },
    {
        "content": "<p>Awesome, thanks! I'll play around with the code and see if I can update the definitions.</p>",
        "id": 242611766,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1623683372
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"245078\">@Apurva Nakade</span> I should warn you though: <span class=\"user-mention\" data-user-id=\"116585\">@Seul Baek</span> already experimented with verifying the results of an LP solver here: <a href=\"https://github.com/skbaek/cvx/blob/master/src/LP.lean\">https://github.com/skbaek/cvx/blob/master/src/LP.lean</a>. Unfortunately, verifying the results of the external solver in Lean3 is extremely slow. We are planning to move on to Lean4 as soon as possible to achieve faster verification.</p>",
        "id": 242619598,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1623686313
    },
    {
        "content": "<p>I see, thanks! This much metaprogramming is beyond my understanding anyways :P<br>\nI'm kinda just interested in the \"linear algebra\" aspects of LP.  I'll play around with the code and see what can be done purely theoretically.</p>",
        "id": 242621766,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1623687015
    }
]