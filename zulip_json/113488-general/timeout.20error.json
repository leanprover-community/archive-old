[
    {
        "content": "<p>We attempt to prove a theorem by the tactic dec_trivial,<br>\nbut  Lean outputs an error message \"(deterministic) timeout\".</p>\n<p>Is it possible to change settings about timeout?</p>",
        "id": 211720938,
        "sender_full_name": "Kondo Yuki",
        "timestamp": 1601447941
    },
    {
        "content": "<p>use <code>norm_num</code> instead</p>",
        "id": 211721316,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1601448340
    },
    {
        "content": "<p>I tried norm_num, but Lean says: unknown identifier 'norm_num'.<br>\nWhere is norm_num  defined?</p>",
        "id": 211722294,
        "sender_full_name": "Kondo Yuki",
        "timestamp": 1601449321
    },
    {
        "content": "<p>It's a tactic defined in mathlib. You'll need to put <code>import tactic</code> at the top of your file.</p>",
        "id": 211722487,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1601449452
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"334882\">@Kondo Yuki</span> It would be very helpful if you could give a bit more detail about what you are doing. You can paste code here, please use <a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a> to format it. Try to make sure that the code runs upon copy-paste, see <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>.</p>",
        "id": 211723001,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601449898
    },
    {
        "content": "<p>We attempt to prove a theorem, VT_0(4) is optimal.<br>\nThe following is our formalization of it.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.fintype</span> <span class=\"n\">data.vector</span>\n<span class=\"kn\">import</span> <span class=\"bp\">.</span><span class=\"n\">LevenshteinCode</span> <span class=\"bp\">.</span><span class=\"n\">DelCode</span> <span class=\"bp\">.</span><span class=\"n\">Optimality</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">optimal_VTCode_4_0</span> <span class=\"o\">:</span>\n  <span class=\"n\">is_optimal</span> <span class=\"o\">(</span><span class=\"n\">VTCode</span> <span class=\"mi\">4</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">dec_trivial</span>\n</code></pre></div>",
        "id": 211724156,
        "sender_full_name": "Kondo Yuki",
        "timestamp": 1601450890
    },
    {
        "content": "<p>But since we have no idea what <code>VTCode</code> is (or what is in the imports <code>.LevenshteinCode .DelCode .Optimality</code>, it will be very hard to help you.</p>",
        "id": 211724590,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601451222
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"334882\">@Kondo Yuki</span> Is the code in some online repository that we could look at?</p>",
        "id": 211724694,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601451290
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"334882\">Kondo Yuki</span> <a href=\"#narrow/stream/113488-general/topic/timeout.20error/near/211720938\">said</a>:</p>\n<blockquote>\n<p>Is it possible to change settings about timeout?</p>\n</blockquote>\n<p>I haven't tried it, but there's the top-level command</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">timeout</span> <span class=\"n\">NNNN</span>\n</code></pre></div>\n\n<p>where <code>NNNN</code> is some number (100000 by default in my installation).</p>",
        "id": 211724958,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1601451497
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>  the code can be download at  Cotoleta -lean library for formalized coding theory-. <a href=\"https://manau.jp/Lean/cotoleta/\">https://manau.jp/Lean/cotoleta/</a>.</p>",
        "id": 211725157,
        "sender_full_name": "Kondo Yuki",
        "timestamp": 1601451663
    },
    {
        "content": "<p>Wow, that project has a really long history already!</p>",
        "id": 211725930,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601452253
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"334882\">@Kondo Yuki</span> Don't you want to host it as a git repository somewhere?</p>",
        "id": 211732979,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601456955
    },
    {
        "content": "<p>I just downloaded the zip file. It seems that your project is not setup as a lean package. So it will take some time to get it working on my machine</p>",
        "id": 211733299,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601457134
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"334882\">@Kondo Yuki</span> I'm trying to compile your files, but I'm having unrelated lean errors.</p>",
        "id": 211734155,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601457669
    },
    {
        "content": "<p>It would be very helpful if you could tell us exactly which version of mathlib you are using (by pasting the git commit hash here)</p>",
        "id": 211734188,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601457700
    },
    {
        "content": "<p>My tests were using <code>dd8da5165bd00b07408dbb87173e96908c6926a4</code>, which is the <code>lean-3.4.2</code> branch of mathlib.</p>",
        "id": 211734440,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601457834
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"334882\">@Kondo Yuki</span> It looks like your function works, you just need to raise the timeout to compute <code>is_optimal (VTCode 4 0)</code>. You can also run lean at the console, where I believe there is no timeout</p>",
        "id": 211764642,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601474746
    },
    {
        "content": "<p>Then again, it appears you are calculating that <code>is_optimal (VTCode 1 0)</code>, <code>is_optimal (VTCode 2 0)</code>, <code>is_optimal (VTCode 3 0)</code>, <code>is_optimal (VTCode 4 0)</code> are all optimal, so a reasonable conjecture is that they are all optimal, which yields a much faster proof</p>",
        "id": 211764887,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601474853
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Thank you for your confirmation and advice.</p>",
        "id": 211865308,
        "sender_full_name": "Kondo Yuki",
        "timestamp": 1601522404
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> We are using <code>acf2038a720036d2e6fdc035bc57627da71d343c</code>, which is the <code>lean-3.4.2</code> branch of mathlib.</p>",
        "id": 211866438,
        "sender_full_name": "Kondo Yuki",
        "timestamp": 1601524066
    },
    {
        "content": "<p>Weird. On my copy of mathlib I have</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>git show origin/lean-3.4.2 <span class=\"p\">|</span> head -1\ncommit dd8da5165bd00b07408dbb87173e96908c6926a4\n</code></pre></div>",
        "id": 211868887,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601527421
    },
    {
        "content": "<p>Which is a commit from Feb 5.</p>",
        "id": 211868953,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601527476
    },
    {
        "content": "<p>Otoh,</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>commit acf2038a720036d2e6fdc035bc57627da71d343c\nDate:   Sun Dec 29 03:52:23 2019 -0500\n</code></pre></div>",
        "id": 211868964,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601527494
    }
]