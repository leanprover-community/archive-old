[
    {
        "content": "<p>so... i'm trying to formalize a very restricted subset of c++, inspired by WASM. and my code looks somewhat... horrible. any tips to improve the code? <a href=\"https://gist.github.com/huynhtrankhanh/a39cf40c6c791b46b0bf2e87aadc19f6\">https://gist.github.com/huynhtrankhanh/a39cf40c6c791b46b0bf2e87aadc19f6</a></p>",
        "id": 244297922,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1624979629
    },
    {
        "content": "<p>like i don't really expect you to check the definitions and the generated code lol, i just want like general tips to improve readability</p>",
        "id": 244298072,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1624979673
    },
    {
        "content": "<p>to reduce duplication, do you want to factor out the word size as a separate type (i8, i16, i32, i64)?</p>",
        "id": 244298510,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1624979840
    },
    {
        "content": "<p>that sounds like a good idea... but i have a hunch that the refactor strategy is going to significantly affect the readability (and usability) of the code. so maybe... how would you factor out the word size and reduce duplication then? i'm p sure that i don't have enough experience to introduce more abstraction without turning my code into spaghetti</p>",
        "id": 244299796,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1624980303
    },
    {
        "content": "<p>also, another question, which should be less open ended: how can i generate a random <code>list instruction_t</code> for testing?</p>",
        "id": 244302367,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1624981361
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"270523\">Huỳnh Trần Khanh</span> <a href=\"#narrow/stream/113488-general/topic/c.2B.2B.20subset.20formalization/near/244302367\">said</a>:</p>\n<blockquote>\n<p>also, another question, which should be less open ended: how can i generate a random <code>list instruction_t</code> for testing?</p>\n</blockquote>\n<p>I think that sampling arbitrary GADTs is possible, there are some papers on the subject</p>",
        "id": 244302589,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1624981465
    },
    {
        "content": "<p>Here's an example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">word</span>\n<span class=\"bp\">|</span> <span class=\"n\">i8</span>\n<span class=\"bp\">|</span> <span class=\"n\">i16</span>\n<span class=\"bp\">|</span> <span class=\"n\">i32</span>\n<span class=\"bp\">|</span> <span class=\"n\">i64</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">variable_t</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">word</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"o\">:</span> <span class=\"n\">variable_t</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">value_t</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">word</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"n\">value_t</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">instruction_t</span>\n<span class=\"bp\">|</span> <span class=\"n\">const</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">word</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">value</span> <span class=\"o\">:</span> <span class=\"n\">value_t</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">output</span> <span class=\"o\">:</span> <span class=\"n\">variable_t</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">instruction_t</span>\n<span class=\"bp\">|</span> <span class=\"n\">duplicate</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">word</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">input</span> <span class=\"o\">:</span> <span class=\"n\">variable_t</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">output</span> <span class=\"o\">:</span> <span class=\"n\">variable_t</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">instruction_t</span>\n<span class=\"bp\">|</span> <span class=\"n\">add</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">word</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">input1</span> <span class=\"o\">:</span> <span class=\"n\">variable_t</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">input2</span> <span class=\"o\">:</span> <span class=\"n\">variable_t</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">output</span> <span class=\"o\">:</span> <span class=\"n\">variable_t</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">instruction_t</span>\n<span class=\"bp\">|</span> <span class=\"n\">sub</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">word</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">input1</span> <span class=\"o\">:</span> <span class=\"n\">variable_t</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">input2</span> <span class=\"o\">:</span> <span class=\"n\">variable_t</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">output</span> <span class=\"o\">:</span> <span class=\"n\">variable_t</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">instruction_t</span>\n<span class=\"bp\">|</span> <span class=\"n\">mul</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">word</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">input1</span> <span class=\"o\">:</span> <span class=\"n\">variable_t</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">input2</span> <span class=\"o\">:</span> <span class=\"n\">variable_t</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">output</span> <span class=\"o\">:</span> <span class=\"n\">variable_t</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">instruction_t</span>\n<span class=\"bp\">|</span> <span class=\"n\">unsigned_div</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">word</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">input1</span> <span class=\"o\">:</span> <span class=\"n\">variable_t</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">input2</span> <span class=\"o\">:</span> <span class=\"n\">variable_t</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">output</span> <span class=\"o\">:</span> <span class=\"n\">variable_t</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">instruction_t</span>\n<span class=\"bp\">|</span> <span class=\"n\">signed_div</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">word</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">input1</span> <span class=\"o\">:</span> <span class=\"n\">variable_t</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">input2</span> <span class=\"o\">:</span> <span class=\"n\">variable_t</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">output</span> <span class=\"o\">:</span> <span class=\"n\">variable_t</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">instruction_t</span>\n<span class=\"bp\">|</span> <span class=\"n\">unsigned_mod</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">word</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">input1</span> <span class=\"o\">:</span> <span class=\"n\">variable_t</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">input2</span> <span class=\"o\">:</span> <span class=\"n\">variable_t</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">output</span> <span class=\"o\">:</span> <span class=\"n\">variable_t</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">instruction_t</span>\n<span class=\"bp\">|</span> <span class=\"n\">signed_mod</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">word</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">input1</span> <span class=\"o\">:</span> <span class=\"n\">variable_t</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">input2</span> <span class=\"o\">:</span> <span class=\"n\">variable_t</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">output</span> <span class=\"o\">:</span> <span class=\"n\">variable_t</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">instruction_t</span>\n<span class=\"bp\">|</span> <span class=\"n\">and</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">word</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">input1</span> <span class=\"o\">:</span> <span class=\"n\">variable_t</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">input2</span> <span class=\"o\">:</span> <span class=\"n\">variable_t</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">output</span> <span class=\"o\">:</span> <span class=\"n\">variable_t</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">instruction_t</span>\n<span class=\"bp\">|</span> <span class=\"n\">or</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">word</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">input1</span> <span class=\"o\">:</span> <span class=\"n\">variable_t</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">input2</span> <span class=\"o\">:</span> <span class=\"n\">variable_t</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">output</span> <span class=\"o\">:</span> <span class=\"n\">variable_t</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">instruction_t</span>\n<span class=\"bp\">|</span> <span class=\"n\">xor</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">word</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">input1</span> <span class=\"o\">:</span> <span class=\"n\">variable_t</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">input2</span> <span class=\"o\">:</span> <span class=\"n\">variable_t</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">output</span> <span class=\"o\">:</span> <span class=\"n\">variable_t</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">instruction_t</span>\n<span class=\"bp\">|</span> <span class=\"n\">shift_left</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">word</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">input1</span> <span class=\"o\">:</span> <span class=\"n\">variable_t</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">input2</span> <span class=\"o\">:</span> <span class=\"n\">variable_t</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">output</span> <span class=\"o\">:</span> <span class=\"n\">variable_t</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">instruction_t</span>\n<span class=\"bp\">|</span> <span class=\"n\">shift_right</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">word</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">input1</span> <span class=\"o\">:</span> <span class=\"n\">variable_t</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">input2</span> <span class=\"o\">:</span> <span class=\"n\">variable_t</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">output</span> <span class=\"o\">:</span> <span class=\"n\">variable_t</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">instruction_t</span>\n<span class=\"bp\">|</span> <span class=\"n\">i32_to_i64</span> <span class=\"o\">(</span><span class=\"n\">input</span> <span class=\"o\">:</span> <span class=\"n\">variable_t</span> <span class=\"n\">word.i32</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">output</span> <span class=\"o\">:</span> <span class=\"n\">variable_t</span> <span class=\"n\">word.i64</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">instruction_t</span>\n<span class=\"bp\">|</span> <span class=\"n\">i64_to_i32</span> <span class=\"o\">(</span><span class=\"n\">input</span> <span class=\"o\">:</span> <span class=\"n\">variable_t</span> <span class=\"n\">word.i64</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">output</span> <span class=\"o\">:</span> <span class=\"n\">variable_t</span> <span class=\"n\">word.i32</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">instruction_t</span>\n<span class=\"bp\">|</span> <span class=\"n\">unsigned_load</span> <span class=\"o\">(</span><span class=\"n\">address</span> <span class=\"o\">:</span> <span class=\"n\">variable_t</span> <span class=\"n\">word.i32</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">output</span> <span class=\"o\">:</span> <span class=\"n\">variable_t</span> <span class=\"n\">word.i32</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">instruction_t</span>\n<span class=\"bp\">|</span> <span class=\"n\">signed_load</span> <span class=\"o\">(</span><span class=\"n\">address</span> <span class=\"o\">:</span> <span class=\"n\">variable_t</span> <span class=\"n\">word.i32</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">output</span> <span class=\"o\">:</span> <span class=\"n\">variable_t</span> <span class=\"n\">word.i32</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">instruction_t</span>\n<span class=\"bp\">|</span> <span class=\"n\">store</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">word</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">address</span> <span class=\"o\">:</span> <span class=\"n\">variable_t</span> <span class=\"n\">word.i32</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">output</span> <span class=\"o\">:</span> <span class=\"n\">variable_t</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">instruction_t</span>\n<span class=\"bp\">|</span> <span class=\"n\">break</span> <span class=\"o\">:</span> <span class=\"n\">instruction_t</span>\n<span class=\"bp\">|</span> <span class=\"n\">break_if</span> <span class=\"o\">(</span><span class=\"n\">input</span> <span class=\"o\">:</span> <span class=\"n\">variable_t</span> <span class=\"n\">word.i32</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">instruction_t</span>\n<span class=\"bp\">|</span> <span class=\"n\">loop</span> <span class=\"o\">(</span><span class=\"n\">instrs</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">instruction_t</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">instruction_t</span>\n</code></pre></div>",
        "id": 244302621,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1624981480
    },
    {
        "content": "<p>You can check out <code>slim_check</code> and the <a href=\"https://leanprover-community.github.io/mathlib_docs/find/slim_check.sampleable\">docs#slim_check.sampleable</a> docs for arbitrary sampling.</p>",
        "id": 244302791,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1624981558
    },
    {
        "content": "<p>I don't know exactly what your goal is. For <code>extract_body</code>, first write your own <code>instruction_t -&gt; str</code> function. You can use <code>sformat</code> like so:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"n\">sformat</span><span class=\"bp\">!</span><span class=\"s2\">\"1 + 1 = {1 + 1}\"</span> <span class=\"c1\">-- \"1 + 1 = 2\"</span>\n</code></pre></div>",
        "id": 244303282,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1624981759
    },
    {
        "content": "<p>You should also factor out the binops themselves into an inductive. This will decrease both the size and visual complexity of the inductive as well as the printer</p>",
        "id": 244333638,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1624994578
    },
    {
        "content": "<p>That was my hope, that my example would inspire further abstraction and refactoring.</p>",
        "id": 244335163,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1624995254
    },
    {
        "content": "<p>this is not related to lean but is this a good way to force 8 bytes alignment?</p>\n<div class=\"codehilite\" data-code-language=\"C++\"><pre><span></span><code><span class=\"k\">union</span> <span class=\"p\">{</span><span class=\"kt\">uint8_t</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"mi\">1000</span><span class=\"p\">];</span><span class=\"kt\">uint64_t</span> <span class=\"n\">y</span><span class=\"p\">;}</span> <span class=\"n\">m</span><span class=\"p\">;</span>\n</code></pre></div>\n<p><code>m.x</code> is the program's <em>linear memory</em>, which is a fancy term for the heap</p>",
        "id": 244377989,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1625029484
    },
    {
        "content": "<p>yes, that will work</p>",
        "id": 244398241,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1625045787
    }
]