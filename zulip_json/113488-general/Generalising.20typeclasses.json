[
    {
        "content": "<p>I've been working on a tactic/linter to find declarations with typeclass arguments that are overly specific, in the sense that in the proof they are only ever used to produce other instances which are  more general.<br>\nE.g. if I state the lemma</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"kd\">lemma</span> <span class=\"n\">bad</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">â„¤</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">g</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">g</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">gpow_neg</span><span class=\"o\">,</span> <span class=\"n\">inv_eq_one</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span>\n</code></pre></div>\n<p>the tactic notices that the proof didn't actually use the commutative structure, only the <code>[group G]</code> instance found via <code>comm_group.to_group</code>. I hope that by making these sorts of changes we can end up with a more complete library (with less obvious small lemmas missing) with a lot less human effort than finding these generalisations by hand when they're needed, the nature of the process should be that proofs will never need fixing and so simply changing the typeclass assumptions will give us more general lemmas for free.<br>\nThe potential downside is that in some cases we might end up making the typeclass system work harder than it needs to: If all the lemmas are stated in their most general form, rather than the form they are actually used in, then applying these lemmas could cause a long search every time they are applied, rather than just once at the time they are proved (e.g. if I am writing a theory of groups that nobody will ever use any of the lemmas in for semigroups/monoids then having <code>[group G]</code> as the assumption throughout would in theory typecheck faster than if I change half the lemmas to require semigroup and then only ever apply them with groups). I haven't really tested the impact of this yet and probably this is the sort of thing that would need to be decided on a case-by-case basis anyway.</p>\n<p>This tactic still needs some refining to work when the implications between different typeclasses are more subtle (diamonds), to flag multiple generalisation steps at once, and to rule out more false positives. But the version I have already produces a large number of fairly interesting results, I've prepared an (unpolished) branch with a pretty random sample of  some the declarations flagged by the tactic changed over at <a href=\"https://github.com/leanprover-community/mathlib/compare/generalising_typeclasses\">https://github.com/leanprover-community/mathlib/compare/generalising_typeclasses</a> to give a sense of the sort of thing this is finding. Many of these are things like removing commutativity assumptions or weakening assumptions on being partial orders to preorders, fields to being rings, topological groups to just has_continuous_mul's.<br>\nFor this branch I've only generalised lemmas rather than definitions as how general we should make definitions is an even trickier design question in my mind than for lemmas.</p>\n<p>My question to the maintainers is, would you welcome a sequence of PR's making changes of the sort in the branch (say split up by folder / area to make each one easy to review)? It is quite possible that some of the changes will not be appropriate or desired, due to various design decisions in different areas of mathlib that I'm not aware of.<br>\nI'd like to keep making PR's as I improve the tactic, so as to spread the work of merging any changes out over time, and would of course like to PR the tactic itself when its complete, as I hope that like the other linters it will be useful to people as they are working on developing a new theory.</p>\n<p>This sort of generalisation is an iterative process, as typeclasses are generalised in some lemmas, any dependent lemmas may also become generalisable in the same way so I'd rather start making PRs than end up with a branch massively diverged from mathlib as I'm tweaking things. I'd also rather get some changes made before the linter is done and PR'd to avoid ending up with a huge nolints file associated <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span>.</p>",
        "id": 219960984,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1608028858
    },
    {
        "content": "<p>More interestingly, where is the tactic/linter code?</p>",
        "id": 219961614,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1608029232
    },
    {
        "content": "<p>Its currently a complete mess, sorry! I'll try and clean it up and make it public as soon as it is actually readable.</p>",
        "id": 219961835,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1608029389
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/113488-general/topic/Generalising.20typeclasses/near/219960984\">said</a>:</p>\n<blockquote>\n<p>The potential downside is that in some cases we might end up making the typeclass system work harder than it needs to: If all the lemmas are stated in their most general form, rather than the form they are actually used in, then applying these lemmas could cause a long search every time they are applied, rather than just once at the time they are proved.</p>\n</blockquote>\n<p>This is mathlib, stating lemmas in maximal generality using type classes is an intentional design choice.  (AKA, we already have this \"issue\" all over the place.)</p>",
        "id": 219961852,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1608029399
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/113488-general/topic/Generalising.20typeclasses/near/219960984\">said</a>:</p>\n<blockquote>\n<p>For this branch I've only generalised lemmas rather than definitions as how general we should make definitions is an even trickier design question in my mind than for lemmas.</p>\n</blockquote>\n<p>I think the answer is the same as for the unused arguments linter: put a nolint there if it's really, really what you want.  But in general I'm suspicious of unnecessary type-class arguments (see also the discussion about whether <code>nontrivial</code> should have a <code>has_zero</code> argument).</p>",
        "id": 219962044,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1608029517
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/113488-general/topic/Generalising.20typeclasses/near/219960984\">said</a>:</p>\n<blockquote>\n<p>This sort of generalisation is an iterative process, as typeclasses are generalised in some lemmas, any dependent lemmas may also become generalisable in the same way so I'd rather start making PRs than end up with a branch massively diverged from mathlib as I'm tweaking things. I'd also rather get some changes made before the linter is done and PR'd to avoid ending up with a huge nolints file associated :).</p>\n</blockquote>\n<p>From a strategic point of view, what we've been doing with the other linters is exactly the opposite: PR a first weak version of the linter to mathlib and fix the linter warnings, and then improve the linter in follow-up PRs.<br>\nIf you'd like to get the linter in first before fixing the issues, then changes to the nolints.txt file are also accepted (that's what it's for).</p>",
        "id": 219962625,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1608029871
    },
    {
        "content": "<p>I am currently adding random weird typeclasses like canonical_linear_ordered_monoid or whatever; will the linter notice them when they appear and then start complaining about various other lemmas now having slightly the wrong assumptions?</p>",
        "id": 219962636,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608029881
    },
    {
        "content": "<p>Kevin, if I understand it correctly, then yes. That's what will happen.</p>",
        "id": 219963654,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1608030460
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span> This sounds great! Nice effort!</p>",
        "id": 219963679,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1608030480
    },
    {
        "content": "<p>If that's a problem Kevin, we could always have a lint rule that automatically ignores new typeclasses by adding all violations it finds when the typeclass is first added to a nolints file; which would at least stop any new lemmas using the overly strict typeclass</p>",
        "id": 219963791,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1608030543
    },
    {
        "content": "<p>I don't think it's a problem at all. In fact one of the problems with making new typeclasses is not knowing which lemmas have been proved for specialisations of those typeclasses which should really be proved in greater generality</p>",
        "id": 219964755,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608031117
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/113488-general/topic/Generalising.20typeclasses/near/219961852\">said</a>:</p>\n<blockquote>\n<p>This is mathlib, stating lemmas in maximal generality using type classes is an intentional design choice.  (AKA, we already have this \"issue\" all over the place.)</p>\n</blockquote>\n<p>Thanks, ok I will worry less about this then <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span><br>\n<span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/113488-general/topic/Generalising.20typeclasses/near/219962625\">said</a>:</p>\n<blockquote>\n<p>From a strategic point of view, what we've been doing with the other linters is exactly the opposite: PR a first weak version of the linter to mathlib and fix the linter warnings, and then improve the linter in follow-up PRs.<br>\nIf you'd like to get the linter in first before fixing the issues, then changes to the nolints.txt file are also accepted (that's what it's for).</p>\n</blockquote>\n<p>I'm hoping to have the better version working fairly soon, and I'm hoping the output of that version will be much more useful. But if it's harder to get working than I'm hoping I'll try and PR a cleaned up basic version instead, at present there are a few too many false positives for it to be mathlib ready I think unfortunately.</p>",
        "id": 219966141,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1608031964
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/Generalising.20typeclasses/near/219962636\">said</a>:</p>\n<blockquote>\n<p>I am currently adding random weird typeclasses like canonical_linear_ordered_monoid or whatever; will the linter notice them when they appear and then start complaining about various other lemmas now having slightly the wrong assumptions?</p>\n</blockquote>\n<p>Ideally (in my mind) yes, as soon as a new class is added with the right instances to and from existing ones it should show up. It does depend a bit on the implementation though, how much searching is done and as always there is some trade off between how long it takes the linter to run and how effective it can be.</p>",
        "id": 219966384,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1608032155
    },
    {
        "content": "<p>With something like this I would imagine there's an argument for running it once, being very effective and very slow, to see what kind of a mess we're in. This is a really cool linter! I'm pretty sure Johan would have loved it when he added groups with zero!</p>",
        "id": 219966984,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608032558
    },
    {
        "content": "<p>This is a very cool. Writing this linter has been somewhere on my to-do list for a while, so it's really cool you actually wrote it! PRs with these changes are definitely welcome to mathlib.</p>",
        "id": 220023215,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1608057663
    }
]