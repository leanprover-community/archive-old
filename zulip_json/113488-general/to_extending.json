[
    {
        "content": "<p>Suppose I have a structure <code>foo</code>, that is not a class and wouldn't make sense as a class. Then I prove lemmas <code>foo.lem1</code> and <code>foo.lem1</code> about my structure <code>foo</code> and define a function <code>foo.mk_something</code>. Then I define another structure <code>bar</code> extending <code>foo</code>, which is also not a class. In particular Lean creates <code>bar.to_foo</code> for me. But each time I want to apply my lemmas to <code>x : bar</code>, I need to call <code>x.to_foo.lem1</code> or <code>x.to_foo.lem1</code>, and the same with <code>x.to_foo.mk_something</code>.</p>\n<p>It seems totally within reach of meta-programming to write a command <code>port_lemma foo bar</code> that  creates <code>bar.lem1</code>, <code>bar.lem2</code>, <code>bar.mk_something</code>, changing the types of all arguments with type <code>foo</code> and inserting <code>.to_foo</code> everywhere they are used.</p>\n<p>Am I talking non-sense? Does this already exist? Could someone do it for me?</p>",
        "id": 193209568,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586275093
    },
    {
        "content": "<p>When bundling algebraic structures I have run into this and I've had some pushback from the CS people because <code>x.lem1</code> is the same as <code>x.to_foo.lem1</code> and you are not supposed to duplicate code.</p>",
        "id": 193209957,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586275248
    },
    {
        "content": "<p>If I had it my way we'd have <code>group_hom.map_mul</code> and so on.</p>",
        "id": 193210079,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586275295
    },
    {
        "content": "<p>Code is not really duplicated if you don't write it.</p>",
        "id": 193210086,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586275298
    },
    {
        "content": "<p>All the <code>simp</code> tags need transporting over as well.</p>",
        "id": 193210245,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586275351
    },
    {
        "content": "<p>I think this exact use case already works without any <code>port_lemma</code> command. That is, if you write <code>x.lem1</code> and <code>x : bar</code> and <code>bar extends foo</code> then the <em>parser</em> will insert a <code>to_foo</code> in there so what the elaborator sees is <code>foo.lem1 (bar.to_foo x)</code></p>",
        "id": 193251838,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586295575
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> either you were dreaming or I didn't explain properly:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">structure</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">n_eq</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">foo</span><span class=\"bp\">.</span><span class=\"n\">lem1</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">foo</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">n_eq</span> <span class=\"bp\">;</span> <span class=\"n\">norm_num</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">bar</span> <span class=\"kn\">extends</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">bar</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">to_foo</span><span class=\"bp\">.</span><span class=\"n\">lem1</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">bar</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">lem1</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">invalid field notation, &#39;lem1&#39; is not a valid &quot;field&quot; because environment does not contain &#39;bar.lem1&#39;</span>\n<span class=\"cm\">  x</span>\n<span class=\"cm\">which has type</span>\n<span class=\"cm\">  bar</span>\n<span class=\"cm\">-/</span>\n</pre></div>",
        "id": 193311887,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586349267
    },
    {
        "content": "<p>I think the magic might be limited to structure members</p>",
        "id": 193311986,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586349308
    },
    {
        "content": "<p>This is the most painful flaw of the Lean 3 elaborator outside  type class inference.</p>",
        "id": 193312009,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586349316
    },
    {
        "content": "<p>Without this issue the manifold files in mathlib would be infinitely easier to read and write.</p>",
        "id": 193312066,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586349337
    },
    {
        "content": "<p>which is doubly annoying because there is nothing else that makes structure fields distinguishable from other theorems</p>",
        "id": 193312088,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586349351
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">bar</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">to_foo</span><span class=\"bp\">.</span><span class=\"n\">n_eq</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">bar</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">n_eq</span>\n</pre></div>",
        "id": 193312223,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586349410
    },
    {
        "content": "<p>Yes, I knew this works. But it's very far from being sufficient.</p>",
        "id": 193312320,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586349475
    },
    {
        "content": "<p>Hence my question: should we meta-program away this problem?</p>",
        "id": 193312386,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586349494
    },
    {
        "content": "<p>Or even better: could someone fix the elaborator in Lean 3.8?</p>",
        "id": 193312417,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586349513
    },
    {
        "content": "<p>Ugh, I just ran into this again too.</p>",
        "id": 193695510,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1586669183
    },
    {
        "content": "<p>There is at least one issue in that while names of structure fields are unique in a class hierarchy, declaration names in associated namespaces don't need to be, of course. I suppose the sane thing to do would be to raise an error on an ambiguous access, i.e. if the namespaces of two unrelated super structures both define the same name.</p>",
        "id": 195347628,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1587927551
    },
    {
        "content": "<p>Of course there will be ambiguous access, but raising an error sounds fine since we can always give full access information.</p>",
        "id": 195349500,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1587930368
    }
]