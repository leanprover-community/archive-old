[
    {
        "content": "<p>Is this bound to become a massive headache, if possible at all?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">universe</span> <span class=\"n\">u</span>\n<span class=\"n\">class</span> <span class=\"n\">has_bracket</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">bracket</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"n\">local</span> <span class=\"kn\">notation</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"bp\">`</span> <span class=\"n\">a</span> <span class=\"bp\">`</span><span class=\"o\">,</span><span class=\"bp\">`</span> <span class=\"n\">b</span> <span class=\"bp\">`</span><span class=\"o\">]</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">has_bracket</span><span class=\"bp\">.</span><span class=\"n\">bracket</span>\n</pre></div>\n\n\n<p>The notation <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>[</mo><mi>x</mi><mo separator=\"true\">,</mo><mi>y</mi><mo>]</mo></mrow><annotation encoding=\"application/x-tex\">[x,y]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mopen\">[</span><span class=\"mord mathit\">x</span><span class=\"mpunct\">,</span><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">]</span></span></span></span> is very common (I would say, <em>mandatory</em>) in the theory of Lie algebras.</p>",
        "id": 127889037,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1528705960
    },
    {
        "content": "<p>it breaks list notation, so one question is: are you likely to be using list notation? Let's face it, list notation isn't that common in mathematics. Will you use it behind the scenes though? I am not sure I used a single list when doing schemes.</p>",
        "id": 127889262,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528706401
    },
    {
        "content": "<p>(at least, not explicitly)</p>",
        "id": 127889303,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528706412
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">module</span>\n\n<span class=\"n\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"n\">class</span> <span class=\"n\">has_bracket</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">bracket</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"n\">local</span> <span class=\"kn\">notation</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"bp\">`</span> <span class=\"n\">a</span> <span class=\"bp\">`</span><span class=\"o\">,</span><span class=\"bp\">`</span> <span class=\"n\">b</span> <span class=\"bp\">`</span><span class=\"o\">]</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">has_bracket</span><span class=\"bp\">.</span><span class=\"n\">bracket</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n\n<span class=\"n\">class</span> <span class=\"n\">lie_algebra</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">out_param</span> <span class=\"err\">$</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"err\">𝔤</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">out_param</span> <span class=\"err\">$</span> <span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n<span class=\"kn\">extends</span> <span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"err\">𝔤</span><span class=\"o\">,</span> <span class=\"n\">has_bracket</span> <span class=\"err\">𝔤</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">left_linear</span>  <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"err\">𝔤</span><span class=\"o\">,</span> <span class=\"n\">is_linear_map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"err\">𝔤</span><span class=\"o\">,</span> <span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">y</span><span class=\"o\">]))</span>\n<span class=\"o\">(</span><span class=\"n\">right_linear</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"err\">𝔤</span><span class=\"o\">,</span> <span class=\"n\">is_linear_map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"err\">𝔤</span><span class=\"o\">,</span> <span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">y</span><span class=\"o\">]))</span>\n<span class=\"o\">(</span><span class=\"n\">alternating</span>  <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"err\">𝔤</span><span class=\"o\">,</span> <span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">x</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">Jacobi_identity</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"err\">𝔤</span><span class=\"o\">,</span> <span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">,[</span><span class=\"n\">y</span><span class=\"o\">,</span><span class=\"n\">z</span><span class=\"o\">]]</span> <span class=\"bp\">+</span> <span class=\"o\">[</span><span class=\"n\">z</span><span class=\"o\">,[</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">y</span><span class=\"o\">]]</span> <span class=\"bp\">+</span> <span class=\"o\">[</span><span class=\"n\">y</span><span class=\"o\">,[</span><span class=\"n\">z</span><span class=\"o\">,</span><span class=\"n\">x</span><span class=\"o\">]]</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">anti_comm</span>    <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"err\">𝔤</span><span class=\"o\">,</span> <span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">y</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"o\">([</span><span class=\"n\">y</span><span class=\"o\">,</span><span class=\"n\">x</span><span class=\"o\">]))</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"err\">𝔤</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">lie_algebra</span> <span class=\"n\">R</span> <span class=\"err\">𝔤</span><span class=\"o\">]</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">- `𝔥` is a Lie subalgebra: a set closed under the Lie bracket. -/</span>\n<span class=\"n\">class</span> <span class=\"n\">is_lie_subalgebra</span> <span class=\"o\">(</span><span class=\"err\">𝔥</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"err\">𝔤</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">closed</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"err\">𝔥</span> <span class=\"bp\">→</span> <span class=\"n\">y</span> <span class=\"err\">∈</span> <span class=\"err\">𝔥</span> <span class=\"bp\">→</span> <span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">y</span><span class=\"o\">]</span> <span class=\"err\">∈</span> <span class=\"err\">𝔥</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>I am bitten again by type class inference. Once again Lean can't infer the class of <code>has_bracket 𝔤</code> in the last line, even though it knows that <code>𝔤</code> is a Lie algebra. <br>\nIf I compare this with</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">class</span> <span class=\"n\">is_add_subgroup</span> <span class=\"o\">[</span><span class=\"n\">add_group</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"n\">is_add_submonoid</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">neg_mem</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"bp\">-</span><span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>How does Lean figure out <code>has_mem α</code> to make sense of the <code>-a</code>? The cargo-cult programmer in me is stumped.</p>",
        "id": 127899035,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1528723292
    },
    {
        "content": "<p>I don't know why, but changing the last line to</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"err\">𝔤</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">la</span> <span class=\"o\">:</span> <span class=\"n\">lie_algebra</span> <span class=\"n\">R</span> <span class=\"err\">𝔤</span><span class=\"o\">]</span>\n<span class=\"n\">include</span> <span class=\"n\">la</span>\n</pre></div>\n\n\n<p>made it work for me.</p>",
        "id": 127899473,
        "sender_full_name": "Reid Barton",
        "timestamp": 1528723947
    },
    {
        "content": "<p>If I had to guess, it has something to do with the additional parameter <code>R</code></p>",
        "id": 127899477,
        "sender_full_name": "Reid Barton",
        "timestamp": 1528723963
    },
    {
        "content": "<p>Thanks... that'll do for now <span class=\"emoji emoji-1f609\" title=\"wink\">:wink:</span></p>",
        "id": 127899495,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1528724006
    },
    {
        "content": "<p>Yes, section variables used as <code>out_param</code>s are a bit broken. Lean will auto-include section class variables only when all its parameters are (auto-)included, but it should ignore <code>out_param</code>s during that.</p>",
        "id": 127899771,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1528724383
    },
    {
        "content": "<p>So <code>include R</code> should work too</p>",
        "id": 127899782,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1528724392
    },
    {
        "content": "<p>It doesn't...</p>",
        "id": 127899849,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1528724476
    },
    {
        "content": "<p>¯\\_(ツ)_/¯</p>",
        "id": 127899927,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1528724574
    },
    {
        "content": "<p>Maybe need to include the <code>[comm_ring R]</code> variable also then</p>",
        "id": 127900028,
        "sender_full_name": "Reid Barton",
        "timestamp": 1528724706
    },
    {
        "content": "<p>Then yours becomes more efficient (-;</p>",
        "id": 127900036,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1528724739
    },
    {
        "content": "<p>After Reid's (hacky) fix, the next line gives problems. I would like to solve it myself, but I don't know why Lean is unhappy. Here is the line:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"n\">subset</span><span class=\"bp\">.</span><span class=\"n\">lie_algebra</span> <span class=\"o\">{</span><span class=\"err\">𝔥</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"err\">𝔤</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">is_lie_subalgebra</span> <span class=\"err\">𝔥</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">lie_algebra</span> <span class=\"n\">R</span> <span class=\"err\">𝔥</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>\n\n\n<p>I get red squiggles before the <code>is_lie_subalgebra</code> instance. Lean thinks it needs to infer an extra Type. I have tried some <code>set_option</code>s to get more info, but I couldn't figure it out (e.g. <code>trace.class_instances</code> and <code>pp.all</code>). How should I attack this error?</p>",
        "id": 127900184,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1528724929
    },
    {
        "content": "<p>Is there documentation for <code>out_param</code>? What is it's purpose? I think I heard somewhere that there have been long discussions about it. Has that been condensed into some docs? It feels to me like <code>out_param</code> is making it harder to work with modules, rather than easier.</p>",
        "id": 127914479,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1528743751
    },
    {
        "content": "<p>I think all documentation is here on Zulip (or gitter) and source code</p>",
        "id": 127914499,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1528743794
    },
    {
        "content": "<p>I tried implicitly turning an <code>R</code>-algebra into an <code>R</code>-module, by chaining together <code>ring.to_module</code> and restriction of scalars... guess what happened</p>",
        "id": 127914575,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1528743896
    },
    {
        "content": "<p>(I wanted to put the commutator bracket on the algebra [to make the link with this thread])</p>",
        "id": 127914657,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1528743972
    },
    {
        "content": "<p>Anyway, I ran head first into the type class loop again.</p>",
        "id": 127914674,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1528743993
    },
    {
        "content": "<p>Mario explaining out_param to me on gitter:</p>",
        "id": 127924610,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528758562
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>elaborator deals with opt_param, type class deals with out_param\n\nNormally a typeclass won&#39;t trigger until all its parameters are fixed\n\nSo for example [has_mem A B] won&#39;t be solved until A and B are known\n\ni.e. if I have x \\in y and the types of x y are unknown, it will fail\n\nHowever, has_mem works a bit differently than this because A is marked as an out_param\n\n@[class]\nstructure has_mem : out_param (Type u) → Type v → Type (max u v)\nfields:\nhas_mem.mem : Π {α : out_param (Type u)} {γ : Type v} [c : has_mem α γ], α → γ → Prop\n\nIn fact, if you have x \\in y and y : B, even if the type of x is unknown it will try to solve the typeclass problem has_mem ?M B\n\nThis is important because it often comes up in notations like \\forall x \\in y, ... where y : set A and x is unknown type, we want lean to figure out that x : A\n\nThis doesn&#39;t affect the meta theory in any way, of course, once the full term is given the elaborator and typeclass inference is done and it&#39;s basic DTT. In that situation it really is just an identity function\n\n\nAnd opt_param?\nMario Carneiro\n@digama0\n20:39\nThat&#39;s just the way (x : A := y) is translated, to x : opt_param A y\nit holds the optional value so it can be inferred by the usual rules for optional arguments\n\n\nIt is occasionally useful when you want to have an optional argument right of the colon (the := syntax only works on the parameters)\n</pre></div>",
        "id": 127924612,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528758569
    },
    {
        "content": "<p>Mario and Sebastian talking about module and params:</p>",
        "id": 127924746,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528758761
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>To review, the problem is that the definition:\n\nclass module (α : out_param $ Type u) (β : Type v) [out_param $ ring α]\n  extends has_scalar α β, add_comm_group β :=\n...\n\nleads to a search problem in which ring ?M1 is solved before module ?M1 β, which leads to a loop when there is an instance like [ring A] [ring B] : ring (A x B)\nI would like to make lean search for module ?M1 β only, obtaining α and the ring instance by unification\nJohannes suggested using {out_param $ ring α} instead of [out_param $ ring α], but then it doesn&#39;t work as a typeclass, and all the multiplications etc in the theorem statements break\nA possible solution is to skip out_param typeclass search problems until after all the others are solved\n\n***\n\nSo the real issue is: You want the elaborator to handle applying a function {A B} [ring A] [module A B] (x : B) : ..., yes...?\nMario Carneiro\n@digama0\nJan 19 10:10\nyes\nSebastian Ullrich\n@Kha\nJan 19 10:10\nWhere you want it to solve the second instance first, which fixes A and the first instance\n</pre></div>",
        "id": 127924752,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528758779
    },
    {
        "content": "<p><a href=\"https://gitter.im/leanprover_public/Lobby?at=5a61beb85ade18be399654c0\" target=\"_blank\" title=\"https://gitter.im/leanprover_public/Lobby?at=5a61beb85ade18be399654c0\">https://gitter.im/leanprover_public/Lobby?at=5a61beb85ade18be399654c0</a></p>",
        "id": 127924890,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528759001
    },
    {
        "content": "<p>Johannes too</p>",
        "id": 127924893,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528759010
    },
    {
        "content": "<p>Ok, I think I half understand the issues involved. Does this mean that</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">namespace</span> <span class=\"n\">restriction_of_scalars</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">S</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">S</span><span class=\"o\">}</span>  <span class=\"o\">[</span><span class=\"n\">is_ring_hom</span> <span class=\"n\">f</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">S</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">smul</span>     <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">r</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"err\">•</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n  <span class=\"n\">smul_add</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">smul_add</span><span class=\"o\">,</span>\n  <span class=\"n\">add_smul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"k\">begin</span>\n    <span class=\"k\">show</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">+</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"err\">•</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"err\">•</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"err\">•</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">is_ring_hom</span><span class=\"bp\">.</span><span class=\"n\">map_add</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">add_smul</span><span class=\"o\">,</span>\n  <span class=\"kn\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_smul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"k\">begin</span>\n    <span class=\"k\">show</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"err\">•</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"err\">•</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"err\">•</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">is_ring_hom</span><span class=\"bp\">.</span><span class=\"n\">map_mul</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">mul_smul</span>\n  <span class=\"kn\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">one_smul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"k\">begin</span>\n    <span class=\"k\">show</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"err\">•</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">is_ring_hom</span><span class=\"bp\">.</span><span class=\"n\">map_one</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">one_smul</span><span class=\"o\">,</span>\n  <span class=\"kn\">end</span><span class=\"o\">,</span>\n<span class=\"o\">}</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">restriction_of_scalars</span>\n</pre></div>\n\n\n<p>implies self-destruction <span class=\"emoji emoji-1f4a5\" title=\"boom\">:boom:</span> ?</p>",
        "id": 127939887,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1528787334
    },
    {
        "content": "<p>Ok, maybe this is asking to much. But would it be ok if we restrict to the case where <code>R</code> is a subring, and <code>f = subtype.val</code>?</p>",
        "id": 127940673,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1528788728
    }
]