[
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/mathlib/tree/tendsto_namespacing\">branch#tendsto_namespacing</a> I am correcting a few lemmas which I noticed were namespaced as <code>tendsto.***</code> rather than <code>filter.tendsto.***</code>, and thus couldn't be used with projection notation.</p>\n<p>Is there a way to do this more systematically -- to generate a list of all lemmas in mathlib in the should-not-exist namespace <code>tendsto</code>?</p>",
        "id": 228720117,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1614835864
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> I think you can generate a name of all declarations using <code>leanproject</code></p>",
        "id": 228720282,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614836011
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> you can run <code>leanproject decls</code>, this creates <code>decls.yaml</code> which should contain all the info you need.</p>",
        "id": 228720621,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614836269
    },
    {
        "content": "<p>Doesn't <code>#print prefix tendsto</code> suffice?</p>",
        "id": 228720680,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614836286
    },
    {
        "content": "<p>You will have to <code>import all</code> first</p>",
        "id": 228720713,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614836307
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>grep <span class=\"s2\">\"^tendsto[.]\"</span> decls.yaml\ntendsto.const_add:\ntendsto.mul_const:\ntendsto.add_const:\ntendsto.inv_tendsto_zero:\ntendsto.const_mul:\ntendsto.min:\ntendsto.inv_tendsto_at_top:\ntendsto.max:\n</code></pre></div>",
        "id": 228720782,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614836392
    },
    {
        "content": "<p>For future reference, the mathlib docs site also hosts a text file which contains all the declarations in mathlib: <a href=\"https://leanprover-community.github.io/mathlib_docs/decl.txt\">https://leanprover-community.github.io/mathlib_docs/decl.txt</a></p>\n<p>(This is used by the search bar.)</p>",
        "id": 228720926,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1614836518
    },
    {
        "content": "<p>Thank you all!  Funnily enough, these 8 were the ones I had already found :)</p>",
        "id": 228724375,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1614839442
    },
    {
        "content": "<p>Thank you very much for doing this Heather. This is the kind of things I notice from time to time but I never have enough courage to stop what I'm doing, fix it and PR.</p>",
        "id": 228731052,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1614844734
    },
    {
        "content": "<p>You're welcome.  By the way, there are also 6 lemmas with the namespace <code>ennreal.tendsto</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">ennreal.tendsto.mul</span>\n<span class=\"n\">ennreal.tendsto.const_mul</span>\n<span class=\"n\">ennreal.tendsto.mul_const</span>\n<span class=\"n\">ennreal.tendsto.div</span>\n<span class=\"n\">ennreal.tendsto.const_div</span>\n<span class=\"n\">ennreal.tendsto.div_const</span>\n</code></pre></div>\n<p>Does this serve any purpose? Should they be renamed to, say, <code>filter.tendsto.mul_ennreal</code>, etc?</p>",
        "id": 228787808,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1614870445
    },
    {
        "content": "<p>I think that having aliases in the <code>filter.tendsto</code> namespace is a good idea.</p>",
        "id": 228806040,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1614875886
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> thanks -- is there a reason you're suggesting the alias rather than just changing the name?</p>",
        "id": 228808062,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1614876586
    },
    {
        "content": "<p>Because it's hard to add a lemma to <code>filter.tendsto</code> inside <code>namespace ennreal ... end ennreal</code>. If you prefer to close/open namespace, this is fine with me.</p>",
        "id": 228847499,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1614890796
    },
    {
        "content": "<p>Then you lose all your variables!</p>",
        "id": 228851534,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614892487
    },
    {
        "content": "<p>Unless you declare the variables before starting the namespace :)</p>",
        "id": 228853713,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1614893374
    },
    {
        "content": "<p>You also lose all your <code>private</code> declarations if you close and reopen a namespace, IIRC</p>",
        "id": 228866469,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614899056
    },
    {
        "content": "<p>It's a pity we're not allowed to write <code>def _root_.XXX ...</code>.</p>",
        "id": 228866858,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1614899276
    },
    {
        "content": "<p>Could we write some simple<code>meta</code> code a la <code>to_additive</code> that looks like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[to_namespace filter]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">tendsto.mul</span> <span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 228869276,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1614900555
    },
    {
        "content": "<p>Is there any way to remove declarations from meta code?</p>",
        "id": 228874290,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614903224
    },
    {
        "content": "<p>We have support for what I'm saying:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">protected</span> <span class=\"kd\">lemma</span> <span class=\"n\">tendsto.mul</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">Œ±</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">ma</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"bp\">‚â•</span><span class=\"mi\">0</span><span class=\"bp\">‚àû</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">mb</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"bp\">‚â•</span><span class=\"mi\">0</span><span class=\"bp\">‚àû</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"bp\">‚â•</span><span class=\"mi\">0</span><span class=\"bp\">‚àû</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hma</span> <span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"n\">ma</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">‚â†</span> <span class=\"mi\">0</span> <span class=\"bp\">‚à®</span> <span class=\"n\">b</span> <span class=\"bp\">‚â†</span> <span class=\"bp\">‚ä§</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hmb</span> <span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"n\">mb</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">‚â†</span> <span class=\"mi\">0</span> <span class=\"bp\">‚à®</span> <span class=\"n\">a</span> <span class=\"bp\">‚â†</span> <span class=\"bp\">‚ä§</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">tendsto</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ma</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">mb</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"k\">show</span> <span class=\"n\">tendsto</span> <span class=\"o\">((</span><span class=\"bp\">Œª</span><span class=\"n\">p</span><span class=\"o\">:</span><span class=\"n\">‚Ñù</span><span class=\"bp\">‚â•</span><span class=\"mi\">0</span><span class=\"bp\">‚àû√ó</span><span class=\"n\">‚Ñù</span><span class=\"bp\">‚â•</span><span class=\"mi\">0</span><span class=\"bp\">‚àû</span><span class=\"o\">,</span> <span class=\"n\">p.1</span> <span class=\"bp\">*</span> <span class=\"n\">p.2</span><span class=\"o\">)</span> <span class=\"bp\">‚àò</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">ma</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">mb</span> <span class=\"n\">a</span><span class=\"o\">)))</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)),</span> <span class=\"k\">from</span>\n<span class=\"n\">tendsto.comp</span> <span class=\"o\">(</span><span class=\"n\">ennreal.tendsto_mul</span> <span class=\"n\">ha</span> <span class=\"n\">hb</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hma.prod_mk_nhds</span> <span class=\"n\">hmb</span><span class=\"o\">)</span>\n\n<span class=\"kd\">run_cmd</span> <span class=\"n\">tactic.transform_decl_with_prefix_fun</span> <span class=\"n\">some</span>\n  <span class=\"bp\">`</span><span class=\"n\">ennreal.tendsto.mul</span> <span class=\"bp\">`</span><span class=\"n\">filter.tendsto.ennreal.mul</span> <span class=\"o\">[]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">Œ±</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">ma</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"bp\">‚â•</span><span class=\"mi\">0</span><span class=\"bp\">‚àû</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">mb</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"bp\">‚â•</span><span class=\"mi\">0</span><span class=\"bp\">‚àû</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"bp\">‚â•</span><span class=\"mi\">0</span><span class=\"bp\">‚àû</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hma</span> <span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"n\">ma</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">‚â†</span> <span class=\"mi\">0</span> <span class=\"bp\">‚à®</span> <span class=\"n\">b</span> <span class=\"bp\">‚â†</span> <span class=\"bp\">‚ä§</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hmb</span> <span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"n\">mb</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">‚â†</span> <span class=\"mi\">0</span> <span class=\"bp\">‚à®</span> <span class=\"n\">a</span> <span class=\"bp\">‚â†</span> <span class=\"bp\">‚ä§</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">tendsto</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ma</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">mb</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"n\">filter.tendsto.ennreal.mul</span> <span class=\"n\">hma</span> <span class=\"n\">ha</span> <span class=\"n\">hmb</span> <span class=\"n\">hb</span>\n</code></pre></div>",
        "id": 228875333,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1614903800
    },
    {
        "content": "<p>Does that delete the original lemma though?</p>",
        "id": 228875954,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614904176
    },
    {
        "content": "<p>Nope. I second your earlier question.</p>",
        "id": 228876671,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1614904582
    },
    {
        "content": "<p>I very much doubt there is a mechanism to delete declarations, or ever would be.</p>",
        "id": 228878482,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1614905755
    },
    {
        "content": "<p>A possibility is setting the previous decl as private</p>",
        "id": 228884229,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1614909368
    },
    {
        "content": "<p>I like the idea of (ab)using private as a hack around this. The resulting attribute is so useful that I don't mind the hack</p>",
        "id": 228896123,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614918275
    },
    {
        "content": "<p>Instead of doing it via an attribute, what's wrong with <code>alias</code> as a stopgap?</p>",
        "id": 228908651,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1614929416
    },
    {
        "content": "<p>I don't yet see a way of changing a <code>is_private</code> for an existing declaration.</p>",
        "id": 228908680,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1614929442
    },
    {
        "content": "<p>If the original declaration is marked private by the user, then the copy could presumably be copied without that attribute?</p>",
        "id": 228913610,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614932770
    },
    {
        "content": "<p>I think that's correct the way 'alias' works</p>",
        "id": 228966869,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1614956357
    }
]