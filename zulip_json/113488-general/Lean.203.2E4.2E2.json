[
    {
        "content": "<p>I kind of forgot about it, and so did everyone else, I guess. Still, how about a Lean patch release in time for Lean Together? It looks like most discussions are back to complaining about general issues instead of specific bugs.</p>",
        "id": 154531080,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1546808708
    },
    {
        "content": "<p>is this adding anything new or is it just the fixes that are already on master?</p>",
        "id": 154531144,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1546808835
    },
    {
        "content": "<p>Just that</p>",
        "id": 154531151,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1546808849
    },
    {
        "content": "<p>It looks like at least PR <a href=\"https://github.com/leanprover/lean/issues/1982\" target=\"_blank\" title=\"https://github.com/leanprover/lean/issues/1982\">lean#1982</a> and <a href=\"https://github.com/leanprover/lean/issues/1983\" target=\"_blank\" title=\"https://github.com/leanprover/lean/issues/1983\">lean#1983</a> wouldn't be hard to merge though</p>",
        "id": 154531152,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1546808850
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 154531160,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1546808880
    },
    {
        "content": "<p>use <a href=\"https://github.com/leanprover/lean/issues/1982\" target=\"_blank\" title=\"https://github.com/leanprover/lean/issues/1982\">lean#1982</a></p>",
        "id": 154531204,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1546808892
    },
    {
        "content": "<p>I'm not sure <a href=\"https://github.com/leanprover/lean/issues/1983\" target=\"_blank\" title=\"https://github.com/leanprover/lean/issues/1983\">lean#1983</a> is correct</p>",
        "id": 154531274,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1546809034
    },
    {
        "content": "<p>Yeah, that's at most fixing a symptom</p>",
        "id": 154531277,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1546809054
    },
    {
        "content": "<p>Oh sorry, I read only the headline, and it seemed innocuous</p>",
        "id": 154531286,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1546809075
    },
    {
        "content": "<p>And 1982 is a triviality, I'm not opening that can of worms</p>",
        "id": 154531294,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1546809097
    },
    {
        "content": "<p>I guess this isn't an offer for actual maintenance of the core lib...</p>",
        "id": 154531344,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1546809148
    },
    {
        "content": "<p>the doc PR seems innocuous enough</p>",
        "id": 154531402,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1546809247
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean/issues/1960\" target=\"_blank\" title=\"https://github.com/leanprover/lean/issues/1960\">lean#1960</a></p>",
        "id": 154531406,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1546809256
    },
    {
        "content": "<p>can we get coinductive_predicates removed from lean core?</p>",
        "id": 154531473,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1546809382
    },
    {
        "content": "<p>that should really be in mathlib instead</p>",
        "id": 154531477,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1546809403
    },
    {
        "content": "<p>Right, <span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> mentioned that. I mean, I can wait.</p>",
        "id": 154531541,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1546809529
    },
    {
        "content": "<p>just saying, if you are prepping a release then now's a good time</p>",
        "id": 154531556,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1546809577
    },
    {
        "content": "<p>Yes, if someone wants to do it, I'll wait</p>",
        "id": 154531624,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1546809668
    },
    {
        "content": "<p>You want me to make a PR?</p>",
        "id": 154531626,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1546809681
    },
    {
        "content": "<p>Ah, it's even more trivial than I thought, yes?</p>",
        "id": 154531683,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1546809727
    },
    {
        "content": "<p>it should be just a clean remove, it's not used</p>",
        "id": 154531689,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1546809750
    },
    {
        "content": "<p><code>transfer</code> is used, so that would be more work, but <code>coinductive</code> is not</p>",
        "id": 154531701,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1546809781
    },
    {
        "content": "<p>it might be in some tests</p>",
        "id": 154531756,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1546809869
    },
    {
        "content": "<p>I see <code>coinductive</code> is still registered as a built-in token, oops</p>",
        "id": 154531766,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1546809909
    },
    {
        "content": "<p><code>coinductive</code> is a token in C++, but I think that was there even before the <code>coinductive_predicates</code> file</p>",
        "id": 154531767,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1546809913
    },
    {
        "content": "<p>it shouldn't be any harm to have it as an undefined token</p>",
        "id": 154531771,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1546809946
    },
    {
        "content": "<p>I second the suggestion :)</p>",
        "id": 154532023,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1546810353
    },
    {
        "content": "<p>done. I've removed the token as well.</p>",
        "id": 154532283,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1546810887
    },
    {
        "content": "<p>Do I want to know what the hell is going on with the MacOS builds...?</p>",
        "id": 154532291,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1546810908
    },
    {
        "content": "<p>I think we should keep the token though. We'll make use of it in mathlib</p>",
        "id": 154532332,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1546810932
    },
    {
        "content": "<p>Then you can introduce it there</p>",
        "id": 154532340,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1546810960
    },
    {
        "content": "<p>I withdraw my objection then</p>",
        "id": 154532358,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1546811020
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 154532361,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1546811025
    },
    {
        "content": "<p>What's up with the MacOS build?</p>",
        "id": 154532405,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1546811052
    },
    {
        "content": "<p>I don't know</p>",
        "id": 154532485,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1546811224
    },
    {
        "content": "<p>Mystery!</p>",
        "id": 154532536,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1546811329
    },
    {
        "content": "<p>Will a macOS binary be provided at some point or is something broken?</p>",
        "id": 154738515,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1547052650
    },
    {
        "content": "<p>Something is broken</p>",
        "id": 154739682,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1547053518
    },
    {
        "content": "<p>Is it possible to stop mathlib recompiling a bunch of times on Windows?</p>",
        "id": 154762716,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1547072647
    },
    {
        "content": "<p>Mathlib is horrible to compile and this issue is holding Chris and Kenny back. All the machines at Xena are Windows machines too.</p>",
        "id": 154762744,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1547072697
    },
    {
        "content": "<p>The issue Mario had in live coding</p>",
        "id": 154762838,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1547072775
    },
    {
        "content": "<p>Does anybody have a windows machine <em>which can compile Lean</em> to test out a hacky workaround?</p>",
        "id": 154823371,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1547107996
    },
    {
        "content": "<p>You are welcome to use mine. But I'll be angry if you melt the keyboard.</p>",
        "id": 154823628,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1547108390
    },
    {
        "content": "<p>You could also use mine.</p>",
        "id": 154823693,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1547108453
    },
    {
        "content": "<p>Thanks, I'll get to you during coffee/lunch.</p>",
        "id": 154823801,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1547108611
    },
    {
        "content": "<p>From comparing the macOS build logs <a href=\"https://travis-ci.org/leanprover/lean/jobs/477775262#L1091\" target=\"_blank\" title=\"https://travis-ci.org/leanprover/lean/jobs/477775262#L1091\">here (failing)</a> and <a href=\"https://travis-ci.org/leanprover/lean/jobs/467292242#L1890\" target=\"_blank\" title=\"https://travis-ci.org/leanprover/lean/jobs/467292242#L1890\">here (working)</a>, it seems that the issue is that rvm <a href=\"https://github.com/rvm/rvm/issues/4520\" target=\"_blank\" title=\"https://github.com/rvm/rvm/issues/4520\">added a new maintainer</a> so that the old GPG key doesn't work anymore.</p>\n<p>PR here: <a href=\"https://github.com/leanprover/lean/pull/1987\" target=\"_blank\" title=\"https://github.com/leanprover/lean/pull/1987\">https://github.com/leanprover/lean/pull/1987</a></p>",
        "id": 154854545,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1547139921
    },
    {
        "content": "<p>Can we turn the <code>[ ... ]</code> notation for list into a type class <code>has_bracket</code>?</p>",
        "id": 154911792,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1547207187
    },
    {
        "content": "<p>Lie algebras have a binary operation denoted <code>[x,y]</code> and it is very common to write <code>[n]</code> for <code>fin (n+1)</code>.</p>",
        "id": 154911817,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1547207251
    },
    {
        "content": "<p>But maybe this wont actually solve the conflict with list notation... I dunno</p>",
        "id": 154911878,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1547207314
    },
    {
        "content": "<p>At some point, <code>::</code> was overloaded to also mean <code>vector.cons</code>. Everybody who just wanted to use lists hated the ambiguity issues and so it was removed. I don't think overloading <code>[...]</code> (or making it a class) would fare any better.</p>",
        "id": 154913468,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1547209395
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> I have changed the Lie bracket notation to use <code>\\([</code></p>",
        "id": 154913559,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1547209560
    },
    {
        "content": "<p>So now there are 29 people who \"just want to use lists\" and 29 people who don't care about lists at all, and want to use <code>[...]</code> for other things. (Ooh, and there is 1 logician.)</p>",
        "id": 154913605,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1547209584
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> I saw it. And it doesn't look anything like a Lie bracket.</p>",
        "id": 154913610,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1547209603
    },
    {
        "content": "<p>mathematicians care about lists.</p>",
        "id": 154913611,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1547209604
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> it looks very like a Lie bracket</p>",
        "id": 154913624,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1547209627
    },
    {
        "content": "<p>Not enough to take something as important as <code>[</code></p>",
        "id": 154913632,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1547209632
    },
    {
        "content": "<p>and to render it unusable for all the things we use it for</p>",
        "id": 154913642,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1547209655
    },
    {
        "content": "<p>The <code>[]</code> list notation is used a lot in tactics in the core library, so it would be inconvenient to remove</p>",
        "id": 154919498,
        "sender_full_name": "Reid Barton",
        "timestamp": 1547216163
    },
    {
        "content": "<p>In Lean 4 it could be scoped somehow I guess</p>",
        "id": 154919524,
        "sender_full_name": "Reid Barton",
        "timestamp": 1547216173
    },
    {
        "content": "<p>Exactly, you can open just the notation you need in a file or even section</p>",
        "id": 154919933,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1547216511
    },
    {
        "content": "<p>Lean 3.4.2 has been released</p>",
        "id": 156374339,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1547824023
    },
    {
        "content": "<p>I'm still waiting on the macos binary to appear and I happened to notice this broken build: <a href=\"https://travis-ci.org/leanprover/lean/jobs/481381766\" target=\"_blank\" title=\"https://travis-ci.org/leanprover/lean/jobs/481381766\">https://travis-ci.org/leanprover/lean/jobs/481381766</a> does something need to be done for the smt2_interface ?</p>",
        "id": 156374851,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1547824419
    },
    {
        "content": "<p>Yes, I need to create <code>lean-3.4.2</code> branches in those repos</p>",
        "id": 156375127,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1547824630
    },
    {
        "content": "<p>Thanks so much for this Sebastian. As you have seen last week, there are more and more people working with Lean 3, both in mathematics and computer science, and even though we have clearly heard Leo's message that Lean 4 makes no guarantees of compatibility with Lean 3, I am sure that the growing user base and code base will ultimately teach you developers something about how Lean is used in the wild and in particular where it performs well and where it performs less well. You are an invaluable bridge between us and Leo at this time.</p>",
        "id": 156375134,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1547824638
    },
    {
        "content": "<p>How do I update <code>lean</code> using <code>elan</code> and set it to use <code>3.4.2</code> by default?</p>\n<div class=\"codehilite\"><pre><span></span>Floris@MSI MINGW64 /d/projects\n$ elan update\ninfo: syncing channel updates for &#39;stable&#39;\ninfo: latest update on stable, lean version v3.4.2\ninfo: downloading component &#39;lean&#39;\ninfo: installing component &#39;lean&#39;\ninfo: checking for self-updates\ninfo: downloading self-update\n\n  stable updated - Lean (version 3.4.2, commit cbd2b6686ddb, Release)\n\nFloris@MSI MINGW64 /d/projects/mathlib\n$ elan which lean\nC:\\Users\\Floris\\.elan\\toolchains\\3.4.1\\bin\\lean.exe\n\nFloris@MSI MINGW64 /d/projects/mathlib\n$ elan default 3.4.2\ninfo: downloading component &#39;lean&#39;\ninfo: installing component &#39;lean&#39;\ninfo: default toolchain set to &#39;3.4.2&#39;\n\n  3.4.2 installed - Lean (version 3.4.2, commit cbd2b6686ddb, Release)\n\nFloris@MSI MINGW64 /d/projects/mathlib\n$ elan which lean\nC:\\Users\\Floris\\.elan\\toolchains\\3.4.1\\bin\\lean.exe\n</pre></div>",
        "id": 156377271,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1547826240
    },
    {
        "content": "<p><code>leanpkg.toml</code> in <code>mathlib</code> is still specifying 3.4.1 so it will override the system default. The current master of mathlib also isn't compatible with 3.4.2 yet.</p>",
        "id": 156377380,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1547826318
    },
    {
        "content": "<p>But we now have two open PR switching to Lean 3.4.2</p>",
        "id": 156377450,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1547826363
    },
    {
        "content": "<p>If I understand <code>elan</code> correctly, the upgrade should be transparent, once <code>mathlib</code> has merged (one of) those PRs.</p>",
        "id": 156377538,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1547826439
    },
    {
        "content": "<p>Oh, that makes sense. So if the <code>leanpkg.toml</code> file states it uses version <code>3.4.2</code>, then that version of Lean would also be automatically downloaded when running <code>leanpkg build</code>? That's neat!</p>",
        "id": 156377707,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1547826551
    },
    {
        "content": "<p>so why aren't we upgrading to 3.4.2?</p>",
        "id": 156497448,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1548017996
    },
    {
        "content": "<p>still some build issue in the PR</p>",
        "id": 156507032,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1548034228
    },
    {
        "content": "<p>To all who are anxious to see this merged: Please make sure the PR <em>actually builds</em> before asking me to hurry up on merging it. I have other obligations with school right now, so I don't have a lot of time to devote to troubleshooting here</p>",
        "id": 156507222,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1548034629
    },
    {
        "content": "<p>Sorry, I'd thought that the problem was a Travis cache issue. I'm taking a look at it now.</p>",
        "id": 156507837,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1548035889
    },
    {
        "content": "<p>OK, I think the issue is that there's a <code>constant foo</code> in <code>tests/finish1.lean</code> and this conflicts with the <code>coinductive foo</code> in <code>tests/coinductive.lean</code>. I've renamed the latter <code>foo</code> to <code>coind_foo</code> and it works now. Pushing...</p>",
        "id": 156508099,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1548036402
    },
    {
        "content": "<p>Green now! <span class=\"emoji emoji-1f389\" title=\"tada\">:tada:</span></p>",
        "id": 156509001,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1548038107
    },
    {
        "content": "<p>merged now</p>",
        "id": 156511438,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1548042664
    },
    {
        "content": "<p>the <code>foo</code> thing is a bit weird. <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> You might know what's happening here - are all the tests executing in the same environment?</p>",
        "id": 156511449,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1548042710
    },
    {
        "content": "<p>No, the tests are not run in the same environment.  But we then we export all files <a href=\"https://github.com/leanprover/mathlib/blob/c1e594bc3dfb6c9357e94196cc3ae5d435bb07f1/.travis.yml#L40\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/blob/c1e594bc3dfb6c9357e94196cc3ae5d435bb07f1/.travis.yml#L40\">into the plain-text format for leanchecker</a>.  This ensures that there are no clashes in the top-level declaration names, and that you can actually import all of mathlib together.<br>\nThat said, now everything is in <code>src/</code>, we could easily exclude the tests here: just change that line to <code>lean --recursive --export=mathlib.txt src/</code></p>",
        "id": 156525675,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1548064894
    },
    {
        "content": "<p>done</p>",
        "id": 156526303,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1548065644
    },
    {
        "content": "<p>Oh, that explains why we couldn't reproduce this failure locally. I'm not doing this leanchecker thing</p>",
        "id": 156529907,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1548070258
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> The 3.4.1 branch woes of mathlib should now be over, right? All you need to do is to point the branch at a random recent commit which worked with 3.4.1 and then never think about it again -- future mathlib commits are not guaranteed to work with 3.4.1 from now on.</p>",
        "id": 156620335,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1548176446
    },
    {
        "content": "<p>e.g. fa2e3991e1199afa8029c5417c2f719b3a326a77 I guess</p>",
        "id": 156620383,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1548176504
    },
    {
        "content": "<p>(not that I checked...)</p>",
        "id": 156620389,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1548176514
    },
    {
        "content": "<p>The commit right before the 3.4.2 PR is this one <a href=\"https://github.com/leanprover/mathlib/commit/2c5bc214d1391659611591f4c6af222f2bea8e05\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/commit/2c5bc214d1391659611591f4c6af222f2bea8e05\">https://github.com/leanprover/mathlib/commit/2c5bc214d1391659611591f4c6af222f2bea8e05</a></p>",
        "id": 156621110,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1548177064
    },
    {
        "content": "<blockquote>\n<p>future mathlib commits are not guaranteed to work with 3.4.1 from now on.</p>\n</blockquote>\n<p>For future reference, note that a stronger statement is true. mathlib is now guaranteed not to work with Lean 3.4.1. The reason is that some stuff moved from core library to mathlib. Hence trying to compile mathlib with Lean 3.4.1 will result in errors complaining some stuff is already defined.</p>",
        "id": 156621993,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1548177775
    },
    {
        "content": "<p>Should we have a lean-3.4.1 tag for mathlib for those determined not to upgrade to Lean 3.4.2?</p>",
        "id": 156622422,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1548178193
    },
    {
        "content": "<p>There is already a branch doing that</p>",
        "id": 156622511,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1548178227
    },
    {
        "content": "<p>But I guess we could have a release tag as well</p>",
        "id": 156622523,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1548178243
    },
    {
        "content": "<p>Aah! Is this <code>logic.relator</code> or something? I just had this because I download elan finally but still had 3.4.1 hard coded in VS code.</p>",
        "id": 156622951,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1548178607
    },
    {
        "content": "<p>Hi I've just upgraded my system to Lean 3.4.2 and I'm confused about what I need to do to get mathlib working. I'm probably missing something obvs. <br>\nAt the moment the <code>logic/relator.lean</code> file is broken in mathlib because it can't find <code>left_unique</code>. As far as I can tell the <code>init/relator.lean</code> has been removed from Lean 3.4.2<br>\nI've got the latest version of master for each.<br>\nLean git commit: <code>cbd2b6686 - (6 days ago) chore(*): release version 3.4.2</code> <br>\nMathlib git commit : <code>4aacae3 - (3 hours ago) feat(data/equiv/algebra): instances for transporting algebra across an equiv (#618)</code></p>",
        "id": 156766066,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1548329986
    },
    {
        "content": "<p>FIXED</p>",
        "id": 156766191,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1548330122
    },
    {
        "content": "<p>my bad</p>",
        "id": 156766240,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1548330215
    },
    {
        "content": "<p>I had an analogous question but was too embarrassed to ask it here :-) The answer to my relator woes was \"yes lean at the command line is 3.4.2 but you forgot that you told VS Code a direct link to lean 3.4.1\"</p>",
        "id": 156771259,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1548335993
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"s2\">&quot;git fetch&quot;</span> <span class=\"bp\">≠</span> <span class=\"s2\">&quot;git pull&quot;</span> <span class=\"o\">:=</span> <span class=\"n\">dec_trivial</span>\n</pre></div>",
        "id": 156771725,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1548336525
    },
    {
        "content": "<p>I think <code>git pull = (git merge) ∘ (git fetch)</code>. It might even be defeq.</p>",
        "id": 156773702,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1548338302
    },
    {
        "content": "<p>how was this issue eventually resolved?</p>\n<p>I'm experiencing a similar problem after getting 3.4.2 then attempting to compile mathlib (<code>4aacae3</code>). <code>lean --version</code> reports <code>Lean (version 3.4.2, commit b13ac127fd83, Release)</code>, but attempting <code>leanpkg build</code>in the mathlib directory results in many error noises, beginning with <code>WARNING: Lean version mismatch: installed version is master, but package requires 3.4.2</code>. Most of the errors that follow seem to be related to <code>coinductive_predicates</code> and <code>relator</code>.</p>",
        "id": 156776595,
        "sender_full_name": "Jean Lo",
        "timestamp": 1548340751
    },
    {
        "content": "<p>The \"officially-released\" Lean 3.4.2 is at commit <code>cbd2b6686ddb</code>, so you may want to check that.</p>",
        "id": 156777247,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1548341301
    },
    {
        "content": "<p>oh, thanks.</p>\n<p>I'm building lean following the instructions on this page: <a href=\"https://github.com/leanprover/lean/blob/master/doc/make/index.md\" target=\"_blank\" title=\"https://github.com/leanprover/lean/blob/master/doc/make/index.md\">https://github.com/leanprover/lean/blob/master/doc/make/index.md</a></p>\n<p><code>git log</code> tells me in the cloned repo that my <code>HEAD</code> is on the correct commit, but after the build concludes <code>lean -v</code> still says <code>b13ac127fd83</code>. surely i'm missing something?</p>",
        "id": 156780668,
        "sender_full_name": "Jean Lo",
        "timestamp": 1548343777
    },
    {
        "content": "<p>Are you sure you're calling the right <code>lean</code>?</p>",
        "id": 156780844,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1548343909
    },
    {
        "content": "<p>Just some comments in case they help: (1) the <code>relator</code> stuff was moved from core Lean to mathlib, so if you have complaints that it's being defined twice then this is evidence that you're using an old Lean and a new mathlib. (2) Any nightly binary of Lean released since 3.4.1 displays \"version 3.4.2, ...\" with <code>lean -v</code> and in particular just because it says <code>3.4.2</code> doesn't mean that it's a version of Lean released on or after the 3.4.2 release. If a major bug was found in Lean today and fixed by Leo tomorrow as a nightly then that nightly would I think say it was 3.4.3. Aah! In fact commit b13ac1... is from last August, so that's definitely your problem.</p>",
        "id": 156782691,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1548345162
    },
    {
        "content": "<p>yes, and attempting to fix that problem has led me to recompile lean from the correct-version source, but now I'm confused about why that hasn't changed the output of <code>lean -v</code>. how might i check whether i'm 'calling the right <code>lean</code>?'</p>",
        "id": 156783871,
        "sender_full_name": "Jean Lo",
        "timestamp": 1548345970
    },
    {
        "content": "<p>try running <code>which lean</code> and seeing if the output matches the path to the lean that you built</p>",
        "id": 156784032,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1548346088
    },
    {
        "content": "<p>Jean is using emacs so there is also the issue of which Lean emacs is using. I don't know how to figure that out.</p>",
        "id": 156784072,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1548346132
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> will though.</p>",
        "id": 156784096,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1548346152
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span>  oh lore, of course! I thought <code>make</code> would have tossed the binaries into <code>/usr/bin</code> for me D:</p>",
        "id": 156784372,
        "sender_full_name": "Jean Lo",
        "timestamp": 1548346340
    },
    {
        "content": "<p>I guess <code>C-h v lean-rootdir</code> and <code>C-h v lean-executable-name</code> will tell you what lean emacs is invoking</p>",
        "id": 156784460,
        "sender_full_name": "Reid Barton",
        "timestamp": 1548346430
    },
    {
        "content": "<p>I use elan which automatically picks the version of lean specified by the project, so I don't have to configure anything in emacs</p>",
        "id": 156784578,
        "sender_full_name": "Reid Barton",
        "timestamp": 1548346507
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span>  huh, I thought I could fix that by moving the contents of <code>bin</code> in the lean folder into <code>/usr/bin</code> by hand, but I don't know what <code>lean-gdb.py</code> and <code>leanpkg.bat</code> are and hesitate to try anything silly. What would be the correct way to proceed?</p>",
        "id": 156784614,
        "sender_full_name": "Jean Lo",
        "timestamp": 1548346537
    },
    {
        "content": "<p>I don't have a built Lean source tree on hand but if you want to install into <code>/usr/bin</code> then probably <code>make install</code> will do that</p>",
        "id": 156784729,
        "sender_full_name": "Reid Barton",
        "timestamp": 1548346614
    },
    {
        "content": "<p>I think that's done it. (except i'm a goof and now i have one copy of lean in <code>/usr/bin</code> and another in <code>/usr/local/bin</code> D: )</p>\n<p>I'll go &amp; see if everything works now. thanks so much for the help</p>",
        "id": 156784989,
        "sender_full_name": "Jean Lo",
        "timestamp": 1548346854
    },
    {
        "content": "<p>Glad everything is working. I would recommend using elan in the long term, but it might be a pain to go and delete all the random copies of lean and fix paths etc. to get it working properly.</p>",
        "id": 156785151,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1548347005
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">while</span> <span class=\"o\">[</span> <span class=\"s2\">&quot;</span><span class=\"k\">$(</span>which lean<span class=\"k\">)</span><span class=\"s2\">&quot;</span> -ne ~/.elan/bin/lean <span class=\"o\">]</span><span class=\"p\">;</span> <span class=\"k\">do</span> sudo rm -f <span class=\"s2\">&quot;</span><span class=\"k\">$(</span>which lean<span class=\"k\">)</span><span class=\"s2\">&quot;</span><span class=\"p\">;</span> <span class=\"k\">done</span>  <span class=\"c1\"># please don&#39;t sue me</span>\n</pre></div>",
        "id": 156785294,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1548347152
    },
    {
        "content": "<p>I thought elan had all sorts of versions of Lean lying around, so it could use my 3.4.1 and 3.4.2 repos all at the same time?</p>",
        "id": 156785419,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1548347270
    },
    {
        "content": "<p>It does, but those are not in your PATH variable. elan actually refuses to install if you have an existing <code>lean</code> in your PATH to avoid this situation.</p>",
        "id": 156785624,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1548347403
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132889\">@Jean Lo</span>, if tail end of this conversation didn't make sense: it's advised that you don't download, compile, and manage individual versions of Lean yourself anymore. Instead, you install <a href=\"https://github.com/leanprover/mathlib/blob/master/docs/elan.md\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/blob/master/docs/elan.md\">elan</a> and have it do all the work for you.</p>",
        "id": 156807313,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1548364844
    },
    {
        "content": "<p>hmm... there are still occasional unnecessary recompiling on my windows surface pro vscode</p>",
        "id": 157137310,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1548795457
    },
    {
        "content": "<p>it is faster to close and open vscode again...</p>",
        "id": 157137399,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1548795507
    },
    {
        "content": "<p>I'm also finding it quite slow under Emacs on Mac OS, and a bit flaky (e.g., it won't finish compiling a file). It seems faster and more stable on my Linux laptop, however.</p>",
        "id": 157183097,
        "sender_full_name": "Joseph Corneli",
        "timestamp": 1548851097
    },
    {
        "content": "<p>I've seen no difference -- it used to work great, it still works great -- with VS Code and Ubuntu. I have seen some problems recently with random red areas appearing in VS Code corresponding to errors which have been fixed -- but I suspect this is a VS Code phenomenon rather than a Lean one.</p>",
        "id": 157183865,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1548851991
    },
    {
        "content": "<p>A few of my students tried the MacOS binary, all of them using VS Code.  After installing the vscode lean extension and configuring the path, when they try to \"Reload Lean server\" they get errors.  One got a segv and the other got </p>\n<p><code>Lean: Unable to start the Lean server process: Error: spawn /Users/theusernameiput/lean-3.4.2-darwin/bin/lean ENOENT The lean.executablePath may be incorrect, make sure it is a valid Lean executable</code></p>\n<p>Any hope to remedy this, or should I tell these students to try compiling from source? </p>\n<p>(I suspect they would probably give up at that point and just rely on the browser version for the remainder of the semester.  The browser version is impressively adequate for almost everything we'll do in this class, but still, it's less than ideal for homework assignments, since I want them to submit .lean files.)</p>",
        "id": 158487751,
        "sender_full_name": "William DeMeo",
        "timestamp": 1550101764
    },
    {
        "content": "<p>Are they able to run lean from the command line? </p>\n<p>Also, it's recommended now to use <code>elan</code> rather than to fool around with lean binaries by hand. Have you seen the videos that <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> made <a href=\"https://github.com/leanprover-community/mathlib/blob/master/docs/elan.md\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/docs/elan.md\">here</a>?</p>",
        "id": 158488321,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1550102364
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111050\">@William DeMeo</span>, where did you find instructions to \"configure the path\"? This is not something they should be doing unless they're building from source, and not recommended.</p>",
        "id": 158501039,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1550118585
    },
    {
        "content": "<p>I haven't compiled Lean from source for a very very long time. Elan is all you need</p>",
        "id": 158510181,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550130784
    }
]