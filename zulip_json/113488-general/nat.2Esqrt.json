[
    {
        "content": "<p>I'm looking at <a href=\"https://github.com/leanprover-community/mathlib/pull/12851\">#12851</a>. Why does this fail</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">sqrt_one</span> <span class=\"o\">:</span> <span class=\"n\">sqrt</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>We seem to be trying quite hard to make <code>sqrt</code> computable...</p>",
        "id": 276088101,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1647884305
    },
    {
        "content": "<p>It's defined using well-founded recursion, this won't reduce (reliably) in the kernel.</p>",
        "id": 276088425,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1647884490
    },
    {
        "content": "<p>Mario added a <code>norm_num</code> plugin to deal with this very recently:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.sqrt_norm_num</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">sqrt_one</span> <span class=\"o\">:</span> <span class=\"n\">nat.sqrt</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span>\n</code></pre></div>",
        "id": 276088849,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1647884704
    },
    {
        "content": "<p>Then what's the benefit of the complicated definition?</p>",
        "id": 276089560,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1647885062
    },
    {
        "content": "<p>There seem to be two notions of computability in lean:</p>\n<ol>\n<li>Can the kernel reduce a term to normal form?</li>\n<li>Can the VM compile and evaluate a definition?</li>\n</ol>\n<p>The first property is not checked nor indicated to us by Lean, and it affects us all the time since we rely on some amount of reduction when we rely on definitional equality. The second property is pervasively checked (requiring us to put <code>noncomputable</code> in the right places), but in practice we rarely evaluate code except for what supports tactics.</p>",
        "id": 276089599,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1647885085
    },
    {
        "content": "<p>Note that <code>nat.sqrt</code> is actually executed by the corresponding <code>norm_num</code> plugin.</p>",
        "id": 276089856,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1647885200
    },
    {
        "content": "<p>yeah, iirc the execution model of many of these tactics are \"use <code>#eval</code> to figure out what the answer should be, and then cook up a proof\"</p>",
        "id": 276090101,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1647885332
    },
    {
        "content": "<p>If there were multiple definitions for <code>nat.sqrt</code> with proofs that they're equal, <code>norm_num</code> could use the more efficient one</p>",
        "id": 276090857,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1647885681
    },
    {
        "content": "<p>isn't that effectively what's happening in Lean4?</p>",
        "id": 276090918,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1647885714
    }
]