[
    {
        "content": "<p>I resolved a merge conflict using the GitHub web interface, but the <code>end</code> at the end of one of the lemmas in my PR was unified with the <code>end</code> at the end of a lemma that was being merged, and so one of the two <code>end</code>s was lost.  This is a trivial issue, but I failed to spot it this time and it caused the PR to fail CI.  Is there any way to tweak things so that this unwanted unification doesn't happen, or do I just need to be a little more attentive in future?</p>",
        "id": 291549015,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1659345326
    },
    {
        "content": "<p>(Or, perhaps, would I do better to resolve merge conflicts without going through the web interface?)</p>",
        "id": 291549102,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1659345381
    },
    {
        "content": "<p>Local merge tools can often have better heuristics than the one included with git (that I assume GitHub uses).</p>",
        "id": 291549631,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659345656
    },
    {
        "content": "<p>Note also that our CI tends to pick the slower cache (close to your branch but far from master) when faced with a choice; you can often rebuild faster locally by running <code>leanproject get-cache --fallback=download-first</code> after merging, which gets a different cache to what CI uses (far from your branch but close to master)</p>",
        "id": 291549868,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659345795
    }
]