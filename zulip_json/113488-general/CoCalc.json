[
    {
        "content": "<p>Someone sent me this link: <a href=\"https://twitter.com/cocalc_com/status/990971941308727296\" target=\"_blank\" title=\"https://twitter.com/cocalc_com/status/990971941308727296\">https://twitter.com/cocalc_com/status/990971941308727296</a></p>\n<div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/cocalc_com/status/990971941308727296\" target=\"_blank\"><img class=\"twitter-avatar\" src=\"https://pbs.twimg.com/profile_images/873590191285555200/jXhBg6UR_normal.jpg\"></a><p>This is how calculating a Fibonacci number in #leanprover looks like on #CoCalc!\n\n<a href=\"https://t.co/nZ72yOR7h2\" target=\"_blank\" title=\"https://t.co/nZ72yOR7h2\">http://leanprover.github.io/</a> <a href=\"https://t.co/aGPpPomn2B\" target=\"_blank\" title=\"https://t.co/aGPpPomn2B\">https://twitter.com/cocalc_com/status/990971941308727296/photo/1</a></p><span>- CoCalc (@cocalc_com)</span><div class=\"twitter-image\"><a href=\"https://t.co/aGPpPomn2B\" target=\"_blank\" title=\"https://t.co/aGPpPomn2B\"><img src=\"https://pbs.twimg.com/media/DcCjqERX4AA3v_7.jpg:thumb\"></a></div></div></div>",
        "id": 126061868,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1525376541
    },
    {
        "content": "<p>William told me he is finishing up his new collaborative editor for CoCalc</p>",
        "id": 126062193,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525377074
    },
    {
        "content": "<p>After that, a collaborative IDE for lean is somewhere on his todo list...</p>",
        "id": 126062196,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525377096
    },
    {
        "content": "<p>I am really excited about this!</p>",
        "id": 126062200,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525377104
    },
    {
        "content": "<p>We're going to use it over the summer. They like stable versions of software by default, and when mathlib 3.4.1 comes out I'm going to ask them to install it too. They didn't seem keen to stay up to date with mathlib HEAD but mathlib current is just fine as far as I am concerned.</p>",
        "id": 126067886,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525384937
    },
    {
        "content": "<p>It solves the massive headache of getting Lean installed on a random undergraduate's laptop, which can take forever especially if the errors are all in Italian and hence harder to google...</p>",
        "id": 126067921,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525385001
    },
    {
        "content": "<p>The big question is how much faster will it be than the lean web editor.</p>",
        "id": 126067982,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525385045
    },
    {
        "content": "<p>I'm here in case anybody has any questions/comments/suggestions/mock ups for a LEAN ide mode that makes sense in cocalc/etc.</p>",
        "id": 126068881,
        "sender_full_name": "William Stein",
        "timestamp": 1525386538
    },
    {
        "content": "<p>Hiya.</p>",
        "id": 126069095,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525386938
    },
    {
        "content": "<p>William, I've been trying to figure out what a canonical isomorphism is in Lean.</p>",
        "id": 126069142,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525386975
    },
    {
        "content": "<p>I was supposed to be finishing my schemes work but I got sucked down a real rabbithole</p>",
        "id": 126069145,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525387003
    },
    {
        "content": "<p>Lean is going to know what an affine scheme is as soon as I pull my finger out.</p>",
        "id": 126069152,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525387034
    },
    {
        "content": "<p><a href=\"https://leanprover.github.io/live/latest/\" target=\"_blank\" title=\"https://leanprover.github.io/live/latest/\">https://leanprover.github.io/live/latest/</a></p>",
        "id": 126069190,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525387084
    },
    {
        "content": "<p>That's what you're up against <span class=\"user-mention\" data-user-id=\"116034\">@William Stein</span></p>",
        "id": 126069193,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525387097
    },
    {
        "content": "<p>and I'm going to go and do some schemes</p>",
        "id": 126069197,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525387104
    },
    {
        "content": "<p>I think Lean 4 will allow a bit more flexibility when it comes to making interesting IDE assists, particularly with the parser upgrades and further development of the <code>{! !}</code> \"hole\" functionality</p>",
        "id": 126073614,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1525395180
    },
    {
        "content": "<p>Lean in CoCalc seem to make a lot of progress:<br>\n<a href=\"https://github.com/sagemathinc/cocalc/search?q=lean&amp;unscoped_q=lean\" target=\"_blank\" title=\"https://github.com/sagemathinc/cocalc/search?q=lean&amp;unscoped_q=lean\">https://github.com/sagemathinc/cocalc/search?q=lean&amp;unscoped_q=lean</a></p>",
        "id": 133118447,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1535715086
    },
    {
        "content": "<p>I can use Lean in CoCalc :-)</p>",
        "id": 133121112,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1535718763
    },
    {
        "content": "<p>As of today</p>",
        "id": 133121117,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1535718772
    },
    {
        "content": "<p>Do you mean you have access to a private beta-test?</p>",
        "id": 133127412,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1535725750
    },
    {
        "content": "<p>Yes</p>",
        "id": 133127626,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1535725928
    },
    {
        "content": "<p>Shall I live stream on twitch?</p>",
        "id": 133127648,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1535725977
    },
    {
        "content": "<p>You shall!</p>",
        "id": 133127809,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1535726166
    },
    {
        "content": "<p>Yeah!</p>",
        "id": 133127821,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1535726187
    },
    {
        "content": "<p>I tried lean on cocalc earlier today and it worked out of the box.  There is no autocompletion, no syntax highlighting, and no mathlib, but it shows error messages just like in vscode.</p>",
        "id": 133127907,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1535726296
    },
    {
        "content": "<p>Do you mean public CoCalc or do you have special access?</p>",
        "id": 133127951,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1535726372
    },
    {
        "content": "<p>Public cocalc.  Just create a file with the <code>.lean</code> extension and it works.</p>",
        "id": 133128003,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1535726404
    },
    {
        "content": "<p>synchronisation is completely random :(</p>",
        "id": 133128693,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1535727285
    },
    {
        "content": "<p>I'm on an unpaid account, and the server is overloaded. I can't even create a file.</p>",
        "id": 133128738,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1535727349
    },
    {
        "content": "<p>If someone wants to add me to their Lean test project, so that I can multiplayer on their files, I'dd appreciate that.</p>",
        "id": 133128807,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1535727380
    },
    {
        "content": "<p>what is the email address associates to your account?</p>",
        "id": 133129093,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1535727715
    },
    {
        "content": "<p><code>johan@commelin.net</code> I think</p>",
        "id": 133131698,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1535730643
    },
    {
        "content": "<p>You should receive an email</p>",
        "id": 133131774,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1535730755
    },
    {
        "content": "<p>But it's hopelessly slow</p>",
        "id": 133131804,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1535730834
    },
    {
        "content": "<p>Ok, you are also on an unpaid account?</p>",
        "id": 133131847,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1535730857
    },
    {
        "content": "<p>Using Lean on CoCalc without paying doesn't seem possible</p>",
        "id": 133131854,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1535730874
    },
    {
        "content": "<p>Yes</p>",
        "id": 133131858,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1535730876
    },
    {
        "content": "<p>I should really get my uni to pay for an account.</p>",
        "id": 133131859,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1535730876
    },
    {
        "content": "<p>At the moment it is completely unusable in general, I can't even create a terminal or such.</p>",
        "id": 133131944,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1535730985
    },
    {
        "content": "<p>Hi -- I created a non-free upgraded project on CoCalc just now.  Here's a link:</p>",
        "id": 133137692,
        "sender_full_name": "William Stein",
        "timestamp": 1535737510
    },
    {
        "content": "<p><a href=\"https://cocalc.com/projects/32a71772-8761-49d1-9134-6eb7f3fca4f5/files/?session=default\" target=\"_blank\" title=\"https://cocalc.com/projects/32a71772-8761-49d1-9134-6eb7f3fca4f5/files/?session=default\">https://cocalc.com/projects/32a71772-8761-49d1-9134-6eb7f3fca4f5/files/?session=default</a></p>",
        "id": 133137695,
        "sender_full_name": "William Stein",
        "timestamp": 1535737513
    },
    {
        "content": "<p>I added everybody who commented above as collaborators to the project.</p>",
        "id": 133137704,
        "sender_full_name": "William Stein",
        "timestamp": 1535737525
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 133138832,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1535738724
    },
    {
        "content": "<p>Here's what it looks like:<a href=\"/user_uploads/3121/EiFb5k52ujGB5ObgnM0C2U5t/Screenshot-2018-08-31-at-11.14.49-AM.png\" target=\"_blank\" title=\"Screenshot-2018-08-31-at-11.14.49-AM.png\">Screenshot-2018-08-31-at-11.14.49-AM.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/EiFb5k52ujGB5ObgnM0C2U5t/Screenshot-2018-08-31-at-11.14.49-AM.png\" target=\"_blank\" title=\"Screenshot-2018-08-31-at-11.14.49-AM.png\"><img src=\"/user_uploads/3121/EiFb5k52ujGB5ObgnM0C2U5t/Screenshot-2018-08-31-at-11.14.49-AM.png\"></a></div>",
        "id": 133139481,
        "sender_full_name": "William Stein",
        "timestamp": 1535739312
    },
    {
        "content": "<p>eheh, that's the lemma I just wrote</p>",
        "id": 133139562,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1535739373
    },
    {
        "content": "<p>Yep.  By the way, anybody who is a collaborator on that project can add anybody else (in project settings).</p>",
        "id": 133139578,
        "sender_full_name": "William Stein",
        "timestamp": 1535739399
    },
    {
        "content": "<p>The message window displays only info and errors, but not the current tactic state, this is similar to one of the Lean message display mode in VScode but I can't find the other one</p>",
        "id": 133139683,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1535739496
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116034\">@William Stein</span> You need to request the goal state separately.  It is not sent as part of the error messages. <a href=\"https://github.com/leanprover/lean-client-js/blob/83f190d044502d1cd39f320ef15da5357547d539/lean-client-js-core/src/commands.ts#L87-L114\" target=\"_blank\" title=\"https://github.com/leanprover/lean-client-js/blob/83f190d044502d1cd39f320ef15da5357547d539/lean-client-js-core/src/commands.ts#L87-L114\">https://github.com/leanprover/lean-client-js/blob/83f190d044502d1cd39f320ef15da5357547d539/lean-client-js-core/src/commands.ts#L87-L114</a></p>",
        "id": 133139817,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1535739636
    },
    {
        "content": "<p>Gabriel -- thanks.  I didn't realize that.  I'll add that to the todo list.</p>",
        "id": 133139850,
        "sender_full_name": "William Stein",
        "timestamp": 1535739678
    },
    {
        "content": "<p>Is there something like prettier or yapf (inspired by Gofmt) for lean code?  We are pushing out \"sort of\" canonical format support  like that as much as possible all over in cocalc...</p>",
        "id": 133140202,
        "sender_full_name": "William Stein",
        "timestamp": 1535739994
    },
    {
        "content": "<p>That's great, I can prove random stuff that we already have</p>",
        "id": 133140486,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1535740289
    },
    {
        "content": "<p>Now it's time for dinner, but many thanks!</p>",
        "id": 133140503,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1535740304
    },
    {
        "content": "<p>Thanks so much for the work you've done on this William!</p>",
        "id": 133142574,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1535742567
    },
    {
        "content": "<p>This is awesome! Thank you very much!</p>",
        "id": 133145323,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1535745710
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116034\">@William Stein</span> The prettier will likely be added in the next version of Lean (Lean 4).</p>",
        "id": 133145374,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1535745736
    },
    {
        "content": "<p>See also: <a href=\"#narrow/stream/113488-general/subject/VScode.20extension/near/133129165\" title=\"#narrow/stream/113488-general/subject/VScode.20extension/near/133129165\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/subject/VScode.20extension/near/133129165</a></p>",
        "id": 133145388,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1535745771
    },
    {
        "content": "<p>Could someone add me as a collaborator on that project?</p>",
        "id": 133157550,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1535763926
    },
    {
        "content": "<p>I hope I just did that</p>",
        "id": 133168777,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1535789680
    },
    {
        "content": "<p>And I'm happy to see that everybody seems to haved managed to travel back from Orsay!</p>",
        "id": 133168785,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1535789716
    },
    {
        "content": "<p>I wrote a few lines of code in a test document and then sent William some comments (in the project chat) about which points of the workflow were currently harder in CoCalc than in VS Code. It seemed much quicker than the Lean Web Editor -- it was slower than local VS Code of course, but certainly fast enough to be usable (especially by beginners). The main things we're missing are: (1) mathlib (2) view of goal in tactic mode and (3) tab completion. Also syntax highlighting but for me that wasn't really a deal breaker.</p>",
        "id": 133169787,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1535792152
    },
    {
        "content": "<p>I just improved the syntax highlighting a bit, so it's maybe usable now (it wasn't before).  I haven't done anything else yet. <a href=\"/user_uploads/3121/h1N1zVVEc2TBatnzHjnRa8Ut/Screenshot-2018-09-04-at-9.32.57-PM.png\" target=\"_blank\" title=\"Screenshot-2018-09-04-at-9.32.57-PM.png\">Screenshot-2018-09-04-at-9.32.57-PM.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/h1N1zVVEc2TBatnzHjnRa8Ut/Screenshot-2018-09-04-at-9.32.57-PM.png\" target=\"_blank\" title=\"Screenshot-2018-09-04-at-9.32.57-PM.png\"><img src=\"/user_uploads/3121/h1N1zVVEc2TBatnzHjnRa8Ut/Screenshot-2018-09-04-at-9.32.57-PM.png\"></a></div>",
        "id": 133354374,
        "sender_full_name": "William Stein",
        "timestamp": 1536122086
    },
    {
        "content": "<p>Hooray! That's really nice.</p>",
        "id": 133354456,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536122263
    },
    {
        "content": "<p>This looks really promising!</p>",
        "id": 133354654,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1536122634
    },
    {
        "content": "<p>Is it right that there isn't a \"goal display\" mode yet? Or am I just missing it. I know for people who work in term mode all the time it's not critical, but for beginners and mathematicians who use tactic mode all the time it is very helpful.</p>",
        "id": 133354701,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1536122685
    },
    {
        "content": "<p>It is on the todo list.</p>",
        "id": 133354708,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536122711
    },
    {
        "content": "<p>The big jobs which remain, I guess, are: (1) access to mathlib [e.g. reading <code>LEAN_PATH</code> or <code>leanpkg.path</code> I guess] (2) displaying goals in tactic mode (3) tab completion (4) hover over function name -&gt; mini window with definition / docstring; I guess that of these, (1) and (2) are the ones which I really need for my teaching (I'd also need an extension of (1), which is \"read my library too\").</p>",
        "id": 133360335,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536133139
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128565\">@Harald Schilly</span> I downloaded and I believe compiled mathlib about two days ago on a cocalc project if this helps.</p>",
        "id": 133457209,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536255408
    },
    {
        "content": "<p>There's a project called LEAN that I have access to on CoCalc (as do several of us) and in <code>_target/deps/mathlib</code> is a only-a-few-days-old mathlib, compiled using CoCalc's servers.</p>",
        "id": 133457344,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536255581
    },
    {
        "content": "<p>yes, I'm in that project. so, the goal I think is to compile a recent version of mathlib globally (currently a path like /ext/lean/.../lean/mathlib)  and make it picked up by default by lean. I don't know that part about picking it up automatically. That's all.</p>",
        "id": 133460233,
        "sender_full_name": "Harald Schilly",
        "timestamp": 1536258327
    },
    {
        "content": "<p>The lean path is specified in <code>leanpkg.path</code> in the current project folder</p>",
        "id": 133460300,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536258382
    },
    {
        "content": "<p>You can put things like <code>../lean/mathlib</code> in it</p>",
        "id": 133460305,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536258399
    },
    {
        "content": "<p>That will bypass <code>leanpkg</code> somewhat, though - commands like <code>leanpkg configure</code> will clobber the file</p>",
        "id": 133460387,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536258496
    },
    {
        "content": "<p>To make it stick you could install mathlib in <code>~/.leanpkg</code> (I believe this is where <code>leanpkg install</code> puts stuff), and then add a dependency to mathlib in the <code>leanpkg.toml</code> file</p>",
        "id": 133460429,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536258588
    },
    {
        "content": "<p>This is the way most users do it, I think</p>",
        "id": 133460449,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536258602
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> packages in <code>~/.leanpkg</code> are only used by stand-alone files not contained in packages</p>",
        "id": 133469659,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1536267729
    },
    {
        "content": "<p>how does this work?</p>",
        "id": 133738672,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536678169
    },
    {
        "content": "<p>What do you mean?</p>\n<p>William wrote some code and now you can use Lean at CoCalc, but there are still some things missing (like displaying goal in tactic mode, and autocompletion, last time I looked). My plan is to offer it to the 1st years.</p>",
        "id": 133743695,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536682923
    },
    {
        "content": "<p>well I just went to it and I can't use anything</p>",
        "id": 133743897,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536683175
    },
    {
        "content": "<p>can you be more precise? I go to it and I can use Lean</p>",
        "id": 133743948,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536683268
    },
    {
        "content": "<p>apparently only a few people have access</p>",
        "id": 133744258,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536683618
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> You have to create a <code>.lean</code> file. And supposedly if you click on it, the Lean editor should open.</p>",
        "id": 133744526,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536683894
    },
    {
        "content": "<p>But it might not be usable at all on a free account.</p>",
        "id": 133744531,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536683907
    },
    {
        "content": "<blockquote>\n<p>This is the way most users do it, I think</p>\n</blockquote>\n<p>Hi again. Just to clarify what my goal in this \"CoCalc\" stream (is this the term?) is: the situation is a course, where many who are now to lean want to follow examples and experiment around. The underlying infrastructure is a linux-based multi-user environment. This means, there is a common read-only directory where we (administrators of the online service) can install lean and everyone accesses it from there. Additionally, it would be good to have mathlib and maybe another library available globally. The goal is to give everyone a good \"out of the box\" experience, such that these libraries work without much overhead. In Python, there are global \"site\" directories, but with lean this seems to be different -- or well -- I haven't understood it yet. So, my understanding here is, every student should setup their own lean-specific directory and inside of it is a <code>leanpkg.path</code> file. What's exactly the content? Or should it rather be a <code>leanpkg.toml</code> file? Sorry, I'm a complete lean novice <span class=\"emoji emoji-1f644\" title=\"rolling eyes\">:rolling_eyes:</span></p>",
        "id": 133755059,
        "sender_full_name": "Harald Schilly",
        "timestamp": 1536694602
    },
    {
        "content": "<p><code>leanpkg.toml</code> is for the <code>leanpkg</code> package manager. If the package installed correctly initially, it won't need to be managed. <code>leanpkg.path</code> is the file which, conventionally (on a single user install) the IDE reads so it knows where the paths are which will be looked in when the IDE runs into a line of the form <code>import data.equiv.basic</code> -- it will look through the entries in <code>leanpkg.path</code> until it finds a line corresponding to a directory containing <code>data/equiv/basic.lean</code>. So neither of them are actually essential for the set-up to work.</p>",
        "id": 133755534,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536695105
    },
    {
        "content": "<p>An example of how I use <code>leanpkg.toml</code> is that if I have a project which has <code>mathlib</code> as a dependency, and if <code>mathlib</code> upgrades, I can upgrade my local version of <code>mathlib</code> using the <code>leanpkg upgrade</code> command. The students will not need to be upgrading any particular packages (and indeed they'd need internet access for this to work).</p>",
        "id": 133755620,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536695180
    },
    {
        "content": "<p>I upgrade mathlib because it changes a lot right now (many commits per week) and some of them are new functions or theorems which I need. But my students won't need anything so bleeding-edge.</p>",
        "id": 133755661,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536695226
    },
    {
        "content": "<p>It's not just advanced mathematics that's getting PRed, some of it is things like <code>int.cast_pow</code>, which I think they might need. Over the summer I added quite a few trivial little lemmas like this when people needed them.</p>",
        "id": 133756967,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1536696420
    },
    {
        "content": "<p>yes but one of the points of the summer project was to make sure we'd have everything we need in mathlib by October. What's the situation with <code>cos</code>  by the way? ;-)</p>",
        "id": 133757499,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536696919
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128565\">@Harald Schilly</span> You seem to be in a European timezone. Is that right? Where exactly are you based? Because it might be feasible to meet up with one of the people who really know how this stuff works...</p>",
        "id": 133774696,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536721321
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128565\">@Harald Schilly</span> is in Vienna, Austria.</p>",
        "id": 133838237,
        "sender_full_name": "William Stein",
        "timestamp": 1536780138
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/FI84qpkbGYr20ZS3gkj0iap-/Screenshot-2018-09-12-at-12.20.10-PM.png\" target=\"_blank\" title=\"Screenshot-2018-09-12-at-12.20.10-PM.png\">Screenshot-2018-09-12-at-12.20.10-PM.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/FI84qpkbGYr20ZS3gkj0iap-/Screenshot-2018-09-12-at-12.20.10-PM.png\" target=\"_blank\" title=\"Screenshot-2018-09-12-at-12.20.10-PM.png\"><img src=\"/user_uploads/3121/FI84qpkbGYr20ZS3gkj0iap-/Screenshot-2018-09-12-at-12.20.10-PM.png\"></a></div>",
        "id": 133838250,
        "sender_full_name": "William Stein",
        "timestamp": 1536780166
    },
    {
        "content": "<p>I implemented \"tab completion\".  You have to actually press the tab key to get completions.  It first shows once that can be determined in the browser (so standard keywords, functions, etc.,), then it shows the results that come back from the lean server.</p>",
        "id": 133838282,
        "sender_full_name": "William Stein",
        "timestamp": 1536780215
    },
    {
        "content": "<p>Can the keywords show with a different icon or color than the constants?</p>",
        "id": 133838342,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536780261
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> I invited you to <a href=\"https://cocalc.com/projects/32a71772-8761-49d1-9134-6eb7f3fca4f5/files/?session=default\" target=\"_blank\" title=\"https://cocalc.com/projects/32a71772-8761-49d1-9134-6eb7f3fca4f5/files/?session=default\">the lean cocalc project</a>, in case you want to try it.</p>",
        "id": 133838347,
        "sender_full_name": "William Stein",
        "timestamp": 1536780266
    },
    {
        "content": "<p>lol how do you know who I am</p>",
        "id": 133838357,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536780286
    },
    {
        "content": "<p>also, hopefully once results come back from lean you can put the types of the constants in that list as well, that's pretty important</p>",
        "id": 133838360,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536780297
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I'll add that to the todo list, along with showing type information, for later.   I'm only going to do stuff now that is absolutely critical for Kevin's course.   I think some sort of lean path configuration should be next on my list.</p>",
        "id": 133838380,
        "sender_full_name": "William Stein",
        "timestamp": 1536780320
    },
    {
        "content": "<p>Kenny you complained in this thread you didn't have access</p>",
        "id": 133838386,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536780331
    },
    {
        "content": "<p>that's fine, I just wanted you to know what would be helpful</p>",
        "id": 133838391,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536780344
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention\" data-user-id=\"128565\">@Harald Schilly</span> You seem to be in a European timezone.</p>\n</blockquote>\n<p>yes, vienna as william said. do you know if there is someone active with lean at the university of vienna? that could be quite interesting.</p>",
        "id": 133838393,
        "sender_full_name": "Harald Schilly",
        "timestamp": 1536780349
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I just added you to the project too.</p>",
        "id": 133838435,
        "sender_full_name": "William Stein",
        "timestamp": 1536780366
    },
    {
        "content": "<blockquote>\n<p>Kenny you complained in this thread you didn't have access</p>\n</blockquote>\n<p>yes I did, but I didn't say what my account is</p>",
        "id": 133838444,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536780375
    },
    {
        "content": "<p>somehow WS managed to find my account</p>",
        "id": 133838450,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536780381
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>  -- yes, I've been comparing with VS code...</p>",
        "id": 133838457,
        "sender_full_name": "William Stein",
        "timestamp": 1536780390
    },
    {
        "content": "<p>Isn't <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> in Vienna?</p>",
        "id": 133838467,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536780406
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> -- I just typed your name into the collaborator search and it was the only result.</p>",
        "id": 133838469,
        "sender_full_name": "William Stein",
        "timestamp": 1536780412
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> sounds like a name that could be from over here!</p>",
        "id": 133838494,
        "sender_full_name": "Harald Schilly",
        "timestamp": 1536780436
    },
    {
        "content": "<p>fair enough</p>",
        "id": 133838497,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536780447
    },
    {
        "content": "<p><a href=\"https://gebner.org/\" target=\"_blank\" title=\"https://gebner.org/\">https://gebner.org/</a></p>",
        "id": 133838502,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536780458
    },
    {
        "content": "<p>nice</p>",
        "id": 133838565,
        "sender_full_name": "Harald Schilly",
        "timestamp": 1536780510
    },
    {
        "content": "<p>I think he is currently on vacations</p>",
        "id": 133838572,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536780518
    },
    {
        "content": "<p>And, very conveniently, he is the maintainer of the VScode Lean extension</p>",
        "id": 133838653,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536780612
    },
    {
        "content": "<p>I'm going to work on displaying \"the current tactic state\" next.</p>",
        "id": 133838666,
        "sender_full_name": "William Stein",
        "timestamp": 1536780650
    },
    {
        "content": "<p>Kevin, for your course, as long as I make it possible to easily set LEAN_PATH, or even just make it set to some default (e.g., /home/user/lean), then you could just rsync out /home/user/lean to all student projects.  You would just update it in your project whenever you want, test it, then click a button to push it out to students whenever you want.</p>",
        "id": 133838751,
        "sender_full_name": "William Stein",
        "timestamp": 1536780761
    },
    {
        "content": "<p>I'll set LEAN_PATH to ~/lean right now, since it's a fairly easy change to make, anyways.</p>",
        "id": 133838758,
        "sender_full_name": "William Stein",
        "timestamp": 1536780782
    },
    {
        "content": "<p>Or is that not nearly enough, because it'll have to be customizable with lots of colons to detect many directories?</p>",
        "id": 133839081,
        "sender_full_name": "William Stein",
        "timestamp": 1536781184
    },
    {
        "content": "<p>I guess we either need several directories, or we do the horrible thing of putting them all in the same directory giving a huge mess of core lean and mathlib and my stuff all mixed together</p>",
        "id": 133839165,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536781246
    },
    {
        "content": "<p>Yes, it is expected that there is a separate entry for each package in LEAN_PATH. I suppose for Kevin's students it should be sufficient to include <code>.</code>, the global mathlib path, and Lean's <code>library</code> folder in there</p>",
        "id": 133839235,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1536781330
    },
    {
        "content": "<p>Note that this effectively disables <code>leanpkg</code> (i.e. importing custom dependencies, as well as importing files relative to the package root)</p>",
        "id": 133839340,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1536781453
    },
    {
        "content": "<p>I could have it just read ~/leanpkg.path if it exists.  My only worry is that students would mess it up; also there is no easy way to push out a top level file to students right now...</p>",
        "id": 133839380,
        "sender_full_name": "William Stein",
        "timestamp": 1536781511
    },
    {
        "content": "<p>OK, for now how about:  <code>LEAN_PATH=.:/ext/lean/mathlib:[whatever lean's library folder is??]</code></p>",
        "id": 133839487,
        "sender_full_name": "William Stein",
        "timestamp": 1536781632
    },
    {
        "content": "<p>But what is lean's library folder?</p>",
        "id": 133839492,
        "sender_full_name": "William Stein",
        "timestamp": 1536781638
    },
    {
        "content": "<p>How do I determine that?</p>",
        "id": 133839496,
        "sender_full_name": "William Stein",
        "timestamp": 1536781643
    },
    {
        "content": "<p>it is <code>lean/library</code></p>",
        "id": 133839586,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536781753
    },
    {
        "content": "<p>It's OK that <code>lean/library</code> is not an absolute path?</p>",
        "id": 133839675,
        "sender_full_name": "William Stein",
        "timestamp": 1536781827
    },
    {
        "content": "<p>Also, what is a very simple \"hello word\" style test of LEAN_PATH?</p>",
        "id": 133839716,
        "sender_full_name": "William Stein",
        "timestamp": 1536781921
    },
    {
        "content": "<p>Here's what I'm currently doing:</p>",
        "id": 133839767,
        "sender_full_name": "William Stein",
        "timestamp": 1536781948
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>\n</pre></div>",
        "id": 133839768,
        "sender_full_name": "William Stein",
        "timestamp": 1536781950
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>    process.env.LEAN_PATH = `${process.env.HOME}:${process.env.HOME}/lean:/ext/lean/mathlib:lean/library`;\n    this._server = new lean_client.Server(\n      new lean_client.ProcessTransport(&quot;lean&quot;, &quot;.&quot;, [])\n    );\n</pre></div>",
        "id": 133839771,
        "sender_full_name": "William Stein",
        "timestamp": 1536781958
    },
    {
        "content": "<p><code>import data.finset</code> is probably a reasonable test.</p>",
        "id": 133839842,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1536782059
    },
    {
        "content": "<p>With the above LEAN_PATH, I get this error from <code>#print \"hello\"</code>:</p>\n<div class=\"codehilite\"><pre><span></span>file &#39;init&#39; not found in the LEAN_PATH\n</pre></div>",
        "id": 133839878,
        "sender_full_name": "William Stein",
        "timestamp": 1536782119
    },
    {
        "content": "<p><code>lean/library</code> should be an absolute path; no magic there</p>",
        "id": 133839941,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1536782170
    },
    {
        "content": "<p>I.e. append <code>/library</code> to where you store Lean</p>",
        "id": 133839978,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1536782225
    },
    {
        "content": "<p>I don't know where we store lean.  Also, it can very based on if the user is using <a href=\"http://cocalc.com\" target=\"_blank\" title=\"http://cocalc.com\">cocalc.com</a> or cocalc-docker.</p>",
        "id": 133840023,
        "sender_full_name": "William Stein",
        "timestamp": 1536782279
    },
    {
        "content": "<p>I see. You can ask Lean: <code>lean --path</code></p>",
        "id": 133840110,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1536782322
    },
    {
        "content": "<p>ok, that works perfectly.</p>",
        "id": 133840241,
        "sender_full_name": "William Stein",
        "timestamp": 1536782424
    },
    {
        "content": "<p>What does this mean exactly - this is just the default already with me changing nothing?</p>\n<div class=\"codehilite\"><pre><span></span>~/cocalc/src$ lean --path\n{\n  &quot;is_user_leanpkg_path&quot;: true,\n  &quot;leanpkg_path_file&quot;: &quot;/home/user/.lean/leanpkg.path&quot;,\n  &quot;path&quot;: [\n    &quot;/ext/lean/lean-3.4.1-linux/bin/../library&quot;,\n    &quot;/ext/lean/lean-3.4.1-linux/bin/../lib/lean/library&quot;,\n    &quot;/home/user/.lean/_target/deps/mathlib/.&quot;,\n    &quot;/home/user/.lean/./.&quot;\n  ]\n}\n</pre></div>",
        "id": 133841207,
        "sender_full_name": "William Stein",
        "timestamp": 1536783561
    },
    {
        "content": "<p>E.g., does it mean users can already customize their path by editing the file <code>/home/user/.lean/leanpkg.path</code>, so that's already done?</p>",
        "id": 133841864,
        "sender_full_name": "William Stein",
        "timestamp": 1536784205
    },
    {
        "content": "<p>I think they're not supposed to touch that file, which is auto-generated by the package manager</p>",
        "id": 133841903,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536784284
    },
    {
        "content": "<p>The package manager looks at leanpkg.toml and sees the dependencies of the project.</p>",
        "id": 133841916,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536784313
    },
    {
        "content": "<p>It looks to me like mathlib is a dependency for that project because dependency projects are downloaded to _target/deps</p>",
        "id": 133841974,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536784363
    },
    {
        "content": "<p>How can I try importing something from mathlib to see what happens?</p>",
        "id": 133841992,
        "sender_full_name": "William Stein",
        "timestamp": 1536784388
    },
    {
        "content": "<p>Make a file blah.lean with the line <code>import data int.basic</code> and then compile it</p>",
        "id": 133842068,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536784470
    },
    {
        "content": "<p>If that mathlib directory actually exists and has a mathlib in then it might work</p>",
        "id": 133842071,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536784490
    },
    {
        "content": "<p>I'm afraid I'm afk right now though</p>",
        "id": 133842090,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536784514
    },
    {
        "content": "<p>He means <code>import data.int.basic</code> he missed a point</p>",
        "id": 133842510,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536784942
    },
    {
        "content": "<p>Cool -- it looks like it just works once somebody has installed mathlib already in the standard way <strong>and</strong> restarted the project in project settings.  Cool.</p>",
        "id": 133842638,
        "sender_full_name": "William Stein",
        "timestamp": 1536785099
    },
    {
        "content": "<p>I thought the goal was to not have mathlib installed in the standard (user-specific) way but precompiled in a global path?</p>",
        "id": 133844576,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1536786975
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span>  -- maybe. I'm still confused.    It just happens to be the case that mathlib is installed for the user for this <a href=\"https://cocalc.com/projects/32a71772-8761-49d1-9134-6eb7f3fca4f5/files/blah.lean?session=default\" target=\"_blank\" title=\"https://cocalc.com/projects/32a71772-8761-49d1-9134-6eb7f3fca4f5/files/blah.lean?session=default\">test project</a>, and it's important to also support that case too,  I guess.   For example, Kevin's class could just push out a custom ~/.lean to the students and it might just work... then he can update it every day if he wants.</p>",
        "id": 133844855,
        "sender_full_name": "William Stein",
        "timestamp": 1536787213
    },
    {
        "content": "<p>Yes, if Kevin can just push his ~/.lean with prebuilt mathlib to all students, it should just work for them. At least as long as they use stand-alone .lean files; if they create their own Lean packages, the ~/.lean packages will not be visible anymore until they add them back as dependencies to the new package</p>",
        "id": 133845269,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1536787585
    },
    {
        "content": "<p>Oh my gosh this path stuff is driving me crazy.   I'm deleting all the code I've written related to it and just going to ensure lean starts in $HOME.</p>",
        "id": 133847058,
        "sender_full_name": "William Stein",
        "timestamp": 1536789490
    },
    {
        "content": "<p>Look -- if all users on a system are supposed to have access to an extra package, namely mathlib, which is installed systemwide, what is the admin supposed to do in order to install that package?</p>\n<p>The answer in python is to become root, set umask properly, then do <code>pip install packagename</code>.  What is the answer for LEAN?</p>",
        "id": 133847112,
        "sender_full_name": "William Stein",
        "timestamp": 1536789552
    },
    {
        "content": "<p>You have to include that directory in either LEAN_PATH or <code>~/.lean/leanpkg.path</code> (or tell users to create a new package and add it as a dependency there). leanpkg is directly inspired by Rust's package manager, which like all modern package managers is focused on reproducible build environments and does not really have a notation of global packages.</p>",
        "id": 133847341,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1536789792
    },
    {
        "content": "<blockquote>\n<p>does not really have a notation of global packages.</p>\n</blockquote>\n<p>OK, thanks for the clarification. I'll take as an axiom then that \"lean does not have global packages\", and  won't do anything further for now in that direction.  I'll let Kevin have his students  install mathlib themselves into their projects, or have him push out an install to all student projects.   I'm moving on to showing tactic state.</p>",
        "id": 133847750,
        "sender_full_name": "William Stein",
        "timestamp": 1536790319
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128565\">@Harald Schilly</span> My office is at the Freihaus of the TU Wien.  Feel free to stop by (but make sure I'm there first).  I'll be back from vacation in the second week of October.</p>",
        "id": 133852532,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1536796516
    },
    {
        "content": "<p>LEAN in CoCalc now has a new \"Info at Cursor\" panel, which shows the tactic at the cursor, and also other info about what's at the cursor.</p>\n<p><a href=\"/user_uploads/3121/s8c1bvzhPXioauanpdLs72Hn/Screenshot-2018-09-12-at-8.31.00-PM.png\" target=\"_blank\" title=\"Screenshot-2018-09-12-at-8.31.00-PM.png\">Screenshot-2018-09-12-at-8.31.00-PM.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/s8c1bvzhPXioauanpdLs72Hn/Screenshot-2018-09-12-at-8.31.00-PM.png\" target=\"_blank\" title=\"Screenshot-2018-09-12-at-8.31.00-PM.png\"><img src=\"/user_uploads/3121/s8c1bvzhPXioauanpdLs72Hn/Screenshot-2018-09-12-at-8.31.00-PM.png\"></a></div>",
        "id": 133861348,
        "sender_full_name": "William Stein",
        "timestamp": 1536812288
    },
    {
        "content": "<p>I also made numerous small changes so the UI does not get slowed down by trying to render too much.     I might have introduced too much \"debouncing\" here though.</p>\n<p>So, Kevin, I think this is the <em>absolute bare minimum</em> of functionality needed for your course.   You'll have to build all the library stuff, then push it out to the student projects, since LEAN has no notion of global packages, as discussed above.   I think if you install packages, etc., etc., then restart a project in cocalc (project settings --&gt; restart project), then LEAN will run as if it is being run from $HOME, so it'll pick up those packages.</p>\n<p>The other problem is that sometimes one has to close and open a file if it isn't syncing.  This is on my immediate todo list.</p>",
        "id": 133861481,
        "sender_full_name": "William Stein",
        "timestamp": 1536812537
    },
    {
        "content": "<p>I think there is a bug in the printing of the tactic info - it says <code>expr</code> when it should say <code>exact expr</code></p>",
        "id": 133861794,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536813140
    },
    {
        "content": "<blockquote>\n<p>It's OK that <code>lean/library</code> is not an absolute path?</p>\n</blockquote>\n<p>my understanding is that this is in the lib subdirectory, i.e. <code>/ext/lean/lean/lib/lean/library/</code></p>\n<p>ok ... but I see this is already somewhat resolved. looks like it is possible to have mathlib globally, but there is no common way to make it available by default. it's sort of opt-in...</p>",
        "id": 133882189,
        "sender_full_name": "Harald Schilly",
        "timestamp": 1536843470
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> maybe you can use cocalc now instead of twitch</p>",
        "id": 133893040,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536852322
    },
    {
        "content": "<p>maybe we should all join a discord group</p>",
        "id": 133893046,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536852331
    },
    {
        "content": "<p>is that a good idea?</p>",
        "id": 133893048,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536852336
    },
    {
        "content": "<p>So for those who haven't experimented recently, I've just been playing with a lean file at CoCalc with Kenny -- true multiplayer Lean! There are now two windows you can have for messages corresponding to the two VS Code windows -- one which reports all output and one which prints the goal when you're in a tactic proof. Underscores work! Tactic proofs are now fine.</p>",
        "id": 133893121,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536852371
    },
    {
        "content": "<p>The most obvious thing for me, when writing code, that is better in VS Code than in CoCalc, is that VS Code does cleverer auto-completion -- it chooses more wisely, and for the highlighted choice it displays the type of the term and also the docstring if any. Here are some examples:</p>",
        "id": 133895129,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536854350
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/KwP_QDrxpJqETmifK98cNIxP/vscode.png\" target=\"_blank\" title=\"vscode.png\">vscode.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/KwP_QDrxpJqETmifK98cNIxP/vscode.png\" target=\"_blank\" title=\"vscode.png\"><img src=\"/user_uploads/3121/KwP_QDrxpJqETmifK98cNIxP/vscode.png\"></a></div><p><a href=\"/user_uploads/3121/6ms9XafbzF_HTqZ6OzF2atqO/cocalc1.png\" target=\"_blank\" title=\"cocalc1.png\">cocalc1.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/6ms9XafbzF_HTqZ6OzF2atqO/cocalc1.png\" target=\"_blank\" title=\"cocalc1.png\"><img src=\"/user_uploads/3121/6ms9XafbzF_HTqZ6OzF2atqO/cocalc1.png\"></a></div><p><a href=\"/user_uploads/3121/vWkjNwoZSPSm9rk4vcc2wpDw/cocalc2.png\" target=\"_blank\" title=\"cocalc2.png\">cocalc2.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/vWkjNwoZSPSm9rk4vcc2wpDw/cocalc2.png\" target=\"_blank\" title=\"cocalc2.png\"><img src=\"/user_uploads/3121/vWkjNwoZSPSm9rk4vcc2wpDw/cocalc2.png\"></a></div>",
        "id": 133895220,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536854423
    },
    {
        "content": "<p>For VS Code we see filter.map + type + docstring. For cocalc the guessing is less good (VS Code correctly guesses I want <code>filter.ma&lt;something&gt;</code>) and I don't see the types of the possibilities, which is really important for when you're using functions which are unfamiliar to you.</p>\n<p>But this is a very mild thing. In the last week there has been huge progress!</p>",
        "id": 133895502,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536854668
    },
    {
        "content": "<p>Yes, the progress looks impressive</p>",
        "id": 133895512,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536854696
    },
    {
        "content": "<blockquote>\n<p>But this is a very mild thing. </p>\n</blockquote>\n<p>CoCalc has the exact same completion info available, but all I did with it was sort in alphabetical order and display the names.   I don't know what order I should sort in (or should I just NOT sort and leave things in whatever order the LEAN server outputs)?  Displaying the type, etc., info is probably easy now that the hard part is done (which is getting completions to display at all).  The CodeMirror show-hint plugin API is very rich regarding showing more than just a string in a completions box.  It sounds like you're pretty happy with what vscode shows, so I should just look in the code to see what it does with what comes back from the LEAN server. <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> ?</p>",
        "id": 133896096,
        "sender_full_name": "William Stein",
        "timestamp": 1536855296
    },
    {
        "content": "<blockquote>\n<p>I think there is a bug in the printing of the tactic info - it says expr when it should say exact expr</p>\n</blockquote>\n<p>That's weird since I'm just printing what the lean server returns with no processing.</p>",
        "id": 133896123,
        "sender_full_name": "William Stein",
        "timestamp": 1536855327
    },
    {
        "content": "<p>Do you know what word you are completing when you ask for completions?</p>",
        "id": 133896147,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536855361
    },
    {
        "content": "<p>I think VSCode prioritizes maximum subsequences, and initial segments relative to the query</p>",
        "id": 133896225,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536855433
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> yes, you know precisely what the \"CodeMirror token\" is, where the cursor is, etc.<br>\nCan somebody point me at the relevant code in the vscode mode? -- maybe I can just copy it over and use it with minimal change.</p>",
        "id": 133896293,
        "sender_full_name": "William Stein",
        "timestamp": 1536855519
    },
    {
        "content": "<p>I think this is default vscode behavior</p>",
        "id": 133896307,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536855546
    },
    {
        "content": "<p>OK, so I guess the same question, but for vscode's source code... of course, I can try to hunt it down.</p>",
        "id": 133896382,
        "sender_full_name": "William Stein",
        "timestamp": 1536855628
    },
    {
        "content": "<p>Could someone (<span class=\"user-mention\" data-user-id=\"116034\">@William Stein</span>?) add me to the Lean test project? Same email address on CoCalc as here</p>",
        "id": 133896405,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536855681
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span>  -- done.</p>",
        "id": 133896465,
        "sender_full_name": "William Stein",
        "timestamp": 1536855746
    },
    {
        "content": "<p>And as always, anybody on the project can add anybody else by clicking \"Settings\" in the project, then typing a name or email address at \"Add New Collaborators\".</p>",
        "id": 133896473,
        "sender_full_name": "William Stein",
        "timestamp": 1536855773
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> once in, click on <a href=\"https://cocalc.com/projects/32a71772-8761-49d1-9134-6eb7f3fca4f5/log?session=default\" target=\"_blank\" title=\"https://cocalc.com/projects/32a71772-8761-49d1-9134-6eb7f3fca4f5/log?session=default\">Log</a> to see which files people opened when.</p>",
        "id": 133896658,
        "sender_full_name": "William Stein",
        "timestamp": 1536855945
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> I'll work on adding the extra type, etc., info to completions right now -- it seems like it's really useful for people (remember, I'm still sort of clueless about LEAN itself!)</p>",
        "id": 133896855,
        "sender_full_name": "William Stein",
        "timestamp": 1536856142
    },
    {
        "content": "<p>Yes -- sorry. Here's how it works. As I'm sure you're aware, in \"raw\" mode, Lean wants to know proofs of every single little thing you do, so e.g. if you have <code>a=b+c</code> and you want to deduce <code>c=a-b</code> (and you are not intending on using Lean's automation to try and prove this automatically) then you are going to have to find the name of this theorem, or a related theorem which will get you half way there or whatever. Now there's an elaborate naming convention, so you tend to start guessing that this lemma is called something like \"sub_of_add...something\" or \"sub_iff_add...\" or maybe if these things are integers you might try \"int.add_of_...\" and you start playing around with auto-completion, trying to find the exact lemma you want. And in fact the moment I type <code>sub_of</code> Lean starts suggesting possible lemmas (here the type will be the statement of the lemma) and you can use up and down arrow to look through them to find the exact one you want (or one which is near enough, e.g. you have to turn <code>a=b</code> into <code>b=a</code> and you remember that this is called <code>eq.symm</code> etc).</p>\n<p><a href=\"/user_uploads/3121/5jRPURugU8S6xjngKWWz1GJ1/vscode2.png\" target=\"_blank\" title=\"vscode2.png\">vscode2.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/5jRPURugU8S6xjngKWWz1GJ1/vscode2.png\" target=\"_blank\" title=\"vscode2.png\"><img src=\"/user_uploads/3121/5jRPURugU8S6xjngKWWz1GJ1/vscode2.png\"></a></div><p>There's a screenshot of this in action.</p>",
        "id": 133897228,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536856559
    },
    {
        "content": "<p>Oh oh, I made a mistake. I close the CoCalc subwindow showing all messages. Now I have no idea how to reopen it.</p>",
        "id": 133897300,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536856622
    },
    {
        "content": "<p>game over</p>",
        "id": 133897314,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536856643
    },
    {
        "content": "<p>You can make more windows with the [|] and [-] boxes</p>",
        "id": 133897336,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536856679
    },
    {
        "content": "<p>Patrick -- options:  (1) just close <em>all</em> the frames and it goes back to the default, or (2) split any frame, then select the new frame (or old) and change it from what it is to what you want.</p>",
        "id": 133897376,
        "sender_full_name": "William Stein",
        "timestamp": 1536856686
    },
    {
        "content": "<p>and then change what they display with a drop down menu just by it</p>",
        "id": 133897377,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536856688
    },
    {
        "content": "<p>And (3), suggest a new button for me to add to make creating frames clearer!</p>",
        "id": 133897383,
        "sender_full_name": "William Stein",
        "timestamp": 1536856703
    },
    {
        "content": "<p>Yep, <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> just did (2).  (1) is also useful -- there is a default layout, and you get that by click the x in the upper right until there are no windows.</p>",
        "id": 133897407,
        "sender_full_name": "William Stein",
        "timestamp": 1536856740
    },
    {
        "content": "<p>Note that your frame layout is stored in localStorage on your browser; it's not sync'd across users or other browsers.</p>",
        "id": 133897435,
        "sender_full_name": "William Stein",
        "timestamp": 1536856776
    },
    {
        "content": "<p>Thanks, I managed to get back my frames</p>",
        "id": 133897449,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536856792
    },
    {
        "content": "<p>I think I may have revealed that I never used CoCalc before... But I swear I use standalone Sage!</p>",
        "id": 133897533,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536856840
    },
    {
        "content": "<p>so the screenshot is displaying a bunch of random terms which have been defined, and the algorithm appears to be that the characters in <code>sub_of</code> appear, in that order, in the name of the term.</p>",
        "id": 133897534,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536856846
    },
    {
        "content": "<p>This Lean in CoCalc is <em>amazing</em></p>",
        "id": 133897623,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536856943
    },
    {
        "content": "<p>In emacs, each item in that completion list includes the type (in the format <code>name : type</code>), so all the types are visible at once</p>",
        "id": 133897664,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536857018
    },
    {
        "content": "<p>Now I need to find how to get my university to pay enough money so that my 40 students that will be using Lean during spring can use that instead of trying to install Lean at home</p>",
        "id": 133897723,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536857052
    },
    {
        "content": "<p>If I were to clone another lean package in a subdirectory and <code>leanpkg build</code> it and then edit its files, would the editor pick up the correct lean path? I know for now the priority has been getting things set up properly for Kevin's students but I wonder whether it is also ready for more general use.</p>",
        "id": 133897750,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536857106
    },
    {
        "content": "<p>What is the meaning of the number in the title of CoCalc webpage? My tab in Firefox displays \"(5) LEAN - CoCalc\"</p>",
        "id": 133897778,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536857157
    },
    {
        "content": "<p>Patrick: thanks!   The number is files with unseen chats.  It should also be the number on the bell in the upper right.   It's basically like the number here in zulip, but just the number of \"threads\" .</p>\n<p>Reid: thanks -- I will definitely add that -- the info is also sent to the frontend.</p>",
        "id": 133897841,
        "sender_full_name": "William Stein",
        "timestamp": 1536857216
    },
    {
        "content": "<p>I guess I will just try it unless you tell me it's a bad idea/definitely won't work</p>",
        "id": 133897852,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536857234
    },
    {
        "content": "<p>Reid can you send a screenshot of how it looks in emacs? I would be interested in comparing IDEs for Lean. I know you and Sebastian use emacs, and I was going to start when I was under the impression that it was going to be the only way I could possibly use Lean with cocalc, but when William decided to write his own interface for Lean I stopped again. I am really used to VS Code even though I've used emacs for 25 years and part of me would love to be doing Lean in emacs (it still annoys me that I can't do (or maybe just don't know how to) fancy editing in VS Code like \"cut from here to the end of the line and then paste it half way into the line above\", things which I can do easily in emacs).</p>",
        "id": 133897881,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536857271
    },
    {
        "content": "<p>Patrix: about $600.  We also have a (now popular at some places) option where students just directly pay us a 1-time $14 fee.</p>",
        "id": 133897898,
        "sender_full_name": "William Stein",
        "timestamp": 1536857282
    },
    {
        "content": "<blockquote>\n<p>Now I need to find how to get my university to pay enough money so that my 40 students that will be using Lean during spring can use that instead of trying to install Lean at home</p>\n</blockquote>\n<p>Patrick, my experience is that anything which looks remotely like it is an innovative new teaching method is something which my university is prepared to throw three-digit sums at no problem (indeed they threw a 5-digit sum at me). Hopefully it will work the same at your end.</p>",
        "id": 133897971,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536857365
    },
    {
        "content": "<blockquote>\n<p>If I were to clone another lean package in a subdirectory and <code>leanpkg build</code> it and then edit its files, would the editor pick up the correct lean path? [...] I wonder whether it is also ready for more general use.</p>\n</blockquote>\n<p>At present I do absolutely nothing to touch any paths and LEAN_PATH is not set.  There is a lean server process and yesterday I made sure it gets started in $HOME, so ~/.lean gets picked up and can impact the lean search path.   </p>\n<p>If you just kill the lean server (with kill in a terminal), then things are currently in a broken state, and your only recourse is to restart the project (which takes 5-20 seconds), by clicking \"Restart Project\" in project settings.  I'll add automatically starting the lean server if it is killed to my todo list.</p>",
        "id": 133898106,
        "sender_full_name": "William Stein",
        "timestamp": 1536857505
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/oTRZW2GYKSq1GRqEz7ak-1s4/out.png\" target=\"_blank\" title=\"out.png\">out.png</a> is an autocompletion menu</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/oTRZW2GYKSq1GRqEz7ak-1s4/out.png\" target=\"_blank\" title=\"out.png\"><img src=\"/user_uploads/3121/oTRZW2GYKSq1GRqEz7ak-1s4/out.png\"></a></div>",
        "id": 133898218,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536857610
    },
    {
        "content": "<blockquote>\n<p>I guess I will just try it unless you tell me it's a bad idea/definitely won't work</p>\n</blockquote>\n<p>I have no idea -- just go for it, possibly restart the project, and report back.  If you want to make another new project to play with, send me a link and I'll upgrade it with network access.</p>",
        "id": 133898289,
        "sender_full_name": "William Stein",
        "timestamp": 1536857665
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> if you want a more representative sample then you could seek randomly through <a href=\"https://www.twitch.tv/videos/308713302\" target=\"_blank\" title=\"https://www.twitch.tv/videos/308713302\">https://www.twitch.tv/videos/308713302</a> (there might be some dead time at the start while I get things all set up)</p>",
        "id": 133898354,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536857750
    },
    {
        "content": "<p>I started a build of <code>lean-category-theory</code> but from your description I expect that while the build will succeed, if I try opening a file in <code>lean-category-theory</code>, it will use the same global lean server process which won't know about the <code>lean-category-theory</code> source paths or its dependencies.<br>\nI looked into how the emacs mode knows how to invoke the lean server.<br>\nIt maintains a list of running <a href=\"https://github.com/leanprover/lean-mode/blob/master/lean-server.el#L29\" target=\"_blank\" title=\"https://github.com/leanprover/lean-mode/blob/master/lean-server.el#L29\">lean server sessions</a> each of which is associated to a <code>leanpkg.path</code> file.<br>\nFor each buffer, it <a href=\"https://github.com/leanprover/lean-mode/blob/master/lean-leanpkg.el#L74\" target=\"_blank\" title=\"https://github.com/leanprover/lean-mode/blob/master/lean-leanpkg.el#L74\">runs <code>lean -p</code></a> (with working directory the directory containing the buffer's file, I guess) and extracts the <code>\"leanpkg_path_file\"</code> field from the JSON output. (It also offers to run <code>leanpkg configure</code> if appropriate, which is nice but hardly critical.)<br>\nThen if it doesn't already have a session with the correct <code>leanpkg.path</code> file, it <a href=\"https://github.com/leanprover/lean-mode/blob/master/lean-server.el#L107\" target=\"_blank\" title=\"https://github.com/leanprover/lean-mode/blob/master/lean-server.el#L107\">starts a new server</a>.<br>\nAll of this happens from <a href=\"https://github.com/leanprover/lean-mode/blob/master/lean-server.el#L360\" target=\"_blank\" title=\"https://github.com/leanprover/lean-mode/blob/master/lean-server.el#L360\">https://github.com/leanprover/lean-mode/blob/master/lean-server.el#L360</a></p>",
        "id": 133899918,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536859550
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116034\">@William Stein</span> <span class=\"emoji emoji-2b06\" title=\"up\">:up:</span> in case you want to support multiple Lean projects per CoCalc project.</p>",
        "id": 133900003,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536859636
    },
    {
        "content": "<p>Thanks -- I've copied this to another todo item at <a href=\"https://cocalc.com/projects/32a71772-8761-49d1-9134-6eb7f3fca4f5/files/lean.tasks\" target=\"_blank\" title=\"https://cocalc.com/projects/32a71772-8761-49d1-9134-6eb7f3fca4f5/files/lean.tasks\">lean.tasks</a></p>",
        "id": 133905940,
        "sender_full_name": "William Stein",
        "timestamp": 1536865171
    },
    {
        "content": "<p>I redid tab completion so now:<br>\n  - there's an indicator about whether the completion is from the lean kernel or the frontend syntax mode<br>\n  - the syntax ones come first, then the lean kernel ones<br>\n  - I do NOT sort the lean kernel ones at all - the order is precisely what lean produces.<br>\n  - the type information is now displayed to the right.</p>\n<p><a href=\"/user_uploads/3121/JCwPJgcKDeh6aC-pt0p1N3v3/Screenshot-2018-09-13-at-2.40.01-PM.png\" target=\"_blank\" title=\"Screenshot-2018-09-13-at-2.40.01-PM.png\">Screenshot-2018-09-13-at-2.40.01-PM.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/JCwPJgcKDeh6aC-pt0p1N3v3/Screenshot-2018-09-13-at-2.40.01-PM.png\" target=\"_blank\" title=\"Screenshot-2018-09-13-at-2.40.01-PM.png\"><img src=\"/user_uploads/3121/JCwPJgcKDeh6aC-pt0p1N3v3/Screenshot-2018-09-13-at-2.40.01-PM.png\"></a></div>",
        "id": 133915281,
        "sender_full_name": "William Stein",
        "timestamp": 1536874915
    },
    {
        "content": "<p>This is so cool! Once again, thanks for the effort you're putting into this.</p>",
        "id": 133935411,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536907780
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116034\">@William Stein</span> Here another small feature request: when there are multiple goals, I think they are separated by a blank line. Could you separate them with something like an <code>&lt;hr/&gt;</code>?</p>",
        "id": 133951562,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536931371
    },
    {
        "content": "<p>Hmmm, I just realised this isn't even done in VScode. However VScode highlights the turnstile (<code>|-</code>) symbols. Apparently my eyes thought that was really helpful <span class=\"emoji emoji-1f603\" title=\"smiley\">:smiley:</span></p>",
        "id": 133952289,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536931984
    },
    {
        "content": "<p>Oh yes, colorized tactic state and messages is great, and very easy to port from the vscode extension. Have a look at <a href=\"https://github.com/leanprover/vscode-lean/blob/master/src/infoview.ts#L326\" target=\"_blank\" title=\"https://github.com/leanprover/vscode-lean/blob/master/src/infoview.ts#L326\">https://github.com/leanprover/vscode-lean/blob/master/src/infoview.ts#L326</a> Note especially how it calls <a href=\"https://github.com/leanprover/vscode-lean/blob/master/src/infoview.ts#L355\" target=\"_blank\" title=\"https://github.com/leanprover/vscode-lean/blob/master/src/infoview.ts#L355\">https://github.com/leanprover/vscode-lean/blob/master/src/infoview.ts#L355</a> which is very naive yet very useful</p>",
        "id": 133952745,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536932421
    },
    {
        "content": "<p>Yes, <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span>,  I've added colorized tactic state to the todo list.</p>",
        "id": 133963043,
        "sender_full_name": "William Stein",
        "timestamp": 1536941230
    },
    {
        "content": "<p>I just had a multiplayer Lean/CoCalc session with <span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span>. Voice chat enabled. Really cool. We made quite some progress on the <code>tfae</code> tactic!</p>",
        "id": 133963697,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536941928
    },
    {
        "content": "<p>There's multiplayer voice chat??</p>",
        "id": 133963726,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536941955
    },
    {
        "content": "<p>There is a little <span class=\"emoji emoji-1f4f9\" title=\"video recorder\">:video_recorder:</span> icon in the top-right.</p>",
        "id": 133963806,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536942026
    },
    {
        "content": "<p>I thought cocalc was basically for profs to distribute homework for students to do in sage. Looks like it has moved on a lot since I last looked seriously...</p>",
        "id": 133963811,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536942035
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> -- AWESOME!   <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> it's a bit more than just \"sagemath cloud\" now.    The video chat is hosted by <a href=\"http://appear.in\" target=\"_blank\" title=\"http://appear.in\">appear.in</a> -- it basically creates an ephemeral video chat room associated to any file (with the room name a big hash of the project_id and filename and a shared secret).</p>",
        "id": 133964064,
        "sender_full_name": "William Stein",
        "timestamp": 1536942256
    },
    {
        "content": "<p>Does tfae mean \"<strong>t</strong>he <strong>f</strong>ollowing <strong>a</strong>re <strong>e</strong>quivalent\"</p>",
        "id": 133964186,
        "sender_full_name": "William Stein",
        "timestamp": 1536942468
    },
    {
        "content": "<p>Yes it does.</p>",
        "id": 133964261,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536942564
    },
    {
        "content": "<p>The idea is that you feed it a list of propositions, and then a graph of implications.</p>",
        "id": 133964271,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536942591
    },
    {
        "content": "<p>What you get out of this is a function that you feed to natural numbers, and it will spit out the equivalence between those two propositions.</p>",
        "id": 133964339,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536942620
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116034\">@William Stein</span> I did get some banner on top of the <a href=\"http://appear.in\" target=\"_blank\" title=\"http://appear.in\">appear.in</a> chatroom, saying that the free chatrooms would no longer be available after the 24th of this month.</p>",
        "id": 133964379,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536942682
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>  -- crap, that's really unfortunate.  We will have to remove this functionality, or try to find another provider (e.g., google?) that still makes random video chat available.   Their pricing last I checked for non free was ridiculously high, much higher than we charge for cocalc, so paying them wasn't an option.</p>",
        "id": 133964463,
        "sender_full_name": "William Stein",
        "timestamp": 1536942797
    },
    {
        "content": "<p>Yeah, I'm sorry. But I thought you'dd like to know this before it suddenly happened.</p>",
        "id": 133964536,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536942881
    },
    {
        "content": "<p>OK, I've made an issue for this: <a href=\"https://github.com/sagemathinc/cocalc/issues/3185\" target=\"_blank\" title=\"https://github.com/sagemathinc/cocalc/issues/3185\">https://github.com/sagemathinc/cocalc/issues/3185</a></p>",
        "id": 133964565,
        "sender_full_name": "William Stein",
        "timestamp": 1536942963
    },
    {
        "content": "<p>Hmm, maybe it wasn't that bad: <a href=\"https://blog.appear.in/2018-product-updates/claiming\" target=\"_blank\" title=\"https://blog.appear.in/2018-product-updates/claiming\">https://blog.appear.in/2018-product-updates/claiming</a></p>",
        "id": 133964742,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536943175
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116034\">@William Stein</span> I didn't check it carefully, only made a mental note to tell you that there was some warning.</p>",
        "id": 133964752,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536943199
    },
    {
        "content": "<p>So it's not actually about free vs money, but somehow the room needs to have an owner.</p>",
        "id": 133964804,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536943233
    },
    {
        "content": "<blockquote>\n<p>So it's not actually about free vs money, but somehow the room needs to have an owner.</p>\n</blockquote>\n<p>I think it's about \"registered user\" (even with a pseudonym) vs. completely anonymous. The dialog to claim a room clearly states that it is free.</p>",
        "id": 133964977,
        "sender_full_name": "Harald Schilly",
        "timestamp": 1536943481
    },
    {
        "content": "<p>Right... sorry for the confusion.</p>",
        "id": 133965008,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536943527
    },
    {
        "content": "<p>no problem, this is still something introducing friction and good to be aware of that</p>",
        "id": 133965066,
        "sender_full_name": "Harald Schilly",
        "timestamp": 1536943579
    },
    {
        "content": "<p>Another change I didn't mention: if you kill the lean server process in a terminal, it will now automatically start again.  This could be relevant for packages (I don't know), and certainly means things should be a little more robust.</p>",
        "id": 133966504,
        "sender_full_name": "William Stein",
        "timestamp": 1536945320
    },
    {
        "content": "<p>Here is a way to grind CoCalc to a halt: choose your favorite 1000-line file (e.g. <code>data/polynomial.lean</code>) from mathlib and upload it to CoCalc. Once you open it in the Lean IDE the website turns into a unit test for the halting problem.</p>",
        "id": 134016050,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537024603
    },
    {
        "content": "<p>Do you have any idea why?  Is it the browser frontend that gets slow or the lean server running on the backend?</p>",
        "id": 134017503,
        "sender_full_name": "William Stein",
        "timestamp": 1537027265
    },
    {
        "content": "<p>Oh booth are at 100% -- it might just be the overhead of rendering all the gutter markers to show progress.</p>",
        "id": 134017551,
        "sender_full_name": "William Stein",
        "timestamp": 1537027361
    },
    {
        "content": "<p>Incidentally if you see this and try to refresh the page and have the file opened again... change ?session=default to ?session=default2 and load cocalc to get a new session.   For what it is worth, I opened data/polynomial.lean and the lean server ran at 100% for a while and my browser frontend was slow... but after about 30s everything was fine with lots of errors on the side (as expected due to missing imports).  So this doesn't seem to be a \"halting problem\" sort of problem?  (At least if you meant \"infinite loop\" or something like that.) <a href=\"/user_uploads/3121/iVZ1lsURintt0rSk1CslGELm/Screenshot-2018-09-15-at-9.04.46-AM.png\" target=\"_blank\" title=\"Screenshot-2018-09-15-at-9.04.46-AM.png\">Screenshot-2018-09-15-at-9.04.46-AM.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/iVZ1lsURintt0rSk1CslGELm/Screenshot-2018-09-15-at-9.04.46-AM.png\" target=\"_blank\" title=\"Screenshot-2018-09-15-at-9.04.46-AM.png\"><img src=\"/user_uploads/3121/iVZ1lsURintt0rSk1CslGELm/Screenshot-2018-09-15-at-9.04.46-AM.png\"></a></div>",
        "id": 134017619,
        "sender_full_name": "William Stein",
        "timestamp": 1537027516
    },
    {
        "content": "<p>In any case, right now my goal is that this is just good enough for <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> 's class...</p>",
        "id": 134017622,
        "sender_full_name": "William Stein",
        "timestamp": 1537027545
    },
    {
        "content": "<p>In any case, I think the root cause is inefficiency in constructing the hover tips on the left; I'll make a note to optimize that!</p>",
        "id": 134017663,
        "sender_full_name": "William Stein",
        "timestamp": 1537027601
    },
    {
        "content": "<p>I should work on this more -- I would like to get \"example sheet 0\" up and running.</p>",
        "id": 134017664,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537027610
    },
    {
        "content": "<p>William -- I have say 20 .lean files each of which is very short, and is just the statement of a theorem in Lean.</p>",
        "id": 134017713,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537027684
    },
    {
        "content": "<p>Yep - if your class examples/homework are way too slow, I want to know about it!</p>",
        "id": 134017718,
        "sender_full_name": "William Stein",
        "timestamp": 1537027690
    },
    {
        "content": "<p>The students' job is to take each of these files and to add a proof of the theorem to it</p>",
        "id": 134017722,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537027705
    },
    {
        "content": "<p>How do I go about getting that system into CoCalc?</p>",
        "id": 134017723,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537027720
    },
    {
        "content": "<p>I am making a database of problems.</p>",
        "id": 134017725,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537027739
    },
    {
        "content": "<p>It's currently quite simple -- each entry is an identification number (say 0008), a lean file Q0008.lean with the theorem, a lean file S0008.lean with the proof, and TeX files of the theorem and the proof in maths, plus an additional \"more information\" file containing comments such as how difficult the question is to do in maths and in Lean</p>",
        "id": 134017781,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537027835
    },
    {
        "content": "<p>1. Some ways to get the files into cocalc:<br>\n   - make a tarball or whatever, and drag and drop them to the files listing<br>\n   - click the \"Upload\" button in the upper right in the files listing<br>\n   - click +New, then click on the big Upload box near the bottom<br>\n   - setup <a href=\"http://blog.sagemath.com/cocalc/2017/09/08/using-ssh-with-cocalc.html\" target=\"_blank\" title=\"http://blog.sagemath.com/cocalc/2017/09/08/using-ssh-with-cocalc.html\">ssh access to your project in Project Settings</a>, then use scp or rsync.<br>\n   - put the .lean files on github, then git clone them into cocalc.<br>\n2. Make sure to look at <a href=\"https://tutorial.cocalc.com/\" target=\"_blank\" title=\"https://tutorial.cocalc.com/\">https://tutorial.cocalc.com/</a> in case you want to use any of our course management functionality to simplify distribution to/from students.</p>",
        "id": 134017792,
        "sender_full_name": "William Stein",
        "timestamp": 1537027877
    },
    {
        "content": "<p>Some of the maths questions are not appropriate for Lean, for various technical reasons which I won't bore you with. Of those questions, the vast majority are well suited for Sage -- perhaps because the question is actually just a computation. For those database entries I could maybe add a sage file.</p>",
        "id": 134017836,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537027945
    },
    {
        "content": "<p>Ideally I'd like to set homework to the students of the form \"For homework, do the following questions in the database : 0027, 0038, 0039, 0040.\"</p>",
        "id": 134017886,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537028044
    },
    {
        "content": "<p>I think it would be a much better way of managing my course in general.</p>",
        "id": 134017890,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537028054
    },
    {
        "content": "<p>For sage code your options include:<br>\n  - a .sage file; we do fully supported editing .sage files and running sage (in a terminal, say) in cocalc.<br>\n  - a .sagews file -- that's a \"sage worksheet\", which is much like the old \"sage notebooks\".<br>\n  - a Jupyter notebook -- i.e., a .ipynb file with a specific choice of Sage kernel.  These are extremely popular also outside of math these days and are well supported both in CoCalc and in many other places.</p>",
        "id": 134017898,
        "sender_full_name": "William Stein",
        "timestamp": 1537028080
    },
    {
        "content": "<p>Oh crazy. What are my options for Lean?</p>",
        "id": 134017906,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537028120
    },
    {
        "content": "<p>I have heard lots of talk about Jupyter notebooks but because I'm so used to the command line and emacs I've always steered clear of notebooks. I could never quite work out what they had to offer me.</p>",
        "id": 134017956,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537028184
    },
    {
        "content": "<p>For lean, right now it is only -- \"make a .lean file\".</p>\n<p>I can definitely see how it would make sense to have something like a LEAN Jupyter notebook, where each notebook cell is pretty much exactly like a .lean file is now in cocalc...  But I have no implemented that (yet).</p>",
        "id": 134017960,
        "sender_full_name": "William Stein",
        "timestamp": 1537028191
    },
    {
        "content": "<p>But they might be super-powerful these days.</p>",
        "id": 134017961,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537028192
    },
    {
        "content": "<p>They're not really so much super powerful.  I would describe them more as <em>very beginner friendly... in  certain ways (and less in others)</em>.     In CoCalc they are especially nice because of the TimeTravel button, which means you can see all past states of the notebook.</p>",
        "id": 134018032,
        "sender_full_name": "William Stein",
        "timestamp": 1537028306
    },
    {
        "content": "<p>They are like a command line repl, but you can go back and change something from before, and confuse yourself even more :-).  But overall, if you're careful, it is really useful for certain types of tasks.  For example, my Ph.D. student and I were  computeing J_0(42)(QQ)_tor exactly in this Jupyter notebook recently: <a href=\"/user_uploads/3121/i4p6VmtEBDEYYGbQE2YQMBbo/Screenshot-2018-09-15-at-9.19.13-AM.png\" target=\"_blank\" title=\"Screenshot-2018-09-15-at-9.19.13-AM.png\">Screenshot-2018-09-15-at-9.19.13-AM.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/i4p6VmtEBDEYYGbQE2YQMBbo/Screenshot-2018-09-15-at-9.19.13-AM.png\" target=\"_blank\" title=\"Screenshot-2018-09-15-at-9.19.13-AM.png\"><img src=\"/user_uploads/3121/i4p6VmtEBDEYYGbQE2YQMBbo/Screenshot-2018-09-15-at-9.19.13-AM.png\"></a></div>",
        "id": 134018100,
        "sender_full_name": "William Stein",
        "timestamp": 1537028427
    },
    {
        "content": "<p>It's like a command line terminal session, but where you can clean it up and keep it around, and easily run it again.<br>\n<a href=\"https://goldengrape.github.io/Python-for-ophthalmologist/lesson_01_jupyter.html\" target=\"_blank\" title=\"https://goldengrape.github.io/Python-for-ophthalmologist/lesson_01_jupyter.html\">tutorial</a></p>",
        "id": 134018109,
        "sender_full_name": "William Stein",
        "timestamp": 1537028465
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116034\">@William Stein</span> could you add me as a collaborator? I'll be teaching a (probably small) Lean-based course at Carnegie Mellon next semester, and it would be great to do it with CoCalc.</p>",
        "id": 134032755,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1537059917
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110865\">@Jeremy Avigad</span>, I just sent you an invite to the LEAN project on CoCalc.</p>",
        "id": 134032819,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1537060009
    },
    {
        "content": "<p>I'm in! Thanks very much.</p>",
        "id": 134032876,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1537060168
    },
    {
        "content": "<p>Video chat:   After some investigation and back and forth with <a href=\"http://appear.in\" target=\"_blank\" title=\"http://appear.in\">appear.in</a> support, I have switched from <a href=\"http://appear.in\" target=\"_blank\" title=\"http://appear.in\">appear.in</a> to <a href=\"https://jitsi.org/\" target=\"_blank\" title=\"https://jitsi.org/\">https://jitsi.org/</a> for our CoCalc video chat.    <a href=\"http://jitsi.org\" target=\"_blank\" title=\"http://jitsi.org\">jitsi.org</a> is completely free and open source, and works very well.</p>",
        "id": 135039310,
        "sender_full_name": "William Stein",
        "timestamp": 1538490325
    },
    {
        "content": "<p>Thanks for the update!</p>",
        "id": 135039386,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538490366
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116034\">@William Stein</span>  It's taken a while with the finance dept., but I've now got my CoCalc subscription going for my introductory pure maths course, which begins on Monday. I'd like to do something like the <a href=\"https://github.com/avigad/mathematics_in_lean\">Mathematics in Lean</a> book, which does some clever things to present HTML lecture notes within VS Code. They are interactive in the sense that clicking on the Lean snippets in the lecture notes brings up a Lean editor.</p>\n<p>Is the same thing possible in CoCalc? <span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span>  <span class=\"user-mention\" data-user-id=\"110865\">@Jeremy Avigad</span> - do you know how / if this might work?</p>\n<p>Thanks!</p>",
        "id": 210333445,
        "sender_full_name": "Gihan Marasingha",
        "timestamp": 1600299920
    },
    {
        "content": "<p>Is there a special URL that can be used to open a snippet in the Lean editor in CoCalc? If so, then you could clone the <a href=\"https://github.com/avigad/mathematics_in_lean_source\">Mathematics in Lean</a> repo, replace the chapters with your lecture notes, and then replace the URL <a href=\"https://github.com/avigad/mathematics_in_lean_source/blob/master/lean_sphinx.py#L25\">here</a> with something appropriate for CoCalc.</p>",
        "id": 210333823,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1600300229
    },
    {
        "content": "<blockquote>\n<p>there a special URL that can be used to open a snippet in the Lean editor in CoCalc?</p>\n</blockquote>\n<p>Unfortunately there isn't, though there was a very similar feature request a few days ago (<a href=\"https://github.com/sagemathinc/cocalc/issues/4851\">https://github.com/sagemathinc/cocalc/issues/4851</a>).</p>\n<blockquote>\n<p>They are interactive in the sense that clicking on the Lean snippets in the lecture notes brings up a Lean editor.</p>\n</blockquote>\n<p>You could use HTML (or Markdown) for your notes, and also pre-create a bunch of files with the corresponding lean code.   The student would  get a copy of all of this content and have it in their cocalc project (this is easy to accomplish with the Library, or a handout).  Next to each block of code, put a relative link to the corresponding .lean file.   When the student clicks the link, the corresponding lean file will open in a tab next to the book.  Maybe that is sufficient for your needs?</p>\n<p>If the above is unclear, let me know.</p>",
        "id": 210347256,
        "sender_full_name": "William Stein",
        "timestamp": 1600317040
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116034\">@William Stein</span> We were experimenting with Lean on CoCalc for my graduate topics class last week (and will be continuing over the next two weeks). We applied upgrades, but <span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span> noticed that we were capped at 1 GB RAM by Lean. Is there a way to modify this on CoCalc?</p>",
        "id": 217456483,
        "sender_full_name": "Jennifer Balakrishnan",
        "timestamp": 1605905068
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"233737\">@Gihan Marasingha</span> you've been using CoCalc with your students at Exeter, right? Did you run into this issue?</p>",
        "id": 217456939,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605905329
    },
    {
        "content": "<p>I haven't run into a memory issue or maybe I have and I haven't realised it.</p>",
        "id": 217457296,
        "sender_full_name": "Gihan Marasingha",
        "timestamp": 1605905573
    },
    {
        "content": "<p>Oh and I didn't see the comments (in September!) about doing something like Maths in Lean in CoCalc. That's good to know and I might try that for next term.</p>",
        "id": 217457578,
        "sender_full_name": "Gihan Marasingha",
        "timestamp": 1605905764
    },
    {
        "content": "<p>The main issue I had was that most of my (~270) first-year students really didn't want to have anything to do with Lean. However, now they're 9 weeks in to the term, some of them are beginning to realise how useful Lean  is and that (perhaps) their aversion to Lean was really a disguised aversion to proof.</p>",
        "id": 217457794,
        "sender_full_name": "Gihan Marasingha",
        "timestamp": 1605905908
    },
    {
        "content": "<p>To be fair, proving things instead of just thinking you've proved things (but leaving holes you could drive a truck through) is really annoying when you start out <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 217457972,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1605906017
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"320715\">Jennifer Balakrishnan</span> <a href=\"#narrow/stream/113488-general/topic/CoCalc/near/217456483\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116034\">William Stein</span> We were experimenting with Lean on CoCalc for my graduate topics class last week (and will be continuing over the next two weeks). We applied upgrades, but <span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> noticed that we were capped at 1 GB RAM by Lean. Is there a way to modify this on CoCalc?</p>\n</blockquote>\n<ol>\n<li>\n<p>How do you know you're capped at 1GB RAM in each LEAN process?</p>\n</li>\n<li>\n<p>Maybe setting this environment variable would help: <code>NODE_OPTIONS=--max-old-space-size=8192</code> ?   The code that spawns the lean process is <a href=\"https://github.com/leanprover/lean-client-js/blob/master/lean-client-js-node/src/process.ts\">here</a>; it's completely undocumented, but there is hope that maybe setting that environment variable would change how node runs...   The way to set an environment variable for a cocalc project is to set a JSON object in the \"Custom environment variables\" section of Project settings, then restart the project.   Probably the JSON is <code>{\"NODE_OPTIONS\":\"--max-old-space-size=8192\"}</code> in this case.  I didn't try this, since I don't know 1.</p>\n</li>\n</ol>",
        "id": 217459669,
        "sender_full_name": "William Stein",
        "timestamp": 1605906890
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116034\">@William Stein</span></p>\n<ol>\n<li>It was just an empirical observation that we were getting out of memory errors but the lean process in the info panel always showed at most 1gb. I have now checked and 1gb is the limit set by lean internally at build time <a href=\"https://github.com/leanprover-community/lean/blob/d9997024f55dc756d47e2cacd12e8091ae37c9bf/src/shell/lean.cpp#L168\">https://github.com/leanprover-community/lean/blob/d9997024f55dc756d47e2cacd12e8091ae37c9bf/src/shell/lean.cpp#L168</a> in the Lean VScode extension this is overridden by default to 4gb when starting the server.</li>\n<li>It looks like <a href=\"https://github.com/sagemathinc/cocalc/blob/e341ad577db9486b834b10d745ad52d743e2cf3c/src/smc-project/lean/lean.ts#L73\">https://github.com/sagemathinc/cocalc/blob/e341ad577db9486b834b10d745ad52d743e2cf3c/src/smc-project/lean/lean.ts#L73</a> is whats spawning the server, so changing this line to <code>['-M 4096']</code> would replicate the default vscode behavior, seeing as the default cocalc memory is only 1gb it might make more sense to set this up instead as an option in cocalc somewhere projectwise? Either  a memory setting or a lean extra command line arguments setting? Sorry I don't know enough about typescript/cocalc to make a PR myself!</li>\n</ol>",
        "id": 217477261,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1605920796
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"116034\">@William Stein</span>. I tried setting the environment variable as you suggested, but unfortunately it looks like we're still locked in at 1 GB (eyeballing one lean file, it seems to get through about 70 lines, after which it reports \"excessive memory consumption\" and halts).</p>",
        "id": 217481262,
        "sender_full_name": "Jennifer Balakrishnan",
        "timestamp": 1605927260
    },
    {
        "content": "<p>If you restart your project it will now have the -M 4096 option that <span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span> suggests above.</p>",
        "id": 217534438,
        "sender_full_name": "William Stein",
        "timestamp": 1606020490
    },
    {
        "content": "<p>I've decided to just make it the default, since vscode does.</p>",
        "id": 217534440,
        "sender_full_name": "William Stein",
        "timestamp": 1606020517
    },
    {
        "content": "<p>Great, thank you <span class=\"user-mention\" data-user-id=\"116034\">@William Stein</span> !</p>",
        "id": 217555488,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1606057629
    },
    {
        "content": "<p>Awesome! Thank you <span class=\"user-mention\" data-user-id=\"116034\">@William Stein</span> !!</p>",
        "id": 217557922,
        "sender_full_name": "Jennifer Balakrishnan",
        "timestamp": 1606061505
    },
    {
        "content": "<p>I'm helping someone to set up Lean in CoCalc. Is there a way to get a new version of mathlib in CoCalc as a user (the default seems to be 3.11.0)? After trying <code>leanproject new ...</code> and creating a new file in that project it seems that CoCalc is reading the wrong <code>leanpkg.toml</code>. Can you move the toml file to get the latest version of Lean as a user?</p>",
        "id": 229019494,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1614976155
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"233737\">@Gihan Marasingha</span> might be a good person to ask. My memory is that if you want to use all the infrastructure which cocalc has, which you do, then you're stuck with Lean 3.11.0. The only <code>leanpkg.toml</code> ever read is the one in the root directory.</p>",
        "id": 229040472,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614986085
    },
    {
        "content": "<p>The CoCalc people say that they simply cannot keep up with the constant changing of core Lean using their infrastructure.</p>",
        "id": 229040557,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614986121
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> AFAIK CoCalc has a fixed Lean executable, it doesn't use elan. I think you should be able to point it to a different mathlib version with leanpkg.toml, but it will have to be compatible with that Lean version.</p>",
        "id": 229040698,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1614986180
    },
    {
        "content": "<p>Ok, thanks!</p>",
        "id": 229074012,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1615014411
    },
    {
        "content": "<p>Hello, I was trying to run lean on Cacalc and I followed the steps here: <a href=\"https://github.com/kbuzzard/xena/blob/master/CoCalc/CoCalc_notes.md\">https://github.com/kbuzzard/xena/blob/master/CoCalc/CoCalc_notes.md</a> but whenever I open the .lean file in Cocalc it throws the error that: LEAN_PATH is not found. Any ideas how can I fix it?</p>",
        "id": 232488714,
        "sender_full_name": "Vijay Sharma",
        "timestamp": 1617134699
    },
    {
        "content": "<p>Those notes are really old. The version of lean on cocalc is old and he t won't handle modern mathlib. Because of this i have kind of got frustrated with lean in cocalc, but I know <span class=\"user-mention\" data-user-id=\"233737\">@Gihan Marasingha</span> uses it and maybe he knows some more recent instructions. If you just want to use it yourself then you just put lean files in the root directory of your project and it works fine. I think that at that time I was trying to figure out how to get a different mathlib to the default cocalc one, but now there is no point doing this because the default cocalc mathlib is the most recent version of mathlib which works with the version of lean on cocalc. When I wrote those instructions this issue was not there.</p>",
        "id": 232497605,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1617138131
    },
    {
        "content": "<p>Only just saw this <span class=\"user-mention\" data-user-id=\"386759\">@Vijay Sharma</span> . What Kevin says is correct AFAIK. Cocalc isn't designed for use with LEAN projects per se. If you have any more questions, please give me a shout.</p>",
        "id": 234842901,
        "sender_full_name": "Gihan Marasingha",
        "timestamp": 1618575665
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"233737\">@Gihan Marasingha</span>  I too just saw your message now. Indeed I am super keen to setup lean on CoCalc. If you are available sometime would be possible to have a short call?</p>",
        "id": 236676074,
        "sender_full_name": "Vijay Sharma",
        "timestamp": 1619704309
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"386759\">@Vijay Sharma</span>  Absolutely. I'm in the GMT + 1 time zone at the moment (in England). Currently, I'm free all day on 3 May. What time is good for you?</p>",
        "id": 236706936,
        "sender_full_name": "Gihan Marasingha",
        "timestamp": 1619714787
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"233737\">@Gihan Marasingha</span> Thank you so much. Today is also possible. Say your time 1630hrs?</p>",
        "id": 237129149,
        "sender_full_name": "Vijay Sharma",
        "timestamp": 1620030479
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"386759\">@Vijay Sharma</span> A cool thing about Zulip: if you type <code>&lt;time</code> and hit [Enter] then you'll get a dialog to select a time in your timezone. But it will be printed in a timezone aware format, so everyone sees it in the local time (of their computer).</p>",
        "id": 237131119,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620031829
    },
    {
        "content": "<p>Example: <time datetime=\"2021-05-03T08:50:00Z\">2021-05-03T10:50:00+02:00</time> prints as <code>Mon, May 3 2021, 10:50</code> for me.</p>",
        "id": 237131170,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620031861
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"386759\">@Vijay Sharma</span>  That works for me. I'll send you a message to set up a meeting.</p>",
        "id": 237142459,
        "sender_full_name": "Gihan Marasingha",
        "timestamp": 1620038522
    },
    {
        "content": "<p>Hey Gihan, my email address is <a href=\"mailto:vijay@riyaaz.org\">vijay@riyaaz.org</a></p>",
        "id": 237144036,
        "sender_full_name": "Vijay Sharma",
        "timestamp": 1620039563
    }
]