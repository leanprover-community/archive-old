[
    {
        "content": "<p>The following example generates errors in its last line.  I do not understand why.  Can someone please correct those lines for me?<br>\nIf we have a proof that  x ∈ single y   and  by definition single x = pair x x then we want to conclude x ∈  pair y y.  </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">init</span>\n<span class=\"kn\">constant</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"kn\">set_option</span> <span class=\"n\">default_priority</span> <span class=\"mi\">100</span>\n<span class=\"n\">reserve</span> <span class=\"kn\">infix</span> <span class=\"bp\">`</span> <span class=\"err\">∈</span> <span class=\"bp\">`</span> <span class=\"o\">:</span> <span class=\"mi\">49</span>\n<span class=\"kn\">constant</span> <span class=\"n\">mem</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"kn\">variables</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">:</span> <span class=\"n\">M</span>\n<span class=\"kn\">infix</span> <span class=\"err\">∈</span> <span class=\"o\">:=</span> <span class=\"n\">mem</span>\n<span class=\"kn\">constant</span> <span class=\"n\">single</span><span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span>\n<span class=\"kn\">constant</span> <span class=\"n\">pair</span><span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span>\n<span class=\"kn\">constant</span> <span class=\"n\">single_definition</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">single</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">pair</span> <span class=\"n\">x</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">single_definition</span> <span class=\"n\">y</span>  <span class=\"c\">/-</span><span class=\"cm\"> single y = pair y y -/</span>\n<span class=\"kn\">constant</span> <span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">single</span> <span class=\"n\">y</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">subst</span> <span class=\"o\">(</span><span class=\"n\">single_definition</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">h</span>\n<span class=\"bp\">```</span> <span class=\"n\">lean</span>\n</pre></div>",
        "id": 194269221,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1587024461
    },
    {
        "content": "<p>Please use ```lean</p>",
        "id": 194269280,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1587024484
    },
    {
        "content": "<p>Pro tip:</p>\n<div class=\"codehilite\"><pre><span></span>```lean\ncode goes here\n```\n</pre></div>\n\n\n<p>gives you syntax highlighting</p>",
        "id": 194269289,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587024490
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 194269364,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1587024539
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 194269425,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1587024588
    },
    {
        "content": "<p>```lean</p>\n<p>```</p>",
        "id": 194269484,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1587024603
    },
    {
        "content": "<p>three backquotes lean&lt;RET&gt;code&lt;RET&gt;three backquotes</p>",
        "id": 194269522,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1587024628
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 194269526,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1587024632
    },
    {
        "content": "<p>Also you can edit old posts instead of creating new ones</p>",
        "id": 194269540,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1587024646
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">init</span>\n<span class=\"kn\">constant</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"kn\">set_option</span> <span class=\"n\">default_priority</span> <span class=\"mi\">100</span>\n<span class=\"n\">reserve</span> <span class=\"kn\">infix</span> <span class=\"bp\">`</span> <span class=\"err\">∈</span> <span class=\"bp\">`</span> <span class=\"o\">:</span> <span class=\"mi\">49</span>\n<span class=\"kn\">constant</span> <span class=\"n\">mem</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"kn\">variables</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">:</span> <span class=\"n\">M</span>\n<span class=\"kn\">infix</span> <span class=\"err\">∈</span> <span class=\"o\">:=</span> <span class=\"n\">mem</span>\n<span class=\"kn\">constant</span> <span class=\"n\">single</span><span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span>\n<span class=\"kn\">constant</span> <span class=\"n\">pair</span><span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span>\n<span class=\"kn\">constant</span> <span class=\"n\">single_definition</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">single</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">pair</span> <span class=\"n\">x</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">single_definition</span> <span class=\"n\">y</span>  <span class=\"c\">/-</span><span class=\"cm\"> single y = pair y y -/</span>\n<span class=\"kn\">constant</span> <span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">single</span> <span class=\"n\">y</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">subst</span> <span class=\"o\">(</span><span class=\"n\">single_definition</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">h</span>\n</pre></div>",
        "id": 194269556,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1587024655
    },
    {
        "content": "<p>How do I edit (or in this case delete) old posts?</p>",
        "id": 194269614,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1587024686
    },
    {
        "content": "<p>There is a drop-down menu near the time stamp in the top-right corner</p>",
        "id": 194269715,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1587024727
    },
    {
        "content": "<p>Or the keybinding is e (if you are not editing a message of course)</p>",
        "id": 194269738,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1587024742
    },
    {
        "content": "<p>You don't need <code>import init</code>, it's imported automatically</p>",
        "id": 194269740,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587024743
    },
    {
        "content": "<p>Try <code>example : x ∈ pair y y := single_definition y ▸ h x y</code> instead of <code>#check</code></p>",
        "id": 194269756,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1587024754
    },
    {
        "content": "<p>And your Lean code is <em>very</em> weird</p>",
        "id": 194269758,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1587024756
    },
    {
        "content": "<p>E.g. it says that any <code>x</code> belongs to <code>singleton y</code> for any <code>y</code></p>",
        "id": 194269808,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1587024795
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"284844\">@Michael Beeson</span> Welcome! Can you tell us a little bit about the \"background\" for your question? What are you trying to achieve?</p>",
        "id": 194269855,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587024830
    },
    {
        "content": "<p>Also, what tutorials/books have you followed?</p>",
        "id": 194269874,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587024840
    },
    {
        "content": "<p>If you are coming from another proof assistant you should probably spend some time learning and asking basic questions.</p>",
        "id": 194269877,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1587024841
    },
    {
        "content": "<p>Probably you want</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">single</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">pair</span> <span class=\"n\">y</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">single_definition</span> <span class=\"n\">y</span> <span class=\"bp\">▸</span> <span class=\"n\">h</span>\n</pre></div>\n\n\n<p>instead of the last 2 lines.</p>",
        "id": 194269997,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1587024907
    },
    {
        "content": "<p>Note that <code>constant</code> defines a universal constant with no known properties (apart from those defined by <code>axiom</code>s)</p>",
        "id": 194270199,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1587025059
    },
    {
        "content": "<p>In particular, you will not be able to apply any lemmas you prove in your file, e.g., to <code>nat</code>.</p>",
        "id": 194270291,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1587025095
    },
    {
        "content": "<p>Or anything but <code>M</code>.</p>",
        "id": 194270325,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1587025120
    },
    {
        "content": "<p>If you want to have theorems/definitions that work for any <code>Type</code>, you should use <code>variable (M : Type*)</code> instead.</p>",
        "id": 194270408,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1587025168
    },
    {
        "content": "<p>I am reading Theorem Proving in Lean.   I'm trying with this example to understand eq.subst.   This is taken from a finite axiomatization of <br>\nintuitionistic NF set theory that I'm formalizing in Lean as an introductory exercise.  I thought this WAS a basic question.</p>",
        "id": 194270438,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1587025191
    },
    {
        "content": "<p>Yes,  that's the intention, this is a first-order theory with model carried by M.</p>",
        "id": 194270530,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1587025233
    },
    {
        "content": "<p>It looks like a fine basic question to me. In Lean we essentially never use constants and axioms.</p>",
        "id": 194270554,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587025252
    },
    {
        "content": "<p>I know,  but that's one way to do first-order logic in Lean.    There should be another way, using a class declaration, but the part of the manual I needed for that is apparently not written yet, so I went this route instead.  It is adequate.</p>",
        "id": 194270637,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1587025314
    },
    {
        "content": "<p>You never use constants and axioms in formalizing libraries of mathematics, of course,  but this is not what I'm doing here, I'm formalizing a first-order theory.</p>",
        "id": 194270778,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1587025389
    },
    {
        "content": "<p>You can use</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">structure</span> <span class=\"n\">Model</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">single</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">pair</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">single_def</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">single</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">pair</span> <span class=\"n\">x</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 194270784,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1587025394
    },
    {
        "content": "<p>You can add more data and axioms</p>",
        "id": 194270802,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1587025415
    },
    {
        "content": "<p>I tried essentially that with  \"class\"  instead of structure.</p>",
        "id": 194270829,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1587025433
    },
    {
        "content": "<p>With <code>class</code> you'll need something like</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">class</span> <span class=\"n\">Model</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">single</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">...</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Model</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n</pre></div>",
        "id": 194270965,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1587025512
    },
    {
        "content": "<p>It complained that I'm not allowed \"variables\" inside a class.   <br>\nThat's when I switched to the other approach.</p>",
        "id": 194271020,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1587025554
    },
    {
        "content": "<p>Then you can <code>#check Model.single</code> and <code>#check Model.pair</code> to see what arguments explicit/implicit.</p>",
        "id": 194271069,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1587025563
    },
    {
        "content": "<p>You don't declare <code>variable</code>s inside a class. You list fields using the same syntax as for <code>structure</code> but move <code>M</code> to the argument.</p>",
        "id": 194271136,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1587025607
    },
    {
        "content": "<p>The error about <code>subst.eq</code> means the following. When you write <code>subst.eq h a</code>, Lean wants to know (a) the type of <code>h</code> (including all implicit args); (b) the type of your goal.</p>",
        "id": 194271337,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1587025735
    },
    {
        "content": "<p>So, it will never work with <code>#check</code> unless you use something like <code>show ..., from eq.subst h a</code></p>",
        "id": 194271404,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1587025766
    },
    {
        "content": "<p>OK.   Thank you, Yury,  for these helpful lessons.   I'll rework my code tomorrow .</p>",
        "id": 194271556,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1587025856
    },
    {
        "content": "<p>The following code generates an error if you uncomment the commented line.<br>\nOn the other hand if you uncomment the commented line and comment out the next line then <br>\nit also generates an error.  So it looks like either of the last two lines is OK by itself but not together.<br>\nWhat is going on here?   Also,   why does my section name have to be the same as my class name and both <br>\nare ended together with one end command?  </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">set_option</span> <span class=\"n\">default_priority</span> <span class=\"mi\">100</span>\n<span class=\"n\">reserve</span> <span class=\"kn\">infix</span> <span class=\"bp\">`</span> <span class=\"err\">∈</span> <span class=\"bp\">`</span> <span class=\"o\">:</span> <span class=\"mi\">49</span>\n<span class=\"kn\">section</span> <span class=\"n\">Model</span>\n<span class=\"n\">class</span>  <span class=\"n\">Model</span> <span class=\"o\">(</span><span class=\"n\">M</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">mem</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"c\">/-</span><span class=\"cm\">infix ∈ := Model.binary_union-/</span>\n<span class=\"o\">(</span><span class=\"n\">extensionality_axiom</span><span class=\"o\">:</span>  <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">mem</span> <span class=\"n\">x</span> <span class=\"n\">a</span> <span class=\"bp\">↔</span> <span class=\"n\">mem</span> <span class=\"n\">x</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">a</span><span class=\"bp\">=</span><span class=\"n\">b</span><span class=\"o\">))</span>\n<span class=\"kn\">end</span> <span class=\"n\">Model</span>\n</pre></div>",
        "id": 194350356,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1587062926
    },
    {
        "content": "<p>The class consists of several fields, mem and extensionality_axiom in this case, the next line which isnt of the form <code>(name : Type)</code> is ending the definition of the class here, so when you uncomment the infix line lean thinks you are done with that class.<br>\nThe <code>end Model</code> only applies to the section, and doesn't need to have the same name as the class.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">set_option</span> <span class=\"n\">default_priority</span> <span class=\"mi\">100</span>\n<span class=\"n\">reserve</span> <span class=\"kn\">infix</span> <span class=\"bp\">`</span> <span class=\"err\">∈</span> <span class=\"bp\">`</span> <span class=\"o\">:</span> <span class=\"mi\">49</span>\n<span class=\"kn\">section</span> <span class=\"n\">Moodel</span>\n<span class=\"n\">class</span>  <span class=\"n\">Model</span> <span class=\"o\">(</span><span class=\"n\">M</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">mem</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">extensionality_axiom</span><span class=\"o\">:</span>  <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">mem</span> <span class=\"n\">x</span> <span class=\"n\">a</span> <span class=\"bp\">↔</span> <span class=\"n\">mem</span> <span class=\"n\">x</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">a</span><span class=\"bp\">=</span><span class=\"n\">b</span><span class=\"o\">))</span>\n\n<span class=\"kn\">infix</span> <span class=\"err\">∈</span> <span class=\"o\">:=</span> <span class=\"n\">Model</span><span class=\"bp\">.</span><span class=\"n\">binary_union</span>\n<span class=\"kn\">end</span> <span class=\"n\">Moodel</span>\n</pre></div>",
        "id": 194350791,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1587063128
    },
    {
        "content": "<p>The infix doesn't work as lean doesn't know what <code>Model.binary_union</code> is btw.</p>",
        "id": 194350927,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1587063207
    },
    {
        "content": "<p>Thanks,   I understand the answer.  Now,  where can I put the infix declaration so it will work?   Not before the class, since it won't know what Model.mem is there.  Not after the class,  at least, if I want to use the infix notation inside the class.    And, not inside the class,<br>\nsince that will terminate the class definition.   um,  where then?</p>",
        "id": 194351064,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1587063263
    },
    {
        "content": "<p>You can do it like this</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">class</span>  <span class=\"n\">Model</span> <span class=\"o\">(</span><span class=\"n\">M</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">mem</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"kn\">infix</span> <span class=\"bp\">`</span> <span class=\"err\">∈</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">1001</span> <span class=\"o\">:=</span> <span class=\"n\">mem</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">extensionality_axiom</span><span class=\"o\">:</span>  <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">a</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">a</span><span class=\"bp\">=</span><span class=\"n\">b</span><span class=\"o\">))</span>\n</pre></div>",
        "id": 194351618,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1587063497
    },
    {
        "content": "<p>it still isn't bracketed right btw</p>",
        "id": 194352083,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587063695
    },
    {
        "content": "<p>The extensionality yeah?</p>",
        "id": 194352244,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1587063752
    },
    {
        "content": "<p>yeah</p>",
        "id": 194352265,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587063760
    },
    {
        "content": "<p>Also I believe you have to redeclare the notation if you want to use it outside of the class as in</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">section</span> <span class=\"n\">Model</span>\n\n<span class=\"n\">class</span>  <span class=\"n\">Model</span> <span class=\"o\">(</span><span class=\"n\">M</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">mem</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"kn\">infix</span> <span class=\"bp\">`</span> <span class=\"err\">∈</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">1001</span> <span class=\"o\">:=</span> <span class=\"n\">mem</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">extensionality_axiom</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">a</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">a</span><span class=\"bp\">=</span><span class=\"n\">b</span><span class=\"o\">))</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Model</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Model</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">extensionality_axiom</span>\n<span class=\"kn\">infix</span> <span class=\"bp\">`</span> <span class=\"err\">∈</span> <span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">Model</span><span class=\"bp\">.</span><span class=\"n\">mem</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">b</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">Model</span>\n</pre></div>",
        "id": 194352770,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1587063990
    },
    {
        "content": "<p>oh,  oops about the bracketing.     But having binary_union in place of mem is just a cut-and-paste error<br>\nas the actual file has mem there.</p>",
        "id": 194352818,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1587064023
    },
    {
        "content": "<p>I don't seem to have to redeclare the infix notation,  probably because at the top of my file I have</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">set_option</span> <span class=\"n\">default_priority</span> <span class=\"mi\">100</span>\n<span class=\"n\">reserve</span> <span class=\"kn\">infix</span> <span class=\"bp\">`</span> <span class=\"err\">∈</span> <span class=\"bp\">`</span> <span class=\"o\">:</span> <span class=\"mi\">49</span>\n<span class=\"n\">reserve</span> <span class=\"kn\">infix</span> <span class=\"bp\">`</span> <span class=\"err\">⊆</span> <span class=\"bp\">`</span> <span class=\"o\">:</span> <span class=\"mi\">49</span>\n<span class=\"n\">reserve</span> <span class=\"kn\">infix</span> <span class=\"bp\">`</span> <span class=\"err\">∪</span> <span class=\"bp\">`</span> <span class=\"o\">:</span> <span class=\"mi\">50</span>\n<span class=\"n\">reserve</span> <span class=\"kn\">infix</span> <span class=\"bp\">`</span> <span class=\"err\">∩</span> <span class=\"bp\">`</span> <span class=\"o\">:</span> <span class=\"mi\">50</span>\n<span class=\"n\">reserve</span> <span class=\"kn\">infix</span> <span class=\"bp\">`</span> <span class=\"bp\">×</span> <span class=\"bp\">`</span> <span class=\"o\">:</span> <span class=\"mi\">50</span>\n</pre></div>",
        "id": 194359049,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1587067119
    },
    {
        "content": "<p>But I do definitely need the second \"open Model\".   Now I have two \"open Model\"  and only one \"end Model\".    I don't understand <br>\nwhy I need the second \"open Model\".</p>",
        "id": 194359304,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1587067238
    },
    {
        "content": "<p>Also if I try to include the line</p>\n<p>(@[simp]  single_definition: ∀ x, (single x = pair x x) )</p>\n<p>it causes an error, while  without \"@[simp]\"   all is fine.</p>",
        "id": 194359707,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1587067432
    },
    {
        "content": "<p>Where is your second open Model? If you have a section called model and then a class inside it called <code>Model</code> then in order to refer to fields of the class <code>Model</code> by their name, instead of <code>Model.name</code> you can run <code>open Model</code>. I don't see the need for two (unless you are in a different section).</p>",
        "id": 194359843,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1587067472
    },
    {
        "content": "<p><code>section name</code> pairs with <code>end name</code>, and open is something different, I'd rename your section to something else (even just models to make the names not overlap personally.</p>",
        "id": 194359963,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1587067533
    },
    {
        "content": "<p>Here is   an initial segment of my file showing the two open Model commands.<br>\nWell actually the first one is not an \"open\" command but a section command.  </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">set_option</span> <span class=\"n\">default_priority</span> <span class=\"mi\">100</span>\n<span class=\"n\">reserve</span> <span class=\"kn\">infix</span> <span class=\"bp\">`</span> <span class=\"err\">∈</span> <span class=\"bp\">`</span> <span class=\"o\">:</span> <span class=\"mi\">49</span>\n<span class=\"n\">reserve</span> <span class=\"kn\">infix</span> <span class=\"bp\">`</span> <span class=\"err\">⊆</span> <span class=\"bp\">`</span> <span class=\"o\">:</span> <span class=\"mi\">49</span>\n<span class=\"n\">reserve</span> <span class=\"kn\">infix</span> <span class=\"bp\">`</span> <span class=\"err\">∪</span> <span class=\"bp\">`</span> <span class=\"o\">:</span> <span class=\"mi\">50</span>\n<span class=\"n\">reserve</span> <span class=\"kn\">infix</span> <span class=\"bp\">`</span> <span class=\"err\">∩</span> <span class=\"bp\">`</span> <span class=\"o\">:</span> <span class=\"mi\">50</span>\n<span class=\"n\">reserve</span> <span class=\"kn\">infix</span> <span class=\"bp\">`</span> <span class=\"bp\">×</span> <span class=\"bp\">`</span> <span class=\"o\">:</span> <span class=\"mi\">50</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">Model</span>\n<span class=\"n\">class</span>  <span class=\"n\">Model</span> <span class=\"o\">(</span><span class=\"n\">M</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">mem</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">subset</span><span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">phi</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">V</span><span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">binary_union</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">union</span><span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">intersection</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">imp</span><span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">pair</span><span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">single</span><span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">ordered_pair</span><span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">product</span><span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">Rel</span><span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span>  <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">dom</span><span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">inv</span><span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">join</span><span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">SI</span><span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"o\">)</span>  <span class=\"c\">/-</span><span class=\"cm\"> singleton_image -/</span>\n<span class=\"o\">(</span><span class=\"n\">subset_relation</span><span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">equality_relation</span><span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">proj1</span><span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">proj2</span><span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n<span class=\"o\">(</span> <span class=\"n\">single_definition</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">single</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">pair</span> <span class=\"n\">x</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"kn\">infix</span>  <span class=\"err\">∈</span> <span class=\"o\">:=</span>  <span class=\"n\">mem</span> <span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"kn\">infix</span> <span class=\"err\">∪</span> <span class=\"o\">:=</span> <span class=\"n\">binary_union</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"kn\">infix</span> <span class=\"err\">∩</span> <span class=\"o\">:=</span> <span class=\"n\">intersection</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"kn\">infix</span> <span class=\"bp\">×</span> <span class=\"o\">:=</span> <span class=\"n\">product</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"kn\">infix</span> <span class=\"err\">⊆</span> <span class=\"o\">:=</span> <span class=\"n\">subset</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">extensionality_axiom</span><span class=\"o\">:</span>  <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">a</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">a</span><span class=\"bp\">=</span><span class=\"n\">b</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">binary_union_axiom</span><span class=\"o\">:</span>   <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">a</span> <span class=\"err\">∪</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">a</span> <span class=\"bp\">∨</span>  <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">b</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">intersection_axiom</span><span class=\"o\">:</span>  <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">a</span> <span class=\"err\">∩</span>  <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">a</span> <span class=\"bp\">∧</span>  <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">b</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">complement_axiom</span><span class=\"o\">:</span>  <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">c</span> <span class=\"n\">a</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">a</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">implication_axiom</span><span class=\"o\">:</span>    <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">imp</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">b</span><span class=\"o\">)))</span>\n<span class=\"o\">(</span><span class=\"n\">emptyset_axiom</span><span class=\"o\">:</span>   <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">phi</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">pairing_axiom</span><span class=\"o\">:</span>  <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">pair</span> <span class=\"n\">a</span> <span class=\"n\">b</span>  <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">∨</span>  <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)))</span>\n<span class=\"o\">(</span><span class=\"n\">ordered_pairing_axiom</span><span class=\"o\">:</span>   <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">ordered_pair</span> <span class=\"n\">x</span> <span class=\"n\">y</span>  <span class=\"bp\">=</span> <span class=\"n\">pair</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">pair</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)))</span>\n<span class=\"o\">(</span><span class=\"n\">domain</span><span class=\"o\">:</span>  <span class=\"bp\">∀</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">Rel</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">dom</span> <span class=\"n\">R</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">ordered_pair</span> <span class=\"n\">x</span> <span class=\"n\">y</span>  <span class=\"err\">∈</span> <span class=\"n\">R</span><span class=\"o\">))))</span>\n<span class=\"o\">(</span><span class=\"n\">V_definition</span><span class=\"o\">:</span>   <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">V</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">Rel_definition</span><span class=\"o\">:</span>  <span class=\"bp\">∀</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"o\">(</span> <span class=\"n\">Rel</span> <span class=\"n\">X</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"err\">∈</span> <span class=\"n\">X</span> <span class=\"bp\">→</span>  <span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,(</span><span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">ordered_pair</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">))))</span>\n<span class=\"o\">(</span><span class=\"n\">product_axiom</span><span class=\"o\">:</span>   <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"err\">∈</span> <span class=\"n\">x</span> <span class=\"bp\">×</span> <span class=\"n\">y</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"err\">∈</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">u</span> <span class=\"bp\">=</span> <span class=\"n\">ordered_pair</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">)))</span>\n<span class=\"o\">(</span><span class=\"n\">inverse_axiom</span><span class=\"o\">:</span>   <span class=\"bp\">∀</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">Rel</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">ordered_pair</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"err\">∈</span> <span class=\"n\">inv</span> <span class=\"n\">R</span> <span class=\"bp\">↔</span> <span class=\"n\">ordered_pair</span> <span class=\"n\">y</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">R</span><span class=\"o\">)))</span>\n<span class=\"o\">(</span><span class=\"n\">equality_relation_axiom</span><span class=\"o\">:</span>  <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">equality_relation</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">ordered_pair</span> <span class=\"n\">z</span> <span class=\"n\">z</span> <span class=\"o\">)))</span>\n<span class=\"o\">(</span><span class=\"n\">subset_definition</span><span class=\"o\">:</span>   <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">⊆</span> <span class=\"n\">y</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"err\">∈</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">z</span> <span class=\"err\">∈</span> <span class=\"n\">y</span><span class=\"o\">)))</span>\n<span class=\"o\">(</span><span class=\"n\">subset_relation_axiom</span><span class=\"o\">:</span>  <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">ordered_pair</span> <span class=\"n\">x</span> <span class=\"n\">y</span>  <span class=\"err\">∈</span> <span class=\"n\">subset_relation</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"err\">⊆</span> <span class=\"n\">y</span><span class=\"o\">))</span>\n <span class=\"o\">(</span><span class=\"n\">union_axiom</span><span class=\"o\">:</span>   <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">union</span> <span class=\"n\">y</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"err\">∈</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">z</span><span class=\"o\">)))</span>\n\n <span class=\"c\">/-</span><span class=\"cm\"> end of class definition because next line doesn&#39;t declare a member -/</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">M</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Model</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"n\">X</span> <span class=\"n\">R</span> <span class=\"n\">W</span><span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Model</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">extensionality_axiom</span>\n\n\n\n<span class=\"kn\">end</span> <span class=\"n\">Model</span>\n</pre></div>",
        "id": 194359980,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1587067541
    },
    {
        "content": "<p>I only see one <code>open Model</code>!</p>",
        "id": 194360169,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1587067616
    },
    {
        "content": "<p>Yes,  but doesn't the section Model   command have the effect of opening the section?</p>",
        "id": 194360251,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1587067650
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284844\">Michael Beeson</span> <a href=\"#narrow/stream/113488-general/topic/subst.2Eeq/near/194359707\" title=\"#narrow/stream/113488-general/topic/subst.2Eeq/near/194359707\">said</a>:</p>\n<blockquote>\n<p>Also if I try to include the line</p>\n<p>(@[simp]  single_definition: ∀ x, (single x = pair x x) )</p>\n<p>it causes an error, while  without \"@[simp]\"   all is fine.</p>\n</blockquote>\n<p>you won't  need to tag these definitions with <code>simp</code>, the tag <code>@[simp]</code> can be used on lemmas or theorems to make the simplifier try to apply them in later proofs.</p>",
        "id": 194360357,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1587067686
    },
    {
        "content": "<p>Yes, the <code>open Model</code> command refers to the <code>class Model</code> here</p>",
        "id": 194360414,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1587067716
    },
    {
        "content": "<p>So  maybe it's crazy to name the section and the class both Model.</p>",
        "id": 194360516,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1587067758
    },
    {
        "content": "<p>Without it you can't refer to <code>extensionality_axiom</code> without prefixing it <code>Model.extensionality_axiom</code>, its a convenience thing only.</p>",
        "id": 194360541,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1587067776
    },
    {
        "content": "<p>So you can \"open\"  either a section or a class,  and you can \"end\"  a section.    I can't, however, either \"close\" or \"end\" a class afer opening it.</p>",
        "id": 194361004,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1587068008
    },
    {
        "content": "<p>Oh wait, maybe you can't \"open\" a section; only a class.</p>",
        "id": 194361075,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1587068042
    },
    {
        "content": "<p>You are not using any of the functionality of sections, and if you don't really know what they are then it might be best to remove <code>section Model</code> and <code>end Model</code> completely. I don't know what you think they're doing, but they are just some organisational principle for managing variables in a principled manner, and in particular <code>section Model/end Model</code> may as well say <code>section xyzzy/end xyzzy</code>; they do not affect your Model class in any way.</p>",
        "id": 194361426,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587068220
    },
    {
        "content": "<p><a href=\"https://leanprover.github.io/theorem_proving_in_lean/interacting_with_lean.html#more-on-sections\" title=\"https://leanprover.github.io/theorem_proving_in_lean/interacting_with_lean.html#more-on-sections\">sections</a></p>",
        "id": 194361519,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587068280
    },
    {
        "content": "<p>What I thought they were doing was limiting the scope of my variables to the section.</p>",
        "id": 194361581,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1587068292
    },
    {
        "content": "<p>Right.</p>",
        "id": 194361646,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587068334
    },
    {
        "content": "<p>But regardless of sections,  there must be a way to undo the effect of \"opening\" a class.</p>",
        "id": 194361771,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1587068391
    },
    {
        "content": "<p>But given that you don't have anything going on outside the section, or any reason to limit the scope of the variables to any subset of your code right now, why not just remove it for now?</p>",
        "id": 194361774,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587068394
    },
    {
        "content": "<p>I don't know what you think \"opening\" a class means, but <code>open foo</code> simply means that you no longer have to type <code>foo.bar</code>, you can just type <code>bar</code> instead.</p>",
        "id": 194361943,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587068454
    },
    {
        "content": "<p>I put a section command in just in accordance with the general principle that global variables are bad, bad, bad.</p>",
        "id": 194361947,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1587068456
    },
    {
        "content": "<p>I don't think that these are the kind of variables for which that principle holds.</p>",
        "id": 194362007,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587068480
    },
    {
        "content": "<p>Well it doesn't matter anyway as this is never going to be more than a one-file project.</p>",
        "id": 194362150,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1587068535
    },
    {
        "content": "<p>You are not really globally defining X to mean anything when you write <code>variable (X : foo)</code>, you're just telling Lean that if it sees an <code>X</code> in the middle of a definition and you didn't bother saying what it was, then it's a <code>foo</code>.</p>",
        "id": 194362174,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587068546
    },
    {
        "content": "<p>Well,  if six months from now in another file I forget to declare X   and I have inputted this file then Lean will infer the wrong type for X and I might waste an hour figuring out what's going on.</p>",
        "id": 194362300,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1587068609
    },
    {
        "content": "<p>That is not true. That's what I'm saying.</p>",
        "id": 194362344,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587068633
    },
    {
        "content": "<p>from the code i've seen, sections are mostly used for managing <code>variable</code> commands, and namespaces are mostly used for avoiding global variables (<a href=\"https://leanprover.github.io/theorem_proving_in_lean/dependent_type_theory.html#namespaces\" title=\"https://leanprover.github.io/theorem_proving_in_lean/dependent_type_theory.html#namespaces\">https://leanprover.github.io/theorem_proving_in_lean/dependent_type_theory.html#namespaces</a>)</p>",
        "id": 194362415,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1587068653
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variable</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">bool</span><span class=\"o\">)</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"n\">X</span> <span class=\"bp\">+</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"n\">two_mul</span> <span class=\"n\">X</span> <span class=\"c1\">-- here X is an integer</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- here it&#39;s a bool, but only because we didn&#39;t say what it was</span>\n</pre></div>",
        "id": 194362448,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587068671
    },
    {
        "content": "<p>If you import this file in another file then <code>variable (X : bool)</code> will no longer apply, and if you use <code>X</code> without saying what it is you'll get an error. <code>variable</code> is just a local trick in a file to save you having to always say that X is a bool in the theorems you're proving <em>in this file</em></p>",
        "id": 194362579,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587068741
    },
    {
        "content": "<p>It's more a device to save typing than anything else.</p>",
        "id": 194362748,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587068813
    },
    {
        "content": "<p>Aha!   So  to speak,  all \"variable declarations\"  are static,   in the sense that their scope is limited to a file. </p>\n<p>That has the possibly nasty effect that   \"input foo\"  is not the same thing as pasting the contents of foo where you <br>\nhave the input command.</p>",
        "id": 194362921,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1587068886
    },
    {
        "content": "<p>Lean has a set-up for handling notation, and it's not what you are using.</p>",
        "id": 194362969,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587068908
    },
    {
        "content": "<p>There is no input command, there is only an import command, and it can only take place at the very top of the file, so this is not an issue.</p>",
        "id": 194363030,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587068942
    },
    {
        "content": "<p>I mean \"import\".     </p>\n<p>Now if  file1  has a variable declaration of X and file2  has \"import file1\"  then the declaration of X <br>\nwill not have effect in file 2.  But if I replace the import command with the contents of file 1  then <br>\nthe declaration of X will  have effect in  file 2.</p>",
        "id": 194363339,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1587069051
    },
    {
        "content": "<p>Regarding \"Lean has a way and I'm not using it\",   I'm here on Zulip to learn Lean, so please point me in the right direction.</p>",
        "id": 194363430,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1587069086
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">class</span> <span class=\"n\">Model</span> <span class=\"o\">(</span><span class=\"n\">M</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"n\">has_mem</span> <span class=\"n\">M</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">has_subset</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">has_union</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">has_inter</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">phi</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">V</span><span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n<span class=\"bp\">...</span>\n</pre></div>",
        "id": 194363476,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587069109
    },
    {
        "content": "<p><code>binary_union</code> is called <code>union</code>, and <code>union</code> is called <code>Union</code></p>",
        "id": 194363699,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587069206
    },
    {
        "content": "<p>Well,  but I'm trying to write a self-contained first-order theory.  I don't want to import any axioms from elsewhere about the primitive symbols.</p>",
        "id": 194363848,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1587069271
    },
    {
        "content": "<p>There are no axioms. The things you're extending are just notation.</p>",
        "id": 194363879,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587069289
    },
    {
        "content": "<p>So your point is that by using extends has_mem,   I could avoid the need to declare (infix  ∈ :=  mem )     ?</p>",
        "id": 194364055,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1587069372
    },
    {
        "content": "<p>Right -- <code>has_mem</code> has done all that for you.</p>",
        "id": 194364076,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587069387
    },
    {
        "content": "<p>But \"(infix  ∈ :=  mem )\"  is not longer than  \"extends has_mem\"</p>",
        "id": 194364124,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1587069421
    },
    {
        "content": "<p>But anyway,  I understand now that I could do it that way, thanks.</p>",
        "id": 194364171,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1587069455
    },
    {
        "content": "<p>The advantage of doing it the way I'm suggesting is that you can use the notation immediately, even in the axioms for your class.</p>",
        "id": 194364184,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587069468
    },
    {
        "content": "<p>But I did use it in the axioms,  by putting the axioms after the (infix  ∈ :=  mem ) lines  (once someone showed me how to do that inside the class.</p>",
        "id": 194364271,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1587069513
    },
    {
        "content": "<p>I have no idea whether that will work in practice. I have never seen anyone declare infix notation within a class before.</p>",
        "id": 194364323,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587069546
    },
    {
        "content": "<p>Well,  it seems to work.   Thanks to the wizards here on Zulip.  <br>\nAnyway now I have TWO ways to do it so I am double happy.</p>",
        "id": 194364407,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1587069585
    },
    {
        "content": "<p>There are however other things that I do not know even ONE way to do.   For example  use  notation {a, b}  for pair a b. <br>\nThis has something to do with \"foldr\"    and I stared at the example in  TPIL  quite a while but could not make it work.<br>\nSo can we do that too with \"extends\" ?</p>",
        "id": 194364539,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1587069650
    },
    {
        "content": "<p>That notation is already taken in Lean, so it will be touch and go if you try to redefine it.</p>",
        "id": 194364578,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587069680
    },
    {
        "content": "<p>Actually, it already means more than one thing, so maybe it will be fine ;-)</p>",
        "id": 194364617,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587069708
    },
    {
        "content": "<p>the foldr example is the one for lists, right?</p>",
        "id": 194364738,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1587069774
    },
    {
        "content": "<p>Yes, that's the example I was staring at.</p>",
        "id": 194364768,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1587069795
    },
    {
        "content": "<p>I think the extends way will require less typing in the long run, you won't have to redeclare the notation to use it later. When I tried it I had to help lean with the types a bit more though: e.g.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">section</span> <span class=\"n\">Model</span>\n\n<span class=\"n\">class</span> <span class=\"n\">Model</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"n\">has_mem</span> <span class=\"n\">M</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">extensionality_axiom</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">a</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">a</span><span class=\"bp\">=</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"c1\">-- I had to add : M after a b here</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Model</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Model</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">extensionality_axiom</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">b</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">Model</span>\n</pre></div>",
        "id": 194364804,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1587069821
    },
    {
        "content": "<p>in that case the notation is a bit more involved because lists can have arbitrary length. for pairs you can get away with less involved notation commands.</p>",
        "id": 194364932,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1587069888
    },
    {
        "content": "<p>it has been a while since i have fiddled with notation, and getting the priorities right is always a bit tricky ...</p>",
        "id": 194365276,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1587070056
    },
    {
        "content": "<p>Anyway this is not a serious problem for me.   I'm fine with typing \"pair a b\"  instead of {a, b}  for the duration of this exercise.</p>",
        "id": 194366101,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1587070449
    },
    {
        "content": "<p>taking your example from above, this works (for pair):</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">section</span> <span class=\"n\">Model</span>\n<span class=\"n\">class</span>  <span class=\"n\">Model</span> <span class=\"o\">(</span><span class=\"n\">M</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">mem</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">subset</span><span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">phi</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">V</span><span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">binary_union</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">union</span><span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">intersection</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">imp</span><span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">pair</span><span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">single</span><span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">ordered_pair</span><span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">product</span><span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">Rel</span><span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span>  <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">dom</span><span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">inv</span><span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">join</span><span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">SI</span><span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"o\">)</span>  <span class=\"c\">/-</span><span class=\"cm\"> singleton_image -/</span>\n<span class=\"o\">(</span><span class=\"n\">subset_relation</span><span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">equality_relation</span><span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">proj1</span><span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">proj2</span><span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">single_definition</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">single</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">pair</span> <span class=\"n\">x</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"kn\">infix</span> <span class=\"err\">∈</span> <span class=\"o\">:=</span> <span class=\"n\">mem</span> <span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"kn\">infix</span> <span class=\"err\">∪</span> <span class=\"o\">:=</span> <span class=\"n\">binary_union</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"kn\">infix</span> <span class=\"err\">∩</span> <span class=\"o\">:=</span> <span class=\"n\">intersection</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"kn\">infix</span> <span class=\"bp\">×</span> <span class=\"o\">:=</span> <span class=\"n\">product</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"kn\">infix</span> <span class=\"err\">⊆</span> <span class=\"o\">:=</span> <span class=\"n\">subset</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"kn\">notation</span> <span class=\"bp\">`</span><span class=\"o\">{</span><span class=\"bp\">`</span> <span class=\"n\">a</span> <span class=\"bp\">`</span><span class=\"o\">,</span><span class=\"bp\">`</span> <span class=\"n\">b</span> <span class=\"bp\">`</span><span class=\"o\">}</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">pair</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">extensionality_axiom</span><span class=\"o\">:</span>  <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">a</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">a</span><span class=\"bp\">=</span><span class=\"n\">b</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">binary_union_axiom</span><span class=\"o\">:</span>   <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">a</span> <span class=\"err\">∪</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">a</span> <span class=\"bp\">∨</span>  <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">b</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">intersection_axiom</span><span class=\"o\">:</span>  <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">a</span> <span class=\"err\">∩</span>  <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">a</span> <span class=\"bp\">∧</span>  <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">b</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">complement_axiom</span><span class=\"o\">:</span>  <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">c</span> <span class=\"n\">a</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">a</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">implication_axiom</span><span class=\"o\">:</span>    <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">imp</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">b</span><span class=\"o\">)))</span>\n<span class=\"o\">(</span><span class=\"n\">emptyset_axiom</span><span class=\"o\">:</span>   <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">phi</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">pairing_axiom</span><span class=\"o\">:</span>  <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)))</span>\n<span class=\"o\">(</span><span class=\"n\">ordered_pairing_axiom</span><span class=\"o\">:</span>   <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">ordered_pair</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">}}))</span>\n<span class=\"o\">(</span><span class=\"n\">domain</span><span class=\"o\">:</span>  <span class=\"bp\">∀</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">Rel</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">dom</span> <span class=\"n\">R</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">ordered_pair</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"err\">∈</span> <span class=\"n\">R</span><span class=\"o\">))))</span>\n<span class=\"o\">(</span><span class=\"n\">V_definition</span><span class=\"o\">:</span>   <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">V</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">Rel_definition</span><span class=\"o\">:</span>  <span class=\"bp\">∀</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"o\">(</span> <span class=\"n\">Rel</span> <span class=\"n\">X</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"err\">∈</span> <span class=\"n\">X</span> <span class=\"bp\">→</span>  <span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,(</span><span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">ordered_pair</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">))))</span>\n<span class=\"o\">(</span><span class=\"n\">product_axiom</span><span class=\"o\">:</span>   <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"err\">∈</span> <span class=\"n\">x</span> <span class=\"bp\">×</span> <span class=\"n\">y</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"err\">∈</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">u</span> <span class=\"bp\">=</span> <span class=\"n\">ordered_pair</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">)))</span>\n<span class=\"o\">(</span><span class=\"n\">inverse_axiom</span><span class=\"o\">:</span>   <span class=\"bp\">∀</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">Rel</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">ordered_pair</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"err\">∈</span> <span class=\"n\">inv</span> <span class=\"n\">R</span> <span class=\"bp\">↔</span> <span class=\"n\">ordered_pair</span> <span class=\"n\">y</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">R</span><span class=\"o\">)))</span>\n<span class=\"o\">(</span><span class=\"n\">equality_relation_axiom</span><span class=\"o\">:</span>  <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">equality_relation</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">ordered_pair</span> <span class=\"n\">z</span> <span class=\"n\">z</span> <span class=\"o\">)))</span>\n<span class=\"o\">(</span><span class=\"n\">subset_definition</span><span class=\"o\">:</span>   <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">⊆</span> <span class=\"n\">y</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"err\">∈</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">z</span> <span class=\"err\">∈</span> <span class=\"n\">y</span><span class=\"o\">)))</span>\n<span class=\"o\">(</span><span class=\"n\">subset_relation_axiom</span><span class=\"o\">:</span>  <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">ordered_pair</span> <span class=\"n\">x</span> <span class=\"n\">y</span>  <span class=\"err\">∈</span> <span class=\"n\">subset_relation</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"err\">⊆</span> <span class=\"n\">y</span><span class=\"o\">))</span>\n <span class=\"o\">(</span><span class=\"n\">union_axiom</span><span class=\"o\">:</span>   <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">union</span> <span class=\"n\">y</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"err\">∈</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">z</span><span class=\"o\">)))</span>\n</pre></div>\n\n\n<p>not sure if this works well, though.</p>",
        "id": 194366141,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1587070467
    },
    {
        "content": "<p>Great!   Thank you very much!  That is cool.   No \"foldr\"  involved.</p>",
        "id": 194366273,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1587070537
    },
    {
        "content": "<p>yes, the <code>foldr</code> handles lists of arbitrary lengths</p>",
        "id": 194366330,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1587070562
    },
    {
        "content": "<p>is intuitionistic NF set theory this? <a href=\"http://us.metamath.org/nfeuni/mmnf.html\" title=\"http://us.metamath.org/nfeuni/mmnf.html\">http://us.metamath.org/nfeuni/mmnf.html</a></p>",
        "id": 194369201,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1587072183
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110025\">Andrew Ashworth</span> <a href=\"#narrow/stream/113488-general/topic/subst.2Eeq/near/194369201\" title=\"#narrow/stream/113488-general/topic/subst.2Eeq/near/194369201\">said</a>:</p>\n<blockquote>\n<p>is intuitionistic NF set theory this? <a href=\"http://us.metamath.org/nfeuni/mmnf.html\" title=\"http://us.metamath.org/nfeuni/mmnf.html\">http://us.metamath.org/nfeuni/mmnf.html</a></p>\n</blockquote>\n<p>No,  that is a finite axiomatization of classical NF.     If you want to know what NF is, look it up in Wikipedia or the Stanford Encyclopedia of Philosophy.   Intuitionistic NF is simply NF with only intuitionistic logic.</p>",
        "id": 194393042,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1587094594
    },
    {
        "content": "<p>Now I guess I have everything working.  Here is a small sample.   You will see that I had to repeat the notation command outside the class; if you remove it it doesn't work.   Also inside the classs it needs to be in parentheses and outside the class it may not be in parentheses.  God knows why.   Anyway,  this file and the larger file from which I abstracted it is working.   Now, I can move on to my original question about subst.eq for which this topic is named.   But not in this message.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">set_option</span> <span class=\"n\">default_priority</span> <span class=\"mi\">100</span>\n<span class=\"n\">reserve</span> <span class=\"kn\">infix</span> <span class=\"bp\">`</span> <span class=\"err\">∈</span> <span class=\"bp\">`</span> <span class=\"o\">:</span> <span class=\"mi\">49</span>\n<span class=\"n\">class</span>  <span class=\"n\">Model</span> <span class=\"o\">(</span><span class=\"n\">M</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">mem</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">pair</span><span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">single</span><span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"kn\">infix</span>  <span class=\"err\">∈</span>  <span class=\"o\">:=</span>  <span class=\"n\">mem</span> <span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"kn\">notation</span> <span class=\"bp\">`</span><span class=\"o\">{</span><span class=\"bp\">`</span> <span class=\"n\">a</span> <span class=\"bp\">`</span><span class=\"o\">,</span><span class=\"bp\">`</span> <span class=\"n\">b</span> <span class=\"bp\">`</span><span class=\"o\">}</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">pair</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">extensionality_axiom</span><span class=\"o\">:</span>  <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">mem</span> <span class=\"n\">x</span> <span class=\"n\">a</span> <span class=\"bp\">↔</span> <span class=\"n\">mem</span> <span class=\"n\">x</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">a</span><span class=\"bp\">=</span><span class=\"n\">b</span><span class=\"o\">)</span>\n<span class=\"o\">(</span> <span class=\"n\">single_definition</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">single</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">x</span><span class=\"o\">})</span>\n<span class=\"o\">(</span><span class=\"kn\">notation</span> <span class=\"bp\">`</span><span class=\"o\">{</span><span class=\"bp\">`</span> <span class=\"n\">a</span> <span class=\"bp\">`</span><span class=\"o\">,</span><span class=\"bp\">`</span> <span class=\"n\">b</span> <span class=\"bp\">`</span><span class=\"o\">}</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">pair</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Model</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">M</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Model</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"n\">X</span> <span class=\"n\">R</span> <span class=\"n\">W</span><span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">(</span><span class=\"n\">single_definition</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"kn\">notation</span> <span class=\"bp\">`</span><span class=\"o\">{</span><span class=\"bp\">`</span> <span class=\"n\">a</span> <span class=\"bp\">`</span><span class=\"o\">,</span><span class=\"bp\">`</span> <span class=\"n\">b</span> <span class=\"bp\">`</span><span class=\"o\">}</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">pair</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">single_definition_reverse</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">x</span><span class=\"o\">}</span>  <span class=\"bp\">=</span> <span class=\"n\">single</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n   <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">(</span><span class=\"n\">single_definition</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 194393122,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1587094729
    },
    {
        "content": "<p>I'd advise not attempting to use <code>{ ... , ... }</code> in custom notation. The core parser has special handling for braces, and you are just going to suffer down the line.</p>",
        "id": 194397384,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1587102686
    },
    {
        "content": "<p>If you want to use the braces notation, you should try to do it by implementing <code>has_insert</code> and <code>has_emptyc</code> instead</p>",
        "id": 194400775,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587106671
    },
    {
        "content": "<p>Two questions about the following code:   (1) Why after the declaration of constant h  does #check not return the type of h just declared<br>\nbut instead the more complicated type in the next line? </p>\n<p>The original post asked a further question which I have since withdrawn.  (It was dumb.)<br>\nBut I'd still like question (1) answered.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">set_option</span> <span class=\"n\">default_priority</span> <span class=\"mi\">100</span>\n<span class=\"n\">reserve</span> <span class=\"kn\">infix</span> <span class=\"bp\">`</span> <span class=\"err\">∈</span> <span class=\"bp\">`</span> <span class=\"o\">:</span> <span class=\"mi\">49</span>\n<span class=\"n\">class</span>  <span class=\"n\">Model</span> <span class=\"o\">(</span><span class=\"n\">M</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"o\">)</span>  <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">mem</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">pair</span><span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">single</span><span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"kn\">infix</span>  <span class=\"err\">∈</span>  <span class=\"o\">:=</span>  <span class=\"n\">mem</span> <span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"kn\">notation</span> <span class=\"bp\">`</span><span class=\"o\">{</span><span class=\"bp\">`</span> <span class=\"n\">a</span> <span class=\"bp\">`</span><span class=\"o\">,</span><span class=\"bp\">`</span> <span class=\"n\">b</span> <span class=\"bp\">`</span><span class=\"o\">}</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">pair</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">extensionality_axiom</span><span class=\"o\">:</span>  <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">mem</span> <span class=\"n\">x</span> <span class=\"n\">a</span> <span class=\"bp\">↔</span> <span class=\"n\">mem</span> <span class=\"n\">x</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">a</span><span class=\"bp\">=</span><span class=\"n\">b</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">pairing_axiom</span><span class=\"o\">:</span>  <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">∨</span>  <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)))</span>\n<span class=\"o\">(</span> <span class=\"n\">single_definition</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">single</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">x</span><span class=\"o\">})</span>\n<span class=\"o\">(</span><span class=\"kn\">notation</span> <span class=\"bp\">`</span><span class=\"o\">{</span><span class=\"bp\">`</span> <span class=\"n\">a</span> <span class=\"bp\">`</span><span class=\"o\">,</span><span class=\"bp\">`</span> <span class=\"n\">b</span> <span class=\"bp\">`</span><span class=\"o\">}</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">pair</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Model</span>\n<span class=\"kn\">infix</span>  <span class=\"err\">∈</span> <span class=\"o\">:=</span>  <span class=\"n\">mem</span>\n<span class=\"kn\">notation</span> <span class=\"bp\">`</span><span class=\"o\">{</span><span class=\"bp\">`</span> <span class=\"n\">a</span> <span class=\"bp\">`</span><span class=\"o\">,</span><span class=\"bp\">`</span> <span class=\"n\">b</span> <span class=\"bp\">`</span><span class=\"o\">}</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">pair</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">M</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Model</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"n\">X</span> <span class=\"n\">R</span> <span class=\"n\">W</span><span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">(</span><span class=\"n\">single_definition</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">single_definition_reverse</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">x</span><span class=\"o\">}</span>  <span class=\"bp\">=</span> <span class=\"n\">single</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n   <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">(</span><span class=\"n\">single_definition</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">single_definition</span> <span class=\"n\">x</span>\n\n<span class=\"kn\">constant</span> <span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">single</span> <span class=\"n\">y</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">h</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">h</span> <span class=\"n\">M</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"o\">{</span><span class=\"n\">y</span><span class=\"o\">,</span><span class=\"n\">y</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"n\">single_definition</span> <span class=\"n\">y</span> <span class=\"bp\">▸</span> <span class=\"n\">h</span> <span class=\"n\">M</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n</pre></div>",
        "id": 194400841,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1587106711
    },
    {
        "content": "<p>OK but notation is not the issue here.    If I take out the braces and just use pair  I will still have the problem with not<br>\nunderstanding the type of h.</p>",
        "id": 194401044,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1587106918
    },
    {
        "content": "<p>And besides I am not going \"down the line\" very far with this.   I'm only going to prove a few theorems in this one file to see what <br>\nI can learn.   And it's easier to read the familiar notation {x,y} for unordered pair.</p>",
        "id": 194401119,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1587106977
    },
    {
        "content": "<p>The first question I asked,  how to prove x \\in {x,x},    I've deleted.    You don't have  x \\in single x  to <br>\nwork with .   That will only be available AFTER you prove x \\in {x,x} from the pairing axiom.   So never mind <br>\nthat now-deleted question.</p>",
        "id": 194402017,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1587107645
    },
    {
        "content": "<p>Your constant <code>h</code> pulls in the variables <code>x</code> and <code>y</code> from the <code>variables</code> line in order to produce a universally quantified axiom asserting that <code>x \\in single y</code> for all x and y, which is certainly not what you want</p>",
        "id": 194402463,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587108001
    },
    {
        "content": "<p>You should let <code>h</code> be a variable too</p>",
        "id": 194402533,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587108034
    },
    {
        "content": "<p>I don't want to keep that line more than a few minutes, or however long it takes to understand Lean's response.   It's not for any other purpose.</p>",
        "id": 194402602,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1587108100
    },
    {
        "content": "<p>that's what <code>variable</code> is for</p>",
        "id": 194402610,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587108116
    },
    {
        "content": "<p><code>constant</code> is basically a synonym of <code>axiom</code></p>",
        "id": 194402654,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587108127
    },
    {
        "content": "<p>and it is easy to accidentally write inconsistent axioms so we try to avoid these commands entirely</p>",
        "id": 194402681,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587108160
    },
    {
        "content": "<p>If you want to scope your <code>variable</code> declarations to a portion of the file, use <code>section ... end</code></p>",
        "id": 194402714,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587108201
    },
    {
        "content": "<p>So if I write 'variable'  instead of 'constant' there then Lean responds to the check as I expected,  differently than with 'constant'.</p>",
        "id": 194402817,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1587108277
    },
    {
        "content": "<p>If you want a temporary notation, use <code>local notation</code> instead of <code>notation</code>. This will override all other uses of the notation, so you probably won't be able to use <code>{x | p x}</code> or <code>{x // p x}</code> or <code>{x, y, z}</code> on sets, finsets and other such things, until the end of the enclosing section</p>",
        "id": 194402860,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587108307
    },
    {
        "content": "<p>We really should remove <code>axiom</code> and <code>constant</code>. :-)</p>",
        "id": 194402864,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1587108319
    },
    {
        "content": "<p>Or at least attach warning lights to them. :-)</p>",
        "id": 194402882,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1587108330
    },
    {
        "content": "<p>I'm never using 'constant'  in files I intend to keep more than 15 minutes.</p>",
        "id": 194402885,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1587108334
    },
    {
        "content": "<p>There is a good reason for <code>axiom</code> and <code>constant</code> to exist</p>",
        "id": 194402888,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587108335
    },
    {
        "content": "<p>I appreciate their uses --- just we seem to see lots of people learning Lean using them in unusual ways.</p>",
        "id": 194402955,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1587108364
    },
    {
        "content": "<p>Well,  I learned of their existence by reading Theorem Proving in Lean,  not by reading source files.</p>",
        "id": 194402958,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1587108365
    },
    {
        "content": "<p>I don't know how we could make them easier to use correctly</p>",
        "id": 194403035,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587108420
    },
    {
        "content": "<p>The usage in TPIL is also an important one, where you just want to posit some things and not worry about setting them up</p>",
        "id": 194403059,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587108457
    },
    {
        "content": "<p>Exactly,  that's what I'm doing here.</p>",
        "id": 194403077,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1587108476
    },
    {
        "content": "<p>but you can usually get the equivalent by replacing <code>constant foo : type</code> with <code>def foo : type := sorry</code></p>",
        "id": 194403146,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587108489
    },
    {
        "content": "<p>and that at least gives you a nice warning that you are cheating</p>",
        "id": 194403164,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587108503
    },
    {
        "content": "<p>In your example file, I could see the things at the top of the file being constants and axioms, but the stuff at the bottom should definitely be variables</p>",
        "id": 194403309,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587108622
    },
    {
        "content": "<p>Mario,   you said that my constant declaration produces a proof of a universally quantified formula.   That accounts for the x y in the <br>\nnext line and the M comes from the implicit parameter in the variable declaration.</p>",
        "id": 194403329,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1587108634
    },
    {
        "content": "<p>If you are using a one letter name, that's a strong indication that you want a variable, because <code>constant</code>s go into the global namespace</p>",
        "id": 194403362,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587108668
    },
    {
        "content": "<p>all <code>constant</code>, <code>axiom</code>, <code>def</code>, <code>theorem</code> declarations go into the global environment, and there is no local context there. So you have to universally quantify, nothing else would make sense</p>",
        "id": 194403436,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587108724
    },
    {
        "content": "<p>The stuff at the bottom is intended to last 15 minutes only so it doesn't matter.    And now that you've explained that <br>\nmy constant h  produces a proof of a universally quantified formula,  I understand the output.   And the only thing yet to do <br>\nis look at the source code that accomplishes that.</p>",
        "id": 194403529,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1587108761
    },
    {
        "content": "<p>just replace <code>constant</code> with <code>variable</code> and everything else should work</p>",
        "id": 194403580,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587108805
    },
    {
        "content": "<p>and also <code>h M x y</code> with <code>h</code></p>",
        "id": 194403600,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587108828
    },
    {
        "content": "<p>Regarding the stuff  \"at the top\" of the file,   there was yesterday a lot of discussion about how to formalize a first-order theory <br>\nin lean.   Plan A:   constants and axioms.    Plan B:  use a structure.    Plan C:  use a class.   So this code is using Plan C.  And I also<br>\nimplemented Plan A.</p>",
        "id": 194403650,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1587108848
    },
    {
        "content": "<p>Yes,  I already tried replacing constant with variable and saw that it does work.    So thank you (and the rest of you) for <br>\nexplaining this.   I guess I have this straight now.</p>",
        "id": 194403718,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1587108911
    },
    {
        "content": "<p>For an industrial strength implementation, something that is going into mathlib, you should use plan B or plan C. But for your own file plan A is probably easier</p>",
        "id": 194403731,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587108924
    },
    {
        "content": "<p>in this particular case I think plan C is good because it will give you access to all the notations without much difficulty</p>",
        "id": 194403846,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587109003
    },
    {
        "content": "<p>You could look at <code>set_theory.zfc</code> for inspiration on setting up set theory</p>",
        "id": 194403865,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587109025
    },
    {
        "content": "<p>In the following code,  the inference by eq.subst in the last line fails,  though its arguments are as desired as shown by the <br>\npreceding #check commands.   I know the reason for this failure but not the cure.   The reason is that eq.subst takes two <br>\narguments,  the first an equality x= y and the second of the form P x,   and produces P y.   The elaborator uses higher-order unification to synthesize the appropriate P  in case the second argument doesn't already have the form of an application to x.    In the example at hand,  it has to synthesize P = \\lambda z. x \\in z,   which is too much for it to manage.  That is the interpretation of the error you get, which ends up with \"but the expected type must be shown\".    Can anyone tell me how to fix this? </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">set_option</span> <span class=\"n\">default_priority</span> <span class=\"mi\">100</span>\n<span class=\"n\">reserve</span> <span class=\"kn\">infix</span> <span class=\"bp\">`</span> <span class=\"err\">∈</span> <span class=\"bp\">`</span> <span class=\"o\">:</span> <span class=\"mi\">49</span>\n<span class=\"n\">class</span>  <span class=\"n\">Model</span> <span class=\"o\">(</span><span class=\"n\">M</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"o\">)</span>  <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">mem</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">pair</span><span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">single</span><span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"kn\">infix</span>  <span class=\"err\">∈</span>  <span class=\"o\">:=</span>  <span class=\"n\">mem</span> <span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"kn\">notation</span> <span class=\"bp\">`</span><span class=\"o\">{</span><span class=\"bp\">`</span> <span class=\"n\">a</span> <span class=\"bp\">`</span><span class=\"o\">,</span><span class=\"bp\">`</span> <span class=\"n\">b</span> <span class=\"bp\">`</span><span class=\"o\">}</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">pair</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">extensionality_axiom</span><span class=\"o\">:</span>  <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">mem</span> <span class=\"n\">x</span> <span class=\"n\">a</span> <span class=\"bp\">↔</span> <span class=\"n\">mem</span> <span class=\"n\">x</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">a</span><span class=\"bp\">=</span><span class=\"n\">b</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">pairing_axiom</span><span class=\"o\">:</span>  <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">∨</span>  <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)))</span>\n<span class=\"o\">(</span> <span class=\"n\">single_definition</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">single</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">x</span><span class=\"o\">})</span>\n<span class=\"o\">(</span><span class=\"kn\">notation</span> <span class=\"bp\">`</span><span class=\"o\">{</span><span class=\"bp\">`</span> <span class=\"n\">a</span> <span class=\"bp\">`</span><span class=\"o\">,</span><span class=\"bp\">`</span> <span class=\"n\">b</span> <span class=\"bp\">`</span><span class=\"o\">}</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">pair</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Model</span>\n<span class=\"kn\">infix</span>  <span class=\"err\">∈</span> <span class=\"o\">:=</span>  <span class=\"n\">mem</span>\n<span class=\"kn\">notation</span> <span class=\"bp\">`</span><span class=\"o\">{</span><span class=\"bp\">`</span> <span class=\"n\">a</span> <span class=\"bp\">`</span><span class=\"o\">,</span><span class=\"bp\">`</span> <span class=\"n\">b</span> <span class=\"bp\">`</span><span class=\"o\">}</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">pair</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">M</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Model</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"n\">X</span> <span class=\"n\">R</span> <span class=\"n\">W</span><span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">(</span><span class=\"n\">single_definition</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n\n<span class=\"kn\">lemma</span> <span class=\"n\">single_definition_reverse</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">x</span><span class=\"o\">}</span>  <span class=\"bp\">=</span> <span class=\"n\">single</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n   <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">(</span><span class=\"n\">single_definition</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n\n <span class=\"kn\">variable</span> <span class=\"n\">h</span><span class=\"o\">:</span><span class=\"n\">x</span><span class=\"bp\">=</span><span class=\"n\">y</span>\n\n <span class=\"bp\">#</span><span class=\"kn\">check</span>  <span class=\"o\">(</span><span class=\"n\">pairing_axiom</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"c\">/-</span><span class=\"cm\"> x ∈ {y,y} -/</span>\n <span class=\"bp\">#</span><span class=\"kn\">check</span>  <span class=\"o\">(</span><span class=\"n\">single_definition_reverse</span> <span class=\"n\">M</span> <span class=\"n\">y</span> <span class=\"o\">)</span>   <span class=\"c\">/-</span><span class=\"cm\"> {y,y} = single y -/</span>\n\n <span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">subst</span>  <span class=\"o\">(</span><span class=\"n\">single_definition_reverse</span> <span class=\"n\">M</span> <span class=\"n\">y</span> <span class=\"o\">)</span>\n            <span class=\"o\">((</span><span class=\"n\">pairing_axiom</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">h</span><span class=\"o\">))</span>\n            <span class=\"c\">/-</span><span class=\"cm\"> expecting x ∈ single y  but get error -/</span>\n</pre></div>",
        "id": 194493937,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1587154311
    },
    {
        "content": "<p>Well, higher order unification is difficult. When it fails, you may need to explicitly provide the motive with the <code>@</code> annotation</p>",
        "id": 194495215,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1587155010
    },
    {
        "content": "<p>What are you trying to achieve with all those <code>eq.subst</code>? I've been using Lean for more than two years and I've written <code>eq.subst</code> anywhere.</p>",
        "id": 194495479,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1587155181
    },
    {
        "content": "<p>It looks very much like you're going against the flow of Lean.</p>",
        "id": 194495497,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1587155202
    },
    {
        "content": "<p>He is doing exercises to learn Lean</p>",
        "id": 194495577,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1587155267
    },
    {
        "content": "<p>I understand this. But they look like very weird exercises.</p>",
        "id": 194495661,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1587155306
    },
    {
        "content": "<p>Fighting Lean instead of letting it work for you.</p>",
        "id": 194495686,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1587155323
    },
    {
        "content": "<p>He is a logician doing logic? Such a person might be more concerned with the foundations than others in this chat <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 194495778,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1587155396
    },
    {
        "content": "<p>I have x \\in {y,y}  and I have {y,y} = single y,  and I want to conclude  x \\in single y.<br>\nI do not see any reason to consider that a \"weird\" exercise.   Just answer the question, if you can, please,  no need to comment on <br>\nwhether you like the question or not.</p>",
        "id": 194495863,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1587155423
    },
    {
        "content": "<p>Anyway, it is often the case that you need to help Lean unify things. This is discussed further in 6.10 of TPIL. You can go a long way with judicious use of the <code>@</code> operator and explicit expected type annotations using the <code>:</code> operator.</p>",
        "id": 194496087,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1587155541
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"o\">{</span><span class=\"n\">y</span><span class=\"o\">,</span><span class=\"n\">y</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">single</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">intro</span><span class=\"o\">,</span> <span class=\"n\">rwa</span> <span class=\"n\">single_definition</span> <span class=\"n\">y</span> <span class=\"o\">}</span>\n</pre></div>\n\n\n<p>See? If you explain what you want to achieve then people can help you, even if you don't like reading comments.</p>",
        "id": 194496353,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1587155691
    },
    {
        "content": "<p>My aim is not just to prove that little fact.   My aim is to understand how Lean works.   The tactic rwa has a very complicated definition.<br>\nI did not know about rwa  and I'm grateful to learn about it.  But my aim here is not just to get Lean to say some proof is correct.  I am trying to understand how Lean works.    eq.subst is no doubt important to rewrite_cfg which occurs in the first line of the definition of rwa. <br>\nIt is bound to be the \"guts\"  of equality reasoning.    That simple first-order equality reasoning requires higher-order unification that sometimes fails,  even on very simple examples, is interesting and not very wonderful.</p>",
        "id": 194497214,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1587156214
    },
    {
        "content": "<p>But you DID  give me a way to prove that example,  and again,  thank you for that.   <br>\nAndrew,  can it be done with @ as well,  without using a complicated tactic?</p>",
        "id": 194497363,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1587156284
    },
    {
        "content": "<p>You can try: <code>#check @eq.subst _ _ _ _ (single_definition_reverse M y ) ((pairing_axiom x y y).2 (or.inl h))</code></p>",
        "id": 194497474,
        "sender_full_name": "Koundinya Vajjha",
        "timestamp": 1587156352
    },
    {
        "content": "<p>Higher order unification not being very wonderful in Lean 3 was a deliberate design choice. There was a lot more effort put into heuristics for solving it in Lean 2, but it was impossible to figure out why things wouldn't unify. So it is much dumber, but easier to reason about in Lean 3. The time it takes to do unification is also much lower; which is actually something people worry about when reasoning about large proofs.</p>",
        "id": 194498359,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1587156768
    },
    {
        "content": "<p>It seems from the penultimate paragraph of 6.11 in TPIL, that the attribute of eq.subst itself is what is important here, <br>\nand it is set to [elab_as_eliminator], which apparently tells it to turn on higher-order unification.     I guess if you put @ in front of the call you are indicating that you are going to provide some types yourself.  No examples are given in TPIL 6.11 of how to do that.</p>",
        "id": 194498928,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1587157061
    },
    {
        "content": "<p>I think it's first introduced in section 2.9</p>",
        "id": 194499125,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1587157169
    },
    {
        "content": "<p>Ah,  at the end of 2.9 is the definition of @.  So  @eq.subst   is eq.subst with all arguments required explicitly.  <br>\nAnd you can see from #check @eq.subst  what the implicit arguments are.   And #check @@eq.subst only makes <br>\nsome of the implicit arguments be required.  So I'm beginning to see how this works.</p>",
        "id": 194500226,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1587157724
    },
    {
        "content": "<p>Thank you for pointing me to the end of 2.9.</p>",
        "id": 194500264,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1587157747
    },
    {
        "content": "<p>You are not providing \"types\".   You are providing  formerly-implicit arguments.    The text in section 6.11  could be clarified and <br>\na pointer to 2.9  would be nice.</p>",
        "id": 194500504,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1587157828
    },
    {
        "content": "<p>So then somewhere in the guts of rwa,   there is a workaround for this problem.   I'm guessing that higher-order unification <br>\nis abandoned and some good old-fashioned substitution is used.</p>",
        "id": 194500592,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1587157905
    },
    {
        "content": "<p>After all rewrite technology long predates higher-order unification and is much, much more efficient.</p>",
        "id": 194500701,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1587157959
    },
    {
        "content": "<p>The answer is probably in <a href=\"https://github.com/leanprover-community/lean/blob/2414e7acd83fd7699966ac19aacb4755ce9d5332/src/library/tactic/rewrite_tactic.cpp#L32-L101\" title=\"https://github.com/leanprover-community/lean/blob/2414e7acd83fd7699966ac19aacb4755ce9d5332/src/library/tactic/rewrite_tactic.cpp#L32-L101\">https://github.com/leanprover-community/lean/blob/2414e7acd83fd7699966ac19aacb4755ce9d5332/src/library/tactic/rewrite_tactic.cpp#L32-L101</a></p>",
        "id": 194501082,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1587158265
    },
    {
        "content": "<p>doesn't it look so much nicer in Lean 4? <a href=\"https://github.com/leanprover/lean4/blob/dd4fac2a7b337d75ddfcd42cc1bf02d2b3219a1d/src/Init/Lean/Meta/Tactic/Rewrite.lean\" title=\"https://github.com/leanprover/lean4/blob/dd4fac2a7b337d75ddfcd42cc1bf02d2b3219a1d/src/Init/Lean/Meta/Tactic/Rewrite.lean\">https://github.com/leanprover/lean4/blob/dd4fac2a7b337d75ddfcd42cc1bf02d2b3219a1d/src/Init/Lean/Meta/Tactic/Rewrite.lean</a></p>",
        "id": 194501299,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1587158421
    },
    {
        "content": "<p>Probably not <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 194501363,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1587158467
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"284844\">@Michael Beeson</span>  The major downside of proving lemmas with <code>#check</code> like this is that you haven't provided the expected type. This is crucial for the <code>elab_as_eliminator</code> elaboration method used for functions like <code>eq.subst</code>. You should use <code>example</code> or <code>theorem</code>  to state your goals, then provide proofs of them, rather than using <code>#check</code>. Or if you must use <code>#check</code>, use <code>#check (term : type)</code> instead of just <code>#check term</code>.</p>",
        "id": 194507817,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587162387
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284844\">Michael Beeson</span> <a href=\"#narrow/stream/113488-general/topic/subst.2Eeq/near/194500701\" title=\"#narrow/stream/113488-general/topic/subst.2Eeq/near/194500701\">said</a>:</p>\n<blockquote>\n<p>After all rewrite technology long predates higher-order unification and is much, much more efficient.</p>\n</blockquote>\n<p>Lean doesn't actually do higher order unification in the sense used in this sentence. The <code>elab_as_eliminator</code> method solves higher order unification problems using essentially a rewrite: When matching <code>P t</code> against the goal <code>|- g</code>, it finds all occurrences of <code>t</code> in <code>g</code>, replaces them with <code>x</code>, and <code>P</code> becomes <code>\\lam x,</code> of the result.</p>",
        "id": 194508304,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587162779
    },
    {
        "content": "<p>this is obviously not complete as a proof procedure but it is an easy heuristic to understand</p>",
        "id": 194508343,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587162826
    },
    {
        "content": "<p>If anyone cares,  here's the way to make eq.subst work correctly using @@.    What I learned from this:<br>\nHow @ and @@ work;  that first-order equality reasoning with eq.subst requires using @@ and helping out <br>\nthe higher-order unification by hand;  hence rwa  is sometimes better;  perhaps (probably) rwa doesn't use<br>\nhigher-order unification at all.   What I have yet to learn:  why eq.subst DOES work in some algebraic examples<br>\nI saw in TPIL,  and why they are easier than this apparently mindlessly simple example that doesn't work without using  @@.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">set_option</span> <span class=\"n\">default_priority</span> <span class=\"mi\">100</span>\n<span class=\"n\">reserve</span> <span class=\"kn\">infix</span> <span class=\"bp\">`</span> <span class=\"err\">∈</span> <span class=\"bp\">`</span> <span class=\"o\">:</span> <span class=\"mi\">49</span>\n<span class=\"n\">class</span>  <span class=\"n\">Model</span> <span class=\"o\">(</span><span class=\"n\">M</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"o\">)</span>  <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">mem</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">pair</span><span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">single</span><span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"kn\">infix</span>  <span class=\"err\">∈</span>  <span class=\"o\">:=</span>  <span class=\"n\">mem</span> <span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"kn\">notation</span> <span class=\"bp\">`</span><span class=\"o\">{</span><span class=\"bp\">`</span> <span class=\"n\">a</span> <span class=\"bp\">`</span><span class=\"o\">,</span><span class=\"bp\">`</span> <span class=\"n\">b</span> <span class=\"bp\">`</span><span class=\"o\">}</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">pair</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">extensionality_axiom</span><span class=\"o\">:</span>  <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">mem</span> <span class=\"n\">x</span> <span class=\"n\">a</span> <span class=\"bp\">↔</span> <span class=\"n\">mem</span> <span class=\"n\">x</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">a</span><span class=\"bp\">=</span><span class=\"n\">b</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">pairing_axiom</span><span class=\"o\">:</span>  <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">∨</span>  <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)))</span>\n<span class=\"o\">(</span> <span class=\"n\">single_definition</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">single</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">x</span><span class=\"o\">})</span>\n<span class=\"o\">(</span><span class=\"kn\">notation</span> <span class=\"bp\">`</span><span class=\"o\">{</span><span class=\"bp\">`</span> <span class=\"n\">a</span> <span class=\"bp\">`</span><span class=\"o\">,</span><span class=\"bp\">`</span> <span class=\"n\">b</span> <span class=\"bp\">`</span><span class=\"o\">}</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">pair</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Model</span>\n<span class=\"kn\">infix</span>  <span class=\"err\">∈</span> <span class=\"o\">:=</span>  <span class=\"n\">mem</span>\n<span class=\"kn\">notation</span> <span class=\"bp\">`</span><span class=\"o\">{</span><span class=\"bp\">`</span> <span class=\"n\">a</span> <span class=\"bp\">`</span><span class=\"o\">,</span><span class=\"bp\">`</span> <span class=\"n\">b</span> <span class=\"bp\">`</span><span class=\"o\">}</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">pair</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">M</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Model</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"n\">X</span> <span class=\"n\">R</span> <span class=\"n\">W</span><span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">(</span><span class=\"n\">single_definition</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n\n<span class=\"kn\">lemma</span> <span class=\"n\">single_definition_reverse</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">x</span><span class=\"o\">}</span>  <span class=\"bp\">=</span> <span class=\"n\">single</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n   <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">(</span><span class=\"n\">single_definition</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n\n <span class=\"kn\">variable</span> <span class=\"n\">h</span><span class=\"o\">:</span><span class=\"n\">x</span><span class=\"bp\">=</span><span class=\"n\">y</span>\n\n <span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">h</span>\n <span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">nat</span>\n\n <span class=\"bp\">#</span><span class=\"kn\">check</span>  <span class=\"o\">(</span><span class=\"n\">pairing_axiom</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"c\">/-</span><span class=\"cm\"> x ∈ {y,y} -/</span>\n <span class=\"bp\">#</span><span class=\"kn\">check</span>  <span class=\"o\">(</span><span class=\"n\">single_definition_reverse</span> <span class=\"n\">M</span> <span class=\"n\">y</span> <span class=\"o\">)</span>   <span class=\"c\">/-</span><span class=\"cm\"> {y,y} = single y -/</span>\n\n <span class=\"kn\">example</span><span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"o\">{</span><span class=\"n\">y</span><span class=\"o\">,</span><span class=\"n\">y</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">single</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"n\">intro</span><span class=\"o\">,</span> <span class=\"n\">rwa</span> <span class=\"n\">single_definition</span> <span class=\"n\">y</span><span class=\"o\">}</span>\n\n <span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">subst</span>\n <span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">@@</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">subst</span>\n\n  <span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">@@</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">subst</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">single_definition_reverse</span> <span class=\"n\">M</span> <span class=\"n\">y</span> <span class=\"o\">)</span>\n            <span class=\"o\">((</span><span class=\"n\">pairing_axiom</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">h</span><span class=\"o\">))</span>\n</pre></div>",
        "id": 194560508,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1587238824
    },
    {
        "content": "<blockquote>\n<p>that first-order equality reasoning with eq.subst requires using @@ and helping out the higher-order unification by hand</p>\n</blockquote>\n<p>This is not true. As I said above, what it requires is the expected type, which is almost always available when you use lean the way it is expecting you to</p>",
        "id": 194562583,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587242455
    },
    {
        "content": "<p>Lean's elaboration works from the outside in. It is important to understand this if you want to understand how to predict elaboration errors</p>",
        "id": 194562606,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587242514
    },
    {
        "content": "<p>Mario, could you elaborate on this latest message?</p>",
        "id": 194562723,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1587242672
    },
    {
        "content": "<p>Maybe with some tricky example?</p>",
        "id": 194562736,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1587242702
    },
    {
        "content": "<p>if you write <code>(a : A) = (b : B)</code>, Lean will try to coerce <code>b</code> to have type <code>A</code></p>",
        "id": 194562810,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587242814
    },
    {
        "content": "<p>Lean elaborates from left to right</p>",
        "id": 194562823,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587242834
    },
    {
        "content": "<p>I understand left to right. Mario wrote \"from the outside in\".</p>",
        "id": 194562883,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1587242902
    },
    {
        "content": "<p>The coercion arrows in <code>(n + n : int)</code> where <code>n : nat</code> go as <code>\\u n + \\u n</code> because lean is working from the outside in, it delays the coercion until it can't do anything else</p>",
        "id": 194562893,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587242922
    },
    {
        "content": "<p>I sort of know that, because it's useful to debug coercion issues. But I'd like to know more</p>",
        "id": 194562895,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1587242925
    },
    {
        "content": "<p>\"left to right\" is just \"outside in\" for prefix notation</p>",
        "id": 194562923,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587242974
    },
    {
        "content": "<p>There are more extreme examples where elaboration literally just stops because it did things in the wrong order</p>",
        "id": 194562924,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587242974
    },
    {
        "content": "<p>You could say left to right and outside in</p>",
        "id": 194562944,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587242998
    },
    {
        "content": "<p>or \"prefix traversal\" of the term if you know about that</p>",
        "id": 194562992,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587243019
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"c1\">-- works</span>\n<span class=\"kn\">example</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"c1\">-- fails</span>\n<span class=\"kn\">example</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"c1\">-- works</span>\n<span class=\"kn\">example</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"c1\">-- fails</span>\n<span class=\"kn\">example</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"c1\">-- fails</span>\n<span class=\"kn\">example</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"c1\">-- works</span>\n</pre></div>\n\n\n<p>To determine which of these will work, you have to know that <code>n.succ</code> fails immediately if the type of <code>n</code> is not yet known, and the elaboration proceeds in prefix order trying to assign types to all the subterms</p>",
        "id": 194563324,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587243499
    },
    {
        "content": "<p>The only difficult one for me is <code>example := ∀ n, (n.succ:ℕ) + n = n -- fails</code></p>",
        "id": 194563459,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1587243709
    },
    {
        "content": "<p>There, you know that <code>n.succ</code>, whatever it is, has type <code>nat</code>, but you still don't know what type <code>n</code> has</p>",
        "id": 194563527,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587243760
    },
    {
        "content": "<p>It looks to me the type ascription is outside the <code>n.succ</code> so it should come first</p>",
        "id": 194563538,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1587243771
    },
    {
        "content": "<p>it does</p>",
        "id": 194563551,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587243777
    },
    {
        "content": "<p>but it's not good enough because it might be <code>T.succ : T -&gt; nat</code> and <code>n</code> has type <code>T</code></p>",
        "id": 194563560,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587243798
    },
    {
        "content": "<p>I see</p>",
        "id": 194563603,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1587243849
    },
    {
        "content": "<p>the reason dot notation fails immediately is that if the type isn't figured out right now, we don't even know what function we are applying so type inference fails utterly</p>",
        "id": 194563604,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587243852
    },
    {
        "content": "<p>Makes sense</p>",
        "id": 194563615,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1587243909
    },
    {
        "content": "<p>It could probably be improved a bit if it holds off on elaborating this subtree and finishes up the other siblings before trying again; that would eliminate the left-right dependence</p>",
        "id": 194563624,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587243951
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 194571498,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1587256702
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span><span class=\"n\">nat</span><span class=\"o\">)</span>\n<span class=\"kn\">constant</span> <span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"bp\">-&gt;</span><span class=\"n\">nat</span><span class=\"bp\">-&gt;</span><span class=\"kt\">Prop</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">z</span><span class=\"o\">)</span><span class=\"n\">y</span>\n</pre></div>\n\n\n<p>I expected to get f x y,  but instead I get back the unreduced term.<br>\nWhy?</p>",
        "id": 194577787,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1587269269
    },
    {
        "content": "<p><code>#check</code> doesn't reduce anything, it just typechecks the term</p>",
        "id": 194577840,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587269363
    },
    {
        "content": "<p>use <code>#reduce</code> for this</p>",
        "id": 194577841,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587269371
    },
    {
        "content": "<p>be warned that <code>#reduce</code> fails on most nontrivial examples</p>",
        "id": 194577872,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587269402
    },
    {
        "content": "<p>also you are mixing <code>variable</code> and <code>constant</code> again</p>",
        "id": 194577899,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587269499
    },
    {
        "content": "<p>the same example works with everything a <code>variable</code></p>",
        "id": 194577901,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587269514
    },
    {
        "content": "<p>#reduce works on this example.   So what can I put in my code to get that done,  as opposed to at the command level?</p>",
        "id": 194577944,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1587269569
    },
    {
        "content": "<p>you don't have to write anything, reduction happens automatically as necessary</p>",
        "id": 194577950,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587269589
    },
    {
        "content": "<p>Sorry about variables and constants, but I'm not even saving this file.<br>\nWell, reduction doesn't seem to happen automatically in my code...</p>",
        "id": 194577956,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1587269613
    },
    {
        "content": "<p>do you have any target theorem?</p>",
        "id": 194577957,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587269613
    },
    {
        "content": "<p>I'm not sure what saving the file has to do with anything</p>",
        "id": 194577959,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587269628
    },
    {
        "content": "<p>I'm saying that <code>variable</code> is better suited for short lived terms</p>",
        "id": 194577998,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587269651
    },
    {
        "content": "<p>reduction happens when it is forced to happen</p>",
        "id": 194578005,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587269702
    },
    {
        "content": "<p>but doing reduction eagerly would be a very bad idea</p>",
        "id": 194578014,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587269717
    },
    {
        "content": "<p>OK  I got the point about variables,  I'll try to do better in the future.</p>",
        "id": 194578018,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1587269724
    },
    {
        "content": "<p>because most definitions are sitting on a huge stack of other definitions such that a full reduction would result in an astronomically large term</p>",
        "id": 194578035,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587269760
    },
    {
        "content": "<p>this is why <code>#reduce</code> fails</p>",
        "id": 194578073,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587269766
    },
    {
        "content": "<p>so instead reduction is performed only when there is a type mismatch in an application</p>",
        "id": 194578082,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587269802
    },
    {
        "content": "<p>and only enough to resolve the difference</p>",
        "id": 194578084,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587269815
    },
    {
        "content": "<p>for an example using <code>#check</code>, consider <code>#check (rfl : (λ z, f x z)y = f x y)</code></p>",
        "id": 194578130,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587269915
    },
    {
        "content": "<p>since <code>rfl</code> is a proof of <code>a = a</code>, lean has to reduce the lhs until it matches the rhs in order to agree that this is type correct</p>",
        "id": 194578161,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587269997
    },
    {
        "content": "<p>TPIL says that attributes are applied to definitions in order to solve this problem.</p>",
        "id": 194581129,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1587275755
    },
    {
        "content": "<p>what problem?</p>",
        "id": 194583201,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587279901
    },
    {
        "content": "<p>The <code>@[reducible]</code> attribute can be applied to a definition as a hint for certain tactics to unfold more definitions than they normally would during unification, but they still don't reduce unless they need to</p>",
        "id": 194583260,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587279973
    }
]