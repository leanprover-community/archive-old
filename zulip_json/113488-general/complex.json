[
    {
        "content": "<p>What do people think of renaming <code>complex</code> to <code>complex_numbers</code>?<br>\nThere are several other notions of <code>complex</code> (see e.g. <a href=\"https://github.com/leanprover-community/mathlib/pull/3316/files#diff-002c2f374abb3b7357014befa3ba9ba2R40\">https://github.com/leanprover-community/mathlib/pull/3316/files#diff-002c2f374abb3b7357014befa3ba9ba2R40</a>) that could have a nice name (maybe in a namespace, like <code>category_theory.complex</code>; note that <code>category_theory</code> is often open, if it is imported) and we would avoid conflicts this way.</p>\n<p>The reason I dare to propose this change, is because we use notation anyway.</p>",
        "id": 203262636,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594212428
    },
    {
        "content": "<p>But I'd prefer the singular <code>complex_number</code> instead.</p>",
        "id": 203262924,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1594212613
    },
    {
        "content": "<p>Ooh, sure... it's hidden by notation anyway (-;</p>",
        "id": 203262942,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594212630
    },
    {
        "content": "<p>What about definitions like <code>complex.sin</code>, and theorems like <code>complex.add_im</code>, etc.?</p>",
        "id": 203263003,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1594212680
    },
    {
        "content": "<p>Aah, This would solve the dot notation problem, right?</p>",
        "id": 203263039,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594212703
    },
    {
        "content": "<p>Unfortunately we can't write <code>0.im</code> yet.</p>",
        "id": 203263102,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1594212728
    },
    {
        "content": "<p>No... if we keep the namespace <code>complex</code>, then <code>z.sin</code> will not make sense any more. Just like we wanted.</p>",
        "id": 203263133,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594212757
    },
    {
        "content": "<p>I'm absolutely against calling the type <code>complex_number</code> and the namespace <code>complex</code>.</p>",
        "id": 203263163,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1594212796
    },
    {
        "content": "<p>How about <code>cplx</code> for both?</p>",
        "id": 203263210,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594212839
    },
    {
        "content": "<p>We already have <code>nat</code> and <code>int</code> and <code>rat</code>. Of course <code>real</code> and <code>cplx</code> are a bit more complicated, so they deserve 4-letter names.</p>",
        "id": 203263252,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594212846
    },
    {
        "content": "<p>I'm not against <code>cplx</code>.</p>",
        "id": 203263361,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1594212944
    },
    {
        "content": "<p>I'm not a fan of <code>cplx</code> it just looks too random to my eye, nat and int and rat are at least just abbreviations of the full word. If we had way more stuff about homological complexes I could see a reason to change, but at this point adding a bunch of characters in a lot of files doesnt seem worth it to save only a few in one file. A lot more maths involves the complex numbers than homological complexes anyway!</p>",
        "id": 203263911,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1594213296
    },
    {
        "content": "<p>Why not just call it <code>ℂ</code></p>",
        "id": 203264734,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594213759
    },
    {
        "content": "<p>Would work for me</p>",
        "id": 203265041,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594213954
    },
    {
        "content": "<p>I don't know if we want to start using unicode in names of types</p>",
        "id": 203265063,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594213971
    },
    {
        "content": "<p>Is the sine function then called <code>ℂ.sin</code>?</p>",
        "id": 203266961,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1594215008
    },
    {
        "content": "<p>That was what I was imagining, though I guess we could keep the namespace <code>complex</code>, perhaps</p>",
        "id": 203267198,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594215146
    },
    {
        "content": "<p>that would mess up projection notation</p>",
        "id": 203283892,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594223010
    },
    {
        "content": "<p>Yes, but in the case of <code>complex</code> projection notation is usually \"evil\" anyways.</p>",
        "id": 203287633,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594224658
    },
    {
        "content": "<p>I don't see the point in changing the type name, but not the namespace name.  Isn't the idea that we want to use <code>complex</code> for some other more important complexes?  Wouldn't we still have the name clashes in the namespace then?</p>",
        "id": 203289501,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1594225486
    },
    {
        "content": "<p>Well, those other complexes might be <code>category_theory.complex</code>, but after <code>open category_theory</code> I think Lean will get confused by</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">complex</span> <span class=\"n\">V</span> <span class=\"n\">b</span>\n</code></pre></div>\n\n\n<p>and might say <code>function expected at 'complex'</code> if <code>_root_.complex</code> is the complex numbers...</p>",
        "id": 203291125,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594226302
    },
    {
        "content": "<p>Or does this just work? And will lean figure out that in this context <code>category_theory.complex</code> makes sense.</p>",
        "id": 203291158,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594226323
    },
    {
        "content": "<p>that specific example will probably work</p>",
        "id": 203291238,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594226366
    },
    {
        "content": "<p>Ooh, well, maybe that means we don't need to do anything...</p>",
        "id": 203291673,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594226556
    },
    {
        "content": "<p>another trick you can use, with a different set of upsides and downsides, is <code>local notation `complex` := category_theory.complex</code></p>",
        "id": 203291849,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594226640
    },
    {
        "content": "<p>I'm not actually sure there's going to be a \"one true (homological complex)\", because my experiments so far with (short) exact sequences, thinking about bicomplexes, salamanders, and snakes, suggests we're going to need several inter-convertible types, at least:</p>\n<ol>\n<li>a complex modelled as a function from int to V (and dependently typed functions for the morphisms)</li>\n<li>a complex modelled as a inductive type (basically, a fancy version of list, called something like <code>morphism_sequence</code>), for dealing with \"explicit\" small complexes<br>\nThis makes me more relaxed about name conflicts, because we're likely to have several names anyway.</li>\n</ol>",
        "id": 203340283,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1594255058
    },
    {
        "content": "<p>And in any case, in order to prevent anti-category-theory bias inhibiting people from proving the snake lemma, it should be called <code>algebra.homology.complex</code>, not <code>category_theory.complex</code>. :-)</p>",
        "id": 203340336,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1594255114
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> Are those experiments already building on the machinery of <span class=\"user-mention\" data-user-id=\"260921\">@Markus Himmel</span> ?</p>",
        "id": 203349304,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594267897
    }
]