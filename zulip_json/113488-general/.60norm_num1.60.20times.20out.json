[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I am encountering funny behavior with <code>norm_num1</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- works great</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"mi\">15</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">norm_num1</span>\n\n<span class=\"c1\">-- works great</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">-</span><span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"mi\">15</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">le_of_sub_nonneg</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">sub_neg_eq_add</span><span class=\"o\">],</span>\n  <span class=\"n\">norm_num1</span>\n<span class=\"kd\">end</span>\n\n<span class=\"c1\">-- (deterministic) timeout</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"bp\">≥</span> <span class=\"bp\">-</span><span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"mi\">15</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">le_of_sub_nonneg</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">sub_neg_eq_add</span><span class=\"o\">],</span>\n  <span class=\"n\">norm_num1</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Any idea what is going wrong? As far as I can tell, using widgets, the goals are exactly the same at each invocation of <code>norm_num1</code>. (If the takeaway message is that I  should never use <code>≥</code> because it is cursed, I can live with that!) BTW, I get the same behavior if I eliminate the <code>rw</code>.</p>",
        "id": 228684727,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1614812625
    },
    {
        "content": "<p><code>≥</code> and <code>&gt;</code> are more cursed than they used to be for sure -- the community decided that there was no point having all this lemma duplication so removed many <code>≥</code> and <code>&gt;</code> lemmas from core lean and mathlib, and now the message to users is to always use <code>≤</code> and <code>&lt;</code>, with the one exception that the analysts still tolerate <code>∀ ε &gt; 0, ...</code>.</p>",
        "id": 228685524,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614812968
    },
    {
        "content": "<p><code>norm_num1</code> is <code>norm_num</code> without <code>simp</code>, and <code>simp</code> nowadays will flip all &gt;= to &lt;= etc.</p>",
        "id": 228685736,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614813051
    },
    {
        "content": "<p>But it is in <code>le</code> form after the <code>apply</code>.</p>",
        "id": 228685776,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1614813066
    },
    {
        "content": "<p>Oh! In fact <code>norm_num</code> doesn't work either -- the problem is not what I said it was.</p>",
        "id": 228685872,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614813118
    },
    {
        "content": "<p>That is very cool, pp.all says that the terms are exactly the same.</p>",
        "id": 228686733,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614813527
    },
    {
        "content": "<p>Thanks for checking that <code>bit1...</code> mess so we don't have to =)</p>",
        "id": 228686930,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1614813625
    },
    {
        "content": "<p>Oh, I didn't go down into the numerals, and I may have missed something when comparing the terms. There has got to be some difference somewhere, right? It's bizarre.</p>",
        "id": 228687181,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1614813759
    },
    {
        "content": "<p>Putting <code>change -2 ^ 15 ≤ (-3 : int),</code> at the beginning of the last proof doesn't seem to help either.</p>",
        "id": 228687530,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1614813962
    },
    {
        "content": "<p>Here's an easy way to check the terms are the same without diff: <code>set_option pp.all true</code> and then hold ctrl and press minus to shrink your font size. Then click between the two proofs just before the norm_num and use the fact that our eyes are really good at spotting the tiniest of changes. The terms are small enough that this works.</p>",
        "id": 228687894,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614814176
    },
    {
        "content": "<p>Thanks for the suggestion. I tried it, and could see no difference. So I copied both the terms to files <code>term1.txt</code>, <code>term2.txt</code> and called <code>diff</code>. It tells me they are exactly the same.</p>\n<p>How do you like them apples?</p>",
        "id": 228691652,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1614816191
    },
    {
        "content": "<p>My guess is that this has to do with int inequalities getting forced by defeq. This is a recurring problem addressed by e.g. <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.norm_num.int_sub_hack/src\">src#tactic.norm_num.int_sub_hack</a></p>",
        "id": 228710329,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614828521
    },
    {
        "content": "<p>Oh, I guess we removed that after inequalities on int were marked irreducible. Maybe we missed a spot?</p>",
        "id": 228710364,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614828570
    },
    {
        "content": "<p>norm_num should have full support for <code>&gt;</code>/<code>&gt;=</code>, although that is one place where I don't use any lemma to rewrite and just let defeq do the work... experience has shown that this always comes back to bite</p>",
        "id": 228710536,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614828690
    },
    {
        "content": "<p>Oh, some more clues. This fails quickly:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"bp\">≥</span> <span class=\"bp\">-</span><span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"mi\">15</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">le_of_sub_nonneg</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">sub_neg_eq_add</span><span class=\"o\">],</span>\n  <span class=\"n\">norm_num1</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>(The <code>sorry</code> fails because there are no goals.) So that means the timeout is happening in the kernel, i.e. norm_num produces an \"invalid\" proof, and the kernel, instead of failing, is thrashing on unfolding large int expressions</p>",
        "id": 228728513,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614842943
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">3</span><span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">32768</span> <span class=\"bp\">=</span> <span class=\"mi\">32765</span> <span class=\"o\">:=</span> <span class=\"c1\">-- deep recursion error</span>\n<span class=\"n\">norm_num.add_neg_pos_pos</span> <span class=\"mi\">3</span> <span class=\"mi\">32768</span> <span class=\"mi\">32765</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 228730005,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614843969
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">T</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">$</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_add.add</span> <span class=\"n\">int</span>\n      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_semigroup.to_has_add</span> <span class=\"n\">int</span> <span class=\"bp\">$</span>\n        <span class=\"bp\">@</span><span class=\"n\">add_monoid.to_add_semigroup</span> <span class=\"n\">int</span> <span class=\"bp\">$</span>\n        <span class=\"bp\">@</span><span class=\"n\">sub_neg_monoid.to_add_monoid</span> <span class=\"n\">int</span> <span class=\"bp\">$</span>\n        <span class=\"bp\">@</span><span class=\"n\">add_group.to_sub_neg_monoid</span> <span class=\"n\">int</span> <span class=\"bp\">$</span>\n        <span class=\"bp\">@</span><span class=\"n\">add_comm_group.to_add_group</span> <span class=\"n\">int</span> <span class=\"bp\">$</span>\n        <span class=\"bp\">@</span><span class=\"n\">linear_ordered_add_comm_group.to_add_comm_group</span> <span class=\"n\">int</span> <span class=\"bp\">$</span>\n        <span class=\"n\">int.linear_ordered_add_comm_group</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"mi\">5000</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">P</span> <span class=\"bp\">$</span> <span class=\"bp\">@</span><span class=\"n\">has_add.add</span> <span class=\"n\">int</span> <span class=\"n\">int.has_add</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"mi\">5000</span> <span class=\"o\">:=</span>\n<span class=\"n\">H</span> <span class=\"c1\">-- deep recursion error</span>\n</code></pre></div>",
        "id": 228731210,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614844875
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">T</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">$</span> <span class=\"bp\">@</span><span class=\"n\">has_add.add</span> <span class=\"n\">int</span> <span class=\"o\">⟨</span><span class=\"n\">int.add</span><span class=\"o\">⟩</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"mi\">5000</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">P</span> <span class=\"bp\">$</span> <span class=\"n\">int.add</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"mi\">5000</span> <span class=\"o\">:=</span>\n<span class=\"n\">H</span> <span class=\"c1\">-- deep recursion</span>\n</code></pre></div>\n<p>what the heck, I can't minimize this much more</p>",
        "id": 228733814,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614846371
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">type_context.is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]:</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_add.add</span> <span class=\"n\">int</span> <span class=\"n\">int.has_add</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"mi\">500</span><span class=\"o\">)</span> <span class=\"bp\">=?=</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">int.add</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"mi\">500</span><span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"n\">type_context.is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">]:</span> <span class=\"bp\">@</span><span class=\"n\">has_add.add</span> <span class=\"n\">int</span> <span class=\"n\">int.has_add</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"mi\">500</span> <span class=\"bp\">=?=</span> <span class=\"n\">int.add</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"mi\">500</span>\n<span class=\"o\">[</span><span class=\"n\">type_context.is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"n\">unfold</span> <span class=\"n\">right</span><span class=\"o\">:</span> <span class=\"n\">int.add</span>\n</code></pre></div>\n<p>no, don't do that...</p>",
        "id": 228734256,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614846617
    },
    {
        "content": "<p>Oof, I just realized this is a bit of a wild goose chase, because this is already broken:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"bp\">≥</span> <span class=\"bp\">-</span><span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"mi\">15</span> <span class=\"o\">:=</span> <span class=\"c1\">-- deterministic timeout</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">le_of_sub_nonneg</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">sub_neg_eq_add</span><span class=\"o\">],</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>The bad step is the <code>rw sub_neg_eq_add</code>, although there are almost certainly issues in norm_num as well</p>",
        "id": 228745582,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614852426
    },
    {
        "content": "<p>actually even just <code>apply le_of_sub_nonneg</code> is broken</p>",
        "id": 228745651,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614852455
    },
    {
        "content": "<p>Aah, so that's why the fully expanded terms could be equal -- the problem has already occurred!</p>",
        "id": 228745775,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614852507
    },
    {
        "content": "<p>so it was <code>ge</code>'s fault after all ;-)</p>",
        "id": 228745794,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614852518
    },
    {
        "content": "<p>It's lean's fault for being stupid and unfolding int numerals when DOING ANYTHING ELSE would be better. Typeclass mismatches are extremely common and it's difficult to ban them entirely in norm_num</p>",
        "id": 228745989,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614852607
    },
    {
        "content": "<p>I'm talking about the garden variety typeclass mismatch here, where the two paths are defeq and the proof is the standard one</p>",
        "id": 228746105,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614852661
    },
    {
        "content": "<p>numerals considered harmful</p>",
        "id": 228746187,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614852694
    },
    {
        "content": "<p>maybe <code>int.add</code> should be irreducible too, that seems a bit excessive</p>",
        "id": 228746190,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614852697
    },
    {
        "content": "<p>maybe <code>bit0</code> should be irreducible :/</p>",
        "id": 228746274,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614852727
    },
    {
        "content": "<p>I think we should just ban numerals, number theorists never use them any more and I think we were the last people in the maths department.</p>",
        "id": 228746313,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614852743
    },
    {
        "content": "<p>Right, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>x</mi><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">x^2</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span> is just notation. It doesn't mention <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">2</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span></span></span></span> (-;</p>",
        "id": 228746446,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614852797
    },
    {
        "content": "<p>Did I mention that for the first 12 years of metamath's existence there were no numbers larger than 10?</p>",
        "id": 228746501,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614852826
    },
    {
        "content": "<p>When I went to Greenland I discovered that the local language had no words for numbers larger than 12</p>",
        "id": 228746584,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614852853
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.group_power</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.type_context.is_def_eq_detail</span> <span class=\"n\">true</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"bp\">^</span><span class=\"mi\">8</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"bp\">-</span><span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"bp\">≥</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"bp\">^</span><span class=\"mi\">8</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">H</span>\n</code></pre></div>\n<p>It's weird because there is nothing suspicious in the trace, it does actually unfold <code>ge</code> and it doesn't try to compute the numeral. Perhaps the computation is happening inside the kernel where there is no tracing</p>",
        "id": 228747601,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614853363
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/.60norm_num1.60.20times.20out/near/228746313\">said</a>:</p>\n<blockquote>\n<p>I think we should just ban numerals, number theorists never use them any more and I think we were the last people in the maths department.</p>\n</blockquote>\n<p>I remember checking, the largest actual number I used in my Part III exams was 6.</p>",
        "id": 228789262,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1614870881
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/.60norm_num1.60.20times.20out/near/228746313\">said</a>:</p>\n<blockquote>\n<p>I think we should just ban numerals, number theorists never use them any more and I think we were the last people in the maths department.</p>\n</blockquote>\n<p>This joke works particularly well in Leicester no? Has that now moved south to London?</p>",
        "id": 228793098,
        "sender_full_name": "Julian Berman",
        "timestamp": 1614872039
    },
    {
        "content": "<p>Mario, thanks for figuring out what was going on.  The denouement was better than an Agatha Christie mystery!</p>",
        "id": 228820078,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1614880729
    },
    {
        "content": "<p>(We were tricked into not even suspecting the <code>rw</code>.)</p>",
        "id": 228820207,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1614880779
    }
]