[
    {
        "content": "<p>Why is the coercion <code>ℕ → enat</code> not <code>nat.cast</code>? I'm having a hard time carrying the casts around.</p>",
        "id": 250022105,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1629395675
    },
    {
        "content": "<p>For efficiency reasons, in the case you want to compute with <code>enat</code>?</p>",
        "id": 250033299,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1629399990
    },
    {
        "content": "<p>Presumably it's definitionally more useful?</p>",
        "id": 250038678,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1629402115
    },
    {
        "content": "<p>I feel like <code>enat</code> has been designed for computation and not for reasoning... First, it's based on <code>part</code>. Second, it has its own cast.</p>",
        "id": 250042036,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1629403504
    },
    {
        "content": "<p>I'm currently stuck on</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.big_operators.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.nat.enat</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span> <span class=\"n\">nat</span>\n<span class=\"kn\">open</span> <span class=\"n\">finset</span> <span class=\"n\">multiplicity</span> <span class=\"n\">nat</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ι</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"o\">((</span><span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">enat</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 250042065,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1629403520
    },
    {
        "content": "<p>Prove that the cast is <code>add_monoid_hom</code> and then use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/add_monoid_hom.map_sum\">docs#add_monoid_hom.map_sum</a></p>",
        "id": 250042593,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1629403781
    }
]