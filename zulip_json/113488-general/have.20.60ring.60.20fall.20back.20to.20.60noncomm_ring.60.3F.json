[
    {
        "content": "<p>Now that we have a basic version of <code>noncomm_ring</code> available (that just calls <code>simp</code> with an appropriate simpset, then <code>abel</code>), could we arrange so that <code>ring</code> falls back to <code>noncomm_ring</code> when it can't find an appropriate <code>comm_semiring</code> instance?</p>",
        "id": 199294699,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1590908762
    },
    {
        "content": "<p>I had a bit of a look through <code>ring</code>, but couldn't work out how to do this.</p>",
        "id": 199294725,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1590908776
    },
    {
        "content": "<p><code>ring</code> already has fallback behavior, and it also doesn't a priori know what type it is working over, so not finding a comm_ring instance is possibly not a failure. All of which makes it difficult to use <code>noncomm_ring</code> as backup. Plus this is always going to be slower than calling <code>noncomm_ring</code> directly.</p>",
        "id": 199295420,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590910331
    },
    {
        "content": "<p>That is, there are valid uses of <code>ring</code> when applied to an equality of non-commutative rings. Currently <code>ring</code> will act as a normalizer on any embedded subterms that are in commutative rings</p>",
        "id": 199295437,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590910425
    }
]