[
    {
        "content": "<p>what is <code>pure</code>?</p>",
        "id": 135059937,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538510178
    },
    {
        "content": "<p>It means non-constructive</p>",
        "id": 135059948,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1538510201
    },
    {
        "content": "<p>eh, more details?</p>",
        "id": 135060057,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538510302
    },
    {
        "content": "<p><code>pure : A -&gt; F A</code> is usually the unit in a monad <code>F</code>. Sometimes its called <code>return</code>. Instances are the singleton list, finset, multiset, set. Or for tactics its the tactic returning a value.</p>",
        "id": 135060084,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1538510352
    },
    {
        "content": "<p>deleted</p>",
        "id": 135060411,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1538510716
    },
    {
        "content": "<p>So what would it be, in the context of topology?</p>",
        "id": 135061158,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538511441
    },
    {
        "content": "<p>the pure filter?</p>",
        "id": 135061165,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1538511458
    },
    {
        "content": "<p>does it have type <code>filter a</code>?</p>",
        "id": 135061173,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1538511473
    },
    {
        "content": "<p>yes</p>",
        "id": 135061230,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538511505
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">pure_le_nhds</span> <span class=\"o\">:</span> <span class=\"n\">pure</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">filter</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">assume</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">le_infi</span> <span class=\"err\">$</span> <span class=\"k\">assume</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">le_infi</span> <span class=\"err\">$</span> <span class=\"k\">assume</span> <span class=\"bp\">⟨</span><span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span><span class=\"o\">,</span> <span class=\"n\">principal_mono</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"err\">$</span>\n  <span class=\"n\">singleton_subset_iff</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">h₁</span>\n</pre></div>",
        "id": 135061255,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538511544
    },
    {
        "content": "<p>maybe it doesn't</p>",
        "id": 135061256,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538511545
    },
    {
        "content": "<p>it has type <code>α → filter α</code></p>",
        "id": 135061266,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538511554
    },
    {
        "content": "<p>Ok, <code>pure x</code> is the filter of all sets containing <code>x</code></p>",
        "id": 135061279,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1538511576
    },
    {
        "content": "<p>so it's just the principal filter?</p>",
        "id": 135061350,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538511609
    },
    {
        "content": "<p>yes</p>",
        "id": 135061385,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1538511643
    },
    {
        "content": "<p>of the singleton x</p>",
        "id": 135061388,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1538511648
    },
    {
        "content": "<p>it's more specialized than <code>principal</code></p>",
        "id": 135061411,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1538511666
    },
    {
        "content": "<p>Let me google this for you</p>",
        "id": 135061450,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1538511716
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/mathlib/blob/9a7a611c426c90f3894addba8a38cf4f9f3d8775/order/filter.lean#L632\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/blob/9a7a611c426c90f3894addba8a38cf4f9f3d8775/order/filter.lean#L632\">https://github.com/leanprover/mathlib/blob/9a7a611c426c90f3894addba8a38cf4f9f3d8775/order/filter.lean#L632</a></p>",
        "id": 135061494,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1538511727
    },
    {
        "content": "<p>Kenny did you read the stuff about monads in Programming In Lean? It is very accessible.</p>",
        "id": 135085949,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538551129
    }
]