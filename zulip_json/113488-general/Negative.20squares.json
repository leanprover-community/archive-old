[
    {
        "content": "<p>Is there any possibility (or desire) to change the following behaviour:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"o\">(</span><span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"bp\">ℤ</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"c1\">-- 4</span>\n</code></pre></div>\n\n\n<p>to me this is an easy cause of mistakes as this runs contrary to computer algebra systems, pocket calculators and written math. But maybe others disagree?</p>",
        "id": 197021708,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1589068996
    },
    {
        "content": "<p>Yikes! It's declared as <code>reserve prefix `-`:100</code> for some reason. I tried changing it to 65 and it seems better.</p>",
        "id": 197022299,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589069869
    },
    {
        "content": "<p>So I made this change (which required some small adjustments to the core library) and compared the export files, but they don't quite agree. Is it too much to hope that they would be identical?</p>",
        "id": 197024610,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589073345
    },
    {
        "content": "<p>The first difference is in <code>bitvec.to_nat_of_nat</code></p>",
        "id": 197024844,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589073588
    },
    {
        "content": "<p>Cool thanks, I don't understand why this theorem would change though. I'm rebuilding with priority 75 now. Will see what happens</p>",
        "id": 197025221,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1589074052
    },
    {
        "content": "<p>My current guess is that the whole system is just nondeterministic when it comes to things like simp</p>",
        "id": 197025360,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589074158
    },
    {
        "content": "<p>I <code>#print</code>ed the offending lemma in both versions, and it looks like indeed <code>simp</code> (or maybe some other tactic, who knows) indeed cooked up a different proof</p>",
        "id": 197025880,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589074731
    },
    {
        "content": "<p>I guess changing the precedence of <code>-</code> does technically change the environment... though I was hoping the difference would basically disappear after parsing</p>",
        "id": 197025970,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589074909
    },
    {
        "content": "<p>Hmm, I blew away my olean files and built the exact same tree again and the first difference was again in <code>to_nat_of_nat</code></p>",
        "id": 197026083,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589075091
    },
    {
        "content": "<p>I mean comparing two builds of the same core library</p>",
        "id": 197026089,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589075105
    },
    {
        "content": "<p>It would be nice if I could omit proofs from the export files... though if there are differences then they might disrupt some internal counters, I suppose</p>",
        "id": 197026252,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589075516
    },
    {
        "content": "<p>Why 75? I guess the question is mainly how <code>- x * y</code> should parse.</p>",
        "id": 197026312,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589075634
    },
    {
        "content": "<p>Another related question: how should we parse <code>a b^c d</code>?</p>",
        "id": 197026405,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589075792
    },
    {
        "content": "<p>Maybe 65 is right then, 75 just seemed like less of a change, less than ^ but more than the others.</p>",
        "id": 197026446,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1589075912
    },
    {
        "content": "<p>My branch is <a href=\"https://github.com/rwbarton/lean-1/tree/rwbarton-neg-precedence\" title=\"https://github.com/rwbarton/lean-1/tree/rwbarton-neg-precedence\">https://github.com/rwbarton/lean-1/tree/rwbarton-neg-precedence</a></p>",
        "id": 197026456,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589075994
    },
    {
        "content": "<p><a href=\"https://github.com/rwbarton/lean-1/commit/dafdfea9f486e623476dc0fbf387ac7d150a52a0\" title=\"https://github.com/rwbarton/lean-1/commit/dafdfea9f486e623476dc0fbf387ac7d150a52a0\">https://github.com/rwbarton/lean-1/commit/dafdfea9f486e623476dc0fbf387ac7d150a52a0</a></p>",
        "id": 197026494,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589076003
    },
    {
        "content": "<p>Perhaps surprisingly, there was <a href=\"https://github.com/rwbarton/lean-1/commit/dafdfea9f486e623476dc0fbf387ac7d150a52a0#diff-632a90007287df84e031262d1026ac10L196\" title=\"https://github.com/rwbarton/lean-1/commit/dafdfea9f486e623476dc0fbf387ac7d150a52a0#diff-632a90007287df84e031262d1026ac10L196\">at least one example</a> of a lemma whose statement changed but I only noticed because it broke another proof. So if we can't test by comparing the olean files, maybe I should just try building mathlib with the new core library</p>",
        "id": 197026549,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589076136
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> definitely <code>(a b) ^ (c d)</code>. Application has a very high precedence</p>",
        "id": 197027723,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589077902
    },
    {
        "content": "<p>I would prefer that <code>- x * y</code> means <code>- (x * y)</code>, although I believe it's currently the other way around</p>",
        "id": 197027816,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589077976
    },
    {
        "content": "<p>What about <code>-s ∩ t</code>?</p>",
        "id": 198756989,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590497723
    },
    {
        "content": "<p>Currently this means <code>(-s) ∩ t</code>, which is problematic because currently <code>∩</code> and <code>*</code> have the same precedence so we can't change one without changing the other, unless we also modify the precedence of either <code>∩</code> or <code>*</code>.</p>",
        "id": 198757299,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590497863
    },
    {
        "content": "<p>Or, we could decide that it should really mean <code>-(s ∩ t)</code></p>",
        "id": 198757384,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590497889
    },
    {
        "content": "<p>Same issue with <code>- x ⊓  y</code></p>",
        "id": 198758750,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590498492
    },
    {
        "content": "<p>Huh, apparently <code>-</code> has higher precedence than <code>*</code> in C</p>",
        "id": 198758965,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590498623
    },
    {
        "content": "<p>oh wait I was looking at the wrong chart</p>",
        "id": 198758983,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590498636
    },
    {
        "content": "<p>Nevertheless, it's still true when I look at the correct chart</p>",
        "id": 198759014,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590498654
    },
    {
        "content": "<p>Python is the same, of course with the added feature of having exponentiation <code>**</code>. <code>-</code> (and the other unary operators) come between <code>*</code> and <code>**</code>.</p>",
        "id": 198759496,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590498896
    },
    {
        "content": "<p>Haskell puts <code>-</code> on the other side of <code>*</code> as far as I can tell</p>",
        "id": 198759744,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590499016
    },
    {
        "content": "<p>One case where the convention <code>- x * y = - (x * y)</code> looks a bit weird is <code>-1 * z</code></p>",
        "id": 198760305,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590499236
    },
    {
        "content": "<p>It seems like it's going to be a fair amount of work to fix all the places that assume <code>-x * y</code> means <code>(-x) * y</code>, so do we think this is a good idea still?<br>\nOf course, we can at least lower the precedence of <code>-</code> to be below <code>^</code> and that should be a much easier change (though I did find one place that thought <code>-1 ^ n</code> meant <code>(-1)^n</code>!)</p>",
        "id": 198761887,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590499985
    },
    {
        "content": "<p>I don't care about <code>-x * y</code> because, after all, it's the same thing. I do care about <code>-1 ^ n</code> because I've been bitten by this one :)</p>",
        "id": 198762093,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1590500063
    },
    {
        "content": "<p>OK, I'll just move <code>-</code> down below <code>^</code>, since this gets most (or all?) of the benefit.</p>",
        "id": 198764273,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590501091
    }
]