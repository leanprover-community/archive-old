[
    {
        "content": "<p>Before we go on a rampage proving things about vector spaces: there was some suggestion that we should just turn <code>vector_space</code> into notation/abbreviation for <code>module</code>. Maybe now is a good point to decide on this, since Kenny is already PR'ing stuff where he needs new instances of <code>vector_space</code>.</p>",
        "id": 133922950,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536886221
    },
    {
        "content": "<p>this is also affected by my upcoming refactoring. Note that <code>semimodule</code> and <code>module</code> are also related in a similar way to <code>module</code> and <code>vector_space</code>, that is, there are no new axioms, just the parameters change.</p>",
        "id": 133925427,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536887910
    },
    {
        "content": "<p>Ok, so why don't we just call everything a <code>module</code>, and only require the base thingy to be a <code>semiring</code>?</p>",
        "id": 133931912,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536900712
    },
    {
        "content": "<p>I'm on board with that if the rest of you are, but mathematicians seem to be picky about names</p>",
        "id": 133931953,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536900767
    },
    {
        "content": "<p>True, but usually we are ok with generalising a notion.</p>",
        "id": 133931960,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536900807
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> why are 0 and 1 defined using ulift empty and ulift unit, instead of pempty and punit?</p>",
        "id": 133933360,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536903701
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_zero</span> <span class=\"n\">cardinal</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"err\">⟦</span><span class=\"n\">ulift</span> <span class=\"n\">empty</span><span class=\"err\">⟧</span><span class=\"bp\">⟩</span>\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_one</span> <span class=\"n\">cardinal</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"err\">⟦</span><span class=\"n\">ulift</span> <span class=\"n\">unit</span><span class=\"err\">⟧</span><span class=\"bp\">⟩</span>\n</pre></div>",
        "id": 133933361,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536903712
    },
    {
        "content": "<p>because they didn't exist at the time</p>",
        "id": 133933387,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536903722
    },
    {
        "content": "<p>should I change it?</p>",
        "id": 133933403,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536903759
    },
    {
        "content": "<p>if you want</p>",
        "id": 133933412,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536903802
    },
    {
        "content": "<p>it will certainly shorten my proofs:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">theorem</span> <span class=\"n\">mk_empty</span> <span class=\"o\">:</span> <span class=\"n\">mk</span> <span class=\"n\">empty</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"n\">fintype_card</span> <span class=\"n\">empty</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">theorem</span> <span class=\"n\">mk_pempty</span> <span class=\"o\">:</span> <span class=\"n\">mk</span> <span class=\"n\">pempty</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"n\">fintype_card</span> <span class=\"n\">pempty</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">theorem</span> <span class=\"n\">mk_empty&#39;</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"err\">∅</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">sound</span> <span class=\"bp\">⟨</span><span class=\"o\">(</span><span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">empty</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">ulift</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"bp\">⟩</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">theorem</span> <span class=\"n\">mk_plift_false</span> <span class=\"o\">:</span> <span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">plift</span> <span class=\"n\">false</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">sound</span> <span class=\"bp\">⟨</span><span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">plift</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"err\">$</span> <span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">false_equiv_empty</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">ulift</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"bp\">⟩</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">theorem</span> <span class=\"n\">mk_unit</span> <span class=\"o\">:</span> <span class=\"n\">mk</span> <span class=\"n\">unit</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">fintype_card</span> <span class=\"n\">unit</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cast_one</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">theorem</span> <span class=\"n\">mk_punit</span> <span class=\"o\">:</span> <span class=\"n\">mk</span> <span class=\"n\">punit</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">fintype_card</span> <span class=\"n\">punit</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cast_one</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">theorem</span> <span class=\"n\">mk_singleton</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">mk</span> <span class=\"o\">({</span><span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">sound</span> <span class=\"bp\">⟨</span><span class=\"o\">(</span><span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">singleton</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">ulift</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"bp\">⟩</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">theorem</span> <span class=\"n\">mk_plift_true</span> <span class=\"o\">:</span> <span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">plift</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">sound</span> <span class=\"bp\">⟨</span><span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">plift</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"err\">$</span> <span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">true_equiv_unit</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"err\">$</span> <span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">ulift</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"bp\">⟩</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">theorem</span> <span class=\"n\">mk_bool</span> <span class=\"o\">:</span> <span class=\"n\">mk</span> <span class=\"n\">bool</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">sound</span> <span class=\"bp\">⟨</span><span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">bool_equiv_unit_sum_unit</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"err\">$</span> <span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">sum_congr</span> <span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">ulift</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">ulift</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"bp\">⟩</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">theorem</span> <span class=\"n\">mk_Prop</span> <span class=\"o\">:</span> <span class=\"n\">mk</span> <span class=\"kt\">Prop</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">sound</span> <span class=\"bp\">⟨</span><span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">Prop_equiv_bool</span><span class=\"bp\">⟩</span> <span class=\"o\">:</span> <span class=\"n\">mk</span> <span class=\"kt\">Prop</span> <span class=\"bp\">=</span> <span class=\"n\">mk</span> <span class=\"n\">bool</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">mk_bool</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">theorem</span> <span class=\"n\">mk_option</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">option</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">mk</span> <span class=\"n\">α</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">sound</span> <span class=\"bp\">⟨</span><span class=\"o\">(</span><span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">option_equiv_sum_unit</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"err\">$</span> <span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">sum_congr</span> <span class=\"o\">(</span><span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">ulift</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">mk_eq_of_injective</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">injective</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">mk</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">sound</span> <span class=\"bp\">⟨</span><span class=\"o\">(</span><span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">image</span> <span class=\"n\">f</span> <span class=\"n\">s</span> <span class=\"n\">hf</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"bp\">⟩</span>\n</pre></div>",
        "id": 133933417,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536903837
    },
    {
        "content": "<p>I think <code>empty</code> and <code>pempty</code> and <code>false</code> should be all definitionall equal</p>",
        "id": 133933547,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536904047
    },
    {
        "content": "<p>but that's just me</p>",
        "id": 133933548,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536904048
    },
    {
        "content": "<p>the same goes with <code>punit</code> and <code>true</code></p>",
        "id": 133933549,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536904056
    },
    {
        "content": "<p>I think that <code>punit</code> is defeq to <code>unit</code></p>",
        "id": 133933551,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536904067
    },
    {
        "content": "<p>now I have to prove 6 equiv lemmas about the first one</p>",
        "id": 133933553,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536904072
    },
    {
        "content": "<p>right, but not to <code>true</code></p>",
        "id": 133933554,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536904079
    },
    {
        "content": "<p>no, they can't be</p>",
        "id": 133933593,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536904086
    },
    {
        "content": "<p>they are in different universes</p>",
        "id": 133933599,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536904101
    },
    {
        "content": "<p>then punit should be made to sort</p>",
        "id": 133933603,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536904125
    },
    {
        "content": "<p>also, why can't <code>punit.star</code> be <code>()</code>?</p>",
        "id": 133933673,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536904304
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">arrow_unit_equiv_unit</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">punit</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">})</span> <span class=\"err\">≃</span> <span class=\"n\">punit</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">punit</span><span class=\"bp\">.</span><span class=\"n\">star</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">u</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">punit</span><span class=\"bp\">.</span><span class=\"n\">star</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">funext</span> <span class=\"n\">x</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"bp\">;</span> <span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">cases</span> <span class=\"n\">u</span><span class=\"bp\">;</span> <span class=\"n\">reflexivity</span><span class=\"bp\">⟩</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">unit_arrow_equiv</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">punit</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"err\">≃</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">punit</span><span class=\"bp\">.</span><span class=\"n\">star</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">funext</span> <span class=\"n\">x</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">x</span><span class=\"bp\">;</span> <span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">empty_arrow_equiv_unit</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">empty</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"err\">≃</span> <span class=\"n\">punit</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">punit</span><span class=\"bp\">.</span><span class=\"n\">star</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">u</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">rec</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">funext</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">rec</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">cases</span> <span class=\"n\">u</span><span class=\"bp\">;</span> <span class=\"n\">refl</span><span class=\"bp\">⟩</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">pempty_arrow_equiv_unit</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">pempty</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"err\">≃</span> <span class=\"n\">punit</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">punit</span><span class=\"bp\">.</span><span class=\"n\">star</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">u</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">rec</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">funext</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">rec</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">cases</span> <span class=\"n\">u</span><span class=\"bp\">;</span> <span class=\"n\">refl</span><span class=\"bp\">⟩</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">false_arrow_equiv_unit</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">false</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"err\">≃</span> <span class=\"n\">punit</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"k\">calc</span> <span class=\"o\">(</span><span class=\"n\">false</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"err\">≃</span> <span class=\"o\">(</span><span class=\"n\">empty</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">arrow_congr</span> <span class=\"n\">false_equiv_empty</span> <span class=\"o\">(</span><span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"bp\">_</span><span class=\"o\">)</span>\n             <span class=\"bp\">...</span> <span class=\"err\">≃</span> <span class=\"n\">punit</span>       <span class=\"o\">:</span> <span class=\"n\">empty_arrow_equiv_unit</span> <span class=\"bp\">_</span>\n</pre></div>",
        "id": 133933777,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536904516
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> should I change the name of these to <code>punit</code> etc?</p>",
        "id": 133933781,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536904534
    },
    {
        "content": "<p>yes, if it says punit it should be called punit</p>",
        "id": 133933820,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536904563
    },
    {
        "content": "<p>the fact that it is tagged with <code>simp</code> makes it hard to trace</p>",
        "id": 133933831,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536904638
    },
    {
        "content": "<p>let's hope for the best</p>",
        "id": 133933832,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536904641
    },
    {
        "content": "<p>wow there's a lot more misnamed theorems</p>",
        "id": 133933879,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536904729
    },
    {
        "content": "<p>also what is wrong with this proof</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">punit_equiv_punit</span> <span class=\"o\">:</span> <span class=\"n\">punit</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"err\">≃</span> <span class=\"n\">punit</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">punit</span><span class=\"bp\">.</span><span class=\"n\">star</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">punit</span><span class=\"bp\">.</span><span class=\"n\">star</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">cases</span> <span class=\"n\">u</span><span class=\"bp\">;</span> <span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">cases</span> <span class=\"n\">u</span><span class=\"bp\">;</span> <span class=\"n\">reflexivity</span><span class=\"bp\">⟩</span>\n</pre></div>",
        "id": 133933891,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536904773
    },
    {
        "content": "<p>nothing</p>",
        "id": 133933992,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536904966
    },
    {
        "content": "<p>although there are a lot more theorems where that came from</p>",
        "id": 133933999,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536904996
    },
    {
        "content": "<p>any universe polymorphic definition is going to have a theorem like that</p>",
        "id": 133934003,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536905031
    },
    {
        "content": "<p>It seems weird to have to say that J is a submodule of R instead of an ideal of R.</p>",
        "id": 133934055,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536905116
    },
    {
        "content": "<blockquote>\n<p>nothing</p>\n</blockquote>\n<p>seriously, <code>reflexivity</code>?</p>",
        "id": 133934123,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536905271
    },
    {
        "content": "<p>the asymmetry is a bit odd</p>",
        "id": 133934419,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536905786
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> I think the idea was that <code>ideal</code> could be notation for <code>submodule</code>. That way it is transparent to Lean, but we can still have our beloved terminology. Of course it means that you could start talking about ideals of a module, but you should just avoid that: Lean doesn't care, you will only confuse users.</p>",
        "id": 133934731,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536906442
    },
    {
        "content": "<p>Then do we get is_ideal.add or ideal.add etc? And is_submodule.smul is different to is_ideal.smul because it's the ring multiplication in the second case. I found myself having to unfold things explicitly, it was a bit weird</p>",
        "id": 133934800,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536906582
    },
    {
        "content": "<p>I was going to wait until all the semimodule stuff died down before making any explicit comments though. I'm using ideals a lot in the Hilbert basis proof course, but I have a lot of other stuff to worry about right now so it's slow progress</p>",
        "id": 133934850,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536906651
    },
    {
        "content": "<p>For ideals you don't need to find the instance of module R R (and indeed yesterday I couldn't find it)</p>",
        "id": 133934867,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536906713
    },
    {
        "content": "<p>(but that might be because things are currently in a state of flux)</p>",
        "id": 133934908,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536906733
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> so at the current moment, how should we know that a field is a vector space over itself?</p>",
        "id": 133937436,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536911375
    },
    {
        "content": "<p>there is an instance for this</p>",
        "id": 133937444,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536911398
    },
    {
        "content": "<p>but if it isn't working you can also introduce it locally</p>",
        "id": 133937488,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536911411
    },
    {
        "content": "<p>oh ok</p>",
        "id": 133937518,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536911460
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">module_equiv_lc</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">is_basis</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"err\">≃</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">→</span><span class=\"err\">₀</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n</pre></div>",
        "id": 133937972,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536912117
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> should I change this to the idiomatic <code>lc \\a s</code>?</p>",
        "id": 133938015,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536912126
    },
    {
        "content": "<p>that theorem is the centerpiece of my current refactoring, so I recommend you leave it alone until I'm done</p>",
        "id": 133938027,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536912160
    },
    {
        "content": "<p>anyway <code>lc A s</code> doesn't work because <code>s</code> isn't a module</p>",
        "id": 133938036,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536912185
    },
    {
        "content": "<p>ok...</p>",
        "id": 133938049,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536912216
    },
    {
        "content": "<p>you see</p>",
        "id": 133938090,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536912244
    },
    {
        "content": "<p>this would help my dimension stuff a lot</p>",
        "id": 133938095,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536912255
    },
    {
        "content": "<p>then wait</p>",
        "id": 133938096,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536912267
    },
    {
        "content": "<p>alright</p>",
        "id": 133938097,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536912272
    }
]