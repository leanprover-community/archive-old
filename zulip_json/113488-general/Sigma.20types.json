[
    {
        "content": "<p>To clean up some expressions, I would like to rewrite <code>⟨x, y⟩.1</code>as <code>x</code> (and likewise for <code>y</code>). I was surprised to see that <code>simp</code>does not do it. Still, <code>rw</code>works fine with the following lemma.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">sigma_fst_eq</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"bp\">⟩</span> <span class=\"o\">:</span> <span class=\"err\">Σ</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">F</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</pre></div>\n\n\n<p>I am sure that this is somewhere in the library, but I could not find it (and <code>library_search</code> only answers <code>rfl</code>, which is not that helpful here :).</p>",
        "id": 165478394,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1557690478
    },
    {
        "content": "<p>Does <code>dsimp</code> do it?</p>",
        "id": 165480506,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1557693622
    },
    {
        "content": "<p>I guess you can use <code>change</code> or <code>show</code>. I often find myself having to break a series of rewrites because I need a <code>show</code> to continue.</p>",
        "id": 165480538,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1557693707
    },
    {
        "content": "<p><code>dsimp</code> should do this kind of eta(?) reduction</p>",
        "id": 165480935,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1557694311
    },
    {
        "content": "<p><code>dsimp</code> works fine, thanks. I wanted to avoid <code>change</code> or <code>show</code> as much as possible, as my goals are rather messy...</p>",
        "id": 165481283,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1557694878
    },
    {
        "content": "<p><code>show</code> can be used like this: <code>show succ _ = _</code>; I've sometimes found this useful if all I want to do is slightly change something which happens to conveniently located! But I do think there's an argument for having these lemmas in there somewhere. On the other hand I've also thought that huge numbers of rewrites might be harder to maintain in the future; with the occasional <code>show</code> you remind us where we're supposed to be.</p>",
        "id": 165483247,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1557698055
    },
    {
        "content": "<p>Why does <a href=\"https://leanprover-community.github.io/mathlib_docs/find/sigma\">docs#sigma</a> forbid <code>Prop</code>? That is, why can't we use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/psigma\">docs#psigma</a> everywhere?</p>",
        "id": 258827432,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1635000746
    },
    {
        "content": "<p>See also <a href=\"https://leanprover-community.github.io/mathlib_docs/find/prod\">docs#prod</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pprod\">docs#pprod</a>. I think the reason we don't use them is the same as the reason that <code>Type</code> exists at all</p>",
        "id": 258827692,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635001024
    },
    {
        "content": "<p>Note the inferred universe is more complex for <code>psigma</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">sigma</span>\n<span class=\"c1\">-- sigma : Π {α : Type u_1}, (α → Type u_2) → Type (max u_1 u_2)</span>\n<span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">psigma</span>\n<span class=\"c1\">-- psigma : Π {α : Sort u_1}, (α → Sort u_2) → Sort (max 1 u_1 u_2)</span>\n</code></pre></div>",
        "id": 258827741,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635001082
    },
    {
        "content": "<p>I'm not sure I understand why that needs to be <code>max 1</code> and not just <code>max</code> for <code>psigma</code></p>",
        "id": 258827760,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635001117
    },
    {
        "content": "<p>So universe simplification reasons?</p>",
        "id": 258827771,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1635001159
    },
    {
        "content": "<p>Ah, if you force it into that universe with <code>structure psigma' {α : Sort u} (β : α → Sort v) : Sort (max u v)</code>, Lean complains with</p>\n<blockquote>\n<p>invalid universe polymorphic structure declaration, the resultant universe is not Prop (i.e., 0), but it may be Prop for some parameter values (solution: use 'l+1' or 'max 1 l')</p>\n</blockquote>",
        "id": 258827773,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635001192
    },
    {
        "content": "<p>Ah yeah, Lean wants to know when something is a Prop.</p>",
        "id": 258827854,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1635001227
    },
    {
        "content": "<p>I'm not sure I understand why it needs to know that here</p>",
        "id": 258827886,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635001274
    },
    {
        "content": "<p>In that particular context, I don't know. But I assume it has to do with propositional irrelevance?</p>",
        "id": 258827936,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1635001339
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/9908\">#9908</a></p>",
        "id": 258828100,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1635001650
    },
    {
        "content": "<p>It is because an inductive type that does not target <code>Type u</code> may have a small eliminator, i.e. the target in the <code>sigma.rec</code> function will be <code>Prop</code> instead of <code>Sort l</code>. If the inductive type is sometimes <code>Prop</code> and sometimes not, then <code>sigma.rec</code> has to have two different types depending on some of its other universe arguments, or else you have to be pessimistic and assume it is always a small eliminator, which would end up making <code>psigma</code> just a crappy version of <code>exists</code></p>",
        "id": 258830554,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1635005260
    },
    {
        "content": "<p>Once upon a time the restriction did not exist and it would do exactly this. As a result, you could create this type:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span> <span class=\"bp\">|</span> <span class=\"n\">A</span> <span class=\"bp\">|</span> <span class=\"n\">B</span>\n<span class=\"kd\">def</span> <span class=\"n\">mystery</span> <span class=\"o\">:=</span> <span class=\"n\">foo.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span>\n<span class=\"kd\">def</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">mystery</span> <span class=\"o\">:=</span> <span class=\"n\">foo.A</span>\n<span class=\"kd\">def</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">mystery</span> <span class=\"o\">:=</span> <span class=\"n\">foo.B</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- unprovable because `mystery` does not have proof irrelevance</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">≠</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- unprovable because `foo` is a small eliminator</span>\n</code></pre></div>",
        "id": 258830755,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1635005513
    },
    {
        "content": "<p>Actually scratch that, the existing restriction does not prevent this code from compiling, and it has the described behavior</p>",
        "id": 258830819,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1635005575
    },
    {
        "content": "<p>Oh, the error message is only for <code>structure</code>, because in that case lean wants to build projection functions and it can't do so on a small eliminator</p>",
        "id": 258830906,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1635005715
    },
    {
        "content": "<p>It would be nice to have this documented somewhere.</p>",
        "id": 258831759,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1635006956
    }
]