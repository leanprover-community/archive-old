[
    {
        "content": "<p>I definite a function on the certain domain as follow</p>\n<div class=\"codehilite\"><pre><span></span>def V: set ℕ := {1,2,3,4}\n\ndef g [has_one V][has_add V](e:V× V ): ℕ :=\nmatch  e  with\n|(1,2) :=2\n|(2,1) :=2\n|_     :=0\nend\n</pre></div>\n\n\n<p>I received the following  message</p>\n<div class=\"codehilite\"><pre><span></span>equation compiler failed (use &#39;set_option trace.eqn_compiler.elim_match true&#39; for additional details)\n</pre></div>\n\n\n<p>and</p>\n<div class=\"codehilite\"><pre><span></span>invalid function application in pattern, it cannot be reduced to a constructor (possible solution, mark term as inaccessible using &#39;.( )&#39;) 1\n</pre></div>\n\n\n<p>What is error?</p>",
        "id": 129399957,
        "sender_full_name": "Hoang Le Truong",
        "timestamp": 1531213442
    },
    {
        "content": "<p><code>V</code> is not an inductive type.</p>",
        "id": 129400000,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1531213495
    },
    {
        "content": "<p>you can't match it</p>",
        "id": 129400011,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1531213517
    },
    {
        "content": "<p>you can't just \"make it work\" by using <code>[has_one V] [has_add V]</code></p>",
        "id": 129400050,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1531213562
    },
    {
        "content": "<p>I need make <code>V</code> as an inductive type, not is subset of <code>\\N</code></p>",
        "id": 129400103,
        "sender_full_name": "Hoang Le Truong",
        "timestamp": 1531213657
    },
    {
        "content": "<p>depends on your purpose</p>",
        "id": 129400106,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1531213672
    },
    {
        "content": "<p>I would just use if-then-else</p>",
        "id": 129400108,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1531213678
    },
    {
        "content": "<p>I need V is subset of <code>\\N</code></p>",
        "id": 129400153,
        "sender_full_name": "Hoang Le Truong",
        "timestamp": 1531213717
    },
    {
        "content": "<p>how are we use <code>V</code> is an inductive type and subset of <code>\\N</code></p>",
        "id": 129400171,
        "sender_full_name": "Hoang Le Truong",
        "timestamp": 1531213791
    },
    {
        "content": "<p><code>def g : V \\times V \\to nat := \\lam x, if x.1 * x.2 = 2 then 2 else 0</code></p>",
        "id": 129400248,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1531213850
    },
    {
        "content": "<p>Something like that?</p>",
        "id": 129400252,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1531213856
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">def</span> <span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"err\">\\</span><span class=\"n\">N</span> <span class=\"err\">\\</span><span class=\"n\">to</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">one</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"err\">\\</span><span class=\"n\">to</span> <span class=\"n\">V</span>\n<span class=\"bp\">|</span> <span class=\"n\">two</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"err\">\\</span><span class=\"n\">to</span> <span class=\"n\">V</span>\n<span class=\"bp\">|</span> <span class=\"n\">three</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"err\">\\</span><span class=\"n\">to</span> <span class=\"n\">V</span>\n<span class=\"bp\">|</span> <span class=\"n\">four</span> <span class=\"o\">:</span> <span class=\"mi\">4</span> <span class=\"err\">\\</span><span class=\"n\">to</span> <span class=\"n\">V</span>\n</pre></div>",
        "id": 129400260,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1531213864
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>  It is ok but if I have function has domain is random and large. It is not good to make function when use <code>if - then-else</code></p>",
        "id": 129400408,
        "sender_full_name": "Hoang Le Truong",
        "timestamp": 1531214045
    },
    {
        "content": "<p>maybe you should tell us what you want to do</p>",
        "id": 129400426,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1531214078
    },
    {
        "content": "<p>I want to make function with card V=100 and valued is random</p>",
        "id": 129400490,
        "sender_full_name": "Hoang Le Truong",
        "timestamp": 1531214171
    },
    {
        "content": "<p>randomness doesn't exist</p>",
        "id": 129400496,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1531214198
    },
    {
        "content": "<p>(in Lean)</p>",
        "id": 129400509,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531214232
    },
    {
        "content": "<p>randomness doesn't exist, period</p>",
        "id": 129400511,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1531214243
    },
    {
        "content": "<p>What do you mean with \"valued is random\", do you mean that <code>V</code> is an arbitrary subset of <code>\\N</code>?</p>",
        "id": 129400514,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1531214252
    },
    {
        "content": "<p>a random variable is neither random nor a variable</p>",
        "id": 129400515,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1531214257
    },
    {
        "content": "<p>(I guess the quantum mechanics course is next year Kenny, right?)</p>",
        "id": 129400519,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531214275
    },
    {
        "content": "<p>yes</p>",
        "id": 129400558,
        "sender_full_name": "Hoang Le Truong",
        "timestamp": 1531214285
    },
    {
        "content": "<p>alright</p>",
        "id": 129400562,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1531214287
    },
    {
        "content": "<p>Kenny will <em>choose</em> not to follow QM...</p>",
        "id": 129400565,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1531214301
    },
    {
        "content": "<p>lol</p>",
        "id": 129400567,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1531214307
    },
    {
        "content": "<p>Hoang, ok, and what should your function do with <code>V</code>?</p>",
        "id": 129400572,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1531214333
    },
    {
        "content": "<p>You want a function <code>V \\to \\N</code>, is that right?</p>",
        "id": 129400584,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1531214354
    },
    {
        "content": "<p>yes is randomness doesn't exist<br>\nI want find example function <code>g</code></p>",
        "id": 129400588,
        "sender_full_name": "Hoang Le Truong",
        "timestamp": 1531214378
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>def G (e:ℕ× ℕ ): ℕ :=\nmatch  e  with\n|(1,2) :=2\n|(2,1) :=2\n|(1,3) :=2\n|(3,1) :=2\n|(2,4) :=1\n|(4,2) :=1\n|(3,4) :=1\n|(4,3) :=1\n|_     :=0\nend\n</pre></div>",
        "id": 129400633,
        "sender_full_name": "Hoang Le Truong",
        "timestamp": 1531214407
    },
    {
        "content": "<p>it is ok but I want to certain domains <code>V</code></p>",
        "id": 129400641,
        "sender_full_name": "Hoang Le Truong",
        "timestamp": 1531214453
    },
    {
        "content": "<p>Maybe you should define your function on all of nat x nat</p>",
        "id": 129400649,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531214467
    },
    {
        "content": "<p>and then just ignore its values on the elements you don't like</p>",
        "id": 129400650,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531214476
    },
    {
        "content": "<p>Ok, so define the function on <code>\\N \\times \\N</code>, and then restrict to <code>V</code></p>",
        "id": 129400651,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1531214477
    },
    {
        "content": "<p>i'll say it isn't even a function</p>",
        "id": 129400652,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1531214479
    },
    {
        "content": "<p>Kenny, did you read that translation of the article by Aristotle?</p>",
        "id": 129400694,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1531214525
    },
    {
        "content": "<p>This is a standard trick in this game: for example the square root function in Lean is defined on all the reals, and returns the square root of x if x&gt;=0 but just returns something random if x &lt; 0</p>",
        "id": 129400699,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531214538
    },
    {
        "content": "<p>what about it</p>",
        "id": 129400701,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1531214539
    },
    {
        "content": "<p>something <em>random</em> &lt;-- Kevin</p>",
        "id": 129400705,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1531214554
    },
    {
        "content": "<p>you are just making noise Kenny, not contributing, that's what about it</p>",
        "id": 129400706,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531214563
    },
    {
        "content": "<p>yes I want it</p>",
        "id": 129400707,
        "sender_full_name": "Hoang Le Truong",
        "timestamp": 1531214575
    },
    {
        "content": "<p>When I thought more like a mathematician, I really thought I wanted the square root function to be only defined on the non-negative reals</p>",
        "id": 129400716,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531214601
    },
    {
        "content": "<p>I want same as <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span></p>",
        "id": 129400720,
        "sender_full_name": "Hoang Le Truong",
        "timestamp": 1531214603
    },
    {
        "content": "<p>I don't even know what function he wants to build. My understanding is that he wants some kind of a function defined on N x N, and then he just randomly gives some values in the two examples he gave us</p>",
        "id": 129400727,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1531214627
    },
    {
        "content": "<p>but after building such a function myself, and then discovering how hard it was to use it, I started coming round to the methods which Mario and others were preaching.</p>",
        "id": 129400729,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531214631
    },
    {
        "content": "<p>he wants an arbitrary function N x N -&gt; N, that's all I can make of it</p>",
        "id": 129400777,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1531214674
    },
    {
        "content": "<p>right, so let's listen to him and find out more.</p>",
        "id": 129400779,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531214687
    },
    {
        "content": "<p>In fact, I have function with certain properties. I want example from such function</p>",
        "id": 129400846,
        "sender_full_name": "Hoang Le Truong",
        "timestamp": 1531214810
    },
    {
        "content": "<p>what properties?</p>",
        "id": 129400850,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1531214818
    },
    {
        "content": "<p>What do you mean by \"example\"? You mean an example of the function, or example of a value, or example of a definition, or... ? When you say \"I have function\" -- you mean you have the definition of the function already? In Lean or on paper? Or you just have some properties which you want the function to satisfy?</p>",
        "id": 129400904,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531214897
    },
    {
        "content": "<p>We are still trying to understand your question.</p>",
        "id": 129400908,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531214920
    },
    {
        "content": "<p>I think one property of the function Hoang wants is the type: <code>ℕ × ℕ → ℕ</code>.</p>",
        "id": 129401005,
        "sender_full_name": "Sean Leather",
        "timestamp": 1531215099
    },
    {
        "content": "<p>Or perhaps the type should have subsets of <code>ℕ</code>?</p>",
        "id": 129401126,
        "sender_full_name": "Sean Leather",
        "timestamp": 1531215251
    },
    {
        "content": "<p><code>{ns : ℕ × ℕ // p ns} → ℕ</code> for some <code>p : ℕ × ℕ → Prop</code>?</p>",
        "id": 129401214,
        "sender_full_name": "Sean Leather",
        "timestamp": 1531215375
    },
    {
        "content": "<p>graph is connected</p>",
        "id": 129402299,
        "sender_full_name": "Hoang Le Truong",
        "timestamp": 1531216876
    },
    {
        "content": "<p>I want check the definition of graph is correct</p>",
        "id": 129402300,
        "sender_full_name": "Hoang Le Truong",
        "timestamp": 1531216876
    },
    {
        "content": "<p>I think g is graph</p>",
        "id": 129402301,
        "sender_full_name": "Hoang Le Truong",
        "timestamp": 1531216876
    },
    {
        "content": "<p>What does this have to do with nat?</p>",
        "id": 129402359,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531216923
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>variables {α : Type }\nvariable graph: α × α → ℕ\n</pre></div>",
        "id": 129402375,
        "sender_full_name": "Hoang Le Truong",
        "timestamp": 1531216943
    },
    {
        "content": "<p>I think function<code>graph</code> is graph</p>",
        "id": 129402387,
        "sender_full_name": "Hoang Le Truong",
        "timestamp": 1531216969
    },
    {
        "content": "<p>Is alpha the vertices of the graph? What is nat doing there?</p>",
        "id": 129402388,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531216971
    },
    {
        "content": "<p>yes</p>",
        "id": 129402393,
        "sender_full_name": "Hoang Le Truong",
        "timestamp": 1531216981
    },
    {
        "content": "<p>What is a graph? For me it is vertices and edges, and there is no <code>ℕ</code></p>",
        "id": 129402404,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531216997
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>def G (e:ℕ× ℕ ): ℕ :=\nmatch  e  with\n|(1,2) :=2\n|(2,1) :=2\n|(1,3) :=2\n|(3,1) :=2\n|(2,4) :=1\n|(4,2) :=1\n|(3,4) :=1\n|(4,3) :=1\n|_     :=0\nend\n</pre></div>",
        "id": 129402418,
        "sender_full_name": "Hoang Le Truong",
        "timestamp": 1531217013
    },
    {
        "content": "<p>is example of graph</p>",
        "id": 129402421,
        "sender_full_name": "Hoang Le Truong",
        "timestamp": 1531217022
    },
    {
        "content": "<p>What is a graph for you?</p>",
        "id": 129402426,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531217035
    },
    {
        "content": "<p>vertices <code>def V: set ℕ := {1,2,3,4}</code></p>",
        "id": 129402490,
        "sender_full_name": "Hoang Le Truong",
        "timestamp": 1531217076
    },
    {
        "content": "<p>so every graph is countable</p>",
        "id": 129402507,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1531217100
    },
    {
        "content": "<p>I do not know</p>",
        "id": 129402530,
        "sender_full_name": "Hoang Le Truong",
        "timestamp": 1531217136
    },
    {
        "content": "<p>I have that definition of connected graph. I want check such definition in lean which I make is true or fail. I make an example of such definition</p>",
        "id": 129402623,
        "sender_full_name": "Hoang Le Truong",
        "timestamp": 1531217271
    },
    {
        "content": "<p>I make example of graph</p>\n<div class=\"codehilite\"><pre><span></span>def G (e:ℕ× ℕ ): ℕ :=\nmatch  e  with\n|(1,2) :=2\n|(2,1) :=2\n|(1,3) :=2\n|(3,1) :=2\n|(2,4) :=1\n|(4,2) :=1\n|(3,4) :=1\n|(4,3) :=1\n|_     :=0\nend\n````\nit is ok. but\n</pre></div>\n\n\n<p>def V: set ℕ := {1,2,3,4}</p>\n<p>def G (e:V× V ): ℕ :=<br>\nmatch  e  with<br>\n|(1,2) :=2<br>\n|(2,1) :=2<br>\n|(1,3) :=2<br>\n|(3,1) :=2<br>\n|(2,4) :=1<br>\n|(4,2) :=1<br>\n|(3,4) :=1<br>\n|(4,3) :=1<br>\n|_     :=0<br>\nend</p>\n<div class=\"codehilite\"><pre><span></span>is it not run\n</pre></div>",
        "id": 129402765,
        "sender_full_name": "Hoang Le Truong",
        "timestamp": 1531217412
    },
    {
        "content": "<p>Aah</p>",
        "id": 129402771,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531217440
    },
    {
        "content": "<p>this is the konigsberg graph?</p>",
        "id": 129402779,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531217456
    },
    {
        "content": "<p>rofl</p>",
        "id": 129402784,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531217466
    },
    {
        "content": "<p>yes</p>",
        "id": 129402787,
        "sender_full_name": "Hoang Le Truong",
        "timestamp": 1531217471
    },
    {
        "content": "<p>even more rofl</p>",
        "id": 129402792,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531217479
    },
    {
        "content": "<p>I would use custom inductive types for all of it</p>",
        "id": 129402799,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531217492
    },
    {
        "content": "<p>no</p>",
        "id": 129402802,
        "sender_full_name": "Hoang Le Truong",
        "timestamp": 1531217507
    },
    {
        "content": "<p><code>inductive vertices | north_shore | west_island | ...</code></p>",
        "id": 129402807,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531217514
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116065\">@Hoang Le Truong</span> -- he is saying that you should make your own type called <code>graph</code></p>",
        "id": 129402856,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531217531
    },
    {
        "content": "<p>and I would definitely agree with him</p>",
        "id": 129402862,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531217541
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>inductive edges : vertices -&gt; vertices -&gt; Type\n| bridge1 : edges north_shore west_island\n...\n</pre></div>",
        "id": 129402871,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531217566
    },
    {
        "content": "<p>yes I agree</p>",
        "id": 129402877,
        "sender_full_name": "Hoang Le Truong",
        "timestamp": 1531217580
    },
    {
        "content": "<p>It's self documenting and clear and unambiguous</p>",
        "id": 129402888,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531217598
    },
    {
        "content": "<p>and then you could formalise what it means for a graph to be connected</p>",
        "id": 129402894,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531217606
    },
    {
        "content": "<p>(for all vertices v1 and v2 there's a path from v1 to v2)</p>",
        "id": 129402901,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531217618
    },
    {
        "content": "<p>and then you could prove it in this case just by a case by case check</p>",
        "id": 129402905,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531217628
    },
    {
        "content": "<p>But for a big graph, it is not so clear that Lean is the tool for this.</p>",
        "id": 129402954,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531217658
    },
    {
        "content": "<p>This gets complicated for large graphs, but you will want to switch to a different encoding anyway in that case</p>",
        "id": 129402959,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531217690
    },
    {
        "content": "<p>You might want to read about what algorithms are used to prove a graph is connected, and implement one of those, but probably you would not get good performance in comparison with a tool like python</p>",
        "id": 129402961,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531217702
    },
    {
        "content": "<p>For fabs this is not a big problem</p>",
        "id": 129402973,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531217720
    },
    {
        "content": "<p>If you were, say, trying to work with the graphs in the four color theorem this kind of encoding is far too dense</p>",
        "id": 129403034,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531217775
    },
    {
        "content": "<p>Yes I begin graph in general. after I restrict example</p>",
        "id": 129403037,
        "sender_full_name": "Hoang Le Truong",
        "timestamp": 1531217777
    },
    {
        "content": "<p>Mario I'm surprised you haven't implemented graphs in mathlib. It's just the sort of thing a computer scientist would like to do, I would have thought.</p>",
        "id": 129403038,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531217784
    },
    {
        "content": "<p>The problem (which I have had also in metamath) is that \"graph\" means something different every time it is used</p>",
        "id": 129403046,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531217815
    },
    {
        "content": "<p>and the different theories are hard to fit in the same framework</p>",
        "id": 129403056,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531217840
    },
    {
        "content": "<p>even though everyone pretends it is easy</p>",
        "id": 129403064,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531217859
    },
    {
        "content": "<p>I wondered if this was why. You need directed and undirected graphs, graphs where you're allowed/not allowed to have an edge from v to v, graphs where you are/are not allowed to have more than one edge from v to w, and that's before we've even started worrying about whether all graphs are finite etc</p>",
        "id": 129403220,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531218073
    },
    {
        "content": "<p>Of course, I go this way.</p>",
        "id": 129403293,
        "sender_full_name": "Hoang Le Truong",
        "timestamp": 1531218206
    },
    {
        "content": "<p>Now I work only the above graph <code>G</code></p>",
        "id": 129403348,
        "sender_full_name": "Hoang Le Truong",
        "timestamp": 1531218264
    },
    {
        "content": "<p>So maybe one way of proceeding is that you decide exactly what is a graph for you, and then make your own type, and then make a term of that type corresponding to Koenigsberg, and make a general definition for connected, and then prove that Koenigsberg is connected.</p>",
        "id": 129403361,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531218298
    },
    {
        "content": "<p>And those \"not allowed\" things are not just constraints, they <em>change the encoding completely</em>, i.e. if there are no multiple edges you can have a relation instead of a set of edges with dom/cod; if it is undirected then maybe you want a function on <em>un</em>ordered pairs, if you have hyperedges then maybe each edge maps to a set of vertices which may or may not have size 2, ...</p>",
        "id": 129403368,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531218314
    },
    {
        "content": "<p>I agree that this is what Hoang should do, and it's what I did for Koenigsberg in Metamath</p>",
        "id": 129403394,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531218361
    },
    {
        "content": "<p>I can now envisage a 2500-line graph.lean which carefully does every single possibility ;-)</p>",
        "id": 129403442,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531218385
    },
    {
        "content": "<p>just define things that make sense for undirected multigraphs</p>",
        "id": 129403446,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531218389
    },
    {
        "content": "<p>and forget about all the other crazy stuff until the next project</p>",
        "id": 129403483,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531218449
    },
    {
        "content": "<p>I begin graph directed multiple degree have loop graph</p>",
        "id": 129403495,
        "sender_full_name": "Hoang Le Truong",
        "timestamp": 1531218472
    },
    {
        "content": "<p>After I restrict to undirected multiphaps<br>\nNow I only work on a above <code>G</code>. I have two way to define <code>G</code>. I want to known what is good.</p>",
        "id": 129403637,
        "sender_full_name": "Hoang Le Truong",
        "timestamp": 1531218616
    },
    {
        "content": "<p>Hoang, that was a bit of an XY problem: <a href=\"https://mywiki.wooledge.org/XyProblem\" target=\"_blank\" title=\"https://mywiki.wooledge.org/XyProblem\">https://mywiki.wooledge.org/XyProblem</a></p>",
        "id": 129405050,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1531220458
    },
    {
        "content": "<p>I suggest you start a new topic titled \"Defining graphs in Lean\"</p>",
        "id": 129405067,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1531220479
    },
    {
        "content": "<p>It would have helped a lot if you had mentioned the word \"graph\" in the first few posts. Instead of just \"function with properties\"</p>",
        "id": 129405121,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1531220523
    },
    {
        "content": "<p>How to change \"function on certain domain \" to <code> Defining graphs in Lean</code></p>",
        "id": 129405223,
        "sender_full_name": "Hoang Le Truong",
        "timestamp": 1531220687
    },
    {
        "content": "<p>Ok I changed it</p>",
        "id": 129405242,
        "sender_full_name": "Hoang Le Truong",
        "timestamp": 1531220725
    },
    {
        "content": "<blockquote>\n<p>I have two way to define <code>G</code>. I want to known what is good.</p>\n</blockquote>\n<p>I am a mathematician, and I find myself asking this question often in Lean. I think it is a very difficult and delicate question, and sometimes the computer scientist experts here answer things like \"it depends on why you want this structure\". My advice to you is to go ahead and formalise it in one way, and then post your actual working code and ask for comments.</p>",
        "id": 129405450,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531221106
    },
    {
        "content": "<p>I have two ways to define <code>G</code>. one is</p>\n<div class=\"codehilite\"><pre><span></span>inductive vertices\n| a | b | c | d\n\ndef g (e:vertices× vertices ): ℕ :=\nmatch  e  with\n|(vertices.a,vertices.b) :=2\n|(vertices.b,vertices.a) :=2\n|(vertices.a,vertices.c) :=2\n|(vertices.c,vertices.a) :=2\n|(vertices.b,vertices.d) :=1\n|(vertices.d,vertices.b) :=1\n|(vertices.c,vertices.d) :=1\n|(vertices.d,vertices.c) :=1\n|_ :=0\nend\n</pre></div>\n\n\n<p>and another is</p>\n<div class=\"codehilite\"><pre><span></span>def G (e:ℕ × ℕ  ): ℕ :=\nmatch  e  with\n|(1,2) :=2\n|(2,1) :=2\n|(1,3) :=2\n|(3,1) :=2\n|(2,4) :=1\n|(4,2) :=1\n|(3,4) :=1\n|(4,3) :=1\n|_     :=0\nend\n</pre></div>\n\n\n<p>what is way in Lean good</p>",
        "id": 129405782,
        "sender_full_name": "Hoang Le Truong",
        "timestamp": 1531221619
    },
    {
        "content": "<p>No, that is not the definition of a graph</p>",
        "id": 129405788,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1531221649
    },
    {
        "content": "<p>It is only 1 very specific example.</p>",
        "id": 129405791,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1531221658
    },
    {
        "content": "<p>First you should decide if you want a general definition, or only the Koenigsberg example.</p>",
        "id": 129405799,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1531221676
    },
    {
        "content": "<p>I want a general definition and after apply to example</p>",
        "id": 129405872,
        "sender_full_name": "Hoang Le Truong",
        "timestamp": 1531221814
    },
    {
        "content": "<p>So then, give a general definition, and not an example.</p>",
        "id": 129407364,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1531224362
    },
    {
        "content": "<p>Can you first give a definition without using Lean? Just write down an informal definition here.</p>",
        "id": 129407410,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1531224378
    },
    {
        "content": "<p><code>An Euler walk in an undirected graph is a walk that uses each edge exactly once.</code></p>",
        "id": 129408167,
        "sender_full_name": "Hoang Le Truong",
        "timestamp": 1531225389
    },
    {
        "content": "<p>this is a general definition. I formed it in Lean. Now I want to apply it to exactly example to check the definition Euler walk is correct or wrong in lean.</p>",
        "id": 129408413,
        "sender_full_name": "Hoang Le Truong",
        "timestamp": 1531225688
    },
    {
        "content": "<p>How did you put that statement into Lean?</p>",
        "id": 129408432,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1531225735
    },
    {
        "content": "<p>yes</p>",
        "id": 129408443,
        "sender_full_name": "Hoang Le Truong",
        "timestamp": 1531225749
    },
    {
        "content": "<p>Please show it to us.</p>",
        "id": 129408449,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1531225759
    },
    {
        "content": "<p>We can not help you with defining your Koenigsberg example if we don't know how you put \"undirected graph\" in Lean.</p>",
        "id": 129408514,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1531225804
    },
    {
        "content": "<p>```definition undirected_graph ( graph:α × α → ℕ  ): Prop := <br>\n       ∀ u v:α, graph(u,v)=graph(v,u)</p>\n<div class=\"codehilite\"><pre><span></span>\n</pre></div>",
        "id": 129408661,
        "sender_full_name": "Hoang Le Truong",
        "timestamp": 1531225972
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>definition undirected_graph ( graph:α × α → ℕ  ): Prop :=\n       ∀ u v:α, graph(u,v)=graph(v,u)\n</pre></div>",
        "id": 129408679,
        "sender_full_name": "Hoang Le Truong",
        "timestamp": 1531225997
    },
    {
        "content": "<p>Right, so for your example, you need the following ingredients: a type <code>alpha</code>, a function <code>alpha \\times alpha \\to nat</code> and a proof that your graph is undirected.</p>",
        "id": 129408771,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1531226092
    },
    {
        "content": "<p>There is no reason at all to take a subset of nat for alpha.</p>",
        "id": 129408782,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1531226110
    },
    {
        "content": "<p>You could define an inductive type for the four vertices.</p>",
        "id": 129408796,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1531226147
    },
    {
        "content": "<p>And it will allow you to define your function encoding the graph with matching.</p>",
        "id": 129408856,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1531226170
    },
    {
        "content": "<p>Like Mario wrote above: <code>inductive vertices | north_shore | west_island | ... </code></p>",
        "id": 129408944,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1531226275
    },
    {
        "content": "<p>Thank you for that. I understood</p>",
        "id": 129409001,
        "sender_full_name": "Hoang Le Truong",
        "timestamp": 1531226311
    },
    {
        "content": "<p>So, that is the same thing as your first method, except Mario's suggestion is more readable</p>",
        "id": 129409007,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1531226317
    },
    {
        "content": "<p>(For people who have walked through Koenigsberg...; or those who looked at the map on Wikipedia...)</p>",
        "id": 129409014,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1531226330
    },
    {
        "content": "<p>Ok, so, afterwards you have to prove that the thing is undirected, and then you have to show us the formalisation of \"Euler walk\"</p>",
        "id": 129409133,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1531226488
    }
]