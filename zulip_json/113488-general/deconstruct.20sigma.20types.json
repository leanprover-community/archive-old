[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"c1\">-- works fine</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"err\">Σ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"err\">Σ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)),</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n\n<span class=\"c1\">-- doesn&#39;t work</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"err\">Σ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"bp\">⟨</span><span class=\"n\">s</span><span class=\"o\">,</span><span class=\"n\">t</span><span class=\"bp\">⟩</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"err\">Σ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)),</span> <span class=\"n\">s</span>\n<span class=\"c1\">-- invalid binder, identifier expected</span>\n<span class=\"c1\">-- and other errors</span>\n</pre></div>\n\n\n<p>Can't I take a sigma type apart like this? Isn't a sigma type just a structure? I suspect I'm missing a trick?</p>",
        "id": 148871250,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1543594560
    },
    {
        "content": "<p>nooooo</p>",
        "id": 148871337,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1543594612
    },
    {
        "content": "<p>don’t deconstruct things in definitions</p>",
        "id": 148871343,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1543594620
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"c1\">-- works</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"err\">Σ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"err\">Σ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)),</span> <span class=\"k\">let</span> <span class=\"bp\">⟨</span><span class=\"n\">s</span><span class=\"o\">,</span><span class=\"n\">t</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">s</span>\n</pre></div>",
        "id": 148871461,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1543594728
    },
    {
        "content": "<p>Is this better Kenny?</p>",
        "id": 148871469,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1543594736
    },
    {
        "content": "<p>Or still bad?</p>",
        "id": 148871480,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1543594745
    },
    {
        "content": "<p>drop the type ascription</p>",
        "id": 148871492,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1543594766
    },
    {
        "content": "<p>Heh, why would this help?</p>",
        "id": 148871506,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1543594787
    },
    {
        "content": "<p>the syntax for lambda match is <code>λ ⟨s,t⟩, ...</code> with no type ascriptions permitted</p>",
        "id": 148871515,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1543594798
    },
    {
        "content": "<p>Oh!</p>",
        "id": 148871569,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1543594817
    },
    {
        "content": "<p>the <code>⟨s,t⟩</code> is not actually a pair even though it looks like one</p>",
        "id": 148871573,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1543594822
    },
    {
        "content": "<p>it's just syntax</p>",
        "id": 148871577,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1543594826
    },
    {
        "content": "<p>Kenny says it's a bad idea -- is the <code>let</code> thing OK or is it a bad idea for the same reason?</p>",
        "id": 148871593,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1543594844
    },
    {
        "content": "<p>it's the same</p>",
        "id": 148871607,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1543594860
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"c1\">-- works</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"err\">Σ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">s</span><span class=\"o\">,</span><span class=\"n\">t</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">s</span>\n</pre></div>",
        "id": 148871621,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1543594870
    },
    {
        "content": "<p>The simpler way is just to pattern match right from the start</p>",
        "id": 148871638,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1543594890
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"err\">Σ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"bp\">⟨</span><span class=\"n\">s</span><span class=\"o\">,</span><span class=\"n\">t</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">s</span>\n</pre></div>",
        "id": 148871648,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1543594904
    },
    {
        "content": "<p>I think the reason Kenny doesn't like those definitions is because it creates an auxiliary, and it doesn't unfold unless it's an explicit pair</p>",
        "id": 148871724,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1543594975
    },
    {
        "content": "<p>as opposed to</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"err\">Σ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n</pre></div>",
        "id": 148871743,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1543594995
    },
    {
        "content": "<p>It would be nice if what Kevin wants would just be syntactic sugar for the <code>p, p.1</code> version...</p>",
        "id": 148872806,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1543596005
    },
    {
        "content": "<p>But I guess syntactic sugar will only take you so far...</p>",
        "id": 148872834,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1543596035
    },
    {
        "content": "<p>this is a thing: they are called lazy pattern matches in haskell, and they've been discussed on this chat before</p>",
        "id": 148873306,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1543596562
    },
    {
        "content": "<p>Yeah, this is a very common fantasy on this chat</p>",
        "id": 148873412,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1543596658
    },
    {
        "content": "<p>Reality: <code>set.image (λ x, let (⟨⟨⟨j,k⟩,f⟩,r⟩ : (Σ y : (Σ x : J × J, (R x.1) → (R x.2)), R y.1.1)) := x in\n      (X ⟨j,r⟩ - X ⟨k,f r⟩)) {x | x.1 ∈ F})</code></p>",
        "id": 148874206,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1543597351
    },
    {
        "content": "<p>well, that's actually just a small piece of the reality</p>",
        "id": 148874226,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1543597379
    },
    {
        "content": "<p>We're making colimits in the category of commutative rings!</p>",
        "id": 148874243,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1543597395
    },
    {
        "content": "<p>Without it, it will be <code>x.1.1.1</code> everywhere</p>",
        "id": 148874306,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1543597445
    }
]