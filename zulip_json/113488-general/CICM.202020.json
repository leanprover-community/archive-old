[
    {
        "content": "<p>Registration for <a href=\"https://cicm-conference.org/2020/cicm.php?event=&amp;menu=general\">CICM 2020</a> is free and now open. The conference is July 27-30. You might see some familiar faces on the program. Check it out if you're interested!</p>",
        "id": 203387139,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1594302668
    },
    {
        "content": "<p>Kevin Buzzard will be speaking at CICM in 30 minutes: <a href=\"https://easychair.org/smart-program/CICM-13/2020-07-27.html#talk:155838\">https://easychair.org/smart-program/CICM-13/2020-07-27.html#talk:155838</a></p>",
        "id": 205110652,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595853108
    },
    {
        "content": "<p>Is there any connection info?</p>",
        "id": 205113220,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1595854748
    },
    {
        "content": "<p>I think you have to register</p>",
        "id": 205113376,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595854815
    },
    {
        "content": "<p>What about kindly asking someone who registered?</p>",
        "id": 205113616,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1595854952
    },
    {
        "content": "<p>Many thanks to all three people who sent me independent PMs.</p>",
        "id": 205113672,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1595854986
    },
    {
        "content": "<p>Someone should really tell all those Isar zealots that there proofs actually aren't readable.</p>",
        "id": 205123890,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1595860242
    },
    {
        "content": "<p>I guess they would know this if they had ever tried to ask mathematicians, so probably they are not really interested in knowing.</p>",
        "id": 205124000,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1595860286
    },
    {
        "content": "<p>You could say that on the slack chat</p>",
        "id": 205124401,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595860462
    },
    {
        "content": "<p>I take serious issue with the idea that the tactic part should just be omitted</p>",
        "id": 205124479,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595860506
    },
    {
        "content": "<p>it makes the reader dependent on the proof author since you can't dig beyond the level that the proof author thought was good enough. With sledgehammer the gaps can be quite big</p>",
        "id": 205124824,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595860678
    },
    {
        "content": "<p>Which slack chat?</p>",
        "id": 205124887,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1595860690
    },
    {
        "content": "<p>you would know if you registered :)</p>",
        "id": 205124937,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595860712
    },
    {
        "content": "<p>Ok, I'll let you tell them.</p>",
        "id": 205124969,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1595860725
    },
    {
        "content": "<p>It's fascinating because proof assistants require such a degree of training that it becomes almost impossible to step back and calmly assess how unreadable everything is without proper training.</p>",
        "id": 205125089,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1595860781
    },
    {
        "content": "<p>I'm sure those people are sincere when they claim their Isar proofs are readable.</p>",
        "id": 205125122,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1595860799
    },
    {
        "content": "<p>I think Kevin said it right - formal proofs are another language, you have to learn to read it</p>",
        "id": 205125219,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595860827
    },
    {
        "content": "<p>Mario, you were right to call me out for opposing \"tactic proof\" to \"declarative proof\" -- that's not what I meant. I really like SÃ©bastien's proofs, and I count them as declarative.</p>\n<p>But I think the point remains that there is a tension between writing short proofs and writing proofs that are easy for others to read. In Mathlib (as well as in the Mathematical Components library), the emphasis is mostly on being short and efficient, rather than on being verbose and explanatory. I am not complaining about that, only pointing out that there is a difference.</p>",
        "id": 205126372,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1595861343
    },
    {
        "content": "<p>BTW, the Isabelle style relies heavily on automation. The goal is: \"have A, by auto, have B, by auto, have C, by auto.\"</p>",
        "id": 205126605,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1595861440
    },
    {
        "content": "<p>Yes, this is why I wrote in the Zoom chat that what is missing is not Isar, it's automation.</p>",
        "id": 205126648,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1595861465
    },
    {
        "content": "<p>In the current state of technology, it doesn't seem realistic to me to have a single library which is good for large scale formalization and teaching. We can write readable proofs and use format_lean or something better in this spirit for teaching, but it won't be mathlib.</p>",
        "id": 205126825,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1595861539
    },
    {
        "content": "<p>And Kevin explained why this is unrealistic anyway: large scale formalization require too much mathematical sophistication for students.</p>",
        "id": 205126872,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1595861568
    },
    {
        "content": "<p>Lean's <code>assume</code>, <code>have</code>, <code>show</code>, <code>obtain</code>, <code>suffices</code>, ... are all stolen from Isar, which in turn took them from Mizar. That was my point: we do have that in Lean.</p>",
        "id": 205127007,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1595861637
    },
    {
        "content": "<p>I think that makes sense: separate exposition from the library. The key requirements on the library are efficiency and maintainability.</p>",
        "id": 205127173,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1595861709
    },
    {
        "content": "<p><code>obtain</code> is not stolen from Isar. I asked for it.</p>",
        "id": 205127205,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1595861726
    },
    {
        "content": "<p>Are these talks recorded somewhere?</p>",
        "id": 205127275,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595861754
    },
    {
        "content": "<p>We had it in Lean 2 (as a proof term keyword). It went away in Lean 3, until you brought it back as a tactic.</p>",
        "id": 205127381,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1595861792
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> Unfortunately presenters need to record their talks themselves (for legal reasons).  And you're supposed to upload them to the conference slack, which is not public.</p>",
        "id": 205127917,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1595862018
    },
    {
        "content": "<p>Interesting. What are the legal reasons? All the talks at IJCAR were live streamed on YouTube and recorded. (Maybe the presenters needed to agree to that?)</p>",
        "id": 205128187,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1595862123
    },
    {
        "content": "<p>kevin recorded his talk, and they can be uploaded anywhere</p>",
        "id": 205128231,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595862143
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110865\">Jeremy Avigad</span> <a href=\"#narrow/stream/113488-general/topic/CICM.202020/near/205128187\">said</a>:</p>\n<blockquote>\n<p>Interesting. What are the legal reasons? All the talks at IJCAR were live streamed on YouTube and recorded. (Maybe the presenters needed to agree to that?)</p>\n</blockquote>\n<p>They did.</p>",
        "id": 205128299,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1595862171
    },
    {
        "content": "<p>Claudio said \"a lot of paperwork\"</p>",
        "id": 205128313,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595862178
    },
    {
        "content": "<p>(No <code>suffices</code> in Isar though. That must come from ssreflect or something.)</p>",
        "id": 205130805,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1595863206
    },
    {
        "content": "<p>someone asked about what the equivalent of <code>moreover ... ultimately</code> is</p>",
        "id": 205131074,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595863325
    },
    {
        "content": "<p>I suppose in practice it's <code>simp with *</code> etc</p>",
        "id": 205131642,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1595863620
    },
    {
        "content": "<p>how hard would it be to do a direct translation of isabelle syntax into lean syntax?</p>",
        "id": 205131932,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595863795
    },
    {
        "content": "<p>are there any isabelle proof structuring mechanisms that would need to be significantly reorganized to put in lean?</p>",
        "id": 205132052,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595863850
    },
    {
        "content": "<p>Our stuff looks much more flexible anyway.</p>",
        "id": 205132326,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1595864028
    },
    {
        "content": "<p>We would surely know by now if there was some \"way that mathematicians wanted to express an argument\" which was missing in Lean</p>",
        "id": 205132424,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595864071
    },
    {
        "content": "<p>I mean a more literal kind of translation than that</p>",
        "id": 205132456,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595864090
    },
    {
        "content": "<p>Kevin, of course there is!</p>",
        "id": 205132471,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1595864101
    },
    {
        "content": "<p>i.e. something that a regex could do</p>",
        "id": 205132479,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595864105
    },
    {
        "content": "<p>The Isar context is explicit (doesn't contain everything in scope) and ordered; that alone would probably necessitate implementing a complete different tactic framework for it</p>",
        "id": 205132487,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1595864109
    },
    {
        "content": "<p>Things like \"Cleary, we get that...\", \"Details are left to the readers\", etc...</p>",
        "id": 205132528,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1595864137
    },
    {
        "content": "<p>how does one determine the context at a line? Is it just this <code>have</code> <code>hence</code> <code>moreover</code> dance or is there more?</p>",
        "id": 205132688,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595864234
    },
    {
        "content": "<p>The fundamental ones are <code>from</code> and <code>using</code> IIRC (what even is the difference? I really don't remember). <code>have</code> does not adding anything to the context by itself. <code>hence</code> is short for <code>from this have</code>. <code>moreover</code> is like giving those facts temporary names, then passing them using <code>from</code> when <code>ultimately</code> is used.</p>",
        "id": 205133026,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1595864404
    },
    {
        "content": "<p><code>from</code> goes before <code>have</code> etc., <code>using</code> goes after. It's a stylistic distinction.</p>",
        "id": 205133285,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1595864553
    },
    {
        "content": "<p>I guess <code>from</code> is already taken, but we could have a tactic <code>using [h1, h2] { tac }</code> that deletes everything from the context except for <code>h1,h2</code> and dependents before calling <code>tac</code></p>",
        "id": 205133333,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595864588
    },
    {
        "content": "<p>Basically for every proof step you select facts from the scope as your new, ordered context that tactics can access; but they can still access facts explicitly passed to them by name.</p>",
        "id": 205133682,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1595864764
    },
    {
        "content": "<p>There is also some implicit backtracking going on, around <code>;</code> I believe</p>",
        "id": 205134094,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1595864976
    },
    {
        "content": "<p>A tactic in Isabelle (unlike in HOL4 etc.) produces a possibly infinite sequences of states. Normally users only see the first one. When you combine them, depending on which tactical (i.e., operator on tactics, such as <code>;</code>) you use, the sequences will be combined differently. Thus you can write simple tactics that, say, explore both the left and the right branch of a disjunction, and so on. In practice, this is very little used, though.</p>",
        "id": 205134380,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1595865120
    },
    {
        "content": "<p>Most of it is available only at the ML (metaprogramming) level. <code>;</code> is a fairly recent (~2014) addition, inspired by Coq.</p>",
        "id": 205134511,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1595865175
    },
    {
        "content": "<p>The backtracking also happens around <code>,</code> I believe.</p>",
        "id": 205134606,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1595865229
    },
    {
        "content": "<p>backtracking only happens inside tactic parts, right? Not at the top level have/show stuff</p>",
        "id": 205134718,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595865282
    },
    {
        "content": "<p>Right.</p>",
        "id": 205134846,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1595865351
    },
    {
        "content": "<p>I think Larry, who introduced it, used it quite a bit to implement various heuristic tactics -- maybe <code>auto</code> uses it. But now, with the move towards Isar and Sledgehammer, it's considered quite low level.</p>",
        "id": 205135031,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1595865432
    },
    {
        "content": "<p>I don't think I've ever used \"ultimately\" in an informal proof. I'm not sure what it means... is it just another <code>have</code>?</p>",
        "id": 205135474,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595865629
    },
    {
        "content": "<p>It means \"from all the facts I tagged with <code>moreoever</code>, it follows that...\"</p>",
        "id": 205135815,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1595865823
    },
    {
        "content": "<p>does this also untag the moreover facts?</p>",
        "id": 205136304,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595866040
    },
    {
        "content": "<p>Yes. Every <code>moreover</code> belongs to exactly one <code>ultimately</code>.</p>",
        "id": 205136423,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1595866101
    },
    {
        "content": "<p>can you put other things between the <code>moreover</code>s and the <code>ultimately</code>?</p>",
        "id": 205136469,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595866134
    },
    {
        "content": "<p>I don't think so, IIRC</p>",
        "id": 205136520,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1595866170
    },
    {
        "content": "<p><code>calc</code>-like chaining is done via <code>also ... also .... finally</code>, btw. A little confusing to beginners, as you might imagine.</p>",
        "id": 205136798,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1595866319
    },
    {
        "content": "<p>is there a cheat sheet for all this heretofore stuff?</p>",
        "id": 205137114,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595866507
    },
    {
        "content": "<p><a href=\"https://isabelle.in.tum.de/doc/isar-ref.pdf\">https://isabelle.in.tum.de/doc/isar-ref.pdf</a> has a quick reference in appendix A</p>",
        "id": 205137404,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595866668
    },
    {
        "content": "<p>what does <code>proof m1 qed m2</code> mean?</p>",
        "id": 205137488,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595866696
    },
    {
        "content": "<p>are <code>m1</code> and <code>m2</code> tactics, proof structure commands, or statements?</p>",
        "id": 205137556,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595866739
    },
    {
        "content": "<p>Tactics, at least in the Lean lingo...? I believe the special thing about putting <code>m2</code> there was that it will <em>not</em> backtrack to <code>m1</code>.</p>",
        "id": 205137683,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1595866809
    },
    {
        "content": "<p>for some reason makarius is touchy about calling \"proof methods\" tactics, but larry paulson always calls them tactics</p>",
        "id": 205137785,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595866881
    },
    {
        "content": "<p>Oh, but <em>after</em> <code>m1</code> you can insert some more Isar steps, i.e. <code>have</code> etc. So it's \"I prove this fact using this initial tactic (e.g. induction), then I do some other steps, then I solve the remainder using this final tactic (e.g. slaying boring induction cases with <code>auto</code>)\".</p>",
        "id": 205138414,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1595867257
    },
    {
        "content": "<p>so you would normally use <code>proof ... qed</code> where a lean proof would use brackets in subgoals?</p>",
        "id": 205138674,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595867385
    },
    {
        "content": "<p>wait, how are subgoals passed back from the tactic in a declarative proof structure?</p>",
        "id": 205138832,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595867459
    },
    {
        "content": "<p>oh, is <code>next</code> like <code>swap</code>?</p>",
        "id": 205139228,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595867656
    },
    {
        "content": "<p>Does anyone know where I can find the grammar of proof methods?</p>",
        "id": 205140377,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595868282
    },
    {
        "content": "<ol>\n<li>\n<p><code>moreover</code> and <code>ultimately</code>: You certainly can point to other facts as usual.</p>\n</li>\n<li>\n<p><code>proof m1 ... qed m2</code>. This is like <code>begin ... end</code> in Lean, but <code>m1</code> (a proof method) is applied before entering, as the first step. This makes it possible to do a bit of massaging using a proof method in an Isar proof. Similarly, the rarely used <code>m2</code> after <code>qed</code> can kill whatever cases are left. It's useful when you do structural induction: You deal with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">m</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">m</span></span></span></span> of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> cases explicitly and write <code>qed auto</code> to kill the remaining <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>â</mo><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">n - m</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">â</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">m</span></span></span></span>.</p>\n</li>\n<li>\n<p>A tactic is an ML (metaprogramming) concept. A proof method is an \"interactive\" tactic in Lean lingo, one that is registered as available in Isar. Since there's always a tactic behind a proof method, the distinction is not so relevant to most users.</p>\n</li>\n</ol>",
        "id": 205158402,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1595878159
    },
    {
        "content": "<p>Wow, I had never looked at the Isar reference manual in my life. It's at least seven times longer than I expected.</p>",
        "id": 205158600,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1595878298
    },
    {
        "content": "<p>Hm, it has my name on the cover. Maybe I've \"looked\" at it before after all. ;)</p>",
        "id": 205158703,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1595878347
    },
    {
        "content": "<p>Me talking to a summer project student the other day: \"do we have theorem X in mathlib?\". The reply: \"yes, because you PR'ed it a week ago\". Of course I could have told this story here already :-/</p>",
        "id": 205160105,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595879160
    },
    {
        "content": "<p>FYI, there are two Lean talks today at CICM.</p>\n<ul>\n<li>14:15: Peter Koepke, Adrian De Lon and Anton Lorenzen, Interpreting Mathematical Texts in Naproche-SAD (and: From LaTeX to Lean with a controlled natural language)</li>\n<li>16:30: Floris van Doorn, Gabriel Ebner and Robert Lewis, Maintaining a Library of Formal Mathematics</li>\n</ul>\n<p>As well as plenty of interesting <a href=\"https://easychair.org/smart-program/CICM-13/\">non-Lean talks</a> of course.</p>",
        "id": 205222988,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1595934754
    },
    {
        "content": "<p>Today I would have some time to attend (-;</p>",
        "id": 205223358,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595935110
    },
    {
        "content": "<p>Can I still register somewhere?</p>",
        "id": 205223423,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595935164
    },
    {
        "content": "<p><a href=\"https://forms.gle/oS5BVGDf6LgDGDiK8\">https://forms.gle/oS5BVGDf6LgDGDiK8</a></p>",
        "id": 205223524,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1595935236
    },
    {
        "content": "<p>That asks me for a google account...</p>",
        "id": 205223556,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595935271
    },
    {
        "content": "<p>Dear all, thanks for the PMs!</p>",
        "id": 205224553,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595936189
    },
    {
        "content": "<p>Are the Zoom secrets the same as yesterday?</p>",
        "id": 205226967,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1595938006
    },
    {
        "content": "<p>Nice talk, Gabriel! Too bad the questions were completely unrelated to the talk.</p>",
        "id": 205246969,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1595948580
    },
    {
        "content": "<p>Yup... the talks was nice!</p>",
        "id": 205247061,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595948616
    },
    {
        "content": "<p>It's not clear to me why someone cares about teaching undergraduate <em>mathematics</em> students with \"readable\" proof assistants, <em>and</em> care about intuitionism enough to have it be your first question on a random talk...</p>",
        "id": 205247259,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595948676
    },
    {
        "content": "<p>Anyway, you did a good job answering the questions (-;</p>",
        "id": 205247290,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595948690
    },
    {
        "content": "<p>I'm a bit sad that I had to answer the last question myself. I guess it simply means I should start using twitter, but somehow I cannot force myself to do this. So let me at least repeat it here: Kevin has done a lot of great stuff, but when it comes to seriously using Lean to teach undergrad math <em>during official lectures</em>, not as a club for volunteer students,  then I think I'm still the only one to do it.</p>",
        "id": 205247771,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1595948897
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> Sorry for forgetting about you.  It's hard to compete against Kevin's prolific media presence.</p>",
        "id": 205250672,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1595950125
    },
    {
        "content": "<p>I know, and I didn't want to complain about you. I'm simply a bit tired of this.</p>",
        "id": 205251635,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1595950545
    },
    {
        "content": "<p>I have so far persuaded my university to let me teach a lean course in Jan to March 2021 for graduate students as part of some multi-university (Oxford, Warwick, Bath, Bristol, Imperial) taught course centre, and after that I'll propose an optional undergraduate lean course, but the lean component of my first year course is optional.</p>",
        "id": 205257054,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595953050
    },
    {
        "content": "<p>I have a question which is actually related to Gabriel's talk: could we have a clear message when the linter has nothing to say? Each time I run <code>#lint</code> I spend 20 seconds searching for a failure among all the <code>OK</code> messages. I'd like to see a single <code>OK</code>. And If there are errors then I'd like to see no <code>OK</code> messages.</p>",
        "id": 205288567,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1595969049
    },
    {
        "content": "<p><code>#lint-</code> if you're using it in VSCode.</p>",
        "id": 205288647,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1595969102
    },
    {
        "content": "<p>i have had the same frustration as patrick. I wonder if it's better to rename the current<code>#lint-</code>to <code>#lint</code> and the current <code>#lint</code> to <code>#lint+</code>?</p>",
        "id": 205288860,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1595969248
    },
    {
        "content": "<p>This is much better, although I wouldn't mind having some congratulation message instead of nothing (but only one such message, not 15).</p>",
        "id": 205289222,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1595969447
    },
    {
        "content": "<p>And indeed I don't see why this is not the default setting.</p>",
        "id": 205289261,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1595969470
    },
    {
        "content": "<p>I don't really see why <code>OK</code> messages even exist?</p>",
        "id": 205292036,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595971110
    },
    {
        "content": "<p>I guess it's nice to know all those linters exist but it seems a bit gratuitous</p>",
        "id": 205292071,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595971139
    },
    {
        "content": "<p><code>#lint-</code> is silent so you can write it at the bottom of your file and leave it there. It's loud when something goes wrong and makes no message when it succeeds.</p>",
        "id": 205292100,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1595971158
    },
    {
        "content": "<p>The <code>OK</code> messages are there so you know it's working. If it's your first time using <code>#lint</code> and you happened to get everything right, you might wonder if something was broken when there was no output.</p>",
        "id": 205292188,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1595971208
    },
    {
        "content": "<p>How about <code>#lint</code> acts the same as <code>#lint-</code> except that if there is no output then it says <code>all lints pass</code> or something like that</p>",
        "id": 205292222,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595971235
    },
    {
        "content": "<p>I think that's exactly Patrick's suggestion, which sounds fine to me, except for ruining the silent lint at the end of the file. But I'm not sure anyone uses that.</p>",
        "id": 205292385,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1595971325
    },
    {
        "content": "<p>You can still use <code>#lint-</code> if you want silent lint</p>",
        "id": 205292678,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595971535
    },
    {
        "content": "<p>Oh, I see what you mean. Yeah, that sounds fine.</p>",
        "id": 205292773,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1595971572
    },
    {
        "content": "<p>Yes, this is what I meant.</p>",
        "id": 205293120,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1595971807
    },
    {
        "content": "<p>sounds good to me</p>",
        "id": 205300623,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1595977063
    },
    {
        "content": "<p>Tomorrow's afternoon's session is on Machine Learning and Theorem Proving.  If you don't read the <a href=\"#narrow/stream/219941-Machine-Learning.20for.20Theorem.20Proving\">Machine Learning for Theorem Proving</a> stream, I made a <a href=\"#narrow/stream/219941-Machine-Learning.20for.20Theorem.20Proving/topic/CICM.20Machine.20Learning.20and.20Theorem.20Proving.20Session\">thread</a> with a list of the talks, and links to where we've already talked about these papers on this Zulip.  (I'm not saying we have to move any discussion away from this thread, but just wanted to provide this info if anyone finds it useful.)</p>",
        "id": 205305192,
        "sender_full_name": "Jason Rute",
        "timestamp": 1595981004
    },
    {
        "content": "<p>My talk on Metamath Zero starts in a few minutes</p>",
        "id": 205343668,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1596021839
    },
    {
        "content": "<p>I'm starting the final countdown tune (-;</p>",
        "id": 205343975,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1596022040
    },
    {
        "content": "<p>Mario, great talk!</p>",
        "id": 205347159,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1596024283
    },
    {
        "content": "<p>Unfortunately I couldn't stay for the questions... we have our local seminar right now...</p>",
        "id": 205347296,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1596024356
    },
    {
        "content": "<p>But I wish you lots of luck with the remainders of MMC and <code>verifier.mmb</code></p>",
        "id": 205347366,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1596024380
    },
    {
        "content": "<p>(This local seminar also means that I will miss the talk by Szegedy <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span>)</p>",
        "id": 205347441,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1596024430
    },
    {
        "content": "<p>Arg, I come too late for Mario's talk. I should have set alarms for the whole day.</p>",
        "id": 205347648,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1596024579
    },
    {
        "content": "<p>It was recorded and I will get it up on the tubes soon</p>",
        "id": 205347751,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1596024635
    },
    {
        "content": "<p><a href=\"https://youtu.be/CxS0ONDfWJg\">https://youtu.be/CxS0ONDfWJg</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"CxS0ONDfWJg\" href=\"https://youtu.be/CxS0ONDfWJg\"><img src=\"https://i.ytimg.com/vi/CxS0ONDfWJg/default.jpg\"></a></div>",
        "id": 205356071,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1596029477
    },
    {
        "content": "<p>Is there also a record of <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span>'s talk anywhere?</p>",
        "id": 205356909,
        "sender_full_name": "Dan Stanescu",
        "timestamp": 1596029878
    },
    {
        "content": "<p>It was posted on the conference slack, but it's not on youtube (yet?)</p>",
        "id": 205357267,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1596030043
    },
    {
        "content": "<p>I don't have a youtube account, can I upload it to the leanprover-community one?</p>",
        "id": 205357611,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1596030197
    },
    {
        "content": "<p>The user/password are what you expect!</p>",
        "id": 205357691,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1596030238
    },
    {
        "content": "<p><a href=\"https://youtu.be/5HDlgsjO8-w\">https://youtu.be/5HDlgsjO8-w</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"5HDlgsjO8-w\" href=\"https://youtu.be/5HDlgsjO8-w\"><img src=\"https://i.ytimg.com/vi/5HDlgsjO8-w/default.jpg\"></a></div>",
        "id": 205358662,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1596030649
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 205358814,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1596030724
    },
    {
        "content": "<p>Can anyone summarize Szegedy's talk? Unfortunately I had to miss it.</p>",
        "id": 205368691,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1596035001
    },
    {
        "content": "<p>(Or does anyone know if it has been recorded, and if the recording will be available?)</p>",
        "id": 205368730,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1596035019
    },
    {
        "content": "<p>According to the slack it wasn't recorded but there are slides, are you on the slack?</p>",
        "id": 205368834,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1596035051
    },
    {
        "content": "<p>Nope <span aria-label=\"expressionless\" class=\"emoji emoji-1f611\" role=\"img\" title=\"expressionless\">:expressionless:</span></p>",
        "id": 205368903,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1596035085
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/x-eEIjdrGaYBVJNry8zG4gJc/A-Promising-Path-To-Autoformalization-and-General-AI.pdf\">A-Promising-Path-To-Autoformalization-and-General-AI.pdf</a></p>",
        "id": 205369043,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1596035141
    },
    {
        "content": "<p>Hmmm... the slides don't really help. (Which doesn't say anything... good slides can be minimalistic.)</p>",
        "id": 205370079,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1596035560
    },
    {
        "content": "<p>But it's not at all clear whether we should expect a math-prover oracle over at Mountain View some 10 years from now. All I see is a bunch of generic diagrams and some tables with numbers.<br>\nSo I will have to hope for an actual recording to get the \"vibe\" of the talk <span aria-label=\"stuck out tongue wink\" class=\"emoji emoji-1f61c\" role=\"img\" title=\"stuck out tongue wink\">:stuck_out_tongue_wink:</span></p>",
        "id": 205370240,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1596035640
    },
    {
        "content": "<p>Has Kevin's talk been uploaded anywhere? Unfortunately I missed it.</p>",
        "id": 205375850,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1596038153
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> I think <span class=\"user-mention\" data-user-id=\"239426\">@Christian Szegedy</span>  presented a very hopeful message basically saying that modern AI is showing amazing results and and computation is growing quite fast, but he was fairly tight lipped about what he is working on with specifics (excepted for already published papers).  I think he said something non-specific about research level mathematics being formalized in the 10 years, but again I think this was more hopeful than a specific 10-year plan on his part.  Is there something you are looking for specifically from the talk?</p>",
        "id": 205377734,
        "sender_full_name": "Jason Rute",
        "timestamp": 1596039044
    },
    {
        "content": "<p>I think <span class=\"user-mention\" data-user-id=\"306713\">@Lasse</span>'s <a href=\"http://coq-tactician.github.io/\">Tactician</a> system (which is similar to TacticToe) which was presented, is a very practical system if you are looking for machine learning built into a theorem prover (Coq) right now.  I think the only thing stopping one from building it in Lean is a large amount of engineering. <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 205379295,
        "sender_full_name": "Jason Rute",
        "timestamp": 1596039761
    },
    {
        "content": "<p>I heard Christian quoting this ten year figure last year so it should be nine years now</p>",
        "id": 205379822,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1596040006
    },
    {
        "content": "<p>We need one of those big countdown clocks. <span aria-label=\"clock\" class=\"emoji emoji-1f557\" role=\"img\" title=\"clock\">:clock:</span></p>",
        "id": 205379896,
        "sender_full_name": "Jason Rute",
        "timestamp": 1596040044
    },
    {
        "content": "<p>A recording of my talk is on my laptop which is currently in a field and out of batteries</p>",
        "id": 205379897,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1596040044
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"115715\">@Jason Rute</span> Thanks for the summary. I don't really have more specific questions.</p>",
        "id": 205380546,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1596040365
    },
    {
        "content": "<p>Every future big development in AI is always 10 years away.</p>",
        "id": 205406843,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1596053096
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110865\">Jeremy Avigad</span> <a href=\"#narrow/stream/113488-general/topic/CICM.202020/near/205126372\">said</a>:</p>\n<blockquote>\n<p>But I think the point remains that there is a tension between writing short proofs and writing proofs that are easy for others to read. In Mathlib (as well as in the Mathematical Components library), the emphasis is mostly on being short and efficient, rather than on being verbose and explanatory. I am not complaining about that, only pointing out that there is a difference.</p>\n</blockquote>\n<p>I think this deserves attention. Also, maintainability could later depend on someone trying to understand the proof later. Here, a (more) declarative style might help.</p>",
        "id": 206198903,
        "sender_full_name": "Pedro SÃ¡nchez Terraf",
        "timestamp": 1596749098
    },
    {
        "content": "<p>In lean, we work from the presumption that the proof context at all intermediate points is available. This is in common with Coq, and a significant difference from Isabelle where the expectation is that the proof text should be readable on its own. So lean tooling goes into making sure that you can see the tactic state (even if you are on a browser or something), rather than redundantly (and insufficiently) copying bits of the tactic state into lots of <code>have</code> and <code>show</code> lines.</p>",
        "id": 206199257,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1596749321
    },
    {
        "content": "<p>I understand it is a different philosophy. This makes sense if you also aim to have a <em>readable</em> context.</p>",
        "id": 206199516,
        "sender_full_name": "Pedro SÃ¡nchez Terraf",
        "timestamp": 1596749497
    },
    {
        "content": "<p>Kevin has said on many occasions (to the agreement of many here, I believe) that he finds tactic proofs more readable than \"declarative\" isar style term proofs because the tactic state provides a tremendous amount of context and clarity to the proof. (We have since lowered the gap a bit by making the proof context be visible in term proofs too.)</p>",
        "id": 206199581,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1596749532
    },
    {
        "content": "<p>(I must insist that I have to experiment much more with Lean to have a more complete picture)</p>",
        "id": 206199610,
        "sender_full_name": "Pedro SÃ¡nchez Terraf",
        "timestamp": 1596749554
    },
    {
        "content": "<p>I also agree with <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> that many Isar proofs you find in the wild are not readable</p>",
        "id": 206199740,
        "sender_full_name": "Pedro SÃ¡nchez Terraf",
        "timestamp": 1596749637
    },
    {
        "content": "<p>I get the general sense that these term mode proofs are from the old days when lean copied isabelle, and we have since found a style of our own that is primarily backward reasoning with occasional <code>have</code> steps and emphasis on block structure</p>",
        "id": 206199867,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1596749675
    },
    {
        "content": "<p>You bring an interesting point. When I first learned Isabelle, I only knew the backwards approach. I got used to it and happily used it until I realized that I was starting to <em>think backwards</em>. And that's not the way you want to present a proof (again, thinking in terms of a potential reader).</p>",
        "id": 206200274,
        "sender_full_name": "Pedro SÃ¡nchez Terraf",
        "timestamp": 1596749992
    },
    {
        "content": "<p>I am the worst person to talk to about these things because I can never remember what all these different kinds of proofs are. I am always surprised that there are people who see proofs in this way, asking how they fit together. Mathematicians sometimes argue forwards and sometimes backwards, and if it's in tactic mode with comments then you can normally find your way around it, whichever way it's going</p>",
        "id": 206204711,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1596753101
    },
    {
        "content": "<p>One mental straightjacket that theorem provers impose is you have to prove theorems in the order that you state them. While within a tactic block you can work \"forwards\" and \"backwards\", on a bigger scale you're forced into working \"forwards\".</p>",
        "id": 206207638,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1596754828
    },
    {
        "content": "<p>In a good maths paper, the author will tell me the big result they want me to care about, then tell me the \"big ideas\" of the proof (whether or not this is done inside a <code>\\begin{proof} ... \\end{proof}</code> LaTeX environment, and then spend the rest of the paper preparing promised ingredients, cleaning up loose ends, doing computations, etc. It's great to read papers like this, because you have the easy option of \"Oh, Section 4 is going to prove Lemma B, and I can see how that would work, so I'm going to skip it.\"</p>",
        "id": 206207645,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1596754834
    },
    {
        "content": "<p>Especially because long proofs tend to be slow to elaborate, in Lean, and I suspect all other theorem provers, we tend to take a much more pedagogical style of building everything up in little increments. Obviously there are some big advantages here --- no one like having to wonder if an argument has become circular, which is always a possibility once it's \"non-linear\". And if you're a student needing to learn all the detailed mechanics, it's no problem reading it from the beginning.</p>",
        "id": 206207657,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1596754841
    },
    {
        "content": "<p>But eventually it's a bit of a hassle. :-). I can imagine a theorem prover with a new keyword <code>promise</code>, where you just get to state a lemma, without proving it. You then use it happily, but have to come back to it by some specified boundary. Some linearity could easily be enforced (when it's time to prove a promise, the environment is \"rolled back\" to the moment it was stated, perhaps).</p>",
        "id": 206207663,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1596754847
    },
    {
        "content": "<p>The idea of laying out definitions out of order is not new to computers. Consider function definition order in most programming languages</p>",
        "id": 206207763,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1596754929
    },
    {
        "content": "<p>even if you have some requirement of acyclicity it's not hard to do a topological sort</p>",
        "id": 206207780,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1596754957
    },
    {
        "content": "<p>Exactly -- so why don't we have it? :-)</p>",
        "id": 206207828,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1596755015
    },
    {
        "content": "<p>I think it is good that most theorem provers don't do this. It would make it much less obvious how the argument goes</p>",
        "id": 206207979,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1596755061
    },
    {
        "content": "<p>I already find dependency ordering somewhat confusing at the file level, where lean is already textual-order-independent</p>",
        "id": 206208134,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1596755176
    },
    {
        "content": "<p>There are non-language specific solutions to this problem, such as literate programming (possibly somewhat language-specific) and just using multiple files indeed</p>",
        "id": 206208277,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596755305
    },
    {
        "content": "<p>Agda has forward declarations, so you can do something like</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">T</span>\n\n<span class=\"o\">[</span><span class=\"n\">other</span> <span class=\"n\">stuff</span><span class=\"o\">]</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</code></pre></div>\n\n\n<p>Don't know how hard it would be to support this in Lean.</p>",
        "id": 206208283,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1596755313
    },
    {
        "content": "<p>what is the scope of the forward declaration?</p>",
        "id": 206208333,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1596755362
    },
    {
        "content": "<p>and can you refer to it in proofs</p>",
        "id": 206208353,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1596755377
    },
    {
        "content": "<p>(Using multiple files is just pushing back the problem to \"how do I understand this pile of files\" but now it's at least not language dependent)</p>",
        "id": 206208447,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596755436
    },
    {
        "content": "<p><code>X</code> is in scope everywhere below <code>X</code>, just like a regular definition. Cyclic dependencies are allowed and induce an implicit mutual block. (Lean obviously wouldn't do that.) I forget what Agda does about defeq, i.e. whether <code>X</code> reduces when it's used before its definition.</p>",
        "id": 206208639,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1596755628
    },
    {
        "content": "<p>If it's an implicit mutual, then you should be able to reduce it before its definition, because it already scanned forward to know the definition</p>",
        "id": 206208842,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1596755802
    },
    {
        "content": "<p>but wow there are so many ways that can go wrong</p>",
        "id": 206208865,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1596755831
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113488-general/topic/CICM.202020/near/206207645\">said</a>:</p>\n<blockquote>\n<p>In a good maths paper, the author will tell me the big result they want me to care about, then tell me the \"big ideas\" of the proof (whether or not this is done inside a <code>\\begin{proof} ... \\end{proof}</code> LaTeX environment, and then spend the rest of the paper preparing promised ingredients, cleaning up loose ends, doing computations, etc. </p>\n</blockquote>\n<p>I also enjoy this style of writing, and it is another sample of the fact that processing formal languages does not come in our genes. But we do not need to stretch the âreadable sourcesâ up to this point. In fact, formalized mathematics could be regarded as the (long) labor done to establish a result, and the write up always happens afterwards (which I imagine obtained by post-processing the sources and could cross-reference them at appropriate places).</p>",
        "id": 206214394,
        "sender_full_name": "Pedro SÃ¡nchez Terraf",
        "timestamp": 1596761533
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>  's invited talk at CICM 2020 is also available on YouTube as <a href=\"https://www.youtube.com/watch?v=FDx0nXFQloE\">Formalising Undergraduate Mathematics</a>  in case anyone missed it (for various reasons I just watched it today and found it really awesome and much much more informative than <a href=\"https://www.youtube.com/watch?v=Dp-mQ3HxgDE\">The Future of Mathematics?</a> ).</p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"Dp-mQ3HxgDE\" href=\"https://www.youtube.com/watch?v=Dp-mQ3HxgDE\"><img src=\"https://i.ytimg.com/vi/Dp-mQ3HxgDE/default.jpg\"></a></div><div class=\"youtube-video message_inline_image\"><a data-id=\"FDx0nXFQloE\" href=\"https://www.youtube.com/watch?v=FDx0nXFQloE\"><img src=\"https://i.ytimg.com/vi/FDx0nXFQloE/default.jpg\"></a></div>",
        "id": 206474735,
        "sender_full_name": "Utensil Song",
        "timestamp": 1597073427
    },
    {
        "content": "<p>It's also posted on <a href=\"https://coq.zulipchat.com/#narrow/stream/237655-Miscellaneous/topic/Formalizing.20undergraduate.20mathematics/near/206341456\">Coq's Zulip here</a> and Coq people are also wondering if the slides are available (It's available on the CICM 2020 Slack but I don't know if it's available as a public URL too).</p>",
        "id": 206474741,
        "sender_full_name": "Utensil Song",
        "timestamp": 1597073431
    },
    {
        "content": "<p>There're also lots of interesting discussions that happened on the CICM 2020 Slack. Two questions that <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> and <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> have spent quite some time to answer are (essentially) :</p>\n<ul>\n<li>Why should mathematicians care about (systematic) formalization?</li>\n<li>Why Lean might be a better choice for mathematicians?</li>\n</ul>\n<p>The related answers are posted here as a gist  <a href=\"https://gist.github.com/utensil/b4616dd5452d665318780c8a8b193dcc\">here</a> if anyone is interested.</p>",
        "id": 206476084,
        "sender_full_name": "Utensil Song",
        "timestamp": 1597074135
    },
    {
        "content": "<p>I put a link up to the slides on the YT page</p>",
        "id": 206513688,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597093792
    },
    {
        "content": "<p>I quickly read Mario and Kevin's stuff. I agree with a lot of what I see there, but I think the discussion about why Lean works better for mathematicians misses an important piece: the community help. I hope new users here stay around because they like the fact that many people spend a lot of time answering questions in the new members stream. We can spend ages describing everything that is nice in Lean, and compare it to what we think we know about the other proof assistants. But the actual reason why Kevin and I are here is that we came to Gitter (that we used to chat before Zulip) and Johannes HÃ¶lzl and especially Mario Carneiro spent <em>days</em> answering all our dumb questions until we started to understand something. We both tried Coq before, and it lacked a Mario.</p>",
        "id": 206517172,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1597095733
    },
    {
        "content": "<p>Yeah, without the community (which at that time was much smaller but was somehow still sufficiently big) Patrick and I would never have got going. Mario, Simon, Johannes and Reid were key players here -- when I was getting bogged down with the basics Mario was essential, and when I was getting bogged down with technicalities of type theory when doing schemes, and the realisation that R[1/fg] was not equal to R[1/f][1/g], Reid was invaluable.</p>",
        "id": 206520025,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597097777
    }
]