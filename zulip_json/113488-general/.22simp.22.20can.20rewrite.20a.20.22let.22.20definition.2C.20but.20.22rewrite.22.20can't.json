[
    {
        "content": "<p>MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span><span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>with <code>trace.simplify.rewrite</code> on, I can see:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">0</span><span class=\"bp\">.</span> <span class=\"o\">[</span><span class=\"n\">simplify.rewrite</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">]:</span> <span class=\"n\">a</span> <span class=\"bp\">==&gt;</span> <span class=\"mi\">1</span>\n</code></pre></div>\n<p>which is great. But when I try to replace the simp line with <code>rw a</code>, I get</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rewrite</span> <span class=\"n\">tactic</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"kd\">lemma</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">an</span> <span class=\"n\">equality</span> <span class=\"n\">nor</span> <span class=\"n\">a</span> <span class=\"n\">iff</span>\n</code></pre></div>\n<p>This is mysterious, since <code>rw</code> can rewrite \"external\" definitions made using \"def\":</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I suppose I'd like to better understand what's going on here; sometimes I would like to \"name\" expressions with <code>let</code>, but for some reason or another they need to be unfolded (for a <code>rw</code>, etc.), but <code>rw</code> and <code>unfold</code> tell me they can't do it.</p>",
        "id": 223727079,
        "sender_full_name": "Chase Meadors",
        "timestamp": 1611369658
    },
    {
        "content": "<p>The answer is exactly what you've already discovered - <code>dsimp</code> and <code>simp</code> can unfold lets, <code>rw</code> and <code>unfold</code> can't, they only work on definitions</p>",
        "id": 223727211,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611369860
    },
    {
        "content": "<p>Interesting. I suppose my intention when I use \"let\" in tactic mode is the exact same as making a \"def\". I simply want to \"abbreviate\" a certain expression. Is there any way to accomplish what I want, which is \"abbreviating\" some expression and \"unabbreviating\" it sometimes when needed?</p>",
        "id": 223727300,
        "sender_full_name": "Chase Meadors",
        "timestamp": 1611369992
    },
    {
        "content": "<p>That's what <code>let</code> is</p>",
        "id": 223727364,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611370085
    },
    {
        "content": "<p>It's roughly analogous to a local definition, but they are distinct mechanisms to lean</p>",
        "id": 223727387,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611370123
    },
    {
        "content": "<p>Use <code>dsimp only [foo]</code> to unfold <code>let foo := ..</code></p>",
        "id": 223727407,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611370151
    },
    {
        "content": "<p>I see. Thanks!</p>",
        "id": 223727451,
        "sender_full_name": "Chase Meadors",
        "timestamp": 1611370204
    },
    {
        "content": "<p>You can also use the <code>set x := foo</code> tactic, which creates a <code>let x := foo</code> but also adds a hypothesis <code>x = foo</code> to the context that you can give to <code>rw</code>, rewrite backwards with, etc</p>",
        "id": 223727479,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611370231
    }
]