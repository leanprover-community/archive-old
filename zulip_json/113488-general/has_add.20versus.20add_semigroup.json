[
    {
        "content": "<p>In my PR <a href=\"https://github.com/leanprover-community/mathlib/pull/11181\">https://github.com/leanprover-community/mathlib/pull/11181</a> we ran into a weird behavior that we don't understand. I attempted to make a MWE from it.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.algebra.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.matrix.notation</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.bilinear_map</span>\n\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">vec3_eq</span> <span class=\"o\">{</span><span class=\"n\">a₀</span> <span class=\"n\">a₁</span> <span class=\"n\">a₂</span> <span class=\"n\">b₀</span> <span class=\"n\">b₁</span> <span class=\"n\">b₂</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h₀</span> <span class=\"o\">:</span> <span class=\"n\">a₀</span> <span class=\"bp\">=</span> <span class=\"n\">b₀</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">a₁</span> <span class=\"bp\">=</span> <span class=\"n\">b₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">a₂</span> <span class=\"bp\">=</span> <span class=\"n\">b₂</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">a₀</span><span class=\"o\">,</span> <span class=\"n\">a₁</span><span class=\"o\">,</span> <span class=\"n\">a₂</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">b₀</span><span class=\"o\">,</span> <span class=\"n\">b₁</span><span class=\"o\">,</span> <span class=\"n\">b₂</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"c1\">--variable [has_add α]</span>\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">add_semigroup</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">vec3_add</span> <span class=\"o\">{</span><span class=\"n\">a₀</span> <span class=\"n\">a₁</span> <span class=\"n\">a₂</span> <span class=\"n\">b₀</span> <span class=\"n\">b₁</span> <span class=\"n\">b₂</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">a₀</span><span class=\"o\">,</span> <span class=\"n\">a₁</span><span class=\"o\">,</span> <span class=\"n\">a₂</span><span class=\"o\">]</span> <span class=\"bp\">+</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">b₀</span><span class=\"o\">,</span> <span class=\"n\">b₁</span><span class=\"o\">,</span> <span class=\"n\">b₂</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">a₀</span> <span class=\"bp\">+</span> <span class=\"n\">b₀</span><span class=\"o\">,</span> <span class=\"n\">a₁</span> <span class=\"bp\">+</span> <span class=\"n\">b₁</span><span class=\"o\">,</span> <span class=\"n\">a₂</span> <span class=\"bp\">+</span> <span class=\"n\">b₂</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">cross_product</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">3</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">3</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">3</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">linear_map.mk₂</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">3</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">),</span>\n    <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">a</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"n\">a</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n      <span class=\"n\">a</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"mi\">0</span> <span class=\"bp\">-</span> <span class=\"n\">a</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"mi\">2</span><span class=\"o\">,</span>\n      <span class=\"n\">a</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">a</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"mi\">0</span><span class=\"o\">]),</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">pi.add_apply</span><span class=\"o\">],</span>\n    <span class=\"n\">rw</span> <span class=\"n\">vec3_add</span><span class=\"o\">,</span>     <span class=\"c1\">-- this fails when [has_add α] is used</span>\n    <span class=\"n\">apply</span> <span class=\"n\">vec3_eq</span><span class=\"bp\">;</span>\n    <span class=\"n\">ring</span><span class=\"o\">,</span>\n   <span class=\"o\">},</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>The application of the lemma <code>vec3_add</code> requires associativity. The problem is that it depends on the instance for <code>α</code>. It isn't sufficient to provide a correct instance of <code>R</code>. If we replace <code>[add_semigroup α]</code> by <code>[has_add α]</code> then it fails in the place of application of  <code>vec3_add</code>. The proof of  <code>vec3_add</code> is all right either way.</p>\n<p>Any idea why it happens?</p>",
        "id": 267124647,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1641508525
    },
    {
        "content": "<p>It is also worth noting that the bug does not appear when we do the same proof in the following way (separate definition of cross product and lemma for linearity in the first argument).</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.algebra.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.matrix.notation</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.bilinear_map</span>\n\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">vec3_eq</span> <span class=\"o\">{</span><span class=\"n\">a₀</span> <span class=\"n\">a₁</span> <span class=\"n\">a₂</span> <span class=\"n\">b₀</span> <span class=\"n\">b₁</span> <span class=\"n\">b₂</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h₀</span> <span class=\"o\">:</span> <span class=\"n\">a₀</span> <span class=\"bp\">=</span> <span class=\"n\">b₀</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">a₁</span> <span class=\"bp\">=</span> <span class=\"n\">b₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">a₂</span> <span class=\"bp\">=</span> <span class=\"n\">b₂</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">a₀</span><span class=\"o\">,</span> <span class=\"n\">a₁</span><span class=\"o\">,</span> <span class=\"n\">a₂</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">b₀</span><span class=\"o\">,</span> <span class=\"n\">b₁</span><span class=\"o\">,</span> <span class=\"n\">b₂</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">has_add</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"c1\">--variable [add_semigroup α]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">vec3_add</span> <span class=\"o\">{</span><span class=\"n\">a₀</span> <span class=\"n\">a₁</span> <span class=\"n\">a₂</span> <span class=\"n\">b₀</span> <span class=\"n\">b₁</span> <span class=\"n\">b₂</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">a₀</span><span class=\"o\">,</span> <span class=\"n\">a₁</span><span class=\"o\">,</span> <span class=\"n\">a₂</span><span class=\"o\">]</span> <span class=\"bp\">+</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">b₀</span><span class=\"o\">,</span> <span class=\"n\">b₁</span><span class=\"o\">,</span> <span class=\"n\">b₂</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">a₀</span> <span class=\"bp\">+</span> <span class=\"n\">b₀</span><span class=\"o\">,</span> <span class=\"n\">a₁</span> <span class=\"bp\">+</span> <span class=\"n\">b₁</span><span class=\"o\">,</span> <span class=\"n\">a₂</span> <span class=\"bp\">+</span> <span class=\"n\">b₂</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">3</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">3</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">a</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"n\">a</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n      <span class=\"n\">a</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"mi\">0</span> <span class=\"bp\">-</span> <span class=\"n\">a</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"mi\">2</span><span class=\"o\">,</span>\n      <span class=\"n\">a</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">a</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"mi\">0</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a₁</span> <span class=\"n\">a₂</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">3</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">a₁</span> <span class=\"bp\">+</span> <span class=\"n\">a₂</span><span class=\"o\">)</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">foo</span> <span class=\"n\">a₁</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">foo</span> <span class=\"n\">a₂</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">foo</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">pi.add_apply</span><span class=\"o\">],</span>\n  <span class=\"n\">rw</span> <span class=\"n\">vec3_add</span><span class=\"o\">,</span>     <span class=\"c1\">-- this works either way</span>\n  <span class=\"n\">apply</span> <span class=\"n\">vec3_eq</span><span class=\"bp\">;</span>\n  <span class=\"n\">ring</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 267125289,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1641508921
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">has_add</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">add_semigroup</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>is wrong. It means \"assume alpha is an additive semigroup and assume on top of this that alpha has a completely unrelated addition on it which satisfies no axioms\". Once you do this then you have no control over what <code>a + b</code> means if <code>a b : alpha</code>; Lean will pick up a random one of the two additions and you don't know which one it is. </p>\n<p><code>add_semigroup</code> <em>extends</em> <code>has_add</code>, which means that you should not put a <code>has_add alpha</code> assumption in if you have an <code>add_semigroup alpha</code> in.</p>",
        "id": 267126247,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1641509513
    },
    {
        "content": "<p>We always use only one of them. The bug appears when we comment out one and uncomment the other.</p>",
        "id": 267126340,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1641509564
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">has_add</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"c1\">--variable [add_semigroup α]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">vec3_add</span> <span class=\"o\">{</span><span class=\"n\">a₀</span> <span class=\"n\">a₁</span> <span class=\"n\">a₂</span> <span class=\"n\">b₀</span> <span class=\"n\">b₁</span> <span class=\"n\">b₂</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">a₀</span><span class=\"o\">,</span> <span class=\"n\">a₁</span><span class=\"o\">,</span> <span class=\"n\">a₂</span><span class=\"o\">]</span> <span class=\"bp\">+</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">b₀</span><span class=\"o\">,</span> <span class=\"n\">b₁</span><span class=\"o\">,</span> <span class=\"n\">b₂</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">a₀</span> <span class=\"bp\">+</span> <span class=\"n\">b₀</span><span class=\"o\">,</span> <span class=\"n\">a₁</span> <span class=\"bp\">+</span> <span class=\"n\">b₁</span><span class=\"o\">,</span> <span class=\"n\">a₂</span> <span class=\"bp\">+</span> <span class=\"n\">b₂</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">ext</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">fin_cases</span> <span class=\"n\">x</span><span class=\"bp\">;</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>btw</p>",
        "id": 267126586,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1641509756
    },
    {
        "content": "<p>Why did you add a proof of the lemma? Proving the lemma was not an issue; using the lemma was.</p>",
        "id": 267126742,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1641509878
    },
    {
        "content": "<p>because I wondered whether that would change things. Sometimes sorrys can confuse Lean.</p>",
        "id": 267126964,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1641510006
    },
    {
        "content": "<p>This works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">cross_product</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">3</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">3</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">3</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">linear_map.mk₂</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">3</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">),</span>\n    <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">a</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"n\">a</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n      <span class=\"n\">a</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"mi\">0</span> <span class=\"bp\">-</span> <span class=\"n\">a</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"mi\">2</span><span class=\"o\">,</span>\n      <span class=\"n\">a</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">a</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"mi\">0</span><span class=\"o\">]),</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">pi.add_apply</span><span class=\"o\">],</span>\n    <span class=\"n\">symmetry</span><span class=\"o\">,</span>\n    <span class=\"n\">convert</span> <span class=\"bp\">@</span><span class=\"n\">vec3_add</span> <span class=\"n\">R</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"bp\">;</span>\n    <span class=\"n\">ring</span><span class=\"o\">,</span>\n   <span class=\"o\">},</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 267127095,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1641510071
    },
    {
        "content": "<p>In the full file, we have proofs. I omitted them for the sake of MWE.</p>",
        "id": 267127286,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1641510210
    },
    {
        "content": "<p>But it seems you eliminated the use of <code>vec3_eq</code> altogether, thanks!</p>",
        "id": 267127306,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1641510229
    },
    {
        "content": "<p>More minimal:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.matrix.notation</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">vec2_add</span> <span class=\"o\">[</span><span class=\"n\">has_add</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a₀</span> <span class=\"n\">a₁</span> <span class=\"n\">b₀</span> <span class=\"n\">b₁</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">a₀</span><span class=\"o\">,</span> <span class=\"n\">a₁</span><span class=\"o\">]</span> <span class=\"bp\">+</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">b₀</span><span class=\"o\">,</span> <span class=\"n\">b₁</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">a₀</span> <span class=\"bp\">+</span> <span class=\"n\">b₀</span><span class=\"o\">,</span> <span class=\"n\">a₁</span> <span class=\"bp\">+</span> <span class=\"n\">b₁</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">vec2_add'</span> <span class=\"o\">[</span><span class=\"n\">add_semigroup</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a₀</span> <span class=\"n\">a₁</span> <span class=\"n\">b₀</span> <span class=\"n\">b₁</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">a₀</span><span class=\"o\">,</span> <span class=\"n\">a₁</span><span class=\"o\">]</span> <span class=\"bp\">+</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">b₀</span><span class=\"o\">,</span> <span class=\"n\">b₁</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">a₀</span> <span class=\"bp\">+</span> <span class=\"n\">b₀</span><span class=\"o\">,</span> <span class=\"n\">a₁</span> <span class=\"bp\">+</span> <span class=\"n\">b₁</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">vec2_add</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">vec2_id</span> <span class=\"o\">[</span><span class=\"n\">add_monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→+</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">a</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"mi\">1</span><span class=\"o\">],</span>\n  <span class=\"n\">map_zero'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">pi.add_apply</span><span class=\"o\">],</span>\n    <span class=\"n\">rw</span> <span class=\"n\">vec2_add</span><span class=\"o\">,</span>    <span class=\"c1\">-- this fails</span>\n    <span class=\"c1\">-- rw vec2_add',     -- this works</span>\n  <span class=\"kd\">end</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 267127641,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1641510422
    },
    {
        "content": "<p>I will use Kevin's suggestion; nevertheless, I would still like to know why it failed as it was.</p>",
        "id": 267127819,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1641510531
    },
    {
        "content": "<p>Yes, I think it's worth understanding what's going wrong here</p>",
        "id": 267127904,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1641510588
    },
    {
        "content": "<p>I might be wrong but looking at the (absolutely huge!) terms generated by pp.all I'm wondering whether the issue is that ![a,b,c] generates a 3 which is a different kind of 3 to the 3 in <code>fin 3</code>.</p>",
        "id": 267128003,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1641510623
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rewrite</span> <span class=\"n\">tactic</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">did</span> <span class=\"n\">not</span> <span class=\"n\">find</span> <span class=\"kd\">instance</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">pattern</span> <span class=\"k\">in</span> <span class=\"n\">the</span> <span class=\"n\">target</span> <span class=\"n\">expression</span>\n  <span class=\"bp\">@</span><span class=\"n\">has_add.add.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">nat.succ</span> <span class=\"o\">(</span><span class=\"n\">nat.succ</span> <span class=\"o\">(</span><span class=\"n\">nat.succ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_zero.zero.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">nat</span> <span class=\"n\">nat.has_zero</span><span class=\"o\">))))</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n<span class=\"bp\">...</span>\n<span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_add.add.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">R</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_zero_class.to_has_add.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span>\n                   <span class=\"o\">((</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">ᾰ</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">bit1.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">nat</span> <span class=\"n\">nat.has_one</span> <span class=\"n\">nat.has_add</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_one.one.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">nat</span> <span class=\"n\">nat.has_one</span><span class=\"o\">))),</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n                      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_one.one.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">bit1.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">nat</span> <span class=\"n\">nat.has_one</span> <span class=\"n\">nat.has_add</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_one.one.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">nat</span> <span class=\"n\">nat.has_one</span><span class=\"o\">)))</span>\n</code></pre></div>\n<p>but I might be wrong, maybe <code>rw</code> would be expected to unify <code>fin (bit1 1)</code> and <code>fin (succ succ succ 0)</code>.</p>",
        "id": 267128216,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1641510757
    },
    {
        "content": "<p>That's not it</p>",
        "id": 267128398,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1641510867
    },
    {
        "content": "<p>It's a dependent type problem again</p>",
        "id": 267128406,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1641510873
    },
    {
        "content": "<p>In my example,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">pp.implicit</span> <span class=\"n\">true</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">pp.notation</span> <span class=\"n\">false</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">vec2_id</span> <span class=\"o\">[</span><span class=\"n\">add_monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"mi\">0</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→+</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"mi\">0</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">a</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"mi\">1</span><span class=\"o\">],</span>\n  <span class=\"n\">map_zero'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">pi.add_apply</span><span class=\"o\">],</span>\n    <span class=\"n\">rw</span> <span class=\"n\">vec2_add</span><span class=\"o\">,</span>    <span class=\"c1\">-- this fails</span>\n    <span class=\"c1\">-- rw vec2_add',     -- this works</span>\n  <span class=\"kd\">end</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>gives:</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rewrite</span> <span class=\"n\">tactic</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">did</span> <span class=\"n\">not</span> <span class=\"n\">find</span> <span class=\"kd\">instance</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">pattern</span> <span class=\"k\">in</span> <span class=\"n\">the</span> <span class=\"n\">target</span> <span class=\"n\">expression</span>\n  <span class=\"bp\">@</span><span class=\"n\">has_add.add</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"bp\">→</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">pi.has_add</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">ᾰ</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">),</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">),</span> <span class=\"bp\">?</span><span class=\"n\">m_2</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">matrix.vec_cons</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"mi\">1</span> <span class=\"bp\">?</span><span class=\"n\">m_3</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">matrix.vec_cons</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"mi\">0</span> <span class=\"bp\">?</span><span class=\"n\">m_4</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">matrix.vec_empty</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span><span class=\"o\">)))</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">matrix.vec_cons</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"mi\">1</span> <span class=\"bp\">?</span><span class=\"n\">m_5</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">matrix.vec_cons</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"mi\">0</span> <span class=\"bp\">?</span><span class=\"n\">m_6</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">matrix.vec_empty</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span><span class=\"o\">)))</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">add_monoid</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">@</span><span class=\"n\">eq</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">matrix.vec_cons</span> <span class=\"n\">α</span> <span class=\"mi\">1</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_add.add</span> <span class=\"n\">α</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_zero_class.to_has_add</span> <span class=\"o\">((</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">ᾰ</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">),</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n             <span class=\"o\">((</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">),</span> <span class=\"bp\">@</span><span class=\"n\">add_monoid.to_add_zero_class</span> <span class=\"n\">α</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span> <span class=\"mi\">0</span><span class=\"o\">))</span>\n          <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n          <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"mi\">0</span><span class=\"o\">))</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">matrix.vec_cons</span> <span class=\"n\">α</span> <span class=\"mi\">0</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_add.add</span> <span class=\"n\">α</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_zero_class.to_has_add</span> <span class=\"o\">((</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">ᾰ</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">),</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n                <span class=\"o\">((</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">),</span> <span class=\"bp\">@</span><span class=\"n\">add_monoid.to_add_zero_class</span> <span class=\"n\">α</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span> <span class=\"mi\">0</span><span class=\"o\">))</span>\n             <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n             <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">matrix.vec_empty</span> <span class=\"n\">α</span><span class=\"o\">)))</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_add.add</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_zero_class.to_has_add</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">pi.add_zero_class</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">ᾰ</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">),</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n             <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">),</span> <span class=\"bp\">@</span><span class=\"n\">add_monoid.to_add_zero_class</span> <span class=\"n\">α</span> <span class=\"n\">_inst_1</span><span class=\"o\">)))</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">matrix.vec_cons</span> <span class=\"n\">α</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">matrix.vec_cons</span> <span class=\"n\">α</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">matrix.vec_empty</span> <span class=\"n\">α</span><span class=\"o\">)))</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">matrix.vec_cons</span> <span class=\"n\">α</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">matrix.vec_cons</span> <span class=\"n\">α</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">matrix.vec_empty</span> <span class=\"n\">α</span><span class=\"o\">))))</span>\n</code></pre></div>\n</div></div>\n<p>It can't unify <code>pi.add_zero_class.to_has_add</code> with <code>pi.has_add</code></p>",
        "id": 267128455,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1641510915
    },
    {
        "content": "<p><code>rw vec2_add (_ : α)</code> works, if you make the arguments to <code>vec2_add</code> explicit (which they should be anyway)</p>",
        "id": 267128664,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1641511071
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/has_add.20versus.20add_semigroup/near/267126964\">said</a>:</p>\n<blockquote>\n<p>because I wondered whether that would change things. Sometimes sorrys can confuse Lean.</p>\n</blockquote>\n<p>Does <code>sorry</code> in a proof of a lemma have a capacity to change how the lemma works when it is applied??</p>",
        "id": 267129536,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1641511687
    },
    {
        "content": "<p>I don't think it can in a <code>lemma</code>, but it <em>can</em> in a <code>def</code> or <code>example</code>, because lean doesn't commit to the type of a def until it's seen the whole thing (which is why <code>def x := 1</code> is allowed even though it doesn't specify the type, but <code>lemma foo := rfl</code> is not)</p>",
        "id": 267129605,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1641511752
    },
    {
        "content": "<p>Since that <code>noncomputable</code> weirdness that Gabriel fixed with <code>force_noncomputable</code> I've been a lot more paranoid about filling in sorries when I see unexpected errors</p>",
        "id": 267130722,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1641512582
    },
    {
        "content": "<p>I can't think of too many, but here's a slightly niche example of where sorrying a lemma makes it behave differently:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">constant</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"n\">id</span>\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"c1\">--rfl</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">dsimp</span><span class=\"o\">,</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 267130878,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1641512699
    },
    {
        "content": "<p>When you prove something by <code>rfl</code> Lean tags it with an attribute which makes <code>dsimp</code> try to use it.</p>",
        "id": 267130907,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1641512733
    },
    {
        "content": "<p>But yeah most of the time sorrying lemmas for MWEs is fine if the proof is long</p>",
        "id": 267130921,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1641512757
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/has_add.20versus.20add_semigroup/near/267128664\">said</a>:</p>\n<blockquote>\n<p><code>rw vec2_add (_ : α)</code> works, if you make the arguments to <code>vec2_add</code> explicit (which they should be anyway)</p>\n</blockquote>\n<p>More details: normally a unification problem along the lines of <code>has_add.add α ?m_1 =?= add_semigroup.add α ?m_3</code> will trigger the instances <code>?m_1</code> and <code>?m_3</code> to be inferred, and then unfolding the definitions should result in equality. Here however, the goal looks like <code>has_add.add α ?m_1 =?= add_semigroup.add ?m_2 ?m_3</code>, so the right-hand side can't be inferred, and unification fails.</p>\n<p>This kind of issue also broke a few proofs in <a href=\"https://github.com/leanprover-community/mathlib/pull/11238\">#11238</a>, due to an inheritance path that used to result in unifying <code>linear_order.le α ?m_1 =?= linear_order.le ?m_2 ?m_3</code> (head is the same, so unify <code>α =?= ?m_2</code>, now <code>?m_3</code> is inferrable/unifiable, done) to be instead <code>linear_order.le α ?m_1 =?= ordered_ring.le ?m_2 ?m_3</code>.</p>",
        "id": 267171070,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1641549929
    },
    {
        "content": "<p>So why can't we just use the types of <code>has_add.add</code> and <code>add_semigroup.add</code> to determine <code>α =?= ?m_2</code>? Perhaps because the types might depend on other fields of the class and you get the same problem recursively?</p>",
        "id": 267171402,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1641550133
    },
    {
        "content": "<p>My guess is that it gets stuck on unifying the dependent types in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pi.has_add\">docs#pi.has_add</a>, and that if we had a separate <code>function.has_add</code> instance without the dependent types then the problem would go away. I can't test that theory because my internet doesn't seem fast enough to support gitpod right now</p>",
        "id": 267173966,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1641551661
    }
]