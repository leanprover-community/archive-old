[
    {
        "content": "<p>Hello, I have a short property I'd like to prove:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">tv</span>\n<span class=\"bp\">|</span> <span class=\"n\">vtrue</span>\n<span class=\"bp\">|</span> <span class=\"n\">vundef</span>\n<span class=\"bp\">|</span> <span class=\"n\">vfalse</span>\n<span class=\"kd\">def</span> <span class=\"n\">tv_nat</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">tv</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">tv.cases_on</span> <span class=\"n\">a</span> <span class=\"mi\">3</span> <span class=\"mi\">2</span> <span class=\"mi\">1</span>\n<span class=\"kd\">def</span> <span class=\"n\">tv_unnat</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">tv</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">tv_nat</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">tv_nat</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I know there are few tools for dealing with inductive types but I can't seem to find them. Could anyone point me in the right direction?</p>",
        "id": 279176289,
        "sender_full_name": "Fingy Soupy",
        "timestamp": 1650127632
    },
    {
        "content": "<p>Here's a quick tactic proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">tv</span>\n<span class=\"bp\">|</span> <span class=\"n\">vtrue</span>\n<span class=\"bp\">|</span> <span class=\"n\">vundef</span>\n<span class=\"bp\">|</span> <span class=\"n\">vfalse</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">tv_nat</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">tv</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">tv.cases_on</span> <span class=\"n\">a</span> <span class=\"mi\">3</span> <span class=\"mi\">2</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">tv_unnat</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">tv</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">tv_nat</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">tv_nat</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">a</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">b</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">tv_nat</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">contradiction</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>(For Prop-valued things, it's better to use <code>theorem</code> or <code>lemma</code>, which is why I changed it from <code>def</code>.)</p>",
        "id": 279176538,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1650128030
    },
    {
        "content": "<p>Thanks, I think it's going to take me a while to unpack all that but I appreciate it :)<br>\nIs there a functional different between def and theorem?</p>",
        "id": 279177320,
        "sender_full_name": "Fingy Soupy",
        "timestamp": 1650129018
    },
    {
        "content": "<p>Yeah, there's a functional difference. It's sort of like the difference between <code>let</code> and <code>have</code>: theorems are opaque, since you're just caring that there is a proof, not what the proof is. Unlike definitions, theorems don't generate equation lemmas, and since the proof can't be inspected, Lean is able to typecheck proofs of theorems in parallel. Definitions need to be processed completely sequentially.</p>",
        "id": 279177731,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1650129674
    },
    {
        "content": "<p>Example of opaqueness:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"mi\">37</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">theorem</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"mi\">37</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">37</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">37</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- error</span>\n</code></pre></div>\n<p>(Don't worry about the <code>noncomputable</code>. That's telling Lean \"yes, I know that theorems don't generate executable code, I know what I'm doing here.\" It's not the cause of the difference in behavior.)</p>",
        "id": 279177830,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1650129819
    },
    {
        "content": "<p>Ah, that is very informative. Thank you very much!</p>",
        "id": 279179483,
        "sender_full_name": "Fingy Soupy",
        "timestamp": 1650132397
    },
    {
        "content": "<p>What does the ';' after a tactic do?<br>\nI see that it is causing the other tactics to be applied to all of the goals rather than just the current goal but I can't find a reference to it in the documentation</p>",
        "id": 279190103,
        "sender_full_name": "Fingy Soupy",
        "timestamp": 1650149128
    },
    {
        "content": "<p><a href=\"https://leanprover.github.io/theorem_proving_in_lean/tactics.html#tactic-combinators\">https://leanprover.github.io/theorem_proving_in_lean/tactics.html#tactic-combinators</a></p>",
        "id": 279190359,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1650149549
    }
]