[
    {
        "content": "<p>I'd have thought <code>norm_cast</code> or <code>simp</code> could do this, but seemingly not -- is there a missing lemma in <code>norm_cast</code>'s instructions perhaps?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">norm_cast</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- ⊢ a + ↑(int.neg_of_nat 1) = a - 1</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 245110441,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1625613598
    },
    {
        "content": "<p>This is the dreaded <code>sub_eq_add_neg</code>, right? The <code>.symm</code> of your goal was a <code>simp</code> lemma in core for years and it drove everyone nuts -- I think it was one of the first things changed when we forked!</p>",
        "id": 245110540,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1625613662
    },
    {
        "content": "<p>Oh!  So I have to provide <code>sub_eq_add_neg</code> explicitly or invoke <code>abel</code>?</p>",
        "id": 245110584,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1625613720
    },
    {
        "content": "<p>Strange I haven't hit this before!</p>",
        "id": 245110642,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1625613754
    },
    {
        "content": "<p>Should we add <code>add_neg_eq_sub</code> as a simp lemma instead? The main objection I can think of is that this would be asymmetric with the multiplicative version: presumably we don't want to simp <code>x * y⁻¹</code> to <code>x / y</code>.</p>",
        "id": 245150423,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1625648749
    },
    {
        "content": "<p>I am still amazed about how I look at the multiplicative and the additive questions, both formally isomorphic, and yet immediately come to \"obvious\" distinct conclusions. Maybe it's something to do with addition often being commutative in practice and multiplication often being not commutative</p>",
        "id": 245152640,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1625650083
    },
    {
        "content": "<p>I completely agree with Kevin's point!  If <code>x / y</code> was written as <code>x * (1 / y)</code>, I could bring myself to viewing this as an \"only slightly worst version of <code>x * y⁻¹</code>\"!</p>",
        "id": 245153605,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1625650607
    },
    {
        "content": "<p>I was suddenly reminded of \"Mathematics is the art of giving different names to the same thing\" (or was it \"giving the same name to different things\"? eh, both are the same) <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 245155144,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1625651404
    },
    {
        "content": "<p>Mostly for my own clarification, but the issue with making only one of the additive/multiplicative <code>simp</code> is that then <code>to_additive</code> might fail to produce an additive proof out of a correct multiplicative one?</p>\n<p>E.g. <code>simp</code> could solve one version, but not the other, right?</p>",
        "id": 245155261,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1625651460
    },
    {
        "content": "<p>Having a difference in <code>simp</code> lemmas should not confuse <code>to_additive</code>. It traverses the fully elaborated multiplicative term, where simp lemmas are irrelevant.</p>",
        "id": 245155633,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1625651649
    },
    {
        "content": "<p>I think that will actually not be a problem. Because <code>to_additive</code> operates at a lower level. It doesn't replay <code>simp</code>, but it translates the proof terms.</p>",
        "id": 245155637,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1625651652
    },
    {
        "content": "<p>That said, I'm not sure whether I like this asymmetry.</p>",
        "id": 245155644,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1625651660
    },
    {
        "content": "<p>Floris, Johan, thank you for the explanation: it makes more sense now!</p>",
        "id": 245155838,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1625651764
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"111080\">Floris van Doorn</span> <a href=\"#narrow/stream/113488-general/topic/Something.20missing.20from.20.60norm_cast.60.3F/near/245155644\">said</a>:</p>\n<blockquote>\n<p>That said, I'm not sure whether I like this asymmetry.</p>\n</blockquote>\n<p>The only justification would be \"<code>sub</code> becomes more important when things are commutative\" and I don't know whether this is even true or whether it's just some incorrect thing I've picked up.</p>",
        "id": 245156211,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1625651968
    }
]