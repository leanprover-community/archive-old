[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">class</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">.</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">zero_eq_zero_of_foo</span> <span class=\"o\">[</span><span class=\"n\">foo</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">zero_eq_zero_of_foo</span>\n</code></pre></div>",
        "id": 204996128,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1595668325
    },
    {
        "content": "<p>error:</p>\n<div class=\"codehilite\"><pre><span></span><code>invalid rewrite tactic, failed to synthesize type class instance\nstate:\n⊢ 0 = 0\n</code></pre></div>",
        "id": 204996136,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1595668351
    },
    {
        "content": "<p>is it possible to know which type class instance it failed to synthesize?</p>",
        "id": 204996140,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1595668364
    },
    {
        "content": "<p>I think it failed to synthesize <code>foo</code></p>",
        "id": 205010769,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595694653
    },
    {
        "content": "<p>more to the point, you can just provide the explicit args to the rewrite, and that should be enough to get typeclass inference to trigger</p>",
        "id": 205010840,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595694752
    },
    {
        "content": "<p>I think you can also write something like <code>rw @zero_eq_zero_of_foo _</code> so that the typeclass inference is done beforehand instead of in the rewrite</p>",
        "id": 205010860,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595694797
    },
    {
        "content": "<p>This is the error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"kd\">class</span> <span class=\"kd\">instance</span> <span class=\"n\">for</span>\n<span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">,</span>\n<span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span><span class=\"o\">,</span>\n<span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">,</span>\n<span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">convergence_space</span> <span class=\"n\">β</span><span class=\"o\">,</span>\n<span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"n\">l</span> <span class=\"n\">l'</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"n\">hl</span> <span class=\"o\">:</span> <span class=\"n\">l.ne_bot</span><span class=\"o\">,</span>\n<span class=\"n\">h₀</span> <span class=\"o\">:</span> <span class=\"n\">l</span> <span class=\"bp\">≤</span> <span class=\"n\">l'</span><span class=\"o\">,</span>\n<span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">conv</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"n\">l'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n<span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"n\">l</span> <span class=\"bp\">≤</span> <span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"n\">l'</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">l.ne_bot</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">,</span>\n<span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span><span class=\"o\">,</span>\n<span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">,</span>\n<span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">convergence_space</span> <span class=\"n\">β</span><span class=\"o\">,</span>\n<span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"n\">l</span> <span class=\"n\">l'</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"n\">hl</span> <span class=\"o\">:</span> <span class=\"n\">l.ne_bot</span><span class=\"o\">,</span>\n<span class=\"n\">h₀</span> <span class=\"o\">:</span> <span class=\"n\">l</span> <span class=\"bp\">≤</span> <span class=\"n\">l'</span><span class=\"o\">,</span>\n<span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">conv</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"n\">l'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n<span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"n\">l</span> <span class=\"bp\">≤</span> <span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"n\">l'</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">conv</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I don't understand this. It seems that it needs an <code>l.ne_bot</code>, but there is one already, namely <code>hl</code>. I am at a loss about what to do here.</p>",
        "id": 263762438,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1638701786
    },
    {
        "content": "<p>An <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> would help</p>",
        "id": 263762459,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1638701836
    },
    {
        "content": "<p>I tried making a mwe, but they all work.</p>",
        "id": 263762505,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1638701891
    },
    {
        "content": "<p>Does lemma assume <code>(hl : l.ne_bot)</code> or <code>[hl : l.ne_bot]</code>? In the former case, you need <code>resetI</code>.</p>",
        "id": 263762526,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1638701950
    },
    {
        "content": "<p>It uses <code>[hl : l.ne_bot]</code>.</p>",
        "id": 263762529,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1638701970
    },
    {
        "content": "<p>Here's the lemma:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">le_conv</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"n\">l'</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ne_bot</span> <span class=\"n\">l</span><span class=\"o\">],</span> <span class=\"n\">l</span> <span class=\"bp\">≤</span> <span class=\"n\">l'</span> <span class=\"bp\">→</span> <span class=\"n\">conv</span> <span class=\"n\">l'</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">conv</span> <span class=\"n\">l</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 263762617,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1638702016
    },
    {
        "content": "<p>You need <code>resetI</code> or <code>introI</code></p>",
        "id": 263762646,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1638702061
    },
    {
        "content": "<p>Why do you need <code>ne_bot</code> here?</p>",
        "id": 263762660,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1638702082
    },
    {
        "content": "<p>In this silly example: the [ne_bot l] works without me doing anything special:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ne_bot</span> <span class=\"n\">l</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">l</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ne_bot</span> <span class=\"n\">l</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">l'</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"n\">l</span><span class=\"o\">),</span>\n  <span class=\"n\">exact</span> <span class=\"n\">l'</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 263762662,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1638702087
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/113488-general/topic/failed.20to.20synthesize.20type.20class.20instance/near/263762660\">said</a>:</p>\n<blockquote>\n<p>Why do you need <code>ne_bot</code> here?</p>\n</blockquote>\n<p>That's part of the lemma.</p>",
        "id": 263762672,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1638702120
    },
    {
        "content": "<p>What is the statement of the lemma you're trying to prove?</p>",
        "id": 263762720,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1638702175
    },
    {
        "content": "<p>IMHO <code>conv</code> shouldn't assume <code>ne_bot</code>, and the trivial filter should converge to any point.</p>",
        "id": 263762732,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1638702204
    },
    {
        "content": "<p>(note that the same sequence can converge to two different points in a non-Hausdorff topological space)</p>",
        "id": 263762746,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1638702241
    },
    {
        "content": "<p>Ah, I just noticed something. In the silly example, if I replace <code>intros</code> with <code>intros l lh f</code>, then it stops working. I'm also doing this in the real proof.</p>",
        "id": 263762790,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1638702280
    },
    {
        "content": "<p>Why do you need <code>intros</code> in the example?</p>",
        "id": 263762805,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1638702326
    },
    {
        "content": "<p>Is there a special rule regarding intros of variables for instance arguments.</p>",
        "id": 263762807,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1638702330
    },
    {
        "content": "<p>The <code>intros</code> is there to simulate what I'm doing in the real proof.</p>",
        "id": 263762822,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1638702358
    },
    {
        "content": "<p>Is it actually</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ne_bot</span> <span class=\"n\">l</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>or</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ne_bot</span> <span class=\"n\">l</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"n\">filter</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 263762864,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1638702380
    },
    {
        "content": "<p>It's the first one.</p>",
        "id": 263762874,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1638702406
    },
    {
        "content": "<p>This <code>intros</code> is a no-op.</p>",
        "id": 263762882,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1638702418
    },
    {
        "content": "<p>Ah, OK.</p>",
        "id": 263762894,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1638702436
    },
    {
        "content": "<p>Let me use a forall then.</p>",
        "id": 263762905,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1638702457
    },
    {
        "content": "<p>Use <code>introI</code> or <code>intros l hl, resetI</code> to introduce instance vars.</p>",
        "id": 263762957,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1638702491
    },
    {
        "content": "<p>Aha. It produces the same error.</p>",
        "id": 263762963,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1638702499
    },
    {
        "content": "<p>And these lemmas should not need <code>[ne_bot l]</code>.</p>",
        "id": 263762985,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1638702543
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/113488-general/topic/failed.20to.20synthesize.20type.20class.20instance/near/263762957\">said</a>:</p>\n<blockquote>\n<p>Use <code>introI</code> or <code>intros l hl, resetI</code> to introduce instance vars.</p>\n</blockquote>\n<p>It works. Cool. Where is this documented? Is it in  \"Theorem Provinig in Lean\"?</p>",
        "id": 263763055,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1638702646
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#resetI\">tactic#resetI</a></p>",
        "id": 263763060,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1638702658
    },
    {
        "content": "<p>Ah, so it's a mathlib specific tactic? It's not part of core Lean? Interesting.</p>",
        "id": 263763085,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1638702717
    },
    {
        "content": "<p>I need the <code>[ne_bot l]</code> since I need to rule out the bottom filter.</p>",
        "id": 263763129,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1638702778
    },
    {
        "content": "<p>Why do you need to rule out the bottom filter?</p>",
        "id": 263763139,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1638702807
    },
    {
        "content": "<p>If <code>conv l x</code> corresponds to <code>l ≤ nhds x</code>, then you should have <code>∀ x, conv ⊥ x</code>.</p>",
        "id": 263763193,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1638702902
    },
    {
        "content": "<p>I'm working in the more general setting of convergence spaces, so there are no neighborhoods. But yeah, I want to rule out <code>∀ x, conv ⊥ x</code> because that will always be the case according to the convergence space axioms without the [ne_bot l] constraint.</p>",
        "id": 263763264,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1638703023
    },
    {
        "content": "<p>Why do you want to rule out this?</p>",
        "id": 263763334,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1638703116
    },
    {
        "content": "<p>A topological space should define a convergence space, and in a topological space this is true.</p>",
        "id": 263763342,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1638703135
    },
    {
        "content": "<p>Is it? I may be misunderstanding something. If the space is Hausdorff, then every filter has at most one limit. This won't work if the bottom filter converges to everything. Unless... Hausdorff means that every ne_bot filter has at most one limit.</p>",
        "id": 263763453,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1638703294
    },
    {
        "content": "<p>If the space is Hausdorff, then every <strong>nontrivial</strong> filter has at most one limit.</p>",
        "id": 263763463,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1638703317
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/tendsto_nhds_unique\">docs#tendsto_nhds_unique</a></p>",
        "id": 263763526,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1638703399
    },
    {
        "content": "<p>OK. That's the part that was missing in my mind. It's a bit confusing since Lean allows the bottom filter to be a filter, but in the literature this is ruled out.</p>",
        "id": 263763527,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1638703401
    },
    {
        "content": "<p>It is very convenient to have a <a href=\"https://leanprover-community.github.io/mathlib_docs/find/complete_lattice\">docs#complete_lattice</a> structure on filters.</p>",
        "id": 263763536,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1638703438
    },
    {
        "content": "<p>But you have to adjust statements/proofs from textbooks.</p>",
        "id": 263763603,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1638703478
    },
    {
        "content": "<p>Yeah. I'm having some problem adjusting things as you can tell.</p>",
        "id": 263763609,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1638703504
    },
    {
        "content": "<p>Thanks for your help. Much appreciated.</p>",
        "id": 263763617,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1638703523
    },
    {
        "content": "<p>I think using the class <code>ne_bot</code> is not helping here. You can also just write <code>(hl : l ≠ ⊥)</code> and it should make life simpler and easier.</p>",
        "id": 263772365,
        "sender_full_name": "Reid Barton",
        "timestamp": 1638716502
    }
]