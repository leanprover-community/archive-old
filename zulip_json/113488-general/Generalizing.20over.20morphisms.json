[
    {
        "content": "<p>To do the cleanups in <a href=\"https://github.com/leanprover-community/mathlib/issues/4616\">#4616</a>, it would be nice to generalize across the various <code>ι</code>s and <code>lifts</code>. To do that, I need to be able to generalize across the type of <code>ι</code>, which is <code>X → _</code> in <code>free_algebra</code>, <code>X →ₗ[R] _</code> in <code>tensor_algebra</code>, <code>{f : X →ₗ[R] _ // ∀ x, f x * f x}</code> in <code>exterior_algebra</code>, etc.</p>\n<p>Naively, I tried to do this <a href=\"https://github.com/leanprover-community/mathlib/blob/b56fe52b0583fb13558efffb8266edaef8857e95/src/algebra/universal_property.lean#L5-L17\">here</a> by adding a <code>(hom_α : Type u₃ → Type*)</code> argument to my struct. I can't seem to use <code>has_coe_to_fun</code> instances in my argument list, and end up needing some obviously questionable instances like <code>has_coe (α → β) (α → β)</code> instead.</p>\n<p>Is there a better way to generalize over \"any object that has a coercion to a given function type\"?</p>",
        "id": 213317745,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602693545
    },
    {
        "content": "<p>I don't know whether you want to actually go this route, but the \"correct\" generalization (from the category theoretic point of view) is to construct adjunctions between suitable categories.</p>",
        "id": 213318158,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1602693742
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.adjunction\">docs#category_theory.adjunction</a></p>",
        "id": 213318267,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1602693775
    },
    {
        "content": "<p>I guess you could make a bundle which essentially encodes the same data as an adjunction, without mentioning category theory.</p>",
        "id": 213318774,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1602693977
    },
    {
        "content": "<p>One disadvantage over using adjunctions from category theory is that you will have to put restrictions on the universe levels of the objects involved. I don't know if there is a way around it...</p>",
        "id": 213319041,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1602694108
    },
    {
        "content": "<p>Yeah, being forced to constrain universe levels was one of the things I ran into. I don't know how to start with your suggestion though - I don't know what <code>C</code> and <code>D</code> should be for one.</p>",
        "id": 213319145,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602694162
    },
    {
        "content": "<p>For the free algebra, you would take the forgetful functor from the category of <code>R</code>-algebras to the category of types.</p>",
        "id": 213319259,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1602694210
    },
    {
        "content": "<p>The <code>free_algebra</code> construction is the left adjoint, and the forgetful functor is the right adjoint.</p>",
        "id": 213319288,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1602694224
    },
    {
        "content": "<p>I have to lecture in 10 minutes, but I will try to sketch an example after that.</p>",
        "id": 213319329,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1602694248
    },
    {
        "content": "<p>I think I'm done for the day anyway</p>",
        "id": 213319351,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602694258
    },
    {
        "content": "<p>But will take a look tomorrow, thanks!</p>",
        "id": 213319380,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602694268
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> See below. I can PR this if people are interested.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.free_algebra</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.category.Algebra.basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kd\">@[simps]</span>\n<span class=\"kd\">def</span> <span class=\"n\">Free</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span> <span class=\"bp\">⥤</span> <span class=\"n\">Algebra</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">S</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">carrier</span> <span class=\"o\">:=</span> <span class=\"n\">free_algebra</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">,</span>\n    <span class=\"n\">is_ring</span> <span class=\"o\">:=</span> <span class=\"n\">algebra.semiring_to_ring</span> <span class=\"n\">R</span> <span class=\"o\">},</span>\n  <span class=\"n\">map</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">S</span> <span class=\"n\">T</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">free_algebra.lift</span> <span class=\"n\">_</span> <span class=\"bp\">$</span> <span class=\"o\">(</span><span class=\"n\">free_algebra.ι</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">adj</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Free</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">⊣</span> <span class=\"n\">forget</span> <span class=\"o\">(</span><span class=\"n\">Algebra</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">hom_equiv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">X</span> <span class=\"n\">A</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"bp\">∘</span> <span class=\"o\">(</span><span class=\"n\">free_algebra.ι</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n    <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">free_algebra.lift</span> <span class=\"n\">_</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n    <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">tidy</span><span class=\"o\">,</span>\n    <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">tidy</span> <span class=\"o\">},</span>\n  <span class=\"n\">unit</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">app</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">free_algebra.ι</span> <span class=\"n\">_</span> <span class=\"o\">},</span>\n  <span class=\"n\">counit</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">app</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">free_algebra.lift</span> <span class=\"n\">_</span> <span class=\"bp\">$</span> <span class=\"n\">id</span><span class=\"o\">,</span>\n    <span class=\"n\">naturality'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">intros</span><span class=\"o\">,</span> <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">}</span> <span class=\"o\">}</span> <span class=\"o\">}</span> <span class=\"c1\">-- tidy times out :(</span>\n</code></pre></div>",
        "id": 213331984,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1602699781
    },
    {
        "content": "<p>Note that the category of <code>R</code>-algebras in mathlib assumes <code>R</code> to be a commutative ring.</p>",
        "id": 213332058,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1602699828
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/4620\">#4620</a></p>",
        "id": 213333781,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1602700787
    },
    {
        "content": "<p>Thanks for doing that - I think the piece I'm missing is how to actually apply that <code>adj</code> definition, and whether the extra lemmas about lift and iota can be expressed in terms of it</p>",
        "id": 213336730,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602702169
    },
    {
        "content": "<p>I think the gist is all in this file:<br>\n<a href=\"https://github.com/leanprover-community/mathlib/blob/de46349366376fe12530dc56a99244a7ca405cae/src/category_theory/adjunction/basic.lean\">https://github.com/leanprover-community/mathlib/blob/de46349366376fe12530dc56a99244a7ca405cae/src/category_theory/adjunction/basic.lean</a></p>",
        "id": 213336872,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1602702243
    },
    {
        "content": "<p>So for example, if you want to lift a function from <code>S \\to A</code>where <code>A</code> is an <code>R</code>-algebra, you could use <code>adj.hom_equiv.symm</code>or something like that. I'm not too familiar with the adjunction API, so someone else might be more helpful. <span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span> ?</p>",
        "id": 213337270,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1602702471
    }
]