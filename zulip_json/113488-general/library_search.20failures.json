[
    {
        "content": "<p>Hi,<br>\nI'd like to know why <code>library_search</code> fails in the example below:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.ereal</span>\n<span class=\"kn\">import</span> <span class=\"n\">order.complete_lattice</span>\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ereal</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ereal</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ereal</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">Sup</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"c1\">--library_search, -- fails</span>\n  <span class=\"n\">exact</span> <span class=\"n\">le_Sup</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"c1\">-- works like a charm</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>This is related to a small PR that <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> is reviewing about adding a bit of api to ereal's. (<a href=\"https://github.com/leanprover-community/mathlib/issues/9313\">#9313</a>)</p>",
        "id": 254171243,
        "sender_full_name": "Marc Masdeu",
        "timestamp": 1632212399
    },
    {
        "content": "<p>Yeah, this surprises me too. It fails even without the coercions:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ereal</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ereal</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">Sup</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">library_search</span>\n</code></pre></div>\n<p>yet this works</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">complete_linear_order</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">Sup</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">library_search</span>\n</code></pre></div>",
        "id": 254174044,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1632214076
    },
    {
        "content": "<p>Adding<br>\n<code>haveI : complete_linear_order ereal := ereal.complete_linear_order,</code><br>\ndoesn't help either. How would one debug this?</p>",
        "id": 254176220,
        "sender_full_name": "Marc Masdeu",
        "timestamp": 1632215386
    },
    {
        "content": "<p>First, check <code>library_seach!</code>. (No luck.)</p>",
        "id": 254183477,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1632219233
    },
    {
        "content": "<p>Second, try <code>set_option trace.suggest true</code> to see which lemmas it is trying.</p>",
        "id": 254183537,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1632219249
    },
    {
        "content": "<p>Sure enough, <code>le_Sup</code> is on the list, but it is not successfully using it.</p>",
        "id": 254183554,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1632219270
    },
    {
        "content": "<p>Look further down the huge trace output, to see what it says when it tries <code>le_Sup</code>, only to be disappointed that it just says:<br>\n<code>Trying to apply lemma: le_Sup.{?_mlocal._fresh.23.109287}</code>.</p>",
        "id": 254184239,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1632219661
    },
    {
        "content": "<p>Simulate by hand the step that <code>library_search</code> should hopefully be trying with this lemma:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"k\">do</span> <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">tactic.to_expr</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">le_Sup</span><span class=\"o\">),</span> <span class=\"n\">tactic.suggest.apply_and_solve</span> <span class=\"n\">tt</span> <span class=\"o\">{}</span> <span class=\"n\">e</span><span class=\"o\">),</span>\n</code></pre></div>\n<p>getting the error message:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"n\">apply</span> <span class=\"n\">tactic</span><span class=\"o\">,</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">unify</span>\n  <span class=\"bp\">↑</span><span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">Sup</span> <span class=\"n\">α</span>\n<span class=\"k\">with</span>\n  <span class=\"bp\">?</span><span class=\"n\">m_2</span> <span class=\"bp\">∈</span> <span class=\"bp\">?</span><span class=\"n\">m_3</span> <span class=\"bp\">→</span> <span class=\"bp\">?</span><span class=\"n\">m_2</span> <span class=\"bp\">≤</span> <span class=\"n\">Sup</span> <span class=\"bp\">?</span><span class=\"n\">m_3</span>\n</code></pre></div>",
        "id": 254184520,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1632219832
    },
    {
        "content": "<p>(Wonder if a closer approximation to <code>library_search</code>s inner workings is:<br>\n<code>(do e ← tactic.to_expr ``(@le_Sup), tactic.suggest.apply_and_solve tt {} e),</code>...)</p>",
        "id": 254184632,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1632219899
    },
    {
        "content": "<p>Wonder why that doesn't unify, so turn on <code>set_option pp.all true</code>, and get the more detailed:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"n\">apply</span> <span class=\"n\">tactic</span><span class=\"o\">,</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">unify</span>\n  <span class=\"bp\">@</span><span class=\"n\">has_le.le.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">ereal</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">preorder.to_has_le.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">ereal</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">directed_order.to_preorder.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">ereal</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">linear_order.to_directed_order.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">ereal</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">conditionally_complete_linear_order.to_linear_order.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">ereal</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">conditionally_complete_linear_order_of_complete_linear_order.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">ereal</span>\n                   <span class=\"n\">ereal.complete_linear_order</span><span class=\"o\">)))))</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">coe.</span><span class=\"o\">{</span><span class=\"mi\">1</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">real</span> <span class=\"n\">ereal</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">coe_to_lift.</span><span class=\"o\">{</span><span class=\"mi\">1</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">real</span> <span class=\"n\">ereal</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">coe_base.</span><span class=\"o\">{</span><span class=\"mi\">1</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">real</span> <span class=\"n\">ereal</span> <span class=\"n\">ereal.has_coe</span><span class=\"o\">))</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_Sup.Sup.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">ereal</span> <span class=\"n\">ereal.has_Sup</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"k\">with</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span><span class=\"o\">},</span>\n    <span class=\"bp\">@</span><span class=\"n\">has_mem.mem.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">l_2</span> <span class=\"bp\">?</span><span class=\"n\">l_2</span><span class=\"o\">}</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"o\">(</span><span class=\"n\">set.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">l_2</span><span class=\"o\">}</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">set.has_mem.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">l_2</span><span class=\"o\">}</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"bp\">?</span><span class=\"n\">m_3</span> <span class=\"bp\">→</span>\n    <span class=\"bp\">@</span><span class=\"n\">has_le.le.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">l_2</span><span class=\"o\">}</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span>\n      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">preorder.to_has_le.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">l_2</span><span class=\"o\">}</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span>\n         <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">partial_order.to_preorder.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">l_2</span><span class=\"o\">}</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">complete_semilattice_Sup.to_partial_order.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">l_2</span><span class=\"o\">}</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">?</span><span class=\"n\">m_4</span><span class=\"o\">)))</span>\n      <span class=\"n\">a</span>\n      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_Sup.Sup.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">l_2</span><span class=\"o\">}</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">complete_semilattice_Sup.to_has_Sup.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">l_2</span><span class=\"o\">}</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">?</span><span class=\"n\">m_4</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">m_3</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 254184771,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1632219973
    },
    {
        "content": "<p>Not be immediately sure whether to expect that unification to work or not, but realise that first of all we should check what<br>\n<code>apply le_Sup</code> does in this problem.</p>",
        "id": 254184908,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1632220079
    },
    {
        "content": "<p>Discover that this fails! (Even though <code>exact le_Sup h</code> succeeds.)</p>",
        "id": 254184968,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1632220097
    },
    {
        "content": "<p>At this point we've learnt that this has nothing to do with <code>library_search</code> itself.</p>",
        "id": 254184984,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1632220112
    },
    {
        "content": "<p>(Or rather, we're asking too much of it if we expect it to work when <code>apply</code> fails.)</p>",
        "id": 254185000,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1632220127
    },
    {
        "content": "<p>But I'm not immediately sure of the diagnosis from this point. To summarise, the real mystery is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.ereal</span>\n<span class=\"kn\">import</span> <span class=\"n\">order.complete_lattice</span>\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ereal</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ereal</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ereal</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">Sup</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">le_Sup</span><span class=\"o\">,</span>   <span class=\"c1\">-- fails</span>\n  <span class=\"n\">exact</span> <span class=\"n\">le_Sup</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"c1\">-- works like a charm</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 254185201,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1632220232
    },
    {
        "content": "<p>I remember someone had this on the discord with one of the extended number lines (I think it was <code>nnreal</code> and <code>le_Refl</code>. Something is definitely off about this all</p>",
        "id": 254185249,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1632220269
    },
    {
        "content": "<p>I personally had lots of pain with  <a href=\"https://leanprover-community.github.io/mathlib_docs/find/bsupr_le\">docs#bsupr_le</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/le_binfi\">docs#le_binfi</a>. You will be desolated to know they don't behave the same, because unification doesn't start with the same arguments (it goes from left to right and the <code>supr</code> is to the left of <code>≤</code> while <code>infi</code> is to its right).</p>",
        "id": 254185906,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1632220687
    },
    {
        "content": "<p>The problem is that Lean has a very hard time knowing which function should <code>f i hi</code> match.</p>",
        "id": 254185947,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1632220722
    },
    {
        "content": "<p>Wow <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> , this is a great analysis (even if unsuccessful so far...). I'm more used to seeing apply work when exact doesn't, this is really weird. (But note that <code>apply le_Sup h</code> does indeed work!)</p>",
        "id": 254188047,
        "sender_full_name": "Marc Masdeu",
        "timestamp": 1632221991
    },
    {
        "content": "<p>This is the classic \"apply bug\". It occurs because <code>a ≤ b</code> is a Pi-type for <code>ereal</code> (<a href=\"https://leanprover-community.github.io/mathlib_docs/find/with_top.preorder/src\">src#with_top.preorder</a>) but not in general, and then <code>apply</code> gets confused about how many <code>_</code>s to insert.</p>",
        "id": 254188601,
        "sender_full_name": "Reid Barton",
        "timestamp": 1632222262
    },
    {
        "content": "<p>Would it be reasonable to mark the order as irreducible on <code>with_top</code>?</p>",
        "id": 254190559,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1632223306
    },
    {
        "content": "<p>I would guess that you don't want to mark the instance itself irreducible, and instead want</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[irreducible]</span>\n<span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">with_top.le</span> <span class=\"o\">(</span><span class=\"n\">o₁</span> <span class=\"n\">o₂</span> <span class=\"o\">:</span> <span class=\"n\">with_top</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">o₂</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">o₁</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span>\n</code></pre></div>\n<p>and then use <code>with_top.le</code> to define the order instance.</p>",
        "id": 254190832,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1632223442
    },
    {
        "content": "<p>By that argument presumably we need to do the same thing to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pi.preorder\">docs#pi.preorder</a>?</p>",
        "id": 254190918,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1632223478
    },
    {
        "content": "<p>And <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.preorder\">docs#set.preorder</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.preorder\">docs#finset.preorder</a>, ...</p>",
        "id": 254191025,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1632223539
    },
    {
        "content": "<p>Suggesting that maybe it's better to just stop <code>apply</code> getting confused in the first place</p>",
        "id": 254191041,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1632223548
    },
    {
        "content": "<p>It's not just <code>apply</code>: I really think that marking more things as irreducible can only help Lean, and that we should probably be doing this much more often. And yes, I meant doing it like you say, with an irreducible definition for <code>with_top.le</code>.</p>",
        "id": 254191236,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1632223662
    },
    {
        "content": "<p>It can also be turned into a structure as with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/continuous\">docs#continuous</a> (as <span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> will no doubt recall...)</p>",
        "id": 254192614,
        "sender_full_name": "Reid Barton",
        "timestamp": 1632224414
    },
    {
        "content": "<p>Maybe it would be good to have a generic \"identity\" structure for Props for cases where the overhead of making a new one seems excessive</p>",
        "id": 254192790,
        "sender_full_name": "Reid Barton",
        "timestamp": 1632224526
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113488-general/topic/library_search.20failures/near/254192790\">said</a>:</p>\n<blockquote>\n<p>Maybe it would be good to have a generic \"identity\" structure for Props for cases where the overhead of making a new one seems excessive</p>\n</blockquote>\n<p>I suspect we'll want to tailor the name of the projection in each case; <code>set.le</code> will probably want the field to be called <code>of_mem</code>, <code>pi.le</code> perhaps wants <code>.eval</code> or similar, ...</p>",
        "id": 254194225,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1632225402
    },
    {
        "content": "<p>I guess I'm thinking more about examples like <code>with_top.preorder</code> where the specific definition is irrelevant (once you set up the basic lemmas), so it doesn't really matter if it is just called <code>.out</code> or whatever</p>",
        "id": 254195467,
        "sender_full_name": "Reid Barton",
        "timestamp": 1632225950
    },
    {
        "content": "<p>I mean, the ordering on <code>with_top</code> could just as well have been defined by cases. There's no reason that anyone would guess that it is a Pi type.</p>",
        "id": 254195642,
        "sender_full_name": "Reid Barton",
        "timestamp": 1632226032
    },
    {
        "content": "<p><code>set.le</code> and <code>pi.le</code> should probably remain semireducible. At least for <code>set.le</code>, this is used all over the place.</p>",
        "id": 254195695,
        "sender_full_name": "Reid Barton",
        "timestamp": 1632226059
    },
    {
        "content": "<p>well I guess <code>set.subset</code> is the one whose definition is used all over the place, <code>set.le</code> isn't so common</p>",
        "id": 254196069,
        "sender_full_name": "Reid Barton",
        "timestamp": 1632226204
    },
    {
        "content": "<p>If we don't change the reducibility of <code>pi.le</code> then we presumably still have the library_search failure on pi types</p>",
        "id": 254196263,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1632226303
    },
    {
        "content": "<p>I don't think I understand what the discussion was about at the end, but is anyone working on this? What kind of work would it entail? Could I contribute?</p>",
        "id": 254347063,
        "sender_full_name": "Marc Masdeu",
        "timestamp": 1632307228
    },
    {
        "content": "<p>Reusing this thread to complain about my own problem with <code>library_search</code>, mwe below. The thing causing <code>library_search</code> to fail here is apparently the fact that a higher-level file is being imported. It's not clear to me why library_search should time out anyway, since it's only used while coding, and shouldn't be pushed. It seems to me that this kind of problem will only get worse as more is added to mathlib, making timeouts more common and <code>library_search</code> harder to use.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.totient</span> <span class=\"c1\">-- library_search succeeds without this import</span>\n<span class=\"c1\">-- import data.finset.locally_finite -- the file with the lemma</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">finset</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">split_Ico</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_order</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">locally_finite_order</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">a_le_b</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b_le_c</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">Ico</span> <span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">Ico</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">∪</span> <span class=\"n\">Ico</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">library_search</span><span class=\"o\">,</span> <span class=\"c1\">-- (deterministic) timeout</span>\n  <span class=\"c1\">-- rw finset.Ico_union_Ico_eq_Ico a_le_b b_le_c,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 263219279,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1638311910
    },
    {
        "content": "<p>This doesn't time out for me -- I might have some timeout figure set higher than you?</p>",
        "id": 263219564,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1638312089
    },
    {
        "content": "<p>I haven't done anything in particular to customize my timeout parameters.</p>",
        "id": 263219698,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1638312163
    },
    {
        "content": "<p>yeah but I might have...</p>",
        "id": 263219705,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1638312174
    },
    {
        "content": "<p>I would propose the solution of simply finding whatever parameter is causing the timeout here and raising it, but I suspect it would raise the timeout parameter for all of mathlib, which I wouldn't want.</p>",
        "id": 263219864,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1638312271
    },
    {
        "content": "<p>It's just some VS Code setting.</p>",
        "id": 263219881,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1638312283
    },
    {
        "content": "<p>I ran the script to make <code>all.lean</code> and then if I import that, I get the excessive memory consumption error.</p>",
        "id": 263219925,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1638312315
    },
    {
        "content": "<p>Still, I don't want to change my VSCode settings, since then I might push some code and be surprised when CI tells me there's a timeout error.</p>",
        "id": 263220018,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1638312384
    },
    {
        "content": "<p>In VS Code settings I have <code>Lean: Time Limit</code> set to 300000 on this machine</p>",
        "id": 263220083,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1638312433
    },
    {
        "content": "<p>Let me try that</p>",
        "id": 263220102,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1638312451
    },
    {
        "content": "<p>Yes, it works for me with the limit set to 300000. I guess I would suggest based on my experience that the default be changed, I think this is the second time where a higher timeout limit would have been helpful.</p>",
        "id": 263220800,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1638312862
    },
    {
        "content": "<p>Perhaps it wouldn't be too big of an issue to let CI operate have one value and the default VSCode parameter have another.</p>",
        "id": 263220894,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1638312922
    },
    {
        "content": "<p>In fact, we changed the CI to match VSCode so that people wouldn't get confused as to why their code was failing in CI and not in VS Code (or vice versa).</p>",
        "id": 263221167,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1638313130
    },
    {
        "content": "<p>Ah, well, maybe it's not currently worth the hassle.</p>",
        "id": 263221591,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1638313368
    },
    {
        "content": "<p>Could not the mathlib repository itself override that setting though?</p>",
        "id": 263221746,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1638313458
    },
    {
        "content": "<p>What was the limit on the CI before it was changed?</p>",
        "id": 263223073,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1638314297
    },
    {
        "content": "<p>I can't remember anymore, but it looks like we didn't have a limit at all: <a href=\"https://github.com/leanprover-community/mathlib/issues/2276\">#2276</a></p>",
        "id": 263223722,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1638314815
    },
    {
        "content": "<p>library_search is much faster in Lean 4, so I don't think this is worth worrying about.</p>",
        "id": 263250655,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1638341335
    },
    {
        "content": "<blockquote>\n<p>library_search is much faster in Lean 4, so I don't think this is worth worrying about.</p>\n</blockquote>\n<p>I think it should definitely possible to make it much faster than in Lean 3 (we have term indices and caches that persist between tactic invocations), but there's still some performance issues to iron out.  Last time I tried it on the synported mathlib, it even timed out when indexing the lemmas. :-/</p>",
        "id": 263306382,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1638372071
    },
    {
        "content": "<p>Why is library_search failing here?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.rat.basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">q.num</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">library_search</span> <span class=\"c1\">-- fails</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">q.num</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">exact</span> <span class=\"n\">rat.num_ne_zero_of_ne_zero</span> <span class=\"n\">hq</span><span class=\"o\">,</span> <span class=\"c1\">-- goals accomplished</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 275046702,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1647040143
    },
    {
        "content": "<p>I don't know, but somehow this works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">q.num</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">library_search</span> <span class=\"c1\">-- succeeds</span>\n</code></pre></div>",
        "id": 275047296,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1647040467
    },
    {
        "content": "<p>I think I know how to solve this. <span class=\"user-mention\" data-user-id=\"282271\">@Bolton Bailey</span> do you have other similar cases of failure? I can take a look when I get home.</p>",
        "id": 275047510,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647040576
    },
    {
        "content": "<p>I literally just found it, did a double take, and posted it</p>",
        "id": 275047572,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1647040622
    },
    {
        "content": "<p>Done: <a href=\"https://github.com/leanprover-community/mathlib/pull/12616\">#12616</a><br>\nThis PR  only changes two lines of code in the <code>src/tactic/suggest.lean</code> file. Other 7 lines are for tests.</p>",
        "id": 275070954,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1647051116
    }
]