[
    {
        "content": "<p>hey all, i've been messing with <code>inductive</code> to test my understanding of the typing rules wrt universe levels.<br>\ni've found 2 cases that i'm unsure about:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- 1: incomplete recursive arguments.</span>\n\n<span class=\"c1\">-- this doesn't and shouldn't work. `r: nat -&gt; Sort 1`, which has type Sort 2, which is too large.</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">T1</span><span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Sort</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"n\">c</span> <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"o\">:</span> <span class=\"n\">T1</span><span class=\"o\">):</span> <span class=\"n\">T1</span> <span class=\"mi\">0</span>\n\n<span class=\"c1\">-- but this should work, right? `r: nat -&gt; Prop`, which has type Prop = Sort 0 and 0 &lt;= 0.</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">T0</span><span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Sort</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">c</span> <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"o\">:</span> <span class=\"n\">T0</span><span class=\"o\">):</span> <span class=\"n\">T0</span> <span class=\"mi\">0</span>\n<span class=\"c1\">--           ^^</span>\n<span class=\"c1\">-- it gives me an error here:</span>\n<span class=\"c1\">--type expected at</span>\n<span class=\"c1\">--  T0</span>\n<span class=\"c1\">--term has type</span>\n<span class=\"c1\">--  ℕ → Prop</span>\n<span class=\"c1\">-- that error doesn't really make sense: `\\N -&gt; Prop` is a type?</span>\n<span class=\"c1\">-- if anything, i'd have expected `r: T0` to error.</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- 2: definition of Vec doesn't work for generic universe level.</span>\n\n<span class=\"c1\">-- this errors: arg 3 to cons (ts) is too large, which it isn't.</span>\n<span class=\"c1\">-- this same definition works when using Type instead of Sort.</span>\n<span class=\"kd\">inductive</span> <span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">Vec</span> <span class=\"o\">(</span><span class=\"n\">T</span><span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">):</span> <span class=\"n\">nat</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span><span class=\"o\">:</span> <span class=\"n\">Vec</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">:</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ts</span><span class=\"o\">:</span> <span class=\"n\">Vec</span> <span class=\"n\">n</span><span class=\"o\">):</span> <span class=\"n\">Vec</span> <span class=\"n\">n.succ</span>\n\n<span class=\"c1\">-- but the definition for any concrete universe level is valid...</span>\n<span class=\"c1\">-- works.</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">Vec0</span> <span class=\"o\">(</span><span class=\"n\">T</span><span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"mi\">0</span><span class=\"o\">):</span> <span class=\"n\">nat</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Sort</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span><span class=\"o\">:</span> <span class=\"n\">Vec0</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">:</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ts</span><span class=\"o\">:</span> <span class=\"n\">Vec0</span> <span class=\"n\">n</span><span class=\"o\">):</span> <span class=\"n\">Vec0</span> <span class=\"n\">n.succ</span>\n\n<span class=\"c1\">-- works.</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">Vec1</span> <span class=\"o\">(</span><span class=\"n\">T</span><span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"mi\">1</span><span class=\"o\">):</span> <span class=\"n\">nat</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Sort</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span><span class=\"o\">:</span> <span class=\"n\">Vec1</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">:</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ts</span><span class=\"o\">:</span> <span class=\"n\">Vec1</span> <span class=\"n\">n</span><span class=\"o\">):</span> <span class=\"n\">Vec1</span> <span class=\"n\">n.succ</span>\n\n<span class=\"c1\">-- works.</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">Vec42</span> <span class=\"o\">(</span><span class=\"n\">T</span><span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"mi\">42</span><span class=\"o\">):</span> <span class=\"n\">nat</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Sort</span> <span class=\"mi\">42</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span><span class=\"o\">:</span> <span class=\"n\">Vec42</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">:</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ts</span><span class=\"o\">:</span> <span class=\"n\">Vec42</span> <span class=\"n\">n</span><span class=\"o\">):</span> <span class=\"n\">Vec42</span> <span class=\"n\">n.succ</span>\n</code></pre></div>",
        "id": 272695438,
        "sender_full_name": "Leonard Wiechmann",
        "timestamp": 1645453837
    },
    {
        "content": "<p>i think both examples should work.<br>\nwhich is bugged: my understanding or lean?</p>",
        "id": 272695694,
        "sender_full_name": "Leonard Wiechmann",
        "timestamp": 1645453953
    },
    {
        "content": "<p>In 1, both <code>r : T1</code> and <code>r : T0</code> don't make any sense. I guess Lean's error reporting got confused.</p>",
        "id": 272695738,
        "sender_full_name": "Reid Barton",
        "timestamp": 1645453977
    },
    {
        "content": "<p>In 2, it is not a bug, but maybe a limitation? You can't create an inductive which is a Prop for some values of the universe parameters, and a Type for others--I think it has something to do with what recursor to generate.</p>",
        "id": 272695889,
        "sender_full_name": "Reid Barton",
        "timestamp": 1645454055
    },
    {
        "content": "<p>yeah, example 1 doesn't make sense semantically.<br>\nbut shouldn't <code>r: T0</code> for <code>T0: nat -&gt; Prop</code> work? -- just according to the universe levels. so make sense \"syntactically\"?</p>",
        "id": 272695944,
        "sender_full_name": "Leonard Wiechmann",
        "timestamp": 1645454093
    },
    {
        "content": "<p>no</p>",
        "id": 272696010,
        "sender_full_name": "Reid Barton",
        "timestamp": 1645454143
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113488-general/topic/breaking.20inductive/near/272695889\">said</a>:</p>\n<blockquote>\n<p>In 2, it is not a bug, but maybe a limitation? You can't create an inductive which is a Prop for some values of the universe parameters, and a Type for others--I think it has something to do with what recursor to generate.</p>\n</blockquote>\n<p>ok, that makes sense. it can't generate both recursors.</p>",
        "id": 272696095,
        "sender_full_name": "Leonard Wiechmann",
        "timestamp": 1645454171
    },
    {
        "content": "<p>in <code>r : T0</code>, <code>T0</code> had better be a type, but whoops it is a function <code>T0 : nat -&gt; Prop</code> instead</p>",
        "id": 272696126,
        "sender_full_name": "Reid Barton",
        "timestamp": 1645454193
    },
    {
        "content": "<p>Has nothing to do with universes.</p>",
        "id": 272696157,
        "sender_full_name": "Reid Barton",
        "timestamp": 1645454217
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113488-general/topic/breaking.20inductive/near/272695889\">said</a>:</p>\n<blockquote>\n<p>In 2, it is not a bug, but maybe a limitation? You can't create an inductive which is a Prop for some values of the universe parameters, and a Type for others--I think it has something to do with what recursor to generate.</p>\n</blockquote>\n<p>Actually you can, it's just not advisable</p>",
        "id": 272696229,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645454262
    },
    {
        "content": "<p>oh, I think I see where I got confused.<br>\ni thought <code>T0 = nat -&gt; Prop</code> and just substituted.</p>",
        "id": 272696239,
        "sender_full_name": "Leonard Wiechmann",
        "timestamp": 1645454268
    },
    {
        "content": "<p>Lean 4 disallows this in the elaborator now but you can still create them if you ask the kernel directly</p>",
        "id": 272696308,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645454289
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/breaking.20inductive/near/272696308\">said</a>:</p>\n<blockquote>\n<p>Lean 4 disallows this in the elaborator now but you can still create them if you ask the kernel directly</p>\n</blockquote>\n<p>does it generate the recursor for <code>Type</code>, or both?</p>",
        "id": 272696374,
        "sender_full_name": "Leonard Wiechmann",
        "timestamp": 1645454330
    },
    {
        "content": "<p>It generates the recursor for Prop</p>",
        "id": 272696392,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645454341
    },
    {
        "content": "<p>well, that makes sense :D</p>",
        "id": 272696411,
        "sender_full_name": "Leonard Wiechmann",
        "timestamp": 1645454351
    },
    {
        "content": "<p>that is, it is a small eliminating type</p>",
        "id": 272696412,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645454352
    },
    {
        "content": "<p>it's a recursor for all variations of the type, but the motive targets <code>Prop</code></p>",
        "id": 272696450,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645454379
    },
    {
        "content": "<p>right, because it isn't LE <em>for all</em> universe levels</p>",
        "id": 272696586,
        "sender_full_name": "Leonard Wiechmann",
        "timestamp": 1645454438
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">foo</span>\n<span class=\"bp\">|</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">foo</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">pp.universes</span> <span class=\"n\">true</span>\n<span class=\"k\">#print</span> <span class=\"n\">foo.rec</span>\n<span class=\"c1\">-- protected eliminator {u} foo.rec : ∀ {motive : foo.{u} → Prop}, motive foo.a.{u} → motive foo.b.{u} → ∀ (n : foo.{u}), motive n</span>\n</code></pre></div>",
        "id": 272696595,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645454445
    },
    {
        "content": "<p>you need 2 constructors to not be subsingleton, right?</p>",
        "id": 272696673,
        "sender_full_name": "Leonard Wiechmann",
        "timestamp": 1645454486
    },
    {
        "content": "<p>right</p>",
        "id": 272696686,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645454490
    },
    {
        "content": "<p>or other things</p>",
        "id": 272696696,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645454497
    },
    {
        "content": "<p>ok, I think i've cleared up my confusion, thanks guys!</p>",
        "id": 272696780,
        "sender_full_name": "Leonard Wiechmann",
        "timestamp": 1645454527
    },
    {
        "content": "<p>the fun part I like to show with this example is that <code>foo.a.{1}</code> and <code>foo.b.{1}</code> are neither provably equal nor provably distinct</p>",
        "id": 272696859,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645454567
    },
    {
        "content": "<p>ah right, I was misremembering how the example I wanted to work fails</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">M</span>\n</code></pre></div>",
        "id": 272697008,
        "sender_full_name": "Reid Barton",
        "timestamp": 1645454642
    },
    {
        "content": "<p>This seems like it should be large-eliminating but Lean still makes an eliminator into Prop only</p>",
        "id": 272697054,
        "sender_full_name": "Reid Barton",
        "timestamp": 1645454661
    },
    {
        "content": "<p>The real reason your <code>Vec</code> example doesn't work is because lean doesn't know that <code>imax 1 u &lt;= u</code></p>",
        "id": 272697356,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645454808
    },
    {
        "content": "<p>here's a way you can check level inequalities:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">pempty.</span><span class=\"o\">{</span><span class=\"n\">imax</span> <span class=\"mi\">1</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">foo</span>\n</code></pre></div>\n<p>this succeeds iff you put an expression <code>v</code> for the <code>pempty</code> such that <code>v &lt;= u</code> is true</p>",
        "id": 272697450,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645454868
    },
    {
        "content": "<p>The system given in my paper will validate <code>imax 1 u &lt;= u</code>, because it does case disjunction when it can't make progress on the inequality. Lean doesn't, it uses a known-incomplete set of rewrite rules to normalize universe expressions, so you can get some spuriously rejected examples like this</p>",
        "id": 272697672,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645454978
    },
    {
        "content": "<p>here is something else i'm unsure about:<br>\nwhy are only the universe levels of the constructor \"arguments\" validated and not also the \"parameters\"?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"mi\">42</span><span class=\"o\">):</span> <span class=\"kt\">Sort</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"n\">ctor</span><span class=\"o\">:</span> <span class=\"n\">foo</span>\n<span class=\"c1\">-- foo.ctor : Π {X : Type 41}, foo X</span>\n</code></pre></div>\n<p>the full <code>foo.ctor</code> also takes <code>X</code>, but <code>universe(X) &gt; 1</code>.<br>\ni probably don't understand this, because i don't really understand where the <code>&lt;=</code> constraint for arguments comes from in the first place.<br>\nis there a somewhat simple answer that's not \"because things work out that way, and everything else would be limiting or inconsistent\"? maybe some paper that discusses the rationale?</p>",
        "id": 272701181,
        "sender_full_name": "Leonard Wiechmann",
        "timestamp": 1645456653
    },
    {
        "content": "<p>Well, it would be inconsistent to have a small type containing an injective copy of a large type</p>",
        "id": 272716301,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645464434
    },
    {
        "content": "<p>like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">ctor</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"kt\">Type</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">foo</span>\n</code></pre></div>\n<p>Intuitively, this is cantor's paradox, although it doesn't immediately follow. The correct paradox to cite is <a href=\"https://cs.brown.edu/courses/cs1951x/docs/logic/girard.html\">Girard's paradox</a></p>",
        "id": 272716592,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645464603
    },
    {
        "content": "<p>For parameters this isn't really what's happening. It's more like we have a construction of an inductive type which depends on some fixed parameters, i.e. a family of inductive constructions. These play the role of constants so you can't use them to pull any funny business</p>",
        "id": 272716714,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645464692
    },
    {
        "content": "<p>In particular, <code>foo</code> is not injective with respect to its parameters. It took a discovered inconsistency in Agda to realize that this had to be the case, but it's pretty obvious if you look at your <code>foo</code> that it has to be noninjective</p>",
        "id": 272716841,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645464756
    },
    {
        "content": "<p>You can't prove it in lean but it is consistent for <code>foo X = unit</code> for all values of X</p>",
        "id": 272716911,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645464795
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/breaking.20inductive/near/272716301\">said</a>:</p>\n<blockquote>\n<p>Well, it would be inconsistent to have a small type containing an injective copy of a large type</p>\n</blockquote>\n<p>ok, this seems to make sense:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Trojan</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">intro</span> <span class=\"o\">(</span><span class=\"n\">soldier</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Trojan</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">extract</span><span class=\"o\">:</span> <span class=\"n\">Trojan</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">Trojan.rec</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">soldier</span><span class=\"o\">,</span> <span class=\"n\">soldier</span><span class=\"o\">)</span> <span class=\"n\">t</span>\n\n<span class=\"c1\">-- this is *effectively* `Type -&gt; nat`, but it's type is Type, which is paradoxical.</span>\n<span class=\"kd\">def</span> <span class=\"n\">troy</span><span class=\"o\">:</span> <span class=\"n\">Trojan</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">nat</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">soldier</span><span class=\"o\">,</span> <span class=\"bp\">...</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">extract</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 272800938,
        "sender_full_name": "Leonard Wiechmann",
        "timestamp": 1645536022
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/breaking.20inductive/near/272716714\">said</a>:</p>\n<blockquote>\n<p>For parameters this isn't really what's happening. It's more like we have a construction of an inductive type which depends on some fixed parameters, i.e. a family of inductive constructions. These play the role of constants so you can't use them to pull any funny business</p>\n</blockquote>\n<p>this seems to intuitively make sense, because the \"callsite\" also needs to know about the parameters (and thus their Sorts). so you can't do funny extraction business.</p>",
        "id": 272801017,
        "sender_full_name": "Leonard Wiechmann",
        "timestamp": 1645536072
    },
    {
        "content": "<p>the last 2, I don't really understand:<br>\n1: what does <code>foo</code> is not injective wrt its parameters mean? is there a link to said agda inconsistency?<br>\n2: what does <code>foo X = unit</code> mean? guessing this refers to my foo from above. <code>inductive foo (X: Sort 42) : unit</code> doesn't make sense, because unit is not a sort.</p>",
        "id": 272801469,
        "sender_full_name": "Leonard Wiechmann",
        "timestamp": 1645536292
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"456923\">Leonard Wiechmann</span> <a href=\"#narrow/stream/113488-general/topic/breaking.20inductive/near/272801469\">said</a>:</p>\n<blockquote>\n<p>what does <code>foo</code> is not injective wrt its parameters mean? is there a link to said agda inconsistency?</p>\n</blockquote>\n<p>Agda inconsistency: <a href=\"https://coq-club.inria.narkive.com/iDuSeltD/agda-with-the-excluded-middle-is-inconsistent\">https://coq-club.inria.narkive.com/iDuSeltD/agda-with-the-excluded-middle-is-inconsistent</a><br>\nInjectivity here is saying that <code>foo X = foo Y -&gt; X = Y</code>, i.e. <code>foo</code> is injective as a function on types</p>",
        "id": 272803353,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645537198
    },
    {
        "content": "<p>This is not possible because there are too many possible values of <code>X : Sort 42</code> compared to the number of values of <code>foo X : Type</code>, i.e. it's essentially a cardinality constraint</p>",
        "id": 272803477,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645537249
    },
    {
        "content": "<p>When I say <code>foo X = unit</code>, I mean that you could add the axiom <code>axiom foo_is_unit (X) : foo X = unit</code> and the resulting system would still be consistent. (You can already prove that <code>foo X ≃ unit</code> using the way it has been defined, but type equalities are almost never provable in lean. This non-injectivity example is a rare case where you can actually prove an equality of types</p>",
        "id": 272803721,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645537367
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/breaking.20inductive/near/272803721\">said</a>:</p>\n<blockquote>\n<p>When I say <code>foo X = unit</code>, I mean that you could add the axiom <code>axiom foo_is_unit (X) : foo X = unit</code> and the resulting system would still be consistent. (You can already prove that <code>foo X ≃ unit</code> using the way it has been defined, but type equalities are almost never provable in lean. This non-injectivity example is a rare case where you can actually prove an equality of types</p>\n</blockquote>\n<p>oh, I see. because foo is basically unit, except with a parameter.</p>",
        "id": 273078328,
        "sender_full_name": "Leonard Wiechmann",
        "timestamp": 1645703115
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/breaking.20inductive/near/272803353\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"456923\">Leonard Wiechmann</span> <a href=\"#narrow/stream/113488-general/topic/breaking.20inductive/near/272801469\">said</a>:</p>\n<blockquote>\n<p>what does <code>foo</code> is not injective wrt its parameters mean? is there a link to said agda inconsistency?</p>\n</blockquote>\n<p>Agda inconsistency: <a href=\"https://coq-club.inria.narkive.com/iDuSeltD/agda-with-the-excluded-middle-is-inconsistent\">https://coq-club.inria.narkive.com/iDuSeltD/agda-with-the-excluded-middle-is-inconsistent</a><br>\nInjectivity here is saying that <code>foo X = foo Y -&gt; X = Y</code>, i.e. <code>foo</code> is injective as a function on types</p>\n</blockquote>\n<p>ok, awesome, thanks! i'll check it out once i've got some time.</p>",
        "id": 273078352,
        "sender_full_name": "Leonard Wiechmann",
        "timestamp": 1645703140
    }
]