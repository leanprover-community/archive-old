[
    {
        "content": "<p>For my understanding, why does <code>nlinarith</code>not work on the following lemma? Is it just a matter of complexity? I had the impression it was able to solve similar looking goals with similar hypotheses that I tried before? Is there any other tactic that I should have tried? I was able to do it by hand, by preprocessing to the step where hrs and huv had already been used.  </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.int.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic.linarith</span>\n\n  <span class=\"kd\">lemma</span> <span class=\"n\">helper</span> <span class=\"o\">(</span><span class=\"n\">r1</span> <span class=\"n\">r2</span> <span class=\"n\">s1</span> <span class=\"n\">s2</span> <span class=\"n\">u1</span> <span class=\"n\">u2</span> <span class=\"n\">v1</span> <span class=\"n\">v2</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hrs</span> <span class=\"o\">:</span> <span class=\"n\">r1</span> <span class=\"bp\">*</span> <span class=\"n\">s2</span> <span class=\"bp\">=</span> <span class=\"n\">s1</span> <span class=\"bp\">*</span> <span class=\"n\">r2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">huv</span> <span class=\"o\">:</span> <span class=\"n\">u1</span> <span class=\"bp\">*</span> <span class=\"n\">v2</span> <span class=\"bp\">=</span> <span class=\"n\">v1</span> <span class=\"bp\">*</span> <span class=\"n\">u2</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">r1</span> <span class=\"bp\">*</span> <span class=\"n\">u2</span> <span class=\"bp\">+</span> <span class=\"n\">r2</span> <span class=\"bp\">*</span> <span class=\"n\">u1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">s2</span> <span class=\"bp\">*</span> <span class=\"n\">v2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">s1</span> <span class=\"bp\">*</span> <span class=\"n\">v2</span> <span class=\"bp\">+</span> <span class=\"n\">s2</span> <span class=\"bp\">*</span> <span class=\"n\">v1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">r2</span> <span class=\"bp\">*</span> <span class=\"n\">u2</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"gr\">sorry</span>\n  <span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 286333356,
        "sender_full_name": "Julian Külshammer",
        "timestamp": 1655375751
    },
    {
        "content": "<p>this isn't linear arithmetic at all. <code>nlinarith</code> only does some basic preprocessing before going to the linear arithmetic solver</p>",
        "id": 286338429,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1655378674
    },
    {
        "content": "<p>you should be using <code>ring</code> or <code>linear_combination</code> to solve this</p>",
        "id": 286338439,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1655378684
    },
    {
        "content": "<p>keep in mind that nonlinear arithmetic is undecidable so you are bound to be disappointed by things that are nominally in its domain</p>",
        "id": 286338522,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1655378726
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">helper</span> <span class=\"o\">(</span><span class=\"n\">r1</span> <span class=\"n\">r2</span> <span class=\"n\">s1</span> <span class=\"n\">s2</span> <span class=\"n\">u1</span> <span class=\"n\">u2</span> <span class=\"n\">v1</span> <span class=\"n\">v2</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hrs</span> <span class=\"o\">:</span> <span class=\"n\">r1</span> <span class=\"bp\">*</span> <span class=\"n\">s2</span> <span class=\"bp\">=</span> <span class=\"n\">s1</span> <span class=\"bp\">*</span> <span class=\"n\">r2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">huv</span> <span class=\"o\">:</span> <span class=\"n\">u1</span> <span class=\"bp\">*</span> <span class=\"n\">v2</span> <span class=\"bp\">=</span> <span class=\"n\">v1</span> <span class=\"bp\">*</span> <span class=\"n\">u2</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">r1</span> <span class=\"bp\">*</span> <span class=\"n\">u2</span> <span class=\"bp\">+</span> <span class=\"n\">r2</span> <span class=\"bp\">*</span> <span class=\"n\">u1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">s2</span> <span class=\"bp\">*</span> <span class=\"n\">v2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">s1</span> <span class=\"bp\">*</span> <span class=\"n\">v2</span> <span class=\"bp\">+</span> <span class=\"n\">s2</span> <span class=\"bp\">*</span> <span class=\"n\">v1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">r2</span> <span class=\"bp\">*</span> <span class=\"n\">u2</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">linear_combination</span> <span class=\"n\">u2</span><span class=\"bp\">*</span><span class=\"n\">v2</span><span class=\"bp\">*</span><span class=\"n\">hrs</span> <span class=\"bp\">+</span> <span class=\"n\">s2</span><span class=\"bp\">*</span><span class=\"n\">r2</span><span class=\"bp\">*</span><span class=\"n\">huv</span>\n</code></pre></div>",
        "id": 286339240,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1655379145
    },
    {
        "content": "<p>Thanks a lot for the explanation and the right way to do it.</p>",
        "id": 286369234,
        "sender_full_name": "Julian Külshammer",
        "timestamp": 1655393123
    }
]