[
    {
        "content": "<p>Hello!</p>\n<p>I am the teaching assistant of Alex Simpson for a course on Logic with computers, and we want to introduce our students to lean. We only intend to cover the very basics, and we want the students to make basic exercises about lists in lean. I tried looking up the existing tutorials, but they are all covering much more ground that we will be able to do (we only have two weeks, in which the students will make one set of exercises). And I tried doing it from scratch in lean, but then it complains that the inductive data type of lists is already defined.</p>\n<p>Does anyone have any suggestions, or tried teaching something similar?</p>\n<p>With kind regards,<br>\nEgbert</p>",
        "id": 197375684,
        "sender_full_name": "Egbert Rijke",
        "timestamp": 1589354111
    },
    {
        "content": "<p>I made a complete new copy of the natural numbers by working in a namespace <code>mynat</code>. You could work in a namespace <code>hidden</code> and then redefine lists there. A good exercise for students is of course proving that the reverse of the reverse of a list is the same list. When I was learning about lists in Lean I translated the <a href=\"https://softwarefoundations.cis.upenn.edu/lf-current/Lists.html#lab79\">software foundations</a> exercises about lists from Coq into Lean. using this technique.</p>",
        "id": 197376019,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589354355
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">hidden</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">:</span> <span class=\"n\">list</span>\n<span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">(</span><span class=\"n\">hd</span> <span class=\"o\">:</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">tl</span> <span class=\"o\">:</span> <span class=\"n\">list</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">list</span>\n\n<span class=\"c1\">-- lemmas go here</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">hidden</span>\n</code></pre></div>\n\n\n<p>If you want to make things a bit less technical you could even define <code>list nat</code> instead.</p>",
        "id": 197376134,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589354433
    },
    {
        "content": "<p>The suggestion about a hidden namespace is nice, thank you! </p>\n<p>That is exactly the sort of exercises we are thinking of :)</p>",
        "id": 197376135,
        "sender_full_name": "Egbert Rijke",
        "timestamp": 1589354436
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253568\">@Egbert Rijke</span> If you want to throw away the stuff defined in core, then you can use <code>prelude</code>.</p>",
        "id": 197376289,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589354555
    },
    {
        "content": "<p>But it means you won't have anything.</p>",
        "id": 197376310,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589354572
    },
    {
        "content": "<p>prelude will be a bit too radical, for then we won't be able to use equality either</p>",
        "id": 197376325,
        "sender_full_name": "Egbert Rijke",
        "timestamp": 1589354588
    },
    {
        "content": "<p>You can import stuff after <code>prelude</code>, I think</p>",
        "id": 197376351,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589354605
    },
    {
        "content": "<p>Another question: why does lean say that I'm using sorry in the definition of concat_list</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">hidden</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">:</span> <span class=\"n\">list</span>\n<span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"bp\">→</span> <span class=\"n\">list</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">mylist</span>\n\n<span class=\"kn\">definition</span> <span class=\"n\">concat_list</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">y</span><span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"n\">x_a</span> <span class=\"n\">x_ih</span><span class=\"o\">)},</span>\n<span class=\"kn\">end</span>\n\n<span class=\"n\">reduce</span> <span class=\"n\">concat_mylist</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"mi\">3</span> <span class=\"n\">nil</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"mi\">4</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"mi\">5</span> <span class=\"n\">nil</span><span class=\"o\">))</span>\n\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 197376380,
        "sender_full_name": "Egbert Rijke",
        "timestamp": 1589354641
    },
    {
        "content": "<p>This doesn't compile for me</p>",
        "id": 197376478,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589354693
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253568\">@Egbert Rijke</span> What does <code>open mylist</code> do there. You don't have a <code>mylist</code> namespace, right?</p>",
        "id": 197376512,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589354737
    },
    {
        "content": "<p>Ah that brings me to another question, how can I know myself if it compiles? (I feel embarrassed to ask, but I really don't know)</p>",
        "id": 197376579,
        "sender_full_name": "Egbert Rijke",
        "timestamp": 1589354767
    },
    {
        "content": "<p>I think you want <code>namespace list</code> and not <code>open list</code>; that way you will be using the correct <code>list.cons</code>. It might be better to use <code>mylist</code>; this might be worth experimenting with if you're going to get name clashes, but I think you should be able to get away with it in your own namespace.</p>",
        "id": 197376586,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589354773
    },
    {
        "content": "<p>Ah it was meant to be <code>open list</code></p>",
        "id": 197376601,
        "sender_full_name": "Egbert Rijke",
        "timestamp": 1589354792
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253568\">Egbert Rijke</span> <a href=\"#narrow/stream/113488-general/topic/a.20short.20tutorial.20on.20data-structures.20in.20lean/near/197376579\">said</a>:</p>\n<blockquote>\n<p>Ah that brings me to another question, how can I know myself if it compiles? (I feel embarrassed to ask, but I really don't know)</p>\n</blockquote>\n<p>What kind of setup do you have?</p>",
        "id": 197376621,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589354817
    },
    {
        "content": "<p>otherwise I have to keep typing <code>list.cons</code> right?</p>",
        "id": 197376622,
        "sender_full_name": "Egbert Rijke",
        "timestamp": 1589354817
    },
    {
        "content": "<p>Using emacs mode</p>",
        "id": 197376635,
        "sender_full_name": "Egbert Rijke",
        "timestamp": 1589354828
    },
    {
        "content": "<p>The \"sorry\" error is because <code>reduce</code> isn't a Lean command -- it's <code>#reduce</code>, which confused Lean about where the end of your proof was.</p>",
        "id": 197376646,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589354846
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">hidden</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">:</span> <span class=\"n\">list</span>\n<span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"bp\">→</span> <span class=\"n\">list</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">list</span>\n\n<span class=\"kn\">definition</span> <span class=\"n\">concat_list</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">y</span><span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"n\">x_a</span> <span class=\"n\">x_ih</span><span class=\"o\">)},</span>\n<span class=\"kn\">end</span>\n\n<span class=\"bp\">#</span><span class=\"n\">reduce</span> <span class=\"n\">concat_list</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"mi\">3</span> <span class=\"n\">nil</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"mi\">4</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"mi\">5</span> <span class=\"n\">nil</span><span class=\"o\">))</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">list</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">hidden</span>\n</code></pre></div>",
        "id": 197376655,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589354857
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253568\">Egbert Rijke</span> <a href=\"#narrow/stream/113488-general/topic/a.20short.20tutorial.20on.20data-structures.20in.20lean/near/197376635\">said</a>:</p>\n<blockquote>\n<p>Using emacs mode</p>\n</blockquote>\n<p>I hope that it will tell you about errors somehow.</p>",
        "id": 197376767,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589354945
    },
    {
        "content": "<p>Yep, it shows me lots of red</p>",
        "id": 197376803,
        "sender_full_name": "Egbert Rijke",
        "timestamp": 1589354977
    },
    {
        "content": "<p>With Kevin's fixes it shows me less red, but it still shows me some</p>",
        "id": 197376883,
        "sender_full_name": "Egbert Rijke",
        "timestamp": 1589355018
    },
    {
        "content": "<p>Red is not good (-;</p>",
        "id": 197376944,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589355086
    },
    {
        "content": "<p>so it is complaining about <code>concat_list</code> in the line where we <code>#reduce</code></p>",
        "id": 197377023,
        "sender_full_name": "Egbert Rijke",
        "timestamp": 1589355133
    },
    {
        "content": "<p>Error?</p>",
        "id": 197377039,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589355159
    },
    {
        "content": "<p>type mismatch</p>",
        "id": 197377060,
        "sender_full_name": "Egbert Rijke",
        "timestamp": 1589355184
    },
    {
        "content": "<p>I don't know how to copy the error message because it disappears as soon as i stop hovering over it</p>",
        "id": 197377084,
        "sender_full_name": "Egbert Rijke",
        "timestamp": 1589355207
    },
    {
        "content": "<p>Which types?</p>",
        "id": 197377086,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589355209
    },
    {
        "content": "<p>Aah, annoying</p>",
        "id": 197377095,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589355215
    },
    {
        "content": "<p>You should use a real editor (-; [/joking]</p>",
        "id": 197377102,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589355222
    },
    {
        "content": "<p>But can you manually say which types it complains about?</p>",
        "id": 197377174,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589355272
    },
    {
        "content": "<p>Is it still confusing <code>_root_.list</code> with <code>hidden.list</code>?</p>",
        "id": 197377185,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589355286
    },
    {
        "content": "<p>why not call it <code>List</code></p>",
        "id": 197377198,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589355302
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253568\">@Egbert Rijke</span> If I copy Kevin's code, I don't get errors.</p>",
        "id": 197377256,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589355351
    },
    {
        "content": "<p>in <code>concat_list [1, 2, 3]</code> term <code>[1, 2, 3]</code> has type <code>list ?m1 : Type</code></p>",
        "id": 197377265,
        "sender_full_name": "Egbert Rijke",
        "timestamp": 1589355360
    },
    {
        "content": "<p>Do you have more code in your file?</p>",
        "id": 197377306,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589355370
    },
    {
        "content": "<p>But the fact that it uses notation seems bad</p>",
        "id": 197377322,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589355385
    },
    {
        "content": "<p>I don't get the <code>[1,2,3]</code> notation</p>",
        "id": 197377326,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589355395
    },
    {
        "content": "<p>My code compiles fine <a href=\"https://leanprover-community.github.io/lean-web-editor/#code=namespace%20hidden%0A%0Ainductive%20list%20%28A%20%3A%20Type%29%20%3A%20Type%0A%7C%20nil%20%3A%20list%0A%7C%20cons%20%3A%20A%20%E2%86%92%20list%20%E2%86%92%20list%0A%0Anamespace%20list%0A%0Adefinition%20concat_list%20%7BA%20%3A%20Type%7D%20%3A%20list%20A%20%E2%86%92%20list%20A%20%E2%86%92%20list%20A%20%3A%3D%0Abegin%0A%20%20intros%20x%20y%2C%0A%20%20induction%20x%2C%0A%20%20%7B%20exact%20y%7D%2C%0A%20%20%7B%20exact%20%28cons%20x_a%20x_ih%29%7D%2C%0Aend%0A%0A%23reduce%20concat_list%20%28cons%201%20%28cons%202%20%28cons%203%20nil%29%29%29%20%28cons%204%20%28cons%205%20nil%29%29%0A%0Aend%20list%0A%0Aend%20hidden%0A\">here</a>, no warnings, no errors.</p>",
        "id": 197377330,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589355399
    },
    {
        "content": "<p>Are you sure you have an exact copy of my code? The code you posted had several problems, switching between list and mylist, the missing # and so on.</p>",
        "id": 197377398,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589355462
    },
    {
        "content": "<p>If you are using it and see errors, then tell us which version of Lean you're using, which editor, etc, and we can debug.</p>",
        "id": 197377447,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589355490
    },
    {
        "content": "<p>My code does not mention <code>[1,2,3]</code> and this will point to the constructor for the usual list, not your own one. There are always issues with <code>list ?m1</code> which is why I suggested that you might want to bake <code>nat</code> into the coefficients of your list.</p>",
        "id": 197377527,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589355564
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/a.20short.20tutorial.20on.20data-structures.20in.20lean/near/197377527\">said</a>:</p>\n<blockquote>\n<p>... you might want to bake <code>nat</code> into the coefficients of your list.</p>\n</blockquote>\n<p>I don't think that is in the spirit of functional programming...</p>",
        "id": 197377631,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589355665
    },
    {
        "content": "<p>Ah, yes it was not an exact copy. But now I'm using an exact copy and it still complains (in a different spot) <a href=\"/user_uploads/3121/xFN2uaABZIRpLa5zf7TaJeWY/Screen-Shot-2020-05-13-at-09.38.53.png\">Screen-Shot-2020-05-13-at-09.38.53.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/xFN2uaABZIRpLa5zf7TaJeWY/Screen-Shot-2020-05-13-at-09.38.53.png\" title=\"Screen-Shot-2020-05-13-at-09.38.53.png\"><img src=\"/user_uploads/3121/xFN2uaABZIRpLa5zf7TaJeWY/Screen-Shot-2020-05-13-at-09.38.53.png\"></a></div>",
        "id": 197377644,
        "sender_full_name": "Egbert Rijke",
        "timestamp": 1589355684
    },
    {
        "content": "<p>BTW I really appreciate both your help</p>",
        "id": 197377768,
        "sender_full_name": "Egbert Rijke",
        "timestamp": 1589355783
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253568\">@Egbert Rijke</span> I can't decipher the error message from your screenshot...</p>",
        "id": 197378001,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589355982
    },
    {
        "content": "<p>type mismatch at application <code>cons 3 nil</code> term nil has type ...</p>",
        "id": 197378187,
        "sender_full_name": "Egbert Rijke",
        "timestamp": 1589356133
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253568\">@Egbert Rijke</span> But which type does it report?</p>",
        "id": 197379782,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589357275
    },
    {
        "content": "<p>What does <code>#check cons 3 nil</code> says? Is it what you expect?</p>",
        "id": 197379845,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589357296
    },
    {
        "content": "<p>Also, which Lean version are you using?</p>",
        "id": 197379855,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589357304
    },
    {
        "content": "<p><code>#check cons 3 nil</code> gives the same error, which is what I expect. Let me write the type (it will take a minute because it is complicated)</p>",
        "id": 197379954,
        "sender_full_name": "Egbert Rijke",
        "timestamp": 1589357369
    },
    {
        "content": "<p>Can you copy paste the entire file that you are working in?</p>",
        "id": 197380001,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589357402
    },
    {
        "content": "<p>I am certain that there will be a way to see the errors properly in emacs, but because I don't use it for Lean I can't help. Just to be clear, you are using Lean 3, right?</p>",
        "id": 197380092,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589357472
    },
    {
        "content": "<p>the type of <code>nil</code> in the error message is <code>Π (A : Type), list A : Type 1</code> while it is expected to be <code>list ?m_1</code></p>",
        "id": 197380094,
        "sender_full_name": "Egbert Rijke",
        "timestamp": 1589357475
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253568\">@Egbert Rijke</span> Hey Egbert! You can use <code>C-c ! C-w</code> to copy the error at the cursor position, and <code>C-c ! l</code> to open the list of errors. See also <a href=\"https://github.com/leanprover/lean-mode#key-bindings-and-commands\">https://github.com/leanprover/lean-mode#key-bindings-and-commands</a> for more tips.</p>",
        "id": 197380104,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1589357480
    },
    {
        "content": "<p>Ah great! Thanks Sebastian! And hello :)</p>",
        "id": 197380196,
        "sender_full_name": "Egbert Rijke",
        "timestamp": 1589357526
    },
    {
        "content": "<p>Well, <code>nil</code> is expecting you to tell it the type of the elements of the list.</p>",
        "id": 197380199,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589357530
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">hidden</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">:</span> <span class=\"n\">list</span>\n<span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"bp\">→</span> <span class=\"n\">list</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">list</span>\n\n<span class=\"kn\">definition</span> <span class=\"n\">concat</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">y</span><span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"n\">x_a</span> <span class=\"n\">x_ih</span><span class=\"o\">)},</span>\n<span class=\"kn\">end</span>\n\n<span class=\"bp\">#</span><span class=\"n\">reduce</span> <span class=\"n\">concat</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"mi\">3</span> <span class=\"n\">nil</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"mi\">4</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"mi\">5</span> <span class=\"n\">nil</span><span class=\"o\">))</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">list</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">hidden</span>\n</code></pre></div>",
        "id": 197380201,
        "sender_full_name": "Egbert Rijke",
        "timestamp": 1589357533
    },
    {
        "content": "<p>You are probably using an older version of Lean than the others because the default inference for constructors recently changed in leanprover-community</p>",
        "id": 197380227,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1589357556
    },
    {
        "content": "<p>If I say <code>lean --version</code> in my terminal, it says 3.4.2</p>",
        "id": 197380270,
        "sender_full_name": "Egbert Rijke",
        "timestamp": 1589357587
    },
    {
        "content": "<p><code>#check @list.nil</code> gives me <code>list.nil : Π {A : Type}, list A</code></p>",
        "id": 197380276,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589357594
    },
    {
        "content": "<p>and you have a different type, so maybe you are not up to date.</p>",
        "id": 197380306,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589357617
    },
    {
        "content": "<p>It now defaults to the old <code>| nil {} : list</code>, which will give you the same type as Kevin posted</p>",
        "id": 197380322,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1589357632
    },
    {
        "content": "<p>try</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">inductive</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">{}</span> <span class=\"o\">:</span> <span class=\"n\">list</span>\n<span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"bp\">→</span> <span class=\"n\">list</span>\n</code></pre></div>",
        "id": 197380326,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1589357635
    },
    {
        "content": "<p>(this works for me when using the old lean web editor, which is 3.4 too)</p>",
        "id": 197380395,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1589357666
    },
    {
        "content": "<p>That works!</p>",
        "id": 197380397,
        "sender_full_name": "Egbert Rijke",
        "timestamp": 1589357666
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253568\">@Egbert Rijke</span> Your lean is ancient <span aria-label=\"grimacing\" class=\"emoji emoji-1f62c\" role=\"img\" title=\"grimacing\">:grimacing:</span> <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span></p>",
        "id": 197380414,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589357681
    },
    {
        "content": "<p>2019 :-)</p>",
        "id": 197380432,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589357696
    },
    {
        "content": "<p>Haha really?</p>",
        "id": 197380437,
        "sender_full_name": "Egbert Rijke",
        "timestamp": 1589357698
    },
    {
        "content": "<p>yeah it is like <em>months</em> old!</p>",
        "id": 197380452,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589357708
    },
    {
        "content": "<p>Which is a lot, given that Lean is still a toddler</p>",
        "id": 197380467,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589357723
    },
    {
        "content": "<p>this \"old\" behavior is explained here:<br>\n<a href=\"https://leanprover.github.io/theorem_proving_in_lean/inductive_types.html#constructors-with-arguments\">https://leanprover.github.io/theorem_proving_in_lean/inductive_types.html#constructors-with-arguments</a></p>",
        "id": 197380474,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1589357729
    },
    {
        "content": "<p>Ok let me update lean. Can I do that with brew (I'm on a mac)?</p>",
        "id": 197380500,
        "sender_full_name": "Egbert Rijke",
        "timestamp": 1589357759
    },
    {
        "content": "<p>What you should do depends on what you already did</p>",
        "id": 197380552,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589357776
    },
    {
        "content": "<p>I have no idea how I installed lean at the time :P</p>",
        "id": 197380575,
        "sender_full_name": "Egbert Rijke",
        "timestamp": 1589357812
    },
    {
        "content": "<p>I would be tempted to just work through <a href=\"https://github.com/leanprover-community/mathlib/blob/master/docs/install/macos.md\">https://github.com/leanprover-community/mathlib/blob/master/docs/install/macos.md</a> then</p>",
        "id": 197380586,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589357822
    },
    {
        "content": "<p>#install</p>",
        "id": 197380619,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589357853
    },
    {
        "content": "<p>Too bad... that doesn't work</p>",
        "id": 197380628,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589357865
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib#installation\">https://github.com/leanprover-community/mathlib#installation</a></p>",
        "id": 197380638,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589357873
    },
    {
        "content": "<p>is what it should have linked to</p>",
        "id": 197380647,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589357881
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253568\">@Egbert Rijke</span>  To be clear, you are using the latest official version. It's just that the community took over after that and extended Lean 3 at <a href=\"https://github.com/leanprover-community/lean/\">https://github.com/leanprover-community/lean/</a>. If you don't need mathlib at all, 3.4.2 is probably sufficient, especially if TPL etc are still written against it.</p>",
        "id": 197380721,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1589357920
    },
    {
        "content": "<p>Otoh, you won't be able to offload the mentoring of your students to Zulip (-;</p>",
        "id": 197380807,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589357970
    },
    {
        "content": "<p>Ok, thanks Sebastian. Given that my students will probably just install the official version, it might be best to stick with that.</p>",
        "id": 197380808,
        "sender_full_name": "Egbert Rijke",
        "timestamp": 1589357971
    },
    {
        "content": "<p>Haha, <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>  no that's why I'm asking all the stupid questions now :)</p>",
        "id": 197380881,
        "sender_full_name": "Egbert Rijke",
        "timestamp": 1589358011
    },
    {
        "content": "<p>At least now we know the bug (-;</p>",
        "id": 197380924,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589358050
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253568\">@Egbert Rijke</span> it is not at all a given that your students will install the official version. If you Google for how to install lean you will probably end up with instructions for how to install the modern version. However if your students set up a project and explicitly write that it is a lean 3.4 2 project then it will be because the installer just downloads the correct version of lean for the project</p>",
        "id": 197386352,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589361485
    },
    {
        "content": "<p>I'm not sure that I'm familiar with this infrastructure of projects and installers. I just installed lean via brew, isn't that how it is supposed to go?</p>",
        "id": 197386550,
        "sender_full_name": "Egbert Rijke",
        "timestamp": 1589361601
    },
    {
        "content": "<p>There are links to the installation instructions for the modern version above, I have no idea how to install the old version on a Mac</p>",
        "id": 197386683,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589361672
    },
    {
        "content": "<p>We have seen issues before where students write code and their instructor is on 3.4.2 and can't compile it</p>",
        "id": 197386724,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589361703
    },
    {
        "content": "<p>Ah, that would be me in two weeks <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 197386802,
        "sender_full_name": "Egbert Rijke",
        "timestamp": 1589361744
    },
    {
        "content": "<p>Students come here for help and often don't say \"oh by the way this has to work in 3.4.2\"</p>",
        "id": 197386806,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589361747
    },
    {
        "content": "<p>So if you are serious about not updating then you should make this very clear at the start</p>",
        "id": 197386869,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589361792
    },
    {
        "content": "<p>Hi Egbert! Expecting them all to get the same version is just asking for trouble. They won't, and it will be a nightmare.</p>\n<p>The most flexible installation is with the version manager, elan. Have everyone install that (<a href=\"https://leanprover-community.github.io/get_started.html#install\">https://leanprover-community.github.io/get_started.html#install</a>). You should create a \"project\" yourself. It's just a git repository with a special file in the root. Everyone else can clone your project, work on the files you give them or add their own, and elan should make sure they're using whichever Lean version you want.</p>",
        "id": 197386920,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1589361830
    },
    {
        "content": "<p>(You should also delete whatever you have installed and follow the new installation directions. But if you set up a project that works for you with your current install, it should work for your students too.)</p>",
        "id": 197387000,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1589361869
    },
    {
        "content": "<p>For an example of a project, see <a href=\"https://github.com/leanprover-community/tutorials\">https://github.com/leanprover-community/tutorials</a> . You can delete everything except <code>leanpkg.toml</code>. Add whatever Lean files you want in the <code>src</code> directory.</p>",
        "id": 197387135,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1589361955
    },
    {
        "content": "<p>This is a great idea, this is the way to do it. If you make the project, you control which version of lean will be used</p>",
        "id": 197387233,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589362003
    },
    {
        "content": "<p>Hi Rob! Great to see you again :)</p>\n<p>Ok that setup might actually be great, because we can include files with the basic definitions already in there using <code>sorry</code>, and make the students fill them out. Thanks!</p>",
        "id": 197387306,
        "sender_full_name": "Egbert Rijke",
        "timestamp": 1589362055
    },
    {
        "content": "<p>And if they're slightly competent with git, you can have them commit their own work, pull your updates, etc.</p>",
        "id": 197387480,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1589362144
    },
    {
        "content": "<p>They might be! Surely they are more competent on a computer than I am (unless you give me Agda) (-:</p>",
        "id": 197387542,
        "sender_full_name": "Egbert Rijke",
        "timestamp": 1589362195
    },
    {
        "content": "<p>I didn't actually know Lean was packaged in Homebrew. I truly believe only elan should ever be packaged system-wide, with Lean downloaded per-project by it.</p>",
        "id": 197388938,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1589362920
    },
    {
        "content": "<p>Maybe we can yoink lean out of homebrew...</p>",
        "id": 197395105,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1589366863
    },
    {
        "content": "<p>Yes, this is a slightly weird thing where if you actually <em>use</em> Lean (or GHC, or Rust, etc.) directly, you almost certainly <em>don't</em> want to have your package manager install it, because it will probably install an old version or be missing packages you want or something.</p>",
        "id": 197401447,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589371063
    },
    {
        "content": "<p>It's worth the minor effort of managing the installation yourself.</p>",
        "id": 197401551,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589371104
    },
    {
        "content": "<p>The package manager packages are mostly useful if other things depend on them (like Haskell or Rust binaries?) but for Lean there aren't any such things.</p>",
        "id": 197401606,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589371145
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253568\">@Egbert Rijke</span> You could also prepare a zipped folder with everything needed for your student (Lean+libraries+VScode+extension, all in one folder). This is what I did in my class.</p>",
        "id": 197401835,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589371259
    },
    {
        "content": "<p>You got this working for all OS's?</p>",
        "id": 197404249,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589372618
    },
    {
        "content": "<p>I was scared of namespaces when I first started doing data structures exercises so I just defined <code>mylist </code> and <code>myvec </code> like NNG does with nats. I found it useful to adapt exercises from this set of Haskell/functional programming problems <a href=\"https://wiki.haskell.org/H-99:_Ninety-Nine_Haskell_Problems\">https://wiki.haskell.org/H-99:_Ninety-Nine_Haskell_Problems</a></p>",
        "id": 197407609,
        "sender_full_name": "ROCKY KAMEN-RUBIO",
        "timestamp": 1589374515
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/a.20short.20tutorial.20on.20data-structures.20in.20lean/near/197380619\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/leanprover-community/mathlib#installation\">#install</a></p>\n</blockquote>",
        "id": 197443801,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589389397
    }
]