[
    {
        "content": "<p>I have a basic question about universes in Lean: Would any known inconsistency arise if the type of <code>(x : α) → β x</code> with <code>α : Sort u</code> and <code>β : α → Sort v</code> was simply <code>Sort v</code> instead of <code>Sort (imax u v)</code>?<br>\n(I guess the answer must be \"yes\" because otherwise <code>imax</code> wouldn't need to exist, but I'd like to be sure because it seems to be a blocker for something I would like to do.)</p>",
        "id": 271200076,
        "sender_full_name": "Sebastian Reichelt",
        "timestamp": 1644358921
    },
    {
        "content": "<p>Do you mean <code>Sort (max u v)</code>?</p>",
        "id": 271200364,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1644359043
    },
    {
        "content": "<p>No, <code>max</code> would be much \"worse\" than <code>imax</code> of course; there wouldn't be any universally quantified propositions then as far as I understand. You can interpret my question as asking if \"universally quantified data\" can be treated in the same way as universally quantified propositions, or equivalently if the \"size\" of a function could just be the \"size\" of its output. I hope there is not some obvious type-theoretic reason why it cannot work.</p>",
        "id": 271201131,
        "sender_full_name": "Sebastian Reichelt",
        "timestamp": 1644359431
    },
    {
        "content": "<p>It can't be because e.g. <code>Type -&gt; bool</code> has to be bigger than <code>Type</code>, so at least in the same universe as <code>Type</code>.</p>",
        "id": 271201241,
        "sender_full_name": "Reid Barton",
        "timestamp": 1644359481
    },
    {
        "content": "<p>You need LEM to cook up this kind of example, I think without it a system like this might be consistent, but it would be anticlassical.</p>",
        "id": 271201476,
        "sender_full_name": "Reid Barton",
        "timestamp": 1644359601
    },
    {
        "content": "<p>(the key phrase is \"impredicative universe\")</p>",
        "id": 271201515,
        "sender_full_name": "Reid Barton",
        "timestamp": 1644359621
    },
    {
        "content": "<p>Thanks, I'll check that out.<br>\nJust curious, is the <code>Type -&gt; bool</code> example problematic only in the presence of <code>choice</code>, via <code>propDecidable</code> or something? (Assuming LEM as you say.)</p>",
        "id": 271202269,
        "sender_full_name": "Sebastian Reichelt",
        "timestamp": 1644360046
    },
    {
        "content": "<p>I mean there are definitely systems with an impredicative universe out there, but they are unsuitable for mathematics in the strong sense of proving classically false statements, so I don't know that much about exactly what you can and can't put into such a theory.</p>",
        "id": 271203157,
        "sender_full_name": "Reid Barton",
        "timestamp": 1644360517
    },
    {
        "content": "<p>But computer scientists often don't care about classical mathematics (because they cannot compute LEM anyways), so they think it is reasonable. System F is one of these systems, I understand.</p>",
        "id": 271203248,
        "sender_full_name": "Reid Barton",
        "timestamp": 1644360586
    },
    {
        "content": "<p>Ah, now I understand, you are arguing that <code>α → Bool</code> is set-theoretically larger than <code>α</code>, right? I missed that, oops. :-)</p>",
        "id": 271204829,
        "sender_full_name": "Sebastian Reichelt",
        "timestamp": 1644361438
    },
    {
        "content": "<p>if you do that, there cannot be more than two universes (in which case we get the CoC). Otherwise your system contains a subsystem named System <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>U</mi><mo>−</mo></msup></mrow><annotation encoding=\"application/x-tex\">U^-</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7713em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7713em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">−</span></span></span></span></span></span></span></span></span></span></span>, where you can formulate Girards paradox.</p>",
        "id": 271244747,
        "sender_full_name": "Trebor Huang",
        "timestamp": 1644395851
    },
    {
        "content": "<p>(I haven't really checked all the axioms of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>U</mi><mo>−</mo></msup></mrow><annotation encoding=\"application/x-tex\">U^-</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7713em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7713em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">−</span></span></span></span></span></span></span></span></span></span></span> because I simply can't remember them, so correct me if I'm wrong.)</p>",
        "id": 271244899,
        "sender_full_name": "Trebor Huang",
        "timestamp": 1644395929
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"404479\">@Trebor Huang</span> See <a href=\"https://leanprover-community.github.io/mathlib_docs/find/girard\">docs#girard</a></p>",
        "id": 271248266,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644398161
    },
    {
        "content": "<p>Oh shoot, since it's been moved to the archive I can't find it in the docs anymore. <span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span> What are your thoughts on this? Can we add the mathlib archive to docgen?</p>",
        "id": 271248626,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644398357
    },
    {
        "content": "<p>You can find it at an old version of the mathlib docs: <a href=\"https://cs.brown.edu/courses/cs1951x/docs/logic/girard.html\">https://cs.brown.edu/courses/cs1951x/docs/logic/girard.html</a></p>",
        "id": 271248665,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644398396
    },
    {
        "content": "<p>Exactly the same happened to Bhavik and I yesterday <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 271248851,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1644398502
    },
    {
        "content": "<p>And, yes, documentation for the archive would be great.</p>",
        "id": 271248880,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1644398519
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/doc-gen/issues/147\">https://github.com/leanprover-community/doc-gen/issues/147</a> tracks that task</p>",
        "id": 271271248,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1644411029
    }
]