[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">hab</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"bp\">∪</span> <span class=\"o\">{</span><span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">library_search</span> <span class=\"o\">},</span>\n  <span class=\"n\">all_goals</span> <span class=\"o\">{</span><span class=\"n\">sorry</span><span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Compiles fine. As Mario once said -- be the elaborator. What do you the the goals closed by <code>sorry</code> are? Again this was something that came up at Xena last night (whilst trying to do an integral!)</p>",
        "id": 218119395,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606502178
    },
    {
        "content": "<p><code>false</code> and <code>decidable_eq nat</code>?</p>",
        "id": 218120030,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1606502773
    },
    {
        "content": "<p>You forgot <code>has_singleton ℕ unit</code> (and several others)</p>",
        "id": 218120180,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606502932
    },
    {
        "content": "<p>I'm not even sure if Lean can figure out the <code>have</code> is talking about <code>set nat</code>. So I'm guessing something like <code>?m</code> and <code>has_singleton nat ?m</code></p>",
        "id": 218120209,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1606502966
    },
    {
        "content": "<p>or maybe <code>has_singleton nat (set ?m)</code></p>",
        "id": 218120222,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1606502987
    },
    {
        "content": "<p>Here I'll give you an easier one:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.complex.basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">hab</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"bp\">∪</span> <span class=\"o\">{</span><span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">},</span>\n    <span class=\"n\">apply</span> <span class=\"n\">complex.ext</span><span class=\"o\">,</span>\n  <span class=\"n\">all_goals</span> <span class=\"o\">{</span><span class=\"n\">sorry</span><span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 218120253,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606503003
    }
]