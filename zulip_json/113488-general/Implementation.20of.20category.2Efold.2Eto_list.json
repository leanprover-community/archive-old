[
    {
        "content": "<p>In <code>category.fold</code>, <code>to_list</code> is defined as</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">to_list</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">reverse</span> <span class=\"err\">∘</span> <span class=\"n\">foldl</span> <span class=\"o\">(</span><span class=\"n\">flip</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">cons</span><span class=\"o\">)</span> <span class=\"o\">[]</span>\n</pre></div>\n\n\n<p>where <code>t</code> is an arbitrary <code>traversable</code>. However, I would have expected <code>foldr list.cons []</code> instead. Is there a reason to prefer the first implementation? (<span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span>  I believe this is your area of expertise.)</p>",
        "id": 192787638,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1585911774
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 192787956,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1585911996
    },
    {
        "content": "<p>actually, scratch that, sorry.</p>",
        "id": 192788399,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1585912327
    },
    {
        "content": "<p>My guess is this one runs in fixed stack space in a strict language</p>",
        "id": 192809229,
        "sender_full_name": "Reid Barton",
        "timestamp": 1585923136
    },
    {
        "content": "<p>now I see it's approximately what Marc wrote and then deleted, so maybe I am wrong too <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 192809309,
        "sender_full_name": "Reid Barton",
        "timestamp": 1585923161
    },
    {
        "content": "<p>That was actually my reason. Why did <span class=\"user-mention\" data-user-id=\"221921\">@Marc Huisinga</span> abandon the explanation?</p>",
        "id": 192818574,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1585926604
    },
    {
        "content": "<p>i realized that both <code>foldl</code> and <code>foldr</code> use <code>fold_map</code>, which uses <code>traverse</code>, for which e.g. the list implementation is already not tail recursive if i'm not mistaken. at that point i decided that i probably don't understand the code well enough to comment.</p>",
        "id": 192822709,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1585928331
    },
    {
        "content": "<p>Yes you're right <code>list.traverse</code> is not tail recursive. For the instances of <code>traverse</code> that are tail recursive, we're better off using <code>foldl</code>. Otherwise, I don't think there's a downside.</p>",
        "id": 192868094,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1585950602
    },
    {
        "content": "<p>when <code>traverse</code> is tail recursive, why would <code>foldr</code> not be? (i.e. why would it be better to use <code>foldl</code>?)</p>",
        "id": 192875204,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1585955906
    },
    {
        "content": "<p>Two follow-up questions:</p>\n<ol>\n<li>Would it be a good idea to move <code>foldr</code>, <code>foldl</code>, <code>length</code> etc. into the <code>traversable</code> type class? Haskell seems to do this quite liberally. Upside: efficiency gains (some asymptotic); downside: some more proof obligations in the <code>lawful</code> classes.</li>\n<li>Assuming that the <code>foldl</code> implementation of <code>length</code> runs in constant stack space, I imagine it still performs two traversals instead of one. Is that generally the right tradeoff in Lean (i.e. accepting an O(n) penalty to avoid non-tail recursion)?</li>\n</ol>",
        "id": 193041891,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1586180023
    },
    {
        "content": "<p>Lean 3 doesn't do any tail-call optimization as far as I can tell, so there isn't really a stack space advantage.</p>",
        "id": 193042601,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1586180344
    },
    {
        "content": "<p>So concretely, if we take <code>foldl</code> and <code>foldr</code> on lists:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">foldl</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">[]</span>       <span class=\"o\">:=</span> <span class=\"n\">a</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">::</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">foldl</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">l</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">foldr</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span>       <span class=\"o\">:=</span> <span class=\"n\">b</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">::</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">foldr</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>These would both use O(n) stack space and should therefore be roughly equally fast (or slow)?</p>",
        "id": 193051967,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1586184184
    },
    {
        "content": "<p>Yup, both use O(n) stack space and I would expect the performance to be similar.  If you call <code>trace_call_stack</code>, then you can convince yourself that both have linear stack usage:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">foldl</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">[]</span>       <span class=\"o\">:=</span> <span class=\"n\">a</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">::</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">foldl</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">l</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">foldr</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span>       <span class=\"o\">:=</span> <span class=\"n\">b</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">::</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">foldr</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">foldl</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">9</span> <span class=\"k\">then</span> <span class=\"n\">trace_call_stack</span> <span class=\"mi\">0</span> <span class=\"k\">else</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"mi\">10</span><span class=\"o\">)</span>\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">foldr</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">9</span> <span class=\"k\">then</span> <span class=\"n\">trace_call_stack</span> <span class=\"mi\">0</span> <span class=\"k\">else</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"mi\">10</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 193052848,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1586184534
    },
    {
        "content": "<p>That's true. Somehow, my spidy sense is still telling me that it's wrong to use <code>foldr</code> here because the language is eager. But it doesn't make a difference</p>",
        "id": 193066555,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1586190411
    },
    {
        "content": "<p>presumably it will make a difference in Lean 4?</p>",
        "id": 193066675,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586190467
    },
    {
        "content": "<p>It will</p>",
        "id": 193066758,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1586190485
    },
    {
        "content": "<p>With borrow inference, I think Lean 4 can now do tail call elimination</p>",
        "id": 193066798,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1586190513
    },
    {
        "content": "<p>Why can't lean 3 do TCO?</p>",
        "id": 193066847,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586190547
    },
    {
        "content": "<p>I mean, there isn't anything stopping us from implementing it</p>",
        "id": 193066882,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586190566
    },
    {
        "content": "<p>As far as I can tell, it's because of the scoping of reference counting variables. Functions need to return to the calling context so that that one can decrease the ref count of its variables before it returns</p>",
        "id": 193067055,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1586190633
    },
    {
        "content": "<p>If you are doing a tail call, then you do that refcounting cleanup at the site of the tail-call (causing any variables that have refcount 1 to be dropped unless the caller is taking ownership)</p>",
        "id": 193074719,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586194302
    },
    {
        "content": "<p>Yes, that sounds like the right way to do it</p>",
        "id": 193074888,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1586194389
    }
]