[
    {
        "content": "<p>I am creating an instance of a structure with lets inside lets inside lets. I vaguely remember that I should declare an option to make sure that my definition will be reasonably flattened, but I don't remember its name.</p>",
        "id": 186662638,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1580115047
    },
    {
        "content": "<p><code>set_option eqn_compiler.zeta true</code>?</p>",
        "id": 186662718,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1580115148
    },
    {
        "content": "<p>Maybe this is it. Except that I am not using the equation compiler, so maybe this is not needed. Here is my definition:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c\">/-</span><span class=\"cm\">- The space of continuous multilinear maps on `Π(i : fin (n+1)), E i` is canonically isomorphic to</span>\n<span class=\"cm\">the space of continuous linear maps from `E 0` to the space of continuous multilinear maps on</span>\n<span class=\"cm\">`Π(i : fin n), E i.succ `, by separating the first variable. We register this isomorphism in</span>\n<span class=\"cm\">`linear_to_multilinear_equiv_multilinear_cont 𝕜 E E₂`. We build on the algebraic version (without</span>\n<span class=\"cm\">topology) given in `linear_to_multilinear_equiv_multilinear 𝕜 E E₂`. -/</span>\n<span class=\"n\">def</span> <span class=\"n\">linear_to_multilinear_equiv_multilinear_cont</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"err\">𝕜</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">continuous_multilinear_map</span> <span class=\"err\">𝕜</span> <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">E</span> <span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">)</span> <span class=\"n\">E₂</span><span class=\"o\">))</span> <span class=\"err\">≃</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"err\">𝕜</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">continuous_multilinear_map</span> <span class=\"err\">𝕜</span> <span class=\"n\">E</span> <span class=\"n\">E₂</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"c1\">-- first, register a linear equiv `aux`. Then, to check the continuity, it makes it possible to use</span>\n<span class=\"c1\">-- linear_map.continuous_of_bound</span>\n<span class=\"k\">let</span> <span class=\"n\">aux</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"err\">𝕜</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">continuous_multilinear_map</span> <span class=\"err\">𝕜</span> <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">E</span> <span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">)</span> <span class=\"n\">E₂</span><span class=\"o\">))</span> <span class=\"err\">≃ₗ</span><span class=\"o\">[</span><span class=\"err\">𝕜</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">continuous_multilinear_map</span> <span class=\"err\">𝕜</span> <span class=\"n\">E</span> <span class=\"n\">E₂</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span>  <span class=\"o\">:=</span> <span class=\"bp\">λ</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">linear_to_multilinear_equiv_multilinear</span> <span class=\"err\">𝕜</span> <span class=\"n\">E</span> <span class=\"n\">E₂</span>\n    <span class=\"o\">(</span><span class=\"n\">continuous_multilinear_map</span><span class=\"bp\">.</span><span class=\"n\">to_multilinear_map_linear</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">to_linear_map</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">mk_continuous_of_bound</span>\n      <span class=\"o\">(</span><span class=\"err\">∥</span><span class=\"n\">f</span><span class=\"err\">∥</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">continuous_multilinear_map</span><span class=\"bp\">.</span><span class=\"n\">norm_image_tail_le</span> <span class=\"n\">f</span> <span class=\"n\">m</span><span class=\"o\">),</span>\n  <span class=\"n\">add</span>     <span class=\"o\">:=</span> <span class=\"bp\">λ</span><span class=\"n\">f₁</span> <span class=\"n\">f₂</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">ext</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n  <span class=\"n\">smul</span>    <span class=\"o\">:=</span> <span class=\"bp\">λ</span><span class=\"n\">c</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">ext</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span><span class=\"n\">f</span><span class=\"o\">,</span>\n    <span class=\"k\">let</span> <span class=\"n\">finv</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span><span class=\"err\">ₗ</span><span class=\"o\">[</span><span class=\"err\">𝕜</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">continuous_multilinear_map</span> <span class=\"err\">𝕜</span> <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">E</span> <span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">)</span> <span class=\"n\">E₂</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n    <span class=\"o\">{</span> <span class=\"c1\">-- define a linear map into `n` continuous multilinear maps from an `n+1` continuous multilinear map</span>\n      <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span><span class=\"n\">x</span><span class=\"o\">,</span>\n        <span class=\"o\">((</span><span class=\"n\">linear_to_multilinear_equiv_multilinear</span> <span class=\"err\">𝕜</span> <span class=\"n\">E</span> <span class=\"n\">E₂</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n          <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">to_multilinear_map</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mk_continuous_of_bound</span> <span class=\"o\">(</span><span class=\"err\">∥</span><span class=\"n\">f</span><span class=\"err\">∥</span> <span class=\"bp\">*</span> <span class=\"err\">∥</span><span class=\"n\">x</span><span class=\"err\">∥</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">norm_image_cons_le</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n      <span class=\"n\">add</span>    <span class=\"o\">:=</span> <span class=\"bp\">λ</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">ext</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">cons_add</span> <span class=\"n\">m</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">},</span>\n      <span class=\"n\">smul</span>   <span class=\"o\">:=</span> <span class=\"bp\">λ</span><span class=\"n\">c</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">ext</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">cons_smul</span> <span class=\"n\">m</span> <span class=\"n\">c</span> <span class=\"n\">x</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n    <span class=\"k\">in</span>\n    <span class=\"c1\">-- the linear map `finv` is also continuous</span>\n    <span class=\"o\">{</span> <span class=\"n\">cont</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n        <span class=\"n\">refine</span> <span class=\"n\">linear_map</span><span class=\"bp\">.</span><span class=\"n\">continuous_of_bound</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"err\">∥</span><span class=\"n\">f</span><span class=\"err\">∥</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">),</span>\n        <span class=\"n\">apply</span> <span class=\"n\">multilinear_map</span><span class=\"bp\">.</span><span class=\"n\">mk_continuous_norm_le</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">mul_nonneg&#39;</span> <span class=\"o\">(</span><span class=\"n\">norm_nonneg</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">norm_nonneg</span> <span class=\"bp\">_</span><span class=\"o\">)),</span>\n      <span class=\"kn\">end</span><span class=\"o\">,</span>\n      <span class=\"bp\">..</span> <span class=\"n\">finv</span> <span class=\"o\">},</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"k\">begin</span>\n    <span class=\"n\">ext</span> <span class=\"n\">x</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n    <span class=\"n\">change</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"n\">x</span> <span class=\"n\">m</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">tail</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"n\">x</span> <span class=\"n\">m</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">cons_zero</span><span class=\"o\">,</span> <span class=\"n\">tail_cons</span><span class=\"o\">]</span>\n  <span class=\"kn\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"k\">begin</span>\n    <span class=\"n\">ext</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n    <span class=\"n\">change</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">tail</span> <span class=\"n\">m</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">cons_self_tail</span>\n  <span class=\"kn\">end</span> <span class=\"o\">}</span> <span class=\"k\">in</span>\n<span class=\"c1\">-- now, create our continuous linear equiv, by using the fields of `aux` and adding continuity.</span>\n<span class=\"o\">{</span> <span class=\"n\">continuous_to_fun</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n    <span class=\"n\">refine</span> <span class=\"n\">aux</span><span class=\"bp\">.</span><span class=\"n\">to_linear_map</span><span class=\"bp\">.</span><span class=\"n\">continuous_of_bound</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">),</span>\n    <span class=\"n\">rw</span> <span class=\"n\">one_mul</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">continuous_multilinear_map</span><span class=\"bp\">.</span><span class=\"n\">op_norm_le_bound</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">norm_nonneg</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">),</span>\n    <span class=\"n\">apply</span> <span class=\"n\">continuous_multilinear_map</span><span class=\"bp\">.</span><span class=\"n\">norm_image_tail_le</span> <span class=\"n\">f</span>\n  <span class=\"kn\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">continuous_inv_fun</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n    <span class=\"n\">refine</span> <span class=\"n\">aux</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"bp\">.</span><span class=\"n\">to_linear_map</span><span class=\"bp\">.</span><span class=\"n\">continuous_of_bound</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">),</span>\n    <span class=\"n\">rw</span> <span class=\"n\">one_mul</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">continuous_linear_map</span><span class=\"bp\">.</span><span class=\"n\">op_norm_le_bound</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">norm_nonneg</span> <span class=\"bp\">_</span> <span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">),</span>\n    <span class=\"n\">apply</span> <span class=\"n\">continuous_multilinear_map</span><span class=\"bp\">.</span><span class=\"n\">op_norm_le_bound</span> <span class=\"bp\">_</span> <span class=\"o\">((</span><span class=\"n\">mul_nonneg&#39;</span> <span class=\"o\">(</span><span class=\"n\">norm_nonneg</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">norm_nonneg</span> <span class=\"bp\">_</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">),</span>\n    <span class=\"n\">exact</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">norm_image_cons_le</span> <span class=\"n\">x</span> <span class=\"n\">m</span>\n  <span class=\"kn\">end</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span> <span class=\"n\">aux</span> <span class=\"o\">}</span>\n</pre></div>",
        "id": 186662848,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1580115304
    },
    {
        "content": "<p>Have you considered <em>not</em> writing huge definitions with lets upon lets?</p>",
        "id": 186662929,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1580115380
    },
    {
        "content": "<p>there is no tax on auxiliary defs</p>",
        "id": 186662965,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1580115409
    },
    {
        "content": "<p>You mean, separating the <code>aux</code> in an auxiliary definition, whose only purpose would be to define <code>linear_to_multilinear_equiv_multilinear_cont</code>? Since it would never be used later on, what would be the interest?</p>",
        "id": 186663016,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1580115468
    },
    {
        "content": "<p>Well, I think you are about to create a new contender for the world's largest term tree again</p>",
        "id": 186663072,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1580115500
    },
    {
        "content": "<p>(Of course, when I did my definition, I did it in two steps as you advertise, to keep Lean reasonably reactive).</p>",
        "id": 186663078,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1580115508
    },
    {
        "content": "<p>I don't think inlining like this is actually good for lean</p>",
        "id": 186663116,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1580115550
    },
    {
        "content": "<p>OK, I will split it then.</p>",
        "id": 186663136,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1580115579
    },
    {
        "content": "<p>One reason you might want to keep an auxiliary def is if you ever want to inspect this definition later (prove some theorem about it, which is usually the case for defs) all of this stuff will explode on you</p>",
        "id": 186663213,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1580115623
    },
    {
        "content": "<p>Still, is there some option to tell Lean to flatten the definition of <code>linear_to_multilinear_equiv_multilinear_cont</code> (or is it a better idea to keep it unflattened?)</p>",
        "id": 186663222,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1580115638
    },
    {
        "content": "<p>with an auxiliary you can unfold stuff one at a time</p>",
        "id": 186663227,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1580115643
    },
    {
        "content": "<p>I don't think there are many options for changing the definition between the elaborator and the kernel</p>",
        "id": 186663271,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1580115703
    },
    {
        "content": "<p>Everything in there is Prop, except for the actual definition (when one applies things to objects) which is completely trivial and for which I register a simp lemma right after the definition, of course.</p>",
        "id": 186663330,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1580115730
    },
    {
        "content": "<p>most of it is out of your control, meaning you have to use tactics if you want what you write to not reflect the actual output</p>",
        "id": 186663335,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1580115738
    },
    {
        "content": "<p>lean automatically creates auxiliary defs for props inside defs</p>",
        "id": 186663357,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1580115760
    },
    {
        "content": "<p><code>eqn_compiler.zeta</code> affects how those auxiliaries are stated</p>",
        "id": 186663387,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1580115795
    },
    {
        "content": "<p>The easiest way to find out if a planned optimization happened is to look at the <code>#print</code> on the result</p>",
        "id": 186663402,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1580115830
    },
    {
        "content": "<p>The output of <code>#print</code> ends with nice dots like</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"err\">…</span>\n       <span class=\"err\">…</span>\n       <span class=\"err\">…</span>\n       <span class=\"err\">…</span>\n       <span class=\"err\">…</span>\n       <span class=\"err\">…</span>\n       <span class=\"err\">…</span>\n       <span class=\"err\">…</span>\n       <span class=\"err\">…</span>\n       <span class=\"err\">…</span>\n       <span class=\"err\">…</span>\n       <span class=\"err\">…</span><span class=\"o\">)</span>\n    <span class=\"err\">…</span>\n    <span class=\"err\">…</span>\n</pre></div>",
        "id": 186663578,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1580115998
    },
    {
        "content": "<blockquote>\n<p>Have you considered <em>not</em> writing huge definitions with lets upon lets?</p>\n</blockquote>\n<p>Aaaaah, you're spoiling all our fun <span aria-label=\"oops\" class=\"emoji emoji-1f643\" role=\"img\" title=\"oops\">:oops:</span></p>",
        "id": 186663656,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1580116082
    },
    {
        "content": "<p>if you want, you can see more letters and less dots (well, probably even more dots) by increasing <code>pp.max_steps</code></p>",
        "id": 186663842,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1580116269
    },
    {
        "content": "<p>but that's probably a bad sign</p>",
        "id": 186663865,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1580116299
    },
    {
        "content": "<p>The next lemma is</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">set_option</span> <span class=\"n\">class</span><span class=\"bp\">.</span><span class=\"n\">instance_max_depth</span> <span class=\"mi\">352</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">linear_to_multilinear_equiv_multilinear_cont_apply</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"err\">𝕜</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">continuous_multilinear_map</span> <span class=\"err\">𝕜</span> <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">E</span> <span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">)</span> <span class=\"n\">E₂</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span><span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">),</span> <span class=\"n\">E</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">linear_to_multilinear_equiv_multilinear_cont</span> <span class=\"err\">𝕜</span> <span class=\"n\">E</span> <span class=\"n\">E₂</span> <span class=\"n\">f</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">tail</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</pre></div>\n\n\n<p>and yes, 351 is not enough :-)</p>",
        "id": 186663942,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1580116331
    },
    {
        "content": "<p>I guess my computer would have punched me in my stomach around 253...</p>",
        "id": 186663973,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1580116365
    },
    {
        "content": "<p>It's extremely quick though. But there are a lot of coercions in there...</p>",
        "id": 186664047,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1580116418
    },
    {
        "content": "<blockquote>\n<p>You mean, separating the <code>aux</code> in an auxiliary definition, whose only purpose would be to define <code>linear_to_multilinear_equiv_multilinear_cont</code>? Since it would never be used later on, what would be the interest?</p>\n</blockquote>\n<p>I think there are several other occasions in the library where auxiliary definitions are made and never used again. Isn't there some module_aux and maybe some metric or topological or uniform space aux def too?</p>",
        "id": 186671508,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1580122805
    },
    {
        "content": "<p>If you search for <code>*_aux</code> you will find lots of examples</p>",
        "id": 186671542,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1580122847
    }
]