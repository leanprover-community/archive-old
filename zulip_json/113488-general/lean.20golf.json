[
    {
        "content": "<p>Shortest proof of this?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">c</span> <span class=\"bp\">∧</span> <span class=\"n\">d</span> <span class=\"bp\">∧</span> <span class=\"n\">e</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">c</span> <span class=\"bp\">∧</span> <span class=\"n\">c</span> <span class=\"bp\">∧</span> <span class=\"n\">d</span> <span class=\"bp\">∧</span> <span class=\"n\">e</span>\n</pre></div>",
        "id": 123089630,
        "sender_full_name": "Sean Leather",
        "timestamp": 1519824450
    },
    {
        "content": "<p>Let's start with the basics</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">by</span> <span class=\"n\">split</span><span class=\"bp\">;</span><span class=\"n\">intro</span><span class=\"bp\">;</span><span class=\"n\">simp</span><span class=\"bp\">*</span>\n</pre></div>",
        "id": 123089805,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1519824727
    },
    {
        "content": "<p>That's like a sledgehammer using sledgehammers to hit small nails. For some reason, I never think to try <code>simp *</code>.</p>",
        "id": 123090043,
        "sender_full_name": "Sean Leather",
        "timestamp": 1519825227
    },
    {
        "content": "<p>Well, I don't really need <code>*</code> here, but naming the hypothesis obviously is a golf no-go :P</p>",
        "id": 123090128,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1519825436
    },
    {
        "content": "<p>Is it? If the proof is short, I don't see why. <span class=\"emoji emoji-1f642\" title=\"simple smile\">:simple_smile:</span></p>",
        "id": 123090420,
        "sender_full_name": "Sean Leather",
        "timestamp": 1519825923
    },
    {
        "content": "<p>I was happy to see <code>by tidy</code> works too. Maybe one day I'll get up the courage to PR it.</p>",
        "id": 123090434,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1519826014
    },
    {
        "content": "<p>I wondered whether <code>by cc</code> would work -- but it doesn't. I still don't really know what to expect with cc but I think I've seen it prove other goals of this nature.</p>",
        "id": 123109866,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1519855077
    },
    {
        "content": "<p>I'm slowly learning how to use <code>simp *</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">namespace</span> <span class=\"n\">list</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">nth_of_map</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">option</span><span class=\"bp\">.</span><span class=\"n\">get_or_else</span> <span class=\"o\">(</span><span class=\"n\">nth</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">option</span><span class=\"bp\">.</span><span class=\"n\">get_or_else</span> <span class=\"o\">(</span><span class=\"n\">nth</span> <span class=\"n\">l</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">induction</span> <span class=\"n\">l</span> <span class=\"n\">generalizing</span> <span class=\"n\">n</span><span class=\"bp\">;</span> <span class=\"o\">[</span><span class=\"n\">skip</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">n</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">option</span><span class=\"bp\">.</span><span class=\"n\">get_or_else</span><span class=\"o\">]</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">list</span>\n</pre></div>",
        "id": 123129844,
        "sender_full_name": "Sean Leather",
        "timestamp": 1519895475
    },
    {
        "content": "<p>I guess <code>cc</code> doesn't work as it currently doesn't handle idempotent laws (i.e. <code>c ∧ c</code>).</p>",
        "id": 123179941,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1519989721
    },
    {
        "content": "<p>Curry:</p>",
        "id": 123658195,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520953792
    },
    {
        "content": "<p><code>example (P Q R : Prop) : (P ∧ Q → R) ↔ (P → (Q → R)) := sorry</code></p>",
        "id": 123658197,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520953795
    },
    {
        "content": "<p>Doing this one taught me something, although it was arguably not very useful</p>",
        "id": 123658245,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520953806
    },
    {
        "content": "<p>Actually it taught me 2 things, one being that bash shell is not very good at counting unicode characters</p>",
        "id": 123658252,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520953830
    },
    {
        "content": "<p>I'm sure I've asked this before, but I don't remember the answer. Better/shorter way to do this?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n</pre></div>\n\n\n<p>Note that <code>simp</code> by itself doesn't work.</p>",
        "id": 127015438,
        "sender_full_name": "Sean Leather",
        "timestamp": 1527143468
    },
    {
        "content": "<p><code>simp {contextual:=tt}</code> should do it.</p>",
        "id": 127016063,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1527144925
    },
    {
        "content": "<p>Yep, that did it. Thanks!</p>",
        "id": 127016150,
        "sender_full_name": "Sean Leather",
        "timestamp": 1527145113
    },
    {
        "content": "<p><code>simp</code> doesn't solve this. Is there a theorem I can use with <code>simp</code> to solve it?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"bp\">⟩</span> <span class=\"err\">∈</span> <span class=\"n\">l</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a₁</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">==</span> <span class=\"n\">b₁</span> <span class=\"bp\">∨</span> <span class=\"bp\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"bp\">⟩</span> <span class=\"err\">∈</span> <span class=\"n\">l</span>\n</pre></div>",
        "id": 127017262,
        "sender_full_name": "Sean Leather",
        "timestamp": 1527147517
    },
    {
        "content": "<p>I guess you have <code>⟨a₁, b₁⟩ ∈ l</code>?</p>",
        "id": 127017535,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1527148184
    },
    {
        "content": "<p>But I also don't see how to solve it with the simplifier.</p>",
        "id": 127017583,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1527148218
    },
    {
        "content": "<p>Oh wait, I'm stupid. Let me actually think. <span class=\"emoji emoji-1f642\" title=\"simple smile\">:simple_smile:</span></p>",
        "id": 127017645,
        "sender_full_name": "Sean Leather",
        "timestamp": 1527148356
    },
    {
        "content": "<p>Do you CS people know how to parse that sort of statement?</p>",
        "id": 127017653,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527148402
    },
    {
        "content": "<p>I look at it (away from Lean) and have no idea about the relative priorities of and, or and iff. Is this just all some standard convention that you CS people know and we maths people just avoid by adding brackets?</p>",
        "id": 127017685,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527148442
    },
    {
        "content": "<p>I mean -- I know I can go and check them -- my question is whether there are uniform standards or whether Lean made some random choice and you find different choices in other systems.</p>",
        "id": 127017716,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527148494
    },
    {
        "content": "<p>obviously I can guess the answer in this situation from the context, but in the past I have written statements without brackets and then later on gone \"oh crap, that doesn't mean what I wanted it to mean at all\"</p>",
        "id": 127017741,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527148547
    },
    {
        "content": "<p>The precedence is pretty standard.  In most (all?) programming languages as well as logic, and binds more tightly than or.  C doesn't have iff, so its hard to compare.</p>",
        "id": 127017785,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1527148588
    },
    {
        "content": "<p>The “usual conventions:” <a href=\"https://groups.google.com/d/msg/lean-user/lbFwVL21Az4/1erXpLqBAwAJ\" target=\"_blank\" title=\"https://groups.google.com/d/msg/lean-user/lbFwVL21Az4/1erXpLqBAwAJ\">https://groups.google.com/d/msg/lean-user/lbFwVL21Az4/1erXpLqBAwAJ</a></p>",
        "id": 127017792,
        "sender_full_name": "Sean Leather",
        "timestamp": 1527148635
    },
    {
        "content": "<p>Excerpt from a proof theory textbook lying around here (Troelstra &amp; Schwichtenberg):</p>\n<blockquote>\n<p>Notation (Saving on parentheses) In writing formulas we save on parentheses by assuming that ∀, ∃,  ¬ bind more strongly than ∧, ∨, and that in turn ∨, ∧ bind more strongly than →, ↔. [...]</p>\n</blockquote>",
        "id": 127017838,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1527148686
    },
    {
        "content": "<p>I guess you will find similar boilerplate in most texts that deal with logical formulas.</p>",
        "id": 127017848,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1527148716
    },
    {
        "content": "<p>One that I struggled with was <code>=</code> vs. <code>↔</code>, but now I'm used to it.</p>",
        "id": 127017854,
        "sender_full_name": "Sean Leather",
        "timestamp": 1527148737
    },
    {
        "content": "<blockquote>\n<p>I guess you will find similar boilerplate in most texts that deal with logical formulas.</p>\n</blockquote>\n<p>I follow a text which deals with logical formulas in my introduction to proof class and I can find no mention of binding preferences anywhere!</p>",
        "id": 127018118,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527149254
    },
    {
        "content": "<p>But I do see a lot of brackets :-)</p>",
        "id": 127018119,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527149260
    },
    {
        "content": "<p>I conclude that the guy who wrote it (who is in the office a few doors down from me) was also a mathematician who had no idea of standard CS conventions :-)</p>",
        "id": 127018159,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527149296
    },
    {
        "content": "<p>There is one confusing difference between proof theory and CS though: the precedence of ∀, ∃ is different.</p>\n<div class=\"codehilite\"><pre><span></span>  ∃x P(x) → Q     means:\n\n  (∃x P(x)) → Q       for everyone in my research group\n  ∃x (P(x) → Q)       in Lean, Coq, etc.\n</pre></div>",
        "id": 127018330,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1527149663
    },
    {
        "content": "<p><code>(∃x P(x)) → Q</code> seems like really stupid precedence, since you would usually write <code>∀ x , P x → Q</code> instead of that.</p>",
        "id": 127018489,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1527150001
    },
    {
        "content": "<p>Interesting. Pierce (Types and Programming Languages) uses explicit bracketing : <code>{∃x, P(x)}</code></p>",
        "id": 127018550,
        "sender_full_name": "Sean Leather",
        "timestamp": 1527150101
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> The same precedence is also used for ∀: <code>(∀x P(x)) → Q</code> vs. <code>∀x (P(x) → Q)</code>, which is just as confusing.</p>",
        "id": 127018815,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1527150540
    },
    {
        "content": "<p>In fact it was exactly this forall point which I was referring to in my earlier \"that doesn't mean what I wanted it to mean\" comment</p>",
        "id": 127019269,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527151380
    },
    {
        "content": "<p>Shortest proof of this?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span>\n<span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span>\n<span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n<span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"n\">b</span>\n<span class=\"err\">⊢</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span>\n</pre></div>",
        "id": 132455368,
        "sender_full_name": "Sean Leather",
        "timestamp": 1534772154
    },
    {
        "content": "<p>This is what I came up with:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">lt_of_le_and_ne</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">le_of_lt_succ</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"n\">q</span>\n</pre></div>",
        "id": 132455921,
        "sender_full_name": "Sean Leather",
        "timestamp": 1534772687
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">cases</span> <span class=\"n\">p</span><span class=\"bp\">;</span> <span class=\"o\">[</span><span class=\"n\">cc</span><span class=\"o\">,</span> <span class=\"n\">assumption</span><span class=\"o\">]</span>\n</pre></div>",
        "id": 132456748,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1534773579
    },
    {
        "content": "<p>I'm not on a Lean machine atm, but could <code>cooper</code> or <code>tidy</code> kill this one?</p>",
        "id": 132457185,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1534773936
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">fintype</span>\n\n<span class=\"kn\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">H1</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"err\">⊆</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H2</span> <span class=\"o\">:</span> <span class=\"n\">T</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"bp\">≤</span> <span class=\"n\">S</span><span class=\"bp\">.</span><span class=\"n\">card</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">=</span> <span class=\"n\">T</span> <span class=\"o\">:=</span>\n<span class=\"k\">have</span> <span class=\"n\">H3</span> <span class=\"o\">:</span> <span class=\"n\">disjoint</span> <span class=\"n\">S</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"err\">\\</span> <span class=\"n\">S</span><span class=\"o\">),</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">disjoint</span><span class=\"o\">],</span>\n<span class=\"k\">have</span> <span class=\"n\">H4</span> <span class=\"o\">:</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">card_disjoint_union</span> <span class=\"n\">H3</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">H5</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"err\">∪</span> <span class=\"n\">T</span> <span class=\"err\">\\</span> <span class=\"n\">S</span> <span class=\"bp\">=</span> <span class=\"n\">T</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">ext&#39;</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"bp\">⟨λ</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">cases_on</span> <span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">mem_union</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">mem_of_subset</span> <span class=\"n\">H1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">left</span> <span class=\"err\">∘</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">mem_sdiff</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">),</span>\n  <span class=\"bp\">λ</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">by_cases</span> <span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">mem_union_left</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">H&#39;</span><span class=\"o\">,</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">mem_union_right</span> <span class=\"bp\">_</span> <span class=\"err\">$</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">mem_sdiff</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">⟨</span><span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">H&#39;</span><span class=\"bp\">⟩</span><span class=\"o\">)</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">H6</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"bp\">=</span> <span class=\"n\">T</span><span class=\"bp\">.</span><span class=\"n\">card</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">le_antisymm</span> <span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">card_le_of_subset</span> <span class=\"n\">H1</span><span class=\"o\">)</span> <span class=\"n\">H2</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">H7</span> <span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"err\">\\</span> <span class=\"n\">S</span> <span class=\"bp\">=</span> <span class=\"err\">∅</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">card_eq_zero</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"err\">$</span>\n  <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">add_left_cancel</span> <span class=\"err\">$</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"err\">$</span> <span class=\"k\">by</span> <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">H5</span><span class=\"o\">,</span> <span class=\"n\">H6</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">H4</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">H8</span> <span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"err\">⊆</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">subset_iff</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">by_contradiction</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">H&#39;</span><span class=\"o\">,</span>\n  <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">ne_empty_of_mem</span> <span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">mem_sdiff</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">⟨</span><span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">H&#39;</span><span class=\"bp\">⟩</span><span class=\"o\">)</span> <span class=\"n\">H7</span><span class=\"o\">,</span>\n<span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">subset</span><span class=\"bp\">.</span><span class=\"n\">antisymm</span> <span class=\"n\">H1</span> <span class=\"n\">H8</span>\n</pre></div>",
        "id": 132529548,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1534871827
    },
    {
        "content": "<p>is there a shorter proof?</p>",
        "id": 132529552,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1534871831
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>example (H1 : S ⊆ T) (H2 : T.card ≤ S.card) : S = T :=\nfinset.eq_of_veq $ multiset.eq_of_le_of_card_le (finset.val_le_iff.2 H1) H2\n</pre></div>",
        "id": 132531216,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1534873605
    },
    {
        "content": "<p>this should be in mathlib though</p>",
        "id": 132531244,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1534873633
    },
    {
        "content": "<p>ah it's in multiset lol</p>",
        "id": 132531591,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1534873991
    },
    {
        "content": "<p>Pretty sure it's there for finsets. I remember seeing it.</p>",
        "id": 132531934,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1534874367
    },
    {
        "content": "<p><code>finset.eq_of_subset_of_card_le</code></p>",
        "id": 132532050,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1534874453
    },
    {
        "content": "<p>genius</p>",
        "id": 132532088,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1534874502
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">fintype</span>\n\n<span class=\"kn\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">injective</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">surjective</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"k\">have</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">eq_univ_iff_forall</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"err\">$</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">eq_of_subset_of_card_le</span> <span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">subset_univ</span> <span class=\"bp\">_</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">le_of_eq</span> <span class=\"err\">$</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"err\">$</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">card_image_of_injective</span> <span class=\"bp\">_</span> <span class=\"n\">H</span><span class=\"o\">),</span>\n<span class=\"bp\">λ</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"k\">let</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">H2</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">mem_image</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">H2</span><span class=\"bp\">⟩</span>\n</pre></div>",
        "id": 132533414,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1534876065
    },
    {
        "content": "<p>how about this?</p>",
        "id": 132533415,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1534876069
    },
    {
        "content": "<p>Already in mathlib. <code>fintype.injective_iff_surjective</code> Your proof  is shorter though</p>",
        "id": 132533791,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1534876405
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">fintype</span>\n\n<span class=\"kn\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">something</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">injective</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">surjective</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"k\">have</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">eq_univ_iff_forall</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"err\">$</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">eq_of_subset_of_card_le</span> <span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">subset_univ</span> <span class=\"bp\">_</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">le_of_eq</span> <span class=\"err\">$</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"err\">$</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">card_image_of_injective</span> <span class=\"bp\">_</span> <span class=\"n\">H</span><span class=\"o\">),</span>\n<span class=\"bp\">λ</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"k\">let</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">H2</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">mem_image</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">H2</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">something2</span> <span class=\"o\">[</span><span class=\"n\">integral_domain</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">r</span> <span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"n\">something</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">H&#39;</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">s</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"n\">eq_of_sub_eq_zero</span> <span class=\"err\">$</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">resolve_right</span>\n    <span class=\"o\">(</span><span class=\"n\">eq_zero_or_eq_zero_of_mul_eq_zero</span> <span class=\"err\">$</span> <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">-</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">sub_mul</span><span class=\"o\">,</span> <span class=\"n\">H&#39;</span><span class=\"o\">,</span> <span class=\"n\">sub_self</span><span class=\"o\">])</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"mi\">1</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"kn\">instance</span> <span class=\"n\">field_of_fintype_of_integral_domain</span> <span class=\"o\">[</span><span class=\"n\">integral_domain</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">field</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"mi\">0</span> <span class=\"k\">else</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"err\">$</span> <span class=\"n\">something2</span> <span class=\"n\">α</span> <span class=\"n\">x</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_inv_cancel</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">unfold</span> <span class=\"n\">has_inv</span><span class=\"bp\">.</span><span class=\"n\">inv</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">dif_neg</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span><span class=\"o\">,</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">some_spec</span> <span class=\"o\">(</span><span class=\"n\">something2</span> <span class=\"n\">α</span> <span class=\"n\">x</span> <span class=\"n\">H</span><span class=\"o\">)],</span>\n  <span class=\"n\">inv_mul_cancel</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">unfold</span> <span class=\"n\">has_inv</span><span class=\"bp\">.</span><span class=\"n\">inv</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">dif_neg</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">some_spec</span> <span class=\"o\">(</span><span class=\"n\">something2</span> <span class=\"n\">α</span> <span class=\"n\">x</span> <span class=\"n\">H</span><span class=\"o\">)],</span>\n  <span class=\"bp\">..</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">apply_instance</span> <span class=\"o\">:</span> <span class=\"n\">integral_domain</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n</pre></div>",
        "id": 132534113,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1534876698
    },
    {
        "content": "<blockquote>\n<p>Already in mathlib. <code>fintype.injective_iff_surjective</code> Your proof  is shorter though</p>\n</blockquote>\n<p>well I didn't prove the other direction</p>",
        "id": 132534118,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1534876712
    },
    {
        "content": "<p>Don't make that an instance or we have a cycle.</p>",
        "id": 132534147,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1534876768
    },
    {
        "content": "<p>also I can't find <code>injective_iff_surjective</code></p>",
        "id": 132534161,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1534876788
    },
    {
        "content": "<p>It's quite new. Last month or so.</p>",
        "id": 132534228,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1534876833
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>\n\n\n<p>Too embarrassed to post my effort. <span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> this came up with that countp v count thing. The proof isn't refl even though the predicates are whatever they call it -- eta equivalent or something.</p>",
        "id": 132601084,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1534970777
    },
    {
        "content": "<p><code>by cc</code></p>",
        "id": 132601170,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1534970925
    },
    {
        "content": "<p><code>propext eq_comm</code></p>",
        "id": 132601195,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1534970987
    },
    {
        "content": "<p>Mine is shorter! <span class=\"emoji emoji-1f3c6\" title=\"trophy\">:trophy:</span></p>",
        "id": 132601255,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1534971017
    },
    {
        "content": "<p>I know, yours is probably faster</p>",
        "id": 132601261,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1534971034
    },
    {
        "content": "<p>Mine is smaller with <code>pp.all</code> :)</p>",
        "id": 132601274,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1534971049
    },
    {
        "content": "<p>Here's the context this came up in:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">multiset</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">multiset</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">multiset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">count</span> <span class=\"n\">a</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">card</span> <span class=\"o\">(</span><span class=\"n\">filter</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">countp_eq_card_filter</span><span class=\"o\">,</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">count</span><span class=\"o\">,</span>\n  <span class=\"n\">congr</span><span class=\"o\">,</span>\n  <span class=\"n\">funext</span><span class=\"o\">,</span>\n  <span class=\"k\">by</span> <span class=\"n\">cc</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>I was surprised this wasn't there, but perhaps the issue is that you can filter on <code>λ b, b = a</code> or <code>λ b, a = b</code></p>",
        "id": 132603490,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1534973878
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">multiset</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">multiset</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">multiset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">count</span> <span class=\"n\">a</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">card</span> <span class=\"o\">(</span><span class=\"n\">filter</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">convert</span> <span class=\"n\">countp_eq_card_filter</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n  <span class=\"n\">funext</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"n\">cc</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 132603835,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1534974455
    },
    {
        "content": "<p><code>by simp [count, countp_eq_card_filter, eq_comm]; congr</code></p>",
        "id": 132603896,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1534974510
    },
    {
        "content": "<p><code>by convert countp_eq_card_filter s; simp [eq_comm]</code></p>",
        "id": 132604013,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1534974670
    },
    {
        "content": "<p>If I hover over <code>convert</code> in VS Code I get \"convert &lt;- expr &lt;error while executing interactive.param_desc: don't know how to pretty print lean.parser.small_nat&gt;  Similar to <code>refine</code> but generates equality proof obligations for every discrepancy between the goal and the type of the rule\"</p>",
        "id": 132604473,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1534975393
    },
    {
        "content": "<p>that's because <code>small_nat</code> doesn't have a description - compare with <code>congr'</code></p>",
        "id": 132604528,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1534975474
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">max</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span>\n</pre></div>",
        "id": 133795530,
        "sender_full_name": "Sean Leather",
        "timestamp": 1536755460
    },
    {
        "content": "<p>not very creative, but <code>by rw [add_comm, nat.lt_succ_iff]; apply le_max_left</code></p>",
        "id": 133796099,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536756149
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">topological_space</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">t1_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_open</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">letI</span> <span class=\"o\">:=</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">dec_pred</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"bp\">-</span><span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">;</span> <span class=\"n\">exact</span>\n<span class=\"o\">(</span><span class=\"n\">is_closed_compl_iff</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"err\">$</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">bUnion_of_singleton</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">▸</span> <span class=\"n\">is_closed_Union</span>\n  <span class=\"bp\">⟨</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">fintype_of_finset</span> <span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">univ</span><span class=\"bp\">.</span><span class=\"n\">filter</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"bp\">-</span><span class=\"n\">s</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">mem_filter</span><span class=\"o\">,</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">mem_univ</span><span class=\"o\">,</span> <span class=\"n\">true_and</span><span class=\"o\">])</span><span class=\"bp\">⟩</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">is_closed_singleton</span><span class=\"o\">))</span>\n</pre></div>",
        "id": 136055689,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539881119
    },
    {
        "content": "<p>I think this theorem could also be stated as <code>t = \\top</code></p>",
        "id": 136059466,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539884710
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">class</span> <span class=\"n\">t2_space&#39;</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">t2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">is_open</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"n\">is_open</span> <span class=\"n\">v</span> <span class=\"bp\">→</span>\n   <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"n\">y</span> <span class=\"err\">∈</span> <span class=\"n\">v</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">z</span> <span class=\"err\">∈</span> <span class=\"n\">u</span> <span class=\"bp\">∧</span> <span class=\"n\">z</span> <span class=\"err\">∈</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"n\">include</span> <span class=\"n\">t</span>\n\n<span class=\"n\">def</span> <span class=\"n\">Hausdorffification</span><span class=\"bp\">.</span><span class=\"n\">setoid</span> <span class=\"o\">:</span> <span class=\"n\">setoid</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">setoid</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">t2_space&#39;</span> <span class=\"o\">(</span><span class=\"n\">quotient</span> <span class=\"n\">s</span><span class=\"o\">)],</span> <span class=\"bp\">@</span><span class=\"n\">setoid</span><span class=\"bp\">.</span><span class=\"n\">r</span> <span class=\"n\">α</span> <span class=\"n\">s</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"n\">iseqv</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨λ</span> <span class=\"bp\">_</span> <span class=\"n\">s</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">H</span> <span class=\"n\">s</span> <span class=\"n\">ht2</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">H</span> <span class=\"n\">s</span> <span class=\"n\">ht2</span><span class=\"o\">),</span>\n    <span class=\"bp\">λ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">H1</span> <span class=\"n\">H2</span> <span class=\"n\">s</span> <span class=\"n\">ht2</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">H1</span> <span class=\"n\">s</span> <span class=\"n\">ht2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">H2</span> <span class=\"n\">s</span> <span class=\"n\">ht2</span><span class=\"o\">)</span><span class=\"bp\">⟩</span> <span class=\"o\">}</span>\n\n<span class=\"n\">local</span> <span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">instance</span><span class=\"o\">]</span> <span class=\"n\">Hausdorffification</span><span class=\"bp\">.</span><span class=\"n\">setoid</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"kn\">reducible</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">Hausdorffification</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"o\">:=</span>\n<span class=\"n\">quotient</span> <span class=\"o\">(</span><span class=\"n\">Hausdorffification</span><span class=\"bp\">.</span><span class=\"n\">setoid</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">Hausdorffification</span><span class=\"bp\">.</span><span class=\"n\">t2_space&#39;</span> <span class=\"o\">:</span>\n  <span class=\"n\">t2_space&#39;</span> <span class=\"o\">(</span><span class=\"n\">Hausdorffification</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">t2</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">induction_on₂</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n    <span class=\"n\">quot</span><span class=\"bp\">.</span><span class=\"n\">sound</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">r</span> <span class=\"n\">ht2</span><span class=\"o\">,</span> <span class=\"k\">begin</span>\n      <span class=\"n\">resetI</span><span class=\"o\">,</span>\n      <span class=\"k\">let</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Hausdorffification</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">quotient</span> <span class=\"n\">r</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"bp\">λ</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">lift_on&#39;</span> <span class=\"n\">e</span> <span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n        <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">sound</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">H</span> <span class=\"o\">},</span>\n      <span class=\"k\">have</span> <span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">s</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n        <span class=\"n\">change</span> <span class=\"n\">is_open</span> <span class=\"o\">(</span><span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"bp\">⁻¹</span><span class=\"err\">&#39;</span> <span class=\"bp\">_</span><span class=\"o\">),</span>\n        <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">preimage_comp</span><span class=\"o\">,</span>\n        <span class=\"n\">exact</span> <span class=\"n\">hs</span> <span class=\"o\">},</span>\n      <span class=\"n\">refine</span> <span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">t2_space&#39;</span><span class=\"bp\">.</span><span class=\"n\">t2</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span> <span class=\"n\">h3</span> <span class=\"n\">h4</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">),</span>\n      <span class=\"n\">rcases</span> <span class=\"n\">H</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"bp\">_</span> <span class=\"n\">h1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"bp\">_</span> <span class=\"n\">h2</span><span class=\"o\">)</span> <span class=\"n\">h3</span> <span class=\"n\">h4</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span><span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">zu</span><span class=\"o\">,</span> <span class=\"n\">zv</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"bp\">⟨</span><span class=\"n\">fz</span><span class=\"o\">,</span> <span class=\"n\">zu</span><span class=\"o\">,</span> <span class=\"n\">zv</span><span class=\"bp\">⟩</span>\n    <span class=\"kn\">end</span> <span class=\"o\">}</span>\n</pre></div>",
        "id": 136060001,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539885224
    },
    {
        "content": "<p>By the way: this T2 space definition is equal to <code>not (disjoint (nhds x) (nhds y)) -&gt; x = y</code>.</p>",
        "id": 136060806,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1539885869
    },
    {
        "content": "<p>not constructively</p>",
        "id": 136061226,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539886310
    },
    {
        "content": "<p>(oops, wrong thread, this should be in <a href=\"#narrow/stream/116395-maths/subject/Hausdorffification/near/136026443\" title=\"#narrow/stream/116395-maths/subject/Hausdorffification/near/136026443\">Hausdorffification</a>)</p>",
        "id": 136061506,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539886562
    }
]