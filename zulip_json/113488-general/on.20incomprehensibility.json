[
    {
        "content": "<p>I managed to turn a screen-long argument (Theorem 4.3 <a href=\"https://ncatlab.org/nlab/show/relational+beta-module#conc\" target=\"_blank\" title=\"https://ncatlab.org/nlab/show/relational+beta-module#conc\">here</a>) which I don't really understand into 4 lines of lean which I also don't really understand--the last four lines below. (What I'm formalizing is not exactly the same thing as that page is talking about, but I think it's closely related.)</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">continuity</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">filter</span>\n\n<span class=\"kn\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">convergence</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ω</span> <span class=\"o\">:</span> <span class=\"n\">ultrafilter</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ω</span> <span class=\"o\">:</span> <span class=\"n\">ultrafilter</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span>\n     <span class=\"n\">r</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">ω</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">id</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">r</span> <span class=\"n\">n</span> <span class=\"n\">ω</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">r</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">pure</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">id</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">J</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ω</span> <span class=\"o\">:</span> <span class=\"n\">ultrafilter</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ξ</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ultrafilter</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n       <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span>\n     <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">r</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">ξ</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span> <span class=\"n\">n</span> <span class=\"n\">ω</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">r</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">ω</span><span class=\"bp\">.</span><span class=\"n\">bind</span> <span class=\"n\">ξ</span><span class=\"o\">)</span> <span class=\"n\">g</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n\n<span class=\"n\">def</span> <span class=\"n\">convergence_of_topology</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">convergence</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"n\">ω</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">u</span> <span class=\"err\">∈</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sets</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"bp\">|</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"err\">∈</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"err\">∈</span> <span class=\"n\">ω</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"bp\">.</span><span class=\"n\">sets</span><span class=\"o\">,</span>\n  <span class=\"n\">H</span> <span class=\"o\">:=</span> <span class=\"k\">assume</span> <span class=\"n\">n</span> <span class=\"n\">f</span> <span class=\"n\">ω</span> <span class=\"n\">a</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">I</span> <span class=\"o\">:=</span> <span class=\"k\">assume</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">pure_le_nhds</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">J</span> <span class=\"o\">:=</span> <span class=\"k\">assume</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"n\">ω</span> <span class=\"n\">ξ</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">a</span> <span class=\"bp\">⟨</span><span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"n\">h₂</span><span class=\"bp\">⟩</span> <span class=\"n\">u</span> <span class=\"n\">hu</span><span class=\"o\">,</span>\n    <span class=\"k\">let</span> <span class=\"bp\">⟨</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">vu</span><span class=\"o\">,</span> <span class=\"n\">vo</span><span class=\"o\">,</span> <span class=\"n\">av</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">mem_nhds_sets_iff</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">hu</span> <span class=\"k\">in</span>\n    <span class=\"n\">ω</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"bp\">.</span><span class=\"n\">sets_of_superset</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">mem_nhds_sets</span> <span class=\"n\">vo</span> <span class=\"n\">av</span><span class=\"o\">))</span>\n      <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"n\">hi</span><span class=\"o\">,</span> <span class=\"n\">h₁</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">mem_nhds_sets_iff</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"bp\">⟨</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">vu</span><span class=\"o\">,</span> <span class=\"n\">vo</span><span class=\"o\">,</span> <span class=\"n\">hi</span><span class=\"bp\">⟩</span><span class=\"o\">))</span> <span class=\"o\">}</span>\n</pre></div>",
        "id": 136149992,
        "sender_full_name": "Reid Barton",
        "timestamp": 1540000895
    },
    {
        "content": "<p>I don't really have any point here except to say that sometimes the original math proofs aren't really that much more comprehensible than mathlib-style golfed proofs.</p>",
        "id": 136150057,
        "sender_full_name": "Reid Barton",
        "timestamp": 1540001034
    },
    {
        "content": "<p>Also, I learned \"why\" this statement <code>J</code> is true (it's somehow exactly because the neighborhood filter of a point <code>a</code> is generated by sets <code>v</code> which are also neighborhoods of all their elements, namely the open sets), but I still don't really understand what the statement <em>says</em></p>",
        "id": 136150448,
        "sender_full_name": "Reid Barton",
        "timestamp": 1540001839
    },
    {
        "content": "<p>it might help if you gave things more than one letter names :)</p>",
        "id": 136152145,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1540005656
    }
]