[
    {
        "content": "<p>/poll</p>",
        "id": 225952529,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1613024240
    },
    {
        "content": "<p>Oh, would it be better to put the poll in #general?</p>",
        "id": 225952590,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1613024326
    },
    {
        "content": "<p>This topic was moved here from <a class=\"stream-topic\" data-stream-id=\"144837\" href=\"/#narrow/stream/144837-PR-reviews/topic/.234684\">#PR reviews &gt; #4684</a> by <span class=\"user-mention silent\" data-user-id=\"123965\">Bryan Gin-ge Chen</span></p>",
        "id": 225952667,
        "sender_full_name": "Notification Bot",
        "timestamp": 1613024443
    },
    {
        "content": "<p>Quoting from <a href=\"https://github.com/leanprover-community/mathlib/issues/4684\">#4684</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/--</span>\n<span class=\"sd\">We put a partial order on ℂ so that `z ≤ w` exactly if `w - z` is real and nonnegative.</span>\n<span class=\"sd\">Complex numbers with different imaginary parts are incomparable.</span>\n<span class=\"sd\">-/</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">partial_order</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">le</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">z</span> <span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">w</span> <span class=\"bp\">=</span> <span class=\"n\">z</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n<span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 225952680,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1613024471
    },
    {
        "content": "<p>Are there any other candidates for which we might want to use results from the order library?</p>",
        "id": 225953960,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613026177
    },
    {
        "content": "<p>I am not sure whether this is relevant or not, but there are partial orderings on ℂ, different than the one above that appear in the literature.  For instance, when talking about Bridgeland stability conditions, (partially) ordering complex numbers by a choice of argument appears often.  One example, is on page 2 of the paper below, with even an explanatory picture:</p>\n<p><a href=\"https://www.maths.ed.ac.uk/~abayer/dc-lecture-notes.pdf\">https://www.maths.ed.ac.uk/~abayer/dc-lecture-notes.pdf</a></p>",
        "id": 225954414,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1613026708
    },
    {
        "content": "<p>Well it's not just a matter of whether there is any better order to put on the complexes. <em>Not</em> putting an order on the complexes should also be an option. Sometimes I think that we're undermining the benefits of type theory when we make everything apply to everything like this; I'm reminded of the incident where <code>nat</code> had a <code>has_coe_fn</code> to <code>nat -&gt; nat</code></p>",
        "id": 225955277,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613027717
    },
    {
        "content": "<p>My rationale is that if you ask a mathematician \"are the complexes ordered\" the answer you will get is \"no\"</p>",
        "id": 225955358,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613027813
    },
    {
        "content": "<p>I guess my ancient functional analysis origins are showing. I would have said \"yes\". :-)</p>",
        "id": 225955436,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1613027886
    },
    {
        "content": "<p>I have seen this particular order before, I think in coq or mizar, but it seems more like a formalization trick than anything else</p>",
        "id": 225955448,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613027902
    },
    {
        "content": "<p>It's the standard ordering on any Banach <code>*</code>-algebra or C*-algebra, specialised to the smallest example of such.</p>",
        "id": 225955464,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1613027937
    },
    {
        "content": "<p>is there a wiki link for this?</p>",
        "id": 225955477,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613027961
    },
    {
        "content": "<p>Just to clarify: what I meant by my comment is that I personally would not consider the complex numbers to be ordered, but I am happy with someone saying \"for this section, I am going to order the complex numbers as follows: [...]\".  Whether they use the \"lexicographic-like\" stuff with the reals, arguments, norms, or whatever else is less relevant (to me!).</p>\n<p>So, from this point of view, I believe that my position is close to Mario's.</p>",
        "id": 225955544,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1613028020
    },
    {
        "content": "<p>wikipedia does indeed say the ordering is only on the self-adjoint elements</p>",
        "id": 225955546,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1613028022
    },
    {
        "content": "<p><a href=\"https://en.wikipedia.org/wiki/C*-algebra#Structure_of_C*-algebras\">https://en.wikipedia.org/wiki/C*-algebra#Structure_of_C*-algebras</a></p>",
        "id": 225955651,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1613028157
    },
    {
        "content": "<p>Okay, I'll agree that extending the partial order, rather than just the self-adjoint elements, is not particularly important or useful.</p>",
        "id": 225955671,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1613028191
    },
    {
        "content": "<p>It's useful <em>for the sake of formalisation</em>, because you don't need to carry around witnesses of self-adjointness when talking about the ordering of self-adjoint elements.</p>",
        "id": 225955695,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1613028232
    },
    {
        "content": "<p>well that should be some kind of subspace. Of course this is pretty explicit for <code>real</code></p>",
        "id": 225955872,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613028412
    },
    {
        "content": "<p>That said I'm sympathetic to the formalization argument and I won't fight too hard on this. I just want to double check that this isn't another division by zero kind of thing that will require us to defend the choice to aghast mainstream mathematicians all the time</p>",
        "id": 225956095,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613028615
    },
    {
        "content": "<p>or maybe nat subtraction is a better parallel</p>",
        "id": 225956130,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613028671
    },
    {
        "content": "<p>I'm pretty sure this is no where near as aghasting as monus.</p>",
        "id": 225958754,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1613030998
    },
    {
        "content": "<p>Are we talking about making this a global instance? I think most mathematicians expect C not to have an order</p>",
        "id": 225960534,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613032364
    },
    {
        "content": "<p>Ok! How should I hide it away?</p>",
        "id": 225961968,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1613033370
    },
    {
        "content": "<p>Like Bryan said, another option is to have this be an instance in a locale. That means you would say <code>open_locale complex_order</code> or something like that and it would add <code>local attribute [instance] complex.partial_order</code> and so on</p>",
        "id": 225962118,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613033492
    },
    {
        "content": "<p>Done!</p>",
        "id": 225968736,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1613037479
    },
    {
        "content": "<p>Reviving this question briefly: someone pointed out to me recently that it is completely standard to write <code>0 ≤ z</code> in informal mathematics, when <code>z</code> is a complex number to mean \"z is real and non-negative\".</p>\n<p>When the <code>partial_order ℂ</code> discussed above is available, it is possible to do exactly this in Lean too.</p>",
        "id": 227553851,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1614147937
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> do you have particular reasons against using a <code>locale</code>?</p>",
        "id": 227554713,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614148663
    },
    {
        "content": "<p>Doesn't that give us the best of both worlds?</p>",
        "id": 227554725,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614148674
    },
    {
        "content": "<p>It's also possible to write <code>I &lt;= z</code> with that partial order, and I'm not sure what this actually means would be in the top 3 guesses if you showed this to a random mathematician</p>",
        "id": 227555976,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614149557
    },
    {
        "content": "<p>(that said, we are of course no strangers to definitions that make sense in a limited range and give pseudo-sensible results out of range)</p>",
        "id": 227556118,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614149661
    },
    {
        "content": "<p>Right, we should just define <code>I &lt;= z</code> to mean <code>z = 37</code> whenever <code>z</code> is non-real <span aria-label=\"stuck out tongue wink\" class=\"emoji emoji-1f61c\" role=\"img\" title=\"stuck out tongue wink\">:stuck_out_tongue_wink:</span>   /s</p>",
        "id": 227556272,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614149790
    },
    {
        "content": "<p>It's even pretty sensible: I &lt;= z means  z-I is a positive complex number, ie a positive real.</p>",
        "id": 227559738,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1614152491
    },
    {
        "content": "<p>I don't have my heart set on making this instance global. I just wanted to say that I'd realised people use it naturally.</p>",
        "id": 227559878,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1614152572
    },
    {
        "content": "<p>ooh, ok <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 227560706,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614153141
    },
    {
        "content": "<p>Ah great, then we can finally write <code>x ≤ 0 ∨ 0 ≤ x</code> instead of <code>im x = 0</code>.</p>",
        "id": 227563578,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1614155073
    },
    {
        "content": "<p>I would advise against making local(ized) instances for notation classes.  This might get confusing because the pretty-printer will always print it as <code>x ≤ 0</code>, but Lean can't parse <code>x ≤ 0</code> unless the locale is opened.</p>",
        "id": 227563751,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1614155187
    },
    {
        "content": "<p>In a similar vein, I think it would be just as confusing if we had multiple instances for <code>has_le ℂ</code>.</p>",
        "id": 227563780,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1614155216
    },
    {
        "content": "<p>I am not convinced that this type class is a good idea.  But if we have it, I think it should be global.</p>",
        "id": 227563949,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1614155322
    },
    {
        "content": "<p>In Scott's example you could just say <code>(z : ℝ) (h : 0 ≤ z)</code> or even <code>(z : ℝ≥0)</code> instead of <code>(z : ℂ) (h : 0 ≤ z)</code> and then use coercions.  And the coercion allows simp lemmas to trigger, while the hypothesis doesn't (as easily).</p>",
        "id": 227564178,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1614155436
    },
    {
        "content": "<p>Following up on Gabriel's comment, the Riemann hypothesis becomes a statement about zeros of the ζ-function lying on the line</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">{</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"bp\">|</span> <span class=\"n\">I</span> <span class=\"bp\">*</span> <span class=\"n\">s</span> <span class=\"bp\">≤</span> <span class=\"n\">I</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">∨</span> <span class=\"n\">I</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">I</span> <span class=\"bp\">*</span> <span class=\"n\">s</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>i.e.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">ζ</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">I</span> <span class=\"bp\">*</span> <span class=\"n\">s</span> <span class=\"bp\">≤</span> <span class=\"n\">I</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">∨</span> <span class=\"n\">I</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">I</span> <span class=\"bp\">*</span> <span class=\"n\">s</span>\n</code></pre></div>",
        "id": 227564731,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1614155761
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 227565461,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1614156125
    },
    {
        "content": "<p>I could be wrong: I had to change it a few times to get my head around the right condition...  ahahah</p>",
        "id": 227565565,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1614156174
    },
    {
        "content": "<p>Second try (this ≤ is really hard to interpret): is this a very convoluted way of saying <code>re s = 1/2</code>?</p>",
        "id": 227565614,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1614156207
    },
    {
        "content": "<p>I was trying to exploit </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">s</span> <span class=\"bp\">∨</span> <span class=\"n\">s</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"bp\">↔</span> <span class=\"n\">im</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">im</span> <span class=\"n\">s</span>\n</code></pre></div>",
        "id": 227565729,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1614156265
    },
    {
        "content": "<p>Gabriel, indeed, that is what I was trying to achieve!  Ahaha</p>",
        "id": 227565747,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1614156284
    },
    {
        "content": "<p>I view this partial order as uncountably many incomparable orders, one for each imaginary part.  On a given line with a fixed imaginary part, you simply compare the real parts.  This is what it is, right?</p>",
        "id": 227565927,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1614156378
    },
    {
        "content": "<p>yes</p>",
        "id": 227565933,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614156385
    },
    {
        "content": "<p>To be honest, I am not thrilled about this order, but I am also unlikely to actually ever seriously use an order on ℂ, so I am happy to go with whatever makes formalizing simpler.</p>",
        "id": 227566018,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1614156446
    },
    {
        "content": "<p>There is another order on the complexes that I have used before, namely lexicographic order of <code>(re z, im z)</code></p>",
        "id": 227566161,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614156510
    },
    {
        "content": "<p>which has the advantage of being total</p>",
        "id": 227566194,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614156537
    },
    {
        "content": "<p>The one in question is closer to lex on <code>(im z, re z)</code>, except that the order on <code>im</code> is inexistent: you can only compare something with itself.</p>",
        "id": 227566268,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1614156592
    },
    {
        "content": "<p>It coincides with both</p>",
        "id": 227566333,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614156609
    },
    {
        "content": "<p>The given partial order is a subset of both total orders <code>(re z, im z)</code> and <code>(im z, re z)</code></p>",
        "id": 227566390,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614156640
    },
    {
        "content": "<p>Yes, you are right: this is so confusing for me!  <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 227566436,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1614156684
    },
    {
        "content": "<p>Personally it makes more sense to me to sort the numbers <code>-1, -I, 0, I, 1</code> in that order</p>",
        "id": 227566571,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614156770
    },
    {
        "content": "<p>like if I had a whole random collection of complex numbers and wanted to arrange them lex order seems the easiest to follow</p>",
        "id": 227566637,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614156817
    },
    {
        "content": "<p>My tutees just taught me the \"jungle river metric\" on <code>ℝ^2</code>, which has similar features (although it does allow you to change the x coordinate, but at a cost).<br>\n(You should view the x-axis as a river and you can only travel vertically or along the river, so to go from (a,b) to (c,d) you first go vertically to the x-axis, then you slide on the river and finally you move vertically again)</p>",
        "id": 227566761,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1614156888
    }
]