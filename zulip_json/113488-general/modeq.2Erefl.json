[
    {
        "content": "<p><code>@[refl] protected theorem refl (a : ℕ) : a ≡ a [MOD n] := @rfl _ _</code></p>",
        "id": 125911585,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525120294
    },
    {
        "content": "<p>looks funny because <code>rfl</code> unfolds to exactly <code>@rfl _ _</code></p>",
        "id": 125911591,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525120311
    },
    {
        "content": "<p>but it's one of those situations where you can't prove the result by the exact three letter combination <code>rfl</code></p>",
        "id": 125911637,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525120333
    },
    {
        "content": "<p>because you get the error <code>not a rfl-lemma, even though marked as rfl</code></p>",
        "id": 125911646,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525120357
    },
    {
        "content": "<p>do you know what the <code>@[refl]</code> <code>@[symm]</code> <code>@[trans]</code> are for (as a sidenote)?</p>",
        "id": 125911647,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525120358
    },
    {
        "content": "<p>but the funny thing is, it is tagged <code>[refl]</code> anyway</p>",
        "id": 125911658,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525120377
    },
    {
        "content": "<p>what is the difference between being <code>a rfl-lemma</code> and being tagged with <code>@[refl]</code>?</p>",
        "id": 125911673,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525120402
    },
    {
        "content": "<p>Kenny here are some ramblings</p>",
        "id": 125911678,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525120415
    },
    {
        "content": "<p>they are for the reflexivity symmetry transitivty tactics respectively</p>",
        "id": 125911683,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525120423
    },
    {
        "content": "<p>(refl = reflexivity)</p>",
        "id": 125911686,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525120430
    },
    {
        "content": "<p>If you are in calc mode then calc will use any lemma tagged <code>trans</code></p>",
        "id": 125911688,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525120436
    },
    {
        "content": "<p>that also</p>",
        "id": 125911732,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525120451
    },
    {
        "content": "<p>to concatenate <code>a R b</code> and <code>b R c</code></p>",
        "id": 125911735,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525120458
    },
    {
        "content": "<p>or even <code>b S c</code></p>",
        "id": 125911738,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525120467
    },
    {
        "content": "<p>le_refl is refl but not rfl</p>",
        "id": 125911741,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1525120471
    },
    {
        "content": "<p><code>rfl</code>-lemmas show definitional equalities (i.e. <code>a = b</code> where <code>a</code> and <code>b</code> are def-eq).  The three letters <code>rfl</code> are essentially hardcoded into the parser for this purpose.  The reason is that typically lemmas are completely independent of their proofs, (well-founded recursion aside) it should not matter what proof you use for a lemma.  However whether an equality is proved by definitional equality has important consequences: for example, <code>dsimp</code> can only use definitional equalities.  Hence we have an easy syntactic criterion to determine whether a lemma is proven by definitional equality.</p>",
        "id": 125934512,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1525162033
    }
]