[
    {
        "content": "<p>Is it possible to do something like this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">my_structure</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">prop_a</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">prop_b</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n     <span class=\"n\">rw</span> <span class=\"n\">some_stuff</span><span class=\"o\">,</span>\n     <span class=\"n\">rw</span> <span class=\"n\">prop_a</span><span class=\"o\">,</span> <span class=\"c1\">-- I want to reuse my proof of a</span>\n     <span class=\"n\">sorry</span>\n  <span class=\"kd\">end</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>Obviously right now <code>prop_a</code> doesn't resolve. Currently, my options look to be:</p>\n<ul>\n<li>Use a <code>private</code> definition to provide my definition of <code>f</code> and proof of<code>prop_a</code> first, and then put it in the struct later</li>\n<li>Do something horrible with <code>let in</code></li>\n</ul>",
        "id": 216253405,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1605033105
    },
    {
        "content": "<p>I guess that lean doesn't want to be bothered with figuring out whether proofs refer to each other in a cyclic manner...</p>",
        "id": 216253586,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1605033187
    },
    {
        "content": "<p>I'd be happy with it requiring source order</p>",
        "id": 216253661,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1605033209
    },
    {
        "content": "<p>I don't think that really makes sense unfortunately.</p>",
        "id": 216253702,
        "sender_full_name": "Reid Barton",
        "timestamp": 1605033231
    },
    {
        "content": "<p>Or in most cases, probably even struct field order</p>",
        "id": 216253708,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1605033234
    },
    {
        "content": "<p>Like, what term do you expect it to produce</p>",
        "id": 216253811,
        "sender_full_name": "Reid Barton",
        "timestamp": 1605033264
    },
    {
        "content": "<p>It has to produce something you could write by hand anyways</p>",
        "id": 216253841,
        "sender_full_name": "Reid Barton",
        "timestamp": 1605033276
    },
    {
        "content": "<p>I guess I'd want it to just inline the term it already produced</p>",
        "id": 216253886,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1605033300
    },
    {
        "content": "<p>Is using <code>private</code> the right thing to do here?</p>",
        "id": 216254556,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1605033600
    },
    {
        "content": "<p>I think I would go for that option, yes.</p>",
        "id": 216254677,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1605033633
    },
    {
        "content": "<p>The <code>let in</code> is not really horrible, but I understand why you call it horrible <span aria-label=\"rolling eyes\" class=\"emoji emoji-1f644\" role=\"img\" title=\"rolling eyes\">:rolling_eyes:</span> <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span> <span aria-label=\"oops\" class=\"emoji emoji-1f643\" role=\"img\" title=\"oops\">:oops:</span> <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 216254796,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1605033680
    },
    {
        "content": "<p>Another possibility is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">my_structure</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"o\">{</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"bp\">...</span><span class=\"o\">],</span> <span class=\"bp\">..</span> <span class=\"o\">},</span>\n  <span class=\"n\">all_goals</span> <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"n\">prop_a</span> <span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"bp\">...</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"bp\">...</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">prop_a</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">some_stuff</span><span class=\"o\">,</span> <span class=\"n\">prop_a</span><span class=\"o\">],</span> <span class=\"o\">[</span><span class=\"bp\">...</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 216254884,
        "sender_full_name": "Reid Barton",
        "timestamp": 1605033715
    },
    {
        "content": "<p><code>let in</code> is bad, but I think <code>have</code> is less bad, so that's another possible option</p>",
        "id": 216254955,
        "sender_full_name": "Reid Barton",
        "timestamp": 1605033731
    },
    {
        "content": "<p>I guess the have is weird if the f is something complicated that appears in the type of prop_a</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">my_structure</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">prop_a</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">prop_b</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">my_structure</span> <span class=\"o\">:=</span> <span class=\"k\">have</span> <span class=\"n\">prop_a</span> <span class=\"o\">:</span> <span class=\"n\">id</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n<span class=\"o\">{</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">id</span><span class=\"o\">,</span>\n  <span class=\"n\">prop_a</span> <span class=\"o\">:=</span> <span class=\"n\">prop_a</span><span class=\"o\">,</span>\n  <span class=\"n\">prop_b</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n     <span class=\"n\">rw</span> <span class=\"n\">prop_a</span><span class=\"o\">,</span> <span class=\"c1\">-- I want to reuse my proof of a</span>\n  <span class=\"kd\">end</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 216255037,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1605033768
    },
    {
        "content": "<p>The <code>have</code> is still probably worse than just writing a separate lemma</p>",
        "id": 216255328,
        "sender_full_name": "Reid Barton",
        "timestamp": 1605033859
    },
    {
        "content": "<p>Do private lemmas appear in the online docs?</p>",
        "id": 216255376,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1605033888
    },
    {
        "content": "<p>if you name it like blah_blah_aux then people will know not to use it</p>",
        "id": 216255492,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1605033942
    },
    {
        "content": "<p>Right, but my hope was the <code>private</code> keyword would do something sensible</p>",
        "id": 216255622,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1605033971
    },
    {
        "content": "<p>Normally <code>private</code> is not recommended but if it's literally a field of a structure that you provide anyways, I guess it's okay</p>",
        "id": 216255671,
        "sender_full_name": "Reid Barton",
        "timestamp": 1605033999
    },
    {
        "content": "<p>o rly. why isn't private recommended?</p>",
        "id": 216255715,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1605034021
    },
    {
        "content": "<p>Because 95% of the time, it turns out that someone else has a use for your lemma</p>",
        "id": 216255748,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1605034039
    },
    {
        "content": "<p>So they will be happy if they can use it outside the file where it's defined.</p>",
        "id": 216255796,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1605034072
    },
    {
        "content": "<p>seems strange to me based on the analogy to other programming, but I guess there is basically never a reason to refactor a lean lemma to \"change its behavior\", because it has no behavior, so there isn't really any need to say like, don't depend on this because its behavior may change</p>",
        "id": 216256373,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1605034285
    },
    {
        "content": "<p>It's not impossible, but you'll need to modify the C++ code for this.</p>",
        "id": 216256484,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1605034327
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"238605\">Kevin Lacker</span> <a href=\"#narrow/stream/113488-general/topic/Using.20structure.20fields.20as.20they're.20defined/near/216256373\">said</a>:</p>\n<blockquote>\n<p>seems strange to me based on the analogy to other programming</p>\n</blockquote>\n<p>I agree there could theoretically be a world in which a module has a public API which is stable and an implementation which is not, but mathlib is nowhere near that point and it seems difficult in practice because Lean really likes to unfold definitions.</p>",
        "id": 216256993,
        "sender_full_name": "Reid Barton",
        "timestamp": 1605034548
    },
    {
        "content": "<p>I've recently marked some things private that were used in setting up a bundled homomorphism. In that case, I think it's justified, because everything this scaffolding achieves can be done using the API of bundled morphisms as well, once the bundled hom is available.</p>",
        "id": 216257104,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1605034578
    },
    {
        "content": "<p>Right, the use case you describe is exactly mine - all the lemmas are going to end up bundled in a larger structure, exposing them under two different names is just confusing</p>",
        "id": 216257888,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1605034878
    },
    {
        "content": "<p>I would recommend something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">my_structure</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">prop_a</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">prop_b</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">my_structure</span> <span class=\"o\">:=</span>\n<span class=\"k\">let</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">id</span> <span class=\"k\">in</span>\n<span class=\"k\">have</span> <span class=\"n\">prop_a</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n<span class=\"o\">{</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"n\">prop_a</span> <span class=\"o\">:=</span> <span class=\"n\">prop_a</span><span class=\"o\">,</span>\n  <span class=\"n\">prop_b</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n     <span class=\"n\">rw</span> <span class=\"n\">prop_a</span><span class=\"o\">,</span> <span class=\"c1\">-- I want to reuse my proof of a</span>\n  <span class=\"kd\">end</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 216261531,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605036421
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"238605\">Kevin Lacker</span> <a href=\"#narrow/stream/113488-general/topic/Using.20structure.20fields.20as.20they're.20defined/near/216255715\">said</a>:</p>\n<blockquote>\n<p>o rly. why isn't private recommended?</p>\n</blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/Using.20structure.20fields.20as.20they're.20defined/near/216255748\">said</a>:</p>\n<blockquote>\n<p>Because 95% of the time, it turns out that someone else has a use for your lemma</p>\n</blockquote>\n<p><a href=\"https://github.com/leanprover-community/mathlib/blob/a31a1004aee726f8d06ca88c34c0977e68c4ed87/archive/imo/imo1969_q1.lean#L44\">Exhibit A</a>, where Kevin Lacker uses a \"private\" lemma from norm_num</p>",
        "id": 216262140,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605036693
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"238605\">Kevin Lacker</span> <a href=\"#narrow/stream/113488-general/topic/Using.20structure.20fields.20as.20they're.20defined/near/216256373\">said</a>:</p>\n<blockquote>\n<p>seems strange to me based on the analogy to other programming, but I guess there is basically never a reason to refactor a lean lemma to \"change its behavior\", because it has no behavior, so there isn't really any need to say like, don't depend on this because its behavior may change</p>\n</blockquote>\n<p>Actually this is a thing. Definitions do change their behavior, either when the definition changes to something defeq, or something which is equal but not defeq, or something which is really different but only differs in \"out of bounds\" areas that most theorems don't care about, or type of an intermediate definition changes and the API layer needs to be reworked but theorems above that don't have to change.</p>",
        "id": 216262638,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605036898
    },
    {
        "content": "<p>We usually call it \"refactoring\"</p>",
        "id": 216262712,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605036935
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/Using.20structure.20fields.20as.20they're.20defined/near/216262140\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"238605\">Kevin Lacker</span> <a href=\"#narrow/stream/113488-general/topic/Using.20structure.20fields.20as.20they're.20defined/near/216255715\">said</a>:</p>\n<blockquote>\n<p>o rly. why isn't private recommended?</p>\n</blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/Using.20structure.20fields.20as.20they're.20defined/near/216255748\">said</a>:</p>\n<blockquote>\n<p>Because 95% of the time, it turns out that someone else has a use for your lemma</p>\n</blockquote>\n<p><a href=\"https://github.com/leanprover-community/mathlib/blob/a31a1004aee726f8d06ca88c34c0977e68c4ed87/archive/imo/imo1969_q1.lean#L44\">Exhibit A</a>, where Kevin Lacker uses a \"private\" lemma from norm_num</p>\n</blockquote>\n<p>hey, i didn't <em>want</em> to use a private lemma from norm_num, some reviewer suggested it because it made the code 1 token shorter</p>",
        "id": 216275263,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1605042778
    },
    {
        "content": "<p>Aren't structures implemented as sigma types? The fields should have a linear order on them so no cyclic reference is possible. In fact, when defining the type of a structure it is allowed to use previously defined fields, and it's odd to me that you can't do so when exhibiting a term of the type.</p>",
        "id": 256173519,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1633406412
    },
    {
        "content": "<p>It's not clear to me what you are responding to or what you mean. Do you have an example? Structures are just an extension of sigma types, cyclic reference is impossible, and fields can have types that refer to previous fields</p>",
        "id": 256174419,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1633407097
    },
    {
        "content": "<p>This was the \"cyclic\" concern:<br>\n<span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/Using.20structure.20fields.20as.20they're.20defined/near/216253586\">said</a>:</p>\n<blockquote>\n<p>I guess that lean doesn't want to be bothered with figuring out whether proofs refer to each other in a cyclic manner...</p>\n</blockquote>",
        "id": 256174561,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1633407217
    },
    {
        "content": "<p>I'm just complaining as I find it inconvenient.</p>",
        "id": 256174580,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1633407235
    },
    {
        "content": "<p>The specific situation is that I want to use fac' when proving uniq' in is_limit: <a href=\"https://leanprover-community.github.io/mathlib_docs/category_theory/limits/is_limit.html#category_theory.limits.is_limit\">https://leanprover-community.github.io/mathlib_docs/category_theory/limits/is_limit.html#category_theory.limits.is_limit</a></p>",
        "id": 256174698,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1633407302
    },
    {
        "content": "<p>Just write a preliminary lemma with the fact you want to use twice. (Or a <code>let X := Y in ...</code> statement.)</p>",
        "id": 256174762,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633407345
    },
    {
        "content": "<p>when proving fac' I can just intro/lambda without specifying the types, but when writing a lemma I have to write the types, and can't just write the term. Just seems unnecessarily verbose to me.</p>",
        "id": 256174915,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1633407472
    },
    {
        "content": "<p>Have you seen <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#extract_goal\">tactic#extract_goal</a>?</p>",
        "id": 256175088,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633407601
    },
    {
        "content": "<p>I've seen that but my issue isn't with difficulty writing down the lemma but the space the lemma would occupy. My reaction to inability to refer to the prior field is not to replicate the proof or extract a lemma, but to find an alternative proof. I've tried <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#abstract\">tactic#abstract</a> before but nothing happened. Maybe time to give it a try again.<br>\n(Maybe nothing appears in the local context but I can use it as a global definition/theorem?)</p>",
        "id": 256175495,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1633407883
    },
    {
        "content": "<p>There is a straightforward syntactic modification that will make the proof available later. You don't have to write the type</p>",
        "id": 256175747,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1633408071
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/Using.20structure.20fields.20as.20they're.20defined/near/256175747\">said</a>:</p>\n<blockquote>\n<p>There is a straightforward syntactic modification that will make the proof available later. You don't have to write the type</p>\n</blockquote>\n<p>Not sure if this the way you're talking about, but I managed to make <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#abstract\">tactic#abstract</a> work! If the theorem you're proving is named <code>foo</code>, you can <code>abstract goal { /- proof of goal -/ }</code> in tactic mode to extract the first goal to a lemma, and then you can refer to the lemma using <code>foo.goal</code> either within the same proof, or later in the same file. The prefix <code>foo.</code> is what I was missing, and isn't mentioned in the documentation.</p>",
        "id": 256187005,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1633417025
    },
    {
        "content": "<p>I was talking about using <code>let</code>, but that works too</p>",
        "id": 256334068,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1633475891
    }
]