[
    {
        "content": "<p>I am stuck on the following goal for a test lemma:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">measurable_space</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"n\">probability_measure</span> <span class=\"n\">bool</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">true</span>\n<span class=\"err\">⊢</span> <span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"n\">integral</span> <span class=\"o\">(</span><span class=\"n\">D</span><span class=\"bp\">.</span><span class=\"n\">to_measure</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">bool</span><span class=\"o\">),</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n</pre></div>\n\n\n<p>Where I have extended the <code>measure</code> structure with the extra field that the measure of <code>univ</code> is 1. Is there a lemma which says I can rewrite the LHS as the measure of the whole set?</p>",
        "id": 165921962,
        "sender_full_name": "Koundinya Vajjha",
        "timestamp": 1558115841
    },
    {
        "content": "<p>I can't help you, but it's wonderful to see that people are now trying to do differentiation and integration. Very little has happened in this area since 2017, until recently, when things seem to be slowly taking off. An attainable (in my opinion) goal is to have Lean's maths library knowing essentially all of a pure mathematics degree course within the next few years, and this stuff is absolutely essential.</p>",
        "id": 165922409,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1558116171
    },
    {
        "content": "<p>There doesn't seem to be much about <code>measure.integral</code> yet. Also it's generally presumed that the measure of univ is infinite, so there isn't much about stuff like integrable constant functions. Presumably that's part of the focus of your <code>probability_measure</code> work. <code>measure.integral</code> is defined in terms of <code>lintegral</code>, which has the theorem <code>simple_func.lintegral_eq_integral</code>. Show that the constant function is a simple function; it follows that the integral of <code>a</code> is <code>a * measure univ = a</code> for a probability measure.</p>",
        "id": 165923265,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558116818
    },
    {
        "content": "<p><code>apply simple_func.lintegral_eq_integral</code> is giving me a deterministic timeout. I probably shouldn't have done this, but are there any general reasons behind an <code>apply</code> giving  deterministic timeouts?</p>",
        "id": 165926878,
        "sender_full_name": "Koundinya Vajjha",
        "timestamp": 1558119317
    },
    {
        "content": "<p>Can you post a complete working example?</p>",
        "id": 165927043,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1558119451
    },
    {
        "content": "<p>It might be trying to prove that two types are defeq when they're not, it might be user error, it might be that two types are defeq but it's very hard to prove, it might be fixable by changing the timeout parameter (but the point of the -T50000 thread is that we'd rather be changing it the other way ;-) )</p>",
        "id": 165927196,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1558119551
    },
    {
        "content": "<p>Here a complete working example: </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">measure_theory</span><span class=\"bp\">.</span><span class=\"n\">giry_monad</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">set</span> <span class=\"n\">measure_theory</span> <span class=\"n\">measurable_space</span>\n\n<span class=\"kn\">infixl</span> <span class=\"bp\">`&gt;&gt;=</span><span class=\"err\">ₐ</span><span class=\"bp\">`</span> <span class=\"o\">:</span><span class=\"mi\">55</span> <span class=\"o\">:=</span> <span class=\"n\">measure_theory</span><span class=\"bp\">.</span><span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"n\">bind</span>\n<span class=\"n\">local</span> <span class=\"kn\">notation</span> <span class=\"bp\">`</span><span class=\"n\">do</span><span class=\"bp\">`</span> <span class=\"n\">binders</span> <span class=\"bp\">`</span><span class=\"err\">←ₐ</span><span class=\"bp\">`</span> <span class=\"n\">m</span> <span class=\"bp\">`;`</span> <span class=\"n\">t</span><span class=\"o\">:(</span><span class=\"n\">scoped</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"bp\">&gt;&gt;=</span><span class=\"err\">ₐ</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">t</span>\n<span class=\"n\">local</span> <span class=\"kn\">notation</span> <span class=\"bp\">`</span><span class=\"n\">ret</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">measure_theory</span><span class=\"bp\">.</span><span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"n\">dirac</span>\n\n<span class=\"kn\">variable</span> <span class=\"o\">[</span><span class=\"n\">measurable_space</span> <span class=\"bp\">ℕ</span><span class=\"o\">]</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">probability_measure</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">measurable_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"kn\">extends</span> <span class=\"n\">measure_theory</span><span class=\"bp\">.</span><span class=\"n\">measure</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">is_one</span> <span class=\"o\">:</span> <span class=\"n\">measure_of</span> <span class=\"n\">univ</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">def</span> <span class=\"n\">double</span><span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">:</span> <span class=\"n\">probability_measure</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">measure</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"n\">x</span> <span class=\"err\">←ₐ</span> <span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"n\">to_measure</span><span class=\"bp\">;</span>\n<span class=\"n\">ret</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">even</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">k</span><span class=\"o\">}</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">test</span><span class=\"o\">:</span>\n<span class=\"bp\">∀</span> <span class=\"n\">m</span><span class=\"o\">:</span> <span class=\"n\">probability_measure</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">m&#39;</span><span class=\"o\">:</span> <span class=\"n\">measure</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">m&#39;</span> <span class=\"bp\">=</span> <span class=\"n\">double</span><span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">m&#39;</span><span class=\"o\">(</span><span class=\"n\">even</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intros</span><span class=\"o\">,</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">even</span><span class=\"o\">,</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">double</span> <span class=\"n\">at</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">rewrite</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">clear</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">rewrite</span> <span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"n\">bind_apply</span><span class=\"o\">,</span>\n\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>I'm afraid I don't know if this is even provable with the current technology...</p>",
        "id": 165934792,
        "sender_full_name": "Koundinya Vajjha",
        "timestamp": 1558125610
    },
    {
        "content": "<p>This is provable, but it looks like one of those things I don't <em>want</em> to prove. As in, I challenge the premise that this theorem matters. It reminds me of Kevin's M1F problems</p>",
        "id": 165935050,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558125837
    },
    {
        "content": "<p>Let's just say it matters very much to me.</p>",
        "id": 165935174,
        "sender_full_name": "Koundinya Vajjha",
        "timestamp": 1558125918
    },
    {
        "content": "<p>Step back. What do you want to say?</p>",
        "id": 165935193,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558125938
    },
    {
        "content": "<p>maybe this isn't the easiest way to formalize whatever the real goal is</p>",
        "id": 165935216,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558125961
    },
    {
        "content": "<p>Basically I want to <em>reason</em> about the measure which is returned by the <code>do x &lt;- D; return(f(x)</code> part of the Giry monad.</p>",
        "id": 165935304,
        "sender_full_name": "Koundinya Vajjha",
        "timestamp": 1558126010
    },
    {
        "content": "<p>first of all, bind return is map</p>",
        "id": 165935339,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558126032
    },
    {
        "content": "<p>This generalizes in a few ways. The double function doesn't matter, replace it with an arbitrary function A -&gt; B</p>",
        "id": 165935370,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558126068
    },
    {
        "content": "<p>the measure takes values in the image of the function</p>",
        "id": 165935426,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558126084
    },
    {
        "content": "<p>Yes. Well maybe this particular example is too hard.</p>",
        "id": 165935456,
        "sender_full_name": "Koundinya Vajjha",
        "timestamp": 1558126117
    },
    {
        "content": "<p>Examples are always harder than general theorems</p>",
        "id": 165935464,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558126131
    },
    {
        "content": "<p>they add additional irrelevant stuff</p>",
        "id": 165935494,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558126148
    },
    {
        "content": "<blockquote>\n<p>Basically I want to <em>reason</em> about the measure which is returned by the <code>do x &lt;- D; return(f(x)</code> part of the Giry monad.</p>\n</blockquote>\n<p>In particular, I want to characterize the measure zero sets of this measure.</p>",
        "id": 165935550,
        "sender_full_name": "Koundinya Vajjha",
        "timestamp": 1558126198
    },
    {
        "content": "<p>It's not hard to prove your theorem using <code>measure.map_apply</code> once you have the monad laws</p>",
        "id": 165935801,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558126370
    },
    {
        "content": "<p>Okay this is the most general I can make it</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">test</span> <span class=\"o\">[</span><span class=\"n\">measurable_space</span> <span class=\"n\">α</span><span class=\"o\">][</span><span class=\"n\">measurable_space</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"n\">measure</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">is_measurable</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"n\">measure_theory</span><span class=\"bp\">.</span><span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"n\">bind</span> <span class=\"n\">D</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">measure_theory</span><span class=\"bp\">.</span><span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"n\">dirac</span> <span class=\"err\">$</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"n\">D</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>",
        "id": 165935865,
        "sender_full_name": "Koundinya Vajjha",
        "timestamp": 1558126420
    },
    {
        "content": "<p>the thing on the right is <code>D.map p A</code></p>",
        "id": 165935939,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558126455
    },
    {
        "content": "<p>so this is the monad law</p>",
        "id": 165935946,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558126460
    },
    {
        "content": "<p>That worked. (Btw it's failing to apply the <code>coe_fn</code> coercion. I need to explicitly say <code>(D.map p).measure_of A</code>.</p>",
        "id": 165936324,
        "sender_full_name": "Koundinya Vajjha",
        "timestamp": 1558126769
    },
    {
        "content": "<p>you can use <code>(D.map p : function type) A</code></p>",
        "id": 165936344,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558126798
    },
    {
        "content": "<p>Still stuck on essentially the same goal as the first case. :(</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"err\">⊢</span><span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"n\">integral</span> <span class=\"n\">D</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"err\">⨆</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"err\">⇑</span><span class=\"n\">D</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">⁻¹</span><span class=\"err\">&#39;</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>If I understand you correctly,  there surely isn't a purely abstract proof using just the monad laws, is there? You <em>have</em> to use the Giry monad bind and return somewhere to prove this right?</p>",
        "id": 165942547,
        "sender_full_name": "Koundinya Vajjha",
        "timestamp": 1558132917
    },
    {
        "content": "<p>there should be an abstract proof</p>",
        "id": 165943387,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558133867
    },
    {
        "content": "<p>using lemmas about Giry bind and return</p>",
        "id": 165943436,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558133887
    },
    {
        "content": "<p>which are the same as the usual monad laws</p>",
        "id": 165943444,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558133899
    },
    {
        "content": "<p>Sorry I just can't see how that can be..</p>",
        "id": 165950357,
        "sender_full_name": "Koundinya Vajjha",
        "timestamp": 1558142944
    },
    {
        "content": "<p>Can you sketch a proof?</p>",
        "id": 165950367,
        "sender_full_name": "Koundinya Vajjha",
        "timestamp": 1558142971
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116448\">@Koundinya Vajjha</span> The current <code>dirac_bind</code> is not one of the monad laws, it's too weak. The real monad law says that <code>m &gt;&gt;= pure o f = f &lt;$&gt; m</code>, and <code>dirac_bind</code> is the special case when <code>f = id</code>. So we can take inspiration from this and try to generalize the proof of <code>dirac_bind</code> with a function and deduce <code>dirac_bind</code> as a consequence:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">dirac_bind_comp</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">measure</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">measurable</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">bind</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">dirac</span> <span class=\"err\">$</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n<span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"n\">ext</span> <span class=\"err\">$</span> <span class=\"k\">assume</span> <span class=\"n\">s</span> <span class=\"n\">hs</span><span class=\"o\">,</span> <span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">bind_apply</span> <span class=\"n\">hs</span> <span class=\"o\">(</span><span class=\"n\">measurable_dirac</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"n\">hf</span><span class=\"o\">),</span> <span class=\"n\">map_apply</span> <span class=\"n\">hf</span> <span class=\"n\">hs</span><span class=\"o\">],</span>\n  <span class=\"n\">conv</span> <span class=\"o\">{</span><span class=\"n\">to_lhs</span><span class=\"o\">,</span> <span class=\"n\">congr</span><span class=\"o\">,</span> <span class=\"n\">skip</span><span class=\"o\">,</span> <span class=\"n\">funext</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">dirac_apply</span> <span class=\"bp\">_</span> <span class=\"n\">hs</span><span class=\"o\">},</span>\n  <span class=\"n\">transitivity</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">lintegral_supr_const</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hf</span> <span class=\"bp\">_</span> <span class=\"n\">hs</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">one_mul</span><span class=\"o\">,</span> <span class=\"n\">refl</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">dirac_bind</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">measure</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">bind</span> <span class=\"n\">m</span> <span class=\"n\">dirac</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">dirac_bind_comp</span> <span class=\"n\">measurable_id</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">map_id</span>\n</pre></div>",
        "id": 165952054,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558145442
    },
    {
        "content": "<p>Thanks a lot Mario!!</p>",
        "id": 165955077,
        "sender_full_name": "Koundinya Vajjha",
        "timestamp": 1558149602
    },
    {
        "content": "<p>So this is an absolutely serious statement. I went to a 24 lecture course on measure theory as an undergraduate and we learnt about sigma algebras and Borel measures and Lebesgue measure and the Borel  Cantelli lemma and all that stuff which mathematicians think of as standard, but for absolute sure there were no monads and certainly no monad law. Is this just some statement that is mathematically very straightforward but turns out to be some sort of universal statement for measures which would have been presented to us as an \"obvious fact\" or something?</p>",
        "id": 165964352,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1558166634
    },
    {
        "content": "<p>All this measure theory chat is completely passing me by. When people start doing MSc level stuff that's fine, that's what I'd expect, but I had still expected to be following what was going on at this stage.</p>",
        "id": 165964607,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1558166982
    },
    {
        "content": "<p>If there's one thing type theorists love, it's categories.  The original paper by Giry is here <a href=\"https://www.chrisstucchio.com/blog_media/2016/probability_the_monad/categorical_probability_giry.pdf\" target=\"_blank\" title=\"https://www.chrisstucchio.com/blog_media/2016/probability_the_monad/categorical_probability_giry.pdf\">A Categorical Approach to Probability Theory</a>.</p>",
        "id": 165965791,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1558169228
    },
    {
        "content": "<p>I'm also a little confused by Giry monads, but also very interested in concrete probability theory. I suppose I'll sit down and wrestle with the terminology once the library is a little more complete...</p>",
        "id": 165965842,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1558169342
    },
    {
        "content": "<p>But on the other hand we had a colloquium by <a href=\"https://en.wikipedia.org/wiki/Hugo_Duminil-Copin\" target=\"_blank\" title=\"https://en.wikipedia.org/wiki/Hugo_Duminil-Copin\">Hugo Duminil-Copin</a> at Imperial last week and I went out to dinner with him afterwards and asked him if he'd heard of the Giry monad and he said no. He's a regular mathematician though, not a type theorist. There's something funny going on. Type theorists might like it but probabilists don't use it, so my guess is that it is probably a beautiful way of saying something relatively straightforward to a mathematician; I suspect it's just the observation that one can use the language of monads to precisely encapsulate some standard phenomenon in measure theory, so it doesn't buy the mathematician anything in practice, but it makes part of the theory much more pleasant to formalise. I remember when I learnt that a morphism of sheaves was a natural transformation of functors -- I just thought \"cool\" but it didn't mean I understood morphisms of sheaves any better, it just meant that I was suddenly better at remembering the precise list of axioms for a morphism of sheaves in some sense.</p>",
        "id": 165966092,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1558169831
    },
    {
        "content": "<p>I've never come across the Giry monad myself until I got interested in it thanks to Johannes' work. The fundamental fact which everyone glosses over which makes this thing work is that the space of all measures on a set is also a measurable space. (Take the weak* topology and the borel sigma algebra wrt to that and you have a measurable space).</p>\n<p>IMO, the Giry monad will pop up sooner or later when you ask a mathematician how to rigorously formalize the statement \"sample a point from a distribution D\". Indeed that was my motivation in discovering it as well.</p>",
        "id": 165973975,
        "sender_full_name": "Koundinya Vajjha",
        "timestamp": 1558184305
    },
    {
        "content": "<p>We make these sort of statements all the time, but never (until now) have thought of what the best way to formalize these things would be in a proof assistant.</p>",
        "id": 165974059,
        "sender_full_name": "Koundinya Vajjha",
        "timestamp": 1558184417
    },
    {
        "content": "<p>Part of the appeal of the Giry monad is then to \"sample a point from a distribution D\", you can say <code>do x &lt;- D, return (x)</code>. It's really quite beautiful.</p>",
        "id": 165974130,
        "sender_full_name": "Koundinya Vajjha",
        "timestamp": 1558184544
    },
    {
        "content": "<p>Seeing that as beautiful is something which a certain kind of person does -- and perhaps the probabilist I talked to was not that kind of person. Thanks for the explanation! I read some of the pdf link. It's a cute thing.</p>",
        "id": 165981058,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1558196706
    },
    {
        "content": "<p>The really powerful thing about the Giry monad is it allows you to do operations on random variables without a massive amount of notation overloading to make sense of those <code>x * cos Y</code> expressions</p>",
        "id": 165997121,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558224457
    },
    {
        "content": "<p>I'm sure no mathematician or statistician would even think of calling this a monad, because ad hoc notation overloading is just what they do, but they never had to prove anything formally about those expressions</p>",
        "id": 165997176,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558224537
    },
    {
        "content": "<blockquote>\n<p>I suspect it's just the observation that one can use the language of monads to precisely encapsulate some standard phenomenon in measure theory, so it doesn't buy the mathematician anything in practice, but it makes part of the theory much more pleasant to formalise.</p>\n</blockquote>\n<p>^ this</p>",
        "id": 165997253,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558224685
    }
]