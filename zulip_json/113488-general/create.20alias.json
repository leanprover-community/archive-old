[
    {
        "content": "<p>How can I create an alias to anther declaration? Say, in my namespace <code>foo</code> I want to create a <code>true</code> such that users can see <code>foo.true</code> and the prover treats it equally to <code>true</code> from core.</p>",
        "id": 132309111,
        "sender_full_name": "Zesen Qian",
        "timestamp": 1534519473
    },
    {
        "content": "<p>equally is hard, but there are a few ways to get close</p>",
        "id": 132309539,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1534519924
    },
    {
        "content": "<p>right now I'm thinking about <code>def</code> with <code>attribute [reducible]</code></p>",
        "id": 132309551,
        "sender_full_name": "Zesen Qian",
        "timestamp": 1534519950
    },
    {
        "content": "<p><code>@[reducible] def</code> makes <code>rw</code> and <code>simp</code> see through the definition, as well as typeclass inference</p>",
        "id": 132309556,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1534519954
    },
    {
        "content": "<p>I guess that should work, but really I'm looking for shorter path.</p>",
        "id": 132309559,
        "sender_full_name": "Zesen Qian",
        "timestamp": 1534519968
    },
    {
        "content": "<p><code>abbreviation</code> does something similar with kernel reduction, I'm not sure exactly</p>",
        "id": 132309566,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1534519985
    },
    {
        "content": "<p>what do you mean \"shorter path\"?</p>",
        "id": 132309572,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1534519994
    },
    {
        "content": "<p>I mean, less characters to type.</p>",
        "id": 132309578,
        "sender_full_name": "Zesen Qian",
        "timestamp": 1534520010
    },
    {
        "content": "<p>alias true = true would be the best.</p>",
        "id": 132309584,
        "sender_full_name": "Zesen Qian",
        "timestamp": 1534520022
    },
    {
        "content": "<p>mathlib has an <code>alias</code> tactic, but it doesn't set <code>reducible</code></p>",
        "id": 132309623,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1534520043
    },
    {
        "content": "<p>what's wrong with just <code>def true := true</code>?</p>",
        "id": 132309646,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1534520086
    },
    {
        "content": "<p><code>notation</code>?</p>",
        "id": 132309652,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1534520097
    },
    {
        "content": "<p>also, what is your use case? I wrote <code>alias</code> to support alias constructions but it doesn't get much use since I specifically try to avoid aliases</p>",
        "id": 132309684,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1534520162
    },
    {
        "content": "<p>I need something in my namespace that's definitionally equal to <code>true</code></p>",
        "id": 132309741,
        "sender_full_name": "Zesen Qian",
        "timestamp": 1534520209
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> I haven't used notation before, can you give an example?</p>",
        "id": 132309775,
        "sender_full_name": "Zesen Qian",
        "timestamp": 1534520236
    },
    {
        "content": "<p><code>def true := true</code> is the easiest way to accomplish that</p>",
        "id": 132309783,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1534520242
    },
    {
        "content": "<p><code>notation `true'` := true</code></p>",
        "id": 132309796,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1534520264
    },
    {
        "content": "<p>but notation is not a def</p>",
        "id": 132309850,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1534520292
    },
    {
        "content": "<p>so there will be no <code>foo.true'</code> that way</p>",
        "id": 132309857,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1534520304
    },
    {
        "content": "<p>yeah, I realize that.</p>",
        "id": 132309863,
        "sender_full_name": "Zesen Qian",
        "timestamp": 1534520309
    },
    {
        "content": "<p>ok, so the best way is <code>reducible</code> <code>def</code>.</p>",
        "id": 132309876,
        "sender_full_name": "Zesen Qian",
        "timestamp": 1534520324
    },
    {
        "content": "<p>but you still haven't said why you need this</p>",
        "id": 132309877,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1534520327
    },
    {
        "content": "<p>I'm doing some metaprogramming. A proof given by SMT solvers is mapped to a proof in lean.</p>",
        "id": 132309894,
        "sender_full_name": "Zesen Qian",
        "timestamp": 1534520357
    },
    {
        "content": "<p>so a <code>true</code> in source proof mapped to <code>true</code> in lean.</p>",
        "id": 132309899,
        "sender_full_name": "Zesen Qian",
        "timestamp": 1534520372
    },
    {
        "content": "<p>then just map to the real <code>true</code></p>",
        "id": 132309904,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1534520380
    },
    {
        "content": "<p>I have a file containing all stuff that source proofs will refer.</p>",
        "id": 132309912,
        "sender_full_name": "Zesen Qian",
        "timestamp": 1534520394
    },
    {
        "content": "<p>so I don't need to write the mapping myself. The meta program will look it up itself.</p>",
        "id": 132309960,
        "sender_full_name": "Zesen Qian",
        "timestamp": 1534520415
    },
    {
        "content": "<p>but then your output statements will just be needlessly encoded with reducible defs</p>",
        "id": 132309992,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1534520468
    },
    {
        "content": "<p>you are writing the mapping just by giving these defs</p>",
        "id": 132310001,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1534520485
    },
    {
        "content": "<p>yeah, but that's not big problem, no one is gonna read the proof as long as it's correct.</p>",
        "id": 132310021,
        "sender_full_name": "Zesen Qian",
        "timestamp": 1534520509
    },
    {
        "content": "<p>machine generated proofs are never intended for people.</p>",
        "id": 132310024,
        "sender_full_name": "Zesen Qian",
        "timestamp": 1534520519
    },
    {
        "content": "<p>heh, you would be surprised</p>",
        "id": 132310070,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1534520531
    },
    {
        "content": "<p>I hope I will never be suprised.</p>",
        "id": 132310081,
        "sender_full_name": "Zesen Qian",
        "timestamp": 1534520543
    },
    {
        "content": "<p>anyway, I'm going <code>reducible</code> <code>def</code>s.</p>",
        "id": 132310090,
        "sender_full_name": "Zesen Qian",
        "timestamp": 1534520559
    },
    {
        "content": "<p>I don't think there is any point in using reducible here though. if it's in the proof term it's in the proof term</p>",
        "id": 132310128,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1534520623
    },
    {
        "content": "<p>I don't know what you meant.</p>",
        "id": 132310183,
        "sender_full_name": "Zesen Qian",
        "timestamp": 1534520652
    },
    {
        "content": "<p>you aren't using it with rw or anything so it won't be unfolded</p>",
        "id": 132310184,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1534520652
    },
    {
        "content": "<p>if you put together a proof using these variant definitions, it will make no difference to the type-correctness as long as it's defeq, and a regular def accomplishes that</p>",
        "id": 132310330,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1534520942
    },
    {
        "content": "<p>I think you are right.</p>",
        "id": 132310459,
        "sender_full_name": "Zesen Qian",
        "timestamp": 1534521018
    },
    {
        "content": "<p>I can now get it work without reducible, but I will see it can keep working.</p>",
        "id": 132310460,
        "sender_full_name": "Zesen Qian",
        "timestamp": 1534521018
    },
    {
        "content": "<p>yeah, but I'm thinking about if the user provides me with the \"real\" <code>true</code>.</p>",
        "id": 132310466,
        "sender_full_name": "Zesen Qian",
        "timestamp": 1534521030
    },
    {
        "content": "<p>and when a proof depends on the definitional equality between these two <code>true</code>, will that still work?</p>",
        "id": 132310486,
        "sender_full_name": "Zesen Qian",
        "timestamp": 1534521059
    },
    {
        "content": "<p>yes, that's what defeq does</p>",
        "id": 132310563,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1534521126
    },
    {
        "content": "<p>ok then!</p>",
        "id": 132310571,
        "sender_full_name": "Zesen Qian",
        "timestamp": 1534521141
    },
    {
        "content": "<p>you can replace <code>true</code> with <code>true'</code> anywhere in the proof with no changes</p>",
        "id": 132310576,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1534521145
    },
    {
        "content": "<p>ok. I guess I overlooked lean's ability of identifying equalities.</p>",
        "id": 132310605,
        "sender_full_name": "Zesen Qian",
        "timestamp": 1534521181
    }
]