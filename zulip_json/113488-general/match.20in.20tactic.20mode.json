[
    {
        "content": "<p>am I just meant to avoid match in tactic mode? I want to do something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">hn'</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n    <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span> <span class=\"c\">/-</span><span class=\"cm\"> hn : 0 &lt; n, NOT 0 &lt; 0 -/</span> <span class=\"gr\">sorry</span> <span class=\"kd\">end</span><span class=\"o\">,</span>\n    <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I could just use <code>cases n</code>, I know, but I have like 4 cases and I'd rather structure it this way if I can</p>",
        "id": 262468049,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1637680165
    },
    {
        "content": "<p>You can do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">hn'</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">hn</span> <span class=\"k\">with</span>\n    <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span> <span class=\"c\">/-</span><span class=\"cm\"> hn : 0 &lt; n, NOT 0 &lt; 0 -/</span> <span class=\"gr\">sorry</span> <span class=\"kd\">end</span><span class=\"o\">,</span>\n    <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>it seems, but I've never really tried this, or seen anyone do it so I have not idea how well it works in practice</p>",
        "id": 262469801,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1637680822
    },
    {
        "content": "<p>Also, <code>match</code> works the same way in term mode too</p>",
        "id": 262469905,
        "sender_full_name": "Reid Barton",
        "timestamp": 1637680892
    },
    {
        "content": "<p>The only instance of this I can see in mathlib is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pell.eq_pell/src\">src#pell.eq_pell</a></p>",
        "id": 262470073,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1637680968
    },
    {
        "content": "<p>Thats term mode though still</p>",
        "id": 262470133,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1637680993
    },
    {
        "content": "<p>I'll try this out, thanks! Didn't know it didn't explicitly rewrite automatically unlike the eqn compiler...</p>",
        "id": 262474282,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1637682804
    }
]