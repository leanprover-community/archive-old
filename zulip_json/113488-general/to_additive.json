[
    {
        "content": "<p>Is there any hope <code>to_additive</code> could be improved to avoid things like <a href=\"https://github.com/leanprover/mathlib/blob/2594f48f20392f84b0743eb0867c030913eca627/group_theory/quotient_group.lean#L40-L47\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/blob/2594f48f20392f84b0743eb0867c030913eca627/group_theory/quotient_group.lean#L40-L47\">https://github.com/leanprover/mathlib/blob/2594f48f20392f84b0743eb0867c030913eca627/group_theory/quotient_group.lean#L40-L47</a>?</p>",
        "id": 135545903,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1539182440
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> Would you like to take a look at this? I am thinking that the <code>to_additive</code> attribute should recursively copy any suffixed versions of the input mapping that happen to be in the term being traversed. For example if you are translating <code>foo =&gt; bar</code> and you run across <code>foo._match_1</code>, and this does not already have a translation, then it should translate <code>foo._match_1 =&gt; bar._match_1</code> and then try again</p>",
        "id": 135612824,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539268912
    },
    {
        "content": "<p>Interesting! Sure, I'll have a look. I assume at the moment, it only does the <code>foo =&gt; bar</code> translation?</p>",
        "id": 135614750,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1539270409
    },
    {
        "content": "<p>yes</p>",
        "id": 135614773,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539270433
    },
    {
        "content": "<p>Cool, I'll look into it.</p>",
        "id": 135614844,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1539270482
    },
    {
        "content": "<p>Do you have an example that's giving you trouble now?</p>",
        "id": 135615706,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1539271162
    },
    {
        "content": "<p>Well, any definition or theorem that contains (usually autogenerated) sub-definitions. In Patrick's example, it is because it is an instance with a data type and some proofs; in this case the proofs are automatically turned into sub-lemmas. The same sort of thing happens if you use <code>match</code> or <code>\\lam &lt;a, b&gt;, ...</code> in a proof, or use the equation compiler</p>",
        "id": 135618269,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539273577
    },
    {
        "content": "<p>Sorry I missed Patrick's initial comment</p>",
        "id": 135618508,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1539273824
    },
    {
        "content": "<p>We have the following code in mathlib:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c\">/-</span><span class=\"cm\">- An ordered (additive) commutative monoid is a commutative monoid</span>\n<span class=\"cm\">  with a partial order such that addition is an order embedding, i.e.</span>\n<span class=\"cm\">  `a + b ≤ a + c ↔ b ≤ c`. These monoids are automatically cancellative. -/</span>\n<span class=\"n\">class</span> <span class=\"n\">ordered_comm_monoid</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"n\">add_comm_monoid</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">partial_order</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">add_le_add_left</span>       <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">lt_of_add_lt_add_left</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p><a href=\"https://github.com/leanprover-community/mathlib/blob/0de4bba3208ee0bd8a78adf4396aa5cb083ffdf2/src/algebra/ordered_group.lean#L17-L22\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/0de4bba3208ee0bd8a78adf4396aa5cb083ffdf2/src/algebra/ordered_group.lean#L17-L22\">https://github.com/leanprover-community/mathlib/blob/0de4bba3208ee0bd8a78adf4396aa5cb083ffdf2/src/algebra/ordered_group.lean#L17-L22</a></p>\n<p>Of course, this is an abomination.</p>",
        "id": 167292586,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1559654849
    },
    {
        "content": "<p>So I replaced it with:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c\">/-</span><span class=\"cm\">- An ordered commutative monoid is a commutative monoid</span>\n<span class=\"cm\">  with a partial order such that multiplication is an order embedding, i.e.</span>\n<span class=\"cm\">  `a * b ≤ a * c ↔ b ≤ c`. These monoids are automatically cancellative. -/</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">to_additive</span> <span class=\"n\">add_ordered_comm_monoid</span><span class=\"o\">]</span>\n<span class=\"n\">class</span> <span class=\"n\">ordered_comm_monoid</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"n\">comm_monoid</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">partial_order</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">mul_le_mul_left</span>       <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">lt_of_mul_lt_mul_left</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 167292605,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1559654870
    },
    {
        "content": "<p>I was very excited that this didn't give a failure. Being prudent, I wrote:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"kn\">prefix</span> <span class=\"n\">ordered_comm_monoid</span>\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"kn\">prefix</span> <span class=\"n\">add_ordered_comm_monoid</span>\n</pre></div>",
        "id": 167292684,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1559654910
    },
    {
        "content": "<p>The output of the first command is:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">ordered_comm_monoid</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span>\n<span class=\"n\">ordered_comm_monoid</span><span class=\"bp\">.</span><span class=\"n\">cases_on</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">ordered_comm_monoid</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Sort</span> <span class=\"n\">l</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ordered_comm_monoid</span> <span class=\"n\">α</span><span class=\"o\">),</span>\n  <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">mul</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">mul_assoc</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">one</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n   <span class=\"o\">(</span><span class=\"n\">one_mul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">mul_one</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">mul_comm</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n   <span class=\"o\">(</span><span class=\"n\">le</span> <span class=\"n\">lt</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">le_refl</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n   <span class=\"o\">(</span><span class=\"n\">le_trans</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n   <span class=\"o\">(</span><span class=\"n\">lt_iff_le_not_le</span> <span class=\"o\">:</span>\n     <span class=\"n\">auto_param</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">name</span><span class=\"bp\">.</span><span class=\"n\">mk_string</span> <span class=\"s2\">&quot;order_laws_tac&quot;</span> <span class=\"n\">name</span><span class=\"bp\">.</span><span class=\"n\">anonymous</span><span class=\"o\">))</span>\n   <span class=\"o\">(</span><span class=\"n\">le_antisymm</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n   <span class=\"o\">(</span><span class=\"n\">mul_le_mul_left</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n   <span class=\"o\">(</span><span class=\"n\">lt_of_mul_lt_mul_left</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span><span class=\"o\">),</span>\n     <span class=\"n\">C</span>\n       <span class=\"o\">{</span><span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"n\">mul</span><span class=\"o\">,</span>\n        <span class=\"n\">mul_assoc</span> <span class=\"o\">:=</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span>\n        <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"n\">one</span><span class=\"o\">,</span>\n        <span class=\"n\">one_mul</span> <span class=\"o\">:=</span> <span class=\"n\">one_mul</span><span class=\"o\">,</span>\n        <span class=\"n\">mul_one</span> <span class=\"o\">:=</span> <span class=\"n\">mul_one</span><span class=\"o\">,</span>\n        <span class=\"n\">mul_comm</span> <span class=\"o\">:=</span> <span class=\"n\">mul_comm</span><span class=\"o\">,</span>\n        <span class=\"n\">le</span> <span class=\"o\">:=</span> <span class=\"n\">le</span><span class=\"o\">,</span>\n        <span class=\"n\">lt</span> <span class=\"o\">:=</span> <span class=\"n\">lt</span><span class=\"o\">,</span>\n        <span class=\"n\">le_refl</span> <span class=\"o\">:=</span> <span class=\"n\">le_refl</span><span class=\"o\">,</span>\n        <span class=\"n\">le_trans</span> <span class=\"o\">:=</span> <span class=\"n\">le_trans</span><span class=\"o\">,</span>\n        <span class=\"n\">lt_iff_le_not_le</span> <span class=\"o\">:=</span> <span class=\"n\">lt_iff_le_not_le</span><span class=\"o\">,</span>\n        <span class=\"n\">le_antisymm</span> <span class=\"o\">:=</span> <span class=\"n\">le_antisymm</span><span class=\"o\">,</span>\n        <span class=\"n\">mul_le_mul_left</span> <span class=\"o\">:=</span> <span class=\"n\">mul_le_mul_left</span><span class=\"o\">,</span>\n        <span class=\"n\">lt_of_mul_lt_mul_left</span> <span class=\"o\">:=</span> <span class=\"n\">lt_of_mul_lt_mul_left</span><span class=\"o\">})</span> <span class=\"bp\">→</span>\n  <span class=\"n\">C</span> <span class=\"n\">n</span>\n<span class=\"n\">ordered_comm_monoid</span><span class=\"bp\">.</span><span class=\"n\">has_sizeof_inst</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">α_inst</span> <span class=\"o\">:</span> <span class=\"n\">has_sizeof</span> <span class=\"n\">α</span><span class=\"o\">],</span> <span class=\"n\">has_sizeof</span> <span class=\"o\">(</span><span class=\"n\">ordered_comm_monoid</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"n\">ordered_comm_monoid</span><span class=\"bp\">.</span><span class=\"n\">le</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ordered_comm_monoid</span> <span class=\"n\">α</span><span class=\"o\">],</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">ordered_comm_monoid</span><span class=\"bp\">.</span><span class=\"n\">le_antisymm</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ordered_comm_monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span>\n<span class=\"n\">ordered_comm_monoid</span><span class=\"bp\">.</span><span class=\"n\">le_refl</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ordered_comm_monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span>\n<span class=\"n\">ordered_comm_monoid</span><span class=\"bp\">.</span><span class=\"n\">le_trans</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ordered_comm_monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c_1</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">c_1</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">c_1</span>\n<span class=\"n\">ordered_comm_monoid</span><span class=\"bp\">.</span><span class=\"n\">lt</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ordered_comm_monoid</span> <span class=\"n\">α</span><span class=\"o\">],</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">ordered_comm_monoid</span><span class=\"bp\">.</span><span class=\"n\">lt</span><span class=\"bp\">._</span><span class=\"n\">default</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">},</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">ordered_comm_monoid</span><span class=\"bp\">.</span><span class=\"n\">lt</span><span class=\"bp\">._</span><span class=\"n\">default</span><span class=\"bp\">.</span><span class=\"n\">equations</span><span class=\"bp\">._</span><span class=\"n\">eqn_1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">le</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">),</span> <span class=\"n\">ordered_comm_monoid</span><span class=\"bp\">.</span><span class=\"n\">lt</span><span class=\"bp\">._</span><span class=\"n\">default</span> <span class=\"n\">le</span> <span class=\"bp\">=</span> <span class=\"n\">id</span> <span class=\"o\">(</span><span class=\"n\">partial_order</span><span class=\"bp\">.</span><span class=\"n\">lt</span><span class=\"bp\">._</span><span class=\"n\">default</span> <span class=\"n\">le</span><span class=\"o\">)</span>\n<span class=\"n\">ordered_comm_monoid</span><span class=\"bp\">.</span><span class=\"n\">lt_iff_le_not_le</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ordered_comm_monoid</span> <span class=\"n\">α</span><span class=\"o\">],</span>\n  <span class=\"n\">auto_param</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">name</span><span class=\"bp\">.</span><span class=\"n\">mk_string</span> <span class=\"s2\">&quot;order_laws_tac&quot;</span> <span class=\"n\">name</span><span class=\"bp\">.</span><span class=\"n\">anonymous</span><span class=\"o\">)</span>\n<span class=\"n\">ordered_comm_monoid</span><span class=\"bp\">.</span><span class=\"n\">lt_of_mul_lt_mul_left</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ordered_comm_monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c_1</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c_1</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c_1</span>\n<span class=\"n\">ordered_comm_monoid</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">mul</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">mul_assoc</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">one</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">one_mul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">mul_one</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">mul_comm</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">le</span> <span class=\"n\">lt</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">le_refl</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">le_trans</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">lt_iff_le_not_le</span> <span class=\"o\">:</span>\n  <span class=\"n\">auto_param</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">name</span><span class=\"bp\">.</span><span class=\"n\">mk_string</span> <span class=\"s2\">&quot;order_laws_tac&quot;</span> <span class=\"n\">name</span><span class=\"bp\">.</span><span class=\"n\">anonymous</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">le_antisymm</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">),</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">ordered_comm_monoid</span> <span class=\"n\">α</span>\n<span class=\"n\">ordered_comm_monoid</span><span class=\"bp\">.</span><span class=\"n\">mk</span><span class=\"bp\">.</span><span class=\"n\">inj</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">mul</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">mul_assoc</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)}</span> <span class=\"o\">{</span><span class=\"n\">one</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n<span class=\"o\">{</span><span class=\"n\">one_mul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">mul_one</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">mul_comm</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">}</span>\n<span class=\"o\">{</span><span class=\"n\">le</span> <span class=\"n\">lt</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">le_refl</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">}</span>\n<span class=\"o\">{</span><span class=\"n\">le_trans</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">}</span>\n<span class=\"o\">{</span><span class=\"n\">lt_iff_le_not_le</span> <span class=\"o\">:</span>\n  <span class=\"n\">auto_param</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">name</span><span class=\"bp\">.</span><span class=\"n\">mk_string</span> <span class=\"s2\">&quot;order_laws_tac&quot;</span> <span class=\"n\">name</span><span class=\"bp\">.</span><span class=\"n\">anonymous</span><span class=\"o\">)}</span>\n<span class=\"o\">{</span><span class=\"n\">le_antisymm</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">}</span>\n<span class=\"o\">{</span><span class=\"n\">mul_le_mul_left</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">}</span>\n<span class=\"o\">{</span><span class=\"n\">lt_of_mul_lt_mul_left</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">mul_1</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n<span class=\"o\">{</span><span class=\"n\">mul_assoc_1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)}</span> <span class=\"o\">{</span><span class=\"n\">one_1</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">one_mul_1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">}</span>\n<span class=\"o\">{</span><span class=\"n\">mul_one_1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">mul_comm_1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">le_1</span> <span class=\"n\">lt_1</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n<span class=\"o\">{</span><span class=\"n\">le_refl_1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">le_trans_1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">}</span>\n<span class=\"o\">{</span><span class=\"n\">lt_iff_le_not_le_1</span> <span class=\"o\">:</span>\n  <span class=\"n\">auto_param</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">name</span><span class=\"bp\">.</span><span class=\"n\">mk_string</span> <span class=\"s2\">&quot;order_laws_tac&quot;</span> <span class=\"n\">name</span><span class=\"bp\">.</span><span class=\"n\">anonymous</span><span class=\"o\">)}</span>\n<span class=\"o\">{</span><span class=\"n\">le_antisymm_1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">}</span>\n<span class=\"o\">{</span><span class=\"n\">mul_le_mul_left_1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">}</span>\n<span class=\"o\">{</span><span class=\"n\">lt_of_mul_lt_mul_left_1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span><span class=\"o\">},</span>\n  <span class=\"o\">{</span><span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"n\">mul</span><span class=\"o\">,</span>\n     <span class=\"n\">mul_assoc</span> <span class=\"o\">:=</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span>\n     <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"n\">one</span><span class=\"o\">,</span>\n     <span class=\"n\">one_mul</span> <span class=\"o\">:=</span> <span class=\"n\">one_mul</span><span class=\"o\">,</span>\n     <span class=\"n\">mul_one</span> <span class=\"o\">:=</span> <span class=\"n\">mul_one</span><span class=\"o\">,</span>\n     <span class=\"n\">mul_comm</span> <span class=\"o\">:=</span> <span class=\"n\">mul_comm</span><span class=\"o\">,</span>\n     <span class=\"n\">le</span> <span class=\"o\">:=</span> <span class=\"n\">le</span><span class=\"o\">,</span>\n     <span class=\"n\">lt</span> <span class=\"o\">:=</span> <span class=\"n\">lt</span><span class=\"o\">,</span>\n     <span class=\"n\">le_refl</span> <span class=\"o\">:=</span> <span class=\"n\">le_refl</span><span class=\"o\">,</span>\n     <span class=\"n\">le_trans</span> <span class=\"o\">:=</span> <span class=\"n\">le_trans</span><span class=\"o\">,</span>\n     <span class=\"n\">lt_iff_le_not_le</span> <span class=\"o\">:=</span> <span class=\"n\">lt_iff_le_not_le</span><span class=\"o\">,</span>\n     <span class=\"n\">le_antisymm</span> <span class=\"o\">:=</span> <span class=\"n\">le_antisymm</span><span class=\"o\">,</span>\n     <span class=\"n\">mul_le_mul_left</span> <span class=\"o\">:=</span> <span class=\"n\">mul_le_mul_left</span><span class=\"o\">,</span>\n     <span class=\"n\">lt_of_mul_lt_mul_left</span> <span class=\"o\">:=</span> <span class=\"n\">lt_of_mul_lt_mul_left</span><span class=\"o\">}</span> <span class=\"bp\">=</span>\n    <span class=\"o\">{</span><span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"n\">mul_1</span><span class=\"o\">,</span>\n     <span class=\"n\">mul_assoc</span> <span class=\"o\">:=</span> <span class=\"n\">mul_assoc_1</span><span class=\"o\">,</span>\n     <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"n\">one_1</span><span class=\"o\">,</span>\n     <span class=\"n\">one_mul</span> <span class=\"o\">:=</span> <span class=\"n\">one_mul_1</span><span class=\"o\">,</span>\n     <span class=\"n\">mul_one</span> <span class=\"o\">:=</span> <span class=\"n\">mul_one_1</span><span class=\"o\">,</span>\n     <span class=\"n\">mul_comm</span> <span class=\"o\">:=</span> <span class=\"n\">mul_comm_1</span><span class=\"o\">,</span>\n     <span class=\"n\">le</span> <span class=\"o\">:=</span> <span class=\"n\">le_1</span><span class=\"o\">,</span>\n     <span class=\"n\">lt</span> <span class=\"o\">:=</span> <span class=\"n\">lt_1</span><span class=\"o\">,</span>\n     <span class=\"n\">le_refl</span> <span class=\"o\">:=</span> <span class=\"n\">le_refl_1</span><span class=\"o\">,</span>\n     <span class=\"n\">le_trans</span> <span class=\"o\">:=</span> <span class=\"n\">le_trans_1</span><span class=\"o\">,</span>\n     <span class=\"n\">lt_iff_le_not_le</span> <span class=\"o\">:=</span> <span class=\"n\">lt_iff_le_not_le_1</span><span class=\"o\">,</span>\n     <span class=\"n\">le_antisymm</span> <span class=\"o\">:=</span> <span class=\"n\">le_antisymm_1</span><span class=\"o\">,</span>\n     <span class=\"n\">mul_le_mul_left</span> <span class=\"o\">:=</span> <span class=\"n\">mul_le_mul_left_1</span><span class=\"o\">,</span>\n     <span class=\"n\">lt_of_mul_lt_mul_left</span> <span class=\"o\">:=</span> <span class=\"n\">lt_of_mul_lt_mul_left_1</span><span class=\"o\">}</span> <span class=\"bp\">→</span>\n  <span class=\"n\">mul</span> <span class=\"bp\">=</span> <span class=\"n\">mul_1</span> <span class=\"bp\">∧</span> <span class=\"n\">one</span> <span class=\"bp\">=</span> <span class=\"n\">one_1</span> <span class=\"bp\">∧</span> <span class=\"n\">le</span> <span class=\"bp\">=</span> <span class=\"n\">le_1</span> <span class=\"bp\">∧</span> <span class=\"n\">lt</span> <span class=\"bp\">=</span> <span class=\"n\">lt_1</span>\n<span class=\"n\">ordered_comm_monoid</span><span class=\"bp\">.</span><span class=\"n\">mk</span><span class=\"bp\">.</span><span class=\"n\">inj_arrow</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">mul</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">mul_assoc</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)}</span> <span class=\"o\">{</span><span class=\"n\">one</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n<span class=\"o\">{</span><span class=\"n\">one_mul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">mul_one</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">mul_comm</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">}</span>\n<span class=\"o\">{</span><span class=\"n\">le</span> <span class=\"n\">lt</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">le_refl</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">}</span>\n<span class=\"o\">{</span><span class=\"n\">le_trans</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">}</span>\n<span class=\"o\">{</span><span class=\"n\">lt_iff_le_not_le</span> <span class=\"o\">:</span>\n  <span class=\"n\">auto_param</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">name</span><span class=\"bp\">.</span><span class=\"n\">mk_string</span> <span class=\"s2\">&quot;order_laws_tac&quot;</span> <span class=\"n\">name</span><span class=\"bp\">.</span><span class=\"n\">anonymous</span><span class=\"o\">)}</span>\n<span class=\"o\">{</span><span class=\"n\">le_antisymm</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">}</span>\n<span class=\"o\">{</span><span class=\"n\">mul_le_mul_left</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">}</span>\n<span class=\"o\">{</span><span class=\"n\">lt_of_mul_lt_mul_left</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">mul_1</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n<span class=\"o\">{</span><span class=\"n\">mul_assoc_1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)}</span> <span class=\"o\">{</span><span class=\"n\">one_1</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">one_mul_1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">}</span>\n<span class=\"o\">{</span><span class=\"n\">mul_one_1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">mul_comm_1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">le_1</span> <span class=\"n\">lt_1</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n<span class=\"o\">{</span><span class=\"n\">le_refl_1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">le_trans_1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">}</span>\n<span class=\"o\">{</span><span class=\"n\">lt_iff_le_not_le_1</span> <span class=\"o\">:</span>\n  <span class=\"n\">auto_param</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">name</span><span class=\"bp\">.</span><span class=\"n\">mk_string</span> <span class=\"s2\">&quot;order_laws_tac&quot;</span> <span class=\"n\">name</span><span class=\"bp\">.</span><span class=\"n\">anonymous</span><span class=\"o\">)}</span>\n<span class=\"o\">{</span><span class=\"n\">le_antisymm_1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">}</span>\n<span class=\"o\">{</span><span class=\"n\">mul_le_mul_left_1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">}</span>\n<span class=\"o\">{</span><span class=\"n\">lt_of_mul_lt_mul_left_1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span><span class=\"o\">},</span>\n  <span class=\"o\">{</span><span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"n\">mul</span><span class=\"o\">,</span>\n     <span class=\"n\">mul_assoc</span> <span class=\"o\">:=</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span>\n     <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"n\">one</span><span class=\"o\">,</span>\n     <span class=\"n\">one_mul</span> <span class=\"o\">:=</span> <span class=\"n\">one_mul</span><span class=\"o\">,</span>\n     <span class=\"n\">mul_one</span> <span class=\"o\">:=</span> <span class=\"n\">mul_one</span><span class=\"o\">,</span>\n     <span class=\"n\">mul_comm</span> <span class=\"o\">:=</span> <span class=\"n\">mul_comm</span><span class=\"o\">,</span>\n     <span class=\"n\">le</span> <span class=\"o\">:=</span> <span class=\"n\">le</span><span class=\"o\">,</span>\n     <span class=\"n\">lt</span> <span class=\"o\">:=</span> <span class=\"n\">lt</span><span class=\"o\">,</span>\n     <span class=\"n\">le_refl</span> <span class=\"o\">:=</span> <span class=\"n\">le_refl</span><span class=\"o\">,</span>\n     <span class=\"n\">le_trans</span> <span class=\"o\">:=</span> <span class=\"n\">le_trans</span><span class=\"o\">,</span>\n     <span class=\"n\">lt_iff_le_not_le</span> <span class=\"o\">:=</span> <span class=\"n\">lt_iff_le_not_le</span><span class=\"o\">,</span>\n     <span class=\"n\">le_antisymm</span> <span class=\"o\">:=</span> <span class=\"n\">le_antisymm</span><span class=\"o\">,</span>\n     <span class=\"n\">mul_le_mul_left</span> <span class=\"o\">:=</span> <span class=\"n\">mul_le_mul_left</span><span class=\"o\">,</span>\n     <span class=\"n\">lt_of_mul_lt_mul_left</span> <span class=\"o\">:=</span> <span class=\"n\">lt_of_mul_lt_mul_left</span><span class=\"o\">}</span> <span class=\"bp\">=</span>\n    <span class=\"o\">{</span><span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"n\">mul_1</span><span class=\"o\">,</span>\n     <span class=\"n\">mul_assoc</span> <span class=\"o\">:=</span> <span class=\"n\">mul_assoc_1</span><span class=\"o\">,</span>\n     <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"n\">one_1</span><span class=\"o\">,</span>\n     <span class=\"n\">one_mul</span> <span class=\"o\">:=</span> <span class=\"n\">one_mul_1</span><span class=\"o\">,</span>\n     <span class=\"n\">mul_one</span> <span class=\"o\">:=</span> <span class=\"n\">mul_one_1</span><span class=\"o\">,</span>\n     <span class=\"n\">mul_comm</span> <span class=\"o\">:=</span> <span class=\"n\">mul_comm_1</span><span class=\"o\">,</span>\n     <span class=\"n\">le</span> <span class=\"o\">:=</span> <span class=\"n\">le_1</span><span class=\"o\">,</span>\n     <span class=\"n\">lt</span> <span class=\"o\">:=</span> <span class=\"n\">lt_1</span><span class=\"o\">,</span>\n     <span class=\"n\">le_refl</span> <span class=\"o\">:=</span> <span class=\"n\">le_refl_1</span><span class=\"o\">,</span>\n     <span class=\"n\">le_trans</span> <span class=\"o\">:=</span> <span class=\"n\">le_trans_1</span><span class=\"o\">,</span>\n     <span class=\"n\">lt_iff_le_not_le</span> <span class=\"o\">:=</span> <span class=\"n\">lt_iff_le_not_le_1</span><span class=\"o\">,</span>\n     <span class=\"n\">le_antisymm</span> <span class=\"o\">:=</span> <span class=\"n\">le_antisymm_1</span><span class=\"o\">,</span>\n     <span class=\"n\">mul_le_mul_left</span> <span class=\"o\">:=</span> <span class=\"n\">mul_le_mul_left_1</span><span class=\"o\">,</span>\n     <span class=\"n\">lt_of_mul_lt_mul_left</span> <span class=\"o\">:=</span> <span class=\"n\">lt_of_mul_lt_mul_left_1</span><span class=\"o\">}</span> <span class=\"bp\">→</span>\n  <span class=\"bp\">Π</span> <span class=\"o\">⦃</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">l</span><span class=\"o\">⦄,</span> <span class=\"o\">(</span><span class=\"n\">mul</span> <span class=\"bp\">=</span> <span class=\"n\">mul_1</span> <span class=\"bp\">→</span> <span class=\"n\">one</span> <span class=\"bp\">=</span> <span class=\"n\">one_1</span> <span class=\"bp\">→</span> <span class=\"n\">le</span> <span class=\"bp\">=</span> <span class=\"n\">le_1</span> <span class=\"bp\">→</span> <span class=\"n\">lt</span> <span class=\"bp\">=</span> <span class=\"n\">lt_1</span> <span class=\"bp\">→</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">P</span>\n<span class=\"n\">ordered_comm_monoid</span><span class=\"bp\">.</span><span class=\"n\">mk</span><span class=\"bp\">.</span><span class=\"n\">sizeof_spec</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">α_inst</span> <span class=\"o\">:</span> <span class=\"n\">has_sizeof</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">mul</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">mul_assoc</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">one</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">one_mul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">mul_one</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">mul_comm</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">le</span> <span class=\"n\">lt</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">le_refl</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">le_trans</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">lt_iff_le_not_le</span> <span class=\"o\">:</span>\n  <span class=\"n\">auto_param</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">name</span><span class=\"bp\">.</span><span class=\"n\">mk_string</span> <span class=\"s2\">&quot;order_laws_tac&quot;</span> <span class=\"n\">name</span><span class=\"bp\">.</span><span class=\"n\">anonymous</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">le_antisymm</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">mul_le_mul_left</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">lt_of_mul_lt_mul_left</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span><span class=\"o\">),</span>\n  <span class=\"n\">ordered_comm_monoid</span><span class=\"bp\">.</span><span class=\"n\">sizeof</span> <span class=\"n\">α</span>\n      <span class=\"o\">{</span><span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"n\">mul</span><span class=\"o\">,</span>\n       <span class=\"n\">mul_assoc</span> <span class=\"o\">:=</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span>\n       <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"n\">one</span><span class=\"o\">,</span>\n       <span class=\"n\">one_mul</span> <span class=\"o\">:=</span> <span class=\"n\">one_mul</span><span class=\"o\">,</span>\n       <span class=\"n\">mul_one</span> <span class=\"o\">:=</span> <span class=\"n\">mul_one</span><span class=\"o\">,</span>\n       <span class=\"n\">mul_comm</span> <span class=\"o\">:=</span> <span class=\"n\">mul_comm</span><span class=\"o\">,</span>\n       <span class=\"n\">le</span> <span class=\"o\">:=</span> <span class=\"n\">le</span><span class=\"o\">,</span>\n       <span class=\"n\">lt</span> <span class=\"o\">:=</span> <span class=\"n\">lt</span><span class=\"o\">,</span>\n       <span class=\"n\">le_refl</span> <span class=\"o\">:=</span> <span class=\"n\">le_refl</span><span class=\"o\">,</span>\n       <span class=\"n\">le_trans</span> <span class=\"o\">:=</span> <span class=\"n\">le_trans</span><span class=\"o\">,</span>\n       <span class=\"n\">lt_iff_le_not_le</span> <span class=\"o\">:=</span> <span class=\"n\">lt_iff_le_not_le</span><span class=\"o\">,</span>\n       <span class=\"n\">le_antisymm</span> <span class=\"o\">:=</span> <span class=\"n\">le_antisymm</span><span class=\"o\">,</span>\n       <span class=\"n\">mul_le_mul_left</span> <span class=\"o\">:=</span> <span class=\"n\">mul_le_mul_left</span><span class=\"o\">,</span>\n       <span class=\"n\">lt_of_mul_lt_mul_left</span> <span class=\"o\">:=</span> <span class=\"n\">lt_of_mul_lt_mul_left</span><span class=\"o\">}</span> <span class=\"bp\">=</span>\n    <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">sizeof</span> <span class=\"n\">one</span>\n<span class=\"n\">ordered_comm_monoid</span><span class=\"bp\">.</span><span class=\"n\">mul</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ordered_comm_monoid</span> <span class=\"n\">α</span><span class=\"o\">],</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n<span class=\"n\">ordered_comm_monoid</span><span class=\"bp\">.</span><span class=\"n\">mul_assoc</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ordered_comm_monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c_1</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c_1</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c_1</span><span class=\"o\">)</span>\n<span class=\"n\">ordered_comm_monoid</span><span class=\"bp\">.</span><span class=\"n\">mul_comm</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ordered_comm_monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">a</span>\n<span class=\"n\">ordered_comm_monoid</span><span class=\"bp\">.</span><span class=\"n\">mul_le_mul_left</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ordered_comm_monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">c_1</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">c_1</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">c_1</span> <span class=\"bp\">*</span> <span class=\"n\">b</span>\n<span class=\"n\">ordered_comm_monoid</span><span class=\"bp\">.</span><span class=\"n\">mul_one</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ordered_comm_monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n<span class=\"n\">ordered_comm_monoid</span><span class=\"bp\">.</span><span class=\"n\">no_confusion</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">l</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">v1</span> <span class=\"n\">v2</span> <span class=\"o\">:</span> <span class=\"n\">ordered_comm_monoid</span> <span class=\"n\">α</span><span class=\"o\">},</span>\n  <span class=\"n\">v1</span> <span class=\"bp\">=</span> <span class=\"n\">v2</span> <span class=\"bp\">→</span> <span class=\"n\">ordered_comm_monoid</span><span class=\"bp\">.</span><span class=\"n\">no_confusion_type</span> <span class=\"n\">P</span> <span class=\"n\">v1</span> <span class=\"n\">v2</span>\n<span class=\"n\">ordered_comm_monoid</span><span class=\"bp\">.</span><span class=\"n\">no_confusion_type</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">},</span> <span class=\"n\">Sort</span> <span class=\"n\">l</span> <span class=\"bp\">→</span> <span class=\"n\">ordered_comm_monoid</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ordered_comm_monoid</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Sort</span> <span class=\"n\">l</span>\n<span class=\"n\">ordered_comm_monoid</span><span class=\"bp\">.</span><span class=\"n\">one</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ordered_comm_monoid</span> <span class=\"n\">α</span><span class=\"o\">],</span> <span class=\"n\">α</span>\n<span class=\"n\">ordered_comm_monoid</span><span class=\"bp\">.</span><span class=\"n\">one_mul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ordered_comm_monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n<span class=\"n\">ordered_comm_monoid</span><span class=\"bp\">.</span><span class=\"n\">rec</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">ordered_comm_monoid</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Sort</span> <span class=\"n\">l</span><span class=\"o\">},</span>\n  <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">mul</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">mul_assoc</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">one</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n   <span class=\"o\">(</span><span class=\"n\">one_mul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">mul_one</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">mul_comm</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n   <span class=\"o\">(</span><span class=\"n\">le</span> <span class=\"n\">lt</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">le_refl</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n   <span class=\"o\">(</span><span class=\"n\">le_trans</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n   <span class=\"o\">(</span><span class=\"n\">lt_iff_le_not_le</span> <span class=\"o\">:</span>\n     <span class=\"n\">auto_param</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">name</span><span class=\"bp\">.</span><span class=\"n\">mk_string</span> <span class=\"s2\">&quot;order_laws_tac&quot;</span> <span class=\"n\">name</span><span class=\"bp\">.</span><span class=\"n\">anonymous</span><span class=\"o\">))</span>\n   <span class=\"o\">(</span><span class=\"n\">le_antisymm</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span>\n</pre></div>",
        "id": 167292715,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1559654937
    },
    {
        "content": "<p>The output of the second command is:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">add_ordered_comm_monoid</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span>\n</pre></div>",
        "id": 167292738,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1559654954
    },
    {
        "content": "<p>/me is <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 167292760,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1559654973
    },
    {
        "content": "<p>Is there any hope this could be fixed?</p>",
        "id": 167292772,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1559654983
    },
    {
        "content": "<p>I think for structures you need to just define the second structure separately, and add the attribute afterwards. Also it should be called <code>ordered_add_comm_monoid</code> I think.</p>",
        "id": 167293105,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1559655146
    },
    {
        "content": "<blockquote>\n<p>I think for structures you need to just define the second structure separately, and add the attribute afterwards. Also it should be called <code>ordered_add_comm_monoid</code> I think.</p>\n</blockquote>\n<p>Ok, I'll rename.</p>",
        "id": 167293213,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1559655203
    },
    {
        "content": "<p>So... if I add the attribute afterwards... does that match up all those auto-generated things? Or is it ok if those aren't matched up?</p>",
        "id": 167293350,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1559655286
    },
    {
        "content": "<p>I think so. I guess that's how it works with <code>group</code> and all the other classes.</p>",
        "id": 167293414,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1559655337
    },
    {
        "content": "<p>It won't match up the auto generated things actually. I misread the question.</p>",
        "id": 167293455,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1559655362
    },
    {
        "content": "<p>I fear that will cause problems...</p>",
        "id": 167293758,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1559655485
    },
    {
        "content": "<p>I think you have to do it by hand.<br>\nFrom <code>algebra/group</code></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"n\">to_additive</span> <span class=\"n\">add_group</span><span class=\"o\">]</span> <span class=\"n\">group</span>\n<span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"n\">to_additive</span> <span class=\"n\">add_group</span><span class=\"bp\">.</span><span class=\"n\">mk</span><span class=\"o\">]</span> <span class=\"n\">group</span><span class=\"bp\">.</span><span class=\"n\">mk</span>\n<span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"n\">to_additive</span> <span class=\"n\">add_group</span><span class=\"bp\">.</span><span class=\"n\">to_has_neg</span><span class=\"o\">]</span> <span class=\"n\">group</span><span class=\"bp\">.</span><span class=\"n\">to_has_inv</span>\n<span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"n\">to_additive</span> <span class=\"n\">add_group</span><span class=\"bp\">.</span><span class=\"n\">to_add_monoid</span><span class=\"o\">]</span> <span class=\"n\">group</span><span class=\"bp\">.</span><span class=\"n\">to_monoid</span>\n<span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"n\">to_additive</span> <span class=\"n\">add_group</span><span class=\"bp\">.</span><span class=\"n\">add_left_neg</span><span class=\"o\">]</span> <span class=\"n\">group</span><span class=\"bp\">.</span><span class=\"n\">mul_left_inv</span>\n<span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"n\">to_additive</span> <span class=\"n\">add_group</span><span class=\"bp\">.</span><span class=\"n\">add</span><span class=\"o\">]</span> <span class=\"n\">group</span><span class=\"bp\">.</span><span class=\"n\">mul</span>\n<span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"n\">to_additive</span> <span class=\"n\">add_group</span><span class=\"bp\">.</span><span class=\"n\">add_assoc</span><span class=\"o\">]</span> <span class=\"n\">group</span><span class=\"bp\">.</span><span class=\"n\">mul_assoc</span>\n<span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"n\">to_additive</span> <span class=\"n\">add_group</span><span class=\"bp\">.</span><span class=\"n\">zero</span><span class=\"o\">]</span> <span class=\"n\">group</span><span class=\"bp\">.</span><span class=\"n\">one</span>\n<span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"n\">to_additive</span> <span class=\"n\">add_group</span><span class=\"bp\">.</span><span class=\"n\">zero_add</span><span class=\"o\">]</span> <span class=\"n\">group</span><span class=\"bp\">.</span><span class=\"n\">one_mul</span>\n<span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"n\">to_additive</span> <span class=\"n\">add_group</span><span class=\"bp\">.</span><span class=\"n\">add_zero</span><span class=\"o\">]</span> <span class=\"n\">group</span><span class=\"bp\">.</span><span class=\"n\">mul_one</span>\n<span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"n\">to_additive</span> <span class=\"n\">add_group</span><span class=\"bp\">.</span><span class=\"n\">neg</span><span class=\"o\">]</span> <span class=\"n\">group</span><span class=\"bp\">.</span><span class=\"n\">inv</span>\n</pre></div>",
        "id": 167293919,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1559655575
    },
    {
        "content": "<p>Unfortunately, Simon never managed to complete <a href=\"https://github.com/leanprover-community/mathlib/pull/431\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/pull/431\">https://github.com/leanprover-community/mathlib/pull/431</a></p>",
        "id": 167294153,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1559655664
    },
    {
        "content": "<p>I dumped the output of that print command into a file called <code>test.out</code>.<br>\nAnd then</p>\n<div class=\"codehilite\"><pre><span></span>cat test.out<span class=\"p\">|</span> ./to_additive.sh ordered_comm_monoid ordered_add_comm_monoid\nattribute <span class=\"o\">[</span>to_additive ordered_add_comm_monoid.cases_on<span class=\"o\">]</span> ordered_comm_monoid.cases_on\nattribute <span class=\"o\">[</span>to_additive ordered_add_comm_monoid.has_sizeof_inst<span class=\"o\">]</span> ordered_comm_monoid.has_sizeof_inst\nattribute <span class=\"o\">[</span>to_additive ordered_add_comm_monoid.le<span class=\"o\">]</span> ordered_comm_monoid.le\nattribute <span class=\"o\">[</span>to_additive ordered_add_comm_monoid.le_antisymm<span class=\"o\">]</span> ordered_comm_monoid.le_antisymm\nattribute <span class=\"o\">[</span>to_additive ordered_add_comm_monoid.le_refl<span class=\"o\">]</span> ordered_comm_monoid.le_refl\nattribute <span class=\"o\">[</span>to_additive ordered_add_comm_monoid.le_trans<span class=\"o\">]</span> ordered_comm_monoid.le_trans\nattribute <span class=\"o\">[</span>to_additive ordered_add_comm_monoid.lt<span class=\"o\">]</span> ordered_comm_monoid.lt\nattribute <span class=\"o\">[</span>to_additive ordered_add_comm_monoid.lt._default<span class=\"o\">]</span> ordered_comm_monoid.lt._default\nattribute <span class=\"o\">[</span>to_additive ordered_add_comm_monoid.lt._default.equations._eqn_1<span class=\"o\">]</span> ordered_comm_monoid.lt._default.equations._eqn_1\nattribute <span class=\"o\">[</span>to_additive ordered_add_comm_monoid.lt_iff_le_not_le<span class=\"o\">]</span> ordered_comm_monoid.lt_iff_le_not_le\nattribute <span class=\"o\">[</span>to_additive ordered_add_comm_monoid.lt_of_mul_lt_mul_left<span class=\"o\">]</span> ordered_comm_monoid.lt_of_mul_lt_mul_left\nattribute <span class=\"o\">[</span>to_additive ordered_add_comm_monoid.mk<span class=\"o\">]</span> ordered_comm_monoid.mk\nattribute <span class=\"o\">[</span>to_additive ordered_add_comm_monoid.mk.inj<span class=\"o\">]</span> ordered_comm_monoid.mk.inj\nattribute <span class=\"o\">[</span>to_additive ordered_add_comm_monoid.mk.inj_arrow<span class=\"o\">]</span> ordered_comm_monoid.mk.inj_arrow\nattribute <span class=\"o\">[</span>to_additive ordered_add_comm_monoid.mk.sizeof_spec<span class=\"o\">]</span> ordered_comm_monoid.mk.sizeof_spec\nattribute <span class=\"o\">[</span>to_additive ordered_add_comm_monoid.mul<span class=\"o\">]</span> ordered_comm_monoid.mul\nattribute <span class=\"o\">[</span>to_additive ordered_add_comm_monoid.mul_assoc<span class=\"o\">]</span> ordered_comm_monoid.mul_assoc\nattribute <span class=\"o\">[</span>to_additive ordered_add_comm_monoid.mul_comm<span class=\"o\">]</span> ordered_comm_monoid.mul_comm\nattribute <span class=\"o\">[</span>to_additive ordered_add_comm_monoid.mul_le_mul_left<span class=\"o\">]</span> ordered_comm_monoid.mul_le_mul_left\nattribute <span class=\"o\">[</span>to_additive ordered_add_comm_monoid.mul_one<span class=\"o\">]</span> ordered_comm_monoid.mul_one\nattribute <span class=\"o\">[</span>to_additive ordered_add_comm_monoid.no_confusion<span class=\"o\">]</span> ordered_comm_monoid.no_confusion\nattribute <span class=\"o\">[</span>to_additive ordered_add_comm_monoid.no_confusion_type<span class=\"o\">]</span> ordered_comm_monoid.no_confusion_type\nattribute <span class=\"o\">[</span>to_additive ordered_add_comm_monoid.one<span class=\"o\">]</span> ordered_comm_monoid.one\nattribute <span class=\"o\">[</span>to_additive ordered_add_comm_monoid.one_mul<span class=\"o\">]</span> ordered_comm_monoid.one_mul\nattribute <span class=\"o\">[</span>to_additive ordered_add_comm_monoid.rec<span class=\"o\">]</span> ordered_comm_monoid.rec\nattribute <span class=\"o\">[</span>to_additive ordered_add_comm_monoid.rec_on<span class=\"o\">]</span> ordered_comm_monoid.rec_on\nattribute <span class=\"o\">[</span>to_additive ordered_add_comm_monoid.sizeof<span class=\"o\">]</span> ordered_comm_monoid.sizeof\nattribute <span class=\"o\">[</span>to_additive ordered_add_comm_monoid.to_comm_monoid<span class=\"o\">]</span> ordered_comm_monoid.to_comm_monoid\nattribute <span class=\"o\">[</span>to_additive ordered_add_comm_monoid.to_partial_order<span class=\"o\">]</span> ordered_comm_monoid.to_partial_order\n</pre></div>",
        "id": 167295711,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1559656491
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>cat to_additive.sh\n<span class=\"c1\">#!/bin/bash</span>\n\n<span class=\"nv\">MUL</span><span class=\"o\">=</span><span class=\"nv\">$1</span>\n<span class=\"nv\">ADD</span><span class=\"o\">=</span><span class=\"nv\">$2</span>\n\ngrep <span class=\"s2\">&quot;^</span><span class=\"nv\">$MUL</span><span class=\"s2\">&quot;</span> <span class=\"p\">|</span> sed <span class=\"s2\">&quot;/</span><span class=\"nv\">$MUL</span><span class=\"s2\"> : .*/d;s/</span><span class=\"nv\">$MUL</span><span class=\"s2\">.\\([^ ]*\\) : .*/attribute [to_additive </span><span class=\"nv\">$ADD</span><span class=\"s2\">.\\1] </span><span class=\"nv\">$MUL</span><span class=\"s2\">.\\1/&quot;</span>\n</pre></div>",
        "id": 167295768,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1559656519
    },
    {
        "content": "<p>That might be a snippet that we want to keep around as long as <code>to_additive</code> doesn't do this by itself.</p>",
        "id": 167295825,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1559656544
    },
    {
        "content": "<p>Except that it is hopelessly broken <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span> I need recursion.</p>",
        "id": 167296030,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1559656658
    },
    {
        "content": "<p>This is certainly not a stable approach</p>",
        "id": 167296045,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1559656667
    },
    {
        "content": "<p>I tried setting up <code>to_additive</code> to do this automatically, but it's too slow</p>",
        "id": 167303161,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1559660682
    },
    {
        "content": "<p><code>#print prefix</code> is about as fast as printing all definitions in the environment</p>",
        "id": 167303197,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1559660712
    },
    {
        "content": "<p>That is really very sad...<br>\nCan we have <code>to_additive?</code> that will trace the block of <code>to_additive</code> statements?<br>\nIt would be quite helpful, I guess.</p>",
        "id": 167318226,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1559670119
    },
    {
        "content": "<p>This example has been posted many times:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">semigroup</span><span class=\"bp\">._</span><span class=\"n\">proof_1</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span>\n<span class=\"n\">term</span>\n  <span class=\"bp\">_</span><span class=\"n\">inst_1</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">add_semigroup</span> <span class=\"n\">α</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">semigroup</span> <span class=\"n\">α</span>\n</pre></div>",
        "id": 167367501,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1559722980
    },
    {
        "content": "<p>My question is: what is <code>semigroup._proof_1</code>?</p>",
        "id": 167367520,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1559722996
    },
    {
        "content": "<p>If I try to <code>#print</code> it, I get <code>unknown identifier semigroup._proof_1</code>.</p>",
        "id": 167367544,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1559723028
    },
    {
        "content": "<p>It's a proof abstracted (extracted) from a definition</p>",
        "id": 167368315,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1559723729
    },
    {
        "content": "<p>This is done for all \"non-trivial\" proofs (i.e. terms of type <code>Prop</code>) inside a definition</p>",
        "id": 167368451,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1559723849
    },
    {
        "content": "<p>But it's not a \"known identifier\"</p>",
        "id": 167368463,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1559723866
    },
    {
        "content": "<p>Yes, it's a hidden auxiliary definition. Users are not supposed to interact with it, though I suppose meta programs may still have to.</p>",
        "id": 167368574,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1559723945
    },
    {
        "content": "<p><code>to_additive</code> has a hard time interacting with it...<br>\nI can't write</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"n\">to_additive</span> <span class=\"n\">add_semigroup</span><span class=\"bp\">._</span><span class=\"n\">proof_1</span><span class=\"o\">]</span> <span class=\"n\">semigroup</span><span class=\"bp\">._</span><span class=\"n\">proof_1</span>\n</pre></div>",
        "id": 167368710,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1559724092
    },
    {
        "content": "<p>You should be able to see the definition. Possibly the error is causing the theorem to not be generated in the first place</p>",
        "id": 167383041,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1559737749
    },
    {
        "content": "<p>I think it would be great to have a <code>to_additive</code> thing. There has been some talk about this recently. The current system is a bore:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">group</span><span class=\"bp\">.</span><span class=\"n\">to_additive</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">monoid_hom</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">to_fun</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">N</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">map_one</span> <span class=\"o\">:</span> <span class=\"n\">to_fun</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">map_mul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">to_fun</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">to_fun</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">to_fun</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n\n<span class=\"kn\">infixr</span> <span class=\"bp\">`</span> <span class=\"bp\">→*</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">25</span> <span class=\"o\">:=</span> <span class=\"n\">monoid_hom</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">add_monoid_hom</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_monoid</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">to_fun</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">N</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">map_zero</span> <span class=\"o\">:</span> <span class=\"n\">to_fun</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">map_add</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">to_fun</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">to_fun</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">to_fun</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n\n<span class=\"kn\">infixr</span> <span class=\"bp\">`</span> <span class=\"bp\">→+</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">25</span> <span class=\"o\">:=</span> <span class=\"n\">add_monoid_hom</span>\n\n<span class=\"c1\">-- #print prefix monoid_hom says this is everything (I think; it was generated manually)</span>\n<span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"n\">to_additive</span> <span class=\"n\">add_monoid_hom</span><span class=\"o\">]</span> <span class=\"n\">monoid_hom</span>\n<span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"n\">to_additive</span> <span class=\"n\">add_monoid_hom</span><span class=\"bp\">.</span><span class=\"n\">cases_on</span><span class=\"o\">]</span> <span class=\"n\">monoid_hom</span><span class=\"bp\">.</span><span class=\"n\">cases_on</span>\n<span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"n\">to_additive</span> <span class=\"n\">add_monoid_hom</span><span class=\"bp\">.</span><span class=\"n\">has_sizeof_inst</span><span class=\"o\">]</span> <span class=\"n\">monoid_hom</span><span class=\"bp\">.</span><span class=\"n\">has_sizeof_inst</span>\n<span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"n\">to_additive</span> <span class=\"n\">add_monoid_hom</span><span class=\"bp\">.</span><span class=\"n\">map_add</span><span class=\"o\">]</span> <span class=\"n\">monoid_hom</span><span class=\"bp\">.</span><span class=\"n\">map_mul</span>\n<span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"n\">to_additive</span> <span class=\"n\">add_monoid_hom</span><span class=\"bp\">.</span><span class=\"n\">map_zero</span><span class=\"o\">]</span> <span class=\"n\">monoid_hom</span><span class=\"bp\">.</span><span class=\"n\">map_one</span>\n<span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"n\">to_additive</span> <span class=\"n\">add_monoid_hom</span><span class=\"bp\">.</span><span class=\"n\">mk</span><span class=\"o\">]</span> <span class=\"n\">monoid_hom</span><span class=\"bp\">.</span><span class=\"n\">mk</span>\n<span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"n\">to_additive</span> <span class=\"n\">add_monoid_hom</span><span class=\"bp\">.</span><span class=\"n\">mk</span><span class=\"bp\">.</span><span class=\"n\">inj</span><span class=\"o\">]</span> <span class=\"n\">monoid_hom</span><span class=\"bp\">.</span><span class=\"n\">mk</span><span class=\"bp\">.</span><span class=\"n\">inj</span>\n<span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"n\">to_additive</span> <span class=\"n\">add_monoid_hom</span><span class=\"bp\">.</span><span class=\"n\">mk</span><span class=\"bp\">.</span><span class=\"n\">inj_arrow</span><span class=\"o\">]</span> <span class=\"n\">monoid_hom</span><span class=\"bp\">.</span><span class=\"n\">mk</span><span class=\"bp\">.</span><span class=\"n\">inj_arrow</span>\n<span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"n\">to_additive</span> <span class=\"n\">add_monoid_hom</span><span class=\"bp\">.</span><span class=\"n\">mk</span><span class=\"bp\">.</span><span class=\"n\">inj_eq</span><span class=\"o\">]</span> <span class=\"n\">monoid_hom</span><span class=\"bp\">.</span><span class=\"n\">mk</span><span class=\"bp\">.</span><span class=\"n\">inj_eq</span>\n<span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"n\">to_additive</span> <span class=\"n\">add_monoid_hom</span><span class=\"bp\">.</span><span class=\"n\">mk</span><span class=\"bp\">.</span><span class=\"n\">sizeof_spec</span><span class=\"o\">]</span> <span class=\"n\">monoid_hom</span><span class=\"bp\">.</span><span class=\"n\">mk</span><span class=\"bp\">.</span><span class=\"n\">sizeof_spec</span>\n<span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"n\">to_additive</span> <span class=\"n\">add_monoid_hom</span><span class=\"bp\">.</span><span class=\"n\">no_confusion</span><span class=\"o\">]</span> <span class=\"n\">monoid_hom</span><span class=\"bp\">.</span><span class=\"n\">no_confusion</span>\n<span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"n\">to_additive</span> <span class=\"n\">add_monoid_hom</span><span class=\"bp\">.</span><span class=\"n\">no_confusion_type</span><span class=\"o\">]</span> <span class=\"n\">monoid_hom</span><span class=\"bp\">.</span><span class=\"n\">no_confusion_type</span>\n<span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"n\">to_additive</span> <span class=\"n\">add_monoid_hom</span><span class=\"bp\">.</span><span class=\"n\">rec</span><span class=\"o\">]</span> <span class=\"n\">monoid_hom</span><span class=\"bp\">.</span><span class=\"n\">rec</span>\n<span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"n\">to_additive</span> <span class=\"n\">add_monoid_hom</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span><span class=\"o\">]</span> <span class=\"n\">monoid_hom</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span>\n<span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"n\">to_additive</span> <span class=\"n\">add_monoid_hom</span><span class=\"bp\">.</span><span class=\"n\">sizeof</span><span class=\"o\">]</span> <span class=\"n\">monoid_hom</span><span class=\"bp\">.</span><span class=\"n\">sizeof</span>\n<span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"n\">to_additive</span> <span class=\"n\">add_monoid_hom</span><span class=\"bp\">.</span><span class=\"n\">to_fun</span><span class=\"o\">]</span> <span class=\"n\">monoid_hom</span><span class=\"bp\">.</span><span class=\"n\">to_fun</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">monoid_hom</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">N</span><span class=\"o\">]</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">to_additive</span> <span class=\"n\">add_monoid_hom</span><span class=\"bp\">.</span><span class=\"n\">id</span><span class=\"o\">]</span> <span class=\"c1\">-- the line causing the problem</span>\n<span class=\"n\">def</span> <span class=\"n\">id</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→*</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"n\">id</span><span class=\"o\">,</span>\n  <span class=\"n\">map_one</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n  <span class=\"n\">map_mul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">rfl</span> <span class=\"o\">}</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">type mismatch at application</span>\n<span class=\"cm\">  id._proof_1 M _inst_3</span>\n<span class=\"cm\">term</span>\n<span class=\"cm\">  _inst_3</span>\n<span class=\"cm\">has type</span>\n<span class=\"cm\">  add_monoid M</span>\n<span class=\"cm\">but is expected to have type</span>\n<span class=\"cm\">  monoid M</span>\n<span class=\"cm\">-/</span>\n\n  <span class=\"kn\">end</span> <span class=\"n\">monoid_hom</span>\n</pre></div>\n\n\n<p>Can I just not expect definitions to work automatically? I don't know how to debug the error. Does it just say \"you can't do this -- you're going to have to make that definition manually and then do another bunch of <code>to_additive </code>stuff\"?</p>",
        "id": 171677632,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1564048559
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> Thanks for you amazing work. One little issue:<br>\n<a href=\"https://github.com/leanprover-community/mathlib/blob/c5128756d54f1f5207da88c6509647bbf1c57c2c/src/topology/algebra/open_subgroup.lean#L122\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/c5128756d54f1f5207da88c6509647bbf1c57c2c/src/topology/algebra/open_subgroup.lean#L122\">https://github.com/leanprover-community/mathlib/blob/c5128756d54f1f5207da88c6509647bbf1c57c2c/src/topology/algebra/open_subgroup.lean#L122</a><br>\nWhen I write <code>V.prod</code>, it says</p>\n<div class=\"codehilite\"><pre><span></span>/home/jmc/data/math/lean-perfectoid-spaces/src/for_mathlib/nonarchimedean/basic.lean:101:10: error:\ninvalid field notation, &#39;prod&#39; is not a valid &quot;field&quot; because environment does not contain &#39;open_add_subgroup.prod&#39;\n</pre></div>",
        "id": 174455045,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1567086294
    },
    {
        "content": "<p>I'm not sure where <code>open_add_subgroup.prod</code> went.</p>",
        "id": 174455436,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1567086569
    },
    {
        "content": "<p>Aaah! The auto-naming turned <code>prod</code> into <code>sum</code>.</p>",
        "id": 174455472,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1567086601
    },
    {
        "content": "<p>I'm not sure if that is what we want here.</p>",
        "id": 174455522,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1567086610
    },
    {
        "content": "<p>Can't you state by hand the additive translation and tag it afterwards?</p>",
        "id": 174455601,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1567086671
    },
    {
        "content": "<p>I sometimes do that when <code>to_additive</code> transform <code>x*y⁻¹</code> into <code>x + -y</code> instead of <code>x-y</code></p>",
        "id": 174455636,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1567086708
    },
    {
        "content": "<p>I need to relearn how to use it (-;</p>",
        "id": 174456064,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1567086972
    },
    {
        "content": "<p>How do I pass it a name nowadays?</p>",
        "id": 174456076,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1567086983
    },
    {
        "content": "<p>If I just type something after <code>to_additive</code> I get the following warning:</p>\n<div class=\"codehilite\"><pre><span></span>`to_additive topological_group.nhds_translation_mul_inv_left`: remove `name` argument\n</pre></div>",
        "id": 174456270,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1567087108
    },
    {
        "content": "<p>Coming from the following code:</p>\n<div class=\"codehilite\"><pre><span></span>@[to_additive nhds_translation_add_neg_left]\nlemma nhds_translation_mul_inv_left (g : G) :\n</pre></div>",
        "id": 174456291,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1567087134
    },
    {
        "content": "<p>The commit message from <a href=\"https://github.com/leanprover-community/mathlib/commit/c5128756d54f1f5207da88c6509647bbf1c57c2c\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/commit/c5128756d54f1f5207da88c6509647bbf1c57c2c\">https://github.com/leanprover-community/mathlib/commit/c5128756d54f1f5207da88c6509647bbf1c57c2c</a> is not very encouraging</p>",
        "id": 174456339,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1567087170
    },
    {
        "content": "<p>But I guess <code>to_additive</code> would find the correct name in your case, right?</p>",
        "id": 174456465,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1567087228
    },
    {
        "content": "<p>Aha, you have to remove all the names of all declarations that you depend on. Otherwise <code>to_additive</code> refuses to do its job.</p>",
        "id": 174456944,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1567087564
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> Cool, it works! Thanks for this very useful change!</p>",
        "id": 174457549,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1567087971
    },
    {
        "content": "<p>Hi, I should change <code>trace</code> message to “you may remove <code>name</code> argument”. It is issued, if the autogenerated name coincides with the manually provided one.</p>",
        "id": 174469089,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1567095691
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> About <code>x + -y</code> vs <code>x - y</code>: probably we should change the default <code>has_dvd</code> instance from <code>[comm_semiring α]</code> to <code>[group α]</code> in the core, and add <code>attribute [to_additive has_sub] has_dvd</code></p>",
        "id": 174469371,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1567095903
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> See also <code>Name generation</code> section of the module docstring in <code>src/algebra/group/to_additive.lean</code>.</p>",
        "id": 174469514,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1567095990
    },
    {
        "content": "<p>Briefly speaking, it tries to autogenerate the correct name. If you want to adjust the result, then you can either provide the last part of the new name (and it maps the prefix according to the current dictionary), or provide the full name.</p>",
        "id": 174469653,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1567096124
    },
    {
        "content": "<p>But that's not enough. Because it actually didn't generate anything in those cases. So in later lemmas it would say \"unknown identifier <code>so_and_so</code>\"</p>",
        "id": 174472547,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1567098401
    },
    {
        "content": "<p>Looks like a bug. Could you please repeat in which case it fails?</p>",
        "id": 174479534,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1567103133
    },
    {
        "content": "<p>Hmm, let me see. I think it was in an example like this (don't have Lean at the moment):</p>\n<div class=\"codehilite\"><pre><span></span>namespace group\nvariables {G : Type} [group G]\n\n@[to_additive add_foo]\nlemma mul_foo (g : G) : g = g := rfl\n\n@[to_additive add_bar]\nlemma mul_bar (g : G) : g = g := mul_foo g\n\nend group\n</pre></div>\n\n\n<p>I think I had homeomorphic example. And <code>mul_bar</code> would complain that it didn't know about <code>mul_foo</code>, or something like that.</p>",
        "id": 174482687,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1567105347
    },
    {
        "content": "<p>Thanks, I'll look into this tonight.</p>",
        "id": 174486393,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1567108287
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">group</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">group</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">to_additive</span><span class=\"o\">]</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">mul_foo</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">to_additive</span><span class=\"o\">]</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">mul_bar</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"n\">mul_foo</span> <span class=\"n\">g</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">group</span>\n</pre></div>\n\n\n<p>works for me</p>",
        "id": 174486541,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1567108385
    },
    {
        "content": "<p>If someone could diagnose what's going on with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.prod_take_mul_prod_drop\">docs#list.prod_take_mul_prod_drop</a> in <a href=\"https://github.com/leanprover-community/mathlib/pull/15676\">#15676</a>, that would be greatly appreciated. <code>to_additive</code> tries (and obviously fails) to additivize a <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_ordered_comm_monoid_with_zero\">docs#linear_ordered_comm_monoid_with_zero</a> instance, but the lemma doesn't mention them anywhere! I suspect what's going on is that I removed <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.le_zero_iff\">docs#nat.le_zero_iff</a> in favor of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/le_zero_iff\">docs#le_zero_iff</a>, and it tries to additivize it?</p>",
        "id": 290752407,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1658752221
    },
    {
        "content": "<p>Are those the same link?</p>",
        "id": 290752697,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1658752395
    },
    {
        "content": "<p>Fixed, sorry</p>",
        "id": 290752727,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1658752415
    },
    {
        "content": "<p>yeah, it's that. you just have to squeeze the simps and then make it like <code>@le_zero_iff ℕ</code></p>",
        "id": 290753018,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1658752572
    },
    {
        "content": "<p>see the source of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/monoid.exponent_exists_iff_ne_zero\">docs#monoid.exponent_exists_iff_ne_zero</a></p>",
        "id": 290753240,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1658752708
    },
    {
        "content": "<p>Eric, you can type <a href=\"https://leanprover-community.github.io/mathlib_docs/find/monoid.exponent_exists_iff_ne_zero/src\">src#monoid.exponent_exists_iff_ne_zero</a> directly <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 290753319,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1658752757
    },
    {
        "content": "<p>woah that's neat</p>",
        "id": 290753394,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1658752802
    },
    {
        "content": "<p>the old thread: <a href=\"#narrow/stream/113488-general/topic/to_additive.20.26.20exponents\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/to_additive.20.26.20exponents</a></p>",
        "id": 290753629,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1658752924
    }
]