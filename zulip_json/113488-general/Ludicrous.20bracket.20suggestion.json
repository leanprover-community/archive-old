[
    {
        "content": "<p>So I go around schools in the UK giving talks about Lean. In one of these talks I define <code>nat</code> as an inductive type and show schoolkids several ways of proving <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2</mn><mo>+</mo><mn>2</mn><mo>=</mo><mn>4</mn></mrow><annotation encoding=\"application/x-tex\">2+2=4</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">4</span></span></span></span>. </p>\n<p>One thing in Lean which is a bit distracting for people who aren't used to engaging with computers is the boilerplate. For example I might define <code>nat.add</code> and then apologise for <code>instance : has_add nat := \\&lt;nat.add\\&gt;</code>.  Another thing which is a bit distracting for people with a mathematical background is this functional programming trick where you guys write <code>f x</code> instead of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f(x)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span></span>, the former being a notation which is not taught at all at schools in the UK. In the past when giving the nat talk I would have to apologise about the lack of brackets, but nowadays I have to apologise about both the lack of brackets and the boilerplate, as I write <code>attribute [pp_nodot] mynat.S</code> to stop Lean unfolding <code>one</code> to <code>zero.S</code> and then it still writes <code>S zero</code> instead of <code>S(zero)</code>, even though I'd just spent 2 minutes explanining that <code>S</code> is a function (the successor function). </p>\n<p>It just occurred to me that it might be possible for someone (unfortunately not me, unless I'm super-guided by someone!) to write <code>attribute [pp_math_brackets_ftw] mynat.S</code> so that <code>four</code> unfolds to <code>S(three)</code> in the prettyprinter. I cannot imagine anyone in CS using this, but given that right now I have to add a line of boilerplate to switch off dot notation (I can't hide it behind an import because I want to create the inductive type live) so I was wondering whether I could kill these two very minor annoyances with one stone. In talks on other subjects I might just start with \"import tactic; open_locale classical\" or whatever (at the beginning, where it's Ok to be incomprehensible because I can just make a joke about \"switching Lean on\" and tell people to ignore it). I guess even <code>open_locale never_dot_notation</code> would be a step in the right direction because then the distracting noise happens before we've got into the meat of the talk.</p>",
        "id": 240576239,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622191354
    },
    {
        "content": "<blockquote>\n<p>I guess even <code>open_locale never_dot_notation</code> would be a step [...]</p>\n</blockquote>\n<p>You can do <code>set_option pp.generalized_field_notation false</code>.</p>",
        "id": 240576383,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1622191468
    },
    {
        "content": "<p>Note that <code>S(zero)</code> won't parse in Lean 4 (unless you create your own macro).</p>",
        "id": 240576405,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1622191491
    },
    {
        "content": "<p>Is there a conflict for <code>S(zero)</code> in lean 4, or is this just lean 4 being opinionated?</p>",
        "id": 240576479,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1622191554
    },
    {
        "content": "<p>I think we had this in the lean4 channel the other day.  No spaces before parens means macro now.</p>",
        "id": 240576643,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1622191669
    },
    {
        "content": "<p>yes, but that's just a convention. I can't imagine that it causes much more issue than the occasional name conflict if you have a function called <code>nat_lit</code> or something</p>",
        "id": 240576750,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1622191746
    },
    {
        "content": "<p>Right, it's an unambiguous convention because <code>S(zero)</code> doesn't parse as an application.</p>",
        "id": 240576930,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1622191862
    },
    {
        "content": "<p>My question is what would happen if we allowed (or even enforced, as in Kevin's suggestion) writing applications using <code>f(x)</code> style</p>",
        "id": 240577105,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1622191956
    },
    {
        "content": "<p>possibly using a syntax extension</p>",
        "id": 240577124,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1622191972
    },
    {
        "content": "<p>there aren't that many macros and they have funny names so the conflict there seems not so important</p>",
        "id": 240577169,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1622192003
    },
    {
        "content": "<p>I believe you can add priorities to parsers, so maybe you can add old-school function syntax without breaking macros.</p>",
        "id": 240577174,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1622192007
    },
    {
        "content": "<p>This is interesting, because when I am doing live coding in front of either mathematicians or schoolkids I always put the brackets in (e.g. I define one := S(zero), two := S(one) etc, and hang the prettyprinter because nobody can see it when I'm doing this)</p>",
        "id": 240577741,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622192277
    },
    {
        "content": "<p>Am I right that in Lean 4 you'll just need to add a space, i.e., <code>S (zero)</code> instead of <code>S(zero)</code>? This is more readable in any case, so you should already be doing this in Lean 3 :-)</p>",
        "id": 240577930,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1622192396
    },
    {
        "content": "<p>I don't see you putting this space in any of your math papers Sebastien?</p>",
        "id": 240577998,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622192424
    },
    {
        "content": "<p>solution: zero-width space</p>",
        "id": 240578203,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1622192555
    },
    {
        "content": "<p>Another trick I've used is that <code>S(S(S(zero)))</code> is pretty-printed as <code>S (S (S zero)))</code> and if you use enough <code>S</code>s it's far harder to spot the missing bracket in the middle.</p>",
        "id": 240578260,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622192606
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/Ludicrous.20bracket.20suggestion/near/240577998\">said</a>:</p>\n<blockquote>\n<p>I don't see you putting this space in any of your math papers Sebastien?</p>\n</blockquote>\n<p>Of course I do in tex sources. Then latex knows what to do here (i.e., ignore whitespace between dollars, but insert a thin space).</p>",
        "id": 240578426,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1622192717
    },
    {
        "content": "<p>(To be honest, I just checked my last paper, and the first I find is <code>$\\liminf d(o, Z_n \\cdot o)/n \\geq \\kappa$</code>, so, without the space :-)</p>",
        "id": 240578706,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1622192893
    },
    {
        "content": "<p>Using <code>≥</code> too, that expression better be inside a quantifier.</p>",
        "id": 240579730,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1622193586
    },
    {
        "content": "<p>yeah, I had forgotten you were allowed to use <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>≥</mo></mrow><annotation encoding=\"application/x-tex\">\\geq</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mrel\">≥</span></span></span></span> IRL.</p>",
        "id": 240580028,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622193753
    }
]