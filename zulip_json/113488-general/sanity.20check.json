[
    {
        "content": "<p>I'm working a bit on the <a href=\"https://gist.github.com/fpvandoorn/04837ea7f20479bcac9a99539d2c17b3\" target=\"_blank\" title=\"https://gist.github.com/fpvandoorn/04837ea7f20479bcac9a99539d2c17b3\">#sanity_check cleanup</a> of topology. <span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> Is there a reason why the command is not imported by default? Each file needs to add an import and then remember to remove it. It would also help tremendously if the command could print the type of the unused argument instead of only the number. But it's already very nice! What is weird is that removing useless type classes can have unexpected consequences on elaboration later one. I already had to add a couple of <code>apply_instance</code>.</p>",
        "id": 174342907,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1566981051
    },
    {
        "content": "<p>Maybe we could have a hole command dumping the output of #sanity_check into the Lean file, that would save a copy-paste</p>",
        "id": 174343061,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1566981242
    },
    {
        "content": "<p>Another potential improvement: when the command find an unused argument, check whether it's duplicated and report it.</p>",
        "id": 174343122,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1566981325
    },
    {
        "content": "<p>Thanks for actually cleaning up the library!</p>",
        "id": 174367405,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1567002367
    },
    {
        "content": "<p>I indeed forgot to add an import to <code>tactic.basic</code>. I will do that. The other improvements also seem doable.</p>",
        "id": 174367416,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1567002374
    },
    {
        "content": "<p>It would be very nice to enter a self-sustaining cycle of cleanup/sanity_check improvements</p>",
        "id": 174367540,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1567002458
    },
    {
        "content": "<p>One disadvantage with a hole command is that you cannot write a hole when a command is expected, but only where an expression is expected. So you have to write something like <code>run_cmd {!!}</code> or <code>example : {!!}</code>. And then after the hole command replaces itself, you still have a broken <code>run_cmd</code> or <code>example</code>...</p>",
        "id": 174387055,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1567015420
    },
    {
        "content": "<p>Added all feature requests (except the self-sustaining cycle of cleanup/sanity_check improvements) in <a href=\"https://github.com/leanprover-community/mathlib/issues/1369\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/1369\">#1369</a>.</p>",
        "id": 174403421,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1567028280
    },
    {
        "content": "<p>The unused argument command will now return something like</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">-- tactic\\core.lean</span>\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">symmetry_hyp</span> <span class=\"c\">/-</span><span class=\"cm\"> argument 2: (md : opt_param transparency transparency.semireducible) -/</span>\n\n<span class=\"c1\">-- meta\\rb_map.lean</span>\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">native</span><span class=\"bp\">.</span><span class=\"n\">rb_map</span><span class=\"bp\">.</span><span class=\"n\">find_def</span> <span class=\"c\">/-</span><span class=\"cm\"> argument 4: [_inst_2 : decidable_rel has_lt.lt] -/</span>\n\n<span class=\"c1\">-- logic\\basic.lean</span>\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">imp_intro</span> <span class=\"c\">/-</span><span class=\"cm\"> argument 4: (h₂ : β) -/</span>\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">not_iff</span> <span class=\"c\">/-</span><span class=\"cm\"> argument 3: [_inst_1 : decidable a] -/</span>\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">ball_of_forall</span> <span class=\"c\">/-</span><span class=\"cm\"> argument 6: (_x : q x) -/</span>\n\n<span class=\"c1\">-- data\\list\\defs.lean</span>\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">func</span><span class=\"bp\">.</span><span class=\"n\">neg</span> <span class=\"c\">/-</span><span class=\"cm\"> argument 2: [_inst_1 : inhabited α] -/</span>\n\n<span class=\"c1\">-- category\\basic.lean</span>\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">map_seq</span> <span class=\"c\">/-</span><span class=\"cm\"> argument 6: [_inst_2 : is_lawful_applicative F] (duplicate) -/</span>\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">seq_map_assoc</span> <span class=\"c\">/-</span><span class=\"cm\"> argument 6: [_inst_2 : is_lawful_applicative F] (duplicate) -/</span>\n</pre></div>",
        "id": 174405436,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1567030046
    },
    {
        "content": "<p>I also added a new check: whether a namespace occurs twice in the name:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">-- tactic\\core.lean</span>\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">has_to_tactic_format</span> <span class=\"c\">/-</span><span class=\"cm\"> The namespace tactic is duplicated in the name -/</span>\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">use</span> <span class=\"c\">/-</span><span class=\"cm\"> The namespace tactic is duplicated in the name -/</span>\n</pre></div>",
        "id": 174405553,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1567030132
    },
    {
        "content": "<p>Fun fact: for this improvement I had to <a href=\"https://github.com/leanprover-community/mathlib/pull/1369/files#diff-59de0008ca25270e4603707014bf0ba1R398\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/pull/1369/files#diff-59de0008ca25270e4603707014bf0ba1R398\">remove an unused argument</a> from the instance <code>list.decidable_chain'</code> <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 174405699,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1567030239
    },
    {
        "content": "<p>Amazing! I promise I'll the topology fix as soon as this gets merged.</p>",
        "id": 174447205,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1567080628
    },
    {
        "content": "<p>I'm getting deterministic timeouts if I run <code>#sanity_check</code> at the bottom of <a href=\"https://github.com/leanprover-community/lean-perfectoid-spaces/blob/master/src/adic_space.lean\" target=\"_blank\" title=\"https://github.com/leanprover-community/lean-perfectoid-spaces/blob/master/src/adic_space.lean\">https://github.com/leanprover-community/lean-perfectoid-spaces/blob/master/src/adic_space.lean</a></p>",
        "id": 174733345,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1567445937
    },
    {
        "content": "<p>That's not good. I'll take a look.<br>\nWhich of the following get a timeout?</p>\n<div class=\"codehilite\"><pre><span></span>run_cmd print_decls_current_file prettify_unused_arguments &gt;&gt;= trace\nrun_cmd print_decls_current_file incorrect_def_lemma &gt;&gt;= trace\nrun_cmd print_decls_current_file dup_namespace &gt;&gt;= trace\n</pre></div>",
        "id": 174735054,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1567448220
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> </p>\n<div class=\"codehilite\"><pre><span></span>type mismatch at application\n  print_decls_current_file prettify_unused_arguments &gt;&gt;= trace\nterm\n  trace\nhas type\n  string → thunk ?m_1 → ?m_1 : Type ?\nbut is expected to have type\n  format → tactic ?m_1 : Type\n</pre></div>",
        "id": 174735944,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1567449577
    },
    {
        "content": "<p>oh yes, it should be <code>tactic.trace</code>.</p>",
        "id": 174736027,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1567449697
    },
    {
        "content": "<p>1sec</p>",
        "id": 174736030,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1567449712
    },
    {
        "content": "<p>I'm also building the project myself rn.</p>",
        "id": 174736079,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1567449744
    },
    {
        "content": "<p>None of them time out</p>",
        "id": 174736083,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1567449768
    },
    {
        "content": "<p>Ok, then for the moment you can use those, they give the same information. I'll make <code>#sanity_check</code> more efficient (currently I'm running through the whole environment 3 times)</p>",
        "id": 174736105,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1567449821
    },
    {
        "content": "<p>They don't print anything at all... which might mean our code is sane...</p>",
        "id": 174736192,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1567449929
    },
    {
        "content": "<p>Yes, I just ran them myself, and that file in sane :)</p>",
        "id": 174736377,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1567450146
    },
    {
        "content": "<p>Can you reproduce the timeout?</p>",
        "id": 174736473,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1567450244
    },
    {
        "content": "<p>yes</p>",
        "id": 174736863,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1567450796
    },
    {
        "content": "<p>I managed to speed up <code>#sanity_check</code> by about 2 orders of magnitude. (it now takes 100-200ms in <code>adic_space</code>)</p>\n<p>One of the slowdowns was surprising me: if you run <code>if p ∧ q then ... else ...</code> and <code>p</code> is false, then <code>q</code> will also be checked. You have to use <code>&amp;&amp;</code> instead:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">open</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">set_option</span> <span class=\"n\">profiler</span> <span class=\"n\">true</span>\n<span class=\"c1\">-- very fast</span>\n<span class=\"n\">run_cmd</span> <span class=\"n\">do</span> <span class=\"n\">e</span> <span class=\"err\">←</span> <span class=\"n\">get_env</span><span class=\"o\">,</span> <span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">mfold</span> <span class=\"o\">[]</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">d</span> <span class=\"n\">ds</span><span class=\"o\">,</span> <span class=\"n\">return</span> <span class=\"err\">$</span> <span class=\"k\">if</span> <span class=\"n\">ff</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">d</span><span class=\"bp\">.</span><span class=\"n\">is_auto_generated</span> <span class=\"n\">e</span> <span class=\"k\">then</span> <span class=\"n\">d</span><span class=\"bp\">::</span><span class=\"n\">ds</span> <span class=\"k\">else</span> <span class=\"n\">ds</span>\n<span class=\"c1\">-- very slow (assuming you are importing enough files)</span>\n<span class=\"n\">run_cmd</span> <span class=\"n\">do</span> <span class=\"n\">e</span> <span class=\"err\">←</span> <span class=\"n\">get_env</span><span class=\"o\">,</span> <span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">mfold</span> <span class=\"o\">[]</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">d</span> <span class=\"n\">ds</span><span class=\"o\">,</span> <span class=\"n\">return</span> <span class=\"err\">$</span> <span class=\"k\">if</span> <span class=\"n\">ff</span> <span class=\"bp\">∧</span> <span class=\"n\">d</span><span class=\"bp\">.</span><span class=\"n\">is_auto_generated</span> <span class=\"n\">e</span> <span class=\"k\">then</span> <span class=\"n\">d</span><span class=\"bp\">::</span><span class=\"n\">ds</span> <span class=\"k\">else</span> <span class=\"n\">ds</span>\n</pre></div>",
        "id": 174739957,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1567455232
    },
    {
        "content": "<p>I wonder why. Is <code>and_decidable</code> doing something dumb?</p>",
        "id": 174745688,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1567463449
    },
    {
        "content": "<p>I checked, and it looks fine.</p>",
        "id": 174745774,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1567463617
    },
    {
        "content": "<p>Yeah, I couldn't understand either.</p>",
        "id": 174746101,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1567464177
    },
    {
        "content": "<p>Are we talking about the kernel or the VM here?</p>",
        "id": 174747159,
        "sender_full_name": "Reid Barton",
        "timestamp": 1567465867
    },
    {
        "content": "<p>Looks like the VM, I guess, since it's inside a <code>run_cmd</code>.</p>",
        "id": 174747276,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1567466097
    },
    {
        "content": "<p>I admit I have no idea what the VM does when it sees <code>if</code> or <code>∧</code>.</p>",
        "id": 174747287,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1567466125
    },
    {
        "content": "<p>It's actually surprising that either one is short circuiting. It's probably because of inlining</p>",
        "id": 174747570,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567466640
    },
    {
        "content": "<p>The standard semantics of lean would require that both sides of the and be evaluated before the function is called (i.e. eager evaluation)</p>",
        "id": 174747613,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567466683
    },
    {
        "content": "<p>One way to force delayed evaluation is to use a thunk</p>",
        "id": 174747626,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567466754
    },
    {
        "content": "<p>Yeah, in the proof of <code>and_decidable</code> it probably evaluates the <code>then</code> clause before it evaluates the <code>if-then-else</code>. We should indeed rewrite it using a thunk.</p>",
        "id": 174750270,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1567471629
    },
    {
        "content": "<p>Why is this super fast in that case?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">ack</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"n\">nat</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span>     <span class=\"n\">y</span>     <span class=\"o\">:=</span> <span class=\"n\">y</span><span class=\"bp\">+</span><span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"mi\">0</span>     <span class=\"o\">:=</span> <span class=\"n\">ack</span> <span class=\"n\">x</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">ack</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">ack</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">false</span> <span class=\"k\">then</span> <span class=\"n\">ack</span> <span class=\"mi\">100</span> <span class=\"mi\">100</span> <span class=\"k\">else</span> <span class=\"mi\">0</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">X</span>\n</pre></div>",
        "id": 174764440,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1567495310
    },
    {
        "content": "<p><code>if</code> uses thunks</p>",
        "id": 174764694,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567495575
    },
    {
        "content": "<p>So why is the <code>and.decidable</code> instance slow?</p>",
        "id": 174764711,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1567495625
    },
    {
        "content": "<p>it uses thunks on the then and else branches, not on the condition (which must be evaluated first)</p>",
        "id": 174764727,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567495659
    },
    {
        "content": "<p>So that means it shouldn't be slow right?</p>",
        "id": 174764798,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1567495727
    },
    {
        "content": "<p>The difference is that <code>band</code> is <code>@[inline]</code> and <code>and.decidable</code> isn't</p>",
        "id": 174764812,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567495746
    },
    {
        "content": "<p>I recommend looking at the generated bytecode</p>",
        "id": 174764830,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567495780
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"n\">ff</span>\n<span class=\"kn\">set_option</span> <span class=\"n\">trace</span><span class=\"bp\">.</span><span class=\"n\">compiler</span><span class=\"bp\">.</span><span class=\"n\">optimize_bytecode</span> <span class=\"n\">true</span>\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"k\">if</span> <span class=\"n\">false</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">foo</span> <span class=\"k\">then</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"mi\">0</span>\n<span class=\"c1\">-- [compiler.optimize_bytecode]  _main 0</span>\n<span class=\"c1\">-- 0: scnstr #1</span>\n<span class=\"c1\">-- 1: ginvoke decidable.false</span>\n<span class=\"c1\">-- 2: scnstr #0</span>\n<span class=\"c1\">-- 3: ginvoke decidable.to_bool</span>\n<span class=\"c1\">-- 4: cases2 7</span>\n<span class=\"c1\">-- 5: scnstr #0</span>\n<span class=\"c1\">-- 6: goto 12</span>\n<span class=\"c1\">-- 7: ginvoke foo</span>\n<span class=\"c1\">-- 8: cases2 11</span>\n<span class=\"c1\">-- 9: scnstr #0</span>\n<span class=\"c1\">-- 10: goto 12</span>\n<span class=\"c1\">-- 11: scnstr #1</span>\n<span class=\"c1\">-- 12: ginvoke bool.decidable_eq._main</span>\n<span class=\"c1\">-- 13: cases2 16</span>\n<span class=\"c1\">-- 14: scnstr #0</span>\n<span class=\"c1\">-- 15: goto 17</span>\n<span class=\"c1\">-- 16: scnstr #1</span>\n<span class=\"c1\">-- 17: cfun nat.repr</span>\n<span class=\"c1\">-- 18: ret</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"k\">if</span> <span class=\"n\">false</span> <span class=\"bp\">∧</span> <span class=\"n\">foo</span> <span class=\"k\">then</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"mi\">0</span>\n<span class=\"c1\">-- [compiler.optimize_bytecode]  _main 0</span>\n<span class=\"c1\">-- 0: scnstr #1</span>\n<span class=\"c1\">-- 1: ginvoke foo</span>\n<span class=\"c1\">-- 2: ginvoke bool.decidable_eq._main</span>\n<span class=\"c1\">-- 3: ginvoke decidable.false</span>\n<span class=\"c1\">-- 4: scnstr #0</span>\n<span class=\"c1\">-- 5: scnstr #0</span>\n<span class=\"c1\">-- 6: ginvoke and.decidable</span>\n<span class=\"c1\">-- 7: cases2 10</span>\n<span class=\"c1\">-- 8: scnstr #0</span>\n<span class=\"c1\">-- 9: goto 11</span>\n<span class=\"c1\">-- 10: scnstr #1</span>\n<span class=\"c1\">-- 11: cfun nat.repr</span>\n<span class=\"c1\">-- 12: ret</span>\n</pre></div>\n\n\n<p>Notice in the second one that there is an explicit call to <code>and.decidable</code> at line 6, which needs <code>foo</code> to be called first (line 1). In the second one there is no call to <code>band</code> at all; instead it's all been inlined to an if-then (the <code>cases2</code> at line 4) and the call to <code>foo</code> only happens in the second branch (line 7)</p>",
        "id": 174765151,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567496153
    },
    {
        "content": "<p>If you use <code>ff</code> instead of <code>false</code> in these examples, the call to <code>foo</code> disappears entirely, because lean optimizes <code>ff &amp;&amp; foo</code> to <code>ff</code> directly after unfolding the definition of <code>&amp;&amp;</code></p>",
        "id": 174765218,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567496202
    },
    {
        "content": "<p>If you use <code>attribute [inline] decidable.false and.decidable</code> then you get the expected code</p>",
        "id": 174765297,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567496321
    },
    {
        "content": "<p>arguably that should have been set</p>",
        "id": 174765304,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567496338
    },
    {
        "content": "<p>We can provide a higher priority instance that inclines, can't we?</p>",
        "id": 174766438,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1567497597
    },
    {
        "content": "<p>I think we can just add the line <code>attribute [inline] and.decidable or.decidable decidable.false</code> to some file that everything imports. Shall I add it to <code>logic/basic</code>? Are there other declarations that need the <code>[inline]</code> attribute?</p>",
        "id": 174804525,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1567527848
    },
    {
        "content": "<p><code>logic.basic</code> looks like a good place for it. The initial part contains a few other \"omissions\" from the core logic library</p>",
        "id": 174812215,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567532735
    },
    {
        "content": "<p>Inline annotations are a bit of a black art. Probably implies.decidable is also good, definitely not.decidable, not so sure about iff and xor but I'm leaning toward inlining them</p>",
        "id": 174812478,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567532893
    },
    {
        "content": "<p>also <code>decidable.true</code> of course</p>",
        "id": 174812680,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567533037
    },
    {
        "content": "<p>Added them to <a href=\"https://github.com/leanprover-community/mathlib/issues/1393\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/1393\">#1393</a>.</p>",
        "id": 174815534,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1567534938
    },
    {
        "content": "<p>Do you think <code>decidable.to_bool</code>should be added?</p>",
        "id": 174817482,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1567536232
    },
    {
        "content": "<p>It should be the identity function, although I'm not sure if lean knows to render it as such</p>",
        "id": 174820201,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567538012
    },
    {
        "content": "<p>I don't think so. I think it will then run both <code>decidable.to_bool</code> and <code>bool.decidable_eq</code>.</p>",
        "id": 174893034,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1567610937
    },
    {
        "content": "<p>I have started using sanity_check to clean up some files, and I found it super-useful. Just for the record, two small additions that I would find worthy:</p>\n<ul>\n<li>define an attribute <code>sanity_check_skip</code> for statements that should be skipped by <code>sanity_check</code>. For instance, <code>theorem imp_intro {α β} (h : α) (h₂ : β) : α := h</code> in <code>logic/basic.lean</code> has an unused argument by design. Or in fiber bundles the function <code>topological_fiber_bundle.fiber</code> has a lot of unused arguments, but this is to get a new name for a type, in order for typeclass inference to work correctly. If we don't add such an attribute, they will show up forever in the output of <code>sanity_check</code>.</li>\n<li>would it be possible to show as a mistake the use of <code>&gt;</code> or <code>&gt;=</code> in the assumptions or conclusions of theorems? Rewrites would be really easier if <code>&lt;</code> and <code>&lt;=</code> were used consistently all over mathlib, and I think this is a move we will have to do some day.</li>\n</ul>",
        "id": 175221568,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1568015773
    },
    {
        "content": "<ul>\n<li>I was indeed thinking that some declarations would show up forever in the output of <code>sanity_check</code>, but it's actually a good idea to whitelist declarations that we know are fine.</li>\n<li>Yes, it is easy to check whether <code>&gt;</code>/<code>&gt;=</code> (i.e. <code>ge</code>/<code>gt</code>) are used in lemma statements. Are there other declarations we want to always avoid in lemma statements?</li>\n</ul>",
        "id": 175307530,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1568092807
    },
    {
        "content": "<p>So is the attribute suppressing output of <code>#sanity_check</code> going to be <code>@[sane]</code> or <code>@[insane]</code>? :-)</p>",
        "id": 175307666,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1568093072
    },
    {
        "content": "<p>By analogy to Rust's <code>unsafe</code> block, which brackets code that is safe but for which the programmer, not the compiler, ensures safety, it seems that <code>insane</code> is the correct polarity</p>",
        "id": 175312240,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1568099537
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> Thanks for the updated list at <a href=\"https://gist.github.com/semorrison/16d80d2cd154f6473af57b0c9e6912bb\" target=\"_blank\" title=\"https://gist.github.com/semorrison/16d80d2cd154f6473af57b0c9e6912bb\">https://gist.github.com/semorrison/16d80d2cd154f6473af57b0c9e6912bb</a><br>\nI see quite a lot of unused <code>decidable_eq</code>s listed there (-; <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> These reports are really useful.</p>",
        "id": 176434050,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1569303470
    },
    {
        "content": "<p>I hope to find time to kill some of them</p>",
        "id": 176434056,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1569303479
    },
    {
        "content": "<p>I added <span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span>'s suggestions to <code>#sanity_check</code> in <a href=\"https://github.com/leanprover-community/mathlib/issues/1487\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/1487\">#1487</a>, and made some other improvements. I went for the attribute name <code>[sanity_skip]</code>.</p>",
        "id": 176512733,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1569363911
    }
]