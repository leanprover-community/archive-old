[
    {
        "content": "<p>I am trying to define an instance by adding a field to an existing instance, in an example like the following</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">order.lattice_intervals</span>\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">Icc.distrib_lattice</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">distrib_lattice</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">distrib_lattice</span> <span class=\"o\">(</span><span class=\"n\">Icc</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">le_sup_inf</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">cases</span> <span class=\"n\">x</span> <span class=\"k\">with</span> <span class=\"n\">x₀</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">y</span> <span class=\"k\">with</span> <span class=\"n\">y₀</span> <span class=\"n\">hy</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">z</span> <span class=\"k\">with</span> <span class=\"n\">z₀</span> <span class=\"n\">hz</span><span class=\"o\">,</span> <span class=\"gr\">sorry</span> <span class=\"o\">},</span>\n<span class=\"bp\">..</span> <span class=\"n\">Icc.lattice</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>Before the <code>sorry</code>, my goal is <br>\n<code>⊢ (⟨x₀, hx⟩ ⊔ ⟨y₀, hy⟩) ⊓ (⟨x₀, hx⟩ ⊔ ⟨z₀, hz⟩) ≤ ⟨x₀, hx⟩ ⊔ ⟨y₀, hy⟩ ⊓ ⟨z₀, hz⟩</code>.</p>\n<p>I can't find any rewrite/simp/unfold-type statement to access the definition of ⊔, that is, <code>⟨x₀, hx⟩ ⊔ ⟨y₀, hy⟩ = ⟨x₀ ⊔ y₀,  _⟩</code>. How do I do this? </p>\n<p>Similarly, is there a way to handle goals like this without the <code>cases</code>? </p>\n<p>(This is a MWE; in fact <code>le_sup_inf := λ x y z, distrib_lattice.le_sup_inf</code>works above; but only because of defeq. How would I handle a less trivial goal?).</p>",
        "id": 284735101,
        "sender_full_name": "Peter Nelson",
        "timestamp": 1654172344
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/subtype.coe_le_coe\">docs#subtype.coe_le_coe</a> (in reverse) should make progress</p>",
        "id": 284816619,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1654211377
    },
    {
        "content": "<p>I think you can maybe just <a href=\"https://leanprover-community.github.io/mathlib_docs/find/function.injective.distrib_lattice\">docs#function.injective.distrib_lattice</a> here with <code>f = coe</code></p>",
        "id": 284816713,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1654211459
    }
]