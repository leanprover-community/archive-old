[
    {
        "content": "<p>Can someone try</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">tidy</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Y</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"err\">∘</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"n\">id</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">axiom_of_choice</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">g</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"n\">tidy</span><span class=\"o\">,</span>\n <span class=\"kn\">end</span>\n</pre></div>",
        "id": 135060203,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1538510483
    },
    {
        "content": "<p>Here it says <code>no goals</code> after <code>tidy</code> but red-squiggle <code>example</code> with <code>type mismatch at application  g a term  a has type  Y_1 but is expected to have type   Y types contain aliased name(s): Y remark: the tactic `dedup` can be used to rename aliases</code></p>",
        "id": 135060275,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1538510560
    },
    {
        "content": "<blockquote>\n<p>Here it says <code>no goals</code> after <code>tidy</code> but red-squiggle <code>example</code> with <code>type mismatch at application  g a term  a has type  Y_1 but is expected to have type   Y types contain aliased name(s): Y remark: the tactic `dedup` can be used to rename aliases</code></p>\n</blockquote>\n<p>I get the same.</p>",
        "id": 135060435,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1538510741
    },
    {
        "content": "<p>Let's wait for <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> to wake up, or finish lunch, or whatever it's time to do in Australia</p>",
        "id": 135060519,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1538510821
    },
    {
        "content": "<p>Here's the trace:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c\">/-</span><span class=\"cm\"> `tidy` says -/</span>\n<span class=\"n\">dsimp</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n<span class=\"n\">fsplit</span><span class=\"o\">,</span>\n<span class=\"n\">work_on_goal</span> <span class=\"mi\">0</span> <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"o\">},</span>\n<span class=\"n\">work_on_goal</span> <span class=\"mi\">1</span> <span class=\"o\">{</span> <span class=\"n\">ext1</span><span class=\"o\">,</span> <span class=\"n\">dsimp</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">solve_by_elim</span> <span class=\"o\">}</span>\n</pre></div>",
        "id": 135060631,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1538510903
    },
    {
        "content": "<p>I'm working on that demo file we discussed earlier, trying to see what general purpose automation can do what. The problem with magic is it's somewhat unpredictable. It seems <code>finish</code> is pretty powerful in those example, but I'd like to understand when <code>tidy</code> or <code>tauto</code> actually also work (or even work better)</p>",
        "id": 135060646,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1538510926
    },
    {
        "content": "<p>Good idea Bryan!</p>",
        "id": 135060745,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1538511006
    },
    {
        "content": "<p>Not sure if I misunderstand the meaning of the trace, but throwing it in as a proof fails at the first <code>dsimp</code></p>",
        "id": 135060767,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1538511022
    },
    {
        "content": "<p>It's very strange to follow, it seems hopeless and then <code>solve_by_elim</code> pretends to get rid of all meta-vars and do the job</p>",
        "id": 135060783,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1538511046
    },
    {
        "content": "<p>here I get exactly the same result as with tidy itself</p>",
        "id": 135060810,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1538511077
    },
    {
        "content": "<p>google says Scott may be sleeping</p>",
        "id": 135060834,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1538511107
    },
    {
        "content": "<p>I see this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">tidy</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Y</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"err\">∘</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"n\">id</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">dsimp</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>  <span class=\"c1\">-- squiggly line under dsimp</span>\n<span class=\"c\">/-</span><span class=\"cm\"> Tactic State</span>\n<span class=\"cm\">X Y : Type,</span>\n<span class=\"cm\">f : X → Y,</span>\n<span class=\"cm\">h : ∀ (y : Y), ∃ (x : X), f x = y</span>\n<span class=\"cm\">⊢ ∃ (g : Y → X), f ∘ g = id</span>\n<span class=\"cm\">scratch.lean:14:0: error</span>\n<span class=\"cm\">dsimplify tactic failed to simplify</span>\n<span class=\"cm\">state:</span>\n<span class=\"cm\">⊢ ∀ (X Y : Type) (f : X → Y), (∀ (y : Y), ∃ (x : X), f x = y) → (∃ (g : Y → X), f ∘ g = id) -/</span>\n<span class=\"n\">fsplit</span><span class=\"o\">,</span>\n<span class=\"n\">work_on_goal</span> <span class=\"mi\">0</span> <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"o\">},</span>\n<span class=\"n\">work_on_goal</span> <span class=\"mi\">1</span> <span class=\"o\">{</span> <span class=\"n\">ext1</span><span class=\"o\">,</span> <span class=\"n\">dsimp</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">solve_by_elim</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 135060897,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1538511178
    },
    {
        "content": "<p>you erased too much</p>",
        "id": 135060910,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1538511194
    },
    {
        "content": "<p>the choice idea is required</p>",
        "id": 135060915,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1538511202
    },
    {
        "content": "<p>Oops!</p>",
        "id": 135060932,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1538511231
    },
    {
        "content": "<p>Yes, now I see the same.  </p>\n<p>Nothing seems strange with the intermediate tactic states. Is there a way to use the <code>discharger</code> option for <code>solve_by_elim</code> to make it spit out what it's doing at each stage?</p>",
        "id": 135061725,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1538512015
    },
    {
        "content": "<p>How is it possible that none of our general purpose weapon can kill</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"err\">∘</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"n\">id</span> <span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">y</span>\n</pre></div>",
        "id": 135061835,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1538512165
    },
    {
        "content": "<p>I don't use weapons :P</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"err\">∘</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"n\">id</span> <span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">congr_fun</span> <span class=\"n\">h</span> <span class=\"n\">y</span>\n</pre></div>",
        "id": 135061909,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538512223
    },
    {
        "content": "<p>Kenny, this is exactly what I did at <a href=\"https://github.com/PatrickMassot/lean-scratchpad/blob/master/src/demo.lean#L60\" target=\"_blank\" title=\"https://github.com/PatrickMassot/lean-scratchpad/blob/master/src/demo.lean#L60\">https://github.com/PatrickMassot/lean-scratchpad/blob/master/src/demo.lean#L60</a> but I'm trying to rewrite this file using automation, for comparison</p>",
        "id": 135061953,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1538512282
    },
    {
        "content": "<p>I guess this is again because tactic writers don't like function equalities, especially with compositions</p>",
        "id": 135062010,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1538512326
    },
    {
        "content": "<p>Replacing <code>solve_by_elim</code> with <code>apply_assumption</code> gives the same strange behavior.</p>",
        "id": 135062015,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1538512330
    },
    {
        "content": "<p>Higher order reasoning is hard!</p>",
        "id": 135062022,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1538512343
    },
    {
        "content": "<p><code>finish</code> and its friends could try to turn each function equality assumption into a forall</p>",
        "id": 135062062,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1538512400
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"err\">∘</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">id</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Y</span><span class=\"o\">):</span>\n  <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">finish</span>\n</pre></div>\n\n\n<p>does work</p>",
        "id": 135062136,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1538512456
    },
    {
        "content": "<p>Of course rewriting <code>h</code> like this is the most un-mathematical thing you could see</p>",
        "id": 135062179,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1538512514
    },
    {
        "content": "<blockquote>\n<p><code>finish</code> and its friends</p>\n</blockquote>",
        "id": 135062206,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538512549
    },
    {
        "content": "<p>its friends are <code>tauto</code> and <code>tidy</code></p>",
        "id": 135062395,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1538512781
    },
    {
        "content": "<p>Could it be that there's something strange happening with <code>work_on_goal</code>? The following works:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">tidy</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Y</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"err\">∘</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"n\">id</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">axiom_of_choice</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">g</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"n\">dsimp</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n  <span class=\"n\">fsplit</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">g</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">ext1</span><span class=\"o\">,</span>\n  <span class=\"n\">dsimp</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n  <span class=\"n\">apply_assumption</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 135062619,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1538512996
    },
    {
        "content": "<p>Compare this, which gives the same <code>no goals</code> + weird error as the initial <code>tidy</code> call:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">tidy</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Y</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"err\">∘</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"n\">id</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">axiom_of_choice</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">g</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"n\">dsimp</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n  <span class=\"n\">fsplit</span><span class=\"o\">,</span>\n  <span class=\"c1\">--{ exact g },</span>\n  <span class=\"n\">work_on_goal</span> <span class=\"mi\">1</span> <span class=\"o\">{</span> <span class=\"n\">ext1</span><span class=\"o\">,</span>\n  <span class=\"n\">dsimp</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n  <span class=\"n\">apply_assumption</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 135062701,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1538513091
    },
    {
        "content": "<p>interesting</p>",
        "id": 135062782,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1538513183
    },
    {
        "content": "<p>Even better:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"w\"> </span><span class=\"n\">example</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"n\">Y</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"n\">Type</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"err\">→</span><span class=\"w\"> </span><span class=\"n\">Y</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"err\">∀</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"n\">Y</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"err\">∃</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"err\">∃</span><span class=\"w\"> </span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"n\">Y</span><span class=\"w\"> </span><span class=\"err\">→</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"err\">∘</span><span class=\"w\"> </span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">id</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"o\">=</span><span class=\"w\"></span>\n<span class=\"n\">begin</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">cases</span><span class=\"w\"> </span><span class=\"n\">classical.axiom_of_choice</span><span class=\"w\"> </span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"k\">with</span><span class=\"w\"> </span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"n\">H</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">dsimp</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">fsplit</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">exact</span><span class=\"w\"> </span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">work_on_goal</span><span class=\"mi\"> 0</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">ext1</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">dsimp</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">apply_assumption</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"n\">end</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>works!</p>",
        "id": 135062942,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1538513326
    },
    {
        "content": "<p>but actually this is getting far away from what tidy suggested</p>",
        "id": 135063047,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1538513411
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/mathlib/blob/decb0302869ac70069ba26708367e460695683cb/tactic/chain.lean#L44\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/blob/decb0302869ac70069ba26708367e460695683cb/tactic/chain.lean#L44\">Here's</a> <code>work_on_goal</code>. If I had to guess, there's something wrong in here, possibly in handling what happens if a goal gets solved.</p>",
        "id": 135063189,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1538513597
    },
    {
        "content": "<p>I think the problem is that when <code>apply_assumption</code> kills off a goal, it does not return properly to <code>work_on_goal</code>. Then lean thinks it has finished, but in reality there are more goals that <code>work_on_goal</code> just temporarily deleted. There are no issues when <code>exact g</code> finishes a goal inside <code>work_on_goal</code>, so there's something going on with this particular interaction.</p>",
        "id": 135065300,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1538515791
    },
    {
        "content": "<p><code>apply_assumption</code> is <a href=\"https://github.com/leanprover/mathlib/blob/c2df6b1f3f62575649dbe128a2c5fc9e2de26ffb/tactic/basic.lean#L422\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/blob/c2df6b1f3f62575649dbe128a2c5fc9e2de26ffb/tactic/basic.lean#L422\">here</a>, but it's too monad-y for me to make sense of at the moment.</p>",
        "id": 135065407,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1538515905
    },
    {
        "content": "<p>What problem are you looking for?</p>",
        "id": 135065867,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538516521
    },
    {
        "content": "<p>Patrick started this thread with <a href=\"#narrow/stream/113488-general/subject/tidy.20bug/near/135060203\" title=\"#narrow/stream/113488-general/subject/tidy.20bug/near/135060203\">an example</a> where <code>tidy</code> leaves the tactic state with <code>no goals</code> but there is a strange error.</p>\n<p>I'm proposing that the root cause of this is due to <code>apply_assumption</code> not returning properly to <code>work_on_goal</code>.</p>",
        "id": 135066963,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1538518021
    },
    {
        "content": "<p>Thanks for these bug reports. I probably won't have a chance to work on it until the weekend.</p>",
        "id": 135067028,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1538518103
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"err\">∘</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">id</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Y</span><span class=\"o\">):</span>\n  <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">tauto</span>\n</pre></div>",
        "id": 135068289,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538519774
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span></p>",
        "id": 135068292,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538519783
    },
    {
        "content": "<p>Thanks Kenny, but this is the version I don't want, because <code>h</code> is stated un-mathematically</p>",
        "id": 135085753,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1538550840
    },
    {
        "content": "<p>Looks like <code>tidy</code> used the same variable name twice:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">logic.relation</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"n\">δ</span> <span class=\"n\">ε</span> <span class=\"n\">κ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f₁</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g₁</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">δ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f₂</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g₂</span> <span class=\"o\">:</span> <span class=\"n\">δ</span> <span class=\"bp\">→</span> <span class=\"n\">κ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">relation.map</span> <span class=\"o\">(</span><span class=\"n\">relation.map</span> <span class=\"n\">r</span> <span class=\"n\">f₁</span> <span class=\"n\">g₁</span><span class=\"o\">)</span> <span class=\"n\">f₂</span> <span class=\"n\">g₂</span> <span class=\"bp\">=</span> <span class=\"n\">relation.map</span> <span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"n\">f₂</span> <span class=\"bp\">∘</span> <span class=\"n\">f₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g₂</span> <span class=\"bp\">∘</span> <span class=\"n\">g₁</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">tidy</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">type mismatch at application</span>\n<span class=\"cm\">  r ᾰ_h_h_left_w</span>\n<span class=\"cm\">term</span>\n<span class=\"cm\">  ᾰ_h_h_left_w</span>\n<span class=\"cm\">has type</span>\n<span class=\"cm\">  α_1</span>\n<span class=\"cm\">but is expected to have type</span>\n<span class=\"cm\">  α</span>\n<span class=\"cm\">types contain aliased name(s): α</span>\n<span class=\"cm\">remark: the tactic `dedup` can be used to rename aliases</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 293481892,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1660551745
    },
    {
        "content": "<p>Is this a bug in <code>tidy</code> or in one of the things <code>tidy</code> uses? If I remember correctly, <code>tidy</code> doesn't have the ability to choose variable names whatsoever, just to call other tactics</p>",
        "id": 293738951,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1660663270
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f₁</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g₁</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">δ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f₂</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g₂</span> <span class=\"o\">:</span> <span class=\"n\">δ</span> <span class=\"bp\">→</span> <span class=\"n\">κ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">relation.map</span> <span class=\"o\">(</span><span class=\"n\">relation.map</span> <span class=\"n\">r</span> <span class=\"n\">f₁</span> <span class=\"n\">g₁</span><span class=\"o\">)</span> <span class=\"n\">f₂</span> <span class=\"n\">g₂</span> <span class=\"bp\">=</span> <span class=\"n\">relation.map</span> <span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"n\">f₂</span> <span class=\"bp\">∘</span> <span class=\"n\">f₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g₂</span> <span class=\"bp\">∘</span> <span class=\"n\">g₁</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">ext1</span><span class=\"o\">,</span>\n  <span class=\"n\">ext1</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n  <span class=\"n\">fsplit</span><span class=\"o\">,</span>\n  <span class=\"n\">work_on_goal</span> <span class=\"mi\">1</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">ᾰ</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">ᾰ</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">ᾰ_h</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">ᾰ_h_h</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">ᾰ_h_h_right</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">ᾰ_h_h_left</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">ᾰ_h_h_left_h</span><span class=\"o\">,</span>\n    <span class=\"n\">induction</span> <span class=\"n\">ᾰ_h_h_right_right</span><span class=\"o\">,</span> <span class=\"n\">induction</span> <span class=\"n\">ᾰ_h_h_right_left</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">ᾰ_h_h_left_h_h</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">ᾰ_h_h_left_h_h_right</span><span class=\"o\">,</span> <span class=\"n\">induction</span> <span class=\"n\">ᾰ_h_h_left_h_h_right_right</span><span class=\"o\">,</span>\n    <span class=\"n\">induction</span> <span class=\"n\">ᾰ_h_h_left_h_h_right_left</span><span class=\"o\">,</span>\n    <span class=\"n\">fsplit</span><span class=\"o\">,</span>\n    <span class=\"n\">work_on_goal</span> <span class=\"mi\">2</span>\n    <span class=\"o\">{</span> <span class=\"n\">dsimp</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n      <span class=\"n\">fsplit</span><span class=\"o\">,</span>\n      <span class=\"n\">work_on_goal</span> <span class=\"mi\">2</span> <span class=\"o\">{</span>\n        <span class=\"n\">fsplit</span><span class=\"o\">,</span>\n        <span class=\"n\">work_on_goal</span> <span class=\"mi\">1</span>\n        <span class=\"o\">{</span> <span class=\"n\">assumption</span> <span class=\"o\">},</span>\n        <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"bp\">*</span> <span class=\"o\">}</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"n\">intros</span> <span class=\"n\">ᾰ</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">ᾰ</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">ᾰ_h</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">ᾰ_h_h</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">ᾰ_h_h_right</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">ᾰ_h_h_right_right</span><span class=\"o\">,</span> <span class=\"n\">induction</span> <span class=\"n\">ᾰ_h_h_right_left</span><span class=\"o\">,</span>\n  <span class=\"n\">dsimp</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">fsplit</span><span class=\"o\">,</span>\n  <span class=\"n\">work_on_goal</span> <span class=\"mi\">2</span> <span class=\"o\">{</span>\n    <span class=\"n\">fsplit</span><span class=\"o\">,</span>\n    <span class=\"n\">work_on_goal</span> <span class=\"mi\">2</span> <span class=\"o\">{</span>\n      <span class=\"n\">fsplit</span><span class=\"o\">,</span>\n      <span class=\"n\">work_on_goal</span> <span class=\"mi\">1</span> <span class=\"o\">{</span>\n        <span class=\"n\">fsplit</span><span class=\"o\">,</span>\n        <span class=\"n\">work_on_goal</span> <span class=\"mi\">2</span> <span class=\"o\">{</span>\n          <span class=\"n\">fsplit</span><span class=\"o\">,</span>\n          <span class=\"n\">work_on_goal</span> <span class=\"mi\">2</span> <span class=\"o\">{</span>\n            <span class=\"n\">fsplit</span><span class=\"o\">,</span>\n            <span class=\"n\">work_on_goal</span> <span class=\"mi\">1</span>\n            <span class=\"o\">{</span> <span class=\"n\">assumption</span> <span class=\"o\">},</span>\n            <span class=\"n\">fsplit</span><span class=\"o\">,</span>\n            <span class=\"n\">work_on_goal</span> <span class=\"mi\">1</span>\n            <span class=\"o\">{</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n            <span class=\"n\">refl</span> <span class=\"o\">}</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n      <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">type mismatch at application</span>\n<span class=\"cm\">  r ᾰ_h_h_left_w</span>\n<span class=\"cm\">term</span>\n<span class=\"cm\">  ᾰ_h_h_left_w</span>\n<span class=\"cm\">has type</span>\n<span class=\"cm\">  α_1</span>\n<span class=\"cm\">but is expected to have type</span>\n<span class=\"cm\">  α</span>\n<span class=\"cm\">types contain aliased name(s): α</span>\n<span class=\"cm\">remark: the tactic `dedup` can be used to rename aliases</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>(error at first line of example statement)</p>",
        "id": 293803788,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1660685302
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">logic.relation</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"n\">δ</span> <span class=\"n\">ε</span> <span class=\"n\">κ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f₁</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g₁</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">δ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f₂</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g₂</span> <span class=\"o\">:</span> <span class=\"n\">δ</span> <span class=\"bp\">→</span> <span class=\"n\">κ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">relation.map</span> <span class=\"o\">(</span><span class=\"n\">relation.map</span> <span class=\"n\">r</span> <span class=\"n\">f₁</span> <span class=\"n\">g₁</span><span class=\"o\">)</span> <span class=\"n\">f₂</span> <span class=\"n\">g₂</span> <span class=\"bp\">=</span> <span class=\"n\">relation.map</span> <span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"n\">f₂</span> <span class=\"bp\">∘</span> <span class=\"n\">f₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g₂</span> <span class=\"bp\">∘</span> <span class=\"n\">g₁</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">ext1</span><span class=\"o\">,</span>\n  <span class=\"n\">ext1</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n  <span class=\"n\">fsplit</span><span class=\"o\">,</span>\n  <span class=\"n\">work_on_goal</span> <span class=\"mi\">1</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintros</span> <span class=\"o\">⟨</span><span class=\"n\">ᾰ_w</span><span class=\"o\">,</span> <span class=\"n\">ᾰ_h_w</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">ᾰ_h_h_left_w</span><span class=\"o\">,</span> <span class=\"n\">ᾰ_h_h_left_h_w</span><span class=\"o\">,</span> <span class=\"n\">ᾰ_h_h_left_h_h_left</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n      <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">work_on_goal</span> <span class=\"mi\">2</span>\n    <span class=\"o\">{</span> <span class=\"n\">dsimp</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"c1\">-- this line breaks it; comment out to fix proof</span>\n      <span class=\"n\">fsplit</span><span class=\"o\">,</span>\n      <span class=\"n\">work_on_goal</span> <span class=\"mi\">2</span> <span class=\"o\">{</span>\n        <span class=\"n\">fsplit</span><span class=\"o\">,</span>\n        <span class=\"n\">work_on_goal</span> <span class=\"mi\">1</span>\n        <span class=\"o\">{</span> <span class=\"n\">assumption</span> <span class=\"o\">},</span>\n        <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"bp\">*</span> <span class=\"o\">}</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">ᾰ_w</span><span class=\"o\">,</span> <span class=\"n\">ᾰ_h_w</span><span class=\"o\">,</span> <span class=\"n\">ᾰ_h_h_left</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">dsimp</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">ᾰ_h_h_left</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n<span class=\"kd\">end</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">type mismatch at application</span>\n<span class=\"cm\">  r ᾰ_h_h_left_w</span>\n<span class=\"cm\">term</span>\n<span class=\"cm\">  ᾰ_h_h_left_w</span>\n<span class=\"cm\">has type</span>\n<span class=\"cm\">  α_1</span>\n<span class=\"cm\">but is expected to have type</span>\n<span class=\"cm\">  α</span>\n<span class=\"cm\">types contain aliased name(s): α</span>\n<span class=\"cm\">remark: the tactic `dedup` can be used to rename aliases</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 293805948,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1660686370
    },
    {
        "content": "<p><code>tidy</code> is running <code>dsimp</code> on a goal with metavariables and on some hypotheses all at the same time</p>",
        "id": 293805994,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1660686394
    },
    {
        "content": "<p>This is as compact as I can get it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">logic.relation</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"n\">δ</span> <span class=\"n\">ε</span> <span class=\"n\">κ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f₁</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g₁</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">δ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f₂</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g₂</span> <span class=\"o\">:</span> <span class=\"n\">δ</span> <span class=\"bp\">→</span> <span class=\"n\">κ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">relation.map</span> <span class=\"o\">(</span><span class=\"n\">relation.map</span> <span class=\"n\">r</span> <span class=\"n\">f₁</span> <span class=\"n\">g₁</span><span class=\"o\">)</span> <span class=\"n\">f₂</span> <span class=\"n\">g₂</span> <span class=\"bp\">=</span> <span class=\"n\">relation.map</span> <span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"n\">f₂</span> <span class=\"bp\">∘</span> <span class=\"n\">f₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g₂</span> <span class=\"bp\">∘</span> <span class=\"n\">g₁</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">ext1</span><span class=\"o\">,</span>\n  <span class=\"n\">ext1</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">eq_iff_iff</span><span class=\"o\">],</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintros</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">foo</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">swap</span><span class=\"o\">,</span> <span class=\"c1\">-- new first goal now depends on metavariable in new second goal</span>\n    <span class=\"o\">{</span> <span class=\"n\">dsimp</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"c1\">-- this line breaks it; comment out to fix proof</span>\n      <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">foo</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">⟩,</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">bar</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">bar</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">type mismatch at application</span>\n<span class=\"cm\">  r ᾰ_h_h_left_w</span>\n<span class=\"cm\">term</span>\n<span class=\"cm\">  ᾰ_h_h_left_w</span>\n<span class=\"cm\">has type</span>\n<span class=\"cm\">  α_1</span>\n<span class=\"cm\">but is expected to have type</span>\n<span class=\"cm\">  α</span>\n<span class=\"cm\">types contain aliased name(s): α</span>\n<span class=\"cm\">remark: the tactic `dedup` can be used to rename aliases</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 293807387,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1660687100
    }
]