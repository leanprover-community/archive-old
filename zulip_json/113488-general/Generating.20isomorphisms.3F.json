[
    {
        "content": "<p>I have some definition <code>definition foo (X : Type) : Type := blah</code></p>",
        "id": 123269348,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520185629
    },
    {
        "content": "<p>If I have two types <code>X</code> and <code>Y</code> plus isomorphisms <code>f:X\\to Y</code> and <code>g:Y\\to X</code> (i.e. the composites both ways are the identity functions)</p>",
        "id": 123269349,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520185678
    },
    {
        "content": "<p>can I deduce that foo X is isomorphic to foo Y? Does this even make sense?</p>",
        "id": 123269389,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520185694
    },
    {
        "content": "<p>an isomorphism version of eq.subst?</p>",
        "id": 123269490,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520186034
    },
    {
        "content": "<p>Or does this have to somehow be proved on a case by case basis?</p>",
        "id": 123269539,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520186059
    },
    {
        "content": "<p>Mathematicians are so happy to identify objects which are canonically isomorphic and I find this much more of a struggle in Lean.</p>",
        "id": 123269552,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520186123
    },
    {
        "content": "<blockquote>\n<p>can I deduce that foo X is isomorphic to foo Y?</p>\n</blockquote>\n<p>Yes, if you define isomorphic as \"there exist isomorphisms f and g such that ...\". <span class=\"emoji emoji-1f604\" title=\"smile\">:smile:</span></p>\n<p>This notion of isomorphism does not allow you to substitute isomorphic structures in arbitrary contexts, though.</p>",
        "id": 123269600,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1520186247
    },
    {
        "content": "<p>yes this is absolutely how I want to define isomorphic.</p>",
        "id": 123269640,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520186301
    },
    {
        "content": "<p>How do I construct the map <code>foo X -&gt; foo Y</code>?</p>",
        "id": 123269641,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520186315
    },
    {
        "content": "<p>The axiom of univalence would allow you to lift isomorphisms to equality, then you can substitute in arbitrary contexts.</p>",
        "id": 123269642,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1520186340
    },
    {
        "content": "<p>Ooops, sorry missed the foo part.</p>",
        "id": 123269648,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1520186363
    },
    {
        "content": "<p>Oh great :-)</p>",
        "id": 123269649,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520186369
    },
    {
        "content": "<p>I don't see any reason why I should be able to get a map foo X -&gt; foo Y just given a map X -&gt; Y</p>",
        "id": 123269652,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520186388
    },
    {
        "content": "<p>but can I use the inverse somehow?</p>",
        "id": 123269653,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520186395
    },
    {
        "content": "<p>Or is what I want not even true?</p>",
        "id": 123269654,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520186400
    },
    {
        "content": "<p>So yeah, univalence is the axiomatic principle that would allow you to do that (in HoTT).</p>",
        "id": 123269655,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1520186401
    },
    {
        "content": "<p>In Lean, you need to prove it yourself for each instance, such as <code>foo</code> here.</p>",
        "id": 123269713,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1520186450
    },
    {
        "content": "<p>It's definitely not true in general; for example if <code>foo X</code> was <code>X = nat</code></p>",
        "id": 123269716,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1520186452
    },
    {
        "content": "<p>(not true without univalence that is)</p>",
        "id": 123269727,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1520186484
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-email=\"gebner@gebner.org\" data-user-id=\"110043\">@Gabriel Ebner</span> do you know if you can get a contradiction in classical lean from <code>X ~= Y -&gt; X = Y</code>?</p>",
        "id": 123269789,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1520186632
    },
    {
        "content": "<p>This is an interesting question.  I think it is strictly weaker than univalence because it is not an isomorphism.  It looks inconsistent, but I don't immediately see how to derive a contradiction from it.</p>",
        "id": 123270257,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1520187616
    }
]