[
    {
        "content": "<p>I was just having a look at <span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span>'s nice PR for quotient groups.</p>",
        "id": 127574167,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1528158381
    },
    {
        "content": "<p>I golfed it a bit, using my \"obviously\" and \"tidy\" tactics, and would like to see how people feel about the result.</p>",
        "id": 127574170,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1528158409
    },
    {
        "content": "<p>Chris's  proof is at &lt;<a href=\"https://github.com/leanprover/mathlib/pull/154/commits/b7edcbdd1f783da5f17dcd840057352157afdac0\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/pull/154/commits/b7edcbdd1f783da5f17dcd840057352157afdac0\">https://github.com/leanprover/mathlib/pull/154/commits/b7edcbdd1f783da5f17dcd840057352157afdac0</a>&gt;.</p>",
        "id": 127574180,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1528158454
    },
    {
        "content": "<p>I factored this into essentially three bits: 2 lemmas about elements in normal subgroups, a few \"hints\" for my automation, and then the following proof:</p>",
        "id": 127574222,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1528158488
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>instance quotient_group&#39; [group α] (s : set α) [normal_subgroup s] : group (left_cosets s) :=\nby refine\n{ one := ⟦1⟧,\n  mul := λ a b, quotient.lift_on₂ a b (λ a b, ⟦a * b⟧) (by obviously),\n  inv := λ a&#39;,  quotient.lift_on  a&#39;  (λ a, ⟦a⁻¹⟧)     (by obviously),\n  .. }; obviously\n</pre></div>",
        "id": 127574225,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1528158496
    },
    {
        "content": "<p>which is about as easy on the eye as I think one can hope for.</p>",
        "id": 127574227,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1528158509
    },
    {
        "content": "<p>The lemmas are:</p>\n<div class=\"codehilite\"><pre><span></span>lemma quotient_group_aux  [group α] (s : set α) [normal_subgroup s] (a b : α) (h : a⁻¹ * b ∈ s) : a * b⁻¹ ∈ s :=\nbegin\n  rw [← inv_inv a, ← mul_inv_rev],\n  exact is_subgroup.inv_mem (is_subgroup.mem_norm_comm h),\nend\n\nlemma quotient_group_aux&#39; [group α] (s : set α) [normal_subgroup s] (a b c d : α) (h₁ : a * b ∈ s) (h₂ : c * d ∈ s) : c * (a * (b * d)) ∈ s :=\nbegin\n  apply is_subgroup.mem_norm_comm,\n  rw [← mul_assoc, mul_assoc],\n  apply (is_subgroup.mul_mem_cancel_right s h₁).2,\n  exact is_subgroup.mem_norm_comm h₂\nend\n</pre></div>",
        "id": 127574235,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1528158525
    },
    {
        "content": "<p>which are dull variants on what Chris had done, just extracted out. I made no attempt to automate those, but I think it's not too much a stretch to hope that one could explain to a computer how to do these.</p>",
        "id": 127574311,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1528158619
    },
    {
        "content": "<p>The ugly part of my \"obviously-golfed\" version is the \"hints\": before the nice instance proof I need to say:</p>\n<div class=\"codehilite\"><pre><span></span>-- Some &#39;hint&#39; attributes for obviously.\nlocal attribute [reducible] setoid_has_equiv left_rel\nlocal attribute [applicable] is_submonoid.one_mem  -- `applicable` means the lemma should be applied whenever relevant\nlocal attribute [semiapplicable] quotient_group_aux quotient_group_aux&#39; -- `semiapplicable` means the lemma should be applied if all its hypotheses can be satisfied from the context\nlocal attribute [simp] mul_assoc\n</pre></div>",
        "id": 127574316,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1528158656
    },
    {
        "content": "<p>The whole thing is available at &lt;<a href=\"https://github.com/semorrison/lean-tidy/blob/master/examples/quotient_group.lean\" target=\"_blank\" title=\"https://github.com/semorrison/lean-tidy/blob/master/examples/quotient_group.lean\">https://github.com/semorrison/lean-tidy/blob/master/examples/quotient_group.lean</a>&gt;.</p>",
        "id": 127574324,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1528158698
    },
    {
        "content": "<p>(Regarding the hints: <code>attribute [applicable] is_submonoid.one_mem</code> would become a global attribute in my dream world --- whenever the goal is to prove <code>1 ∈ s</code>, for <code>s</code> a monoid, you should let the computer do that for you. :-) With another simple lemma about normal subgroups, one could do without the <code>attribute [simp] mul_assoc</code> hint, which is pretty fragile.)</p>",
        "id": 127574427,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1528158866
    },
    {
        "content": "<p>(On the subject of the two lemmas, once we have PIDs and Smith normal form, we can write a general purpose tactic which shows whether a given word lies in the normal subgroup generated by some collection of words, and hence prove goals of the form <code>w \\mem s</code>, given one or more hypotheses of the same form.)</p>",
        "id": 127576401,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1528162495
    },
    {
        "content": "<p>(Such a tactic would remove the need for both the <code>semiapplicable</code> and <code>simp</code> hints above.)</p>",
        "id": 127576415,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1528162555
    },
    {
        "content": "<p>Wow! That's some nice golfing. And golfing where you increase readability, instead of obfuscating!</p>",
        "id": 127583599,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1528177168
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> Don't you think these tactics would help a lot with the perfectoid project?</p>",
        "id": 127583641,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1528177216
    },
    {
        "content": "<p>If we want to produce code that is somewhat legible to mathematicians.</p>",
        "id": 127583645,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1528177247
    },
    {
        "content": "<p>I am pretty sure that these tactics will make life much easier for mathematicians. Goodness knows if I will be able to use them. I have no idea of the problems I'll face with perfectoid spaces.</p>",
        "id": 127585727,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528181607
    },
    {
        "content": "<p>Automation is clearly the key. Proof assistants can become useful tools for mathematicians only if every stupid proof eventually gets automatic</p>",
        "id": 127586790,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1528183626
    }
]