[
    {
        "content": "<p>Am I correct to believe that <code>lean --make</code> and <code>lean --profile</code> are not meant to be used together? </p>\n<p>When I use them together, I get this error:</p>\n<div class=\"codehilite\"><pre><span></span>libc++abi.dylib: terminating with uncaught exception of type std::length_error: vector\n</pre></div>\n\n\n<p>Do people use <code>--profile</code> one file at a time?</p>",
        "id": 124196289,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1522002853
    },
    {
        "content": "<p>I constantly use both flags together. The error message sure sounds bad.</p>",
        "id": 124200802,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1522013893
    },
    {
        "content": "<p>I'm on Mac. What about you?</p>",
        "id": 124200863,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1522014088
    },
    {
        "content": "<p>Linux. I was about to ask.</p>",
        "id": 124200866,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1522014110
    },
    {
        "content": "<p>I'm wondering if the C++ runtime on Mac allocates less memory than on Linux. Does that sound sensible?</p>",
        "id": 124200916,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1522014216
    },
    {
        "content": "<p>(now I'm getting around that limitation with a Makefile)</p>",
        "id": 124200957,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1522014264
    },
    {
        "content": "<p>(... which profiles one file at a time)</p>",
        "id": 124200959,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1522014285
    },
    {
        "content": "<p>You can also use <code>--profile --recursive</code></p>",
        "id": 124200966,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1522014315
    },
    {
        "content": "<p>What's the difference with <code>--make</code>?</p>",
        "id": 124201067,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1522014562
    },
    {
        "content": "<p>It doesn't actually save .olean files, but I'll assume that's not that part you want to profile :)</p>",
        "id": 124201114,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1522014613
    },
    {
        "content": "<p>I believe you're right :)</p>",
        "id": 124201118,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1522014642
    },
    {
        "content": "<p>The bad news is that I get the same error</p>",
        "id": 124201121,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1522014666
    },
    {
        "content": "<p>Well that's not good</p>",
        "id": 124201331,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1522015195
    },
    {
        "content": "<p>About as good as the broken link to Nightly Lean Windows build :P.</p>",
        "id": 124201382,
        "sender_full_name": "Moses Sch√∂nfinkel",
        "timestamp": 1522015276
    },
    {
        "content": "<p>I've been using <code>lean --profile</code> on Mac and Linux and they seem to produce different information. On Mac, I get information like:</p>\n<div class=\"codehilite\"><pre><span></span>elaboration: tactic compilation took 8.2ms\nelaboration: tactic execution took 221ms\nnum. allocated objects:  1407\nnum. allocated closures: 366\n  221ms   100.0%   _interaction._lambda_2\n  221ms   100.0%   scope_trace\n  221ms   100.0%   tactic.istep._lambda_1\n  221ms   100.0%   tactic.solve1\n  221ms   100.0%   tactic.step\n  221ms   100.0%   tactic.istep\n  220ms    99.5%   tactic.interactive.simp_core\n  220ms    99.5%   tactic.interactive.propagate_tags\n  218ms    98.6%   tactic.mk_simp_set_core\n  218ms    98.6%   tactic.mk_simp_set\n  217ms    98.2%   tactic.get_user_simp_lemmas\n  217ms    98.2%   get_attribute_cache_dyn._lambda_1\n  217ms    98.2%   user_attribute.get_cache\n  217ms    98.2%   simp_attr.tl_simp._lambda_3\n  217ms    98.2%   tactic.to_simp_lemmas\n  217ms    98.2%   tactic.join_user_simp_lemmas_core\n  217ms    98.2%   tactic.join_user_simp_lemmas\n  215ms    97.3%   simp_lemmas.add_simp\n  202ms    91.4%   interaction_monad.monad._lambda_9\n  201ms    91.0%   simp_attr.tl_simp._lambda_2\n</pre></div>\n\n\n<p>while on Linux, I do not. Otherwise, the information looks the same</p>",
        "id": 124348839,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1522291760
    },
    {
        "content": "<p>Is that normal?</p>",
        "id": 124348841,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1522291770
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> No, it should work on Linux as well</p>",
        "id": 124361454,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1522319304
    },
    {
        "content": "<p>Btw, you can use <code>-D profiler.threshold=0.5</code> to suppress output &lt; 0.5s for example</p>",
        "id": 124361455,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1522319334
    },
    {
        "content": "<p>thanks! Thanks should be useful! I'll try that. Any list of those fun constants?</p>",
        "id": 124363084,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1522322858
    },
    {
        "content": "<p>Same constants as after <code>set_option</code></p>",
        "id": 124363129,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1522322907
    },
    {
        "content": "<p>thanks! What does <code>profiler.freq</code> do?</p>",
        "id": 124363483,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1522323672
    },
    {
        "content": "<p>The tactic execution profile as above is computed by sampling the top-most stack frame at that frequency</p>",
        "id": 124363782,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1522324404
    }
]