[
    {
        "content": "<p>I think we're better off thinking that \"X is incomparable to Y\" is the default answer, rather than trying to decide whether \"X is more basic than Y\" or vice versa.</p>",
        "id": 309257526,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1668198939
    },
    {
        "content": "<p>This requires making new files more often, of course.</p>",
        "id": 309257545,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1668198953
    },
    {
        "content": "<p>Regarding Mario's suggestion: it would be amazing to have a flag for <code>leanproject import-graph</code> that did this! i.e. highlights all files whose theorems are not used in any of the theorems in the <code>--to</code> target. Of course this isn't something you can do from python.</p>",
        "id": 309257943,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1668199170
    },
    {
        "content": "<p>does leanproject have the setup to run custom lean programs? It wouldn't be too hard to write a lean program that calculates this set and spits the result on standard out</p>",
        "id": 309258346,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668199413
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span>, I've merged your two PRs mentioned above. Great start!</p>",
        "id": 309258561,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1668199543
    },
    {
        "content": "<p>I don't think leanproject currently runs Lean programs (besides of course leanpkg) but I don't see why not. It already processes yaml files for the port status.</p>",
        "id": 309258949,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1668199777
    },
    {
        "content": "<p>It also runs lean to list declarations.</p>",
        "id": 309260381,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1668200718
    },
    {
        "content": "<p>See <a href=\"https://github.com/leanprover-community/mathlib-tools/blob/master/mathlibtools/decls.lean\">https://github.com/leanprover-community/mathlib-tools/blob/master/mathlibtools/decls.lean</a></p>",
        "id": 309260419,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1668200740
    },
    {
        "content": "<p>and <a href=\"https://github.com/leanprover-community/mathlib-tools/blob/master/mathlibtools/lib.py#L898\">https://github.com/leanprover-community/mathlib-tools/blob/master/mathlibtools/lib.py#L898</a></p>",
        "id": 309260482,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1668200770
    },
    {
        "content": "<p>Here's a lean program that does the core functionality:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">tactic.get_decls_used</span> <span class=\"o\">(</span><span class=\"n\">env</span> <span class=\"o\">:</span> <span class=\"n\">environment</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">name</span> <span class=\"bp\">→</span> <span class=\"n\">name_set</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"n\">name_set</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"n\">ns</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">ns.contains</span> <span class=\"n\">n</span> <span class=\"k\">then</span> <span class=\"n\">pure</span> <span class=\"n\">ns</span> <span class=\"k\">else</span> <span class=\"k\">do</span>\n  <span class=\"n\">d</span> <span class=\"bp\">←</span> <span class=\"n\">env.get</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">ns</span> <span class=\"o\">:=</span> <span class=\"n\">ns.insert</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">process</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"o\">(</span><span class=\"n\">name_set</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"n\">v.fold</span> <span class=\"o\">(</span><span class=\"n\">pure</span> <span class=\"n\">ns</span><span class=\"o\">)</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">e</span> <span class=\"n\">_</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"bp\">λ</span> <span class=\"n\">ns</span><span class=\"o\">,</span>\n      <span class=\"k\">if</span> <span class=\"n\">e.is_constant</span> <span class=\"k\">then</span> <span class=\"n\">tactic.get_decls_used</span> <span class=\"n\">e.const_name</span> <span class=\"n\">ns</span> <span class=\"k\">else</span> <span class=\"n\">pure</span> <span class=\"n\">ns</span><span class=\"o\">,</span>\n  <span class=\"k\">match</span> <span class=\"n\">d</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">declaration.defn</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">v</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">process</span> <span class=\"n\">v</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">declaration.thm</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">v</span><span class=\"o\">)</span>      <span class=\"o\">:=</span> <span class=\"n\">process</span> <span class=\"n\">v.get</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">pure</span> <span class=\"n\">ns</span>\n  <span class=\"kd\">end</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">tactic.get_modules_used_by_theorems_in</span> <span class=\"o\">(</span><span class=\"n\">tgt</span> <span class=\"o\">:</span> <span class=\"n\">string</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">string</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span> <span class=\"n\">env</span> <span class=\"bp\">←</span> <span class=\"n\">tactic.get_env</span><span class=\"o\">,</span>\n  <span class=\"n\">ns</span> <span class=\"bp\">←</span> <span class=\"n\">env.fold</span> <span class=\"o\">(</span><span class=\"n\">pure</span> <span class=\"n\">mk_name_set</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">d</span> <span class=\"n\">r</span><span class=\"o\">,</span>\n    <span class=\"k\">if</span> <span class=\"n\">env.decl_olean</span> <span class=\"n\">d.to_name</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">tgt</span> <span class=\"k\">then</span>\n      <span class=\"n\">r</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">tactic.get_decls_used</span> <span class=\"n\">env</span> <span class=\"n\">d.to_name</span>\n    <span class=\"k\">else</span> <span class=\"n\">r</span><span class=\"o\">),</span>\n  <span class=\"k\">let</span> <span class=\"n\">mods</span> <span class=\"o\">:=</span> <span class=\"n\">ns.fold</span> <span class=\"n\">native.mk_rb_set</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"n\">mods</span><span class=\"o\">,</span>\n    <span class=\"k\">match</span> <span class=\"n\">env.decl_olean</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">mod</span> <span class=\"o\">:=</span> <span class=\"n\">mods.insert</span> <span class=\"n\">mod</span>\n    <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"o\">:=</span> <span class=\"n\">mods</span>\n    <span class=\"kd\">end</span><span class=\"o\">),</span>\n  <span class=\"n\">pure</span> <span class=\"n\">mods.to_list</span>\n\n<span class=\"kd\">run_cmd</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">tgt'</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"n\">init.data.int.bitwise</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">tgt</span> <span class=\"o\">:=</span> <span class=\"n\">module_info.resolve_module_name</span> <span class=\"n\">tgt'</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">home_len</span> <span class=\"o\">:=</span> <span class=\"n\">tgt.length</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">tgt'.to_string.length</span> <span class=\"bp\">+</span> <span class=\"mi\">5</span><span class=\"o\">),</span>\n  <span class=\"n\">files</span> <span class=\"bp\">←</span> <span class=\"n\">tactic.get_modules_used_by_theorems_in</span> <span class=\"n\">tgt</span><span class=\"o\">,</span>\n  <span class=\"n\">tactic.trace</span> <span class=\"bp\">$</span> <span class=\"n\">files.map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">s.mk_iterator.nextn</span> <span class=\"n\">home_len</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">next_to_string</span><span class=\"o\">)</span>\n<span class=\"c1\">-- [init/wf.lean,</span>\n<span class=\"c1\">--  init/util.lean,</span>\n<span class=\"c1\">--  init/propext.lean,</span>\n<span class=\"c1\">--  init/meta/simp_tactic.lean,</span>\n<span class=\"c1\">--  init/meta/rewrite_tactic.lean,</span>\n<span class=\"c1\">--  init/meta/interactive.lean,</span>\n<span class=\"c1\">--  init/logic.lean,</span>\n<span class=\"c1\">--  init/data/nat/lemmas.lean,</span>\n<span class=\"c1\">--  init/data/nat/div.lean,</span>\n<span class=\"c1\">--  init/data/nat/bitwise.lean,</span>\n<span class=\"c1\">--  init/data/nat/basic.lean,</span>\n<span class=\"c1\">--  init/data/int/bitwise.lean,</span>\n<span class=\"c1\">--  init/data/int/basic.lean,</span>\n<span class=\"c1\">--  init/data/bool/basic.lean,</span>\n<span class=\"c1\">--  init/core.lean,</span>\n<span class=\"c1\">--  init/coe.lean,</span>\n<span class=\"c1\">--  init/algebra/order.lean]</span>\n</code></pre></div>\n<p>This prints all modules that contain theorems that are transitively used by some theorem in <code>init.data.int.bitwise</code>. A drawback of this implementation is that the modules are identified by file names because the file name -&gt; module name mapping is not stored, and the list of all modules is not exposed by lean 3 AFAICT</p>",
        "id": 309261578,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668201420
    },
    {
        "content": "<p>Okay, I'll see if I can hook this up to <code>import-graph</code> later.</p>",
        "id": 309268920,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1668206060
    },
    {
        "content": "<p>Also, regarding the <code>finite_dimensional</code> dependency cleanup (or dependency cleanups generally) --- I am <em>extremely</em> sympathetic to people frustrated by delays in CI and PR reviewing when doing refactoring, so please feel free to PM me to ask for a <code>bors d+</code> on dependency refactoring PRs, even before CI finishes. I don't want these to languish on the <a href=\"https://bit.ly/3AZk1Qk\">#queue</a>.</p>",
        "id": 309269015,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1668206158
    },
    {
        "content": "<p>I loaded up <code>borel_cantelli</code> and ran the code on Johan's list:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">*</span> <span class=\"n\">data.rbtree.init</span>\n<span class=\"bp\">*</span> <span class=\"n\">data.rbmap.basic</span>\n  <span class=\"n\">data.list.defs</span>\n<span class=\"bp\">*</span> <span class=\"n\">data.string.defs</span>\n<span class=\"bp\">*</span> <span class=\"kd\">meta</span><span class=\"bp\">.</span><span class=\"n\">expr</span>\n<span class=\"bp\">*</span> <span class=\"n\">tactic.binder_matching</span>\n<span class=\"bp\">*</span> <span class=\"n\">tactic.core</span>\n<span class=\"bp\">*</span> <span class=\"n\">tactic.algebra</span>\n<span class=\"bp\">*</span> <span class=\"n\">tactic.to_additive</span>\n<span class=\"bp\">*</span> <span class=\"n\">tactic.lint.default</span>\n<span class=\"bp\">*</span> <span class=\"n\">tactic.interactive</span>\n<span class=\"bp\">*</span> <span class=\"n\">tactic.hint</span>\n  <span class=\"n\">tactic.norm_cast</span>\n<span class=\"bp\">*</span> <span class=\"n\">tactic.tidy</span>\n<span class=\"bp\">*</span> <span class=\"n\">tactic.obviously</span>\n<span class=\"bp\">*</span> <span class=\"n\">tactic.basic</span>\n  <span class=\"n\">logic.unique</span>\n  <span class=\"n\">logic.equiv.defs</span>\n  <span class=\"n\">order.synonym</span>\n  <span class=\"n\">order.compare</span>\n  <span class=\"n\">order.monotone</span>\n  <span class=\"n\">order.lattice</span>\n  <span class=\"n\">order.bounded_order</span>\n  <span class=\"n\">order.heyting.basic</span>\n  <span class=\"n\">order.boolean_algebra</span>\n<span class=\"bp\">*</span> <span class=\"n\">order.symm_diff</span>\n  <span class=\"n\">data.set.basic</span>\n  <span class=\"n\">data.set.prod</span>\n  <span class=\"n\">data.set.function</span>\n  <span class=\"n\">logic.equiv.set</span>\n<span class=\"bp\">*</span> <span class=\"n\">order.rel_iso</span>\n  <span class=\"n\">order.hom.basic</span>\n  <span class=\"n\">algebra.order.group.defs</span>\n<span class=\"bp\">*</span> <span class=\"n\">algebra.order.group.type_tags</span>\n  <span class=\"n\">algebra.order.with_zero</span>\n<span class=\"bp\">*</span> <span class=\"n\">data.nat.order</span>\n  <span class=\"n\">algebra.group_power.ring</span>\n  <span class=\"n\">algebra.group_power.order</span>\n  <span class=\"n\">data.nat.pow</span>\n  <span class=\"n\">algebra.group_power.lemmas</span>\n<span class=\"bp\">*</span> <span class=\"n\">algebra.group_power.default</span>\n  <span class=\"n\">data.list.big_operators</span>\n  <span class=\"n\">data.list.count</span>\n  <span class=\"n\">data.list.pairwise</span>\n  <span class=\"n\">data.list.chain</span>\n  <span class=\"n\">data.list.range</span>\n  <span class=\"n\">data.list.perm</span>\n  <span class=\"n\">data.multiset.basic</span>\n  <span class=\"n\">algebra.big_operators.multiset</span>\n  <span class=\"n\">data.multiset.bind</span>\n<span class=\"bp\">*</span> <span class=\"n\">data.multiset.powerset</span>\n  <span class=\"n\">data.multiset.nodup</span>\n  <span class=\"n\">data.multiset.dedup</span>\n  <span class=\"n\">data.multiset.finset_ops</span>\n  <span class=\"n\">data.finset.basic</span>\n  <span class=\"n\">data.finset.card</span>\n  <span class=\"n\">data.finset.option</span>\n  <span class=\"n\">data.finset.lattice</span>\n<span class=\"bp\">*</span> <span class=\"n\">data.finset.powerset</span>\n  <span class=\"n\">data.fintype.basic</span>\n  <span class=\"n\">algebra.char_zero</span>\n  <span class=\"n\">data.int.char_zero</span>\n  <span class=\"n\">data.rat.cast</span>\n  <span class=\"n\">tactic.norm_num</span>\n  <span class=\"n\">tactic.abel</span>\n  <span class=\"n\">algebra.module.basic</span>\n  <span class=\"n\">data.set.pointwise.basic</span>\n<span class=\"bp\">*</span> <span class=\"n\">group_theory.submonoid.pointwise</span>\n  <span class=\"n\">group_theory.subgroup.basic</span>\n<span class=\"bp\">*</span> <span class=\"n\">ring_theory.subring.basic</span>\n<span class=\"bp\">*</span> <span class=\"n\">algebra.group_ring_action</span>\n  <span class=\"n\">algebra.ring.aut</span>\n  <span class=\"n\">algebra.star.basic</span>\n  <span class=\"n\">algebra.module.linear_map</span>\n  <span class=\"n\">algebra.module.equiv</span>\n  <span class=\"n\">algebra.module.submodule.basic</span>\n  <span class=\"n\">algebra.module.submodule.lattice</span>\n  <span class=\"n\">linear_algebra.basic</span>\n  <span class=\"n\">linear_algebra.span</span>\n  <span class=\"n\">algebra.algebra.basic</span>\n  <span class=\"n\">linear_algebra.prod</span>\n  <span class=\"n\">linear_algebra.linear_independent</span>\n  <span class=\"n\">linear_algebra.basis</span>\n  <span class=\"n\">linear_algebra.bilinear_map</span>\n<span class=\"bp\">*</span> <span class=\"n\">algebra.module.submodule.bilinear</span>\n<span class=\"bp\">*</span> <span class=\"n\">linear_algebra.tensor_product</span>\n  <span class=\"n\">algebra.algebra.bilinear</span>\n<span class=\"bp\">*</span> <span class=\"n\">algebra.algebra.operations</span>\n<span class=\"bp\">*</span> <span class=\"n\">ring_theory.ideal.operations</span>\n<span class=\"bp\">*</span> <span class=\"n\">algebra.algebra.subalgebra.basic</span>\n  <span class=\"n\">algebra.algebra.tower</span>\n<span class=\"bp\">*</span> <span class=\"n\">ring_theory.adjoin.basic</span>\n<span class=\"bp\">*</span> <span class=\"n\">data.mv_polynomial.basic</span>\n<span class=\"bp\">*</span> <span class=\"n\">data.mv_polynomial.rename</span>\n<span class=\"bp\">*</span> <span class=\"n\">data.mv_polynomial.monad</span>\n<span class=\"bp\">*</span> <span class=\"n\">data.mv_polynomial.variables</span>\n<span class=\"bp\">*</span> <span class=\"n\">data.mv_polynomial.equiv</span>\n<span class=\"bp\">*</span> <span class=\"n\">ring_theory.polynomial.basic</span>\n<span class=\"bp\">*</span> <span class=\"n\">ring_theory.adjoin.fg</span>\n<span class=\"bp\">*</span> <span class=\"n\">ring_theory.algebra_tower</span>\n  <span class=\"n\">ring_theory.finiteness</span>\n  <span class=\"n\">field_theory.finiteness</span>\n  <span class=\"n\">linear_algebra.finite_dimensional</span>\n<span class=\"bp\">*</span> <span class=\"n\">linear_algebra.matrix.finite_dimensional</span>\n<span class=\"bp\">*</span> <span class=\"n\">linear_algebra.matrix.to_lin</span>\n<span class=\"bp\">*</span> <span class=\"n\">linear_algebra.matrix.basis</span>\n<span class=\"bp\">*</span> <span class=\"n\">linear_algebra.determinant</span>\n  <span class=\"n\">topology.algebra.module.basic</span>\n  <span class=\"n\">analysis.normed.field.basic</span>\n  <span class=\"n\">analysis.normed_space.basic</span>\n<span class=\"bp\">*</span> <span class=\"n\">analysis.normed.order.basic</span>\n  <span class=\"n\">analysis.locally_convex.basic</span>\n  <span class=\"n\">analysis.locally_convex.balanced_core_hull</span>\n  <span class=\"n\">topology.algebra.module.finite_dimension</span>\n  <span class=\"n\">analysis.convex.topology</span>\n<span class=\"bp\">*</span> <span class=\"n\">topology.algebra.module.locally_convex</span>\n  <span class=\"n\">analysis.seminorm</span>\n  <span class=\"n\">analysis.locally_convex.bounded</span>\n  <span class=\"n\">topology.algebra.uniform_convergence</span>\n  <span class=\"n\">topology.algebra.module.strong_topology</span>\n  <span class=\"n\">analysis.normed_space.operator_norm</span>\n  <span class=\"n\">analysis.normed_space.multilinear</span>\n  <span class=\"n\">analysis.normed_space.bounded_linear_maps</span>\n  <span class=\"n\">analysis.calculus.fderiv</span>\n  <span class=\"n\">analysis.calculus.deriv</span>\n  <span class=\"n\">analysis.calculus.local_extr</span>\n  <span class=\"n\">analysis.calculus.mean_value</span>\n  <span class=\"n\">analysis.calculus.cont_diff</span>\n  <span class=\"n\">analysis.complex.real_deriv</span>\n  <span class=\"n\">analysis.special_functions.exp_deriv</span>\n  <span class=\"n\">analysis.special_functions.log.deriv</span>\n  <span class=\"n\">analysis.special_functions.pow_deriv</span>\n  <span class=\"n\">analysis.convex.specific_functions</span>\n<span class=\"bp\">*</span> <span class=\"n\">analysis.special_functions.trigonometric.complex</span>\n<span class=\"bp\">*</span> <span class=\"n\">analysis.special_functions.trigonometric.arctan</span>\n  <span class=\"n\">measure_theory.function.special_functions</span>\n  <span class=\"n\">measure_theory.integral.mean_inequalities</span>\n  <span class=\"n\">measure_theory.function.simple_func_dense</span>\n  <span class=\"n\">measure_theory.function.strongly_measurable</span>\n  <span class=\"n\">measure_theory.function.ae_eq_fun</span>\n  <span class=\"n\">measure_theory.function.lp_space</span>\n  <span class=\"n\">measure_theory.function.lp_order</span>\n  <span class=\"n\">measure_theory.function.l1_space</span>\n  <span class=\"n\">measure_theory.function.simple_func_dense_lp</span>\n  <span class=\"n\">measure_theory.integral.set_to_l1</span>\n  <span class=\"n\">measure_theory.integral.bochner</span>\n  <span class=\"n\">measure_theory.integral.set_integral</span>\n  <span class=\"n\">measure_theory.function.ae_eq_of_integral</span>\n<span class=\"bp\">*</span> <span class=\"n\">measure_theory.measure.with_density_vector_measure</span>\n<span class=\"bp\">*</span> <span class=\"n\">measure_theory.decomposition.lebesgue</span>\n<span class=\"bp\">*</span> <span class=\"n\">measure_theory.decomposition.radon_nikodym</span>\n  <span class=\"n\">measure_theory.function.conditional_expectation.basic</span>\n  <span class=\"n\">measure_theory.function.conditional_expectation.indicator</span>\n  <span class=\"n\">measure_theory.function.conditional_expectation.real</span>\n  <span class=\"n\">probability.process.filtration</span>\n  <span class=\"n\">probability.process.adapted</span>\n  <span class=\"n\">probability.process.stopping</span>\n  <span class=\"n\">probability.process.hitting_time</span>\n  <span class=\"n\">probability.martingale.basic</span>\n  <span class=\"n\">probability.martingale.upcrossing</span>\n  <span class=\"n\">probability.martingale.convergence</span>\n  <span class=\"n\">probability.martingale.borel_cantelli</span>\n  <span class=\"n\">probability.borel_cantelli</span>\n</code></pre></div>",
        "id": 309270051,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668206892
    },
    {
        "content": "<p>The ones marked with a <code>*</code> contain no theorems transitively referenced by stuff in <code>borel_cantelli</code>. There are 49 unused modules listed out of a total 163</p>",
        "id": 309270257,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668207063
    },
    {
        "content": "<p>So the suspicious modules are the unstarred ones coming right after a starred group, like <code>measure_theory.decomposition.radon_nikodym -&gt; measure_theory.function.conditional_expectation.basic</code></p>",
        "id": 309270864,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668207434
    },
    {
        "content": "<p><code>algebra.group_power.default</code> is a false positive given that it contains <em>no</em> theorem.</p>",
        "id": 309271158,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1668207613
    },
    {
        "content": "<p>yes, <code>*.default</code> and <code>tactic.*</code> modules are generally false positives</p>",
        "id": 309271205,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668207640
    },
    {
        "content": "<p>On the other hand, we increasingly rarely use <code>.default</code> files, and perhaps should plan to use them even less.</p>",
        "id": 309271252,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1668207670
    },
    {
        "content": "<p><code>group_theory.subgroup.basic</code> can easily be made not to import <code>group_theory.submonoid.pointwise</code>. I can do that.</p>",
        "id": 309271272,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1668207683
    },
    {
        "content": "<p>the whole <code>mv_polynomial</code> import looks pretty suspicious</p>",
        "id": 309271299,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668207709
    },
    {
        "content": "<p>Anne is working on that.</p>",
        "id": 309271333,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1668207723
    },
    {
        "content": "<p>(This thread!)</p>",
        "id": 309271357,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1668207734
    },
    {
        "content": "<p>While I'm at it, let me say that <a href=\"https://tqft.net/mathlib/algebra/algebra/basic\">file#algebra/algebra/basic</a> introduces unnecessary imports in many places.</p>",
        "id": 309272059,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1668208225
    },
    {
        "content": "<p>I added some more info to the list above: the ones marked with <code>-</code> are used by <code>borel_cantelli</code> but not used by anything in <code>analysis.calculus.mean_value</code>, another nice endpoint theorem about 2/3 of the way down</p>",
        "id": 309272096,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668208270
    },
    {
        "content": "<p>This is not all dodgy imports, right? Only those that are on the longest path.</p>",
        "id": 309273193,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1668209107
    },
    {
        "content": "<p>yes</p>",
        "id": 309273433,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668209349
    },
    {
        "content": "<p>it's a bit harder to visualize if it's not a path... here you know that each thing in the list directly imports the previous one so it's easier to pinpoint the dodgy import</p>",
        "id": 309273610,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668209439
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/17491\">#17491</a> for <code>data.set.pointwise → group_theory.group_action.basic</code></p>",
        "id": 309274344,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1668210118
    },
    {
        "content": "<p>Jason was at Xena and he seemed very proud to have made the deepest part of mathlib</p>",
        "id": 309283161,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1668218340
    },
    {
        "content": "<p>A slightly dubious honour. :-)</p>",
        "id": 309283622,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1668218772
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/17541\">#17541</a> flips the import order between <code>ring_theory.noetherian</code> and <code>ring_theory.finiteness</code> by moving <code>submodule.fg</code> and <code>ideal.fg</code> to <code>finiteness</code>.</p>",
        "id": 309899287,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1668443292
    }
]