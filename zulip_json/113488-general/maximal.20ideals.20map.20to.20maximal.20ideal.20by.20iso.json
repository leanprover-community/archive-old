[
    {
        "content": "<p>Hi,<br>\nI am attempting construct a framework of constructing instances of <code>is_iso_functorial</code>, and I wish to take <code>is_local_ring</code> as example. But there is a lemma I need which I cannot find and struggle to prove in lean. </p>\n<p>Could someone please just give me a proof that maximal ideals are mapped to maximal ideals under an isomorphism?</p>\n<p>Thank you!</p>",
        "id": 165871784,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1558067668
    },
    {
        "content": "<p>Actually the version I am proving is </p>\n<div class=\"codehilite\"><pre><span></span>lemma comap_maximal_maximal (X Y : CommRing.{0}) (ix : ideal X) (f : X ≅ Y) (p : ideal.is_maximal ix):\n ideal.is_maximal (ideal.comap f.inv ix)\n</pre></div>\n\n\n<p>which requires using the category theory library, but if someone prove another version without the category theory thing, I will also very appreciate!</p>",
        "id": 165871806,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1558067758
    },
    {
        "content": "<p>For the above to run, I did</p>\n<div class=\"codehilite\"><pre><span></span>import iso_induction\nimport ring_theory.ideals data.equiv.algebra\nimport category_theory.instances.CommRing\nimport category_theory.concrete_category\nimport category_theory.opposites\nimport ring_theory.ideal_operations\nimport ring_theory.ideals\nimport category_theory.core\nimport category_theory.elements\n</pre></div>",
        "id": 165872819,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1558069122
    },
    {
        "content": "<p>Maybe the set of all ideals form a lattice and you can prove something about maximal elements of a lattice</p>",
        "id": 165876670,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1558074749
    },
    {
        "content": "<p>Shouldn't <code>iso_induction</code> do this recursively? If it can't do this, you set your target too high.</p>",
        "id": 165876760,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1558074924
    },
    {
        "content": "<p>At first we're building the <code>iso_functoriality</code> instances by hand. Then we can automate how they get constructed.</p>",
        "id": 165876914,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1558075188
    },
    {
        "content": "<p>I've always regarded this as the statement that if you have an isomorphism of lattices then the subsets cut out by all the sensible predicates also biject with each other.</p>",
        "id": 165878074,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1558076808
    },
    {
        "content": "<p>By \"sensible\" I mean \"the ones I would allow in <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>m</mi><mi>a</mi><mi>t</mi><mi>h</mi><mi>s</mi><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mi>e</mi></mrow><annotation encoding=\"application/x-tex\">maths\\ mode</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.69444em;\"></span><span class=\"strut bottom\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\">m</span><span class=\"mord mathit\">a</span><span class=\"mord mathit\">t</span><span class=\"mord mathit\">h</span><span class=\"mord mathit\">s</span><span class=\"mord mathit\"><span class=\"mspace\"> </span><span class=\"mord mathit\">m</span></span><span class=\"mord mathit\">o</span><span class=\"mord mathit\">d</span><span class=\"mord mathit\">e</span></span></span></span>\"</p>",
        "id": 165878085,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1558076837
    },
    {
        "content": "<p>Sorry, I forgot mentioning the fact that I am the student of <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span>  and I am currently attempt writing <code>iso_induction</code> with help of Scott and Keeley. </p>\n<p>The current version of <code>iso_induction</code> cannot do such much thing. It can only rewrite the goal <code>P X</code> into <code>P Y</code> if it can find <code>is_iso_functorial P</code> and <code>X \\iso Y</code>. The current attempt is to make constructing such instances as easy as possible, and we are attempting testing a framework of constructing a certain type of instances. And we are testing if this framework can be used to build instances of <code>is_iso_functorial</code>instance of <code>is_local_ring</code>. </p>\n<p>Thank you for providing thoughts about proving it! I think I basically know to prove this lemma, but sometimes the lean's behaviour is strange and does not allow me to do something and I have spent much more time on the proof of this lemma then I expected. As writing this lemma is not the main part of this project (I'd like to solve the problems I come up with, just I have other coursework so my time is quite limited, at least at this stage), so I just wish for a proof here. I will definitely return here to try to think about isomorphism of lattice when I have lower pressure from coursework. I know that it is quite ambitious to produce a good version of this tactic within such short time, I would be very happy to keep developing it after the semester and add new things to it, and perhaps find out a way to construct such instance using order of a lattice.</p>",
        "id": 165879749,
        "sender_full_name": "Yiming Xu",
        "timestamp": 1558079144
    },
    {
        "content": "<p>I would reiterate my suggestion to focus on <code>transfer</code> style lemmas. They work in much more generality than isos</p>",
        "id": 165880083,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558079634
    },
    {
        "content": "<p>This issue keeps on coming up (unsurprisingly) and information about it is now in several threads here. I don't know what to do about this. Mario even posted some <code>transfer</code> code with some comment of the form \"this is as far as I've got\", but it was right in the middle of when I was really pushing to get perfectoids compiling and I didn't look at it at the time...I wonder if I starred it...</p>",
        "id": 165880747,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1558080373
    },
    {
        "content": "<p>I know that this is orthogonal to your immediate question here, but I will take the opportunity to rant anyway: the correct definition of local is </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">is_unit</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">is_unit</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n</pre></div>\n\n\n<p>and one should deduce from this that <code>{x : R // ¬ (is_unit x)}</code> is the unique maximal ideal.  This is logically preferable for many reasons, including the fact that it makes your transfer lemma easier.</p>",
        "id": 165890794,
        "sender_full_name": "Neil Strickland",
        "timestamp": 1558091503
    },
    {
        "content": "<p>o_O? As a mathematician I am not sure what the \"correct\" definition of anything is :-) This definition makes the zero ring local, which I think is a bad idea, but other than that it is a pretty cool way of doing it. Maybe also add 0 != 1?</p>",
        "id": 165892507,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1558093513
    },
    {
        "content": "<p>What if <code>is_unit 0</code> was false hehe</p>",
        "id": 165892667,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1558093675
    },
    {
        "content": "<p>is_unit 0 is true if 0=1. It's essential that the element of the zero ring is a unit, because you want the units of a ring to be a group (and the empty set isn't a group).</p>",
        "id": 165892756,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1558093752
    },
    {
        "content": "<p>ah, cool</p>",
        "id": 165892769,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1558093770
    },
    {
        "content": "<p>Ooh, I didn't check too carefully. It is indeed standard to add <code>0 \\ne 1</code>.</p>",
        "id": 165893300,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1558094123
    },
    {
        "content": "<p>Yes, sorry, you should add <code>0 ≠ 1</code> as part of the definition of a local ring.</p>",
        "id": 165898597,
        "sender_full_name": "Neil Strickland",
        "timestamp": 1558098528
    },
    {
        "content": "<blockquote>\n<p>Mario even posted some <code>transfer</code> code with some comment of the form \"this is as far as I've got\", but it was right in the middle of when I was really pushing to get perfectoids compiling and I didn't look at it at the time...I wonder if I starred it...</p>\n</blockquote>\n<p><a href=\"#narrow/stream/116395-maths/topic/Perfectoid.20spaces/near/159808751\" title=\"#narrow/stream/116395-maths/topic/Perfectoid.20spaces/near/159808751\">https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/Perfectoid.20spaces/near/159808751</a></p>",
        "id": 165951990,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1558145380
    },
    {
        "content": "<p>lol of course it's in the perfectoid thread</p>",
        "id": 165952147,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558145542
    }
]