[
    {
        "content": "<p>I've always been a bit freaked out by <code>let</code>. I usually use <code>set</code> and it's fine, but I found an example where I can't use it. I also managed to get the tactic <code>exfalso</code> to fail, which is certainly a first for me.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">prime</span> <span class=\"c1\">-- or anything which has a function which returns a list</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">factors</span>\n<span class=\"c1\">-- nat.factors : ℕ → list ℕ</span>\n\n<span class=\"c1\">-- I want to do induction on a list which depends on n</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">set</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">factors</span> <span class=\"k\">with</span> <span class=\"n\">hl</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"c1\">-- error</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">induction tactic failed, failed to create new goal</span>\n<span class=\"cm\">state:</span>\n<span class=\"cm\">n : ℕ,</span>\n<span class=\"cm\">l : list ℕ := nat.factors n,</span>\n<span class=\"cm\">hl : l = nat.factors n</span>\n<span class=\"cm\">⊢ false</span>\n<span class=\"cm\">-/</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">factors</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">l</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"c1\">-- ⊢ (let l : list ℕ := nat.factors n in false) list.nil</span>\n    <span class=\"n\">exfalso</span><span class=\"o\">,</span> <span class=\"c1\">-- error</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">contradiction tactic failed</span>\n<span class=\"cm\">-/</span>\n  <span class=\"o\">},</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">factors</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- works but no assumption n.factors = nil in context</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>I was thinking about the prime factor question in <a class=\"stream\" data-stream-id=\"113489\" href=\"/#narrow/stream/113489-new-members\">#new members</a> and I wanted to do cases on whether the list of factors had 0, 1, or more than 1 element. I tried induction on length but in the case where the length was &gt;= 2 I couldn't extract the first two elements for reasons such as the above. What am I doing wrong?</p>",
        "id": 190460900,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584060150
    },
    {
        "content": "<p>I know there will be some goofy trick with the equation compiler but what if I'm in the middle of a tactic proof? [added later: actually, I can't even pull off the equation compiler trick, I want to do the old \"match on <code>rfl</code>\" thing...]</p>",
        "id": 190461166,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584060567
    },
    {
        "content": "<p>For your first example:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">prime</span> <span class=\"c1\">-- or anything which has a function which returns a list</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">factors</span>\n<span class=\"c1\">-- nat.factors : ℕ → list ℕ</span>\n\n<span class=\"c1\">-- I want to do induction on a list which depends on n</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">set</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">factors</span> <span class=\"k\">with</span> <span class=\"n\">hl</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"c1\">-- error</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">induction tactic failed, failed to create new goal</span>\n<span class=\"cm\">state:</span>\n<span class=\"cm\">n : ℕ,</span>\n<span class=\"cm\">l : list ℕ := nat.factors n,</span>\n<span class=\"cm\">hl : l = nat.factors n</span>\n<span class=\"cm\">⊢ false</span>\n<span class=\"cm\">-/</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>Adding <code>simp at *</code> before <code>cases l</code> seems to make it go through, but then both subgoals generated by <code>cases</code> have an explicit <code>let</code> binding under the line <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> In fact, I don't even think that the generated subgoals are well-typed, e.g. <code>(let l : list ℕ := nat.factors n in false) list.nil</code> in the first subgoal should reduce to <code>false list.nil</code> which doesn't even make sense.</p>",
        "id": 190462741,
        "sender_full_name": "Donald Sebastian Leung",
        "timestamp": 1584062706
    },
    {
        "content": "<p>The subgoals are probably well typed but the pretty printer is getting confused and not showing something like a lambda with an implicit argument</p>",
        "id": 190466111,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584067460
    }
]