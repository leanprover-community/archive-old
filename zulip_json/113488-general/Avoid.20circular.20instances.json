[
    {
        "content": "<p>The instance <a href=\"https://leanprover-community.github.io/mathlib_docs/find/invariant_basis_number_of_nontrivial_of_comm_ring\">docs#invariant_basis_number_of_nontrivial_of_comm_ring</a> says that any nontrivial commutative ring satisfies the <code>invariant_basis_number</code> (what this means is irrelevant for my question), and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nontrivial_of_invariant_basis_number\">docs#nontrivial_of_invariant_basis_number</a> says that rings with this property are <code>nontrivial</code>. Is there a way of making the latter an instance and avoid circularity?</p>\n<p>I am asking this <code>linear_algebra.dimension</code> because is full of <code>[nontrivial R] [invariant_basis_number R]</code>, and technically the first assumption is implied by the second. Of course if this is not possible we can just refactor <code>linear_algebra.dimension</code> to use some <code>letI</code> in proofs.</p>",
        "id": 257334566,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1634116548
    },
    {
        "content": "<p>I think there is no easy way in Lean 3: otherwise you'd get for a trivial <code>comm_ring R</code> a loop <code>invariant_basis_number → nontrivial → ...</code>. Perhaps Lean 4's tabled typeclass resolution can help.</p>\n<p>For now, the <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#nontriviality\">tactic#nontriviality</a> might help to reduce the amount of copy-pasting <code>letI := nontrivial_of_etc</code>.</p>",
        "id": 257335161,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1634116842
    },
    {
        "content": "<p>You might have to help the tactic by adding an appropriate lemma along the lines of:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[nontriviality]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">not_subsingleton_of_invariant_basis_number</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">invariant_basis_number</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">subsingleton</span> <span class=\"n\">R</span> <span class=\"bp\">↔</span> <span class=\"n\">false</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 257335400,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1634116954
    },
    {
        "content": "<p>See also <a href=\"#narrow/stream/113488-general/topic/.60wf_dvd_monoid.20.E2.86.94.20unique_factorization_monoid.60.20cycle/near/256609033\">my thread on a loop <code>ufm ↔ wf_dvd_monoid</code></a> from a couple of days ago, which has the same characteristics.</p>",
        "id": 257335683,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1634117115
    }
]