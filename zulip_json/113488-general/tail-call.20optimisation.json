[
    {
        "content": "<p>Is Lean supporting tail-call optimisation?</p>",
        "id": 163454363,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1555407470
    },
    {
        "content": "<p><a href=\"#narrow/stream/113488-general/topic/Efficient.20modular.20fibonacci/near/161592306\" title=\"#narrow/stream/113488-general/topic/Efficient.20modular.20fibonacci/near/161592306\">This thread</a> is relevant.  I would summarise it as saying that Mario's approach persuades Lean to do the optimisation, but it does need persuasion.  But I am not an expert on these things, and others might disagree with that summary.</p>",
        "id": 163457398,
        "sender_full_name": "Neil Strickland",
        "timestamp": 1555410862
    },
    {
        "content": "<p>See also <a href=\"#narrow/stream/113488-general/topic/Tail-call.20elimination.3F\" title=\"#narrow/stream/113488-general/topic/Tail-call.20elimination.3F\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Tail-call.20elimination.3F</a></p>",
        "id": 163457406,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1555410880
    },
    {
        "content": "<p>I think the short answer is no because I would expect a TCO to optimise <code>rev_aux</code>.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">set_option</span> <span class=\"n\">trace</span><span class=\"bp\">.</span><span class=\"n\">compiler</span><span class=\"bp\">.</span><span class=\"n\">code_gen</span> <span class=\"n\">true</span>\n<span class=\"n\">def</span> <span class=\"n\">rev_aux</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span><span class=\"n\">acc</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"n\">acc</span>\n<span class=\"bp\">|</span><span class=\"n\">acc</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"bp\">::</span><span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rev_aux</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"bp\">::</span> <span class=\"n\">acc</span><span class=\"o\">)</span> <span class=\"n\">t</span>\n</pre></div>\n\n\n<p>outputs</p>\n<div class=\"codehilite\"><pre><span></span>[compiler.code_gen]  rev_aux._main._meta_aux 3\n0: push 0\n1: builtin_cases list.cases_on, 2 4\n2: push 1\n3: goto 11\n4: push 4\n5: push 3\n6: push 1\n7: cnstr #1 2\n8: scnstr #0\n9: ginvoke rev_aux._main._meta_aux\n10: drop 2\n11: ret\n[compiler.code_gen]  rev_aux 1\n0: scnstr #0\n1: closure rev_aux._main 1\n2: ret\n</pre></div>\n\n\n<p>If I'm not mistaken TCO would replace step <code>9</code> with a <code>goto 1</code> and also some register shuffling. I could also be misinterpreting what is going on here.</p>",
        "id": 163457789,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1555411291
    },
    {
        "content": "<blockquote>\n<p>If I'm not mistaken TCO would replace step <code>9</code> with a <code>goto 1</code> and also some register shuffling. I could also be misinterpreting what is going on here.</p>\n</blockquote>\n<p>I'd say so too, but then again, we could both be wrong :')</p>",
        "id": 163461028,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1555414733
    }
]