[
    {
        "content": "<p>I'm new to Lean, but I think a motivating example would help me out, my interests currently don't lie in abstract algebraic, topological, homological etc, but instead on just analysis of arithmetic functions.  So show me some code!  Simplest code wins.</p>",
        "id": 286022398,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1655183771
    },
    {
        "content": "<p>Can we do LaTeX here?  $\\LaTeX$ test</p>",
        "id": 286022464,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1655183863
    },
    {
        "content": "<p>Yes, if you click your Start ChatJax button,we can see it</p>",
        "id": 286022472,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1655183881
    },
    {
        "content": "<p>take a look at <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.arithmetic_function.sigma\">docs#nat.arithmetic_function.sigma</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.arithmetic_function.sigma/src\">src#nat.arithmetic_function.sigma</a></p>",
        "id": 286024631,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1655186003
    },
    {
        "content": "<p><code>$$\\sigma$$</code> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>σ</mi></mrow><annotation encoding=\"application/x-tex\">\\sigma</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">σ</span></span></span></span></p>",
        "id": 286024645,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1655186028
    },
    {
        "content": "<p>For a simple example of a theorem involving a sum over divisors, how about <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.sum_totient\">docs#nat.sum_totient</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">sum_totient</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n.divisors.sum</span> <span class=\"n\">φ</span> <span class=\"bp\">=</span> <span class=\"n\">n</span>\n</code></pre></div>\n<p>(The theorem is called <code>sum_totient</code>, it lives in the <code>nat</code> namespace, and appending the <code>docs#</code> prefix in Zulip makes a link to that theorem in the documentation pages.)</p>",
        "id": 286059352,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1655207741
    },
    {
        "content": "<p>This is the statement that for any natural number <code>n</code>, the sum of the totient function <code>φ</code> over the divisors of <code>n</code> adds to <code>n</code>.</p>",
        "id": 286059552,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1655207850
    },
    {
        "content": "<p>i.e. the statement that you'd normally write as:<br>\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mo>∑</mo><mrow><mi>d</mi><mi mathvariant=\"normal\">∣</mi><mi>n</mi></mrow></msub><mi>ϕ</mi><mo stretchy=\"false\">(</mo><mi>d</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">\\sum_{d | n} \\phi(d) = n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.2247em;vertical-align:-0.4747em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2253em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">d</span><span class=\"mord mtight\">∣</span><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.4747em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">ϕ</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">d</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span></p>",
        "id": 286059713,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1655207939
    },
    {
        "content": "<p>You could write this more familiarly as <code>∀ n : ℕ, ∑ d in (divisors n), φ d = n</code>, but the convention in mathlib tends toward writing things more concisely where possible.</p>",
        "id": 286062500,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1655209380
    },
    {
        "content": "<p>Is that syntactically equal or is there a beta reduction involved in the second statement?</p>",
        "id": 286064543,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1655210314
    },
    {
        "content": "<p>The first statement is the reduced version of the second</p>",
        "id": 286091851,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1655221252
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"284160\">@Eric Rodriguez</span> I think it's eta conversion rather than beta reduction</p>",
        "id": 286095374,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1655222665
    },
    {
        "content": "<p>You could test it using <code>dsimp only { beta := ff, eta := ff }</code> and turning each one on individually. (Options are documented <a href=\"https://leanprover-community.github.io/extras/simp.html\">here</a> at the end.)</p>",
        "id": 286095544,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1655222733
    },
    {
        "content": "<p>oh interesting, I used to think that <code>eta</code> was solely for structures, I think I just completely misunderstood it. thanks!</p>",
        "id": 286113125,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1655230839
    }
]