[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">basic</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cast</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">mod_add_mod</span> <span class=\"c1\">-- ∀ (m n k : ℤ), (m % n + k) % n = (m + k) % n</span>\n<span class=\"c1\">-- #check nat.mod_add_mod -- unknown identifier</span>\n<span class=\"c1\">-- so let&#39;s create it</span>\n\n<span class=\"c1\">-- note:</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat_mod</span> <span class=\"c1\">-- ∀ (m n : ℕ), ↑m % ↑n = int.of_nat (m % n)</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">mod_add_mod</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"err\">%</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"err\">%</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"err\">%</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat_inj</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat_mod</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat_mod</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cast_add</span> <span class=\"c1\">-- fails</span>\n  <span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">  rewrite tactic failed, did not find instance of the pattern in the target expression</span>\n<span class=\"cm\">  ↑(?m_4 + ?m_5)</span>\n<span class=\"cm\">state:</span>\n<span class=\"cm\">m n k : ℕ</span>\n<span class=\"cm\">⊢ ↑(m % n + k) % ↑n = ↑(m + k) % ↑n</span>\n<span class=\"cm\">  -/</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 127073963,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527242716
    },
    {
        "content": "<p>What am I doing wrong?</p>",
        "id": 127073966,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527242721
    },
    {
        "content": "<p>I found a \"hole\" in mathlib -- but am failing to fix it.</p>",
        "id": 127073972,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527242745
    },
    {
        "content": "<p>I tried to be really precise:</p>",
        "id": 127074019,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527242769
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">have</span> <span class=\"n\">H1</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cast_add</span> <span class=\"bp\">ℤ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"err\">%</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n  <span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">  H1 : ↑(m % n + k) = ↑(m % n) + ↑k</span>\n<span class=\"cm\">  ⊢ ↑(m % n + k) % ↑n = ↑(m + k) % ↑n</span>\n<span class=\"cm\">  -/</span>\n\n  <span class=\"c1\">-- rw H1, -- fails</span>\n  <span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">  rewrite tactic failed, did not find instance of the pattern in the target expression</span>\n<span class=\"cm\">  ↑(m % n + k)</span>\n<span class=\"cm\">state:</span>\n<span class=\"cm\">m n k : ℕ,</span>\n<span class=\"cm\">H1 : ↑(m % n + k) = ↑(m % n) + ↑k</span>\n<span class=\"cm\">⊢ ↑(m % n + k) % ↑n = ↑(m + k) % ↑n</span>\n<span class=\"cm\">  -/</span>\n</pre></div>",
        "id": 127074021,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527242773
    },
    {
        "content": "<p>I switched notation off and the rewrite still looked like it should work</p>",
        "id": 127074028,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527242797
    },
    {
        "content": "<p>I switched pp.all off and got swamped.</p>",
        "id": 127074031,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527242808
    },
    {
        "content": "<p><code>int.coe_nat_add</code> is the correct lemma, rather than <code>nat.cast_add</code> I think</p>",
        "id": 127074035,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1527242820
    },
    {
        "content": "<p>You're right Chris.</p>",
        "id": 127074043,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527242856
    },
    {
        "content": "<p>Do you know why what I tried is failing?</p>",
        "id": 127074045,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527242862
    },
    {
        "content": "<p>Because <code>cast</code> is a coercion into a general ring, whereas there's a seperately defined coercion from<code>nat</code> to <code>int</code>, probably because it's in core, but cast is is in mathlib</p>",
        "id": 127074121,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1527242992
    },
    {
        "content": "<p>Also, <code>of_nat</code> is a more natural function to use as the coercion than <code>cast</code> which just does 1 + 1 + 1 ...</p>",
        "id": 127074193,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1527243047
    },
    {
        "content": "<p>You can probably use <code>nat.modeq</code> to prove this one, there are more modeq theorems than there are theorems about mod</p>",
        "id": 127074721,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527243942
    },
    {
        "content": "<blockquote>\n<p>You can probably use <code>nat.modeq</code> to prove this one, there are more modeq theorems than there are theorems about mod</p>\n</blockquote>\n<p>My eyes are opened!</p>",
        "id": 127122090,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527327122
    },
    {
        "content": "<p>I had somehow ruled out this MOD stuff as \"another way of setting up the theory, which I didn't use\".</p>",
        "id": 127122131,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527327203
    },
    {
        "content": "<p>I've always thought that MOD notation was horrible, by the way.</p>",
        "id": 127122133,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527327218
    },
    {
        "content": "<p>pmod is standard LaTeX notation</p>",
        "id": 127122177,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527327316
    },
    {
        "content": "<p>there were technical reasons I couldn't use parens and lowercase</p>",
        "id": 127122216,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527327369
    },
    {
        "content": "<p>I think using LaTeX as a guide is a good idea. I'm really familiar with LaTeX notation and it still occasionally confuses me that <code>\\equiv</code> is not <code>equiv</code></p>",
        "id": 127122217,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527327378
    },
    {
        "content": "<p>Oh --</p>",
        "id": 127122218,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527327394
    },
    {
        "content": "<p>this was forced upon you somehow?</p>",
        "id": 127122219,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527327400
    },
    {
        "content": "<p>I had no idea! I just thought it was a wacky design decision</p>",
        "id": 127122220,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527327414
    },
    {
        "content": "<p>the MOD stuff</p>",
        "id": 127122223,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527327423
    },
    {
        "content": "<p>I'm not even sure the notation is worth it</p>",
        "id": 127122226,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527327471
    },
    {
        "content": "<p>This wasn't the fault of some labour-saving tactic was it?</p>",
        "id": 127122227,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527327474
    },
    {
        "content": "<p>The notation is what mathematicians want</p>",
        "id": 127122264,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527327485
    },
    {
        "content": "<p>it's a parsing thing</p>",
        "id": 127122267,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527327488
    },
    {
        "content": "<p>We are sticklers for notation</p>",
        "id": 127122268,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527327496
    },
    {
        "content": "<p>That's why I mentioned it -- it looks funny to mathematicians because there is already standard notation</p>",
        "id": 127122269,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527327534
    },
    {
        "content": "<p>It's probably better than no notation, but even as it is it's a bit problematic</p>",
        "id": 127122310,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527327604
    },
    {
        "content": "<p>it enables you to write uncluttered calc proofs</p>",
        "id": 127122315,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527327612
    },
    {
        "content": "<p>so it's definitely better than no notation</p>",
        "id": 127122316,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527327617
    },
    {
        "content": "<p>but it still looks funny</p>",
        "id": 127122317,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527327625
    },
    {
        "content": "<p>To be honest I've never used it -- I assume it can be used in calc proofs</p>",
        "id": 127122318,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527327642
    },
    {
        "content": "<p>I'm giving a talk on this stuff in about 10 hours</p>",
        "id": 127122319,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527327661
    },
    {
        "content": "<p>I never tried it, but I think chris did</p>",
        "id": 127122324,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527327669
    },
    {
        "content": "<p>Maybe it's about time I learnt how it worked.</p>",
        "id": 127122325,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527327677
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> how did you learn that funny <code>MOD</code> stuff?</p>",
        "id": 127122327,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527327695
    },
    {
        "content": "<p>What funny MOD stuff?</p>",
        "id": 127122380,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1527327825
    },
    {
        "content": "<p>I have generally got the hang of how to handle casts now. The point of view which I want to push amongst the UGs is that even though yes it's annoying that natural numbers aren't actually real numbers, <code>simp</code> should do all the translating for you. But here's an example where I couldn't make it work:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">M</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">M</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">H</span><span class=\"o\">],</span>\n  <span class=\"c1\">-- ⊢ 0 &lt; 1 + ↑M</span>\n  <span class=\"c1\">-- gaargh</span>\n  <span class=\"c1\">-- simp at H, -- won&#39;t change it to 0 &lt; 1 + M</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>Applying <code>simp</code> to nat <code>M + 1</code> doesn't change it, but applying <code>simp</code> to real <code>M + 1</code> changes it to <code>1 + M</code> and this somehow means Lean loses track.</p>",
        "id": 156678741,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1548239668
    },
    {
        "content": "<p>I know I can use some cast_lt or whatever, but this is exactly what I am trying to avoid. <code>simp</code> is usually good at these.</p>",
        "id": 156678755,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1548239696
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 156694974,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1548255521
    },
    {
        "content": "<p>I recommend finding the <code>simp</code> lemma responsible for this (probably something like <code>real.add_comm</code>) and declare in your file <code>local attribute [-simp] real.add_comm</code></p>",
        "id": 156736166,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1548287585
    }
]