[
    {
        "content": "<p>Is it correct to say that if I define <code> posreal := {r : ℝ // 0 &lt; r}</code> then, remembering <code>nnreal := {r : ℝ // 0 ≤ r}</code>, am I right in thinking that it is impossible to prove <code>nnreal = with_zero posreal</code> in Lean?</p>",
        "id": 170583846,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1562796680
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> ? BTW -- nice to meet you today!</p>",
        "id": 170583953,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1562796757
    },
    {
        "content": "<p>That is correct. You can prove that your types are equivalent, but you can (almost) never prove that two types are equal. Therefore, it is \"evil\" to work with equality between types (unless you're doing homotopy type theory, where this equality is an easy consequence of univalence).</p>",
        "id": 170584107,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1562796889
    },
    {
        "content": "<p>Well, the non-negative reals are equal to the disjoint union of zero and the positive reals, so how am I supposed to say this in Lean?</p>",
        "id": 170584312,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1562797060
    },
    {
        "content": "<p>Every theorem about the non-negative reals is also true for the disjoint union of zero and the positive reals.</p>",
        "id": 170584371,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1562797090
    },
    {
        "content": "<p>and vice versa</p>",
        "id": 170584379,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1562797101
    },
    {
        "content": "<p>Ask any mathematician</p>",
        "id": 170584382,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1562797105
    },
    {
        "content": "<p>you would have a better shot proving that <code>with_zero posreal</code> is equal to the positive <code>ennreal</code>s since both <code>with_zero</code> and <code>ennreal</code> reduce to <code>option _</code></p>\n<p>but then you're basically trying to prove</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">option</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"n\">P</span> <span class=\"n\">a</span><span class=\"o\">})</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"n\">option</span><span class=\"bp\">.</span><span class=\"n\">cases_on</span> <span class=\"n\">a</span> <span class=\"n\">true</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">x</span><span class=\"o\">)}</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>\n\n\n<p>and i'm not sure if that's provable in Lean</p>",
        "id": 170586696,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1562799235
    },
    {
        "content": "<p><code>with_zero</code> seems like a construction for adjoining a generic element (by <code>option</code>) and guiding typeclass inference to ensure that <code>none</code> behaves like a zero; if i take the reals, chop off zero, and then adjoin a generic point and say it must behave like zero, i shouldn't expect the new generic point to be literally equal to the old one, only that i end up at an isomorphic copy of the reals</p>\n<p>but if we don't discard the information of the original zero, then of course, if we have two provably equivalent predicates (<code>0 ≤ x</code> vs <code>0 &lt; x ∨ 0 = x</code>) their subtypes are equal</p>",
        "id": 170587906,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1562800228
    },
    {
        "content": "<p>If you want to use the word \"isomorphic\" instead of \"equal\" that's fine.</p>",
        "id": 170588142,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1562800439
    },
    {
        "content": "<p>Q1) True or false: the non-negative reals are equal to (or equivalent in some precise way to) the disjoint union of zero and the positive reals.</p>\n<p>Q2) True or false: every true mathematical theorem about the non-negative reals is also true for the disjoint union of zero and the positive reals.</p>",
        "id": 170588318,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1562800578
    },
    {
        "content": "<p>E.g., you can prove ring equivalence (see <code>data/equiv/algebra</code>). Unfortunately, there is no simple way to rewrite over such equivalences in Lean.</p>",
        "id": 170588918,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1562801233
    },
    {
        "content": "<p>Types in Lean care about internal representation of its members in the memory, not about mathematical properties.</p>",
        "id": 170589320,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1562801644
    },
    {
        "content": "<p>In particular, <code>α × β ≠ β × α</code></p>",
        "id": 170589486,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1562801777
    },
    {
        "content": "<p>Right.</p>",
        "id": 170589936,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1562802269
    },
    {
        "content": "<p>This issue is costing me a lot of time right now.</p>",
        "id": 170589938,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1562802278
    },
    {
        "content": "<p>This is just the transfer problem yet again. The answer to Q1 is yes and Q2 is no, although if I show you the counterexample you will complain it's not mathematical enough</p>",
        "id": 170594570,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562808396
    },
    {
        "content": "<p>Q2: define the universal axioms of a mathematical theorem. For example, let me define a proposition that reads: \"forall types, return true if types = cauchy sequence and false if types = dedekind cut\". Then even though  the two types of real numbers are isomorphic, we clearly have a proposition here that returns a different value for each one. In order to prove things that hold for both objects we have to restrict our propositions to the language of fields, then we can write a tactic to prove things about both of them just as the <code>ring</code> tactic does, which is what <code>transfer</code> does using relators.</p>",
        "id": 170595327,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1562809583
    },
    {
        "content": "<p>I feel like there's an infinite number of dumb propositions that can distinguish between two isomorphic objects, and how is a computer supposed to infer what axioms must hold for each object? It's also true that there are an infinite number of dumb propositions that hold for two isomorphic objects. It's a human problem to decide which ones are relevant, only humans can decide what makes a property \"interesting\", because math is done for the sake of human curiosity.</p>",
        "id": 170595391,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1562809727
    },
    {
        "content": "<p>So I guess that I'm of the opinion that Q2 is false; and all you can say easily is that all theorems in the language of semirings hold for the non negative reals and the disjoint union of zero and the positive reals, and everything else must be proven.</p>",
        "id": 170595956,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1562810704
    },
    {
        "content": "<p>One thing you can say is that any \"property of rings\" is preserved by ring isomorphism; but of course this leaves open the question of what a property of rings is, and I would define it as a property preserved by ring isomorphism</p>",
        "id": 170596088,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562810982
    },
    {
        "content": "<p>By the way, you can't prove that the proposition  \"forall types, return true if types = cauchy sequence and false if types = dedekind cut\" exists</p>",
        "id": 170596146,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562811068
    },
    {
        "content": "<p>really? why?</p>",
        "id": 170596154,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1562811104
    },
    {
        "content": "<p>You can define the proposition \"X = cauchy reals\" but you can't prove that this is false when X = dedekind reals because that's equivalent to cauchy reals != dedekind reals, and \"cauchy reals = dedekind reals\" is consistent with lean</p>",
        "id": 170596213,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562811164
    },
    {
        "content": "<blockquote>\n<p>One thing you can say is that any \"property of rings\" is preserved by ring isomorphism; but of course this leaves open the question of what a property of rings is, and I would define it as a property preserved by ring isomorphism</p>\n</blockquote>\n<p>I can't even imagine what the algorithm would be to work backwards and figure out what additional properties of rings you would need to preserve in order to transfer a proposition between the cauchy and dedekind reals</p>",
        "id": 170596396,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1562811538
    },
    {
        "content": "<p>I guess what you could do is write a hole tactic, for which you provide two isomorphic types, a list of properties, and the proposition you want to transfer. Then the tactic will recursively parse the proposition and check that each term preserves the property axioms, maybe with some sort of automatic prover. Anything left over is spit out for the human to prove.</p>",
        "id": 170596680,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1562811996
    },
    {
        "content": "<p>I can already feel like there might be some problems with this but I spent about 30 seconds thinking about it.</p>",
        "id": 170596694,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1562812057
    },
    {
        "content": "<p>Also suddenly your tactic is actually as complicated as an optimizing compiler</p>",
        "id": 170596977,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1562812446
    },
    {
        "content": "<blockquote>\n<p>I can't even imagine what the algorithm would be to work backwards and figure out what additional properties of rings you would need to preserve in order to transfer a proposition between the cauchy and dedekind reals</p>\n</blockquote>\n<p>You don't need any additional properties - they are isomorphic as rings so any ring proposition will transfer</p>",
        "id": 170597183,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562812832
    },
    {
        "content": "<blockquote>\n<p>I guess what you could do is write a hole tactic, for which you provide two isomorphic types, a list of properties, and the proposition you want to transfer. Then the tactic will recursively parse the proposition and check that each term preserves the property axioms, maybe with some sort of automatic prover. Anything left over is spit out for the human to prove.</p>\n</blockquote>\n<p>This is basically what <code>transfer</code> does</p>",
        "id": 170597193,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562812871
    },
    {
        "content": "<p>Yes, but I think Kevin was interested in transferring an arbitrary proposition; so we then have the task of deciding whether or not that proposition is in the set of properties that are shared by both cauchy reals and dekekind reals</p>",
        "id": 170597306,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1562813081
    },
    {
        "content": "<p>or  (union of zero and the positive reals) intersect (non negative reals), as he mentioned in q2</p>",
        "id": 170597377,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1562813253
    },
    {
        "content": "<p>I am presuming that the isomorphism of rings is determined manually in advance</p>",
        "id": 170597498,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562813429
    },
    {
        "content": "<p>the transfer stuff won't help you with that proof</p>",
        "id": 170597510,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562813460
    },
    {
        "content": "<p>yeah, but that's what he wants, because that's what you need to make q2 = true (I think). Automatic classification of an arbitrary proposition as \"mathematical\" or not, where mathematical is undefined but every mathematician knows it when they see it</p>",
        "id": 170597561,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1562813562
    },
    {
        "content": "<p>The proof that two very different definitions of the reals are equivalent is not obvious in any sense under discussion</p>",
        "id": 170600468,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562818635
    },
    {
        "content": "<p>What is obvious is all the consequences of this fact, like if the cauchy reals are noetherian then so are the dedekind reals</p>",
        "id": 170600479,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562818677
    },
    {
        "content": "<p>Of course <code>cauchy</code> vs <code>dedekind</code> is a red herring wrt Kevin's example. <code>with_zero preal = nnreal</code> is in fact obvious.</p>",
        "id": 170601173,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1562819750
    },
    {
        "content": "<p>I think every mathematician agrees that you need to do some work to prove <code>cauchy_reals = dedekind_reals</code>. But for the other one they certainly won't understand what the question even means, like: \"What is there to prove? Aren't they defeq?\"</p>",
        "id": 170601258,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1562819868
    },
    {
        "content": "<p>[/troll]</p>",
        "id": 170601261,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1562819874
    },
    {
        "content": "<blockquote>\n<p>Well, the non-negative reals are equal to the disjoint union of zero and the positive reals, so how am I supposed to say this in Lean?</p>\n</blockquote>\n<p>Equality between types is evil, but equality between sets on a type is fine. You can prove in Lean that</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">}</span> <span class=\"err\">∪</span> <span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span> <span class=\"o\">}</span>\n</pre></div>",
        "id": 170610286,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1562831468
    },
    {
        "content": "<p>Lean even knows that this implies that the corresponding subtypes are equiv.</p>",
        "id": 170610575,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1562831720
    },
    {
        "content": "<p>But of course the LHS of Floris's equation is <em>not</em> <code>with_zero preal</code>. You can prove that it is the image of the <strong>obvious, canonical</strong> map <code>with_zero preal → ℝ</code>. But then... you might as well show that the RHS is the image, which is also obvious.</p>",
        "id": 170610672,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1562831807
    },
    {
        "content": "<blockquote>\n<p>So I guess that I'm of the opinion that Q2 is false;</p>\n</blockquote>\n<p>So I think that mathematicians are very much of the opinion that Q2 is true.</p>",
        "id": 170619503,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1562839689
    },
    {
        "content": "<blockquote>\n<p>yeah, but that's what he wants, because that's what you need to make q2 = true (I think). Automatic classification of an arbitrary proposition as \"mathematical\" or not, where mathematical is undefined but every mathematician knows it when they see it</p>\n</blockquote>\n<p>Yes Andrew, this is exactly the issue. We know it when we see it, but it seems hard to formalise. In some sense, I don't know why this is.</p>",
        "id": 170619543,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1562839759
    }
]