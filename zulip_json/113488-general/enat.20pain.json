[
    {
        "content": "<p>Is this a known bug?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">@</span><span class=\"n\">eq</span> <span class=\"n\">enat</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">coe</span> <span class=\"n\">nat</span> <span class=\"n\">enat</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">coe_to_lift</span> <span class=\"n\">nat</span> <span class=\"n\">enat</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">nat.cast_coe</span> <span class=\"n\">enat</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_zero_class.to_has_zero</span> <span class=\"n\">enat</span>\n      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_monoid.to_add_zero_class</span> <span class=\"n\">enat</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_monoid.to_add_monoid</span> <span class=\"n\">enat</span> <span class=\"n\">enat.add_comm_monoid</span><span class=\"o\">)))</span>\n        <span class=\"n\">enat.has_one</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_zero_class.to_has_add</span> <span class=\"n\">enat</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_monoid.to_add_zero_class</span> <span class=\"n\">enat</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_monoid.to_add_monoid</span> <span class=\"n\">enat</span> <span class=\"n\">enat.add_comm_monoid</span><span class=\"o\">)))))</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">coe</span> <span class=\"n\">nat</span> <span class=\"n\">enat</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">coe_to_lift</span> <span class=\"n\">nat</span> <span class=\"n\">enat</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">coe_base</span> <span class=\"n\">nat</span> <span class=\"n\">enat</span> <span class=\"n\">enat.has_coe</span><span class=\"o\">))</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>",
        "id": 251927677,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1630695750
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">enat.coe_eq_coe</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">@</span><span class=\"n\">eq</span> <span class=\"n\">enat</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">coe</span> <span class=\"n\">nat</span> <span class=\"n\">enat</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">coe_to_lift</span> <span class=\"n\">nat</span> <span class=\"n\">enat</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">nat.cast_coe</span> <span class=\"n\">enat</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_zero_class.to_has_zero</span> <span class=\"n\">enat</span>\n      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_monoid.to_add_zero_class</span> <span class=\"n\">enat</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_monoid.to_add_monoid</span> <span class=\"n\">enat</span> <span class=\"n\">enat.add_comm_monoid</span><span class=\"o\">)))</span>\n        <span class=\"n\">enat.has_one</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_zero_class.to_has_add</span> <span class=\"n\">enat</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_monoid.to_add_zero_class</span> <span class=\"n\">enat</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_monoid.to_add_monoid</span> <span class=\"n\">enat</span> <span class=\"n\">enat.add_comm_monoid</span><span class=\"o\">)))))</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">coe</span> <span class=\"n\">nat</span> <span class=\"n\">enat</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">coe_to_lift</span> <span class=\"n\">nat</span> <span class=\"n\">enat</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">coe_base</span> <span class=\"n\">nat</span> <span class=\"n\">enat</span> <span class=\"n\">enat.has_coe</span><span class=\"o\">))</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">nat.succ_eq_add_one</span><span class=\"o\">,</span> <span class=\"n\">enat.coe_one</span><span class=\"o\">,</span> <span class=\"n\">enat.coe_add</span><span class=\"o\">,</span> <span class=\"n\">nat.cast_add</span><span class=\"o\">,</span> <span class=\"n\">nat.cast_one</span><span class=\"o\">,</span> <span class=\"n\">ih</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 251932799,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1630698386
    },
    {
        "content": "<p>Can some coercion expert please explain how to fix this issue?</p>",
        "id": 251978361,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1630737588
    },
    {
        "content": "<p>I need this for <a href=\"https://github.com/leanprover-community/mathlib/issues/8994\">#8994</a></p>",
        "id": 251979190,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1630738596
    },
    {
        "content": "<p>I'm not an expert, but I figured out it was because <code>coe_base</code> isn't defeq to  <code>nat.cast</code></p>",
        "id": 251981157,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1630740923
    },
    {
        "content": "<p><code>coe_base</code> uses <code>part.some</code> (because <code>enat</code> is <code>part ℕ</code>...) and <code>nat.cast</code> uses the semiring structure.</p>",
        "id": 251981232,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1630741024
    },
    {
        "content": "<p>I'm of the opinion that the current <code>enat</code> is a pile of pain. I would redefine it as <code>with_top ℕ</code>, because that's what it is. The reason to have it as <code>part ℕ</code> is to have a computable <code>enat.find</code></p>",
        "id": 251981337,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1630741162
    },
    {
        "content": "<p>I would imagine you can have the same diamond with <code>with_top nat</code></p>",
        "id": 251981410,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1630741229
    },
    {
        "content": "<p>Yeah, but this time we already thought about it, as many more things are <code>with_top R</code> than <code>part R</code></p>",
        "id": 251981428,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1630741269
    },
    {
        "content": "<p>Long answer short: burn <code>coe_base</code> <span aria-label=\"smiling imp\" class=\"emoji emoji-1f608\" role=\"img\" title=\"smiling imp\">:smiling_imp:</span></p>",
        "id": 251981532,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1630741408
    },
    {
        "content": "<p>It is important the the coercion is computable? I would think that we can just have the computable version as a plain function, ready to use if someone needs it, and let the coe be whatever is automatically infered.</p>",
        "id": 251982326,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1630742186
    },
    {
        "content": "<p>Yes, exactly what I'm thinking. But maybe computabilists want to have their say.</p>",
        "id": 251982347,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1630742220
    },
    {
        "content": "<p>Note that:</p>\n<ol>\n<li>It's already a plain function: <code>part.some</code> (maybe there's even an <code>enat</code> specialization?)</li>\n<li>Many lemmas will need changing</li>\n</ol>",
        "id": 251982421,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1630742286
    },
    {
        "content": "<p>I will try to fix this</p>",
        "id": 251998708,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1630760016
    },
    {
        "content": "<p><code>enat.lean</code> compiles again. Let's see about the rest of mathlib.</p>",
        "id": 252007054,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1630768376
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/enat.has_coe/src\">src#enat.has_coe</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.cast_coe/src\">src#nat.cast_coe</a></p>",
        "id": 252040656,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1630806332
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/9023\">#9023</a> refactors the coercion.</p>",
        "id": 252129888,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1630907684
    },
    {
        "content": "<p>From the PR description:</p>\n<blockquote>\n<p>The coercion from nat to enat was defined to be enat.some. But another<br>\ncoercion could be inferred from the additive structure on enat, leading to<br>\nconfusing goals of the form<br>\n↑n = ↑n where the two sides were not defeq.</p>\n<p>We now make the coercion inferred from the additive structure the default,<br>\neven though it is not computable.</p>\n<p>A dedicated function enat.some is introduced, to be used whenever<br>\ncomputability is important.</p>\n</blockquote>\n<p>CI is happy with the PR.</p>",
        "id": 252169502,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1630931950
    },
    {
        "content": "<p>Unless someone objects, I'm going to redefine <a href=\"https://leanprover-community.github.io/mathlib_docs/find/enat\">docs#enat</a> as <code>with_top nat</code>. This way we get</p>\n<ul>\n<li>definitions using pattern matching;</li>\n<li>various instances (e.g., <code>canonically_ordered_comm_semiring</code>) for free.</li>\n</ul>",
        "id": 282459209,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1652686711
    },
    {
        "content": "<p>And now I have an objection: there are two natural coercions <code>nat → with_top nat</code>...</p>",
        "id": 282459317,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1652686801
    },
    {
        "content": "<p>How can we resolve this?</p>",
        "id": 282459371,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1652686819
    },
    {
        "content": "<p>Add <code>nat_cast</code> field to some algebraic class?</p>",
        "id": 282459650,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1652687033
    },
    {
        "content": "<p>We have 0 * top = 0?</p>",
        "id": 282459714,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1652687057
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/113488-general/topic/enat.20pain/near/282459650\">said</a>:</p>\n<blockquote>\n<p>Add <code>nat_cast</code> field to some algebraic class?</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> already has an open PR to do this (<a href=\"https://github.com/leanprover-community/mathlib/pull/12182\">#12182</a>), which I think is necessary for lean4 anyway</p>",
        "id": 282459938,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652687226
    },
    {
        "content": "<p>I was wondering why this wasn't the case before</p>",
        "id": 282460814,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1652687812
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/enat.20pain/near/282459714\">said</a>:</p>\n<blockquote>\n<p>We have 0 * top = 0?</p>\n</blockquote>\n<p>Yes, see <a href=\"https://leanprover-community.github.io/mathlib_docs/find/with_top.mul_zero_class\">docs#with_top.mul_zero_class</a></p>",
        "id": 282460884,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1652687879
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/113488-general/topic/enat.20pain/near/282459317\">said</a>:</p>\n<blockquote>\n<p>And now I have an objection: there are two natural coercions <code>nat → with_top nat</code>...</p>\n</blockquote>\n<p>Note that this is already the case for <code>int</code>. We have the custom coercion <a href=\"https://leanprover-community.github.io/mathlib_docs/find/int.has_coe\">docs#int.has_coe</a></p>",
        "id": 282466984,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652691463
    },
    {
        "content": "<p>Why exactly is <code>enat</code> not defined as <code>with_top ℕ</code>?</p>",
        "id": 287731428,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1656429714
    },
    {
        "content": "<p>Oh wait, this thread discusses exactly this</p>",
        "id": 287731506,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1656429736
    },
    {
        "content": "<p>I was just lamenting the lack of a <code>succ_order</code> instance on <code>enat</code>.</p>",
        "id": 287731534,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1656429748
    },
    {
        "content": "<p>See <a href=\"#narrow/stream/113488-general/topic/enat.20pain/near/251981337\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/enat.20pain/near/251981337</a></p>",
        "id": 287731566,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1656429761
    },
    {
        "content": "<p>Hmm</p>",
        "id": 287737169,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1656431934
    },
    {
        "content": "<p>We recently refactored the whole API for coercions from <code>ℕ</code></p>",
        "id": 287737229,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1656431959
    },
    {
        "content": "<p>How does that impact this?</p>",
        "id": 287737235,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1656431962
    },
    {
        "content": "<p>It makes such a refactor actually doable.</p>",
        "id": 287737271,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1656431981
    },
    {
        "content": "<p>I already have 2 or 3 large refactors on my hands <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 287739074,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1656432702
    },
    {
        "content": "<p>If nobody takes this in a month or two, I'll do it myself</p>",
        "id": 287739099,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1656432714
    },
    {
        "content": "<p>For me, this is one of the things I want to have done but too lazy to do.</p>",
        "id": 287893054,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1656525371
    }
]