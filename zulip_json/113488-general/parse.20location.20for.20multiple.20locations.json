[
    {
        "content": "<p>I have been reading the tactic writing guide and have been following along, however I am playing around with trying to extend the mul_left tactic to take more than one location and I am having a difficult time understanding similar tactics like change and how it manages to accomplish multiple locations, how could I extend mul_left to do this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">tactic.interactive.mul_left</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">texpr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">location</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">loc.ns</span> <span class=\"o\">[</span><span class=\"n\">some</span> <span class=\"n\">h</span><span class=\"o\">])</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n   <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">tactic.i_to_expr</span> <span class=\"n\">q</span><span class=\"o\">,</span>\n   <span class=\"n\">H</span> <span class=\"bp\">←</span> <span class=\"n\">tactic.get_local</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n   <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">%%</span><span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"bp\">%%</span><span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">tactic.infer_type</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n   <span class=\"bp\">«</span><span class=\"k\">have</span><span class=\"bp\">»</span> <span class=\"n\">h</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"bp\">%%</span><span class=\"n\">e</span><span class=\"bp\">*%%</span><span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"bp\">%%</span><span class=\"n\">e</span><span class=\"bp\">*%%</span><span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">congr_arg</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">%%</span><span class=\"n\">e</span><span class=\"bp\">*</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">%%</span><span class=\"n\">H</span><span class=\"o\">),</span>\n   <span class=\"n\">tactic.clear</span> <span class=\"n\">H</span>\n<span class=\"bp\">|</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"c1\">-- I do not really know what to do here</span>\n</code></pre></div>",
        "id": 237562569,
        "sender_full_name": "Saif Ghobash",
        "timestamp": 1620247608
    },
    {
        "content": "<p>It will be easier if you write a non-interactive tactic that does the work at one place and then call it on a list of locations using a monadic iteration.</p>",
        "id": 237563957,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1620248137
    },
    {
        "content": "<p>There is a monadic loop section in the tutorial.</p>",
        "id": 237565001,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1620248476
    },
    {
        "content": "<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\"><pre><span></span><code>open interactive (loc.ns)\nopen interactive.types (texpr location)\nopen interactive (parse)\nopen tactic.interactive («have»)\nopen tactic (get_local infer_type)\n\nmeta def tactic.mul_left (e : expr) (h : name) : tactic unit :=\ndo H ← get_local h,\n   `(%%l = %%r) ← infer_type H,\n   «have» h ``(%%e*%%l = %%e*%%r) ``(congr_arg (λ x, %%e*x) %%H),\n   tactic.clear H\n\nmeta def tactic.interactive.mul_left (q : parse texpr) : parse location → tactic unit\n| (loc.ns l) := do\n   e ← tactic.i_to_expr q,\n   l.mmap&#39; (λ x, match x with\n                 | some y := tactic.mul_left e y\n                 | none := tactic.fail &quot;Can&#39;t mul_left on goal&quot;\n                 end)\n| _ := tactic.fail &quot;mul_left cannot act on *&quot;\n\nexample (a b c : ℤ) (hyp : a = b) (hyp&#39; : (a+c) = b): c*a = c*b :=\nbegin\n  mul_left c at hyp hyp&#39;,\n  exact hyp\nend\n</code></pre></div>\n</div></div>",
        "id": 237566136,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1620248698
    },
    {
        "content": "<p>If you are serious about learning tactic writing, you should also watch Rob's full series of tutorials at <a href=\"https://www.youtube.com/watch?v=o6oUjcE6Nz4&amp;list=PLlF-CfQhukNnq2kDCw2P_vI5AfXN7egP2\">https://www.youtube.com/watch?v=o6oUjcE6Nz4&amp;list=PLlF-CfQhukNnq2kDCw2P_vI5AfXN7egP2</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"o6oUjcE6Nz4\" href=\"https://www.youtube.com/watch?v=o6oUjcE6Nz4&amp;list=PLlF-CfQhukNnq2kDCw2P_vI5AfXN7egP2\"><img src=\"https://uploads.zulipusercontent.net/91bdd8086a19f2547ba6eb478268759aecf3a000/68747470733a2f2f692e7974696d672e636f6d2f76692f6f366f556a6345364e7a342f64656661756c742e6a7067\"></a></div>",
        "id": 237566491,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1620248784
    },
    {
        "content": "<p>Sorry for the delay, I was implementing your suggestion, I came up with  this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">mul_left_other</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"n\">name</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span>\n<span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"o\">:=</span> <span class=\"n\">return</span> <span class=\"o\">()</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">H</span> <span class=\"bp\">←</span> <span class=\"n\">tactic.get_local</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">%%</span><span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"bp\">%%</span><span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">tactic.infer_type</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n   <span class=\"bp\">«</span><span class=\"k\">have</span><span class=\"bp\">»</span> <span class=\"n\">h</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"bp\">%%</span><span class=\"n\">e</span><span class=\"bp\">*%%</span><span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"bp\">%%</span><span class=\"n\">e</span><span class=\"bp\">*%%</span><span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">congr_arg</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">%%</span><span class=\"n\">e</span><span class=\"bp\">*</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">%%</span><span class=\"n\">H</span><span class=\"o\">),</span>\n   <span class=\"n\">tactic.clear</span> <span class=\"n\">H</span>\n\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">tactic.interactive.mul_left</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">texpr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">location</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">loc.ns</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">tactic.i_to_expr</span> <span class=\"n\">q</span><span class=\"o\">,</span>\n  <span class=\"n\">l.mmap'</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">mul_left_other</span> <span class=\"n\">e</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">tactic.fail</span> <span class=\"s2\">\"no wildcards yet\"</span>\n</code></pre></div>\n<p>Thank you for the help <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span></p>",
        "id": 237566973,
        "sender_full_name": "Saif Ghobash",
        "timestamp": 1620248911
    },
    {
        "content": "<p>I'll look at Robs tutorials as well :)</p>",
        "id": 237567077,
        "sender_full_name": "Saif Ghobash",
        "timestamp": 1620248935
    }
]