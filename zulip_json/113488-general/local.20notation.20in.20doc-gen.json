[
    {
        "content": "<p>Moving from <a href=\"#narrow/stream/113488-general/topic/Lean.20in.20the.20wild\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Lean.20in.20the.20wild</a> to a new thread:</p>\n<p>Unfortunately there seem to be lots of uses of localized notation that only work with namespaces open. e.g. <a href=\"https://github.com/leanprover-community/mathlib/blob/5a2e7d7/src/number_theory/dioph.lean#L585\">https://github.com/leanprover-community/mathlib/blob/5a2e7d7/src/number_theory/dioph.lean#L585</a> which actually refers to <code>fin2.of_nat'</code>.</p>",
        "id": 211546259,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1601325019
    },
    {
        "content": "<p>If you <code>open_locale dioph</code> without <code>fin2</code> open, you get an error.</p>",
        "id": 211546322,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1601325057
    },
    {
        "content": "<p>we should fix the local notation declarations to use full paths, I think</p>",
        "id": 211546371,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601325083
    },
    {
        "content": "<p>or at least localized notations</p>",
        "id": 211546455,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601325124
    },
    {
        "content": "<p>I don't think it matters for regular local notation -- once you close the section that opened the namespace, you also close the notation forever. It does matter for localized notation.</p>",
        "id": 211546718,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1601325248
    },
    {
        "content": "<p>it's also partially the fault of our implementation of localized notations using strings that are injected into the code. If we used <code>local notation</code> then lean would do the name resolution only once (pretty sure) but since we're copying and pasting it gets resolved separately on every occurrence</p>",
        "id": 211546892,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601325342
    },
    {
        "content": "<p>Yes, this is a known issue:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>* Warning 2: You have to fully specify the names used in localized notation, so that the localized\n  notation also works when the appropriate namespaces are not opened.\n</code></pre></div>\n\n<p>Normal notation does the name resolution at parsing time, but the current setup of localized notation does it at the time you open the locale.</p>",
        "id": 211546989,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1601325370
    },
    {
        "content": "<p>I'm not sure how to resolve this (without touching C++ or writing a parser that can at least recognize all occurrences of names in a notation declaration).</p>",
        "id": 211547085,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1601325435
    },
    {
        "content": "<p>We could probably write a linter for it</p>",
        "id": 211547106,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1601325449
    },
    {
        "content": "<p>How?</p>",
        "id": 211547121,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601325459
    },
    {
        "content": "<p>We haven't had a new linter in a while!</p>",
        "id": 211547132,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1601325469
    },
    {
        "content": "<p>require that the local notation contains <code>:= _root_</code> perhaps?</p>",
        "id": 211547149,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601325482
    },
    {
        "content": "<p>It can just do exactly what I'm trying to do now, open every locale in an envitonment with no namespaces open.</p>",
        "id": 211547188,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1601325487
    },
    {
        "content": "<p>oh I see, you don't even need to use the notation</p>",
        "id": 211547247,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601325522
    },
    {
        "content": "<p>Every occurrence of localized notation generates a decl with an attribute. You can look at these decls and try to add the local notation to the environment the moment you call <code>#lint</code> (and then call <code>#lint_mathlib</code> without open namespaces)</p>",
        "id": 211547256,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1601325532
    },
    {
        "content": "<p>I know there are some aspects of local notation (like variable names) that are not checked until they are used</p>",
        "id": 211547284,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601325546
    },
    {
        "content": "<p>That probably doesn't need a linter. We can assume that all localized notation is used at least once in mathlib.</p>",
        "id": 211547337,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1601325580
    },
    {
        "content": "<p>I would not be surprised if that assumption is false</p>",
        "id": 211547422,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601325610
    },
    {
        "content": "<p>Or I guess you could write localized notation that refers to a local variable, and then that only works in that file? That is unlikely to happen accidentally.</p>",
        "id": 211547479,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1601325641
    },
    {
        "content": "<p>forgetting that the notation exists seems like a likely mistake</p>",
        "id": 211547519,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601325664
    },
    {
        "content": "<p>So, doc-gen is using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic_state.pp_tagged/src\">src#tactic_state.pp_tagged</a> to pretty print exprs, which, I don't know what that is and it doesn't seem to be using localized notation?</p>",
        "id": 211548346,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1601326111
    },
    {
        "content": "<p>Not using local notation, that is.</p>",
        "id": 211548366,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1601326127
    },
    {
        "content": "<p>This seems to work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"bp\">`</span><span class=\"n\">foo</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">bar</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">bar</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- looks like foo = 1</span>\n<span class=\"kd\">run_cmd</span> <span class=\"k\">do</span>\n  <span class=\"n\">ef</span> <span class=\"bp\">←</span> <span class=\"n\">tactic.pp_tagged</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">bar</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">),</span>\n  <span class=\"n\">tactic.trace</span> <span class=\"bp\">$</span> <span class=\"n\">ef.untag</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"c1\">-- foo = 1</span>\n</code></pre></div>",
        "id": 211549287,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601326581
    },
    {
        "content": "<p>doc-gen doesn't seem to ever pass it through untag.</p>",
        "id": 211550010,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1601326953
    },
    {
        "content": "<p>It creates a json object with the <code>eformat</code> object in it and then it disappears into C++.</p>",
        "id": 211550106,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1601326998
    },
    {
        "content": "<p>I'm just doing the untag to print it, AFAICT it doesn't change the content of the format</p>",
        "id": 211550152,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601327017
    },
    {
        "content": "<p>I don't know what goes on after it turns into an <code>eformat</code>. But at <a href=\"https://github.com/leanprover-community/doc-gen/blob/master/src/export_json.lean#L390\">https://github.com/leanprover-community/doc-gen/blob/master/src/export_json.lean#L390</a> if you change the notation to local notation, opt params are no longer printed with the nice formatting.</p>",
        "id": 211550357,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1601327111
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">run_cmd</span> <span class=\"k\">do</span>\n  <span class=\"n\">tagged_format.of_format</span> <span class=\"n\">ef</span> <span class=\"bp\">←</span> <span class=\"n\">tactic.pp_tagged</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">bar</span><span class=\"o\">),</span>\n  <span class=\"n\">tactic.trace</span> <span class=\"bp\">$</span> <span class=\"n\">format.to_string</span> <span class=\"n\">ef</span> <span class=\"c1\">-- foo</span>\n</code></pre></div>",
        "id": 211550488,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601327174
    },
    {
        "content": "<p>wait, it's at the end of the file?</p>",
        "id": 211550601,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601327248
    },
    {
        "content": "<p>how does that even work</p>",
        "id": 211550619,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601327260
    },
    {
        "content": "<p>My guess is that using <code>lean --run</code> makes it act like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">export_json</span>\n<span class=\"k\">#eval</span> <span class=\"n\">main</span>\n</code></pre></div>\n\n<p>which is to say, it's in another module scope and so you lose local notations</p>",
        "id": 211550760,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601327343
    },
    {
        "content": "<p>Hmm. <code>eformat</code> and <code>efmt</code> aren't the same, so I was misreading doc-gen... you might be right</p>",
        "id": 211551020,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1601327429
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/NxcYZfiySZB1D8KqoAH1lTVu/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/NxcYZfiySZB1D8KqoAH1lTVu/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/NxcYZfiySZB1D8KqoAH1lTVu/image.png\"></a></div>",
        "id": 211552507,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1601328363
    }
]