[
    {
        "content": "<p>Consider this code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">add</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">case</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">m</span> <span class=\"o\">},</span>\n  <span class=\"n\">case</span> <span class=\"n\">succ</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"n\">ih</span> <span class=\"o\">{</span> <span class=\"gr\">sorry</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>What does <code>ih</code> mean here? And how do I finish of the <code>succ</code> case?</p>",
        "id": 285029521,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1654424809
    },
    {
        "content": "<p>It stands for \"induction hypothesis\", if this is what you mean.</p>",
        "id": 285029629,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1654424981
    },
    {
        "content": "<p>I realize that, but ih : ℕ and I'm wondering which ℕ it is.</p>",
        "id": 285029681,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1654425046
    },
    {
        "content": "<p>You shouldn't really be using tactic mode to make definitions (as a rule of thumb). There is no <code>ih</code> in your context anyway, Lean has not picked it up.</p>",
        "id": 285029687,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1654425054
    },
    {
        "content": "<p>I know. This is just an experiment.</p>",
        "id": 285029693,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1654425073
    },
    {
        "content": "<p>You're defining <code>m + (n + 1)</code> at that point, right? So <code>ih</code> is <code>m + n</code>.</p>",
        "id": 285029694,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1654425079
    },
    {
        "content": "<p><del>Yael there is no <code>ih</code></del></p>",
        "id": 285029699,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1654425087
    },
    {
        "content": "<p><del>Berndt if you change <code>ih</code> to <code>foobar</code> then your context does not change</del></p>",
        "id": 285029702,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1654425102
    },
    {
        "content": "<p>ih = m + n? Let me check.</p>",
        "id": 285029705,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1654425107
    },
    {
        "content": "<p>I'm answering the question Bernd meant, not the question Bernd asked.</p>",
        "id": 285029708,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1654425117
    },
    {
        "content": "<p>But when we start talking about <code>n_ih</code> I conjecture that Yael is correct.</p>",
        "id": 285029753,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1654425135
    },
    {
        "content": "<p>why wouldn't there be a <code>ih</code> variable in that context?</p>",
        "id": 285029756,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654425162
    },
    {
        "content": "<p>Try it online? It gets named <code>n_ih</code> whatever you try, it's one of those random cases where you can't name variables.</p>",
        "id": 285029758,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1654425172
    },
    {
        "content": "<p>Hmm... when I have <code>case succ : n ih { exact ih }</code> and I try <code>#eval add 1 3</code>, I get <code>1</code>.</p>",
        "id": 285029769,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1654425197
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">add</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">case</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">m</span> <span class=\"o\">},</span>\n  <span class=\"n\">case</span> <span class=\"n\">succ</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"n\">ih</span> <span class=\"o\">{</span>\n    <span class=\"c1\">-- case nat.succ</span>\n    <span class=\"c1\">-- m n ih: ℕ</span>\n    <span class=\"c1\">-- ⊢ ℕ</span>\n    <span class=\"gr\">sorry</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>tested locally</p>",
        "id": 285029772,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654425219
    },
    {
        "content": "<p>Try <code>exact succ ih</code> ;-)</p>",
        "id": 285029773,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1654425221
    },
    {
        "content": "<p>Yes, because you just defined <code>m + (n + 1)</code> to be <code>m + n</code>.</p>",
        "id": 285029779,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1654425235
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/confused.20about.20what.20ih.20means/near/285029772\">said</a>:</p>\n<blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">add</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">case</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">m</span> <span class=\"o\">},</span>\n  <span class=\"n\">case</span> <span class=\"n\">succ</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"n\">ih</span> <span class=\"o\">{</span>\n    <span class=\"c1\">-- case nat.succ</span>\n    <span class=\"c1\">-- m n ih: ℕ</span>\n    <span class=\"c1\">-- ⊢ ℕ</span>\n    <span class=\"gr\">sorry</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>tested locally</p>\n</blockquote>\n<p>Oh weird, I wonder why that wasn't working for me? I had <code>n_n</code> and <code>n_ih</code> whatever I did.</p>",
        "id": 285029821,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1654425262
    },
    {
        "content": "<p>Apologies all -- must have been some copy paste error at my end. Yes there is an <code>ih</code>, ignore most of my comments as noise.</p>",
        "id": 285029851,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1654425324
    },
    {
        "content": "<p>Ah, the <code>succ</code> helped. It's really confusing though since I can't tell what <code>ih</code> is in terms of the other variables.</p>",
        "id": 285029852,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1654425325
    },
    {
        "content": "<p>Right -- tactic mode was not designed to make definitions.</p>",
        "id": 285029858,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1654425339
    },
    {
        "content": "<p>So <code>ih</code> is basically a recursive call.</p>",
        "id": 285029865,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1654425355
    },
    {
        "content": "<p>Alright. Thanks everyone.</p>",
        "id": 285029914,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1654425406
    },
    {
        "content": "<p>In general (including when you do proofs) the induction hypothesis can be seen as a recursive call, instead of writing induction proofs in tactic mode you can also write them using match statements and recursive \"calls\" to your theorems</p>",
        "id": 285029982,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1654425510
    },
    {
        "content": "<p>Using French quotation marks, you have a lot more freedom to name hypotheses -- here's something more meaningful than <code>ih</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">add</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">case</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">m</span> <span class=\"o\">},</span>\n  <span class=\"n\">case</span> <span class=\"n\">succ</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">«</span><span class=\"n\">add</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"bp\">»</span> <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">nat.succ</span> <span class=\"bp\">«</span><span class=\"n\">add</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"bp\">»</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I don't recommend this, but I just wanted to point out that you're free to choose anything other than <code>ih</code>.</p>",
        "id": 285039649,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1654440270
    },
    {
        "content": "<p>Nice.</p>",
        "id": 285043467,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1654445473
    }
]