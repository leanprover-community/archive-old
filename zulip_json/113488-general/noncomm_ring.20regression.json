[
    {
        "content": "<p>This somewhat <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> shows a regression at having the <code>noncomm_ring</code> no longer discharge the goal. The offending commit is 5f1b4500f21b62968aad9bd939625cdf2b2372a6, on generalizing to nonassociative monoids <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> .</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.matrix.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic.noncomm_ring</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">hr</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">finset.range</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">m</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n      <span class=\"n\">induction</span> <span class=\"n\">m</span> <span class=\"k\">with</span> <span class=\"n\">m</span> <span class=\"n\">hm</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finset.sum_range_succ</span><span class=\"o\">,</span> <span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">hm</span><span class=\"o\">],</span>\n        <span class=\"n\">noncomm_ring</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"n\">trivial</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I found this issue by first being flagged by Rob's auto-update script for a personal repo, and the following up with a</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">❯</span> <span class=\"n\">git</span> <span class=\"n\">bisect</span> <span class=\"n\">start</span>\n<span class=\"bp\">❯</span> <span class=\"n\">git</span> <span class=\"n\">bisect</span> <span class=\"n\">bad</span> <span class=\"n\">master</span>\n<span class=\"bp\">❯</span> <span class=\"n\">git</span> <span class=\"n\">bisect</span> <span class=\"n\">good</span> <span class=\"n\">e5c112d6d70f18efbbbda43535d0d86db12c03f6</span>\n<span class=\"bp\">❯</span> <span class=\"n\">git</span> <span class=\"n\">bisect</span> <span class=\"n\">run</span> <span class=\"n\">sh</span> <span class=\"bp\">-</span><span class=\"n\">c</span> <span class=\"s2\">\"leanproject get-c; lean --make src/noncomm_ring_test.lean\"</span>\n</code></pre></div>\n<p>For some reason, I was unable to minimize the example to just the <code>1 - x ^ m.succ = (1 - x) * x ^ m + (1 - x ^ m)</code> statement in the goal, then <code>noncomm_ring</code> doesn't close that no matter what commit I'm on.</p>",
        "id": 232706669,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1617255191
    },
    {
        "content": "<p>It's a shame there wasn't a test for this. <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#noncomm_ring\">tactic#noncomm_ring</a> for reference</p>",
        "id": 232717072,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617263289
    },
    {
        "content": "<p>What's the goal state that <code>noncomm_ring</code> leaves behind?</p>",
        "id": 232717292,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617263427
    },
    {
        "content": "<p>I don't understand why for an earlier commit (let's say e5c112d6d70f18efbbbda43535d0d86db12c03f6) the example is fine, but something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">m.succ</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">noncomm_ring</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>is not.</p>",
        "id": 232717319,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1617263439
    },
    {
        "content": "<p>In the new commit, the left over goal is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">•</span><span class=\"n\">ℤ</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">m.succ</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">•</span><span class=\"n\">ℤ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 232717407,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1617263501
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.interactive.noncomm_ring/src\">src#tactic.interactive.noncomm_ring</a> knows nothing about pow it seems</p>",
        "id": 232717425,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617263519
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">hr</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">finset.range</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">m</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n      <span class=\"n\">induction</span> <span class=\"n\">m</span> <span class=\"k\">with</span> <span class=\"n\">m</span> <span class=\"n\">hm</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finset.sum_range_succ</span><span class=\"o\">,</span> <span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">hm</span><span class=\"o\">,</span> <span class=\"n\">pow_succ</span><span class=\"o\">],</span>\n        <span class=\"n\">noncomm_ring</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"n\">trivial</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>works in the new commit</p>",
        "id": 232717526,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1617263576
    },
    {
        "content": "<p>Why did it work before ?? mysteries abound</p>",
        "id": 232717542,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1617263589
    },
    {
        "content": "<p>Does <code>abel</code> close that goal in the old commit?</p>",
        "id": 232717575,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617263612
    },
    {
        "content": "<p>(the leftover one, that is)</p>",
        "id": 232717615,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617263641
    },
    {
        "content": "<p>All <code>abel</code> does (at the e5c112) commit to the <code>(-1) •ℤ x ^ m.succ + 1 = 1 + (-1) •ℤ (x * x ^ m)</code> goal is change some universes around.</p>",
        "id": 232718776,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1617264257
    },
    {
        "content": "<p>(Relatedly, is there a way to check if the <code>target</code> is pp-equal to some other target?)</p>",
        "id": 232719043,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1617264391
    },
    {
        "content": "<p>So then the <code>simp</code> is behaving differently then?</p>",
        "id": 232719319,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617264539
    },
    {
        "content": "<p>I guess I can do this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">tactic</span> <span class=\"n\">tactic.interactive</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">tactic.interactive.guard_change</span> <span class=\"o\">(</span><span class=\"n\">tac</span> <span class=\"o\">:</span> <span class=\"n\">itactic</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">t</span> <span class=\"bp\">←</span> <span class=\"n\">target</span><span class=\"o\">,</span>\n  <span class=\"n\">tac</span><span class=\"o\">,</span>\n  <span class=\"n\">t'</span> <span class=\"bp\">←</span> <span class=\"n\">target</span><span class=\"o\">,</span>\n  <span class=\"n\">tactic.success_if_fail</span> <span class=\"o\">(</span><span class=\"n\">unify</span> <span class=\"n\">t</span> <span class=\"n\">t'</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">•</span><span class=\"n\">ℤ</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">m.succ</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">•</span><span class=\"n\">ℤ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">guard_change</span> <span class=\"o\">{</span> <span class=\"n\">abel</span> <span class=\"o\">},</span> <span class=\"c1\">-- fails because abel didn't do anything special</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 232719369,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1617264565
    },
    {
        "content": "<p>(I'm shocked at how trivial the implementation of <code>noncomm_ring</code> is)</p>",
        "id": 232719379,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617264571
    },
    {
        "content": "<p>I propose the following change to <code>noncomm_ring</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>             <span class=\"c1\">-- Expand powers to numerals.</span>\n<span class=\"bp\">-</span>             <span class=\"n\">pow_bit0</span><span class=\"o\">,</span> <span class=\"n\">pow_bit1</span><span class=\"o\">,</span> <span class=\"n\">pow_one</span><span class=\"o\">,</span>\n<span class=\"bp\">+</span>             <span class=\"n\">pow_bit0</span><span class=\"o\">,</span> <span class=\"n\">pow_bit1</span><span class=\"o\">,</span> <span class=\"n\">pow_one</span><span class=\"o\">,</span> <span class=\"n\">pow_succ</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">pow_succ'</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 232720041,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1617264966
    },
    {
        "content": "<p>Which will solve the issue, but I'll still be puzzled why that commit broke it in the first place.</p>",
        "id": 232720460,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1617265248
    },
    {
        "content": "<p>why not just rewrite with <code>pow_succ</code>? I don't think <code>noncomm_ring</code> supports <code>a ^ b.succ</code></p>",
        "id": 232721495,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617265889
    },
    {
        "content": "<p>With <a href=\"https://github.com/leanprover-community/mathlib/issues/6990\">#6990</a> it will, commuting multiplications to the left.</p>",
        "id": 232721580,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1617265929
    },
    {
        "content": "<p>I'm not a fan of heuristic extensions to tactics with a well defined scope</p>",
        "id": 232721641,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617265970
    },
    {
        "content": "<p><code>a ^ b.succ</code> is not a ring expression</p>",
        "id": 232721656,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617265984
    },
    {
        "content": "<p>it sounds like you want <code>noncomm_ring_exp</code></p>",
        "id": 232721722,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617266014
    },
    {
        "content": "<p>But it already has</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>             <span class=\"c1\">-- Expand powers to numerals.</span>\n             <span class=\"n\">pow_bit0</span><span class=\"o\">,</span> <span class=\"n\">pow_bit1</span><span class=\"o\">,</span> <span class=\"n\">pow_one</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 232721741,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1617266024
    },
    {
        "content": "<p>yeah, because <code>x ^ 37</code> is a ring expression</p>",
        "id": 232721758,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617266042
    },
    {
        "content": "<p>Feature creep? Of course, I can include <code>pow_succ</code> in my actual rewrite before <code>noncomm_ring</code>.</p>",
        "id": 232721786,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1617266044
    },
    {
        "content": "<p>Great, I'll close the PR.</p>",
        "id": 232721814,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1617266056
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>  do you have an idea what could have caused the regression in the first place?</p>",
        "id": 232722499,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1617266444
    },
    {
        "content": "<p>I don't think it was ever intended to work</p>",
        "id": 232722610,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617266522
    },
    {
        "content": "<p>maybe <code>simp</code> did it by accident?</p>",
        "id": 232722660,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617266529
    },
    {
        "content": "<p><code>simp only</code> took care of some <code>pow_succ</code> term that is no longer defeq?</p>",
        "id": 232722812,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1617266631
    },
    {
        "content": "<p>oh, if it was a change to defeq then it might also be <code>abel</code> when it tries to unify the two normalized expressions using <code>refl</code></p>",
        "id": 232722911,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617266678
    },
    {
        "content": "<p>Here is the old commit example file. The first two examples are not solved by <code>noncomm_ring</code> but the third one somehow is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.matrix.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic.noncomm_ring</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">ι</span> <span class=\"n\">ι</span> <span class=\"n\">K</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">A</span> <span class=\"bp\">^</span> <span class=\"n\">m.succ</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">A</span> <span class=\"bp\">^</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">A</span> <span class=\"bp\">^</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">noncomm_ring</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">A</span> <span class=\"bp\">^</span> <span class=\"n\">m.succ</span> <span class=\"bp\">=</span> <span class=\"n\">A</span> <span class=\"bp\">^</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">A</span> <span class=\"bp\">^</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">A</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">A</span> <span class=\"bp\">^</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">noncomm_ring</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">ι</span> <span class=\"n\">ι</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">A</span> <span class=\"bp\">^</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">finset.range</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"bp\">^</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">m</span> <span class=\"k\">with</span> <span class=\"n\">m</span> <span class=\"n\">hm</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finset.sum_range_succ</span><span class=\"o\">,</span> <span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">hm</span><span class=\"o\">],</span>\n    <span class=\"c1\">-- goal is 1 - A ^ m.succ = (1 - A) * A ^ m + (1 - A ^ m) which is the same as first example</span>\n    <span class=\"n\">noncomm_ring</span> <span class=\"o\">}</span> <span class=\"c1\">-- somehow this doesn't fail here</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 232723735,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1617267170
    },
    {
        "content": "<p>Can you replace <code>noncomm_ring</code> with it's implementation (<code>simp only [...]</code> followed by <code>abel</code>), and prune the <code>simp only</code> to the minimum required?</p>",
        "id": 232723794,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617267218
    },
    {
        "content": "<p>Just to pin down the problem</p>",
        "id": 232723806,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617267233
    }
]