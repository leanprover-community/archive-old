[
    {
        "content": "<p>I've run into trouble with apparently duplicated copies of ancestor fields for an old structure, and would like some help!</p>\n<p>I've been experimenting with strengthening the definition of <code>div_inv_monoid</code>, to add the requirement that \"division is sensible when it can be\", that is, adding a field:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">div_eq</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">/</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>(Notice this is true for all groups, for all groups-with-zero, and for <code>nat</code>. Leave aside the question of whether adding this field is a good idea.)</p>\n<p>In fact, as this doesn't have anything to do with <code>inv</code>, I broke this out as an ancestor of <code>div_inv_monoid</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">div_monoid</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">monoid</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">has_div</span> <span class=\"n\">G</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">div_eq</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">/</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>With a few tweaks, which you can see on <a href=\"https://github.com/leanprover-community/mathlib/tree/div_monoid\">branch#div_monoid</a>, we can make <code>src/algebra/group/defs.lean</code> compile.<br>\nHowever, I would really like to add a default field for <code>group</code> that provides the proof of <code>div_eq</code>.</p>\n<p>When doing so, however, we find ourselves with a context that contains (besides much else):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">div_inv_monoid</span> <span class=\"n\">G</span>\n<span class=\"n\">mul</span><span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">G</span>\n<span class=\"n\">mul_left_inv</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a_1</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"n\">a_1</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">a_1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n<span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>and the terrifying thing is that the multiplication in <code>mul_left_inv</code> refers to <code>a</code>, while the multiplication in <code>h</code> refers to <code>mul</code>, but we have no way of saying they are related!</p>",
        "id": 253364585,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1631683862
    },
    {
        "content": "<p>(diff at <a href=\"https://github.com/leanprover-community/mathlib/compare/master..div_monoid\">https://github.com/leanprover-community/mathlib/compare/master..div_monoid</a> if that's easier to read)</p>",
        "id": 253364716,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1631683986
    },
    {
        "content": "<p>I think I saw something like this when providing a default for one of the ordered algebra classes. I think the goal view might be lying to you, and you should ignore <code>a</code> entirely</p>",
        "id": 253365367,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631684612
    },
    {
        "content": "<p>But I can't, because my hypothesis <code>mul_left_inv</code> is using it!</p>",
        "id": 253365845,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1631685005
    },
    {
        "content": "<p>When I try to write the sensible proof I get unification errors between the two different multiplications.</p>",
        "id": 253365873,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1631685027
    },
    {
        "content": "<p>I suspect it may be a Lean bug here.</p>",
        "id": 253365894,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1631685048
    },
    {
        "content": "<p>So I guess I should be trying to minimise...</p>",
        "id": 253365905,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1631685065
    },
    {
        "content": "<p>I'll see if I can find my previous thread...</p>",
        "id": 253366669,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631685714
    },
    {
        "content": "<p>Found it, <a href=\"#narrow/stream/113488-general/topic/Parent.20instance.20arguments.20in.20auto_param.20.2F.20opt_param/near/221832405\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Parent.20instance.20arguments.20in.20auto_param.20.2F.20opt_param/near/221832405</a></p>",
        "id": 253369280,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631687917
    },
    {
        "content": "<p>And the workaround I needed:</p>\n<p><a href=\"https://github.com/leanprover-community/mathlib/blob/e0fcb15c88cfed8e2a69a71e41725a0b0b0c2f15/src/algebra/ordered_monoid.lean#L52-L64\">https://github.com/leanprover-community/mathlib/blob/e0fcb15c88cfed8e2a69a71e41725a0b0b0c2f15/src/algebra/ordered_monoid.lean#L52-L64</a></p>",
        "id": 253369354,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631687988
    },
    {
        "content": "<p>Is that on a branch? I'm having trouble checking it out.</p>",
        "id": 253372290,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1631690069
    },
    {
        "content": "<p>I agree it looks similar!</p>",
        "id": 253372297,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1631690074
    },
    {
        "content": "<p>Oh! I see, I deleted that proof recently, when I fixed the definition of ordered_monoid. :-)</p>",
        "id": 253372509,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1631690187
    },
    {
        "content": "<p>In any case, I think I see what's going on now, and hopefully can imitate your solution. How on earth did you realise that this would solve the problem?</p>",
        "id": 253372562,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1631690220
    },
    {
        "content": "<p>Actually, no, this isn't going to solve the problem.</p>",
        "id": 253372684,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1631690293
    },
    {
        "content": "<p>The current situation is worse than the one you encountered: the field <code>mul_left_inv</code>, which we're absolutely going to need to complete the proof, <em>already</em> refers to the inaccessible <code>a</code> hypothesis.</p>",
        "id": 253372754,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1631690345
    },
    {
        "content": "<p>It's not relevant to your problem, but I don't really understand why you want <code>div_monoid</code> here (vs just adding the field to div_inv_monoid); do you have a type in mind that is a div_monoid but not also a div_inv_monoid?</p>",
        "id": 253373037,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631690523
    },
    {
        "content": "<p>Ah of course, nat would be a <code>sub_monoid</code></p>",
        "id": 253373161,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631690639
    },
    {
        "content": "<p>There are lots of interesting <code>sub_add_monoid</code>s. I've been thinking a lot about <code>fin n \\to \\nat</code> recently. :-)</p>",
        "id": 253373326,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1631690755
    },
    {
        "content": "<p>I think I've found one work-around: define <code>group_aux</code>, in which we add the <code>(mul_left_inv : ∀ a : G, a⁻¹ * a = 1)</code> field, and then extend that with <code>group</code> in which we fill in the default value of <code>div_eq</code>. I haven't actually written out the proof, but the instances now match up.</p>",
        "id": 253373453,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1631690829
    },
    {
        "content": "<p>It's a bit unpleasant to have to add an extra intermediate typeclass to achieve this.</p>",
        "id": 253373718,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1631691011
    },
    {
        "content": "<p>You could probably make the intermediate step a structure so that it doesn't make typeclass terms longer</p>",
        "id": 253374220,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631691356
    },
    {
        "content": "<p>Ah, good call!</p>",
        "id": 253375331,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1631692128
    },
    {
        "content": "<p>And I found a hack that avoids introducing the intermediate structure:</p>",
        "id": 253375585,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1631692320
    },
    {
        "content": "<p>use your <code>letI</code> trick in the <code>mul_left_inv</code> field as well.</p>",
        "id": 253375631,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1631692333
    },
    {
        "content": "<p>That is, in the <em>type</em> of that field.</p>",
        "id": 253375659,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1631692353
    },
    {
        "content": "<p>It feels a little ugly to break into tactic mode to specify the type of a field. (Particularly when we're defining something as fundamental as a group...)</p>",
        "id": 253375693,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1631692381
    },
    {
        "content": "<p>If you look at mathlib's definition of a group right now it's already far far more complicated than one might guess, for technical reasons involving definitional equality. Nowadays I just show people the API rather than the internals</p>",
        "id": 253375935,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1631692538
    },
    {
        "content": "<p>I get the feeling there _is_ a bug here, and the bug is that the context contains <code>a: div_inv_monoid G</code> and not <code>a: div_inv_monoid G := {mul := mul, ...}</code>.</p>",
        "id": 253376094,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631692636
    },
    {
        "content": "<p>Sounds very plausible. Perhaps <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> will be able to tell us if it could be changed to work that way.</p>",
        "id": 253376861,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1631693053
    },
    {
        "content": "<p>In any case, after some more playing with adding the field directly to <code>div_inv_monoid</code> (or an ancestor) I'm losing enthusiasm. Even when I can provide the default value at <code>group</code>, it is very fragile and often breaks when instantiating a group. </p>\n<p>I think I'll try a <code>lawful_div</code> mixin typeclass with <code>(div_eq : ∀ a b c : G, c * b = a → a / b = c)</code> instead.</p>",
        "id": 253386654,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1631698708
    },
    {
        "content": "<p>Are you working on adding <code>has_ordered_div : a / b ≤ c ↔ a ≤ c * b</code>?</p>",
        "id": 253386901,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631698902
    },
    {
        "content": "<p>No.</p>",
        "id": 253387399,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1631699202
    },
    {
        "content": "<p>Oh oops <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 253387779,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631699417
    },
    {
        "content": "<p>I guess <code>nat</code> is an example of <code>div_monoid</code> that is not a <code>div_inv_monoid</code>?</p>",
        "id": 253392737,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631702260
    },
    {
        "content": "<p>But using <code>lawful_div</code> as a mixin might indeed be a lot smoother.</p>",
        "id": 253392752,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631702273
    },
    {
        "content": "<p>Yes, <code>\\nat</code> and <code>fin n \\to \\nat</code> are the main applications.</p>",
        "id": 253393904,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1631702956
    },
    {
        "content": "<p>This class will let us eliminate <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finsupp.nat_sub_self\">docs#finsupp.nat_sub_self</a> in favor of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/sub_self\">docs#sub_self</a>, right?</p>",
        "id": 253400776,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631706961
    }
]