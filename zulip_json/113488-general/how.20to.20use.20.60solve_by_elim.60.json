[
    {
        "content": "<p>What is the syntax for giving <code>solve_by_elim</code> a discharger. I tried <code>solve_by_elim `[cc] </code> like the docs suggest, but I couldn't get it to work.</p>",
        "id": 132313630,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1534524531
    },
    {
        "content": "<p>That would be a case of outdated documentation. Try <code>solve_by_elim { discharger := `[cc] }</code></p>",
        "id": 132313735,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1534524643
    },
    {
        "content": "<p>I just updated it. <a href=\"https://github.com/leanprover/mathlib/pull/266\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/pull/266\">https://github.com/leanprover/mathlib/pull/266</a></p>",
        "id": 132314890,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1534526092
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span>, I proposed a further modification to <code>solve_by_elim</code> at <a href=\"https://github.com/leanprover/mathlib/pull/324\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/pull/324\">https://github.com/leanprover/mathlib/pull/324</a>. I'd be interested in your opinion sometime.</p>",
        "id": 133587653,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1536452655
    },
    {
        "content": "<p>It's essentially just an extra option to make it convenient to add <code>congr_fun</code> and <code>congr_arg</code> to the assumptions.</p>",
        "id": 133587655,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1536452672
    },
    {
        "content": "<p>Cool idea!</p>",
        "id": 133587801,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1536453041
    },
    {
        "content": "<p>Thanks, <span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> and <span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> for looking at my proposed changes to <code>solve_by_elim</code>. I've just pushed another change that make it quite a bit more usable --- it's now quite like the syntax for adding and removing lemmas from <code>simp</code>.</p>",
        "id": 134573606,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1537849894
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/mathlib/pull/324\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/pull/324\">https://github.com/leanprover/mathlib/pull/324</a></p>",
        "id": 134573610,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1537849921
    },
    {
        "content": "<p>What's the attribute name?</p>",
        "id": 134574016,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1537850552
    },
    {
        "content": "<p>Oh -- there's no attribute that is automatically hooked into <code>solve_by_elim</code>, although we could do that!</p>",
        "id": 134578415,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1537858409
    },
    {
        "content": "<p>You can write <code>solve_by_elim [f, a]</code>, where <code>f</code> is a lemma, and <code>a</code> is an attribute, it will will look up all lemmas tagged with <code>a</code>, and then use the local context, <code>f</code>, and those <code>a</code>-lemmas.</p>",
        "id": 134578467,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1537858450
    },
    {
        "content": "<p>You can also write <code>solve_by_elim only [f, a]</code> to not include the local context.</p>",
        "id": 134578473,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1537858464
    },
    {
        "content": "<p>Actually, now I see what you did and it might be better to refrain from having a default <code>solve_by_elim</code> attribute, at least for now. We're battling the huge size of the <code>simp</code> list at the moment, maybe we can avoid or at least postpone the same situation for <code>solve_by_elim</code> and other attribute-based tactics.</p>",
        "id": 134578564,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1537858613
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span>, I noticed what I think is a bug, or at least suboptimal behaviour in solve_by_elim, preventing successful backtracking when an <code>apply</code> generates multiple subgoals:</p>\n<div class=\"codehilite\"><pre><span></span>example {α : Type} (r : α → α → Prop) (f : α → α → α)\n  (l : ∀ a b c : α, r a b → r a (f b c) → r a c)\n  (a b c : α) (h₁ : r a b) (h₂ : r a (f b c)) : r a c :=\nbegin\n  -- solve_by_elim ought to work here:\n  have w : r a c,\n  { apply l,\n    apply h₁,\n    apply h₂ },\n  clear w,\n  -- sadly, it doesn&#39;t, because of the way we recurse to subgoals.\n  solve_by_elim,\n  -- (Once solve_by_elim successfully uses h₂ on the first goal, it can&#39;t\n  -- backtrack after realising that was a bad idea.)\nend\n</pre></div>",
        "id": 135292325,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1538788505
    },
    {
        "content": "<p>There's an easy fix, but I thought I'd check if you agreed it warrants fixing before I PR it.</p>",
        "id": 135292330,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1538788526
    },
    {
        "content": "<p>It looks like your proof of <code>w</code> is the only path that <code>solve_by_elim</code> can take. Can you show me the mistaken approach it tries?</p>",
        "id": 135292921,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538789614
    },
    {
        "content": "<p>It can trying applying h2 first. That succeeds, but then it has no where to go, and it fails to backtrack.</p>",
        "id": 135295040,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1538793841
    },
    {
        "content": "<p>(Because with multiple sub goals solve_by_elim currently uses <code>;</code> to recurse into them, it can’t backtrack across multiple sub goals.</p>",
        "id": 135295082,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1538793887
    },
    {
        "content": "<p>That is, it tries:</p>\n<div class=\"codehilite\"><pre><span></span>apply l,\napply h2\n</pre></div>\n\n\n<p>And then is faced with the goal <code>r a (f (f b c) ?m)</code> and can’t proceed.</p>",
        "id": 135295134,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1538793990
    },
    {
        "content": "<p>Ah! I see! How do you suggest to solve this?</p>",
        "id": 135295233,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538794208
    },
    {
        "content": "<p>It's pretty easy: see <a href=\"https://github.com/leanprover/mathlib/pull/393/commits/3fab845ccdfb081febf09821c4c1e43dbb82f75b\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/pull/393/commits/3fab845ccdfb081febf09821c4c1e43dbb82f75b\">https://github.com/leanprover/mathlib/pull/393/commits/3fab845ccdfb081febf09821c4c1e43dbb82f75b</a></p>",
        "id": 135298736,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1538801399
    }
]