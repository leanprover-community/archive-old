[
    {
        "content": "<p>Is there any tactic like <a href=\"https://leanprover-community.github.io/mathlib_docs/tactic/linarith/frontend.html\">linarith</a> with <a href=\"https://leanprover-community.github.io/mathlib_docs/algebra/abs.html#has_abs\">abs</a> support?</p>",
        "id": 294807160,
        "sender_full_name": "ZHAO Jinxiang",
        "timestamp": 1661234154
    },
    {
        "content": "<p>you could rewrite with theorems like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/le_abs\">docs#le_abs</a> and then call <code>linarith</code></p>",
        "id": 294812647,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1661237727
    },
    {
        "content": "<p>For example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">):</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"bp\">|</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"bp\">|</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"n\">congr_arg</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span><span class=\"bp\">←</span> <span class=\"n\">abs_neg</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">le_of_lt</span> <span class=\"n\">h_right</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Is there any tactic to simplify it?</p>",
        "id": 295594444,
        "sender_full_name": "ZHAO Jinxiang",
        "timestamp": 1661605321
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">):</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"bp\">|</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"bp\">|</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">congr'</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">abs_sub_comm</span><span class=\"o\">,</span> <span class=\"n\">abs_eq_self</span><span class=\"o\">],</span>\n  <span class=\"n\">linarith</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>is a bit shorter</p>",
        "id": 295601910,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1661609246
    }
]