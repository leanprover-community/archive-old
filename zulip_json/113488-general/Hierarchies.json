[
    {
        "content": "<p>What mathlib hierarchies can you think about? I have in mind:</p>\n<ul>\n<li>algebraic hierarchy</li>\n<li>order hierarchy</li>\n<li>algebraic order hierarchy</li>\n<li>scalar hierarchy</li>\n<li>norm hierarchy</li>\n</ul>",
        "id": 257019734,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1633934563
    },
    {
        "content": "<ul>\n<li>categorical hierarchy</li>\n<li>topological hierarchy</li>\n<li>topologico-algebraic hierarchy</li>\n</ul>",
        "id": 257019839,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633934658
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> I guess with the <code>norm</code> hierarchy, you have in mind different algebraic structures carrying a norm?</p>",
        "id": 257019969,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633934770
    },
    {
        "content": "<p>Yes</p>",
        "id": 257019994,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1633934804
    },
    {
        "content": "<p>Is metric stuff part of the topological hierarchy?</p>",
        "id": 257019998,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1633934808
    },
    {
        "content": "<p>I guess so, at some point these hierarchies start to blend.</p>",
        "id": 257020159,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633934940
    },
    {
        "content": "<p>What would you put in there, at least?</p>",
        "id": 257020334,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1633935088
    },
    {
        "content": "<p>In the topo hierarchy? Stuff like <code>t1_space</code>, <code>t2_space</code>, <code>normal_space</code>, etc...</p>",
        "id": 257020432,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633935149
    },
    {
        "content": "<p><code>uniform_space</code>?</p>",
        "id": 257020447,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1633935159
    },
    {
        "content": "<p>Also, yes.</p>",
        "id": 257020450,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633935165
    },
    {
        "content": "<p>And what's in the categorical hierarchy?</p>",
        "id": 257020587,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1633935260
    },
    {
        "content": "<p>Ooh, that will probably be a long list. Certainly things like <code>preadditive</code>, <code>abelian</code>, <code>monoidal</code>.</p>",
        "id": 257020689,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633935344
    },
    {
        "content": "<p>I don't know if we want to do things with <code>has_limits</code> and <code>has_colimits</code>. There are dozens of variants of those.</p>",
        "id": 257020756,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633935372
    },
    {
        "content": "<p>The hierarchy for limits could be helpful (and the colimits one should be dual); I also have ideas for making a hierarchy of exactness properties in categories to include stuff like disjoint coproducts, extensiveness, etc</p>",
        "id": 257056312,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1633955086
    },
    {
        "content": "<p>That last remark is about new stuff, right? Not about documenting existing hierarchies? (I think Yaël was inquiring about hierarchies that could be documented in some standardised/centralised way...)</p>",
        "id": 257057221,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633955552
    },
    {
        "content": "<p>Yes, sorry for the confusion</p>",
        "id": 257095526,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1633973851
    },
    {
        "content": "<p>Is it possible to piecewise refactor to new structures? Or are old structures unable to use new structures?</p>\n<p>I've been trying to annotate the existing hierarchies to understand how to redefine them with new structures. For example, here are the classes used and defined in <code>algebra/group/defs</code>:<br>\n<a href=\"/user_uploads/3121/9wz1fJLmV4YWSr0JziLT0Usc/image.png\">image.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/9wz1fJLmV4YWSr0JziLT0Usc/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/9wz1fJLmV4YWSr0JziLT0Usc/image.png\"></a></div><p>The tex file is available in <a href=\"https://github.com/leanprover-community/mathlib/tree/pechersky/algebra-tex\">branch#pechersky/algebra-tex</a>. I mostly tried to annotate \"data\" as solid arrows and bold, only Prop addition via dashed lines, reverse (usually lower priority) instances as dotted lines, instances/defs via <code>@[to_additive]</code> as red, and reducible defs (not instances) as Bar-head arrows.</p>\n<p>I noticed some (historical?) oddities, like this <br>\n<code>attribute [instance, priority 300] add_comm_group.to_add_comm_monoid</code><br>\n<a href=\"https://github.com/leanprover-community/mathlib/blob/136d0ce97bafcf34872cc0a2d28383b567edc24a/src/algebra/group/defs.lean#L806\">https://github.com/leanprover-community/mathlib/blob/136d0ce97bafcf34872cc0a2d28383b567edc24a/src/algebra/group/defs.lean#L806</a></p>",
        "id": 257235627,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1634057687
    },
    {
        "content": "<p>That is, could we refactor just this single file first?</p>",
        "id": 257236086,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1634057862
    },
    {
        "content": "<p>AFAIR, new structures can extend old structures but not vice versa.</p>",
        "id": 257237613,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1634058472
    },
    {
        "content": "<p>(more precisely, they can but it leads to very strange behavior)</p>",
        "id": 257237694,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1634058496
    },
    {
        "content": "<p><code>attribute [instance, priority 300] add_comm_group.to_add_comm_monoid</code> is here to help with instance searches in linear algebra.</p>",
        "id": 257237814,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1634058550
    },
    {
        "content": "<p>I don't know if it is still needed.</p>",
        "id": 257237838,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1634058564
    }
]