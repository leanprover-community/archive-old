[
    {
        "content": "<p>I'm not sure if this counts as a bug, but it surprised me so I'll mention it anyway:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.tauto</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">tauto</span><span class=\"bp\">!</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>fails</p>",
        "id": 294959161,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1661296486
    },
    {
        "content": "<p>Is this <code>tauto</code> not knowing that <code>≠</code> is defined as <code>¬ =</code> or <code>tauto</code> not doing double negation elimination?</p>",
        "id": 295004761,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1661331438
    },
    {
        "content": "<p>Double negation works, so it is maybe the former.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.tauto</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬¬</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">tauto</span><span class=\"bp\">!</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 295030488,
        "sender_full_name": "Jason Rute",
        "timestamp": 1661342676
    },
    {
        "content": "<p>But it can do this too, so it does know about <code>≠</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.tauto</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">y</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬¬</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">tauto</span><span class=\"bp\">!</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 295030828,
        "sender_full_name": "Jason Rute",
        "timestamp": 1661342816
    },
    {
        "content": "<p>The last example is also true by <code>refl</code>, so this is why <code>tauto</code> might \"know\" about it?</p>",
        "id": 295031314,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1661342998
    },
    {
        "content": "<p>I have not looked at the implementation, but this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">tautology</span> <span class=\"o\">(</span><span class=\"n\">cfg</span> <span class=\"o\">:</span> <span class=\"n\">tauto_cfg</span> <span class=\"o\">:=</span> <span class=\"o\">{})</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span> <span class=\"n\">focus1</span> <span class=\"bp\">$</span>\n  <span class=\"k\">let</span> <span class=\"n\">basic_tauto_tacs</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">tactic</span> <span class=\"n\">unit</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n        <span class=\"o\">[</span><span class=\"n\">reflexivity</span><span class=\"o\">,</span> <span class=\"n\">solve_by_elim</span><span class=\"o\">,</span>\n          <span class=\"n\">constructor_matching</span> <span class=\"n\">none</span> <span class=\"o\">[</span><span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"bp\">∧</span> <span class=\"n\">_</span><span class=\"o\">),</span><span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"bp\">↔</span> <span class=\"n\">_</span><span class=\"o\">),</span><span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">Exists</span> <span class=\"n\">_</span><span class=\"o\">),</span><span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">true</span><span class=\"o\">)]],</span>\n<span class=\"bp\">...</span>\n</code></pre></div>\n<p>suggests that <code>tauto</code> will try <code>reflexivity</code>.</p>",
        "id": 295031548,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1661343061
    },
    {
        "content": "<p>completely untested, but</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>         <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"bp\">≠</span> <span class=\"n\">_</span><span class=\"o\">)</span>   <span class=\"o\">:=</span> <span class=\"n\">replace</span> <span class=\"n\">h.local_pp_name</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">mt</span> <span class=\"n\">iff.to_eq</span> <span class=\"bp\">%%</span><span class=\"n\">h</span><span class=\"o\">)</span>   <span class=\"c1\">--  &lt;-- look here</span>\n         <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">_</span><span class=\"o\">)</span>   <span class=\"o\">:=</span> <span class=\"n\">replace</span> <span class=\"n\">h.local_pp_name</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">eq.to_iff</span> <span class=\"bp\">%%</span><span class=\"n\">h</span><span class=\"o\">)</span>\n         <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"bp\">∧</span> <span class=\"n\">_</span><span class=\"o\">))</span>  <span class=\"o\">:=</span> <span class=\"n\">replace</span> <span class=\"n\">h.local_pp_name</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">decidable.not_and_distrib'.mp</span> <span class=\"bp\">%%</span><span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|&gt;</span>\n                            <span class=\"n\">replace</span> <span class=\"n\">h.local_pp_name</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">decidable.not_and_distrib.mp</span> <span class=\"bp\">%%</span><span class=\"n\">h</span><span class=\"o\">)</span>\n         <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"bp\">∨</span> <span class=\"n\">_</span><span class=\"o\">))</span>  <span class=\"o\">:=</span> <span class=\"n\">replace</span> <span class=\"n\">h.local_pp_name</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">not_or_distrib.mp</span> <span class=\"bp\">%%</span><span class=\"n\">h</span><span class=\"o\">)</span>\n         <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"bp\">¬</span> <span class=\"n\">_</span><span class=\"o\">)</span>      <span class=\"o\">:=</span> <span class=\"n\">replace</span> <span class=\"n\">h.local_pp_name</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">decidable.of_not_not</span> <span class=\"bp\">%%</span><span class=\"n\">h</span><span class=\"o\">)</span>  <span class=\"c1\">-- &lt;-- and here</span>\n</code></pre></div>\n<p>suggests that maybe adding a further case</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>         <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"n\">_</span> <span class=\"bp\">≠</span> <span class=\"n\">_</span><span class=\"o\">)</span>      <span class=\"o\">:=</span> <span class=\"n\">replace</span> <span class=\"n\">h.local_pp_name</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">decidable.of_not_not</span> <span class=\"bp\">%%</span><span class=\"n\">h</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>may fix the issue?</p>",
        "id": 295032464,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1661343331
    },
    {
        "content": "<p>maybe it is a fluke, but that actually does the job!</p>",
        "id": 295032865,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1661343456
    },
    {
        "content": "<p>who knows if it breaks something else: I'll PR this.</p>",
        "id": 295032918,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1661343472
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/16232\">#16232</a></p>",
        "id": 295033875,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1661343734
    },
    {
        "content": "<p>Maybe it can also support <code>¬ _ ∉ _</code> etc.</p>",
        "id": 295033948,
        "sender_full_name": "FR",
        "timestamp": 1661343757
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"455791\">@FR</span> if this is what you had in mind:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">tauto</span><span class=\"bp\">!</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>then it works.  I am on the branch with the PR, so I do not know if it is a consequence of the change or whether it would have worked before as well.</p>",
        "id": 295034873,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1661343893
    },
    {
        "content": "<p>∉ is just notation for ¬ \\mem iirc</p>",
        "id": 295035368,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1661344031
    },
    {
        "content": "<p>Ah, while <code>ne</code> is notation for <code>-&gt; false</code>?</p>",
        "id": 295035513,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1661344073
    },
    {
        "content": "<p>ne is not notation sadly it's a whole def</p>",
        "id": 295035764,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1661344139
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/ne\">docs#ne</a></p>",
        "id": 295035773,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1661344141
    },
    {
        "content": "<p>try clicking on the ∉ in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.not_mem_Ioo\">docs#set.not_mem_Ioo</a> instead for example</p>",
        "id": 295035912,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1661344182
    },
    {
        "content": "<p>i'm not sure where it's declared though</p>",
        "id": 295035933,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1661344189
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean/blob/741670c439f1ca266bc7fe61ef7212cc9afd9dd8/library/init/core.lean#L339\">https://github.com/leanprover-community/lean/blob/741670c439f1ca266bc7fe61ef7212cc9afd9dd8/library/init/core.lean#L339</a></p>",
        "id": 295036057,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1661344211
    },
    {
        "content": "<p>I see, thanks for the information!</p>",
        "id": 295036785,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1661344414
    },
    {
        "content": "<p>does anyone know why it was done this way fwiw? I will say that having <code>ne</code> as a definition has never caused anything but trouble</p>",
        "id": 295113990,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1661370017
    },
    {
        "content": "<p>It means that <code>(h : a != b).symm</code> calls <code>ne.symm</code> instead of <code>not.symm</code></p>",
        "id": 295115040,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1661370393
    },
    {
        "content": "<p>I don't think that's the <em>reason</em> per se, this decision predates me and mathlib</p>",
        "id": 295115163,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1661370453
    },
    {
        "content": "<p>There is some default desire to use reducible definitions over notations when possible, as evidenced by the fact that <code>ge</code> still exists</p>",
        "id": 295115390,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1661370537
    },
    {
        "content": "<p>I wish we could redirect dot notation by hand sometimes. The other example I'm thinking of is resolving dot notation on <code>f : α → β</code> to <code>pi</code>, <code>imp</code> and <code>function</code>.</p>",
        "id": 295115414,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1661370546
    },
    {
        "content": "<p>which one?</p>",
        "id": 295115460,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1661370568
    },
    {
        "content": "<p>we can certainly tweak the rules there but it's annoying to switch preferences</p>",
        "id": 295115517,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1661370593
    },
    {
        "content": "<p>All three would be best.</p>",
        "id": 295116286,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1661370882
    },
    {
        "content": "<p>The only name clashes I can think that could happen between <code>pi</code>, <code>imp</code> and <code>function</code> are instance names, and that's irrelevant to dot notation.</p>",
        "id": 295116561,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1661370964
    },
    {
        "content": "<p>I thought <code>pi</code> and <code>function</code> worked in lean4</p>",
        "id": 295116969,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1661371132
    },
    {
        "content": "<p>and <code>ge</code> barely exists, if anything exists it's <code>gt</code> and pretty much solely for <code>eps &gt; 0</code></p>",
        "id": 295117322,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1661371261
    },
    {
        "content": "<p>The PR just got merged, so the example above should work now!</p>",
        "id": 295180630,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1661415131
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113488-general/topic/tauto!.20fails.20on.20ne/near/295115414\">said</a>:</p>\n<blockquote>\n<p>I wish we could redirect dot notation by hand sometimes. The other example I'm thinking of is resolving dot notation on <code>f : α → β</code> to <code>pi</code>, <code>imp</code> and <code>function</code>.</p>\n</blockquote>\n<p><a href=\"https://github.com/leanprover-community/lean/pull/757\">lean#757</a> is now in, which backports some Lean 4 dot notation features (<a href=\"#narrow/stream/116290-rss/topic/Recent.20Commits.20to.20lean.3Amaster/near/295272714\">rss link</a>). Once mathlib is using it, when you do <code>f.foo</code> it'll resolve to <code>function.f foo</code>. I had a version that would use the <code>pi</code> and <code>forall</code> namespaces too depending on whether the function was dependent or was for a <code>Prop</code>, but seeing as Lean 4 doesn't do this (yet?) I went for Lean 4 compatibility.</p>\n<p>You might like that extended dot notation will now respect <code>extends</code> without needing to use any tricks that relied on coercions. It can also (to a limited extent) use aliases, i.e. names introduced using <code>export</code>.</p>",
        "id": 295274176,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1661447661
    },
    {
        "content": "<p>There's a bug that mathlib has been relying on, it turns out. When you do <code>x.foo</code> in a non-function-application position and <code>x : S a b c</code>, then it would <em>always</em> do <code>S.foo x</code> with <code>x</code> in the first argument without checking whether <code>S.foo</code> was even a function. You can see this used when <code>S.foo</code> is an <code>equiv</code> (for example <code>a.of_dual</code> <a href=\"https://github.com/leanprover-community/mathlib/blob/f5afe205c23d7e9f065a04390cc337dfdb7e6e65/src/order/bounded_order.lean#L895\">here</a>). This \"feature\" doesn't work when you supply additional arguments, like <code>x.foo 37</code>, since applied dot notation uses a different resolution procedure.</p>\n<p>In the meantime, we have tweaked the resolution procedure to resolve <code>x.foo 37</code> to be <code>S.foo x 37</code> when there is no argument of type <code>S a b c</code> (i.e., it inserts <code>x</code> first). This will be until either we fix mathlib (and remove this feature) or until Lean 4 potentially changes.</p>",
        "id": 295274845,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1661447918
    },
    {
        "content": "<p>It might be nice to have dot notation respect <code>has_coe_to_fun</code> instances as it resolves where to put an argument. It also might be nice keeping this insert-as-first-argument feature for adding \"extension methods\" to a type via aliases, where the first argument is a term that satisfies some typeclass constraint.</p>",
        "id": 295275123,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1661448024
    },
    {
        "content": "<p>so this is why some <code>polynomial</code> definitions (e.g. <a href=\"https://leanprover-community.github.io/mathlib_docs/find/polynomial.derivative\">docs#polynomial.derivative</a>) work with dot notation, whilst some others don't (<a href=\"https://leanprover-community.github.io/mathlib_docs/find/polynomial.map_ring_hom\">docs#polynomial.map_ring_hom</a>). I do think it'd be really good if things with a coe_to_fun could work reliably with dot notation, but maybe that's a lot to ask for. They definitely wont be prettyprinted that way, as things stand.</p>",
        "id": 295286387,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1661451833
    }
]