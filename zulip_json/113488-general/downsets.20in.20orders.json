[
    {
        "content": "<p>Do we have notation for the set of all terms smaller than a given term?</p>",
        "id": 168498260,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1560944339
    },
    {
        "content": "<p>I need to fill in the following <code>sorry</code>s:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">finsupp</span> <span class=\"n\">order</span><span class=\"bp\">.</span><span class=\"n\">complete_lattice</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">ordered_group</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">finsupp</span>\n<span class=\"kn\">open</span> <span class=\"n\">lattice</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">σ</span><span class=\"o\">]</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">preorder</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"bp\">→</span><span class=\"err\">₀</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">le</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">s</span> <span class=\"bp\">≤</span> <span class=\"n\">g</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n  <span class=\"n\">le_refl</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">le_refl</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">le_trans</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"n\">Hfg</span> <span class=\"n\">Hgh</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">le_trans</span> <span class=\"o\">(</span><span class=\"n\">Hfg</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Hgh</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">[</span><span class=\"n\">partial_order</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">partial_order</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"bp\">→</span><span class=\"err\">₀</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">le_antisymm</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">hfg</span> <span class=\"n\">hgf</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">ext</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">le_antisymm</span> <span class=\"o\">(</span><span class=\"n\">hfg</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hgf</span> <span class=\"n\">s</span><span class=\"o\">),</span>\n  <span class=\"bp\">..</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">preorder</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">[</span><span class=\"n\">canonically_ordered_monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">order_bot</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"bp\">→</span><span class=\"err\">₀</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">bot</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"n\">bot_le</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">zero_le</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">partial_order</span> <span class=\"o\">}</span>\n\n<span class=\"n\">def</span> <span class=\"n\">downset</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">}</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">nat_downset</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">σ</span> <span class=\"bp\">→</span><span class=\"err\">₀</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"bp\">→</span><span class=\"err\">₀</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">nat_downset_eq_downset</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">σ</span> <span class=\"bp\">→</span><span class=\"err\">₀</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">nat_downset</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"bp\">→</span><span class=\"err\">₀</span> <span class=\"bp\">ℕ</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">downset</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">finsupp</span>\n</pre></div>",
        "id": 168513899,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1560956094
    },
    {
        "content": "<p>But this seems like I need to write some algorith that works on <code>list</code>s and <code>multiset</code>s, because those are used under the hood in the support of finitely supported functions.</p>",
        "id": 168513948,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1560956133
    },
    {
        "content": "<p>Any hints (or complete implementations) very much appreciated.</p>",
        "id": 168513967,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1560956153
    },
    {
        "content": "<p><code>finset.filter</code> on the support.</p>",
        "id": 168514782,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1560956658
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> I have no idea how that would help me building the downset...</p>",
        "id": 168528155,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1560965877
    },
    {
        "content": "<p>I guess I need to define pointwise addition for finsets. Then I can use <code>finset.fold</code> on the support with <code>pointwise_add</code> and map <code>single s n</code> to <code>finset.map (finset.range (n+1)) (single s)</code>.</p>",
        "id": 168528674,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1560966213
    },
    {
        "content": "<p>Might as well use <code>finset.sum</code> (-;<br>\nI'll start working on pointwise operations for <code>finset</code>.</p>",
        "id": 168529098,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1560966483
    },
    {
        "content": "<p>There is some stuff at <a href=\"https://github.com/NeilStrickland/lean_lib/blob/master/src/homotopy/upper.lean\" target=\"_blank\" title=\"https://github.com/NeilStrickland/lean_lib/blob/master/src/homotopy/upper.lean\">https://github.com/NeilStrickland/lean_lib/blob/master/src/homotopy/upper.lean</a> which might possibly be useful.</p>",
        "id": 168529924,
        "sender_full_name": "Neil Strickland",
        "timestamp": 1560967044
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">nat_downset</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">σ</span> <span class=\"bp\">→</span><span class=\"err\">₀</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"bp\">→</span><span class=\"err\">₀</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">support</span><span class=\"bp\">.</span><span class=\"n\">pi</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"err\">$</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">image</span> <span class=\"err\">$</span>\n<span class=\"bp\">λ</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">support</span><span class=\"bp\">.</span><span class=\"n\">attach</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single</span> <span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"err\">$</span> <span class=\"n\">g</span> <span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"mi\">2</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">sum_apply&#39;</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">σ</span> <span class=\"bp\">→</span><span class=\"err\">₀</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">σ</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">ι</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">ι</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">classical</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">induction_on</span> <span class=\"n\">ι</span> <span class=\"n\">rfl</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">s</span> <span class=\"n\">hxs</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n<span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">sum_insert</span> <span class=\"n\">hxs</span><span class=\"o\">,</span> <span class=\"n\">add_apply</span><span class=\"o\">,</span> <span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">sum_insert</span> <span class=\"n\">hxs</span><span class=\"o\">])</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">nat_downset_eq_downset</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">σ</span> <span class=\"bp\">→</span><span class=\"err\">₀</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">nat_downset</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"bp\">→</span><span class=\"err\">₀</span> <span class=\"bp\">ℕ</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">downset</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">ext</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">mem_coe</span><span class=\"o\">,</span> <span class=\"n\">nat_downset</span><span class=\"o\">,</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">mem_image</span><span class=\"o\">],</span> <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintros</span> <span class=\"bp\">⟨</span><span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">hg</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">mem_pi</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hg</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">sum_apply&#39;</span><span class=\"o\">],</span>\n    <span class=\"n\">by_cases</span> <span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"err\">∈</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">support</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">sum_eq_single</span> <span class=\"o\">(</span><span class=\"bp\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">hi</span><span class=\"bp\">⟩</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"err\">↑</span><span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">support</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">σ</span><span class=\"o\">)),</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">single_apply</span><span class=\"o\">,</span> <span class=\"n\">if_pos</span> <span class=\"n\">rfl</span><span class=\"o\">],</span>\n      <span class=\"n\">specialize</span> <span class=\"n\">hg</span> <span class=\"n\">i</span> <span class=\"n\">hi</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">mem_range</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">lt_succ_iff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hg</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">hg</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">j</span> <span class=\"n\">hj</span> <span class=\"n\">hji</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">single_apply</span><span class=\"o\">,</span> <span class=\"n\">if_neg</span><span class=\"o\">],</span> <span class=\"n\">refine</span> <span class=\"n\">mt</span> <span class=\"bp\">_</span> <span class=\"n\">hji</span><span class=\"o\">,</span> <span class=\"n\">intros</span> <span class=\"n\">hji&#39;</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">eq</span> <span class=\"n\">hji&#39;</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">hi&#39;</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">hi&#39;</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">mem_attach</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">sum_eq_zero</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">zero_le</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n      <span class=\"n\">intros</span> <span class=\"n\">j</span> <span class=\"n\">hj</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">single_apply</span><span class=\"o\">,</span> <span class=\"n\">if_neg</span><span class=\"o\">],</span> <span class=\"n\">rintros</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">hi</span> <span class=\"n\">j</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">hg</span><span class=\"o\">,</span> <span class=\"n\">refine</span> <span class=\"bp\">⟨λ</span> <span class=\"n\">i</span> <span class=\"n\">hi</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">mem_pi</span><span class=\"o\">,</span> <span class=\"n\">intros</span> <span class=\"n\">i</span> <span class=\"n\">hi</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">mem_range</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">lt_succ_iff</span><span class=\"o\">],</span> <span class=\"n\">exact</span> <span class=\"n\">hg</span> <span class=\"n\">i</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">ext</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">sum_apply&#39;</span><span class=\"o\">,</span>\n      <span class=\"n\">by_cases</span> <span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"err\">∈</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">support</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">sum_eq_single</span> <span class=\"o\">(</span><span class=\"bp\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">hi</span><span class=\"bp\">⟩</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"err\">↑</span><span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">support</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">σ</span><span class=\"o\">)),</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">single_apply</span><span class=\"o\">,</span> <span class=\"n\">if_pos</span> <span class=\"n\">rfl</span><span class=\"o\">],</span>\n        <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">j</span> <span class=\"n\">hj</span> <span class=\"n\">hji</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">single_apply</span><span class=\"o\">,</span> <span class=\"n\">if_neg</span><span class=\"o\">],</span> <span class=\"n\">refine</span> <span class=\"n\">mt</span> <span class=\"bp\">_</span> <span class=\"n\">hji</span><span class=\"o\">,</span> <span class=\"n\">intros</span> <span class=\"n\">hji&#39;</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">eq</span> <span class=\"n\">hji&#39;</span> <span class=\"o\">},</span>\n        <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">hi&#39;</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">hi&#39;</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">mem_attach</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">sum_eq_zero</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">not_mem_support_iff</span> <span class=\"n\">at</span> <span class=\"n\">hi</span><span class=\"o\">,</span> <span class=\"n\">symmetry</span><span class=\"o\">,</span>\n        <span class=\"n\">exact</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">eq_zero_of_le_zero</span> <span class=\"o\">(</span><span class=\"n\">hi</span> <span class=\"bp\">▸</span> <span class=\"n\">hg</span> <span class=\"n\">i</span><span class=\"o\">),</span>\n        <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">j</span> <span class=\"n\">hj</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">single_apply</span><span class=\"o\">,</span> <span class=\"n\">if_neg</span><span class=\"o\">],</span> <span class=\"n\">rintros</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">hi</span> <span class=\"n\">j</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"o\">}</span> <span class=\"o\">}</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 168538304,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1560972610
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> Thanks! That's quite a long proof actually.</p>",
        "id": 168538809,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1560972991
    },
    {
        "content": "<p>it might be able to be broken down into lemmas / constructions</p>",
        "id": 168554221,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1560986833
    },
    {
        "content": "<p>I wish we knew the following:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">coeff_mul</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"n\">ψ</span> <span class=\"o\">:</span> <span class=\"n\">mv_polynomial</span> <span class=\"n\">σ</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">coeff</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"bp\">*</span> <span class=\"n\">ψ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">nat_downset</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">coeff</span> <span class=\"n\">m</span> <span class=\"n\">φ</span> <span class=\"bp\">*</span> <span class=\"n\">coeff</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">ψ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>\n\n\n<p>Making slow progress...</p>",
        "id": 168664330,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1561105384
    },
    {
        "content": "<p>we have a similar theorem for polynomials right</p>",
        "id": 168664397,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1561105455
    },
    {
        "content": "<p>Do we?</p>",
        "id": 168664403,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1561105474
    },
    {
        "content": "<p>Aah, you mean single variable polynomials?</p>",
        "id": 168664435,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1561105538
    },
    {
        "content": "<p>Possibly</p>",
        "id": 168664436,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1561105541
    },
    {
        "content": "<p>isn't there something like <code>multiset.diagonal</code> that gives you all the sub-multisets and their complements?</p>",
        "id": 168664488,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561105598
    }
]