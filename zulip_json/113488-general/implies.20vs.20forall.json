[
    {
        "content": "<p>In tactic programming, what would be the proper way to distinguish, among Pi expressions, between <code>→</code> - expressions (mathematical implications) and <code>∀</code>- expressions ? </p>\n<p>For the moment I test if <code>to_string e</code>starts with \"Pi\" (which is <code>tt</code> in the <code>∀</code> case but not in the <code>→</code> case), but this is bad...</p>",
        "id": 201735954,
        "sender_full_name": "Frédéric Le Roux",
        "timestamp": 1592923802
    },
    {
        "content": "<p>Syntactically, the difference is that the implication is a <code>∀ x : P, Q</code> where <code>x</code> does not appear free in <code>Q</code>. You can test for that</p>",
        "id": 201737714,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1592924567
    },
    {
        "content": "<p>But are you sure you actually need to tell them apart?</p>",
        "id": 201737751,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1592924585
    },
    {
        "content": "<p>Yes, that's what I need. So do I have to go through Q and test if there is a free variable with the corresponding De Bruijn index? Or is there a more direct way?</p>",
        "id": 201788044,
        "sender_full_name": "Frédéric Le Roux",
        "timestamp": 1592948853
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"251825\">@Frédéric Le Roux</span> These examples might help clarify Simon's point.  </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span>      <span class=\"c1\">-- ∀ (x : ℕ), x = x : Prop</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">,</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>      <span class=\"c1\">-- ℕ → 1 = 1 : Prop</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">∀</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"n\">h</span>  <span class=\"c1\">-- ∀ (h : 0 = 1), h = h : Prop</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">∀</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">,</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span>  <span class=\"c1\">-- 0 = 1 → 1 = 2 : Prop</span>\n</code></pre></div>\n\n\n<p>Without knowing your use case it might be that you are actually trying to distinguish if the quantifier is quantifying over proofs in a <code>Prop</code>, like <code>∀ h : 0 = 1</code> vs. quantifying over elements in a type.  There is a strong correlation between quantifying over proofs and getting pretty printed with a <code>→</code>, because usually one uses a <code>Prop</code> <code>p</code> as a hypothesis and doesn't care about the particular proof/witness <code>h : p</code>.  And conversely, if you are quantifying over say a natural number <code>x : ℕ</code>, then you care about that particular number usually or you would just drop that assumption.</p>",
        "id": 201788759,
        "sender_full_name": "Jason Rute",
        "timestamp": 1592949248
    },
    {
        "content": "<p>I think <code>e.is_pi \\and \\not e.is_arrow</code> does this.</p>",
        "id": 201809241,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1592970484
    },
    {
        "content": "<p>It is really a semantic issue: I would like to distinguish between implications and universal quantifiers, as we usually do in maths.<br>\nThanks Jason for clarifying. <span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> At first I thought <code>is_arrow e</code>was what I needed, but actually it just tests first if e is a Pi expression and then, writing <code>e = ∀ x : P, Q</code>, if Q has free variables. But as Simon put it, the problem is not just to know if Q has free variables but if it has x as a (free) variable.</p>",
        "id": 201817759,
        "sender_full_name": "Frédéric Le Roux",
        "timestamp": 1592983245
    },
    {
        "content": "<p>As Jason said, the pretty printer has a way to distinguish, but I don't find something useful in the expr file.</p>",
        "id": 201817869,
        "sender_full_name": "Frédéric Le Roux",
        "timestamp": 1592983323
    },
    {
        "content": "<p>I still don't understand. Normally, whenever you have expression, it does not contain bound variables (<code>expr.var</code>), unless you have already chopped of some Pi's/lambda's from it before, without substituting in the variables.</p>\n<p>Therefore, I think that <code>e.is_arrow</code> does what you want. In the example below it correctly states that <code>e</code> is an arrow (even though it contains the variable <code>y</code>). Do you have an expression where there the <code>e.is_arrow</code> check doesn't do what you want?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">do</span> <span class=\"n\">e</span> <span class=\"err\">←</span> <span class=\"n\">to_expr</span> <span class=\"bp\">```</span><span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">trace</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">trace</span> <span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">is_arrow</span><span class=\"o\">,</span> <span class=\"n\">trace</span> <span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">is_pi</span>\n</code></pre></div>\n\n\n<p>If your expression contains other de Bruijn variables (which usually shouldn't happen), then you can make your own definition of <code>is_arrow</code> that checks for <code>has_var_idx 0</code> instead of <code>has_var</code>.</p>",
        "id": 201819754,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1592985000
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"111080\">Floris van Doorn</span> <a href=\"#narrow/stream/113488-general/topic/implies.20vs.20forall/near/201819754\">said</a>:</p>\n<blockquote>\n<p>Do you have an expression where there the <code>e.is_arrow</code> check doesn't do what you want?</p>\n</blockquote>\n<p>This happens because I do a recursive analysis of some expr, so I get sub-expressions with some unreplaced <code>var</code>in them.<br>\nI will try using <code>has_var_idx 0</code>, thanks!</p>",
        "id": 201824176,
        "sender_full_name": "Frédéric Le Roux",
        "timestamp": 1592988521
    },
    {
        "content": "<p>The following seems to work :-) :</p>\n<div class=\"codehilite\"><pre><span></span><code>| `(%%P → %%Q) := if has_var_idx Q 0 then return ff else return tt\n| _ := return ff\n</code></pre></div>",
        "id": 201825908,
        "sender_full_name": "Frédéric Le Roux",
        "timestamp": 1592989837
    },
    {
        "content": "<p>that implementation looks like it doesn't need to be a tactic</p>",
        "id": 201826102,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592990003
    },
    {
        "content": "<blockquote>\n<p>This happens because I do a recursive analysis of some expr, so I get sub-expressions with some unreplaced varin them.<br>\nI will try using has_var_idx 0, thanks!</p>\n</blockquote>\n<p>The expected way to do this sort of thing is to instantiate the variable as you go under a binder</p>",
        "id": 201826180,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592990046
    },
    {
        "content": "<blockquote>\n<p>The expected way to do this sort of thing is to instantiate the variable as you go under a binder</p>\n</blockquote>\n<p>Indeed. To elaborate on this, you want to use something like <code>mk_local_pis</code> (or implement something similar yourself):</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">do</span> <span class=\"n\">e</span> <span class=\"err\">←</span> <span class=\"n\">to_expr</span> <span class=\"bp\">```</span><span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">es</span><span class=\"o\">,</span> <span class=\"n\">tgt</span><span class=\"o\">)</span> <span class=\"err\">←</span> <span class=\"n\">mk_local_pis</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">trace</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">trace</span> <span class=\"n\">es</span><span class=\"o\">,</span> <span class=\"n\">trace</span> <span class=\"n\">tgt</span>\n</code></pre></div>",
        "id": 201871412,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1593016439
    },
    {
        "content": "<p>I needed to instanciate also in lam expression, so I came with the following.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">instanciate</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">expr</span> <span class=\"o\">:=</span>\n<span class=\"k\">match</span> <span class=\"n\">e</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">pi</span> <span class=\"n\">pp_name</span> <span class=\"n\">binder</span> <span class=\"n\">type</span> <span class=\"n\">body</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">do</span>\n    <span class=\"n\">a</span> <span class=\"err\">←</span> <span class=\"n\">mk_local&#39;</span> <span class=\"n\">pp_name</span> <span class=\"n\">binder</span> <span class=\"n\">type</span><span class=\"o\">,</span>\n    <span class=\"n\">return</span> <span class=\"err\">$</span> <span class=\"n\">instantiate_var</span> <span class=\"n\">body</span> <span class=\"n\">a</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">lam</span> <span class=\"n\">pp_name</span> <span class=\"n\">binder</span> <span class=\"n\">type</span> <span class=\"n\">body</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">do</span>\n    <span class=\"n\">a</span> <span class=\"err\">←</span> <span class=\"n\">mk_local&#39;</span> <span class=\"n\">pp_name</span> <span class=\"n\">binder</span> <span class=\"n\">type</span><span class=\"o\">,</span>\n    <span class=\"n\">return</span> <span class=\"err\">$</span> <span class=\"n\">instantiate_var</span> <span class=\"n\">body</span> <span class=\"n\">a</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"n\">return</span> <span class=\"n\">e</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>I hope that it works. It is great to find help here, anyway!</p>",
        "id": 202086351,
        "sender_full_name": "Frédéric Le Roux",
        "timestamp": 1593176532
    }
]