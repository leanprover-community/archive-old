[
    {
        "content": "<p>I'm trying to prove something about an ordered add_comm monoid which is both canonically ordered and has additive cancellation. But when I include both instances as hypotheses, it seems like lean is getting confused about which <code>zero</code> and which <code>has_le.le</code>I mean.  I'm not sure whether this is just some sort of diamond problem, or I am actually handling two unrelated structures on the same set.</p>\n<p>For example, I get an error when I try to invoke the theorem <code>zero_le</code> from <code>canonically_ordered_monoid</code>; see below. It works fine if I remove the <code>ordered_cancel_add_comm_monoid</code> instance. Can someone advise me how to set things up so I have the set of assumptions from both instances on a common <code>ordered_add_comm_monoid</code>? </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n<span class=\"o\">[</span><span class=\"n\">ordered_cancel_add_comm_monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n<span class=\"o\">[</span><span class=\"n\">canonically_ordered_add_monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n<span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">):</span>\n  <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">zero_le</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n<span class=\"c1\">-- fails, but works ok if the first instance is removed from hypotheses.</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 232747206,
        "sender_full_name": "Peter Nelson",
        "timestamp": 1617279745
    },
    {
        "content": "<p>Here is the error in all its glory. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"n\">type</span> <span class=\"n\">ascription</span><span class=\"o\">,</span> <span class=\"n\">term</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">@</span><span class=\"n\">has_le.le</span> <span class=\"n\">M</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">preorder.to_has_le</span> <span class=\"n\">M</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">partial_order.to_preorder</span> <span class=\"n\">M</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ordered_add_comm_monoid.to_partial_order</span> <span class=\"n\">M</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">canonically_ordered_add_monoid.to_ordered_add_comm_monoid</span> <span class=\"n\">M</span> <span class=\"n\">_inst_2</span><span class=\"o\">))))</span>\n    <span class=\"mi\">0</span>\n    <span class=\"n\">x</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">@</span><span class=\"n\">has_le.le</span> <span class=\"n\">M</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">preorder.to_has_le</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">partial_order.to_preorder</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ordered_cancel_add_comm_monoid.to_partial_order</span> <span class=\"n\">M</span> <span class=\"n\">_inst_1</span><span class=\"o\">)))</span>\n    <span class=\"mi\">0</span>\n    <span class=\"n\">x</span>\n</code></pre></div>",
        "id": 232747374,
        "sender_full_name": "Peter Nelson",
        "timestamp": 1617279843
    },
    {
        "content": "<p>Yeah you're putting two unrelated monoid structures on M</p>",
        "id": 232747446,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1617279871
    },
    {
        "content": "<p>I thought so - is there a way to take the union of both sets of axioms for these structures without doing this?</p>",
        "id": 232747511,
        "sender_full_name": "Peter Nelson",
        "timestamp": 1617279911
    },
    {
        "content": "<p>You either make a new typeclass with instances implying that it's both of the other typeclass, or just use one typeclass and add the extra axioms as assumptions and then make an instance of the other typeclass manually</p>",
        "id": 232747685,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1617279983
    },
    {
        "content": "<p>Your error in all its glory just says \"I have _inst_1 on the left hand side and _inst_2 on the right hand side and these are unrelated\" (look at the end of each term on either side of the =)</p>",
        "id": 232747822,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1617280062
    },
    {
        "content": "<p>Didn't we decide that one typeclass around here was a load of old nonsense recently?</p>",
        "id": 232748011,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1617280152
    },
    {
        "content": "<p>was <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ordered_semiring\">docs#ordered_semiring</a> that nonsense?</p>",
        "id": 232748244,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617280253
    },
    {
        "content": "<p>What is the value of the <code>extends</code>  that is used in defining various strengthenings of <code>ordered_add_comm_monoid</code>?  Would this kind of problem not go away if <code>canonically_ordered_add_monoid</code> was defined like this: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">canonically_ordered_add_monoid</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ordered_add_comm_monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">order_bot</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">le_iff_exists_add</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>instead of this </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">canonically_ordered_add_monoid</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">ordered_add_comm_monoid</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">order_bot</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">le_iff_exists_add</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>?</p>",
        "id": 232751424,
        "sender_full_name": "Peter Nelson",
        "timestamp": 1617281872
    },
    {
        "content": "<p>By way of comparison, in my one and only PR, I added a typeclass defined as follows: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">has_exists_add_of_le</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ordered_add_comm_monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">exists_add_of_le</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">},</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>and this allowed the instances to fire seamlessly in settings where we wanted some structure plus this one extra axiom. This made it through the PR process - is there some reason it should have been done the other way?</p>",
        "id": 232751854,
        "sender_full_name": "Peter Nelson",
        "timestamp": 1617282047
    },
    {
        "content": "<p>(using <code>extends</code>, I mean)</p>",
        "id": 232751994,
        "sender_full_name": "Peter Nelson",
        "timestamp": 1617282106
    },
    {
        "content": "<p>Is this because <code>canonically_ordered_add_monoid</code> is extending two different typeclasses?</p>",
        "id": 232753071,
        "sender_full_name": "Peter Nelson",
        "timestamp": 1617282495
    },
    {
        "content": "<p>I think there are two arguments against that approach</p>\n<ol>\n<li>Something something exponential blowup of term length</li>\n<li>People don't like writing <code>[ordered_add_comm_monoid α] [order_bot α] [canonically_ordered_add_monoid α]</code> in their lemma statements because it's long. A more extreme example would be <code>[has_mul α] [has_one α] [mul_one_class α] [mul_assoc_class α]</code> instead of <code>[monoid α]</code>.</li>\n</ol>",
        "id": 232757245,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617284228
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/cancel.20add.20.2B.20canonically.20ordered.3F/near/232757245\">said</a>:</p>\n<blockquote>\n<ol start=\"2\">\n<li>People don't like writing <code>[ordered_add_comm_monoid α] [order_bot α] [canonically_ordered_add_monoid α]</code> in their lemma statements because it's long. A more extreme example would be <code>[has_mul α] [has_one α] [mul_one_class α] [mul_assoc_class α]</code> instead of <code>[monoid α]</code>.</li>\n</ol>\n</blockquote>\n<p>Or to expand out what that approach might mean for a canonically ordered, cancellative, additive monoid: something like <code>[has_add α] [has_zero α] [add_zero_class α] [add_assoc_class α] [add_comm_class α] [preorder α] [partial_order α] [ordered_add_comm_monoid α] [has_bot α] [order_bot α] [canonically_ordered_add_monoid α] [add_left_cancel_class α] [add_right_cancel_class α] [ordered_cancel_add_comm_monoid α]</code>.</p>",
        "id": 232789177,
        "sender_full_name": "Greg Price",
        "timestamp": 1617295937
    },
    {
        "content": "<p>I.e. that's what you get if not only is <code>canonically_ordered_add_monoid</code> defined like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">canonically_ordered_add_monoid</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ordered_add_comm_monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">order_bot</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">le_iff_exists_add</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>but also <code>ordered_add_comm_monoid</code> is defined in a similar way, and so on.</p>",
        "id": 232789588,
        "sender_full_name": "Greg Price",
        "timestamp": 1617296085
    },
    {
        "content": "<p>Right, exactly. Having said that, in lean 4 it's looking like you could define something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">monoid</span> <span class=\"kd\">extends</span> <span class=\"n\">has_mul</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">has_one</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">mul_one_class</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc_class</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">monoid.of_parts</span> <span class=\"o\">[</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">has_mul</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">has_one</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">mul_one_class</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">mul_assoc_class</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">monoid</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"bp\">..</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"bp\">..</span><span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"bp\">..</span><span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"bp\">..</span><span class=\"n\">s</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>and it won't cause a loop, unlike lean 3. That means that you are free to switch back and forth between the shorthand names when you don't need to be precise, and the long list when you need something with no shorthand name</p>",
        "id": 232791270,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617296762
    },
    {
        "content": "<p>That does sound helpful!</p>\n<p>Here, I think it would mean you could write something like <code>[add_comm_monoid α] [order_bot α] [is_canonically_ordered_add_monoid α] [is_ordered_cancel_add_comm_monoid α]</code>.</p>\n<p>I.e. you'd rewrite a definition like the existing</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">canonically_ordered_add_monoid</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">ordered_add_comm_monoid</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">order_bot</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">le_iff_exists_add</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>to something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">is_canonically_ordered_add_monoid</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ordered_add_comm_monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">order_bot</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">le_iff_exists_add</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">canonically_ordered_add_monoid</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">ordered_add_comm_monoid</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">order_bot</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">is_canonically_ordered_add_monoid</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">canonically_ordered_add_monoid.of_parts</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ordered_add_comm_monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">order_bot</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">is_canonically_ordered_add_monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">canonically_ordered_add_monoid</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"bp\">..</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"bp\">..</span><span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"bp\">..</span><span class=\"n\">r</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>and similarly <code>ordered_add_comm_monoid</code> and so on.</p>",
        "id": 232795456,
        "sender_full_name": "Greg Price",
        "timestamp": 1617298610
    },
    {
        "content": "<p>And both the <code>is_canonically_ordered_add_monoid</code> and <code>is_ordered_cancel_add_comm_monoid</code> would end up using the common <code>[add_comm_monoid α]</code> and <code>[order_bot α]</code>, and at the same time you'd get to invoke things that needed a <code>[canonically_ordered_add_monoid α]</code>, because Lean would be able to produce the needed instance.</p>",
        "id": 232795884,
        "sender_full_name": "Greg Price",
        "timestamp": 1617298814
    }
]