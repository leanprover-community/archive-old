[
    {
        "content": "<p>Is there any little library of functions around <code>fin n → α</code> providing a vector-style API?</p>",
        "id": 206207288,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596754554
    },
    {
        "content": "<p>I'm wondering whether it would be worth making a <code>def</code> to use with dot notation, maybe <code>finvec</code>?</p>",
        "id": 206207396,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596754649
    },
    {
        "content": "<p>I think so, in <code>data.fin</code></p>",
        "id": 206207401,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1596754655
    },
    {
        "content": "<p>I found <code>array</code> actually exists but it seems extremely unused</p>",
        "id": 206207412,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596754666
    },
    {
        "content": "<p>aha!</p>",
        "id": 206207468,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596754688
    },
    {
        "content": "<p><code>array</code> is special purpose because it is literally an array in the VM</p>",
        "id": 206207472,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1596754694
    },
    {
        "content": "<p>Append is annoying... I've used <a href=\"https://leanprover-community.github.io/mathlib_docs/find/sum_fin_sum_equiv\">docs#sum_fin_sum_equiv</a></p>",
        "id": 206207834,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1596755018
    },
    {
        "content": "<p>Yes, I was planning to use that in the implementation</p>",
        "id": 206207850,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596755027
    },
    {
        "content": "<p>There is things like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fin.tail\">docs#fin.tail</a></p>",
        "id": 206208074,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1596755152
    },
    {
        "content": "<p>append is in fact the thing I specifically need the most</p>",
        "id": 206208099,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596755162
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315523\">@Colter MacDonald</span> and I did some ad-hoc stuff like this here</p>\n<p><a href=\"https://github.com/adamtopaz/UnivAlg/blob/master/src/ftuple.lean\">https://github.com/adamtopaz/UnivAlg/blob/master/src/ftuple.lean</a></p>",
        "id": 206208127,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1596755169
    },
    {
        "content": "<p>It's not very well integrated with mathlib stuff though</p>",
        "id": 206208142,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1596755182
    },
    {
        "content": "<p>but in the generality of the dependently typed case, I would first need to be able to append the type vectors</p>",
        "id": 206208155,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596755193
    },
    {
        "content": "<p>actually doesn't snoc already have this issue, hmm</p>",
        "id": 206208166,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596755207
    },
    {
        "content": "<p>Oh I see, the input to snoc is the whole output type</p>",
        "id": 206208181,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596755230
    },
    {
        "content": "<p>hmm maybe that's a good idea</p>",
        "id": 206208196,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596755245
    },
    {
        "content": "<p>Oh you want heterogeneous vectors!</p>",
        "id": 206208271,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1596755296
    },
    {
        "content": "<p>No, <em>I</em> don't</p>",
        "id": 206208280,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596755310
    },
    {
        "content": "<p>but data.fin has them</p>",
        "id": 206208290,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596755319
    },
    {
        "content": "<p>Ah ok</p>",
        "id": 206208293,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1596755325
    },
    {
        "content": "<p>so I'm not sure what makes sense for mathlib now</p>",
        "id": 206208302,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596755334
    },
    {
        "content": "<p>There's also some stuff in data.matrix.notation</p>",
        "id": 206208316,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596755345
    },
    {
        "content": "<p>which seems to duplicate parts of data.fin except that it's homogeneous</p>",
        "id": 206208364,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596755386
    },
    {
        "content": "<p>oh now I see <code>vec_cons</code> from data.matrix.notation is literally defined as <code>fin.cons</code></p>",
        "id": 206208501,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596755498
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> Did you end up doing anything with these <code>fin n</code> vectors that might end up in mathlib? I need to use a few such functions and don't want to duplicate work.</p>",
        "id": 206694789,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1597239734
    },
    {
        "content": "<p>Nothing that's in a usable state yet</p>",
        "id": 206712700,
        "sender_full_name": "Reid Barton",
        "timestamp": 1597247530
    },
    {
        "content": "<p>Ok, thanks.</p>",
        "id": 206712766,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1597247562
    }
]