[
    {
        "content": "<p>What is the shortest way to write <code>[2, 2, 8, 8, 8, 8, 8, 8, 8, 8, 1, 6, 6, 6, 6, 6, 6]</code> in Lean?</p>",
        "id": 310693190,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1668716749
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.list.defs</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">sqrepeat</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">l</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">list.repeat</span> <span class=\"n\">n</span> <span class=\"n\">n</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">sqrepeat</span> <span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">8</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">6</span><span class=\"o\">]</span> <span class=\"c1\">-- [2, 2, 8, 8, 8, 8, 8, 8, 8, 8, 1, 6, 6, 6, 6, 6, 6]</span>\n</code></pre></div>",
        "id": 310693941,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1668717015
    },
    {
        "content": "<p>Cool but yours is longer than mine.</p>",
        "id": 310694323,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1668717148
    },
    {
        "content": "<p>In terms of characters? I guess you can do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.list.defs</span>\n<span class=\"k\">#eval</span><span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">8</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">6</span><span class=\"o\">]</span><span class=\"bp\">&gt;&gt;=λ</span><span class=\"n\">n</span><span class=\"o\">,</span><span class=\"n\">list.repeat</span> <span class=\"n\">n</span> <span class=\"n\">n</span>\n</code></pre></div>\n<p>and that's 59 chars for the entire file.</p>",
        "id": 310694887,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1668717365
    },
    {
        "content": "<p>It's one character longer but <code>#eval do l←[2,8,1,6],list.repeat l l</code> is also valid syntax for that, in case you didn't know <span class=\"user-mention\" data-user-id=\"417654\">@Martin Dvořák</span> .</p>",
        "id": 310697744,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1668718556
    },
    {
        "content": "<p><code>#eval[2,2,8,8,8,8,8,8,8,8,1,6,6,6,6,6,6]</code> is 40 characters...</p>",
        "id": 310697930,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1668718628
    },
    {
        "content": "<p>I feel like it should rather be <code>#eval do n←[2,8,1,6],list.repeat n n</code></p>",
        "id": 310698099,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1668718699
    },
    {
        "content": "<p>Thankfully both <code>n</code> and <code>l</code> are one character <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 310698298,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1668718783
    },
    {
        "content": "<p>What the &gt;&gt;= does?</p>",
        "id": 310716415,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1668726377
    },
    {
        "content": "<p>It is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_bind.bind\">docs#has_bind.bind</a>, which here unfolds to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.bind\">docs#list.bind</a>.</p>",
        "id": 310716499,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1668726429
    },
    {
        "content": "<p>It is the bind operator for the list monad. See <a href=\"https://en.wikipedia.org/wiki/Monad_(functional_programming)#Another_example:_List\">wikipedia</a> for more info.</p>",
        "id": 310716687,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1668726514
    }
]