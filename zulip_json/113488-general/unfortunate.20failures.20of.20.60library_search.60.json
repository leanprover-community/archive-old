[
    {
        "content": "<p>I'm going to use this thread as a not-quite-bug-tracker for unfortunate failures of <code>library_search</code> / <code>suggest</code>, so I remember them as test cases for potential future improvements.</p>",
        "id": 178822549,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1571806454
    },
    {
        "content": "<p>Feel free to add your own suggestions!</p>",
        "id": 178822551,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1571806459
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>example (a b : ℕ) (h : 0 &lt; b) : (a * b) / b = a := by library_search\n</pre></div>\n\n\n<p>works, but</p>\n<div class=\"codehilite\"><pre><span></span>example (a b : ℕ) (h : b ≠ 0) : (a * b) / b = a := by library_search\n</pre></div>\n\n\n<p>doesn't. This is a common problem, in fact so common I'm considering just hardwiring something to <code>library_search</code> for exactly this case. (e.g. add <code>zero_lt_iff_ne_zero.mpr</code> into the set of lemmas for <code>solve_by_elim</code>.</p>\n<p>(There are \"more principled solutions\", involving add _lots_ of extra lemmas to <code>solve_by_elim</code>, but this will take some engineering...)</p>",
        "id": 178822636,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1571806591
    },
    {
        "content": "<p>Just copying a reported failure of <code>library_search</code> from Kevin:</p>\n<div class=\"codehilite\"><pre><span></span>import tactic.library_search\n\nexample (P Q : Prop) [decidable P] [decidable Q]: (¬ Q → ¬ P) → (P → Q) := by library_search -- fails\nexample (P Q : Prop) [decidable P] [decidable Q]: (¬ Q → ¬ P) ↔ (P → Q) := by library_search -- not_imp_not\n</pre></div>\n\n\n<p>I would have thought this one works, so I'll investigate later.</p>",
        "id": 179451772,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1572453834
    },
    {
        "content": "<p>I think it'd be cool if <code>library_search</code> gave the proof <code>exact h₃ ⟨h₁,h₂⟩</code> for </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₃</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">library_search</span>\n</pre></div>\n\n\n<p>at the moment <code>library_search</code> fails for this example.</p>",
        "id": 179729655,
        "sender_full_name": "Lucas Allen",
        "timestamp": 1572750899
    },
    {
        "content": "<p>It's not a proof search, it is a library search</p>",
        "id": 179730837,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572753292
    },
    {
        "content": "<p>it is supposed to help you find a lemma by type rather than by name</p>",
        "id": 179730846,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572753315
    },
    {
        "content": "<p>Library searching is relatively expensive, particularly if you start throwing in more advanced operations at the same time. If it becomes a full blown proof search it will take forever; use <code>tidy</code> if you are looking for more proof-search like tasks</p>",
        "id": 179730892,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572753404
    },
    {
        "content": "<p>Another thing I think would be cool is if <code>library_search</code> gave the proof <code>exact h₁.left</code> for</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">library_search</span>\n</pre></div>\n\n\n<p>I'm using <code>library_search</code> quite heavily at the moment, and I had to use my memory to figure out <code>.left</code> and <code>.right</code> for something just now. I think if <code>library_search</code> could solve some of these things it would decrease the learning curve for Lean somewhat. This would be because people would only ever need to remember <code>library_search</code>, instead of lots of little bits and pieces.</p>",
        "id": 179730898,
        "sender_full_name": "Lucas Allen",
        "timestamp": 1572753429
    },
    {
        "content": "<p>I think <code>tidy</code> is a better fit for this approach</p>",
        "id": 179730902,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572753461
    },
    {
        "content": "<p>although I agree in this case that it should find the lemma <code>and.left</code></p>",
        "id": 179730942,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572753525
    },
    {
        "content": "<p>Oh yeah, <code>tidy</code> works. That's quite nice.</p>",
        "id": 179730947,
        "sender_full_name": "Lucas Allen",
        "timestamp": 1572753541
    },
    {
        "content": "<p>I would guess that</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">library_search</span>\n</pre></div>\n\n\n<p>works?</p>",
        "id": 179730958,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572753575
    },
    {
        "content": "<p>No, not for me.</p>",
        "id": 179730965,
        "sender_full_name": "Lucas Allen",
        "timestamp": 1572753600
    },
    {
        "content": "<p>Would it be a good idea if <code>tidy</code> traced a proof that could be cut and pasted into a <code>begin... end</code> block, similar to how <code>library_search</code> traces an <code>exact</code> statement?</p>",
        "id": 179731071,
        "sender_full_name": "Lucas Allen",
        "timestamp": 1572753747
    },
    {
        "content": "<p>It does</p>",
        "id": 179731084,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572753824
    },
    {
        "content": "<p>I think you have to call <code>tidy?</code> to get the trace output</p>",
        "id": 179731124,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572753867
    },
    {
        "content": "<p>That's great <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span>, can't believe I didn't know about <code>tidy</code> before. Thanks.</p>",
        "id": 179731184,
        "sender_full_name": "Lucas Allen",
        "timestamp": 1572754017
    },
    {
        "content": "<p>I've transcribed the examples from this thread to an new issue <a href=\"https://github.com/leanprover-community/mathlib/issues/2394\" title=\"https://github.com/leanprover-community/mathlib/issues/2394\">#2394</a> for complaining about <code>solve_by_elim</code> and <code>library_search</code>.</p>",
        "id": 193738472,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1586740540
    }
]