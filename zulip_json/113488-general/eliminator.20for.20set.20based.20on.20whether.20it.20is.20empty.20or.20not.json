[
    {
        "content": "<p>Say I have a set <code>s</code>. Is there an eliminator on <code>s</code> to deal with what happens when it is empty and when it isn't? Or do I have to use<code>by_cases</code> on <code>is_empty s</code>?</p>",
        "id": 265087920,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1639608909
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.eq_empty_or_nonempty\">docs#set.eq_empty_or_nonempty</a> might exist</p>",
        "id": 265088065,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639608998
    },
    {
        "content": "<p>Excellent, it does: so</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">obtain</span> <span class=\"n\">rfl</span> <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">s.eq_empty_or_nonempty</span>\n</code></pre></div>\n<p>Will do all you need in tactic mode</p>",
        "id": 265088209,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639609081
    },
    {
        "content": "<p>So that will create two goals? One for the empty case and one for the nonempty case?</p>",
        "id": 265088501,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1639609214
    },
    {
        "content": "<p>I would prefer an eliminator that I can use outside of tactic mode (if such a thing exists).</p>",
        "id": 265088694,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1639609295
    },
    {
        "content": "<p>How do you propose to avoid cases?</p>",
        "id": 265089213,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1639609562
    },
    {
        "content": "<p>I want cases, but in the form of an eliminator, like. <code>set.empty_elim (empty_case_code) (non_empty_case_code)</code>.</p>",
        "id": 265089398,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1639609669
    },
    {
        "content": "<p>In tactic mode you can use <code>s.eq_empty_or_nonempty.elim _ _</code></p>",
        "id": 265089407,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639609676
    },
    {
        "content": "<p>Right, just combine what Eric said with the eliminator for <code>or</code></p>",
        "id": 265089471,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1639609700
    },
    {
        "content": "<p>You'll have to rewrite by <code>s = ∅</code> manually in the first case though</p>",
        "id": 265089515,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639609730
    },
    {
        "content": "<p>Or use <code>match s.empty_or_nonempty with | or.inl rfl := _ | or.inr r := _ end</code>, if that works</p>",
        "id": 265089694,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639609817
    },
    {
        "content": "<p>So <code>(set.eq_empty_or_nonempty s).elim</code>? Let me try.</p>",
        "id": 265089697,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1639609818
    },
    {
        "content": "<p><code>s.</code> should work fine</p>",
        "id": 265089755,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639609859
    },
    {
        "content": "<p>You can avoid those parens with the dot notation :) see Mario's comment</p>",
        "id": 265089757,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1639609860
    },
    {
        "content": "<p>Ah, right.</p>",
        "id": 265089936,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1639609944
    },
    {
        "content": "<p>Dot notation is really awesome when you get used to it</p>",
        "id": 265090054,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1639610033
    },
    {
        "content": "<p>OK, it seems to work, but now I'm getting another error. Progress!</p>",
        "id": 265090259,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1639610159
    },
    {
        "content": "<p>This doesn't work for me:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">nat</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">nat</span><span class=\"o\">),</span>\n<span class=\"k\">match</span> <span class=\"n\">s.empty_or_nonempty</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"n\">or.inl</span> <span class=\"n\">rfl</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">or.inr</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>What am I doing wrong here?</p>",
        "id": 265091848,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1639611076
    },
    {
        "content": "<p>Could it be that empty_or_nonempty only works in tactic mode?</p>",
        "id": 265092247,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1639611311
    },
    {
        "content": "<p>You can't eliminate an <code>or</code> into a non-prop</p>",
        "id": 265092516,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1639611507
    },
    {
        "content": "<p>If you change the <code>nat</code> for some proposition then it will work</p>",
        "id": 265092571,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1639611544
    },
    {
        "content": "<p>are you trying to construct data, or prove a theorem?</p>",
        "id": 265092611,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1639611578
    },
    {
        "content": "<p>for the former I would suggest using <code>if s = ∅ then empty_case_code else non_empty_case_code</code></p>",
        "id": 265092684,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1639611612
    },
    {
        "content": "<p>which also requires <code>open_locale classical</code> at the top of the file or <code>by classical; exact</code> at the start of the function</p>",
        "id": 265092770,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1639611673
    },
    {
        "content": "<p>Ah, I see. I didn't know about the restriction of or elimination. OK.</p>",
        "id": 265093549,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1639612190
    },
    {
        "content": "<p>Is there a reason for this restriction?</p>",
        "id": 265093766,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1639612310
    },
    {
        "content": "<p>An <code>or</code> does not contain information about which variant is true, there is provably at most one proof of a disjunction. So you can't use a proof of an <code>or</code> to make a case disjunction unless the thing you are trying to prove is already a proposition (in which case it doesn't matter which one is actually true, in the case where both are true)</p>",
        "id": 265094098,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1639612496
    },
    {
        "content": "<p>Put simply, you know it's true, but you don't know <strong>which</strong></p>",
        "id": 265094232,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1639612583
    },
    {
        "content": "<p>So you can't compute</p>",
        "id": 265094250,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1639612597
    },
    {
        "content": "<p>That makes sense.</p>",
        "id": 265094415,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1639612694
    },
    {
        "content": "<p>Although it's kind of weird - if you don't know which, how does the pattern matching work?</p>",
        "id": 265094524,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1639612792
    },
    {
        "content": "<p>It should be mentioned that you can write <code>if _ then _ else _</code></p>",
        "id": 265094565,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1639612803
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/eliminator.20for.20set.20based.20on.20whether.20it.20is.20empty.20or.20not/near/265092684\">said</a>:</p>\n<blockquote>\n<p>for the former I would suggest using <code>if s = ∅ then empty_case_code else non_empty_case_code</code></p>\n</blockquote>\n<p>It has been <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 265094618,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1639612815
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"416322\">Bernd Losert</span> <a href=\"#narrow/stream/113488-general/topic/eliminator.20for.20set.20based.20on.20whether.20it.20is.20empty.20or.20not/near/265094524\">said</a>:</p>\n<blockquote>\n<p>Although it's kind of weird - if you don't know which, how does the pattern matching work?</p>\n</blockquote>\n<p>The pattern matching only works in the case where it is in a computationally irrelevant position: it is never actually executed</p>",
        "id": 265094768,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1639612920
    },
    {
        "content": "<p>So it's an illusion.</p>",
        "id": 265094876,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1639612963
    },
    {
        "content": "<p>In this case, it is simply nice syntax for the logical theorem <code>or.cases_on</code></p>",
        "id": 265094880,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1639612965
    },
    {
        "content": "<p>Thanks for clarifying.</p>",
        "id": 265095002,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1639613028
    },
    {
        "content": "<p>It's (ab)using the curry howard isomorphism to allow you to write proofs with some of the same syntax that you use to write programs</p>",
        "id": 265095008,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1639613034
    },
    {
        "content": "<p>How do I get an element from the set in the nonempty_case_code?</p>",
        "id": 265096008,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1639613740
    },
    {
        "content": "<p>I mean, when I do this <code>if s = ∅ then empty_case_code else non_empty_case_code</code>.</p>",
        "id": 265096060,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1639613764
    },
    {
        "content": "<p>We probably have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.nonempty.some\">docs#set.nonempty.some</a> or something like that?</p>",
        "id": 265097631,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1639614943
    },
    {
        "content": "<p>But you would have to show that <code>s \\neq \\empty</code> implies <code>s.nonempty</code>.</p>",
        "id": 265097711,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1639614985
    },
    {
        "content": "<p>It might be better to use <code>if s.nonempty then nonempty_case else empty_case</code>. It's very possible that you're trying to do something in a way that's not ideal.</p>",
        "id": 265097771,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1639615031
    },
    {
        "content": "<p>Can you un- <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a> ?</p>",
        "id": 265097788,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1639615051
    },
    {
        "content": "<p>Well, I'm trying to define <code>has_Inf</code> and I need to deal with the case when the set is empty and do something special in that case.</p>",
        "id": 265097942,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1639615175
    },
    {
        "content": "<p>So far, Lean is not letting me do what I want. It keeps complaining about:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">induction</span> <span class=\"n\">tactic</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">recursor</span> <span class=\"bp\">'</span><span class=\"n\">or.dcases_on'</span> <span class=\"n\">can</span> <span class=\"n\">only</span> <span class=\"n\">eliminate</span> <span class=\"n\">into</span> <span class=\"kt\">Prop</span>\n</code></pre></div>",
        "id": 265098053,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1639615248
    },
    {
        "content": "<p>When I use <code>if then else</code>, I run into <code>invalid field notation</code> problems.</p>",
        "id": 265098245,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1639615438
    },
    {
        "content": "<p>What are defining a has_Inf for? A <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> would be helpful</p>",
        "id": 265098321,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1639615472
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">order.filter.ultrafilter</span>\n<span class=\"kn\">import</span> <span class=\"n\">order.filter.partial</span>\n\n<span class=\"kd\">noncomputable theory</span>\n<span class=\"kn\">open</span> <span class=\"n\">set</span> <span class=\"n\">filter</span> <span class=\"n\">classical</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span> <span class=\"n\">filter</span>\n\n<span class=\"kd\">variable</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">convergence_space</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">conv</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">a</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">a</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">indiscrete</span> <span class=\"o\">:</span> <span class=\"n\">convergence_space</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">conv</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">l</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">l</span> <span class=\"bp\">&lt;=</span> <span class=\"n\">pure</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_Inf</span> <span class=\"o\">(</span><span class=\"n\">convergence_space</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">Inf</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">ps</span><span class=\"o\">,</span>\n    <span class=\"k\">let</span> <span class=\"n\">ne</span> <span class=\"o\">:=</span> <span class=\"n\">ps.nonempty</span> <span class=\"k\">in</span>\n    <span class=\"k\">if</span> <span class=\"n\">ne</span> <span class=\"k\">then</span> <span class=\"o\">{</span> <span class=\"n\">conv</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">conv</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">set.nonempty.some</span> <span class=\"n\">ne</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n    <span class=\"k\">else</span> <span class=\"n\">indiscrete</span>\n<span class=\"o\">}</span>\n</code></pre></div>",
        "id": 265098678,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1639615750
    },
    {
        "content": "<p>I don't know if this is the correct definition... </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">order.filter.ultrafilter</span>\n<span class=\"kn\">import</span> <span class=\"n\">order.filter.partial</span>\n\n<span class=\"kd\">noncomputable theory</span>\n<span class=\"kn\">open</span> <span class=\"n\">set</span> <span class=\"n\">filter</span> <span class=\"n\">classical</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span> <span class=\"n\">filter</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">convergence_space</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">conv</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">α</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">α</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">indiscrete</span> <span class=\"o\">:</span> <span class=\"n\">convergence_space</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">l</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">l</span> <span class=\"bp\">≤</span> <span class=\"n\">pure</span> <span class=\"n\">x</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">has_Inf</span> <span class=\"o\">(</span><span class=\"n\">convergence_space</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">Inf</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">F</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">convergence_space</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ht</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">),</span>\n    <span class=\"kd\">by</span> <span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"n\">convergence_space</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">t</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">convergence_space.conv</span> <span class=\"n\">F</span> <span class=\"n\">x</span><span class=\"o\">⟩</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 265099334,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1639616310
    },
    {
        "content": "<p>This is saying that the convergence should hold true for every convergence space structure from the given set.</p>",
        "id": 265099356,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1639616338
    },
    {
        "content": "<p>That would be <code>has_Sup</code>. I had no problems with that one.</p>",
        "id": 265099391,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1639616399
    },
    {
        "content": "<p>If you have a sup, you can just skip the inf</p>",
        "id": 265099519,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1639616433
    },
    {
        "content": "<p>True, but I wanted to define the instance just to check the theory.</p>",
        "id": 265099554,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1639616473
    },
    {
        "content": "<p>in a complete lattice one implies the other, although the expression you get out is ugly and it's good to supply one explicitly if it has a nice expresssion</p>",
        "id": 265099564,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1639616484
    },
    {
        "content": "<p>In this Inf, it's supposed to be an existensial, but I have to deal with the empty case explicitly.</p>",
        "id": 265099643,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1639616530
    },
    {
        "content": "<p>Could you write the expression you want informally?</p>",
        "id": 265099670,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1639616569
    },
    {
        "content": "<p>Are you looking for something like this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">order.filter.ultrafilter</span>\n<span class=\"kn\">import</span> <span class=\"n\">order.filter.partial</span>\n\n<span class=\"kd\">noncomputable theory</span>\n<span class=\"kn\">open</span> <span class=\"n\">set</span> <span class=\"n\">filter</span> <span class=\"n\">classical</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span> <span class=\"n\">filter</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">convergence_space</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">conv</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">α</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">α</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">indiscrete</span> <span class=\"o\">:</span> <span class=\"n\">convergence_space</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">l</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">l</span> <span class=\"bp\">≤</span> <span class=\"n\">pure</span> <span class=\"n\">x</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">has_Inf</span> <span class=\"o\">(</span><span class=\"n\">convergence_space</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">Inf</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">F</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">convergence_space</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ht</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">),</span>\n    <span class=\"kd\">by</span> <span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"n\">convergence_space</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">t</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">convergence_space.conv</span> <span class=\"n\">F</span> <span class=\"n\">x</span><span class=\"o\">⟩</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 265099702,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1639616612
    },
    {
        "content": "<p>Basically, the <code>Inf ps</code> of a set of convergence spaces <code>ps</code> is suppose to defined as so that <code>conv f x</code> in <code>Inf ps</code> means there exists a <code>p</code> in <code>ps</code> such that <code>conv f x</code> in <code>p</code>. In the case the set is empty, use the indiscrete convergence space.</p>",
        "id": 265099770,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1639616653
    },
    {
        "content": "<p>btw you can use <code>by exactI</code> instead of that <code>letI</code></p>",
        "id": 265099775,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1639616658
    },
    {
        "content": "<p>First time seeing letI and exactI. What do those do?</p>",
        "id": 265099810,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1639616710
    },
    {
        "content": "<p>how about <code>F ≤ pure x \\/ ∃ (t : convergence_space α) (ht : t ∈ S), by exactI convergence_space.conv F x</code></p>",
        "id": 265099839,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1639616736
    },
    {
        "content": "<p>And why does the approach using <code>if then else</code> fail?</p>",
        "id": 265099848,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1639616749
    },
    {
        "content": "<p>It can be made to work, but I think it is better to use propositional connectives in this case since you are defining a <code>Prop</code></p>",
        "id": 265099917,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1639616780
    },
    {
        "content": "<p>I tried to, but it still complained saying that I wasn't defining a Prop.</p>",
        "id": 265099945,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1639616808
    },
    {
        "content": "<p>But the code with <code>{ conv := @conv a (set.nonempty.some ne) }</code> is wrong, that is saying that some particular p in the set is converging, not that there exists one that converges</p>",
        "id": 265099965,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1639616825
    },
    {
        "content": "<p>Ah, you're right. After giving up on the existensial version, I was trying this approach and I didn't realize it was not the same.</p>",
        "id": 265100062,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1639616908
    },
    {
        "content": "<p>Again, thanks for clarifying. Thank goodness for zulip and the helpful people here. Without them, I would have given up formalizing this stuff.</p>",
        "id": 265100221,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1639617042
    },
    {
        "content": "<p>Without the Zulip most of us would have given up. Without Mario I would never have made it through my first year example sheets, let alone schemes</p>",
        "id": 265124115,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1639643164
    }
]