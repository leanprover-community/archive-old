[
    {
        "content": "<p>I feel like the following is true and useful:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">finite</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">well_founded_of_finite</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a₀</span><span class=\"o\">,</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">finite</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"bp\">|</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">a₀</span><span class=\"o\">})</span> <span class=\"o\">:</span>\n  <span class=\"n\">well_founded</span> <span class=\"n\">r</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>How should I go about proving this?</p>",
        "id": 201715356,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592913269
    },
    {
        "content": "<p>it's false</p>",
        "id": 201715628,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592913484
    },
    {
        "content": "<p>total relation on unit</p>",
        "id": 201715636,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592913491
    },
    {
        "content": "<p>Hmm, is there a way to make this true?</p>",
        "id": 201715723,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592913552
    },
    {
        "content": "<p>not sure what you are going for exactly</p>",
        "id": 201715743,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592913564
    },
    {
        "content": "<p>How about if <code>r</code> is irrefl?</p>",
        "id": 201715770,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592913588
    },
    {
        "content": "<p>it has to be at least acyclic</p>",
        "id": 201715819,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592913603
    },
    {
        "content": "<p>transitive and irrefl?</p>",
        "id": 201715836,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592913613
    },
    {
        "content": "<p>sure</p>",
        "id": 201715839,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592913618
    },
    {
        "content": "<p>There's a proof that transitive irrefl relations of <code>fintype</code>s are well founded, that can probably be generalised.</p>",
        "id": 201715873,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1592913655
    },
    {
        "content": "<p>Basically, I have a type that is order isomorphic to nat, but writing down the order isomorphism is a huge pain, whereas proving that <code>{x | x &lt; y}</code> is finite for all <code>y</code> is easy.</p>",
        "id": 201715883,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592913668
    },
    {
        "content": "<p>or applied?</p>",
        "id": 201715884,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592913669
    },
    {
        "content": "<p>The easiest thing would be to prove that it is an order embedding to nat</p>",
        "id": 201715930,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592913707
    },
    {
        "content": "<p>it doesn't need to be an isomorphism</p>",
        "id": 201715988,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592913723
    },
    {
        "content": "<p>Even the order embedding is annoying</p>",
        "id": 201716041,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592913768
    },
    {
        "content": "<p>but maybe the trouble is identifying which nat you want to map to</p>",
        "id": 201716046,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592913774
    },
    {
        "content": "<p>I'm looking at the lex order on <code>{ l : list nat // l.length = n }</code> for a given <code>n</code>.</p>",
        "id": 201716082,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592913814
    },
    {
        "content": "<p>Is the lex order on list nat well ordered?</p>",
        "id": 201716151,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592913846
    },
    {
        "content": "<p>But I feel like it's most natural to get a theorem somewhat like my mnwe posted above.</p>",
        "id": 201716160,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592913853
    },
    {
        "content": "<blockquote>\n<p>Is the lex order on list nat well ordered?</p>\n</blockquote>\n<p>I don't know...</p>",
        "id": 201716175,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592913865
    },
    {
        "content": "<p>It is if you read the lists one way and not if you read the lists in reverse</p>",
        "id": 201716198,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592913887
    },
    {
        "content": "<p>there is a counterexample sequence like <code>[1],[0,1],[0,0,1],...</code></p>",
        "id": 201716224,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592913909
    },
    {
        "content": "<p>You could prove it by induction on <code>n</code>, using the prod well order</p>",
        "id": 201716355,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592913980
    },
    {
        "content": "<p>because the map itself (between <code>nat * vector nat n</code> and <code>vector nat (n+1)</code>) is pretty easy to define</p>",
        "id": 201716402,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592914030
    },
    {
        "content": "<p>Aah right, I had that counterexample at some point</p>",
        "id": 201716436,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592914061
    },
    {
        "content": "<p>Ooh, sorry. I'm actually looking at <code>{ l : list nat // l.sorted \\and l.length = n }</code></p>",
        "id": 201716538,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592914129
    },
    {
        "content": "<p>And in that case, all downsets are finite</p>",
        "id": 201716567,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592914142
    },
    {
        "content": "<p>wait, how</p>",
        "id": 201716579,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592914150
    },
    {
        "content": "<p>oh, you beat me to it</p>",
        "id": 201716585,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592914158
    },
    {
        "content": "<p>your proof method would not have worked on <code>vector nat n</code></p>",
        "id": 201716609,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592914182
    },
    {
        "content": "<p>But you can still use the method I am proposing for that set</p>",
        "id": 201716677,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592914204
    },
    {
        "content": "<p>prove that <code>vector nat n</code> is well ordered and then carve out your subset</p>",
        "id": 201716692,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592914222
    },
    {
        "content": "<p>Is the lemma I proposed true? (After adding <code>trans</code> and <code>irrefl</code> hyps)</p>",
        "id": 201716932,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592914404
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">well_founded_of_finite</span> <span class=\"o\">[</span><span class=\"n\">is_irrefl</span> <span class=\"n\">α</span> <span class=\"n\">r</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_trans</span> <span class=\"n\">α</span> <span class=\"n\">r</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a₀</span><span class=\"o\">,</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">finite</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"bp\">|</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">a₀</span><span class=\"o\">})</span> <span class=\"o\">:</span> <span class=\"n\">well_founded</span> <span class=\"n\">r</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨λ</span> <span class=\"n\">a₀</span><span class=\"o\">,</span> <span class=\"n\">acc</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">b</span> <span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"k\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"n\">a₀</span> <span class=\"k\">with</span> <span class=\"n\">fint</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"bp\">@</span><span class=\"n\">well_founded</span><span class=\"bp\">.</span><span class=\"n\">fix</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"bp\">|</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">a₀</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">acc</span> <span class=\"n\">r</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"bp\">|</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">a₀</span><span class=\"o\">},</span> <span class=\"n\">r</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">well_founded_of_trans_of_irrefl</span> <span class=\"bp\">_</span> <span class=\"n\">fint</span>\n      <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"bp\">|</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">a₀</span><span class=\"o\">},</span> <span class=\"n\">r</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">⟨λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span><span class=\"o\">,</span> <span class=\"n\">trans</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span><span class=\"bp\">⟩</span>\n      <span class=\"bp\">⟨λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">irrefl</span> <span class=\"n\">x</span><span class=\"bp\">⟩</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"bp\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">hb</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">rintros</span> <span class=\"bp\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">hb</span><span class=\"bp\">⟩</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">acc</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">y</span> <span class=\"n\">hy</span><span class=\"o\">,</span> <span class=\"n\">ih</span> <span class=\"bp\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">trans</span> <span class=\"n\">hy</span> <span class=\"n\">hb</span><span class=\"bp\">⟩</span> <span class=\"n\">hy</span><span class=\"o\">)</span>\n<span class=\"kn\">end</span><span class=\"o\">)</span><span class=\"bp\">⟩</span>\n</code></pre></div>",
        "id": 201717711,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1592914941
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> Awesome! Thanks!</p>",
        "id": 201717881,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592915069
    },
    {
        "content": "<p>Is it possible to get the order isomorphism from the above result? I was thinking about similar things for the colex ordering but never got round to actually trying it</p>",
        "id": 201721771,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1592917365
    },
    {
        "content": "<p>You'd need totality as well for there to be an isomorphism. I don't think it could be done constructively from the above result. The above result is basically proven by defining the map into nat given by the cardinality of the set <code>{a | r a b}</code>.</p>",
        "id": 201723812,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1592918360
    }
]