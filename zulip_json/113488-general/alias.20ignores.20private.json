[
    {
        "content": "<p>I wasn't expecting the following <code>#check</code>s to work.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.alias</span>\n\n<span class=\"kn\">section</span>\n\n<span class=\"kn\">private</span> <span class=\"n\">alias</span> <span class=\"n\">nat.add_le_add_iff_right</span> <span class=\"bp\">↔</span> <span class=\"n\">foo</span> <span class=\"n\">bar</span>\n<span class=\"kn\">private</span> <span class=\"n\">alias</span> <span class=\"n\">nat.lt_of_add_lt_add_left</span> <span class=\"bp\">←</span> <span class=\"n\">baz</span>\n\n<span class=\"kd\">end</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">foo</span> <span class=\"c1\">-- foo : ?M_2 + ?M_1 ≤ ?M_3 + ?M_1 → ?M_2 ≤ ?M_3</span>\n<span class=\"k\">#check</span> <span class=\"n\">bar</span> <span class=\"c1\">-- bar : ?M_2 ≤ ?M_3 → ?M_2 + ?M_1 ≤ ?M_3 + ?M_1</span>\n<span class=\"k\">#check</span> <span class=\"n\">baz</span> <span class=\"c1\">-- baz : ?M_1 + ?M_2 &lt; ?M_1 + ?M_3 → ?M_2 &lt; ?M_3</span>\n</code></pre></div>",
        "id": 299223002,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1663354463
    },
    {
        "content": "<p>I am willing to fix this myself, but I don't know how <code>private</code> works. Is it an attribute? Can <code>alias</code> detect it has been tagged?</p>",
        "id": 299223134,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1663354516
    },
    {
        "content": "<p>Context is <a href=\"https://github.com/leanprover-community/mathlib/pull/16141\">#16141</a></p>",
        "id": 299223224,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1663354558
    },
    {
        "content": "<p>It's passed along to the command in the <code>decl_meta_info</code>. User commands can choose to not take that argument, in which case they don't support any modifiers (<code>private</code>, <code>protected</code>, <code>noncomputable</code>, <code>@[attr]</code> and <code>/-- doc comment -/</code> are all in there)</p>",
        "id": 299223431,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663354622
    },
    {
        "content": "<p>but if they do take the argument then they can potentially have any of those and can do what they want with it</p>",
        "id": 299223505,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663354649
    },
    {
        "content": "<p>Ah so <code>alias</code> takes it and ignores it?</p>",
        "id": 299223574,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1663354677
    },
    {
        "content": "<p>then again, the capabilities of lean 3 meta code to apply this information to other commands is limited</p>",
        "id": 299223638,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663354686
    },
    {
        "content": "<p>yeah, it doesn't seem like there is any way to do the equivalent of creating a private def from meta code. I'm going to say this is out of scope for the lean 3 version (it's already been ported to lean 4 so you can do it there). It wouldn't be too hard to check the decl_meta_info and give an error if you put weird modifiers on the declaration though</p>",
        "id": 299224788,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663355129
    },
    {
        "content": "<p>Does <code>alias</code> actually do anything with <em>any</em> attribute? If not, we could remove its <code>decl_meta_info</code> altogether</p>",
        "id": 299225102,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1663355243
    },
    {
        "content": "<p>it uses the doc string</p>",
        "id": 299225157,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663355260
    },
    {
        "content": "<p>Hmm, doesn't it autogenerate the docstring, actually?</p>",
        "id": 299225314,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1663355304
    },
    {
        "content": "<p>yes, unless you put a doc string on the alias command</p>",
        "id": 299225356,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663355323
    },
    {
        "content": "<p>Lean 3 core usually throws errors when there are unexpected modifiers. (Sometimes this leads to usability bugs, for instance you used to be able to write <code>/-- foo -/ @[class] noncomputable local infix ` + ` := nat.add</code> even though the <code>infix</code> command only looked at <code>local</code>.)</p>",
        "id": 299226576,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1663355800
    },
    {
        "content": "<p>If it doesn't already exist, it might be good to have a standard function to call to check that certain modifiers are not set and report a standard error message if they are. For example, <a href=\"https://github.com/leanprover-community/lean/blob/master/src/frontends/lean/cmd_table.h#L28\">here's one source</a> in the C++.</p>",
        "id": 299226671,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1663355835
    }
]