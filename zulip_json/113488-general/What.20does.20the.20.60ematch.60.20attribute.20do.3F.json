[
    {
        "content": "<p>I thought I'd try and figure out what <code>ematch</code> did because I can't find out how to look it up. I searched in mathlib and the first occurrence I found was that one_mul is tagged ematch; the second was in <code>algebra.group_power.lemmas</code> where on line 104 Mario wrote <code>local attribute [ematch] le_of_lt</code> 4 years ago. I commented the line out. The file still compiles. <code>zero_mul</code> is tagged with it, and then the next occurrence is another local <code>le_of_lt</code> in <code>algebra.group_with_zero.power</code> and again if I comment it out then nothing breaks. These are local attributes so they're genuinely doing nothing at all, right? <code>le_Sup</code> has it too in <code>order.complete_lattice</code> and I commented that one out and the file still compiled (but this was global so it might have broken something else).</p>\n<p>So what does <code>ematch</code> do? Anything at all??</p>",
        "id": 262393641,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1637624759
    },
    {
        "content": "<p>I remember <code>finish</code> having a docstring about how one of the things it does is package things up for SMT solving, and it has something to do with ematch lemmas.</p>",
        "id": 262394010,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1637624996
    },
    {
        "content": "<p>Maybe it's like the quantifier instantiation described in the Z3 tutorial <a href=\"https://theory.stanford.edu/~nikolaj/programmingz3.html#sec-e-matching-based-quantifier-instantiation\">https://theory.stanford.edu/~nikolaj/programmingz3.html#sec-e-matching-based-quantifier-instantiation</a></p>",
        "id": 262394493,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1637625286
    },
    {
        "content": "<p>So poking around the git history I wonder whether at some point <code>finish</code> was used to prove a bunch of lemmas, and then lower-level proofs were found but the attribute was never removed from <code>le_of_lt</code>.</p>",
        "id": 262397751,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1637627613
    },
    {
        "content": "<p>I plugged in the axioms of the group <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>S</mi><mn>3</mn></msub></mrow><annotation encoding=\"application/x-tex\">S_3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> to see what <code>finish</code> could do.  With the ematch lemmas I gave it, it doesn't seem to be able to always solve the word problem, but, still, it's able to automatically prove more than I expected.  I didn't realize this was within the purview of <code>finish</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">axiom</span> <span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"kd\">constants</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"n\">σ</span> <span class=\"n\">τ</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n<span class=\"kd\">constant</span> <span class=\"n\">mul</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">G</span>\n<span class=\"kd\">constant</span> <span class=\"n\">inv</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">G</span>\n<span class=\"kd\">@[ematch]</span>\n<span class=\"kd\">constant</span> <span class=\"n\">assoc</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"n\">mul</span> <span class=\"o\">(</span><span class=\"n\">mul</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">mul</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">mul</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n<span class=\"kd\">@[ematch]</span>\n<span class=\"kd\">constant</span> <span class=\"n\">mul_one</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"n\">mul</span> <span class=\"n\">a</span> <span class=\"n\">e</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n<span class=\"kd\">@[ematch]</span>\n<span class=\"kd\">constant</span> <span class=\"n\">one_mul</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"n\">mul</span> <span class=\"n\">e</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n<span class=\"kd\">@[ematch]</span>\n<span class=\"kd\">constant</span> <span class=\"n\">inv_mul</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"n\">mul</span> <span class=\"o\">(</span><span class=\"n\">inv</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">e</span>\n<span class=\"kd\">@[ematch]</span>\n<span class=\"kd\">constant</span> <span class=\"n\">mul_inv</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"n\">mul</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">inv</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">e</span>\n\n<span class=\"kd\">@[ematch]</span>\n<span class=\"kd\">constant</span> <span class=\"n\">ax1</span> <span class=\"o\">:</span> <span class=\"n\">mul</span> <span class=\"n\">τ</span> <span class=\"n\">τ</span> <span class=\"bp\">=</span> <span class=\"n\">e</span>\n<span class=\"kd\">@[ematch]</span>\n<span class=\"kd\">constant</span> <span class=\"n\">ax2</span> <span class=\"o\">:</span> <span class=\"n\">mul</span> <span class=\"o\">(</span><span class=\"n\">mul</span> <span class=\"n\">σ</span> <span class=\"n\">σ</span><span class=\"o\">)</span> <span class=\"n\">σ</span> <span class=\"bp\">=</span> <span class=\"n\">e</span>\n<span class=\"kd\">@[ematch]</span>\n<span class=\"kd\">constant</span> <span class=\"n\">ax3</span> <span class=\"o\">:</span> <span class=\"n\">mul</span> <span class=\"n\">σ</span> <span class=\"n\">τ</span> <span class=\"bp\">=</span> <span class=\"n\">mul</span> <span class=\"n\">τ</span> <span class=\"o\">(</span><span class=\"n\">inv</span> <span class=\"n\">σ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">test</span> <span class=\"o\">:</span> <span class=\"n\">mul</span> <span class=\"o\">(</span><span class=\"n\">mul</span> <span class=\"n\">τ</span> <span class=\"n\">σ</span><span class=\"o\">)</span> <span class=\"n\">τ</span> <span class=\"bp\">=</span> <span class=\"n\">inv</span> <span class=\"n\">σ</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">finish</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 262404907,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1637633856
    }
]