[
    {
        "content": "<p>This is definitely going to be a massive undertaking, but I've started proving identities from the book by Gradshteyn and Ryzhik (<a href=\"https://github.com/mikesha2/identitylib\">https://github.com/mikesha2/identitylib</a>). So far, a lot of it is algebraic hell...</p>",
        "id": 299654034,
        "sender_full_name": "Congzhou Sha",
        "timestamp": 1663625959
    },
    {
        "content": "<p>This is great. One way I tried to convince analysts that formalization is useful (this is quite a hard task) is saying that having formalization of these huge libraries of special functions identities and estimates in a digitalized form would be so much better than what we have now (also considering that these things tend to have mistakes and no proofs). For the really interesting parts I think we still lack the complex analysis tools, but the more fundamental things would be great to have in mathlib.</p>",
        "id": 299654890,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1663626439
    },
    {
        "content": "<p>I'd be very surprised if <a href=\"https://github.com/mikesha2/identitylib/blob/d5d1114380f27de443fcbce14054647fe50bf21e/src/lemmas0.lean#L79\">this lemma about derivatives combining additively</a> is not in mathlib as something like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_deriv_at.add\">docs#has_deriv_at.add</a></p>",
        "id": 299655056,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1663626540
    },
    {
        "content": "<p>It's absolutely in there, and I've been trying to learn more theorems that are already in mathlib, but philosophically, it shouldn't matter, right? As long as I see \"goal accomplished\"</p>",
        "id": 299657265,
        "sender_full_name": "Congzhou Sha",
        "timestamp": 1663627616
    },
    {
        "content": "<p>Here's the argument that it does matter. Beyond just being formally checked, we want mathematical results to be discoverable, usable, and maintainable. All of these problems getting easier the tighter the integration with mathlib. It's very important for usability that libraries can be imported simultaneously with mathlib (duplication is not actually an issue here). I would argue that a repository becomes much more maintainable if it adheres to the same standards (documentation, proof style, lemma naming, etc) as mathlib --- first because there are lots of people familiar with those standards who can contribute, and secondly because it significantly lowers the barrier to porting critical parts of an external library into mathlib if it becomes necessary (either for mathlib's own purposes, or maintenance).</p>\n<p>I think the \"perfect\" approach to formalizing a large set of results (assuming they are significant enough and on topic enough to warrant living in mathlib, but that certainly applies here) is to PR them all directly into mathlib, using doc-strings to label the theorems as coming from some named collection. (e.g. see how we link to the Stacks project in many places).</p>\n<p>It is obviously more work, but there are significant payoffs: the discipline of going through the mathlib PR process results in much better code at the end of the day (plus you learn \"mathlib style\", making it easier to collaborate with others), and of course you get to hope that your contributions are maintained longer, and discovered by more people.</p>\n<p>On the other hand, perfect is the enemy of good, and it's completely fine to work off in your own repository, duplication mathlib results as you see fit. :-)</p>",
        "id": 299673638,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1663639451
    },
    {
        "content": "<p>I'm actually pretty concerned about the transition from Lean 3 to Lean 4 as well (especially for mathlib). Also since this is a hobby project for me, I think that it makes sense for me to work with a stable mathlib build, so for now I think I won't commit directly the mathlib. At some point in the future when I think I have a pretty good grasp on mathlib and I've proven a substantial number of identities, I will work on streamlining my results with theorems from mathlib and submitting PRs, which should be a far easier task than the initial writing of the theorems.</p>\n<p>As a small update, it took me about a week to get through the first 4 identities, and I'm hoping my speed will improve as I do more. I think I might need to formalize some  umbral calculus to make some of the combinatoric identities easier: <a href=\"/user_uploads/3121/pxYla2SCYKQWWENA8u3kZo_a/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/pxYla2SCYKQWWENA8u3kZo_a/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/pxYla2SCYKQWWENA8u3kZo_a/image.png\"></a></div>",
        "id": 300180555,
        "sender_full_name": "Congzhou Sha",
        "timestamp": 1663858941
    },
    {
        "content": "<p>Another take on this is that there is typically a bit of a learning curve in making mathlib PRs, and that you will likely find that you are substantially rewriting material during the PR process. Making a few small PRs early in the process may save effort overall, as you'll be able to do more of your development in mathlib style/quality on the first pass.</p>",
        "id": 300273474,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1663894680
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"530335\">@Congzhou Sha</span> Here's a golfed proof of the first lemma:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">arithmetic_progression_0_111</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">finset.range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">r</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finset.sum_range_succ</span><span class=\"o\">,</span> <span class=\"n\">ih</span><span class=\"o\">],</span>\n      <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">ring</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n  <span class=\"kd\">end</span>\n</code></pre></div>\n<p>You don't need to do all this <code>rw right_distrib</code>stuff  -- we have tools like <code>ring</code> for that. </p>\n<p>A comment on the <code>@[simp]</code> attribute: <code>simp</code> will never fire on a lemma like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">geometric_progression_0_112</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">finset.range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">q</span> <span class=\"bp\">^</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>because the simplifier will not be able to find a proof of the hypothesis <code>q \\ne 1</code>.</p>",
        "id": 300334008,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1663929819
    },
    {
        "content": "<p>Technically speaking, <code>simp</code> <em>could</em> prove <code>q ≠ 1</code>, but only in very few cases.</p>",
        "id": 300334315,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1663929946
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"kd\">lemma</span> <span class=\"n\">k_squared_geometric_progression_algebra</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">-</span><span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">+</span>\n        <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">+</span>\n          <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">-</span>\n              <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"bp\">=</span>\n      <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">+</span>\n        <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">ring_exp</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 300334537,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1663930025
    },
    {
        "content": "<p>you can always pass them in, though, Kevin:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">geometric_progression_0_112</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">finset.range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">q</span> <span class=\"bp\">^</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">q</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">finset.range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">q</span> <span class=\"bp\">^</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">t</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"k\">show</span> <span class=\"n\">q</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"gr\">sorry</span><span class=\"o\">],</span>\n  <span class=\"c1\">-- ⊢ a * (q ^ n - 1) / (q - 1) = t</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I've definitely seen <code>simp</code> lemmas in this way (and indeed, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.succ_succ_ne_one\">docs#nat.succ_succ_ne_one</a> is a simp lemma too)</p>",
        "id": 300334863,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1663930152
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"kd\">theorem</span> <span class=\"n\">sum_integers_0_121_7</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">finset.range</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">7</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">^</span> <span class=\"mi\">4</span> <span class=\"bp\">+</span> <span class=\"mi\">6</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span> <span class=\"bp\">-</span> <span class=\"n\">n</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">24</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finset.sum_range_succ</span><span class=\"o\">,</span> <span class=\"n\">ih</span><span class=\"o\">],</span>\n      <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">ring</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n  <span class=\"kd\">end</span>\n</code></pre></div>\n<p>This pattern can do all this stuff. Did you know that there's a general theorem for d'th powers involving Bernoulli polynomials? We might even have it in mathlib.</p>",
        "id": 300335124,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1663930235
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"kd\">theorem</span> <span class=\"n\">convert_proof_real_to_nat</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">finset.range</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n    <span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">finset.range</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">exact_mod_cast</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 300335390,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1663930339
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">pure_geometric_progression</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">finset.range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"bp\">^</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">geometric_progression_0_112</span> <span class=\"n\">n</span> <span class=\"mi\">1</span> <span class=\"n\">q</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span>\n</code></pre></div>\n<p><code>simpa using this</code> is <code>simp at this, exact this</code></p>",
        "id": 300335790,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1663930489
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"kd\">lemma</span> <span class=\"n\">deriv_of_geometric_rv</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span><span class=\"o\">):</span>\n    <span class=\"o\">((</span><span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span>\n    <span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">finset.range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">k</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">deriv_of_geometric</span> <span class=\"n\">n</span> <span class=\"n\">x</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span>\n</code></pre></div>\n<p>Dot notation is super-cool! The type of <code>deriv_of_geometric n x h</code> is <code>eq _ _</code> so <code>(deriv_of_geometric n x h).symm</code> means <code>eq.symm deriv_of_geometric n x h</code> which you can use instead of the <code>symmetry</code> tactic.</p>",
        "id": 300336441,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1663930749
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">deriv_of_geometric</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span><span class=\"o\">):</span>\n  <span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">finset.range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">k</span> <span class=\"bp\">=</span>\n  <span class=\"o\">((</span><span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"c1\">-- proof which avoids analysis:</span>\n  <span class=\"c1\">-- First clear denominators:</span>\n  <span class=\"k\">have</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h2</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">linarith</span><span class=\"o\">},</span>\n  <span class=\"n\">field_simp</span> <span class=\"o\">[</span><span class=\"n\">foo</span><span class=\"o\">],</span>\n  <span class=\"c1\">-- now just use induction on n</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">d</span> <span class=\"n\">hd</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- and it's just algebra</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finset.sum_range_succ</span><span class=\"o\">,</span> <span class=\"n\">add_mul</span><span class=\"o\">,</span> <span class=\"n\">hd</span><span class=\"o\">],</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">ring_exp</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>You can't need analysis to prove this because it's true in any field. The algebra proof is far less painful than the analytic route you took (the algebra route completely involves the long <code>deriv_except_at_one</code>)</p>",
        "id": 300337675,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1663931234
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/Proving.20identities.20from.20Table.20of.20Integrals.2C.20Series.2C.20and.20Prod/near/300337675\">said</a>:</p>\n<blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">deriv_of_geometric</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span><span class=\"o\">):</span>\n  <span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">finset.range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">k</span> <span class=\"bp\">=</span>\n  <span class=\"o\">((</span><span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"c1\">-- proof which avoids analysis:</span>\n  <span class=\"c1\">-- First clear denominators:</span>\n  <span class=\"k\">have</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h2</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">linarith</span><span class=\"o\">},</span>\n  <span class=\"n\">field_simp</span> <span class=\"o\">[</span><span class=\"n\">foo</span><span class=\"o\">],</span>\n  <span class=\"c1\">-- now just use induction on n</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">d</span> <span class=\"n\">hd</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- and it's just algebra</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finset.sum_range_succ</span><span class=\"o\">,</span> <span class=\"n\">add_mul</span><span class=\"o\">,</span> <span class=\"n\">hd</span><span class=\"o\">],</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">ring_exp</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>You can't need analysis to prove this because it's true in any field. The algebra proof is far less painful than the analytic route you took (the algebra route completely involves the long <code>deriv_except_at_one</code>)</p>\n</blockquote>\n<p>Yeah, it ‘s interesting how the easiest way to come up with the correct algebraic expression is to do the analysis route by pencil and paper, but then formalizing is easier with induction.</p>\n<p>Thanks for all the suggestions, I’ll go through and streamline everything! There were definitely cases where <code>ring</code> wasn’t able to solve the goal (cancelling terms like (1 - x) ^ 2 / (1 - x) ^ 3) and I had to manually cancel some terms, but I see you use <code>ring_exp</code> for some of that</p>",
        "id": 300382242,
        "sender_full_name": "Congzhou Sha",
        "timestamp": 1663944324
    },
    {
        "content": "<p>You just need to know the tricks (which you learn by trying stuff and then looking at other people's solutions, which is why I showed you some of my solutions). <code>ring</code> can't deal with division because division isn't part of the structure of a ring. But there are tactics like <code>field_simp</code> which are specifically designed for clearing denominators (division is part of the structure of a field).</p>",
        "id": 300413789,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1663953307
    }
]