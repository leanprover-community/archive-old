[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> I started trying to prove that <code>string.lt</code> is a total order, and then I discovered it's not true:</p>\n<div class=\"codehilite\"><pre><span></span>#eval to_bool ([1, 2] &lt; [2, 1]) -- tt\n#eval to_bool ([2, 1] &lt; [1, 2]) -- tt\n</pre></div>\n\n\n<p>Surely this is a bug?</p>",
        "id": 128386824,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1529532871
    },
    {
        "content": "<p>Even worse, it behaves differently (correctly) on actual strings:</p>\n<div class=\"codehilite\"><pre><span></span>#eval to_bool (&quot;ab&quot; &lt; &quot;ba&quot;) -- tt\n#eval to_bool (&quot;ba&quot; &lt; &quot;ab&quot;) -- ff\n#reduce to_bool (&quot;ba&quot; &lt; &quot;ab&quot;) -- tt\nexample : &quot;ba&quot; &lt; &quot;ab&quot; := dec_trivial\n</pre></div>",
        "id": 128386901,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1529532995
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean/blob/a4aae537fe771ee92d746d4a2be1e73c543e48b9/library/init/data/list/basic.lean#L278\" target=\"_blank\" title=\"https://github.com/leanprover/lean/blob/a4aae537fe771ee92d746d4a2be1e73c543e48b9/library/init/data/list/basic.lean#L278\">oops</a></p>",
        "id": 128392824,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1529542651
    },
    {
        "content": "<p>I'm using this in mathlib:</p>\n<div class=\"codehilite\"><pre><span></span>inductive lex (r : α → α → Prop) : list α → list α → Prop\n| nil {} {a l} : lex [] (a :: l)\n| cons {a l₁ l₂} (h : lex l₁ l₂) : lex (a :: l₁) (a :: l₂)\n| rel {a₁ l₁ a₂ l₂} (h : r a₁ a₂) : lex (a₁ :: l₁) (a₂ :: l₂)\n</pre></div>\n\n\n<p>Feel free to poach</p>",
        "id": 128393318,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1529543623
    },
    {
        "content": "<p>Right, an inductive definition is certainly nicer here</p>",
        "id": 128393382,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1529543746
    },
    {
        "content": "<p>here's the decidability proof, although it needs rejiggering for core:</p>\n<div class=\"codehilite\"><pre><span></span>instance decidable_rel [decidable_eq α] (r : α → α → Prop)\n  [decidable_rel r] : decidable_rel (lex r)\n| l₁ [] := is_false $ λ h, by cases h\n| [] (b::l₂) := is_true lex.nil\n| (a::l₁) (b::l₂) := begin\n  haveI := decidable_rel l₁ l₂,\n  refine decidable_of_iff (r a b ∨ a = b ∧ lex r l₁ l₂) ⟨λ h, _, λ h, _⟩,\n  { rcases h with h | ⟨rfl, h⟩,\n    { exact lex.rel h },\n    { exact lex.cons h } },\n  { rcases h with _|⟨_,_,_,h⟩|⟨_,_,_,_,h⟩,\n    { exact or.inr ⟨rfl, h⟩ },\n    { exact or.inl h } }\nend\n</pre></div>",
        "id": 128393430,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1529543780
    }
]