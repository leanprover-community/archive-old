[
    {
        "content": "<p>I'm trying to automate my demo file, for comparison. Is there any reason not to try to write a monster tactic trying all automation we have (except speed reason)? Something like:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">do_it</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span> <span class=\"n\">do</span>\n<span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">try</span> <span class=\"o\">{</span><span class=\"n\">ext</span><span class=\"o\">}],</span>\n<span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">try</span> <span class=\"o\">{</span><span class=\"n\">split</span><span class=\"o\">}],</span>\n<span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">apply_eq</span><span class=\"o\">],</span>\n<span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">all_goals</span> <span class=\"o\">{</span><span class=\"n\">finish</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">tauto</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">tidy</span><span class=\"o\">}]</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">failure</span>\n</pre></div>\n\n\n<p>can do everything that should be automatic in my demo file. It could even do more without the tidy bug.</p>",
        "id": 135098666,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1538568786
    },
    {
        "content": "<p>It uses Simon's apply function equalities tactic</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">open</span> <span class=\"n\">tactic</span>\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">apply_eq</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"n\">l</span> <span class=\"err\">←</span> <span class=\"n\">local_context</span><span class=\"o\">,</span>\n   <span class=\"n\">l</span><span class=\"bp\">.</span><span class=\"n\">mmap</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">try</span> <span class=\"err\">$</span> <span class=\"n\">do</span> <span class=\"o\">{</span>\n     <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"err\">%%</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"err\">%%</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"err\">←</span> <span class=\"n\">infer_type</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n     <span class=\"o\">(</span><span class=\"n\">vs</span><span class=\"o\">,</span><span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"err\">←</span> <span class=\"n\">infer_type</span> <span class=\"n\">x</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">mk_local_pis</span><span class=\"o\">,</span>\n     <span class=\"n\">p&#39;</span> <span class=\"err\">←</span> <span class=\"n\">mk_app</span> <span class=\"bp\">`</span><span class=\"n\">eq</span> <span class=\"o\">[</span><span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">mk_app</span> <span class=\"n\">vs</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"bp\">.</span><span class=\"n\">mk_app</span> <span class=\"n\">vs</span><span class=\"o\">],</span>\n     <span class=\"n\">p&#39;</span> <span class=\"err\">←</span> <span class=\"n\">pis</span> <span class=\"n\">vs</span> <span class=\"n\">p&#39;</span><span class=\"o\">,</span>\n     <span class=\"n\">assert</span> <span class=\"o\">(</span><span class=\"n\">to_string</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">local_pp_name</span> <span class=\"bp\">++</span> <span class=\"s2\">&quot;_ev&quot;</span> <span class=\"o\">:</span> <span class=\"n\">string</span><span class=\"o\">)</span> <span class=\"n\">p&#39;</span><span class=\"o\">,</span>\n     <span class=\"n\">vs</span> <span class=\"err\">←</span> <span class=\"n\">intros</span><span class=\"o\">,</span>\n     <span class=\"n\">vs</span><span class=\"bp\">.</span><span class=\"n\">reverse</span><span class=\"bp\">.</span><span class=\"n\">mmap</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">v</span><span class=\"o\">,</span>\n       <span class=\"n\">do</span> <span class=\"n\">revert</span> <span class=\"n\">v</span><span class=\"o\">,</span>\n          <span class=\"n\">applyc</span> <span class=\"bp\">``</span><span class=\"n\">congr_fun</span><span class=\"o\">),</span>\n     <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"o\">},</span>\n  <span class=\"n\">return</span> <span class=\"o\">()</span>\n</pre></div>",
        "id": 135098676,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1538568813
    },
    {
        "content": "<p>Patrick, you should investigate whether we could put <code>finish</code> or <code>tauto</code> inside <code>tidy</code>. I suspect they would be fine, I've actually never used them!</p>",
        "id": 135098839,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1538568983
    },
    {
        "content": "<p>While you're at it, you should also add <code>cc</code> and <code>linarith</code> to <code>über</code>.</p>",
        "id": 135098888,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538569039
    },
    {
        "content": "<p>(A big downside, by the way, of using <code>tidy</code> merely as a tactic script writing tool is that we don't build up a library of test cases for it, making it harder to safely tweak.)</p>",
        "id": 135098891,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1538569045
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span>, didn't you add congr_fun to <code>solve_by_elim</code> recently?</p>",
        "id": 135098893,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538569054
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span>, yes, but the PR hasn't landed yet.</p>",
        "id": 135098899,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1538569067
    },
    {
        "content": "<p>Aaaaah! That's why!</p>",
        "id": 135098908,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538569078
    },
    {
        "content": "<blockquote>\n<p>(A big downside, by the way, of using <code>tidy</code> merely as a tactic script writing tool is that we don't build up a library of test cases for it, making it harder to safely tweak.)</p>\n</blockquote>\n<p>We need caching.</p>",
        "id": 135098947,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538569084
    },
    {
        "content": "<p>(I need to deal with your suggestion to use <code>with</code> when passing attributes.)</p>",
        "id": 135098949,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1538569085
    },
    {
        "content": "<p>(I've also realised there is a mistake in <code>solve_by_elim</code> when dealing with multiple sub-goals, more on that later :-)</p>",
        "id": 135098965,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1538569110
    },
    {
        "content": "<p>I keep getting confused with the PRs that haven't been merged yet</p>",
        "id": 135098977,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538569132
    },
    {
        "content": "<blockquote>\n<p>I'm trying to automate my demo file, for comparison. Is there any reason not to try to write a monster tactic trying all automation we have (except speed reason)?</p>\n</blockquote>\n<p>Because proofs in first order logic and anything more expressive is undecidable, you can't build a tactic so that, when it fails, you can say \"it tried everything\". You could always try a little harder, maybe one more call to <code>ext</code> and then <code>simp</code> will do it.</p>",
        "id": 135099176,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538569317
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span>, another way to achieve this is to add the @[tidy] annotation to tactics that you want to try.</p>",
        "id": 135099531,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1538569635
    },
    {
        "content": "<p>Well, maybe if it fails we could conclude \"it tried everything that is straightforward up to a reasonable depth\". And then \"probably this proof needs an <em>idea</em>\".</p>",
        "id": 135099543,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538569655
    },
    {
        "content": "<p>For example, if you write <code>@[tidy] meta def la := `[linarith]</code>, then after that <code>tidy</code> will also try calling linarith.</p>",
        "id": 135099562,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1538569678
    },
    {
        "content": "<p>You could make an import, for example, that super-charged <code>tidy</code> with all these other things.</p>",
        "id": 135099620,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1538569705
    },
    {
        "content": "<p>Can you just <code>local attibute [tidy] linarith</code>?</p>",
        "id": 135099623,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538569707
    },
    {
        "content": "<p>Probably not quite that: the <code>[tidy]</code> attribute has to be on a <code>tactic unit</code> or <code>tactic string</code>.</p>",
        "id": 135099636,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1538569736
    },
    {
        "content": "<p>Any arguments (e.g. to interactive tactics) will break it.</p>",
        "id": 135099643,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1538569745
    },
    {
        "content": "<p>Although this is completely fixable.</p>",
        "id": 135099649,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1538569750
    },
    {
        "content": "<p>(and we should do so at some point...)</p>",
        "id": 135099666,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1538569783
    },
    {
        "content": "<p>I think super-tactics like this are not uncommon</p>",
        "id": 135099892,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538570011
    },
    {
        "content": "<p>Everyone wants to be the one tactic to rule them all</p>",
        "id": 135099919,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538570029
    },
    {
        "content": "<p>I think <code>tidy</code> has too unassuming a name for a supertactic</p>",
        "id": 135099975,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538570053
    },
    {
        "content": "<p>It should be called <code>crush</code> or <code>blast</code> or some similarly violent thing</p>",
        "id": 135100008,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538570098
    },
    {
        "content": "<p>What about <code>nuke</code>?</p>",
        "id": 135100025,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538570119
    },
    {
        "content": "<p>Either that or <code>solve_violently</code></p>",
        "id": 135100094,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538570173
    },
    {
        "content": "<p>We're all still waiting for Mjölnir</p>",
        "id": 135100271,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538570327
    },
    {
        "content": "<p>I was always disappointed by what <code>destruct</code> does because it feels like a synonym to <code>destroy</code>. And now we can't use <code>destroy</code> as the name of a super tactic.</p>",
        "id": 135100412,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538570452
    },
    {
        "content": "<p>But we can use <code>annihilate</code></p>",
        "id": 135100421,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538570465
    },
    {
        "content": "<p>You know Grothendieck's parable about proving strategies?</p>",
        "id": 135100510,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538570528
    },
    {
        "content": "<p>We should also have <code>soak</code></p>",
        "id": 135100516,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538570536
    },
    {
        "content": "<p>But it is very time-expensive</p>",
        "id": 135100524,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538570546
    },
    {
        "content": "<p>I do not. Please educate me</p>",
        "id": 135100529,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538570556
    },
    {
        "content": "<p>Might take a couple of years to run. But it will produce a couple 1000 pages of beautiful math in the end....</p>",
        "id": 135100536,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538570567
    },
    {
        "content": "<p>I'm searching for it... give me a second</p>",
        "id": 135100575,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538570627
    },
    {
        "content": "<p>:D</p>",
        "id": 135100632,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538570649
    },
    {
        "content": "<p>A similar approach to <code>by grad_student</code></p>",
        "id": 135100648,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538570684
    },
    {
        "content": "<p><a href=\"https://mathoverflow.net/a/7156\" target=\"_blank\" title=\"https://mathoverflow.net/a/7156\">https://mathoverflow.net/a/7156</a></p>",
        "id": 135100679,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538570729
    },
    {
        "content": "<p>I think <code>soak</code> or <code>immerse</code> is different from <code>grad_student</code>. It is even more expensive...</p>",
        "id": 135100757,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538570806
    },
    {
        "content": "<p><span class=\"emoji emoji-1f951\" title=\"avocado\">:avocado:</span></p>",
        "id": 135100786,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1538570861
    },
    {
        "content": "<p>I love it :D That's what I call putting a problem on the back burner</p>",
        "id": 135100881,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538570942
    },
    {
        "content": "<p>Blindly adding the tidy attribute to tactics only gives me deterministic timeout</p>",
        "id": 135104489,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1538574768
    },
    {
        "content": "<p>especially with norm_num</p>",
        "id": 135104631,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1538574899
    },
    {
        "content": "<p>and apply_eq</p>",
        "id": 135104661,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1538574934
    },
    {
        "content": "<p><code>apply_eq</code> never fails and I believe neither does <code>norm_num</code>. Does <code>tidy</code> repeated try its tactics?</p>",
        "id": 135104737,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538574991
    },
    {
        "content": "<p>Wow, you're still not sleeping? Did you decide to simply skip that step?</p>",
        "id": 135104776,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1538575043
    },
    {
        "content": "<p>Yeah, I'll pick it up later. I have an appointment this morning so at some point I got afraid I would sleep right passed it if I managed to fall asleep so I got out of bed</p>",
        "id": 135104850,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538575109
    },
    {
        "content": "<p>Yes, tidy relies on the \"do something or fail\" model for tactics.</p>",
        "id": 135104875,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1538575152
    },
    {
        "content": "<p>Speaking of sleeping.</p>",
        "id": 135104876,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1538575158
    },
    {
        "content": "<p>Do you still see a way to make use of norm_num inside tidy?</p>",
        "id": 135104959,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1538575230
    },
    {
        "content": "<p>You can write a tactic that checks if progress was made and fails if none was made</p>",
        "id": 135105003,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538575283
    },
    {
        "content": "<p>how? comparing the new goal with previous goal?</p>",
        "id": 135105026,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1538575311
    },
    {
        "content": "<p>And a better solution is to change the behaviour of norm_num... Who wants tactics to silently fail, anyway? :-)</p>",
        "id": 135105072,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1538575327
    },
    {
        "content": "<p>Exactly. It's a fun exercise, perhaps the first tactic I ever wrote. :-)</p>",
        "id": 135105092,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1538575358
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">guard_progress</span> <span class=\"o\">(</span><span class=\"n\">tac</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"n\">gs</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">get_goals</span><span class=\"o\">,</span>\n   <span class=\"n\">tac</span><span class=\"o\">,</span>\n   <span class=\"n\">gs&#39;</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">get_goals</span><span class=\"o\">,</span>\n   <span class=\"n\">guard</span> <span class=\"o\">(</span><span class=\"n\">gs</span> <span class=\"bp\">≠</span> <span class=\"n\">gs&#39;</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 135105096,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538575362
    },
    {
        "content": "<p>It was too fun for Simon to resist</p>",
        "id": 135105120,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1538575392
    },
    {
        "content": "<blockquote>\n<p>Exactly. It's a fun exercise, perhaps the first tactic I ever wrote. :-)</p>\n</blockquote>\n<p>Which one?</p>",
        "id": 135105126,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538575397
    },
    {
        "content": "<p>I'm so greedy. Sorry</p>",
        "id": 135105132,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538575408
    },
    {
        "content": "<p>But you are both maligning norm_num, it can actually fail</p>",
        "id": 135105229,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1538575502
    },
    {
        "content": "<p>I can make up for this theft. <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> If you didn't have <code>assert</code>, <code>assertv</code>, <code>define</code>, <code>definev</code>, <code>note</code> or <code>pose</code>, how to you create a new goal and an associated assumption?</p>",
        "id": 135105261,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538575534
    },
    {
        "content": "<p>What are <code>note</code> and <code>pose</code>?</p>",
        "id": 135105355,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538575601
    },
    {
        "content": "<p>I don't even understand the question</p>",
        "id": 135105364,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1538575611
    },
    {
        "content": "<p>Actually, I don't recognise any of those tactics.</p>",
        "id": 135105380,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538575627
    },
    {
        "content": "<p>I only use <code>have foo : blah,</code></p>",
        "id": 135105394,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538575639
    },
    {
        "content": "<p>Or <code>suffices</code></p>",
        "id": 135105405,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538575647
    },
    {
        "content": "<p>Johan, this is all meta</p>",
        "id": 135105407,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1538575650
    },
    {
        "content": "<p>we are discussing tactic writing here, not plebeian proof writing</p>",
        "id": 135105428,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1538575681
    },
    {
        "content": "<p>You got it. There's also a non-condescending way to put it :P</p>",
        "id": 135105524,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538575745
    },
    {
        "content": "<p>Hopefully the fact <em>I</em> wrote this (instead of Scott, you or any other tactic writer) was a clear enough hint about how to read it <span class=\"emoji emoji-1f609\" title=\"wink\">:wink:</span></p>",
        "id": 135105640,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1538575818
    },
    {
        "content": "<p>I thought so too. I just had to react to the tone <span class=\"emoji emoji-1f606\" title=\"laughing\">:laughing:</span></p>",
        "id": 135105736,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538575914
    },
    {
        "content": "<p>By the way, those all used to be interactive tactics. I was the one who advocated for simplifying it all down to <code>have</code> and <code>let</code></p>",
        "id": 135105831,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538575988
    },
    {
        "content": "<p>and <code>suffices</code> because why not</p>",
        "id": 135105852,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538576016
    },
    {
        "content": "<p>That's a nice improvement</p>",
        "id": 135105990,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538576125
    },
    {
        "content": "<p>It's especially nice that the same keywords work in tactic mode and in term mode</p>",
        "id": 135106008,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538576144
    },
    {
        "content": "<p>it's also slightly confusing that the accepted syntaxes are not quite the same</p>",
        "id": 135106062,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1538576170
    },
    {
        "content": "<p>fortunately that issue is easily fixed by working only in tactic mode</p>",
        "id": 135106078,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1538576200
    },
    {
        "content": "<p>Returning to norm_num and tidy, I'm not able to make any progress on getting <code>example : (0 : ℝ) &lt; (1 : ℝ) := by tidy</code> to work. I tried adding norm_num to the tidy set, either with or without progress guard but no luck</p>",
        "id": 135106213,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1538576318
    },
    {
        "content": "<p>That's annoying</p>",
        "id": 135106356,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538576420
    },
    {
        "content": "<p>That's probably only me</p>",
        "id": 135106366,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1538576440
    },
    {
        "content": "<p>That's what I meant, you keep complaining ... <span class=\"emoji emoji-1f61c\" title=\"stuck out tongue wink\">:stuck_out_tongue_wink:</span></p>",
        "id": 135106393,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538576465
    },
    {
        "content": "<p>What's fun is that the guard_progress trick works with apply_eq which is not meant to modify the goal</p>",
        "id": 135106409,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1538576499
    },
    {
        "content": "<p>My tactic writing is pure Brownian motion</p>",
        "id": 135106424,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1538576519
    },
    {
        "content": "<p>Ah! It's time for the next lesson</p>",
        "id": 135106468,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538576530
    },
    {
        "content": "<p>If we have Brownian motions in mathlib, would this help you with tactic writing <span class=\"emoji emoji-1f61c\" title=\"stuck out tongue wink\">:stuck_out_tongue_wink:</span> ?</p>",
        "id": 135106484,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538576563
    },
    {
        "content": "<p>When you use <code>get_goals</code>, what exactly does it give you? First wrong assumption: it tells you the proposition that the goal aims to prove.</p>",
        "id": 135106499,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538576595
    },
    {
        "content": "<blockquote>\n<p>If we have Brownian motions in mathlib, would this help you with tactic writing <span class=\"emoji emoji-1f61c\" title=\"stuck out tongue wink\">:stuck_out_tongue_wink:</span> ?</p>\n</blockquote>\n<p>Sorry to disappoint: my research area is scheduling in distributed and cyber-physical systems (keyword: scheduling) and I'm still constantly procrastinating and arriving late</p>",
        "id": 135106574,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538576659
    },
    {
        "content": "<p>You may know all the theory there is on a subject, that doesn't mean that you can do the thing yourself</p>",
        "id": 135106597,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538576696
    },
    {
        "content": "<blockquote>\n<p>When you use <code>get_goals</code>, what exactly does it give you? First wrong assumption: it tells you the proposition that the goal aims to prove.</p>\n</blockquote>\n<p>What it actually gives you is a list of unassigned meta variables. An unassigned meta variable has a type and a set of local constants that it can see. It doesn't have a value yet. Just like a proof goal: you know what you have to prove but you don't have a proof yet.</p>",
        "id": 135106704,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538576814
    },
    {
        "content": "<p>If your goal is <code>⊢ succ x &lt; succ y</code>, you have a meta variable <code>?m_1 : succ x &lt; succ y</code>. If you want to apply <code>succ_lt_succ</code>, It</p>",
        "id": 135106832,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538576925
    },
    {
        "content": "<p>it's like creating a meta variable <code>?m_2 : x &lt; y</code> and then you construct an expression <code>succ_lt_succ ?m_2</code> which you assign to <code>?m_1</code>. Then, you remove <code>?m_1</code> from the list of goals and you put <code>?m_2</code> instead. The goal changes because you have a different meta variable in the list of goals now.</p>",
        "id": 135106985,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538577047
    },
    {
        "content": "<p>so the short version is: the goal comes with its local context, right?</p>",
        "id": 135107297,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1538577299
    },
    {
        "content": "<p>That is correct</p>",
        "id": 135107588,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538577535
    },
    {
        "content": "<p>I should stop playing, and focus on the archaic manual referee process, but I have <a href=\"https://github.com/PatrickMassot/lean-scratchpad/blob/master/src/auto_demo.lean\" target=\"_blank\" title=\"https://github.com/PatrickMassot/lean-scratchpad/blob/master/src/auto_demo.lean\">https://github.com/PatrickMassot/lean-scratchpad/blob/master/src/auto_demo.lean</a></p>",
        "id": 135107927,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1538577831
    },
    {
        "content": "<p>This is part of my demo file with tidy everywhere</p>",
        "id": 135108002,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1538577860
    },
    {
        "content": "<p>Thanks for all your help!</p>",
        "id": 135108465,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1538578241
    },
    {
        "content": "<blockquote>\n<p>What about <code>nuke</code>?</p>\n</blockquote>\n<p>Can emoji be tactic names?</p>",
        "id": 135111366,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1538580671
    },
    {
        "content": "<p>This has come up before</p>",
        "id": 135113179,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538582162
    },
    {
        "content": "<p>and I believe there was a trick using quotations somehow</p>",
        "id": 135113199,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538582178
    },
    {
        "content": "<p><a href=\"#narrow/stream/116395-maths/subject/algebra.20on.20subtypes/near/129927817\" title=\"#narrow/stream/116395-maths/subject/algebra.20on.20subtypes/near/129927817\">https://leanprover.zulipchat.com/#narrow/stream/116395-maths/subject/algebra.20on.20subtypes/near/129927817</a></p>",
        "id": 135113247,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1538582249
    }
]