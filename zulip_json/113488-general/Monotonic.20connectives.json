[
    {
        "content": "<p>I keep running into goals of the form <code>A → B</code>, where <code>A</code> and <code>B</code> consist entirely of monotonic connectives and quantifiers (<code>∨</code>, <code>∧</code>, <code>∀</code>, <code>∃</code>) and the implication <code>A_i → B_i</code> holds trivially for any pair <code>(A_i, B_i)</code> of corresponding subprops (e.g., <code>h : s1 → s2 ⊢ (p ∧ q ∨ s1) → (p ∧ q ∨ s2)</code>). Is there a standard way to deal with this kind of goals?</p>\n<p>Here's what I'm using right now: <a href=\"https://github.com/skbaek/mathlib/blob/mono_con/src/tactic/mono_con.lean\" target=\"_blank\" title=\"https://github.com/skbaek/mathlib/blob/mono_con/src/tactic/mono_con.lean\">https://github.com/skbaek/mathlib/blob/mono_con/src/tactic/mono_con.lean</a>  It works for my needs, but I'm wondering if there is a more principled approach.</p>",
        "id": 162578684,
        "sender_full_name": "Seul Baek",
        "timestamp": 1554420263
    },
    {
        "content": "<p><code>tauto</code>, <code>tauto!</code>, or <code>finish</code></p>",
        "id": 162579478,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1554421209
    },
    {
        "content": "<p>in theory <code>mono</code> should do that, but I haven't checked how well it performs</p>",
        "id": 162579609,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1554421356
    },
    {
        "content": "<p>confirmed: <code>mono</code> solves it</p>",
        "id": 162580258,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1554422087
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span>  Oops, I meant cases in which the implications between subprops are <em>mostly</em> trivial, such that you want to reduce the goal into proving implications between only the non-trivial ones.  For instance, if the goal was</p>\n<div class=\"codehilite\"><pre><span></span>example (α : Type) (p q : Prop) (r1 r2 s1 s2 : α → Prop) :\n  (∀ x : α, r1 x ∧ ∃ y : α, (p ∧ q ∨ s1 y)) →\n  (∀ x : α, r2 x ∧ ∃ y : α, (p ∧ q ∨ s2 y))\n</pre></div>\n\n\n<p>then it'd be convenient to have a tactic that reduces it to <code>r1 x → r2 x</code> and <code>s1 y → s2 y</code> for arbitrary <code>x</code> and <code>y</code>.  I don't think <code>finish</code>, <code>safe</code>, or <code>tauto</code> does it, although I may be using them incorrectly.</p>",
        "id": 162580483,
        "sender_full_name": "Seul Baek",
        "timestamp": 1554422342
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> Does it work with quantifiers? It'd solve all my problematic cases if it did</p>",
        "id": 162580656,
        "sender_full_name": "Seul Baek",
        "timestamp": 1554422518
    },
    {
        "content": "<p>I think I have the code somewhere to make it work with quantifiers but I don't think it made it into mathlib</p>",
        "id": 162580867,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1554422716
    },
    {
        "content": "<p><a href=\"https://github.com/unitb/lean-lib/blob/master/src/util/meta/tactic/monotonicity/predicate.lean\" target=\"_blank\" title=\"https://github.com/unitb/lean-lib/blob/master/src/util/meta/tactic/monotonicity/predicate.lean\">https://github.com/unitb/lean-lib/blob/master/src/util/meta/tactic/monotonicity/predicate.lean</a></p>",
        "id": 162580982,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1554422845
    },
    {
        "content": "<p>If you feel like making a PR out of it, I'd love that</p>",
        "id": 162581293,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1554423153
    },
    {
        "content": "<p>Hmm, it looks like combining <code>intro_mono</code> with <code>mono</code> and adding an option for recursive application would give me what I want</p>",
        "id": 162581413,
        "sender_full_name": "Seul Baek",
        "timestamp": 1554423319
    },
    {
        "content": "<p>Awesome :)</p>",
        "id": 162581586,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1554423504
    },
    {
        "content": "<p><code>tauto!</code> indeed solves the first example in your file, but annoyingly you have to manually instantiate some of the universal quantifiers in the second</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"n\">s1</span> <span class=\"n\">s2</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">s1</span> <span class=\"bp\">→</span> <span class=\"n\">s2</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">∨</span> <span class=\"n\">s1</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">∨</span> <span class=\"n\">s2</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">tauto</span><span class=\"bp\">!</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p1</span> <span class=\"n\">p2</span> <span class=\"n\">q1</span> <span class=\"n\">q2</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r1</span> <span class=\"n\">r2</span> <span class=\"n\">s1</span> <span class=\"n\">s2</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">p1</span> <span class=\"bp\">→</span> <span class=\"n\">p2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">q1</span> <span class=\"bp\">→</span> <span class=\"n\">q2</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">r1</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">r2</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h4</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">s1</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">s2</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">r1</span> <span class=\"n\">x</span> <span class=\"bp\">∨</span> <span class=\"bp\">∃</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">p1</span> <span class=\"bp\">∨</span> <span class=\"n\">s1</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">q1</span><span class=\"o\">))</span> <span class=\"bp\">→</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">r2</span> <span class=\"n\">x</span> <span class=\"bp\">∨</span> <span class=\"bp\">∃</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">p2</span> <span class=\"bp\">∨</span> <span class=\"n\">s2</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">q2</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"n\">intros</span> <span class=\"n\">H</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">specialize</span> <span class=\"n\">h3</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">specialize</span> <span class=\"n\">H</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">safe</span><span class=\"bp\">;</span> <span class=\"n\">solve_by_elim</span><span class=\"o\">}</span>\n</pre></div>\n\n\n<p>this makes me appreciate <code>mono</code> more</p>",
        "id": 162588070,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1554431936
    }
]