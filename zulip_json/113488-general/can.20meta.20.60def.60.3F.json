[
    {
        "content": "<p>Can you have meta code that writes definitions and lemmas for you? Probably yes, and this is how things like <code>to_additive</code> work. Is that right?</p>",
        "id": 133394258,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536172801
    },
    {
        "content": "<p>Is this somehow what <code>add_decl</code> is for?</p>",
        "id": 133394409,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536172944
    },
    {
        "content": "<p>Yes it is</p>",
        "id": 133394637,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1536173173
    },
    {
        "content": "<p>Ok cool! I could imagine some uses for it.</p>",
        "id": 133394664,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536173220
    },
    {
        "content": "<p>For example, you define multiplication of matrices, and immediately afterwards, there is a simp-lemma <code>mul_val</code>. This happens a lot. Couldn't we auto-generate those?</p>",
        "id": 133394687,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536173267
    },
    {
        "content": "<p>I feel like at least half of the simp lemmas after definitions could be auto-generated.</p>",
        "id": 133394756,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536173325
    },
    {
        "content": "<p>Here is a claim: every lemma that is proved by <code>rfl</code> is a good candidate for being auto-generated.</p>",
        "id": 133394817,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536173402
    },
    {
        "content": "<p>Yes, they can be generated. But could it be that you could get rid of the lemmas altogether by tagging your definition as <code>simp</code>?</p>",
        "id": 133394857,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1536173405
    },
    {
        "content": "<p>Hmm, I think usually there is notation introduced in between.</p>",
        "id": 133394898,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536173442
    },
    {
        "content": "<p>But the notation doesn't affect rewriting.</p>",
        "id": 133395156,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1536173681
    },
    {
        "content": "<p>Hmm... then I'm just really confused.</p>",
        "id": 133395204,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536173754
    },
    {
        "content": "<p>Take <a href=\"https://github.com/leanprover-community/mathlib/blob/noetherian/ring_theory/ideals.lean#L176\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/noetherian/ring_theory/ideals.lean#L176\">https://github.com/leanprover-community/mathlib/blob/noetherian/ring_theory/ideals.lean#L176</a> for example.</p>",
        "id": 133395224,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536173763
    },
    {
        "content": "<p>Those lines have completely predictable names (even to me), and are completely boring statements.</p>",
        "id": 133395268,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536173787
    },
    {
        "content": "<p>I would definitely forget to write them, until I need the after 50 other lines, and then only write half of them.</p>",
        "id": 133395286,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536173818
    },
    {
        "content": "<p>Do you think stuff like this could be automated?</p>",
        "id": 133395396,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536173896
    },
    {
        "content": "<p>Maybe the question is to general...</p>",
        "id": 133395464,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536173981
    },
    {
        "content": "<p>I think the issue there is the combination of <code>coe</code> (which comes from a type class) and its underlying definition.</p>",
        "id": 133395514,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1536174005
    },
    {
        "content": "<p>At least I got an answer to the original question. And I am glad that it was positive. I'll keep it in mind, because I'm sure it will come in handy at some point.</p>",
        "id": 133395533,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536174021
    },
    {
        "content": "<p>It is not as trivial as I thought but there might be something to do with it.</p>",
        "id": 133395540,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1536174029
    },
    {
        "content": "<p>In general, maybe the question is to do <code>simp</code> lemmas from a type class instance which is just built on top of stand alone definitions</p>",
        "id": 133395641,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1536174127
    },
    {
        "content": "<p>If you have </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">my_class</span> <span class=\"n\">my_type</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">op</span> <span class=\"o\">:=</span> <span class=\"n\">my_type</span><span class=\"bp\">.</span><span class=\"n\">op</span> <span class=\"o\">}</span>\n</pre></div>\n\n\n<p>we can take all the equations of <code>my_type.op</code>, replace the occurrences of <code>my_type.op</code> with <code>my_class.op</code> and label the result as <code>simp</code></p>",
        "id": 133395779,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1536174278
    },
    {
        "content": "<p>Right. That sounds useful. But I don't know what the experts think (-;</p>",
        "id": 133395833,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536174354
    },
    {
        "content": "<p>More import still: does it seem like a generalization of the problem you were asking about?</p>",
        "id": 133395896,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1536174390
    },
    {
        "content": "<p>Yes, I think so... although there might also be other cases. For example <a href=\"https://github.com/leanprover/mathlib/pull/316/files#diff-dcac36203421953a8cefa07fecd35a79R71\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/pull/316/files#diff-dcac36203421953a8cefa07fecd35a79R71\">https://github.com/leanprover/mathlib/pull/316/files#diff-dcac36203421953a8cefa07fecd35a79R71</a> might be enhanced to also define a functor along the way.</p>",
        "id": 133396014,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536174495
    },
    {
        "content": "<p>But I'm not suggesting that these are special cases of one sort of automation.</p>",
        "id": 133396029,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536174532
    },
    {
        "content": "<p>It is just that they could both benefit from some <code>add_decl</code> if I'm not mistaken.</p>",
        "id": 133396047,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536174553
    },
    {
        "content": "<p>If you want, I can walk you through the construction of the solution I suggested and then we can see if something similar can be done for your second example</p>",
        "id": 133396183,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1536174716
    },
    {
        "content": "<p>Ok, would definitely like to do that. But maybe not tonight (-; I need to catch up with some sleep, so I'll be gone in a couple of minutes.</p>",
        "id": 133396356,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536174866
    },
    {
        "content": "<p>Sure, let me know when you're ready and I'll give you a hand</p>",
        "id": 133396393,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1536174919
    },
    {
        "content": "<p>Just for your information: Isabelle has a tool called <code>lift_definition</code> which lifts a term along subtypes / quotients / other relations etc.<br>\nIf one wants to define a function <code>lift f : {a : A // p a} -&gt; {b : B // q b}</code>, it provides one with the following two goals:<br>\nthe function itself: <code>f : A -&gt; B</code> and a proof <code>forall a : A, p a -&gt; q (f b)</code>. The nice thing is that this also works for quotients, but in Isabelle this is done by assuming that there is a canonical projection (i.e. <code>quot.out</code>) which we may want to avoid, and instead use a more generic lifting constant.</p>\n<p>My idea for a lift function would be: get typing information (which includes the information for which types the representation should change) and the term to lift. Then it puts <code>lift</code> or <code>cases</code> around the term to translate into the other type. All further proofs are left as subgoals to the user. Finally it produces the constant itself, and a rewrite rule which adds coercions etc at all places necessary to remove all lift constants.</p>",
        "id": 133397167,
        "sender_full_name": "Johannes HÃ¶lzl",
        "timestamp": 1536175709
    }
]