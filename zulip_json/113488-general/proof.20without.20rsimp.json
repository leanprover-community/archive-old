[
    {
        "content": "<p>Any suggestion on how to prove this? <code>rsimp</code> works, but I'm guessing there's a better way.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">,</span>\n<span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n<span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">j</span>\n<span class=\"err\">⊢</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">rec</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">rec</span> <span class=\"o\">(</span><span class=\"n\">iff</span><span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">j</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">congr</span> <span class=\"o\">(</span><span class=\"n\">congr_arg</span> <span class=\"n\">eq</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"n\">j</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">propext</span> <span class=\"o\">(</span><span class=\"n\">eq_self_iff_true</span> <span class=\"n\">j</span><span class=\"o\">))))</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"n\">true</span><span class=\"bp\">.</span><span class=\"n\">intro</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"n\">j</span>\n</pre></div>",
        "id": 129752082,
        "sender_full_name": "Sean Leather",
        "timestamp": 1531750533
    },
    {
        "content": "<p>what is <code>rsimp</code>?</p>",
        "id": 129752174,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1531750614
    },
    {
        "content": "<p>I can't test because that's not a MWE but I think <code>rfl</code> should work</p>",
        "id": 129752244,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531750683
    },
    {
        "content": "<blockquote>\n<p>I can't test because that's not a MWE but I think <code>rfl</code> should work</p>\n</blockquote>\n<p>It doesn't.</p>",
        "id": 129752301,
        "sender_full_name": "Sean Leather",
        "timestamp": 1531750726
    },
    {
        "content": "<p>What are the types of things?</p>",
        "id": 129752329,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531750760
    },
    {
        "content": "<blockquote>\n<p>what is <code>rsimp</code>?</p>\n</blockquote>\n<p>I'm not sure, but it's slow. I reworked a couple of proofs in mathlib to not use it because it slowed down the build. <span class=\"emoji emoji-1f642\" title=\"simple smile\">:simple_smile:</span></p>",
        "id": 129752343,
        "sender_full_name": "Sean Leather",
        "timestamp": 1531750776
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Why isn't it a MWE? That's the entire context. What else do you need?</p>",
        "id": 129752482,
        "sender_full_name": "Sean Leather",
        "timestamp": 1531750885
    },
    {
        "content": "<p>something he can copy-paste</p>",
        "id": 129752504,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531750909
    },
    {
        "content": "<p>DId you try making an <code>example</code> out of that? the motive of the <code>eq.rec</code> isn't inferrable</p>",
        "id": 129752509,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531750918
    },
    {
        "content": "<p>Right, I see. I can try.</p>",
        "id": 129752604,
        "sender_full_name": "Sean Leather",
        "timestamp": 1531750990
    },
    {
        "content": "<p>This is my current hacky proof progress:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span>\n\n<span class=\"n\">def</span> <span class=\"n\">modify</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">array</span> <span class=\"n\">n</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">array</span> <span class=\"n\">n</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">write</span> <span class=\"n\">i</span> <span class=\"err\">$</span> <span class=\"n\">f</span> <span class=\"err\">$</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">read</span> <span class=\"n\">i</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">theorem</span> <span class=\"n\">modify_id</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">array</span> <span class=\"n\">n</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">modify</span> <span class=\"n\">i</span> <span class=\"n\">id</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">modify</span><span class=\"o\">,</span> <span class=\"n\">read</span><span class=\"o\">,</span> <span class=\"n\">write</span><span class=\"o\">,</span> <span class=\"n\">d_array</span><span class=\"bp\">.</span><span class=\"n\">write</span><span class=\"o\">,</span> <span class=\"n\">d_array</span><span class=\"bp\">.</span><span class=\"n\">read</span><span class=\"o\">]</span><span class=\"bp\">;</span>\n   <span class=\"n\">cases</span> <span class=\"n\">a</span> <span class=\"k\">with</span> <span class=\"n\">a</span><span class=\"bp\">;</span>\n   <span class=\"n\">congr</span><span class=\"bp\">;</span>\n   <span class=\"n\">funext</span> <span class=\"n\">j</span><span class=\"bp\">;</span>\n   <span class=\"n\">dsimp</span><span class=\"bp\">;</span> <span class=\"n\">dsimp</span> <span class=\"n\">at</span> <span class=\"n\">a</span><span class=\"bp\">;</span>\n   <span class=\"n\">by_cases</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">j</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">dsimp</span>\n</pre></div>",
        "id": 129752774,
        "sender_full_name": "Sean Leather",
        "timestamp": 1531751181
    },
    {
        "content": "<p>Oh, I just realized I don't have <code>decidable_eq α</code>. Perhaps that's what's missing?</p>",
        "id": 129752816,
        "sender_full_name": "Sean Leather",
        "timestamp": 1531751253
    },
    {
        "content": "<p>You don't need it</p>",
        "id": 129752881,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531751287
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>@[simp] theorem modify_id (a : array n α) (i : fin n) : a.modify i id = a :=\narray.ext $ λ j, by by_cases i = j; simp [h, modify]\n</pre></div>",
        "id": 129753171,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531751621
    },
    {
        "content": "<p>Very nice.</p>",
        "id": 129753229,
        "sender_full_name": "Sean Leather",
        "timestamp": 1531751653
    },
    {
        "content": "<p>Don't gratuitously unfold things, it often makes your life harder</p>",
        "id": 129753235,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531751659
    },
    {
        "content": "<p>Huh, looks like my hacks were doing something similar:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">protected</span> <span class=\"kn\">lemma</span> <span class=\"n\">ext</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">d_array</span> <span class=\"n\">n</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">read</span> <span class=\"n\">a</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">read</span> <span class=\"n\">b</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">cases</span> <span class=\"n\">a</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">b</span><span class=\"bp\">;</span> <span class=\"n\">congr</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">funext</span> <span class=\"n\">h</span>\n</pre></div>",
        "id": 129753264,
        "sender_full_name": "Sean Leather",
        "timestamp": 1531751698
    },
    {
        "content": "<blockquote>\n<p>Don't gratuitously unfold things, it often makes your life harder</p>\n</blockquote>\n<p>Indeed. I didn't think to look for an extensionality lemma.</p>",
        "id": 129753306,
        "sender_full_name": "Sean Leather",
        "timestamp": 1531751742
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>what is <code>rsimp</code>?</p>\n</blockquote>\n<p>I'm not sure, but it's slow. I reworked a couple of proofs in mathlib to not use it because it slowed down the build. <span class=\"emoji emoji-1f642\" title=\"simple smile\">:simple_smile:</span></p>\n</blockquote>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">set_option</span> <span class=\"n\">profiler</span> <span class=\"n\">true</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">rsimp</span>\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span>elaboration: tactic execution took 2.91s\nnum. allocated objects:  6337\nnum. allocated closures: 4935\n</pre></div>",
        "id": 129767892,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531766096
    },
    {
        "content": "<p>human speed :-)</p>",
        "id": 129767914,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531766125
    },
    {
        "content": "<blockquote>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">set_option</span> <span class=\"n\">profiler</span> <span class=\"n\">true</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">rsimp</span>\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">elaboration</span><span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">execution</span> <span class=\"n\">took</span> <span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">91</span><span class=\"n\">s</span>\n<span class=\"n\">num</span><span class=\"bp\">.</span> <span class=\"n\">allocated</span> <span class=\"n\">objects</span><span class=\"o\">:</span>  <span class=\"mi\">6337</span>\n<span class=\"n\">num</span><span class=\"bp\">.</span> <span class=\"n\">allocated</span> <span class=\"n\">closures</span><span class=\"o\">:</span> <span class=\"mi\">4935</span>\n</pre></div>\n\n\n</blockquote>\n<p>The allocation results make sense. When I looked at the generated proof terms of some <code>rsimp</code> usages, they included tons of gratuitous reflexivity, commutativity, and transitivity terms. I bet that's the case here, too.</p>",
        "id": 129796766,
        "sender_full_name": "Sean Leather",
        "timestamp": 1531808594
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/xKzjHVDogyMIr2UJ8bK1i4vB/2018-07-17.png\" target=\"_blank\" title=\"2018-07-17.png\">2018-07-17.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/xKzjHVDogyMIr2UJ8bK1i4vB/2018-07-17.png\" target=\"_blank\" title=\"2018-07-17.png\"><img src=\"/user_uploads/3121/xKzjHVDogyMIr2UJ8bK1i4vB/2018-07-17.png\"></a></div>",
        "id": 129796870,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1531808828
    },
    {
        "content": "<p>irreproducible</p>",
        "id": 129796873,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1531808833
    },
    {
        "content": "<p>tactic compilation != tactic execution</p>\n<div class=\"codehilite\"><pre><span></span>kb_value.lean:302:8: information\nparsing took 0.0767ms\nkb_value.lean:302:21: information\nelaboration: tactic compilation took 2.74ms\nkb_value.lean:302:21: information tactic profile data\nelaboration: tactic execution took 5.34s\nnum. allocated objects:  7164\nnum. allocated closures: 5642\n 5343ms   100.0%   scope_trace\n 5343ms   100.0%   _interaction._lambda_2\n 5343ms   100.0%   tactic.istep\n 5343ms   100.0%   tactic.step\n 5343ms   100.0%   tactic.rsimp\n 5343ms   100.0%   tactic.focus1\n 5343ms   100.0%   tactic.istep._lambda_1\n 5343ms   100.0%   using_smt\n 4694ms    87.9%   interaction_monad_orelse\n 4477ms    83.8%   rsimp.collect_implied_eqs._lambda_4\n 4475ms    83.8%   rsimp.collect_implied_eqs._lambda_1\n 4475ms    83.8%   smt_tactic.iterate_at_most._main._lambda_3\n 4475ms    83.8%   smt_tactic.ematch_core\n  866ms    16.2%   smt_state.mk\n  225ms     4.2%   rsimp_attr._lambda_1\n  224ms     4.2%   _private.410121379.to_hinst_lemmas._main._lambda_5\n  224ms     4.2%   to_hinst_lemmas\n  219ms     4.1%   _private.3989697749.add_lemma._lambda_1\n  214ms     4.0%   _private.410121379.to_hinst_lemmas._main._lambda_3\n  214ms     4.0%   hinst_lemma.mk_from_decl_core\n  214ms     4.0%   interaction_monad.monad._lambda_9\n   38ms     0.7%   _private.410121379.to_hinst_lemmas._main._lambda_2\n    5ms     0.1%   hinst_lemmas.add\n    2ms     0.0%   name_set.contains\n    1ms     0.0%   attribute.get_instances\n</pre></div>",
        "id": 129798091,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531811040
    },
    {
        "content": "<p>Profiler seems to be giving out strictly less info in javascript version</p>",
        "id": 129798137,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531811096
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> try <code>#check id</code> (or indeed anything) after the <code>rsimp</code> in the online version</p>",
        "id": 129798195,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531811171
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/wbYWo5azpuBeH-w-iuMj3s4T/2018-07-17-1.png\" target=\"_blank\" title=\"2018-07-17-1.png\">2018-07-17-1.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/wbYWo5azpuBeH-w-iuMj3s4T/2018-07-17-1.png\" target=\"_blank\" title=\"2018-07-17-1.png\"><img src=\"/user_uploads/3121/wbYWo5azpuBeH-w-iuMj3s4T/2018-07-17-1.png\"></a></div>",
        "id": 129798321,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1531811443
    },
    {
        "content": "<p>reproduced</p>",
        "id": 129798322,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1531811445
    },
    {
        "content": "<p>Okay, so the allocations aren't what I thought they might be.</p>",
        "id": 129798337,
        "sender_full_name": "Sean Leather",
        "timestamp": 1531811513
    }
]