[
    {
        "content": "<p>We have various theorems of the form \"if <code>e : α ≃ β</code> and <code>β</code> has some structure, then <code>α</code> has the same structure\". What do you think about introducing a type tag <code>get_instances_from e</code> (of course, we need a better name), and turn these theorems into instances on the new type?</p>",
        "id": 261173019,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1636657576
    },
    {
        "content": "<p>This way things in <code>data.equiv.transfer_instance</code> will be much less ugly than they are now.</p>",
        "id": 261173068,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1636657611
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span></p>",
        "id": 261178106,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1636660627
    },
    {
        "content": "<p>Sounds good.</p>",
        "id": 261186476,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1636666116
    },
    {
        "content": "<p>Also, could we maybe define the type tag in one file and then tag in their respective files?</p>",
        "id": 261187047,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1636666559
    },
    {
        "content": "<p><code>data.equiv.transfer_instances</code> is quite an import dump right now.</p>",
        "id": 261187109,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1636666594
    },
    {
        "content": "<p>The tag should be defined in <code>data.equiv.basic</code> and instances like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/equiv.nonempty\">docs#equiv.nonempty</a> should be registered in this file.</p>",
        "id": 261188545,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1636667663
    },
    {
        "content": "<p>Any suggestions about the name?</p>",
        "id": 261188569,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1636667686
    },
    {
        "content": "<p>Can you give an example of what you want using this feature to look like? I don't understand the description</p>",
        "id": 261189275,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636668229
    },
    {
        "content": "<p>I also get the feeling that <code>data.equiv.transfer_instance</code> is used very rarely outside category theory anyway</p>",
        "id": 261189340,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636668268
    },
    {
        "content": "<p>What about putting the instances in a locale as <code>pointwise</code>?</p>",
        "id": 261189662,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1636668505
    },
    {
        "content": "<p>I want to have the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[nolint unused_arguments]</span>\n<span class=\"kd\">def</span> <span class=\"n\">my_tag</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">≃</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">≃</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">inhabited</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">inhabited</span> <span class=\"o\">(</span><span class=\"n\">my_tag</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">e.symm</span> <span class=\"o\">(</span><span class=\"n\">default</span> <span class=\"n\">β</span><span class=\"o\">)⟩</span>\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">has_one</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_one</span> <span class=\"o\">(</span><span class=\"n\">my_tag</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">e.symm</span> <span class=\"mi\">0</span><span class=\"o\">⟩</span>\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_mul</span> <span class=\"o\">(</span><span class=\"n\">my_tag</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">e.symm</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">e</span> <span class=\"n\">y</span><span class=\"o\">)⟩</span>\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">semigroup</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">semigroup</span> <span class=\"o\">(</span><span class=\"n\">my_tag</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">e.injective.semigroup</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">e.apply_symm_apply</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Here the last instance automatically finds <code>has_mul (my_tag e)</code>.</p>",
        "id": 261195019,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1636672582
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> Why do you want to put them in a locale?</p>",
        "id": 261195040,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1636672607
    },
    {
        "content": "<p>I don't. Was mentioning it was an instance if ever we don't want them to pollute general typeclass inference.</p>",
        "id": 261195077,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1636672650
    },
    {
        "content": "<p>They apply only to <code>my_tag e</code>, so this shouldn't be a problem.</p>",
        "id": 261195160,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1636672694
    },
    {
        "content": "<p>With definitions above we can later write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">semigroup</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">semigroup</span> <span class=\"o\">(</span><span class=\"n\">ulift</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">my_tag.semigroup</span> <span class=\"n\">equiv.ulift</span>\n</code></pre></div>",
        "id": 261195219,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1636672751
    },
    {
        "content": "<p>Are there any situations where you wouldn't unfold <code>my_tag</code> like that?</p>",
        "id": 261196089,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636673609
    },
    {
        "content": "<p>Or is <code>my_tag</code> just an implementation detail that is always supposed to be unfolded by the user?</p>",
        "id": 261196174,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636673705
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/113488-general/topic/type.20tag.20for.20.22transfer.20instances.20along.20an.20equiv.22.3F/near/261195219\">said</a>:</p>\n<blockquote>\n<p>With definitions above we can later write</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">semigroup</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">semigroup</span> <span class=\"o\">(</span><span class=\"n\">ulift</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">my_tag.semigroup</span> <span class=\"n\">equiv.ulift</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>How is this an improvement over the current <code>equiv.ulift.semigroup</code>?</p>",
        "id": 261239335,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1636716194
    },
    {
        "content": "<p>I think the point is to eliminate the mess that is the <em>implementation</em> of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/equiv.semigroup/src\">src#equiv.semigroup</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">let</span> <span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"n\">e.has_mul</span> <span class=\"k\">in</span>\n<span class=\"kd\">by</span> <span class=\"n\">resetI</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">e.injective.semigroup</span> <span class=\"n\">_</span><span class=\"bp\">;</span> <span class=\"n\">intros</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">e.apply_symm_apply</span> <span class=\"n\">_</span>\n</code></pre></div>\n<p>The <code>let</code>s wouldn't be necessary there if we were working with <code>my_tag</code>.</p>",
        "id": 261243915,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636719409
    },
    {
        "content": "<p>Ah, that's fair.<br>\n<span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span>'s suggestion seems good to me.</p>",
        "id": 261255626,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1636725667
    },
    {
        "content": "<p>What name should I use? Should instances be called <code>my_tag.semigroup</code> or just <code>equiv.semigroup : semigroup (my_tag e)</code>?</p>",
        "id": 261309543,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1636750642
    },
    {
        "content": "<p>With the latter syntax, one can use <code>letI : semigroup G := (e : G ≃ H).semigroup</code>.</p>",
        "id": 261309642,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1636750696
    },
    {
        "content": "<p>Maybe the type <code>my_tag</code> could be <code>equiv.transfered_type</code>?</p>",
        "id": 261332342,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636768177
    },
    {
        "content": "<p>Or just <code>equiv.domain</code>?</p>",
        "id": 261357825,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1636806353
    },
    {
        "content": "<p>I thought the direction we cared about was<code>def codomain (e : α ≃ β) := β</code>, for transferring instances \"forward\" along <code>e</code> from <code>α</code> to <code>β</code>?</p>",
        "id": 261358044,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636806700
    },
    {
        "content": "<p>Currently instances and lemmas transfer from <code>β</code> to <code>α</code>. I don't know why but I don't want to change it without a good reason.</p>",
        "id": 261360667,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1636810514
    },
    {
        "content": "<p>In that case <code>domain</code> seems like a good suggestion to me</p>",
        "id": 261360826,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636810748
    }
]