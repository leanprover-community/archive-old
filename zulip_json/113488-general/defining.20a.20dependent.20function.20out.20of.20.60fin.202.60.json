[
    {
        "content": "<p>I'm stuck on something basic to do with <code>fin n</code>.</p>",
        "id": 134038733,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1537072546
    },
    {
        "content": "<p>Suppose I have <code>T : fin 2 → Type</code>, and I happen to have <code>X : T ⟨ 0, by tidy ⟩</code> and a <code>Y : T ⟨ 1, by tidy ⟩</code>.</p>",
        "id": 134038734,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1537072554
    },
    {
        "content": "<p>How do I construct the dependent function <code>Π n : fin 2, T n</code> which sends 0 to <code>X</code> and 1 to <code>Y</code>?</p>",
        "id": 134038736,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1537072561
    },
    {
        "content": "<p>What about using an <code>if _ then _ else _</code>?</p>",
        "id": 134038784,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1537072589
    },
    {
        "content": "<p>How would that work?</p>",
        "id": 134038797,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1537072625
    },
    {
        "content": "<p>I remember someone showing me a trick to do <code>match</code> on <code>fin n</code>, but I can't find it anywhere now. :-(</p>",
        "id": 134038812,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1537072649
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"n\">X</span> <span class=\"k\">else</span> <span class=\"n\">Y</span>\n</pre></div>",
        "id": 134038819,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1537072664
    },
    {
        "content": "<p>If you find it again, please show me.</p>",
        "id": 134038867,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1537072708
    },
    {
        "content": "<p>I don't see how your suggestion helps, <span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span>:</p>\n<div class=\"codehilite\"><pre><span></span>import tactic.tidy\n\ndef T : fin 2 → Type := sorry\ndef X : T ⟨ 0, by tidy ⟩ := sorry\ndef Y : T ⟨ 1, by tidy ⟩ := sorry\n\ndef S : Π n : fin 2, T n\n| x := if x = 0 then X else Y\n</pre></div>",
        "id": 134038944,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1537072843
    },
    {
        "content": "<p>errors with </p>\n<div class=\"codehilite\"><pre><span></span>type mismatch at application\n  ite (x = 0) X\nterm\n  X\nhas type\n  T ⟨0, X._proof_1⟩\nbut is expected to have type\n  T x\n</pre></div>",
        "id": 134038950,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1537072858
    },
    {
        "content": "<p>Ah ok, I misunderstood your problem</p>",
        "id": 134038961,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1537072895
    },
    {
        "content": "<p>Here's a example of my problem:</p>\n<div class=\"codehilite\"><pre><span></span>import tactic.tidy\n\ndef T : fin 2 → Type := ([ℕ, ℤ].to_array).data\ndef X : T ⟨ 0, by tidy ⟩ := begin show ℕ, exact 1 end\ndef Y : T ⟨ 1, by tidy ⟩ := begin show ℤ, exact -1 end\n\ndef S : Π n : fin 2, T n\n| ⟨ 0, _ ⟩ := X\n| ⟨ 1, _ ⟩ := Y\n| _ := sorry\n</pre></div>",
        "id": 134039161,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1537073227
    },
    {
        "content": "<p>The question is to define <code>S</code>, following the intention shown, but without a <code>sorry</code>.</p>",
        "id": 134039167,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1537073252
    },
    {
        "content": "<p>(Side questions include better ways to write <code>T</code> in the first place.)</p>",
        "id": 134039171,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1537073264
    },
    {
        "content": "<p>One thing you can do is:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">T</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"bp\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"bp\">_⟩</span> <span class=\"o\">:=</span> <span class=\"n\">X</span>\n<span class=\"bp\">|</span> <span class=\"bp\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"bp\">_⟩</span> <span class=\"o\">:=</span> <span class=\"n\">Y</span>\n<span class=\"bp\">|</span> <span class=\"bp\">⟨</span><span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">),</span><span class=\"n\">h</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">false</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"err\">$</span> <span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">admit</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n</pre></div>",
        "id": 134039173,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1537073270
    },
    {
        "content": "<p>Excellent! That works, now the question becomes --- is my distant memory that there's an even better solution, correct? :-)</p>",
        "id": 134039233,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1537073351
    },
    {
        "content": "<p>My brain times out looking for one</p>",
        "id": 134039281,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1537073410
    },
    {
        "content": "<p>And what is the canonical way to fill in that admit, these days?</p>",
        "id": 134039283,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1537073437
    },
    {
        "content": "<p>I'd hoped that <code>linarith</code> was up to proving discharging <code>n+2 &lt; 2</code> implies <code>false</code>, but apparently not.</p>",
        "id": 134039291,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1537073473
    },
    {
        "content": "<p>There's a <code>linarith</code> tactic coming down the pipes. Maybe it can handle <code>nat</code> now? We'd have to check</p>",
        "id": 134039293,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1537073491
    },
    {
        "content": "<p>Oh, that's too bad</p>",
        "id": 134039294,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1537073508
    },
    {
        "content": "<p>There was a recent addition saying it could do nat.</p>",
        "id": 134039334,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1537073543
    },
    {
        "content": "<p>Oh, maybe I haven't pulled that one yet...</p>",
        "id": 134039335,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1537073549
    },
    {
        "content": "<p>It feels like the kind of proposition that you should be able to prove in two steps. All I can think of takes more</p>",
        "id": 134039342,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1537073610
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"bp\">|</span> <span class=\"bp\">⟨</span><span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">),</span><span class=\"n\">h</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">false</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"err\">$</span> <span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">not_lt_of_ge</span> <span class=\"bp\">_</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">repeat</span> <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">succ_le_succ</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">apply</span> <span class=\"n\">zero_le</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n</pre></div>",
        "id": 134039389,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1537073698
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 134039444,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1537073800
    },
    {
        "content": "<p>Ah! This is even shorter:</p>\n<div class=\"codehilite\"><pre><span></span>  <span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">repeat</span> <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">lt_of_succ_lt_succ</span> <span class=\"n\">h</span> <span class=\"o\">},</span> <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"o\">}</span>\n</pre></div>",
        "id": 134039503,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1537073908
    },
    {
        "content": "<p>that should be false by matching</p>",
        "id": 134039568,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537074093
    },
    {
        "content": "<p>hmm, that doesn't work for me?</p>",
        "id": 134039570,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1537074099
    },
    {
        "content": "<p>but Kenny just showed me:</p>\n<div class=\"codehilite\"><pre><span></span>import tactic.tidy\n-- import tactic.linarith\n\ndef T : fin 2 → Type := ([ℕ, ℤ].to_array).data\ndef X : T ⟨ 0, by tidy ⟩ := begin show ℕ, exact 1 end\ndef Y : T ⟨ 1, by tidy ⟩ := begin show ℤ, exact -1 end\n\ndef S : Π n : fin 2, T n\n| ⟨ 0, _ ⟩ := X\n| ⟨ 1, _ ⟩ := Y\n| ⟨ nat.succ (nat.succ n), H ⟩ := false.elim $ by cases H with H H; cases H with H H; cases H\n</pre></div>",
        "id": 134039575,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1537074113
    },
    {
        "content": "<p>You can also use <code>fin.succ_rec_on</code> to get the right induction principle</p>",
        "id": 134039620,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537074187
    },
    {
        "content": "<p>ah, and the new <code>linarith</code> really does it!</p>",
        "id": 134039621,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1537074203
    },
    {
        "content": "<p>how about</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">elab_as_eliminator</span><span class=\"o\">]</span>\n<span class=\"n\">def</span> <span class=\"n\">fin2</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"n\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"n\">C</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"bp\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span> <span class=\"n\">C0</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"n\">C0</span>\n<span class=\"bp\">|</span> <span class=\"bp\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span> <span class=\"bp\">_</span> <span class=\"n\">C1</span> <span class=\"o\">:=</span> <span class=\"n\">C1</span>\n<span class=\"bp\">|</span> <span class=\"bp\">⟨</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">H</span><span class=\"bp\">⟩</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"n\">false</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"err\">$</span> <span class=\"n\">not_le_of_gt</span> <span class=\"n\">H</span> <span class=\"err\">$</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">le_add_left</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span>\n</pre></div>",
        "id": 134039622,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537074213
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>import tactic.tidy\nimport tactic.linarith\n\ndef T : fin 2 → Type := ([ℕ, ℤ].to_array).data\ndef X : T ⟨ 0, by tidy ⟩ := begin show ℕ, exact 1 end\ndef Y : T ⟨ 1, by tidy ⟩ := begin show ℤ, exact -1 end\n\ndef S : Π n : fin 2, T n\n| ⟨ 0, _ ⟩ := X\n| ⟨ 1, _ ⟩ := Y\n| ⟨ n + 2, H ⟩ := by exfalso; linarith\n</pre></div>",
        "id": 134039668,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1537074252
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>import data.fin data.list.basic\n\ndef T : fin 2 → Type := ([ℕ, ℤ].to_array).data\ndef X : T ⟨0, dec_trivial⟩ := (1 : ℕ)\ndef Y : T ⟨1, dec_trivial⟩ := (-1 : ℤ)\n\ndef S : Π n : fin 2, T n :=\nfin.cases X (λ i, fin.cases Y (λ i, i.elim0) i)\n</pre></div>",
        "id": 134039891,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537074784
    },
    {
        "content": "<p>Thanks, Mario. I think I might use the <code>match</code> version, even if it depends on linarith, for decipherability.</p>",
        "id": 134043762,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1537082279
    },
    {
        "content": "<p>I think I'll also write a <code>fin_cases</code> tactic, that works with a <code>fin n</code> hypothesis with <code>n</code> a numeral.</p>",
        "id": 134043805,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1537082311
    },
    {
        "content": "<p>(and actually gives you all the cases)</p>",
        "id": 134043808,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1537082320
    }
]