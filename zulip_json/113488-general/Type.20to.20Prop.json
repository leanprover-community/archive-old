[
    {
        "content": "<p>Say I have a complex proposition involving multiple conjunctions, disjunctions, existensial, and so on. I would like to \"package\" this proposition as an inductive type in order to give sane names to each of its parts. Can I use this type in proofs even though it's not a Prop? Will I run into problems with tactics that expect a Prop and not a Type?</p>",
        "id": 263840534,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1638792483
    },
    {
        "content": "<p>Are you aware that you can do:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">some_prop</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 263840810,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638792678
    },
    {
        "content": "<p>That is, it sounds like you want to be able to use <code>structure</code>, not <code>Type</code>. \"inductive prop\"s are a thing too.</p>",
        "id": 263840907,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638792730
    },
    {
        "content": "<p>In principle there is no objection to using tactics in <code>Type</code>. The main issue you might run into is (lack of) definitional equality: you might expect all tactic-generated proofs of e.g. <code>and' a b</code> to look like <code>and'.intro a b</code>, but it might actually unfold to something very complicated. Such definitional issues don't matter in <code>Prop</code> because of proof irrelevance.</p>",
        "id": 263840912,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1638792732
    },
    {
        "content": "<p>Also what <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> said, you probably want to try using <code>inductive foo : Prop</code> instead?</p>",
        "id": 263840985,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1638792790
    },
    {
        "content": "<p>I'll try Wieser's suggestion. Looks promosing.</p>",
        "id": 263841158,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1638792913
    }
]