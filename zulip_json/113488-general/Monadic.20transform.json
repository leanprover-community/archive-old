[
    {
        "content": "<p>Hello, this question is more about functional programming than Lean proper, but I thought here is still a good place to ask. Is the following \"monadic transformation\" typeclass a known thing?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">MonadicTransform</span> <span class=\"o\">(</span><span class=\"n\">tag</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">transform</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"n\">β</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">tag</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">MonadicTransform</span> <span class=\"n\">tag</span> <span class=\"n\">m</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">MonadicTransform</span> <span class=\"n\">tag</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">Array</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Array</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">transform</span> <span class=\"n\">as</span> <span class=\"o\">:=</span> <span class=\"n\">as.mapM</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">MonadicTransform.transform</span> <span class=\"n\">tag</span> <span class=\"n\">m</span> <span class=\"n\">_</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">MonadicTransform</span> <span class=\"n\">tag</span> <span class=\"n\">m</span> <span class=\"n\">α</span> <span class=\"n\">α'</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MonadicTransform</span> <span class=\"n\">tag</span> <span class=\"n\">m</span> <span class=\"n\">β</span> <span class=\"n\">β'</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">MonadicTransform</span> <span class=\"n\">tag</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α'</span> <span class=\"bp\">×</span> <span class=\"n\">β'</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">transform</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">a'</span> <span class=\"bp\">←</span> <span class=\"n\">MonadicTransform.transform</span> <span class=\"n\">tag</span> <span class=\"n\">a</span>\n    <span class=\"k\">let</span> <span class=\"n\">b'</span> <span class=\"bp\">←</span> <span class=\"n\">MonadicTransform.transform</span> <span class=\"n\">tag</span> <span class=\"n\">b</span>\n    <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">a'</span><span class=\"o\">,</span> <span class=\"n\">b'</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- and so on, according to type structure</span>\n</code></pre></div>\n<p>The intended use case, btw, is to define instances that do something special for a couple of base types and then have that propagate to all types (which needs metaprogramming in general but tuple/list/array is a good start). It is <code>tag</code>ged because one may have multiple transformations in the same monad in general, though maybe putting that in the type signature is a bad idea. An alternative would be a \"typeclass schema\" generated via a metaprogram rather than using tags.</p>",
        "id": 245776855,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1626148576
    },
    {
        "content": "<p>I'm not sure if this is helpful, but if I understand your definition correctly, the mathematicians' name for your concept is \"a morphism in the Kleisli category\".</p>",
        "id": 245777801,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1626149789
    },
    {
        "content": "<p>Oh duh, of course, and maybe the tuple instance is even the binary product, though I didn't check. Thanks!</p>",
        "id": 245780620,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1626153682
    },
    {
        "content": "<p>It feels like <a href=\"https://leanprover-community.github.io/mathlib_docs/control/traversable/basic.html#traversable\">traversable</a> but I might be misunderstanding your goal.</p>",
        "id": 245781139,
        "sender_full_name": "Chris B",
        "timestamp": 1626154352
    },
    {
        "content": "<p>Oh great, that does look like what I want. Thanks!</p>",
        "id": 245782154,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1626155762
    }
]