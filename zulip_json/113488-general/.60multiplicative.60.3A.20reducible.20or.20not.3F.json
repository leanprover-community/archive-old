[
    {
        "content": "<p>I started playing with the possibility to make <code>multiplicative</code> irreducible. What pros and cons I see:</p>\n<ul>\n<li>without <code>irreducible</code> it's much easier to define structures / transport theorems;</li>\n<li>with <code>irreducible</code> it should be easier to deal with specific types like <code>multiplicative nat</code> without guessing \"does this <code>*</code> mean multiplication or addition?\"</li>\n</ul>\n<p>Another possibility is to define <code>to_mul</code>, <code>of_mul</code>, <code>to_add</code>, <code>of_add</code>, use them in definitions but don't make type tags irreducible.</p>\n<p>What do you think? Will it work?</p>",
        "id": 192215609,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585549912
    },
    {
        "content": "<p>The reason I originally wrote <code>multiplicative</code> was so that I could do proofs like this one from <code>group_power</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">pow_mul_comm&#39;</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"err\">^</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"err\">^</span><span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">smul_add_comm&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">n</span><span class=\"err\">•</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"err\">•</span><span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"bp\">@</span><span class=\"n\">pow_mul_comm&#39;</span> <span class=\"o\">(</span><span class=\"n\">multiplicative</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">_</span>\n</pre></div>",
        "id": 192215708,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585550014
    },
    {
        "content": "<p>making <code>multiplicative</code> irreducible will break this proof</p>",
        "id": 192215722,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585550032
    },
    {
        "content": "<p>Note that this is a more efficient way to transfer theorems than what <code>to_additive</code> does, which is to translate the entire proof</p>",
        "id": 192215804,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585550098
    },
    {
        "content": "<p>this is much closer to what the mathematician would expect; we are applying one theorem to prove the other</p>",
        "id": 192215820,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585550126
    },
    {
        "content": "<p>(The reason making <code>multiplicative</code> irreducible would break this is because we are translating a forall statement; the target theorem has <code>\\all (a:A)</code> and the theorem being applied has <code>\\all (a:multiplicative A)</code>, so unless <code>A</code> is defeq to <code>multiplicative A</code> this will fail to unify. In that case, we would have to apply a theorem about transferring a forall quantifier a la <code>rel_forall_of_total</code>, and at that point nothing is defeq anymore so you need a tactic to orchestrate the whole thing.)</p>",
        "id": 192216045,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585550373
    },
    {
        "content": "<p>OK, I'm not making it irreducible (at least for now).</p>",
        "id": 192216254,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585550589
    },
    {
        "content": "<p>That said, this is a rather specific use case, and I don't mind having to be more explicit in order to use <code>multiplicative</code> in this way. I think we might need to hack lean to make this work, but it would be nice if there was a <code>exact_unfolding_irreducible</code> tactic that bypasses the elaborator</p>",
        "id": 192216266,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585550609
    },
    {
        "content": "<p>As far as I understand, the fact that <code>multiplicative</code> is not irreducible stopped <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> from using <code>polynomial R := monoid_algebra R (multiplicative nat)</code> instead of <code>polynomial R := add_monoid_algebra R nat</code>.</p>",
        "id": 192216469,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585550877
    },
    {
        "content": "<p>Probably we should just create an irreducible <code>nat* := multiplicative nat</code>.</p>",
        "id": 192216551,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585550924
    },
    {
        "content": "<p>with <code>mnat.of_nat</code>, <code>mnat.to_nat</code> and <code>simp</code> lemmas.</p>",
        "id": 192216632,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585551014
    },
    {
        "content": "<p>This way there will be no collision between to multiplications on <code>multiplicative nat</code>.</p>",
        "id": 192216652,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585551058
    },
    {
        "content": "<p><code>multiplicative nat</code> does seem to come up a lot</p>",
        "id": 192216774,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585551208
    },
    {
        "content": "<p>I haven't heard people try to make anything else multiplicative</p>",
        "id": 192216783,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585551226
    },
    {
        "content": "<p><code>mv_polynomial</code> is the monoid algebra of <code>multiplicative (multiset α)</code> (a.k.a. <code>free_comm_monoid α</code>).</p>",
        "id": 192216898,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585551342
    },
    {
        "content": "<p>why not have <code>monoid_algebra</code> take an <code>add_monoid</code>?</p>",
        "id": 192216987,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585551411
    },
    {
        "content": "<p>I mean, it's supposed to be pretending to be exponents with addition anyway, right?</p>",
        "id": 192217024,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585551473
    },
    {
        "content": "<p>I prefer to think about it as the monoid of allowed monomials.</p>",
        "id": 192217097,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585551503
    },
    {
        "content": "<p>Then <code>aeval</code> (and <code>eval₂</code>) for an <code>mv_polynomial</code> means the following: first you lift <code>g : σ → M</code> to <code>g' : free_comm_monoid σ →* M</code>, then lift it to an algebra homomorphism.</p>",
        "id": 192217238,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585551610
    },
    {
        "content": "<p>The last step is much more natural if you don't care about the monoid of allowed monomials.</p>",
        "id": 192217277,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585551660
    },
    {
        "content": "<p>E.g., it will work for quasi-polynomials with monomials <code>x^ne^{ax}</code>.</p>",
        "id": 192217329,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585551705
    },
    {
        "content": "<p>Can we make it <code>irreducible</code> and then locally make it <code>semireducible</code> when we make definitions like Mario's <code>smul_add_monoid</code> example?</p>",
        "id": 192217330,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585551706
    },
    {
        "content": "<p>More-or-less we want it to be semireducible whenever we transfer definitions / theorems and irreducible whenever we deal with specific types.</p>",
        "id": 192217430,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585551774
    },
    {
        "content": "<p>Don't know how to achieve this.</p>",
        "id": 192217437,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585551783
    },
    {
        "content": "<p>Transferring definitions / theorems happens in bounded parts of files. Whereas applying it to specific types is the \"generic\" usage. (Even though the applications might be fewer in number.)</p>",
        "id": 192217538,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585551866
    },
    {
        "content": "<p>So I would make it <code>irreducible</code> by default, and then make it semireducible in every basic file that uses it to transfer stuff.</p>",
        "id": 192217565,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585551898
    },
    {
        "content": "<p>But maybe this is idealistic daydreaming.</p>",
        "id": 192217576,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585551906
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> What do you think? Would it work?</p>",
        "id": 192217693,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585552003
    },
    {
        "content": "<p>does that actually work? I've never tried</p>",
        "id": 192217731,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585552034
    },
    {
        "content": "<p>I can try.</p>",
        "id": 192217749,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585552051
    },
    {
        "content": "<p>Seems to work</p>",
        "id": 192218220,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585552436
    },
    {
        "content": "<p>Partial success...</p>",
        "id": 192218337,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585552542
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/.60multiplicative.60.3A.20reducible.20or.20not.3F/near/192216987\" title=\"#narrow/stream/113488-general/topic/.60multiplicative.60.3A.20reducible.20or.20not.3F/near/192216987\">said</a>:</p>\n<blockquote>\n<p>why not have <code>monoid_algebra</code> take an <code>add_monoid</code>?</p>\n</blockquote>\n<p>The group ring <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi><mo stretchy=\"false\">[</mo><mi>G</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">k[G]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">G</span><span class=\"mclose\">]</span></span></span></span> is an essential example of a monoid algebra, which we need to do representation theory, and for which the monoid is certainly multiplicative (and probably non-commutative).</p>",
        "id": 192218582,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585552709
    },
    {
        "content": "<p>I don't know why everyone thinks it's so important that add_monoids be commutative</p>",
        "id": 192218856,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585552885
    },
    {
        "content": "<p>it's a group. with a + notation. get over it</p>",
        "id": 192218887,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585552913
    },
    {
        "content": "<p>it would have saved most of the <code>to_additive</code> work</p>",
        "id": 192218953,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585552937
    },
    {
        "content": "<p><code>monoid_algebra R M</code> takes a multiplicative monoid <code>M</code>, and returns an algebra over <code>R</code>.</p>",
        "id": 192219043,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585552997
    },
    {
        "content": "<p>Mario, in the group algebra you want <code>a * (g * h) = (a * g) * h</code>. The <code>(g * h)</code> is multiplication in the monoid.</p>",
        "id": 192219050,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585553004
    },
    {
        "content": "<p>You also want <code>a * (g + h) = a * g + a * h</code>, but now the <code>+</code> is addition in the algebra.</p>",
        "id": 192219160,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585553060
    },
    {
        "content": "<p>meh, I have high tolerance for that kind of notational dissonance if it means proofs get shorter</p>",
        "id": 192219163,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585553064
    },
    {
        "content": "<p>Here is what fails: <a href=\"https://github.com/leanprover-community/mathlib/runs/544653780\" title=\"https://github.com/leanprover-community/mathlib/runs/544653780\">https://github.com/leanprover-community/mathlib/runs/544653780</a></p>",
        "id": 192219198,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585553091
    },
    {
        "content": "<p>I define structure on <code>with_top</code> using <code>local attribute [semireducible] multiplicative additive</code>, then it failes to find <code>a + _</code> once section is closed.</p>",
        "id": 192219270,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585553145
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 192219355,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585553224
    },
    {
        "content": "<p>your replacement proof is not correct</p>",
        "id": 192219379,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585553257
    },
    {
        "content": "<p>The original proof didn't work too.</p>",
        "id": 192219440,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585553285
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>  lemma with_top.add_lt_add_iff_right\n    {a b c : with_top α} : a &lt; ⊤ → (c + a &lt; b + a ↔ c &lt; b) :=\n<span class=\"gd\">- by simpa [add_comm] using @with_top.add_lt_add_iff_left _ _ a b c</span>\n<span class=\"gi\">+ have _ := @with_top.add_lt_add_iff_left _ _ a b c,</span>\n<span class=\"gi\">+ by rwa [add_comm a] at this</span>\n</pre></div>",
        "id": 192219441,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585553285
    },
    {
        "content": "<p>you need to rewrite twice</p>",
        "id": 192219450,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585553297
    },
    {
        "content": "<p>It fails to rewrite even once</p>",
        "id": 192219458,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585553306
    },
    {
        "content": "<p>it's looking for <code>a + ?</code> but the goal has <code>c + a</code> and <code>b + a</code></p>",
        "id": 192219534,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585553352
    },
    {
        "content": "<p>It's rewriting at this</p>",
        "id": 192219573,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585553385
    },
    {
        "content": "<p>oh wait, nvm</p>",
        "id": 192219576,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585553389
    },
    {
        "content": "<p>what's the problem then? It's not an <code>add_comm_semigroup</code> so I don't see why <code>add_comm</code> should work</p>",
        "id": 192219707,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585553464
    },
    {
        "content": "<p>I'm a little confused at your setup</p>",
        "id": 192219731,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585553490
    },
    {
        "content": "<p>how is <code>multiplicative</code> involved here?</p>",
        "id": 192219887,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585553591
    },
    {
        "content": "<p><code>add_monoid</code> structure on <code>with_top α</code> is defined using a dirty trick.</p>",
        "id": 192219935,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585553626
    },
    {
        "content": "<p>is the dirty trick getting unfolded here?</p>",
        "id": 192220039,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585553682
    },
    {
        "content": "<p>More precisely: <code>add</code> and <code>zero</code> fields are provided explicitly, but the proofs come from <code>with_zero.semigroup</code> etc.</p>",
        "id": 192220117,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585553741
    },
    {
        "content": "<p>Same file, around line 220</p>",
        "id": 192220130,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585553753
    },
    {
        "content": "<p>I think this instance is wrong:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"o\">[</span><span class=\"n\">add_comm_semigroup</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_semigroup</span> <span class=\"o\">(</span><span class=\"n\">with_top</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"bp\">..@</span><span class=\"n\">additive</span><span class=\"bp\">.</span><span class=\"n\">add_comm_semigroup</span> <span class=\"bp\">_</span> <span class=\"err\">$</span>\n    <span class=\"bp\">@</span><span class=\"n\">with_zero</span><span class=\"bp\">.</span><span class=\"n\">comm_semigroup</span> <span class=\"o\">(</span><span class=\"n\">multiplicative</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"o\">}</span>\n</pre></div>",
        "id": 192220212,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585553779
    },
    {
        "content": "<p>It should be like the monoid instance after it</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_monoid</span> <span class=\"o\">(</span><span class=\"n\">with_top</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">+</span><span class=\"o\">),</span>\n  <span class=\"bp\">..@</span><span class=\"n\">additive</span><span class=\"bp\">.</span><span class=\"n\">add_comm_monoid</span> <span class=\"bp\">_</span> <span class=\"err\">$</span>\n    <span class=\"bp\">@</span><span class=\"n\">with_zero</span><span class=\"bp\">.</span><span class=\"n\">comm_monoid</span> <span class=\"o\">(</span><span class=\"n\">multiplicative</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"o\">}</span>\n</pre></div>",
        "id": 192220244,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585553800
    },
    {
        "content": "<p>that way, when the instance gets unfolded you get <code>0</code> and <code>+</code> instead of <code>@1 (multiplicative _)</code></p>",
        "id": 192220287,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585553832
    },
    {
        "content": "<p>Thank you!!</p>",
        "id": 192220313,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585553858
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> said:</p>\n<blockquote>\n<p>I don't know why everyone thinks it's so important that add_monoids be commutative</p>\n</blockquote>\n<p>This is about notation. Mathematicians have got a highly sophisticated notational set-up with various conventions many of which you have never even seen because they are domain specific -- and some of which conflict with each other ( eg <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>π</mi></mrow><annotation encoding=\"application/x-tex\">\\pi</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">π</span></span></span></span> is a projection for an algebraic geometer and a real number for a harmonic analyst). Ordinals are not part of \"generic mathematics\" (my current attempt at the description of analysis, topology, geometry etc) and this is the only reason that addition is allowed to be noncommutative in this case -- because we don't care what logicians want to do with ordinals. Addition is commutative by universal convention (or domain convention where the domain is generic mathematics) and it's an extremely useful one from where I'm sitting even if it gets in the way of foundational set-ups. That's why addition is commutative, because it's useful.</p>",
        "id": 192224744,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585556745
    },
    {
        "content": "<p>We're also writing in unicode and not rendered latex. Sometimes you have to make concessions to the machine</p>",
        "id": 192224837,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585556812
    },
    {
        "content": "<p>there are a hundred ways lean falls short of human maths</p>",
        "id": 192224909,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585556862
    },
    {
        "content": "<p>to me, using <code>+</code> for groups is the least of my worries</p>",
        "id": 192224979,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585556891
    },
    {
        "content": "<p>It causes troubles when you have both <code>+</code> and <code>*</code>, or even worse two <code>*</code> (one from <code>multiplicative</code>, one from original semiring).</p>",
        "id": 192225035,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585556944
    },
    {
        "content": "<p>Rings are a thing</p>",
        "id": 192225052,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585556959
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 192225104,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585556988
    },
    {
        "content": "<p>fixed</p>",
        "id": 192225163,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585557007
    },
    {
        "content": "<p>I maintain that the to_additive problem would be a lot simpler if group theory were done with <code>+</code> and <code>ring A</code> extended <code>group A</code> and <code>monoid (multiplicative A)</code></p>",
        "id": 192225267,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585557092
    },
    {
        "content": "<p>unfortunately it's tricky to make this kind of setup work in lean</p>",
        "id": 192225295,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585557114
    },
    {
        "content": "<p>Then you'd have two conflicting monoid structures on equal types</p>",
        "id": 192225404,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585557178
    },
    {
        "content": "<p>Is that ok?</p>",
        "id": 192225418,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585557185
    },
    {
        "content": "<p>they are different types</p>",
        "id": 192225428,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585557191
    },
    {
        "content": "<p>Sure but they're <code>eq</code> aren't they?</p>",
        "id": 192225445,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585557207
    },
    {
        "content": "<p>You will certainly need to be able to transport terms from one to the other</p>",
        "id": 192225534,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585557245
    },
    {
        "content": "<p>It could be a newtype or irreducible synonym like Yury suggested</p>",
        "id": 192225596,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585557293
    },
    {
        "content": "<p>and then you would define <code>a * b = of_mult (to_mult a + to_mult b)</code></p>",
        "id": 192225679,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585557346
    },
    {
        "content": "<p>Then you need to transfer all group theory to this <code>(*)</code>.</p>",
        "id": 192225782,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585557399
    },
    {
        "content": "<p>not all of it, just the calculational lemmas</p>",
        "id": 192226000,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585557571
    },
    {
        "content": "<p>and you can limit yourself to rings</p>",
        "id": 192226103,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585557603
    },
    {
        "content": "<p>or whatever the weakest +/* structure is</p>",
        "id": 192226116,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585557615
    },
    {
        "content": "<p>semirings</p>",
        "id": 192226126,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585557620
    },
    {
        "content": "<p>(I'm actually just describing how this is done in metamath)</p>",
        "id": 192226163,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585557650
    },
    {
        "content": "<p>you don't need the of_mult and to_mult functions there though, which makes the theorems a literal application of the corresponding group theorem</p>",
        "id": 192226258,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585557704
    },
    {
        "content": "<p>much like the <code>@foo (multiplicative _)</code> transfer theorems I mentioned at the start</p>",
        "id": 192226364,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585557776
    },
    {
        "content": "<p>Can <code>structure ... extends</code> rename fields?</p>",
        "id": 192226487,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585557870
    },
    {
        "content": "<p>that's a good question. I was going to say no but I recall <code>renaming</code> coming up somewhere</p>",
        "id": 192226522,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585557902
    },
    {
        "content": "<p>Using an \"old style\" structure, it is trivial to do so since you are unpacking all the fields and reassembling them</p>",
        "id": 192226629,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585557967
    },
    {
        "content": "<p>but I think right now lean always tries to merge fields with the same name</p>",
        "id": 192226652,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585557994
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/113488-general/topic/.60multiplicative.60.3A.20reducible.20or.20not.3F/near/192215609\" title=\"#narrow/stream/113488-general/topic/.60multiplicative.60.3A.20reducible.20or.20not.3F/near/192215609\">said</a>:</p>\n<blockquote>\n<p>I started playing with the possibility to make <code>multiplicative</code> irreducible. What pros and cons I see:</p>\n</blockquote>\n<p>Another pro of making <code>multiplicative</code> irreducible is that the current <code>multiplicative</code> setup (and also <code>order_dual</code>) causes lots of issues with typeclasses (we've had to remove a lot of instances for <code>multiplicative</code> in the 3.7 migration because they loop) and the simplifier (e.g. <a href=\"https://github.com/leanprover-community/mathlib/issues/2026\" title=\"https://github.com/leanprover-community/mathlib/issues/2026\">#2026</a>).  The common theme is that with <code>multiplicative</code>, you ask Lean one the hand to treat a term <code>a : α</code> as having the type <code>multiplicative α</code> while on the other hand rely on Lean not to unify <code>α</code> and <code>multiplicative α</code>.  This seems to be mutually exclusive in practice.<br>\nEven if <code>multiplicative</code> is not made irreducible, at the very least we should use explicit coercions from <code>α</code> to <code>multiplicative α</code>, so that the terms type-check without unfolding <code>multiplicative</code>.</p>",
        "id": 192226794,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1585558096
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">structure</span> <span class=\"n\">ring2</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"n\">monoid</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">group</span> <span class=\"o\">(</span><span class=\"n\">multiplicative</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"kn\">renaming</span> <span class=\"n\">mul</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">add&#39;</span> <span class=\"n\">mul_assoc</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">add_assoc&#39;</span> <span class=\"n\">one</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">zero&#39;</span> <span class=\"n\">one_mul</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">zero_add&#39;</span> <span class=\"n\">mul_one</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">add_zero&#39;</span>\n</pre></div>\n\n\n<p>compiles. Didn't try to use it.</p>",
        "id": 192227010,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585558235
    },
    {
        "content": "<p>It's <code>add'</code> because <code>add x y = of_mult (add' (to_mult x) (to_mult y))</code></p>",
        "id": 192227239,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585558385
    },
    {
        "content": "<p>What are the downsides of this approach?</p>",
        "id": 192227366,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585558452
    },
    {
        "content": "<p>Probably the defeq for <code>add'</code> is not nice in concrete situations</p>",
        "id": 192227805,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585558718
    },
    {
        "content": "<p>Could you please explain?</p>",
        "id": 192228410,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585559115
    },
    {
        "content": "<p>When giving a ring structure on e.g. <code>int</code>, you will have to provide <code>add'</code>, which you will presumably do like <code>add' := \\fun mx my, to_mult (int.add mx.1 my.1)</code>. Now <code>add x y</code> will be <code>of_mult (to_mult (int.add (to_mult x).1 (to_mult y).1))</code> which is defeq to <code>of_mult (to_mult (int.add x y))</code></p>",
        "id": 192228774,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585559357
    },
    {
        "content": "<p>as long as both <code>of_mult (to_mult x) = x</code> and <code>to_mult (of_mult x) = x</code> are defeq it works out, but a newtype structure doesn't have that</p>",
        "id": 192228889,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585559412
    }
]