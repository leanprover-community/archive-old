[
    {
        "content": "<p>I'm going to have a summer student working with me on group theory and I wondered whether Sylow 2 and 3 was accessible to them. Talking to <span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> he seemed to think that a useful prerequisite would be a noncomputable <code>card</code> function which sent infinite types to 0, and claimed that this was <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> 's idea. Does this sound like a sensible thing? I guess that if I were to write it I'd do it in June, because I'd need it by July. I already have bundled normal subgroups and adding metric space examples to Patrick's tutorial project on my Lean pile, plus two more grant applications, so it's unlikely it will happen before then, but I thought I'd run it past the community in case anyone had any comments or tips.</p>",
        "id": 196100903,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588508688
    },
    {
        "content": "<p>It should be easy work</p>",
        "id": 196101259,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588509191
    },
    {
        "content": "<p>you will have a lot of finiteness assumptions though in the theorems, because that <code>0</code> garbage case will mess up the algebra</p>",
        "id": 196101350,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588509296
    },
    {
        "content": "<p>What about an <code>enat</code>-valued <code>card</code>?</p>",
        "id": 196101594,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588509654
    },
    {
        "content": "<p>I like that version the best if we ignore typing problems</p>",
        "id": 196102180,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588510447
    },
    {
        "content": "<p>it's not clear to me how important it is that the value be a nat</p>",
        "id": 196102186,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588510463
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> would an <code>enat</code>-valued version be good enough for applications to Sylow 2/3?</p>",
        "id": 196102188,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588510482
    },
    {
        "content": "<p>Is there a <code>enat.to_nat</code> function? We could compose through that when necessary</p>",
        "id": 196102190,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588510488
    },
    {
        "content": "<p>You can still use the enat version for a predicate like <code>card A = enat.of_nat n</code></p>",
        "id": 196102206,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588510531
    },
    {
        "content": "<p>which asserts both finiteness and a particular cardinality without a <code>fintype</code> assumption</p>",
        "id": 196102221,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588510560
    },
    {
        "content": "<p>enat would be hideous for group theory because you're always raising to the power of the cardinality, and multiplying the cardinality etc.</p>",
        "id": 196102269,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1588510599
    },
    {
        "content": "<p>would those theorems work with a predicate like I gave?</p>",
        "id": 196102281,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588510632
    },
    {
        "content": "<p>you have an assumption <code>card A = (n : nat)</code> and then use <code>n</code> in the theorem</p>",
        "id": 196102291,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588510660
    },
    {
        "content": "<p>Probably they would. Multiplicity was really bad, because I didn't state theorems like that.</p>",
        "id": 196102810,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1588511492
    },
    {
        "content": "<p>Why would you need an <code>enat</code> valued <code>card</code> for such predicates?</p>",
        "id": 196103029,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588511764
    },
    {
        "content": "<p>Wouldn't the cardinal-valued version suffice?</p>",
        "id": 196103032,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588511777
    },
    {
        "content": "<p>You don't need to import <code>set_theory.cardinal</code> to define the <code>enat</code> version</p>",
        "id": 196103384,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588512268
    },
    {
        "content": "<p>Are imports really that bad?</p>",
        "id": 196103457,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1588512371
    },
    {
        "content": "<p>In Lean 2, we had a nonconstructive cast from <code>set</code> to <code>finset</code> which mapped any infinite set to the empty set. So we had <code>set.card s = finset.card (s.to_finset)</code>. The cardinality of the empty set still comes out to zero, and it is easy to translate <code>finset</code> theorems (e.g. about <code>card</code> and <code>sum</code>) to <code>set</code> theorems. </p>\n<p>The advantage to having <code>card</code> and <code>sum</code> map infinite sets to <code>0</code> is that lots of identities hold without preconditions. It makes it much more convenient to work with them. Isabelle follows that approach as well.</p>",
        "id": 196133036,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1588556268
    }
]