[
    {
        "content": "<p>Hey, I'm wondering about the following</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.finsupp.basic</span>\n\n<span class=\"kn\">section</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">@[derive decidable_eq]</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">vars</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">vars</span>\n<span class=\"bp\">|</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">vars</span>\n<span class=\"bp\">|</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">vars</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"bp\">Â¬</span><span class=\"o\">(</span><span class=\"n\">finsupp.single</span> <span class=\"n\">vars.Y</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">finsupp.single</span> <span class=\"n\">vars.X</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"c1\">-- rw finsupp.single_eq_single_iff,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">dec_trivial</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>If I uncomment the <code>single_eq_single_iff</code>, then it works fine. But <code>finsupp.decidable_eq</code> should be derivable, since both <code>vars</code> and <code>nat</code> have <code>decidable_eq</code>. So how do I get the above to work without using <code>single_eq_single_iff</code>?</p>",
        "id": 226221238,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1613183217
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/finsupp.single\">docs#finsupp.single</a> uses classical decidability on its domain (vars),</p>",
        "id": 226221322,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613183366
    },
    {
        "content": "<p>Which dec_trivial can't use</p>",
        "id": 226221327,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613183380
    },
    {
        "content": "<p>Ok, then is it ever possible to use decidability to prove equivalence of two <code>finsupps</code>? Can I define my own single for decidable domain types for which the above lemma will work? Is there some way of telling the existing <code>single</code> to avoid using classical decidability and just use the decidability instance that is derived?</p>\n<p>It seems to me it shouldn't matter how <code>single</code> is defined - it returns a finsupp with decidable domain and decidable range so it should be decidable to determine if two of them are equal.</p>",
        "id": 226223306,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1613186393
    },
    {
        "content": "<p>This used to be the design, but it requires a <code>[decidable_eq]</code> argument in the definition of <code>single</code> and many other operations on finsupp, and these arguments can get in the way when you are doing proofs, so now finsupps are entirely classical. You can of course implement your own version of <code>single</code> that is decidable - you can even just copy-paste the definition and insert the requisite <code>[decidable_eq]</code> typeclass argument, and then the above calculation will work</p>",
        "id": 226231577,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613200382
    },
    {
        "content": "<p>Meanwhile, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/dfinsupp\">docs#dfinsupp</a> still has the decidability assumption present</p>",
        "id": 226236667,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613209287
    }
]