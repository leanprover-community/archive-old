[
    {
        "content": "<p>Is it possible to use rw with an iff theorem? I'm getting an error when I try to use it.</p>",
        "id": 267373029,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1641756088
    },
    {
        "content": "<p>Yes, <code>rw</code> can rewrite using iffs and equalities. It would be helpful if you posted a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> for this.</p>",
        "id": 267373075,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1641756157
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">order.filter.partial</span>\n<span class=\"kn\">import</span> <span class=\"n\">order.filter.ultrafilter</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.support</span>\n\n<span class=\"kd\">noncomputable theory</span>\n<span class=\"kn\">open</span> <span class=\"n\">set</span> <span class=\"n\">function</span> <span class=\"n\">filter</span> <span class=\"n\">classical</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span> <span class=\"n\">filter</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">ultrafilter_comap_ne_bot</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">𝒱</span> <span class=\"o\">:</span> <span class=\"n\">ultrafilter</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">A</span> <span class=\"bp\">∈</span> <span class=\"bp\">𝒱</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">comap</span> <span class=\"n\">f</span> <span class=\"bp\">𝒱</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">ne_bot</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">filter.forall_mem_nonempty_iff_ne_bot</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 267373167,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1641756252
    },
    {
        "content": "<p>Rewrite it in the other direction:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">filter.forall_mem_nonempty_iff_ne_bot</span>\n</code></pre></div>",
        "id": 267373192,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1641756318
    },
    {
        "content": "<p>Ah, it works. I remember trying that and it gave me an error. Weird.</p>",
        "id": 267373258,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1641756428
    },
    {
        "content": "<p>So now I have this, and it's giving me an error that I don't know how to fix:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">order.filter.partial</span>\n<span class=\"kn\">import</span> <span class=\"n\">order.filter.ultrafilter</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.support</span>\n\n<span class=\"kd\">noncomputable theory</span>\n<span class=\"kn\">open</span> <span class=\"n\">set</span> <span class=\"n\">function</span> <span class=\"n\">filter</span> <span class=\"n\">classical</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span> <span class=\"n\">filter</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">ultrafilter_comap_ne_bot</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">𝒱</span> <span class=\"o\">:</span> <span class=\"n\">ultrafilter</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">A</span> <span class=\"bp\">∈</span> <span class=\"bp\">𝒱</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">comap</span> <span class=\"n\">f</span> <span class=\"bp\">𝒱</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">ne_bot</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">filter.forall_mem_nonempty_iff_ne_bot</span><span class=\"o\">,</span>\n  <span class=\"k\">assume</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n  <span class=\"k\">assume</span> <span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">∈</span> <span class=\"n\">comap</span> <span class=\"n\">f</span> <span class=\"bp\">𝒱</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">A</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">nonempty</span> <span class=\"o\">:=</span> <span class=\"n\">ultrafilter.nonempty_of_mem</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 267373428,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1641756698
    },
    {
        "content": "<p>Ah, I guess it's because the A I'm using is not the same A from the statement of the lemma.</p>",
        "id": 267373565,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1641756858
    },
    {
        "content": "<p>Proving this is giving me more trouble that I thought. This is the proof that I want to write in Lean:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Since</span> <span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">A</span> <span class=\"bp\">∈</span> <span class=\"bp\">𝒱</span><span class=\"o\">,</span> <span class=\"k\">then</span> <span class=\"n\">for</span> <span class=\"n\">every</span> <span class=\"n\">V</span> <span class=\"bp\">∈</span> <span class=\"bp\">𝒱</span><span class=\"o\">,</span> <span class=\"n\">we</span> <span class=\"k\">have</span> <span class=\"n\">that</span> <span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">A</span> <span class=\"bp\">∩</span> <span class=\"n\">V</span> <span class=\"bp\">≠</span> <span class=\"bp\">Ø</span><span class=\"o\">,</span> <span class=\"n\">hence</span> <span class=\"n\">f</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">V</span> <span class=\"bp\">≠</span> <span class=\"bp\">Ø</span><span class=\"o\">,</span> <span class=\"n\">hence</span> <span class=\"bp\">Ø</span> <span class=\"bp\">∉</span> <span class=\"n\">comap</span> <span class=\"n\">f</span> <span class=\"bp\">𝒱</span> <span class=\"o\">,</span> <span class=\"n\">hence</span> <span class=\"n\">comap</span> <span class=\"n\">f</span> <span class=\"bp\">𝒱.</span><span class=\"n\">ne_bot</span>\n</code></pre></div>",
        "id": 267373855,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1641757276
    },
    {
        "content": "<p>Hmm... I think I need an extra condition: <code>nonempty A</code>.</p>",
        "id": 267374336,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1641757970
    },
    {
        "content": "<p>This doesn't seem to be true: \"since <code>f '' A ∩ V ≠ Ø</code> then <code>f ⁻¹' V ≠ Ø</code>\". If <code>f</code> is surjective, for example, it would be.</p>",
        "id": 267374518,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1641758237
    },
    {
        "content": "<p>Doesn't the a in A work?</p>",
        "id": 267374535,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1641758281
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">ultrafilter_comap_ne_bot</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">𝒱</span> <span class=\"o\">:</span> <span class=\"n\">ultrafilter</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">A</span> <span class=\"bp\">∈</span> <span class=\"bp\">𝒱</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">comap</span> <span class=\"n\">f</span> <span class=\"bp\">𝒱</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">ne_bot</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">comap_ne_bot</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">U</span> <span class=\"n\">U_in</span><span class=\"o\">,</span>\n  <span class=\"n\">rcases</span> <span class=\"o\">(</span><span class=\"n\">ultrafilter.nonempty_of_mem</span> <span class=\"bp\">$</span> <span class=\"n\">inter_mem</span> <span class=\"n\">h</span> <span class=\"n\">U_in</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"bp\">-</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span> <span class=\"n\">h'</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">tauto</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 267374621,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1641758381
    },
    {
        "content": "<p>If you want to put this in mathlib then you should fix the binders, something like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">ultrafilter.comap_ne_bot</span> <span class=\"o\">(</span><span class=\"bp\">𝒱</span> <span class=\"o\">:</span> <span class=\"n\">ultrafilter</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">}</span>  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">A</span> <span class=\"bp\">∈</span> <span class=\"bp\">𝒱</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">comap</span> <span class=\"n\">f</span> <span class=\"bp\">𝒱</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">ne_bot</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">comap_ne_bot</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">U</span> <span class=\"n\">U_in</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">rcases</span> <span class=\"o\">(</span><span class=\"n\">filter.nonempty_of_mem</span> <span class=\"bp\">$</span> <span class=\"n\">inter_mem</span> <span class=\"n\">h</span> <span class=\"n\">U_in</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"bp\">-</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span> <span class=\"n\">h</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 267375236,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1641758933
    },
    {
        "content": "<p>And of course it has nothing to do with ultrafilters so you should put in the basic filter file defining comap as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">filter.comap_ne_bot_of_image_mem</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">Y</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ne_bot</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">A</span> <span class=\"bp\">∈</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span>  <span class=\"o\">(</span><span class=\"n\">comap</span> <span class=\"n\">f</span> <span class=\"n\">F</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">ne_bot</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">comap_ne_bot</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">U</span> <span class=\"n\">U_in</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">rcases</span> <span class=\"o\">(</span><span class=\"n\">filter.nonempty_of_mem</span> <span class=\"bp\">$</span> <span class=\"n\">inter_mem</span> <span class=\"n\">h</span> <span class=\"n\">U_in</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"bp\">-</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span> <span class=\"n\">h</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 267375343,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1641759065
    },
    {
        "content": "<p>And then, having reached this state, you'll realize it's already there.</p>",
        "id": 267375424,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1641759137
    },
    {
        "content": "<p>Aha. Nice find. There's so many of this little lemmas, I get lost trying to find what I need, especially when I have to jump between the filter and ultrafilter stuff.</p>",
        "id": 267375825,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1641759661
    },
    {
        "content": "<p>I'm trying to use it in this bigger lemma, but it doesn't work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">order.filter.partial</span>\n<span class=\"kn\">import</span> <span class=\"n\">order.filter.ultrafilter</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.support</span>\n\n<span class=\"kd\">noncomputable theory</span>\n<span class=\"kn\">open</span> <span class=\"n\">set</span> <span class=\"n\">function</span> <span class=\"n\">filter</span> <span class=\"n\">classical</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span> <span class=\"n\">filter</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">ultrafilter_comap_set</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">𝒱</span> <span class=\"o\">:</span> <span class=\"n\">ultrafilter</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">A</span> <span class=\"bp\">∈</span> <span class=\"bp\">𝒱</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"bp\">∃</span> <span class=\"bp\">𝒰</span> <span class=\"o\">:</span> <span class=\"n\">ultrafilter</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"bp\">𝒰.</span><span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"bp\">𝒱</span> <span class=\"bp\">∧</span> <span class=\"n\">A</span> <span class=\"bp\">∈</span> <span class=\"bp\">𝒰</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">ℱ</span> <span class=\"o\">:=</span> <span class=\"n\">comap</span> <span class=\"n\">f</span> <span class=\"bp\">𝒱</span><span class=\"o\">,</span>\n  <span class=\"n\">haveI</span> <span class=\"o\">:</span> <span class=\"n\">ℱ.ne_bot</span> <span class=\"o\">:=</span> <span class=\"n\">filter.comap_ne_bot_of_image_mem</span> <span class=\"bp\">𝒱.</span><span class=\"n\">ne_bot</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"bp\">𝒰</span> <span class=\"o\">:=</span> <span class=\"n\">ultrafilter.of</span> <span class=\"n\">ℱ</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"bp\">𝒰</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">𝒰.</span><span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"bp\">𝒱</span><span class=\"o\">,</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">∈</span> <span class=\"bp\">𝒰</span><span class=\"o\">,</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">and.intro</span> <span class=\"n\">h</span> <span class=\"n\">h'</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 267376239,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1641760234
    },
    {
        "content": "<p><code>unknown identifier 'filter.comap_ne_bot_of_image_mem'</code> is the error.</p>",
        "id": 267376331,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1641760378
    },
    {
        "content": "<p>Oops. It's called filter.ne_bot.comap_of_image_mem. Haha.</p>",
        "id": 267376419,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1641760515
    }
]