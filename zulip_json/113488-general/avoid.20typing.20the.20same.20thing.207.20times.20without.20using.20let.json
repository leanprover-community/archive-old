[
    {
        "content": "<p>I've just figured a way to avoid typing the same thing 7 times without using let:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">test</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"mi\">123456789</span>\n</pre></div>",
        "id": 193371972,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586376380
    },
    {
        "content": "<p>I think <code>have</code> is actually syntax for this</p>",
        "id": 193372900,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586376946
    },
    {
        "content": "<p>but <code>have</code> doesn't remember definition</p>",
        "id": 193373944,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586377524
    },
    {
        "content": "<p>this is a way to have abbreviations without breaking anything (if you use <code>let</code>, you'll have a hard time working in tactic mode)</p>",
        "id": 193374001,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586377557
    },
    {
        "content": "<p>What can you do with this that you can't do with a let?</p>",
        "id": 193375666,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1586378376
    },
    {
        "content": "<p>you can substitute this easily using beta reduction, which is automatically performed by many tactics</p>",
        "id": 193376043,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586378587
    },
    {
        "content": "<p>my personal experience tells me that <code>let</code> is hard to work with</p>",
        "id": 193376111,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586378632
    },
    {
        "content": "<p>If you use <code>let</code> and then go into tactic mode then sometimes your goals come out really kooky.</p>",
        "id": 193376438,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586378840
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110064\">Kenny Lau</span> <a href=\"#narrow/stream/113488-general/topic/avoid.20typing.20the.20same.20thing.207.20times.20without.20using.20let/near/193373944\" title=\"#narrow/stream/113488-general/topic/avoid.20typing.20the.20same.20thing.207.20times.20without.20using.20let/near/193373944\">said</a>:</p>\n<blockquote>\n<p>but <code>have</code> doesn't remember definition</p>\n</blockquote>\n<p><code>set</code> can work too AFAIK</p>",
        "id": 193377424,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1586379372
    },
    {
        "content": "<p>I'm not abbreviating in the middle of a proof. It's in the definition of some data.</p>",
        "id": 193377525,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586379427
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110026\">Simon Hudon</span> <a href=\"#narrow/stream/113488-general/topic/avoid.20typing.20the.20same.20thing.207.20times.20without.20using.20let/near/193375666\" title=\"#narrow/stream/113488-general/topic/avoid.20typing.20the.20same.20thing.207.20times.20without.20using.20let/near/193375666\">said</a>:</p>\n<blockquote>\n<p>What can you do with this that you can't do with a let?</p>\n</blockquote>\n<p>to be more specific:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">test</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"mi\">123456789</span>\n\n<span class=\"n\">def</span> <span class=\"n\">test&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"k\">let</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"mi\">123456789</span> <span class=\"k\">in</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">test</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">unfold</span> <span class=\"n\">test</span>    <span class=\"c1\">-- ⊢ 123456789 * 123456789 + 2 * 123456789 + 1 = 0</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">test&#39;</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">unfold</span> <span class=\"n\">test&#39;</span>  <span class=\"c1\">-- ⊢ (let n : ℕ := 123456789 in n * n + 2 * n + 1) = 0</span>\n</pre></div>",
        "id": 193379462,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586380434
    },
    {
        "content": "<p>kooky goal alert</p>",
        "id": 193379653,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586380558
    },
    {
        "content": "<p>is \"kooky\" pronounced the same as \"cookie\"?</p>",
        "id": 193379746,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586380594
    },
    {
        "content": "<p>It's pronounced the way cookie monster says cookie.</p>",
        "id": 193379995,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586380778
    },
    {
        "content": "<p>but it's almost spelt the same; English is weird</p>",
        "id": 193380083,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586380821
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">test&#39;&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"k\">have</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"mi\">123456789</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">test&#39;&#39;</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">unfold</span> <span class=\"n\">test&#39;&#39;</span>  <span class=\"c1\">-- ⊢ 123456789 * 123456789 + 2 * 123456789 + 1 = 0</span>\n</pre></div>",
        "id": 193383010,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586382709
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">test₂</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">rfl</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">))</span> <span class=\"mi\">0</span>          <span class=\"c1\">-- invalid type ascription</span>\n\n<span class=\"n\">def</span> <span class=\"n\">test₂&#39;</span> <span class=\"o\">:=</span>\n<span class=\"k\">let</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span> <span class=\"k\">in</span> <span class=\"o\">(</span><span class=\"n\">rfl</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>The lambda \"forgets\" the definition in the same way that <code>have</code> does.</p>",
        "id": 193383090,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586382745
    },
    {
        "content": "<p>wow. when I use the underscore I don't see <code>123456789</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">test&#39;&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"k\">have</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"mi\">123456789</span><span class=\"o\">,</span> <span class=\"bp\">_</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">don&#39;t know how to synthesize placeholder</span>\n<span class=\"cm\">context:</span>\n<span class=\"cm\">n : ℕ</span>\n<span class=\"cm\">⊢ ℕ</span>\n<span class=\"cm\">-/</span>\n</pre></div>",
        "id": 193383220,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586382829
    },
    {
        "content": "<p>Inside the body you \"don't know\" what the value of <code>n</code> is. Outside you do.</p>",
        "id": 193383344,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586382893
    },
    {
        "content": "<p>I can confirm Reid's first comment: <code>have</code> is sugar for this expression. <code>let</code> requires additional magic, but morally it is syntax for the result of substituting the variable, which is why you get the defeq inside the body</p>",
        "id": 193385294,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586384186
    },
    {
        "content": "<p>Fun fact, <code>have</code> inside tactic mode is neither of these, it is actually performing the substitution. So the result contains no redexes at the end:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">test</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"k\">have</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"mi\">123456789</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">test</span> <span class=\"c1\">-- 123456789 * 123456789 + 2 * 123456789 + 1</span>\n</pre></div>",
        "id": 193385524,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586384374
    },
    {
        "content": "<p>What's a redex? This funny <code>(let x = y in z)</code> thing which I sometimes see in goals?</p>",
        "id": 193386123,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586384765
    },
    {
        "content": "<p>redex is a shortening for \"reducible expression\", and it refers to when there is a piece of the term that can be directly simplified by one of the \"greek rules\". For example <code>1 + 2 = (\\lam x, x) 3</code> contains a beta redex, and <code>f = g \\circ (\\lam x, h x)</code> contains an eta redex</p>",
        "id": 193386280,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586384883
    },
    {
        "content": "<p>a let expression is always a redex (a zeta redex, if you care) because there is a rule that simplifies it to <code>z[y/x]</code></p>",
        "id": 193386341,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586384942
    }
]