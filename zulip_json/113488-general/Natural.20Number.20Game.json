[
    {
        "content": "<p>I noticed that sometimes my goal closes even without me having to use the \"exact\" tactic, after using the \"apply\" tactic? Under what circumstances does the \"apply\" tactic finish the proof as well?</p>",
        "id": 279359810,
        "sender_full_name": "Olonbayar Temuulen",
        "timestamp": 1650339318
    },
    {
        "content": "<p>If there are no \"unknown\" hypotheses required for the lemma you are <code>apply</code>ing, then <code>apply</code> will solve the goal.</p>",
        "id": 279359937,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1650339487
    },
    {
        "content": "<p>if there are no subgoals in the theorem, then <code>apply</code> will finish the goal. That means that usually you can use <code>apply</code> in place of <code>exact</code> and it will work the same</p>",
        "id": 279359944,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1650339496
    },
    {
        "content": "<p>(Essentially, <code>apply</code> tries to unify the conclusion of the lemma with the current goal. If that completely determines all the arguments of the lemma, we're done. Otherwise, <code>apply</code> creates a new goal for each undetermined argument.)</p>",
        "id": 279359959,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1650339533
    },
    {
        "content": "<p>omg, this explains alot. thank you very much!</p>",
        "id": 279360314,
        "sender_full_name": "Olonbayar Temuulen",
        "timestamp": 1650339979
    },
    {
        "content": "<p>What is the difference between the \"exact\" and the \"assumption\" tactic?<br>\nAnd in general from where can one find all the documentations for the tactics in Lean?</p>",
        "id": 279363608,
        "sender_full_name": "Olonbayar Temuulen",
        "timestamp": 1650343973
    },
    {
        "content": "<p><code>assumption</code> essentially tries calling <code>exact h</code> with each hypotheses <code>h</code>.</p>",
        "id": 279363802,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1650344271
    },
    {
        "content": "<p>Quoting from <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#assumption\">our tactic documentation page</a>:</p>\n<blockquote>\n<p><code>assumption</code>: This tactic looks in the local context for a hypothesis whose type is equal to the goal target. If it finds one, it uses it to prove the goal, and otherwise it fails.</p>\n</blockquote>\n<blockquote>\n<p><code>exact</code> : This tactic provides an exact proof term to solve the main goal. If <code>t</code> is the goal and <code>p</code> is a term of type <code>u</code> then <code>exact p</code> succeeds if and only if <code>t</code> and <code>u</code> can be unified.</p>\n</blockquote>",
        "id": 279363804,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1650344277
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#assumption\">tactic#assumption</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#exact\">tactic#exact</a> are the main mathlib documentation for the tactics (beyond books like <a href=\"https://leanprover.github.io/theorem_proving_in_lean/\">#tpil</a>)</p>",
        "id": 279363805,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1650344280
    },
    {
        "content": "<p>With <code>exact</code>, you have to specify the term you want to use!</p>",
        "id": 279363843,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1650344284
    },
    {
        "content": "<p>Something I forget about using is the special notation for <code>by assumption</code>, which can be convenient when you want to pass extra arguments to something. Here's an example that's equivalent do doing <code>assumption</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">exact</span> <span class=\"o\">‹</span><span class=\"n\">_</span><span class=\"o\">›</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Another example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">exact</span> <span class=\"n\">f</span> <span class=\"o\">‹</span><span class=\"n\">_</span><span class=\"o\">›</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>The underscore can be replaced with the type of the assumption you're wanting to get, like <code>‹p›</code> for both of these examples.</p>",
        "id": 279364139,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1650344588
    },
    {
        "content": "<p>When I write \"exact succ_ne_zero _ h\" for what exactly does the \"_\" before \"h\" in the end stand for? </p>\n<p>Source: Taken from the solution of the Level 2 of the Advanced Multiplication World. </p>\n<p>*PS: I feel like i've encountered a similar notation once in the game before, but cannot recall where exactly and at the time failed to address my gap in the knowledge and question why was it so.</p>",
        "id": 279367687,
        "sender_full_name": "Olonbayar Temuulen",
        "timestamp": 1650349107
    },
    {
        "content": "<p>To put my question into a bit more detailed beginners perspective:</p>\n<p>From my current level of understanding the \"exact\" tactic simply unifies the goal with the hypothesis, if the hypothesis is a term of the goal.<br>\nBut in the level 2 of Advanced Multiplication World, after the neccesary steps just before using the exact tactic we arrive at the state of:</p>\n<p><a href=\"/user_uploads/3121/XLiFiCjMllzVI0MJZWp4q75m/image.png\">image.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/XLiFiCjMllzVI0MJZWp4q75m/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/XLiFiCjMllzVI0MJZWp4q75m/image.png\"></a></div><p>And here we only have the \"h\" hypothesis and the goal, which we close through <strong><em>\"exact succ_ne_zero _ h\"</em></strong>, in which case my questions is what is the \"_\" underscore that we are using to close the goal in the exact tactic?</p>",
        "id": 279368155,
        "sender_full_name": "Olonbayar Temuulen",
        "timestamp": 1650349658
    },
    {
        "content": "<p>I understand that \"underscore _\" is a placeholder, but for what exactly is it placeholding for?</p>",
        "id": 279368268,
        "sender_full_name": "Olonbayar Temuulen",
        "timestamp": 1650349780
    },
    {
        "content": "<p>The <code>_</code> placeholder represents a fresh metavariable, and Lean will try to solve for what this metavariable should be through unification.</p>\n<p>The type of <code>succ_ne_zero</code> is <code>∀ (n : ℕ), succ n ≠ 0</code>, so when you do <code>succ_ne_zero _ h</code>, since <code>h</code> has type <code>succ (succ d * e + d) = 0</code> (and since <code>succ n ≠ 0</code> means <code>succ n = 0 → false</code>), then both <code>_</code> and <code>succ d * e + d</code> are unified with the \"<code>n</code>\" of the lemma, so it's as if you wrote <code>succ_ne_zero (succ d * e + d) h</code>.</p>",
        "id": 279368891,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1650350288
    },
    {
        "content": "<p>By the way, the apply tactic is sort of like doing <code>exact foo _ _ _</code> with the right number of placeholders, but with the twist where each of those placeholders that don't get unified with anything end up being turned into additional goals.</p>",
        "id": 279368959,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1650350364
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113488-general/topic/Natural.20Number.20Game/near/279368891\">said</a>:</p>\n<blockquote>\n<p>The <code>_</code> placeholder represents a fresh metavariable, and Lean will try to solve for what this metavariable should be through unification.</p>\n<p>The type of <code>succ_ne_zero</code> is <code>∀ (n : ℕ), succ n ≠ 0</code>, so when you do <code>succ_ne_zero _ h</code>, since <code>h</code> has type <code>succ (succ d * e + d) = 0</code> (and since <code>succ n ≠ 0</code> means <code>succ n = 0 → false</code>), then both <code>_</code> and <code>succ d * e + d</code> are unified with the \"<code>n</code>\" of the lemma, so it's as if you wrote <code>succ_ne_zero (succ d * e + d) h</code>.</p>\n</blockquote>\n<p>thank you for your kind response.<br>\nI understand it now, but just for the purpose of a little bit of more clarification can you explain what you mean by <em>metavariable</em> a bit more in depth?</p>",
        "id": 279369096,
        "sender_full_name": "Olonbayar Temuulen",
        "timestamp": 1650350484
    },
    {
        "content": "<p>A metavariable is a \"hole\" in an expression that can be filled in with another expression. They are exactly what the unification algorithm solves for.</p>",
        "id": 279369285,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1650350633
    },
    {
        "content": "<p>Have you seen those <code>?m_1</code> things in expressions in tactic states yet? Those are how Lean displays metavariables.</p>",
        "id": 279369414,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1650350716
    },
    {
        "content": "<p>In fact, what the goal in the tactic state is showing you is the type of the metavariable that you are trying to fill yourself using tactics. The metavariable itself isn't shown, just its type.</p>",
        "id": 279369534,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1650350788
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113488-general/topic/Natural.20Number.20Game/near/279369414\">said</a>:</p>\n<blockquote>\n<p>Have you seen those <code>?m_1</code> things in expressions in tactic states yet? Those are how Lean displays metavariables.</p>\n</blockquote>\n<p>Ah....! yes, indeed.</p>",
        "id": 279369591,
        "sender_full_name": "Olonbayar Temuulen",
        "timestamp": 1650350851
    },
    {
        "content": "<p><code>lemma foo : bar = baz := begin ... end</code> is creating a metavariable at the exact point of the <code>begin ... end</code> block, and through tactics you're trying to solve for it.</p>",
        "id": 279369682,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1650350915
    },
    {
        "content": "<p>Thank you again, will think a bit more and digest this by taking a small walk outside.</p>",
        "id": 279369932,
        "sender_full_name": "Olonbayar Temuulen",
        "timestamp": 1650351151
    },
    {
        "content": "<p>Just realized I can use the \"contradiction\" tactic to close <a href=\"http://succ.case\">succ.case</a> at the end in the level 1 of the advanced multiplication world, awesome!<br>\nFeel like this is much more intuitive, compared to trying to rw, then exfalso and then \"exact succ_ne_zero _ hab\". <br>\nOr does this kill the educational value of doing it the latter \"proper\" way?</p>",
        "id": 279370996,
        "sender_full_name": "Olonbayar Temuulen",
        "timestamp": 1650352114
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/n52RSYusM6-nus2wt8SpF1GH/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/n52RSYusM6-nus2wt8SpF1GH/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/n52RSYusM6-nus2wt8SpF1GH/image.png\"></a></div>",
        "id": 279371330,
        "sender_full_name": "Olonbayar Temuulen",
        "timestamp": 1650352388
    },
    {
        "content": "<p>I have no idea about the educational value of proving any theorem in any way -- I just wrote things which I thought people might understand. The game is very rough around the edges.</p>",
        "id": 279371813,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1650352773
    },
    {
        "content": "<p>Is the natural number game open source? I was thinking it might be fun to try adding modules for more concepts, ex working with matrices, etc..</p>",
        "id": 279387193,
        "sender_full_name": "David Chanin",
        "timestamp": 1650362153
    },
    {
        "content": "<p>Sure, although I am unlikely to ever push an update.</p>",
        "id": 279388245,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1650362671
    },
    {
        "content": "<p>The way I see NNG is that it does the job it's supposed to do, and in under a year we'll all be using Lean 4 and then we'll have to wait until someone writes Lean 4 game maker and then redo stuff in that.</p>",
        "id": 279388322,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1650362726
    },
    {
        "content": "<p>Using the same <code>lean_game_maker</code> you are free to create your own game though. I know <span class=\"user-mention\" data-user-id=\"254058\">@Marc Masdeu</span> has for a course and i have for my own teaching at <a href=\"https://GitHub.com/alexjbest/cap-game\">https://GitHub.com/alexjbest/cap-game</a> that's probably a better way to go than forking nng if you have good ideas for follow ups you want to share</p>",
        "id": 279470008,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1650403196
    },
    {
        "content": "<p>can i get a hint for level 4 in multiplication world?</p>",
        "id": 279765786,
        "sender_full_name": "Joseph O",
        "timestamp": 1650590354
    },
    {
        "content": "<p>I know I have to use induction</p>",
        "id": 279765874,
        "sender_full_name": "Joseph O",
        "timestamp": 1650590412
    },
    {
        "content": "<p>aha, I think induction on <code>b</code> will work</p>",
        "id": 279765889,
        "sender_full_name": "Joseph O",
        "timestamp": 1650590446
    },
    {
        "content": "<p>yeah I solved it</p>",
        "id": 279766163,
        "sender_full_name": "Joseph O",
        "timestamp": 1650590721
    },
    {
        "content": "<p>how is this proof for level 6 of world 3?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">induction</span> <span class=\"n\">b</span> <span class=\"k\">with</span> <span class=\"n\">d</span> <span class=\"n\">hd</span><span class=\"o\">,</span>\n<span class=\"o\">{</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">mul_zero</span><span class=\"o\">},</span>\n<span class=\"o\">},</span>\n<span class=\"o\">{</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">mul_succ</span><span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"n\">hd</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">add_assoc</span><span class=\"o\">,</span> <span class=\"n\">add_succ</span><span class=\"o\">]},</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"o\">},</span>\n</code></pre></div>",
        "id": 279817681,
        "sender_full_name": "Joseph O",
        "timestamp": 1650631144
    },
    {
        "content": "<p>Note that you can write <code>simp [my_lemma_1, my_lemma_2]</code>.</p>",
        "id": 279818155,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1650631391
    },
    {
        "content": "<p>So <code>simp [mul_zero]</code> would probably close the first goal in one line.</p>",
        "id": 279818180,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1650631409
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/Natural.20Number.20Game/near/279818180\">said</a>:</p>\n<blockquote>\n<p>So <code>simp [mul_zero]</code> would probably close the first goal in one line.</p>\n</blockquote>\n<p>Ah nng didn't cover that, but that's good to know</p>",
        "id": 279822763,
        "sender_full_name": "Joseph O",
        "timestamp": 1650633695
    },
    {
        "content": "<p>Why is nng freezing here? <a href=\"/user_uploads/3121/EcMyOajZ4i0vOt1M_ciGRcAu/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/EcMyOajZ4i0vOt1M_ciGRcAu/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/EcMyOajZ4i0vOt1M_ciGRcAu/image.png\"></a></div>",
        "id": 279893390,
        "sender_full_name": "Joseph O",
        "timestamp": 1650672760
    },
    {
        "content": "<p>Does it unfreeze if you do a refresh? Or a full refresh (cmd+shift+r or the equivalent for your OS+browser)? I don't know why Javascript does what it does but it does (I've seen the above fix a frozen weblean)</p>",
        "id": 279894385,
        "sender_full_name": "Julian Berman",
        "timestamp": 1650673795
    },
    {
        "content": "<p>Ah sorry, I didn't glance at the actual code, it may be Lean is going round and round in circles with the repeats</p>",
        "id": 279894462,
        "sender_full_name": "Julian Berman",
        "timestamp": 1650673839
    },
    {
        "content": "<p>I thought so to</p>",
        "id": 279896563,
        "sender_full_name": "Joseph O",
        "timestamp": 1650676042
    },
    {
        "content": "<p>I made a different proof</p>",
        "id": 279896569,
        "sender_full_name": "Joseph O",
        "timestamp": 1650676050
    },
    {
        "content": "<p>For level 8 of power world, I beat it in 17 rewrites (i counted)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">two_eq_succ_one</span><span class=\"o\">,</span> <span class=\"n\">one_eq_succ_zero</span><span class=\"o\">],</span>\n<span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">pow_succ</span><span class=\"o\">},</span>\n<span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">pow_zero</span><span class=\"o\">},</span>\n<span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">one_mul</span><span class=\"o\">},</span>\n<span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">succ_mul</span><span class=\"o\">},</span>\n<span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">zero_mul</span><span class=\"o\">,</span> <span class=\"n\">zero_add</span><span class=\"o\">],</span>\n<span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">add_mul</span><span class=\"o\">},</span>\n<span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">mul_add</span><span class=\"o\">},</span>\n<span class=\"n\">simp</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>but I still don't exactly understand the <code>ring</code> proof, even after reading the docs</p>",
        "id": 279924319,
        "sender_full_name": "Joseph O",
        "timestamp": 1650716938
    },
    {
        "content": "<p>This being the <code>ring</code> proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">two_eq_succ_one</span><span class=\"o\">,</span> <span class=\"n\">one_eq_succ_zero</span><span class=\"o\">],</span>\n<span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">pow_succ</span><span class=\"o\">},</span>\n<span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">pow_zero</span><span class=\"o\">},</span>\n<span class=\"n\">ring</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 279924844,
        "sender_full_name": "Joseph O",
        "timestamp": 1650717728
    },
    {
        "content": "<p>Ring seems really powerful, I would like to know where to use them.</p>",
        "id": 279924848,
        "sender_full_name": "Joseph O",
        "timestamp": 1650717765
    },
    {
        "content": "<p><code>ring</code> will prove identities in systems where there is addition and multiplication which satisfy the usual axioms. At this point in the game you've proved all the axioms required so we can register the relevant instance on <code>mynat</code> and then all of a sudden you don't have to do 17 rewrites any more. I wrote a blog post with some details about how the tactic works <a href=\"https://xenaproject.wordpress.com/2018/06/13/ab3/\">here</a>.</p>",
        "id": 279928566,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1650723401
    },
    {
        "content": "<p>Thanks again.</p>",
        "id": 279931159,
        "sender_full_name": "Joseph O",
        "timestamp": 1650726846
    },
    {
        "content": "<p>I tried the <code>apply</code> easter egg, but I can't really explain it.<br>\n<a href=\"/user_uploads/3121/27rSGhgye8wYni0iSIakOdW2/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/27rSGhgye8wYni0iSIakOdW2/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/27rSGhgye8wYni0iSIakOdW2/image.png\"></a></div>",
        "id": 279956159,
        "sender_full_name": "Joseph O",
        "timestamp": 1650765095
    },
    {
        "content": "<p>An explanation on why and how this happens would be nice. Thanks in advance.</p>",
        "id": 279956166,
        "sender_full_name": "Joseph O",
        "timestamp": 1650765120
    },
    {
        "content": "<p>The goal was <code>R</code>. Function <code>f</code> takes a term of type <code>P</code> and a term of type <code>Q</code> and produces a term of type <code>R</code>. When you say <code>apply f</code>, you tell Lean that you want to construct a term of type <code>R</code> using function <code>f</code>, so Lean asks you to provide arguments for <code>f</code> (that is, terms of types <code>P</code> and <code>Q</code>).</p>",
        "id": 279960348,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1650772331
    },
    {
        "content": "<p>Hi, that is agreat game and a wonderful way to teach formal proofs. Way to go :-)</p>\n<p>I finished all 8 levels in the Power world, used the hiden ring tactics or without and still the power world is colored with blue and not green... what do I miss? </p>\n<p>Thanks</p>",
        "id": 279967074,
        "sender_full_name": "Niv Sarig",
        "timestamp": 1650784586
    },
    {
        "content": "<p>Check each level has a tick and for any that don't, hit enter a couple of times at the end of the proof</p>",
        "id": 279967154,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1650784739
    },
    {
        "content": "<p>Thanks Kevin for your fast reply, did all of that and yet... :-)</p>",
        "id": 279967405,
        "sender_full_name": "Niv Sarig",
        "timestamp": 1650785143
    },
    {
        "content": "<p>Sorry. My co-author had a hard time getting this to work, I don't know any of the details here (I just wrote the lean code, not any of the other infrastructure)</p>",
        "id": 279968648,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1650787176
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113488-general/topic/Natural.20Number.20Game/near/279368891\">said</a>:</p>\n<blockquote>\n<p>The <code>_</code> placeholder represents a fresh metavariable, and Lean will try to solve for what this metavariable should be through unification.</p>\n<p>The type of <code>succ_ne_zero</code> is <code>∀ (n : ℕ), succ n ≠ 0</code>, so when you do <code>succ_ne_zero _ h</code>, since <code>h</code> has type <code>succ (succ d * e + d) = 0</code> (and since <code>succ n ≠ 0</code> means <code>succ n = 0 → false</code>), then both <code>_</code> and <code>succ d * e + d</code> are unified with the \"<code>n</code>\" of the lemma, so it's as if you wrote <code>succ_ne_zero (succ d * e + d) h</code>.</p>\n</blockquote>\n<p>Hello, thank you for your time again.<br>\nI wanted to settle the understanding of a definition of a metavariable once and for all, and have been reading documentation. <br>\nBut what does one mean in this \"system description\", when they say a \"construction\"? <a href=\"/user_uploads/3121/TnZhzW0z1Ry1nYX9-eR0Fptk/image.png\">image.png</a> Can anyone give me an example of what makes a \"construction\" and what are particular constituents of it? Is it simply any proof, theorem or a lemma? Or am I failing to capture certain nuances, when I label it simply as such? <br>\n(Source taken from: <a href=\"https://leanprover.github.io/papers/system.pdf\">https://leanprover.github.io/papers/system.pdf</a>)</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/TnZhzW0z1Ry1nYX9-eR0Fptk/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/TnZhzW0z1Ry1nYX9-eR0Fptk/image.png\"></a></div>",
        "id": 279970835,
        "sender_full_name": "Olonbayar Temuulen",
        "timestamp": 1650790355
    },
    {
        "content": "<p>What's meant is a term. A term is simply a \"member\" of a type, so for example if <code>x</code> is a real number, then <code>x</code> is a term of type <code>ℝ</code> (note that a type is itself a term, which might be confusing at first). \"Partial constructions\" then refer to terms with underscores in them. For example, if <code>f : ℕ → ℕ</code>, then <code>f _ : ℕ</code> is a \"partial construction, because we haven't determined what should go in place of the <code>_</code>.</p>",
        "id": 279970965,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1650790558
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"456794\">Patrick Johnson</span> <a href=\"#narrow/stream/113488-general/topic/Natural.20Number.20Game/near/279960348\">said</a>:</p>\n<blockquote>\n<p>The goal was <code>R</code>. Function <code>f</code> takes a term of type <code>P</code> and a term of type <code>Q</code> and produces a term of type <code>R</code>. When you say <code>apply f</code>, you tell Lean that you want to construct a term of type <code>R</code> using function <code>f</code>, so Lean asks you to provide arguments for <code>f</code> (that is, terms of types <code>P</code> and <code>Q</code>).</p>\n</blockquote>\n<p>An this makes sense</p>",
        "id": 279978817,
        "sender_full_name": "Joseph O",
        "timestamp": 1650802412
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"494654\">@Olonbayar Temuulen</span> When the paper says \"construction,\" I think it's referring to a \"construction\" in the Calculus of Inductive Constructions, a type theory that Lean is based on. I'm not an expert in type theory, and, in my limited reading, as far as I can tell a \"construction\" is a representation of a term of a type (i.e., a term constructed using lambda abstractions, match statements, pi types, applications, and so on). To prove/calculate things in Lean, you have to construct a proof/algorithm, but as part of the user interface you are able to manipulate partially constructed proofs/algorithms.</p>\n<p>Concretely, Lean expressions are an inductive type (<a href=\"https://github.com/leanprover-community/lean/blob/master/library/init/meta/expr.lean#L85\">defined here</a>, at least on the Lean side -- Lean is also written in C++). An expression that still has <code>mvar</code> constructors seems like it should correspond to what they mean by a \"partial construction.\" When two expressions are unified, <code>mvar</code> expressions unified with any other expression get replaced by that other expression immediately, there and at all occurrences (at least, it's as if it did this -- the algorithm does something more efficient). Presence of metavariables after a certain point in the typechecking process triggers the \"don't know how to synthesize placeholder\" error message.</p>\n<p>There's some more complexity with metavariables that I'm aware of, but don't fully understand, and those are \"delayed abstractions\": metavariables that are allowed to depend on a list of local variables.</p>",
        "id": 279990497,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1650821160
    },
    {
        "content": "<p>Hi all, <br>\nI am trying to find the Natural Number Game but the link doesn't work. Is it erased? Where can I find it. Thanks!</p>",
        "id": 284653142,
        "sender_full_name": "Verone Kadriu",
        "timestamp": 1654108991
    },
    {
        "content": "<p>I don't think it has been intentionally taken down, hopefully it is just a temporary bug, in the meantime there is another copy hosted at <a href=\"https://cbirkbeck.github.io/natural_number_game/\">https://cbirkbeck.github.io/natural_number_game/</a></p>",
        "id": 284653396,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1654109135
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> it's down again</p>\n<p><span class=\"user-mention\" data-user-id=\"480039\">@Verone Kadriu</span> there's a mirror at <a href=\"https://cbirkbeck.github.io/natural_number_game\">https://cbirkbeck.github.io/natural_number_game</a></p>",
        "id": 284653416,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1654109149
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span> <span class=\"user-mention\" data-user-id=\"307953\">@Ruben Van de Velde</span> Thank you very much! I hope they will fix soon!</p>",
        "id": 284653491,
        "sender_full_name": "Verone Kadriu",
        "timestamp": 1654109171
    },
    {
        "content": "<p>See, Alex is always faster than me :)</p>",
        "id": 284653536,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1654109206
    }
]