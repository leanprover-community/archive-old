[
    {
        "content": "<p>Is the following behaviour in the <code>lift</code> tactic expected?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hm</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"o\">:=</span> <span class=\"bp\">-</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">neg_nonneg.mpr</span> <span class=\"n\">hm</span><span class=\"o\">,</span>\n  <span class=\"n\">lift</span> <span class=\"n\">n</span> <span class=\"n\">to</span> <span class=\"n\">ℕ</span> <span class=\"n\">using</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"c1\">-- fails, `app_builder_exception`</span>\n\n<span class=\"kd\">end</span>\n\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hm</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"bp\">-</span><span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"n\">neg_nonneg.mpr</span> <span class=\"n\">hm</span><span class=\"o\">,</span>\n  <span class=\"n\">lift</span> <span class=\"bp\">-</span><span class=\"n\">m</span> <span class=\"n\">to</span> <span class=\"n\">ℕ</span> <span class=\"n\">using</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"c1\">-- works</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 221262722,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1609379749
    },
    {
        "content": "<p><code>app_builder_exception</code> is never expected. This looks like a bug in <code>rcases</code> or its dependencies, didn't track it beyond this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">rcases</span> <span class=\"o\">(⟨</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">id</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 221263864,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1609381379
    },
    {
        "content": "<p>Here's what <code>rcases</code> is doing:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.prime</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.app_builder</span> <span class=\"n\">true</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">id</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">a</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n  <span class=\"n\">subst</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"c1\">-- boom</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 221266614,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609385639
    },
    {
        "content": "<p>so the issue is in the C++ for <code>subst</code> somewhere</p>",
        "id": 221266663,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609385684
    },
    {
        "content": "<p>question: what is supposed to happen here? I think subst is trying to replace occurrences of <code>m</code> by <code>id a</code> everywhere, but this isn't possible because it's a let binding and when it goes to revert <code>m</code> it doesn't get a pi like it expected</p>",
        "id": 221266755,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609385781
    },
    {
        "content": "<p>Yeah, the best behavior I can think of is a friendly error that suggests the use of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.interactive.clear_value\">docs#tactic.interactive.clear_value</a>.</p>",
        "id": 221276052,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1609401852
    },
    {
        "content": "<p>Btw, if you don't necessarily need a <code>let</code> expression, and are okay with a new variable <code>n</code> and an equality <code>-m = n</code>, then you can use <code>generalize'</code> instead:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hm</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">generalize'</span> <span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"bp\">-</span><span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">hn</span><span class=\"o\">],</span> <span class=\"n\">exact</span> <span class=\"n\">neg_nonneg.mpr</span> <span class=\"n\">hm</span> <span class=\"o\">},</span>\n  <span class=\"n\">lift</span> <span class=\"n\">n</span> <span class=\"n\">to</span> <span class=\"n\">ℕ</span> <span class=\"n\">using</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 221276244,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1609402156
    },
    {
        "content": "<p>just a flag-up that this still happens! :( i should really learn some meta stuff to try and fix this</p>",
        "id": 243307697,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1624202858
    },
    {
        "content": "<p>currently self-isolating after testing positive so have plenty of time to do so, I guess...</p>",
        "id": 243307717,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1624202882
    },
    {
        "content": "<p>(oh, and <code>clear_value</code> still works!)</p>",
        "id": 243307752,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1624202903
    },
    {
        "content": "<p>Fixed in <a href=\"https://github.com/leanprover-community/mathlib/issues/8129\">#8129</a></p>",
        "id": 244352155,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1625003156
    }
]