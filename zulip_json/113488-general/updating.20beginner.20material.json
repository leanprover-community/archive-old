[
    {
        "content": "<p>I hear there's another Quanta article coming out soon about mathlib(? Lean? ITP? I don't know the scope) that we should be prepared for. The IMO article this week already brought a bit of a spike in Zulip activity.</p>\n<p>In particular we should make sure things like the overview and undergrad pages are up to date. <a href=\"https://github.com/leanprover-community/mathlib/blob/master/docs/undergrad.yaml\">https://github.com/leanprover-community/mathlib/blob/master/docs/undergrad.yaml</a> <a href=\"https://github.com/leanprover-community/mathlib/blob/master/docs/overview.yaml\">https://github.com/leanprover-community/mathlib/blob/master/docs/overview.yaml</a></p>",
        "id": 211266463,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1601044890
    },
    {
        "content": "<p>Is <a href=\"https://github.com/leanprover-community/mathlib/blob/master/docs/undergrad.yaml#L55\">https://github.com/leanprover-community/mathlib/blob/master/docs/undergrad.yaml#L55</a> (minpoly of a matrix) now done? <span class=\"user-mention\" data-user-id=\"302826\">@Aaron Anderson</span></p>",
        "id": 211267263,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601045256
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/blob/master/docs/undergrad.yaml#L96\">https://github.com/leanprover-community/mathlib/blob/master/docs/undergrad.yaml#L96</a> (complex roots of unity), <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> what do you want here? We have <code>nth_roots (1 : complex)</code>. If we link this up with <code>e ^ (2 * pi * I / n)</code>, that should be enough, I guess?</p>",
        "id": 211267676,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601045440
    },
    {
        "content": "<p>What does <code>examples of groups with small cardinality</code> refer to?</p>",
        "id": 211267748,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1601045473
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> Do we have more on <code>perm</code> (decomposition into transpositions/disjoint cycles)? What happened to the alternating group? <a href=\"https://github.com/leanprover-community/mathlib/blob/master/docs/undergrad.yaml#L98-L103\">https://github.com/leanprover-community/mathlib/blob/master/docs/undergrad.yaml#L98-L103</a></p>",
        "id": 211267957,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601045572
    },
    {
        "content": "<p>Who knows? Probably things like listing all groups with cardinal less than 20 or so.</p>",
        "id": 211268278,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1601045706
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110596\">Rob Lewis</span> <a href=\"#narrow/stream/113488-general/topic/updating.20beginner.20material/near/211267748\">said</a>:</p>\n<blockquote>\n<p>What does <code>examples of groups with small cardinality</code> refer to?</p>\n</blockquote>\n<p>At Imperial this means: classification of all groups of order &lt;=6 by hand and order 8 on an example sheet; definitions of finite cyclic, dihedral, symmetric and alternating groups plus computation of their orders.</p>",
        "id": 211268293,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601045710
    },
    {
        "content": "<p>Ok, maybe 8 rather than 20 then.</p>",
        "id": 211268328,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1601045732
    },
    {
        "content": "<p>There are something like 20 groups of order 16 and it's hard to tell some of them apart.</p>",
        "id": 211268346,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601045740
    },
    {
        "content": "<p>But you can go up to 15 no problem. It's easier with Sylow theorems, because they give you groups of order pq quickly</p>",
        "id": 211268384,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601045758
    },
    {
        "content": "<p>Yes, this is an finite groups API test, including Sylow.</p>",
        "id": 211268490,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1601045793
    },
    {
        "content": "<p>I did prove A5 was simple once, but it was a brute forcey proof that Mario didn't approve of. The better way is to classify the conjugacy classes of Sn and An, but this is actually quite difficult. I have some ideas in my head about how to do this though, but I think it's actually a big project.</p>",
        "id": 211268756,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1601045905
    },
    {
        "content": "<p>There is already some stuff about cycles in there, but I don't think this is a good approach. The better way of thinking about cycle shape of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>σ</mi></mrow><annotation encoding=\"application/x-tex\">\\sigma</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">σ</span></span></span></span> is as the orbits of the action of the subgroup generated by <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>σ</mi></mrow><annotation encoding=\"application/x-tex\">\\sigma</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">σ</span></span></span></span>.</p>",
        "id": 211268998,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1601046002
    },
    {
        "content": "<p>I wonder about how to classify groups of order 16 in a way that isn't a giant case bash (it can be a less giant case bash though)</p>",
        "id": 211269242,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601046091
    },
    {
        "content": "<p>I guess <code>Maschke theorem</code> should point at <code>representation_theory.maschke</code></p>",
        "id": 211269275,
        "sender_full_name": "Reid Barton",
        "timestamp": 1601046109
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/representation_theory/maschke.html\">The module doc string of <code>representation_theory.maschke</code></a> leaves \"the usual statement\" to future work. I guess this is because we don't have a definition of a representation of a finite group yet?</p>",
        "id": 211269678,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1601046249
    },
    {
        "content": "<p>I would rather say it is because textbooks don't give the real version of the statement, which is the one in this file</p>",
        "id": 211269844,
        "sender_full_name": "Reid Barton",
        "timestamp": 1601046324
    },
    {
        "content": "<p>The part that's missing doesn't use the hypotheses needed here (<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>G</mi></mrow><annotation encoding=\"application/x-tex\">G</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">G</span></span></span></span> is finite and of invertible order), and instead needs separate hypotheses (finite-dimensionality of the vector space)</p>",
        "id": 211270263,
        "sender_full_name": "Reid Barton",
        "timestamp": 1601046511
    },
    {
        "content": "<p>The undergrad list is specifically about usual statement or at least statements that imply usual statements.</p>",
        "id": 211271248,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1601046883
    },
    {
        "content": "<p>Does the measure theory section of <br>\n<a href=\"https://github.com/leanprover-community/mathlib/blob/master/docs/overview.yaml\">https://github.com/leanprover-community/mathlib/blob/master/docs/overview.yaml</a><br>\nneed a going-over? <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span></p>",
        "id": 211272639,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1601047492
    },
    {
        "content": "<p>It seems more misleading to leave the Maschke's theorem entry blank--imagine some undergraduate sees that it is \"missing\" and formalizes a proof, only to discover later that basically all their work is in mathlib already.</p>",
        "id": 211279032,
        "sender_full_name": "Reid Barton",
        "timestamp": 1601050373
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/113488-general/topic/updating.20beginner.20material/near/211272639\">said</a>:</p>\n<blockquote>\n<p>Does the measure theory section of <br>\n<a href=\"https://github.com/leanprover-community/mathlib/blob/master/docs/overview.yaml\">https://github.com/leanprover-community/mathlib/blob/master/docs/overview.yaml</a><br>\nneed a going-over? <span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span></p>\n</blockquote>\n<p><a href=\"https://github.com/leanprover-community/mathlib/issues/4258\">#4258</a></p>",
        "id": 211291903,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1601056648
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/updating.20beginner.20material/near/211267263\">said</a>:</p>\n<blockquote>\n<p>Is <a href=\"https://github.com/leanprover-community/mathlib/blob/master/docs/undergrad.yaml#L55\">https://github.com/leanprover-community/mathlib/blob/master/docs/undergrad.yaml#L55</a> (minpoly of a matrix) now done? <span class=\"user-mention silent\" data-user-id=\"302826\">Aaron Anderson</span></p>\n</blockquote>\n<p>We decided against making a specific notation for it. I could still make a PR to add <code>minimal_polynomial M.is_integral</code> or something like that to the relevant <code>yaml</code>s</p>",
        "id": 211311792,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1601064733
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/updating.20beginner.20material/near/211267676\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/leanprover-community/mathlib/blob/master/docs/undergrad.yaml#L96\">https://github.com/leanprover-community/mathlib/blob/master/docs/undergrad.yaml#L96</a> (complex roots of unity), <span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> what do you want here? We have <code>nth_roots (1 : complex)</code>. If we link this up with <code>e ^ (2 * pi * I / n)</code>, that should be enough, I guess?</p>\n</blockquote>\n<p><a href=\"https://github.com/leanprover-community/mathlib/issues/4260\">#4260</a></p>",
        "id": 211314191,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601065808
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span>  I think the \"default-expanded\" view of the yaml files (as on <br>\n<a href=\"https://leanprover-community.github.io/mathlib-overview.html\">https://leanprover-community.github.io/mathlib-overview.html</a><br>\n) is clearer than the \"default-collapsed\" view (as on <br>\n<a href=\"https://leanprover-community.github.io/undergrad.html\">https://leanprover-community.github.io/undergrad.html</a><br>\n).  What do others think?</p>",
        "id": 211317263,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1601067499
    },
    {
        "content": "<p>If the undergrad page is too long to fully expand, one could also split the difference, showing just the main headings (\"linear algebra\", \"group theory\") by default but fully expanding a heading when clicked. (At the moment it takes two clicks to see a list of individual theorems.)</p>",
        "id": 211317437,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1601067617
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"266253\">@Joseph Myers</span> I've seen a lot of good PRs about Euclidean geometry, could you add some results to <a href=\"https://github.com/leanprover-community/mathlib/blob/master/docs/overview.yaml\">https://github.com/leanprover-community/mathlib/blob/master/docs/overview.yaml</a>?</p>",
        "id": 211398779,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1601182685
    },
    {
        "content": "<p>(I have an open PR <a href=\"https://github.com/leanprover-community/mathlib/issues/4284\">#4284</a> which includes some trivial edits to the geometry section of the file -- Joseph, feel free to add your edits to that PR, to avoid a merge conflict.)</p>",
        "id": 211398997,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1601183081
    },
    {
        "content": "<p>I tried to switch to flat views for the undergrad lists. Reverting is easy, this is one commit. Bug hunting is welcome, I did that very quickly and I need to run again right now.</p>",
        "id": 211406634,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1601197639
    },
    {
        "content": "<p>It now shows in both ways (i.e., the new/expanded view at the top followed by the old/collapsed view underneath).  <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> maybe you know this and this is what you meant by</p>\n<blockquote>\n<p>Bug hunting is welcome</p>\n</blockquote>\n<p>? But pointing out in case you missed it.</p>",
        "id": 211418602,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1601216346
    },
    {
        "content": "<p>Of course it was a mistake.</p>",
        "id": 211419828,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1601218438
    },
    {
        "content": "<p>This should be fixed very soon (CI has to work a bit). Is there anything else? Do you like it this way?</p>",
        "id": 211419890,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1601218500
    },
    {
        "content": "<p>I like that it's consistent with the overview and ctrl-f works better, and the length isn't a problem, so thumbs up for the change!</p>",
        "id": 211422749,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1601222817
    },
    {
        "content": "<p>Random questions about the undergrad list, because I don't know what some of the entries are meant to refer to: </p>\n<ul>\n<li>Is linear algebra -- fundamentals -- direct sum <a href=\"https://leanprover-community.github.io/mathlib_docs/find/direct_sum.semimodule\">docs#direct_sum.semimodule</a> ?</li>\n<li>is linear algebra -- multilinearity -- special linear group <a href=\"https://leanprover-community.github.io/mathlib_docs/find/matrix.special_linear_group\">docs#matrix.special_linear_group</a> ? (Does this belong under the \"matrices\" header?)</li>\n</ul>",
        "id": 211422990,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1601223209
    },
    {
        "content": "<p>I think the direct sum means the internal thing, expressing that a module is the direct sum of a family of submodule. This is much more common that the external version.</p>",
        "id": 211423451,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1601223894
    },
    {
        "content": "<p>Special linear group could link to the matrix group, but it would be nicer to have the version for a vector space without a choice of basis. Last time I checked we still didn't have the determinant of an endomorphism. This would be very easy to add.</p>",
        "id": 211423535,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1601224023
    },
    {
        "content": "<p>It would be nice to have a pass through those extremely low hanging fruits.</p>",
        "id": 211423610,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1601224126
    },
    {
        "content": "<p>Or to publicize them better for people looking for easy projects, although I don't know the best way to do this.</p>",
        "id": 211423977,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1601224787
    },
    {
        "content": "<p>Do you mean pointing out easy ones, or better publicizing the whole web page?</p>",
        "id": 211424057,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1601224915
    },
    {
        "content": "<p>Pointing out easy ones</p>",
        "id": 211424102,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1601224944
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span> <span class=\"user-mention\" data-user-id=\"129120\">@Alexander Bentkamp</span> <span class=\"user-mention\" data-user-id=\"302826\">@Aaron Anderson</span> can't we cross out  \"annihilating polynomials\" and \"minimal polynomial\" now?</p>",
        "id": 211424333,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1601225368
    },
    {
        "content": "<p>Does any of you want to define the determinant of an endomorphism, taking inspiration from what was done with trace?</p>",
        "id": 211424345,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1601225401
    },
    {
        "content": "<p>What happened to Alex's attempt to prove the kernels lemma? Certainly it needs annihilating polynomial and direct sums?</p>",
        "id": 211424405,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1601225459
    },
    {
        "content": "<p>Is it true that we don't have <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo stretchy=\"false\">[</mo><mi>X</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">A[X]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose\">]</span></span></span></span> is UFD when <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span> is UFD?</p>",
        "id": 211424493,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1601225640
    },
    {
        "content": "<p>Nope <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span> <a href=\"https://github.com/leanprover-community/mathlib/issues/2871\">#2871</a></p>",
        "id": 211425996,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601227698
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> the undergrad-todo lists \"decomposition of a polynomial into sum of homogeneous polynomials\", didn't you do this?</p>",
        "id": 211426810,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1601229051
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/mv_polynomial.sum_homogeneous_component\">docs#mv_polynomial.sum_homogeneous_component</a></p>",
        "id": 211426901,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601229235
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/4290\">#4290</a></p>",
        "id": 211427336,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1601229905
    },
    {
        "content": "<p>I thought I would fill an easy hole instead of working, so I started a <code>tranpose</code> branch. But of course it sounds easy only until you remember the linear algebra mess we have. In particular there seem to be no link between representing a vector of a linear map in a given basis and the theory of dual bases. So I have two nasty sorries in <code>linear_algebra/dual.lean</code>. Everybody should feel free to fix this.</p>",
        "id": 211431142,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1601235721
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/blob/tranpose/src/linear_algebra/dual.lean#L184-L189\">https://github.com/leanprover-community/mathlib/blob/tranpose/src/linear_algebra/dual.lean#L184-L189</a></p>",
        "id": 211431191,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1601235754
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span></p>",
        "id": 211431197,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1601235763
    },
    {
        "content": "<p>I really didn't want to work tonight, so I also tackled the annoying only hole in the \"Topology of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">R</span></span></span></span></span>\" section. I need to go to bed, so anyone is welcome to take over <a href=\"https://github.com/leanprover-community/mathlib/commit/80f312946303f7e80ec3911d2927fc63dcd00b24\">this branch</a>, especially if you like subgroups, casts and floor.</p>",
        "id": 211435362,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1601242170
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/updating.20beginner.20material/near/211435362\">said</a>:</p>\n<blockquote>\n<p>I really didn't want to work tonight, so I also tackled the annoying only hole in the \"Topology of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">R</span></span></span></span></span>\" section. I need to go to bed, so anyone is welcome to take over <a href=\"https://github.com/leanprover-community/mathlib/commit/80f312946303f7e80ec3911d2927fc63dcd00b24\">this branch</a>, especially if you like subgroups, casts and floor.</p>\n</blockquote>\n<p>I did the sorries, it will need quite a bit of cleanup!</p>",
        "id": 211454659,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1601273109
    },
    {
        "content": "<p>Great! I wanted to avoid <a href=\"https://github.com/leanprover-community/mathlib/commit/e85d9159d675cdda08c3e15b6b963c58a1ac2203#diff-96f4a64568fb76c8b14b87545794d274R336-R337\">https://github.com/leanprover-community/mathlib/commit/e85d9159d675cdda08c3e15b6b963c58a1ac2203#diff-96f4a64568fb76c8b14b87545794d274R336-R337</a> but it was probably silly since we want that property anyway if it isn't there already. Of course the two aux lemmas should be removed completely since it seems you found them in the library.</p>",
        "id": 211461209,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1601279411
    },
    {
        "content": "<p>Yes, I did not figure out how your original proof structure</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>      <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">floor</span> <span class=\"o\">(</span><span class=\"n\">ε</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"bp\">/</span><span class=\"n\">g₁</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">g₁</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n        <span class=\"n\">exact</span> <span class=\"n\">mul_mem</span> <span class=\"n\">_</span> <span class=\"n\">g₁_in</span><span class=\"o\">,</span>\n        <span class=\"n\">sorry</span><span class=\"o\">,</span>\n        <span class=\"n\">sorry</span> <span class=\"o\">},</span>\n</code></pre></div>\n\n<p>was going to go, but feel free to rewrite it this way!  (It avoids taking <code>Inf</code>?)</p>",
        "id": 211461775,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1601279851
    },
    {
        "content": "<blockquote>\n<p>can't we cross out \"annihilating polynomials\" and \"minimal polynomial\" now?</p>\n</blockquote>\n<p>I think we can claim that we have minimal polynomials for endomorphisms. (see Aaron's <code>is_root_of_has_eigenvalue</code> and <code>has_eigenvalue_of_is_root</code>)</p>\n<p>I am not aware of anything in the direction of annihilating polynomials.</p>\n<blockquote>\n<p>What happened to Alex's attempt to prove the kernels lemma?</p>\n</blockquote>\n<p>I've added <code>sup_ker_aeval_eq_ker_aeval_mul_of_coprime</code> and <code>disjoint_ker_aeval_of_coprime</code>. Is this what you wanted to see or did you have something else in mind?</p>\n<blockquote>\n<p>Certainly it needs annihilating polynomial and direct sums?</p>\n</blockquote>\n<p>I don't know how annihilating polynomials would help, but yes, It would be nice to have a definition of a direct sum of submodules instead of using <code>... ⊔ ... = ...</code> and <code>disjoint</code> seperately.</p>",
        "id": 211464508,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1601281862
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/updating.20beginner.20material/near/211431142\">said</a>:</p>\n<blockquote>\n<p>I thought I would fill an easy hole instead of working, so I started a <code>tranpose</code> branch. But of course it sounds easy only until you remember the linear algebra mess we have. In particular there seem to be no link between representing a vector of a linear map in a given basis and the theory of dual bases. So I have two nasty sorries in <code>linear_algebra/dual.lean</code>. Everybody should feel free to fix this.</p>\n</blockquote>\n<p>Done: <a href=\"https://github.com/leanprover-community/mathlib/commit/d5a35937fe5986cb9c21ef924a2d30d3182252cc\">https://github.com/leanprover-community/mathlib/commit/d5a35937fe5986cb9c21ef924a2d30d3182252cc</a></p>",
        "id": 211470866,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1601286175
    },
    {
        "content": "<p>My experience is that <code>is_basis.repr</code> has basically no useful properties, and the first step is to rephrase it in terms of <code>finsupp.total</code> instead.</p>",
        "id": 211471118,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1601286334
    },
    {
        "content": "<p>Of course <code>repr</code> (and <code>equiv_fun</code>) are useful for statements, just not in proofs.</p>",
        "id": 211471203,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1601286374
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/updating.20beginner.20material/near/211406634\">said</a>:</p>\n<blockquote>\n<p>I tried to switch to flat views for the undergrad lists. Reverting is easy, this is one commit. Bug hunting is welcome, I did that very quickly and I need to run again right now.</p>\n</blockquote>\n<p>I just noticed that the footer saying \"Suggest edits to this page on GitHub\" is missing from the bottom of all the \"library overview\" pages. Not sure if that's intentional though.</p>",
        "id": 211473865,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1601288156
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"238446\">Anne Baanen</span> <a href=\"#narrow/stream/113488-general/topic/updating.20beginner.20material/near/211470866\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/updating.20beginner.20material/near/211431142\">said</a>:</p>\n<blockquote>\n<p>I thought I would fill an easy hole instead of working, so I started a <code>tranpose</code> branch. But of course it sounds easy only until you remember the linear algebra mess we have. In particular there seem to be no link between representing a vector of a linear map in a given basis and the theory of dual bases. So I have two nasty sorries in <code>linear_algebra/dual.lean</code>. Everybody should feel free to fix this.</p>\n</blockquote>\n<p>Done: <a href=\"https://github.com/leanprover-community/mathlib/commit/d5a35937fe5986cb9c21ef924a2d30d3182252cc\">https://github.com/leanprover-community/mathlib/commit/d5a35937fe5986cb9c21ef924a2d30d3182252cc</a></p>\n</blockquote>\n<p>Great, thanks!</p>",
        "id": 211496572,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1601301949
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> I pushed a first round of cleanup. I still need to handle your <code>inf_property</code> lemma.</p>",
        "id": 211502118,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1601304400
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/updating.20beginner.20material/near/211502118\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> I pushed a first round of cleanup. I still need to handle your <code>inf_property</code> lemma.</p>\n</blockquote>\n<p>Looks great!  I won't have any time until tonight, so if you are free before then, feel free to do that.</p>",
        "id": 211504875,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1601305554
    },
    {
        "content": "<p>The next step is lemma naming, I created a specific discussion since this becomes highly non-trivial.</p>",
        "id": 211505327,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1601305754
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"129120\">Alexander Bentkamp</span> <a href=\"#narrow/stream/113488-general/topic/updating.20beginner.20material/near/211464508\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>What happened to Alex's attempt to prove the kernels lemma?</p>\n</blockquote>\n<p>I've added <code>sup_ker_aeval_eq_ker_aeval_mul_of_coprime</code> and <code>disjoint_ker_aeval_of_coprime</code>. Is this what you wanted to see or did you have something else in mind?</p>\n</blockquote>\n<p>Sorry I missed this message earlier (I just found it while looking for something else). This is the right result but we want (one statement combining both and) arbitrary finite families of pairwise coprime polynomials.</p>\n<blockquote>\n<blockquote>\n<p>Certainly it needs annihilating polynomial and direct sums?</p>\n</blockquote>\n<p>I don't know how annihilating polynomials would help, but yes, It would be nice to have a definition of a direct sum of submodules instead of using <code>... ⊔ ... = ...</code> and <code>disjoint</code> seperately.</p>\n</blockquote>\n<p>If the products is annihilating then you can replace <code>(⇑(polynomial.aeval f) (p * q)).ker</code> by top.</p>",
        "id": 211539291,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1601321750
    },
    {
        "content": "<p>Arggg, I just understood why defining <code>linear_map.annihilating_polynomials</code> is not straightforward. We don't have the kernel of a  ring morphism from a commutative ring to a non-commutative ring. <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 211542857,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1601323409
    },
    {
        "content": "<p>I mean the definition should be </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">linear_map.annihilating_polynomials</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"o\">(</span><span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">):=</span>\n<span class=\"o\">(</span><span class=\"n\">polynomial.aeval</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">M</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">M</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_ring_hom.ker</span>\n</code></pre></div>\n\n<p>but this doesn't work because <code>M →ₗ[R] M</code> isn't commutative.</p>",
        "id": 211543429,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1601323648
    },
    {
        "content": "<p>(presumably the type ascription is useful only to get a somewhat clearer error message).</p>",
        "id": 211543539,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1601323694
    },
    {
        "content": "<p>And this should go around line 400 of <code>ring_theory/polynomial</code></p>",
        "id": 211543656,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1601323755
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/updating.20beginner.20material/near/211542857\">said</a>:</p>\n<blockquote>\n<p>Arggg, I just understood why defining <code>linear_map.annihilating_polynomials</code> is not straightforward. We don't have the kernel of a  ring morphism from a commutative ring to a non-commutative ring. <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>\n</blockquote>\n<p>I really hope that this is something that can be fixed with a 1-line diff?</p>",
        "id": 211580691,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601355001
    },
    {
        "content": "<p>I almost have convergence test for <a href=\"https://en.wikipedia.org/wiki/Harmonic_series_(mathematics)#P-series\">p-series</a> based on the <a href=\"https://en.wikipedia.org/wiki/Cauchy_condensation_test\">Cauchy condensation test</a>. Just a few <code>real.rpow</code>-related <code>sorry</code>s left.</p>",
        "id": 211597444,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1601371037
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> did you setup anything about series in general? The big question is how to handle the fact that some series naturally don't start at index 0.</p>",
        "id": 211606717,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1601377881
    },
    {
        "content": "<p>No, I use <code>summable</code></p>",
        "id": 211609722,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1601380088
    },
    {
        "content": "<p>Ok, so we still have this big undergrad gap.</p>",
        "id": 211609952,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1601380306
    },
    {
        "content": "<p>If someone states basic definitions for series, I'd be more than happy to translate as much as possible of my series course to mathlib. But that works only if no one needs them soon, since I'm quite busy for the moment so this might take some time :(</p>",
        "id": 211674244,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1601408713
    },
    {
        "content": "<p>I noticed on the undergraduate list \"Ring Theory: Algebra: algebra over a commutative ring.\" is listed as missing. How are we meant to interpret that? We certainly have the definition, and quite a bit of material about algebras. Should we just link to the definition and be done? Or is there some other milestone that we have or haven't reached?</p>",
        "id": 212146001,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1601687773
    },
    {
        "content": "<p>I'd link to the definition.</p>",
        "id": 212146809,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1601689241
    },
    {
        "content": "<p>Or is this because we don't have the non-unital non-assoc non-comm version of algebras?</p>",
        "id": 212152077,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601698056
    },
    {
        "content": "<p>Is <code>sl_2</code> an <em>algebra</em> over <code>complex</code>? In Lean it can't be with our current definitions.</p>",
        "id": 212152086,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601698079
    },
    {
        "content": "<p>We have noncommutative algebras (once upon a time we didn't).</p>\n<p>I'm pretty unconvinced that there deserves to be a typeclass uniting associative algebras and Lie algebras.</p>\n<p>Our lack of non-unital algebras does have me slightly worried. We bake in unitality very early.</p>",
        "id": 212152514,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1601698846
    },
    {
        "content": "<p>Are you going to PR non-unital rings?</p>",
        "id": 212156312,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1601706739
    },
    {
        "content": "<p>Hint: the list of undergrad math that we do have mentions \"associative algebra over a commutative ring\" . The key word is associative.</p>",
        "id": 212160261,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1601713239
    },
    {
        "content": "<p>We can still decide that associative algebra <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>∪</mo></mrow><annotation encoding=\"application/x-tex\">\\cup</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.55556em;vertical-align:0em;\"></span><span class=\"mord\">∪</span></span></span></span> Lie algebra is a good enough approximation, but some people will strongly disagree.</p>",
        "id": 212160284,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1601713309
    },
    {
        "content": "<p>What properties (besides definition) do you think are required to claim this item?</p>",
        "id": 212160415,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1601713553
    },
    {
        "content": "<p>Good question. The honest answer would be to have a definition <em>and</em> to have Lie algebras and associative algebras using it, but that would be a huge refactor and may bring only pain.</p>",
        "id": 212160482,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1601713633
    },
    {
        "content": "<p>So I guess that having the definition would be good enough.</p>",
        "id": 212160488,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1601713649
    },
    {
        "content": "<p>Honest math question: do people use non-assoc algebras apart from Lie algebras? I don't think I've ever met one outside of Lie theory.</p>",
        "id": 212160573,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601713736
    },
    {
        "content": "<p>Ooh, I guess the octonions are something? But then... I've never used those either.</p>",
        "id": 212160583,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601713755
    },
    {
        "content": "<p>Random google answer <a href=\"https://www.math.uci.edu/~brusso/BremnerEtAl35pp.pdf\">https://www.math.uci.edu/~brusso/BremnerEtAl35pp.pdf</a></p>",
        "id": 212160593,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1601713797
    },
    {
        "content": "<p>But it's a bit silly in the undergrad list, especially since Lie algebra do not appear anywhere in this list.</p>",
        "id": 212160651,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1601713856
    },
    {
        "content": "<p>The entry in our source list is \"Notion d’algèbre (associative ou non) sur un anneau commutatif.\" But then the only explicit examples of algebras are endomorphisms and polynomials.</p>",
        "id": 212160726,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1601713978
    },
    {
        "content": "<p>Maybe we should just remove this item, or replace it with Lie algebra since we have associative algebras elsewhere in the list.</p>",
        "id": 212160739,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1601714039
    },
    {
        "content": "<p>I like the idea of replacing it with Lie algebra</p>",
        "id": 212160846,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601714190
    },
    {
        "content": "<p>Let's add a comment in the YAML where we justify that change</p>",
        "id": 212160853,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601714202
    },
    {
        "content": "<p>What's left for a non-everything algebra <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span>? Just an <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span>-bilinear map <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo>×</mo><mi>A</mi><mo>→</mo><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A \\times A \\to A</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span>?</p>",
        "id": 212169649,
        "sender_full_name": "Reid Barton",
        "timestamp": 1601728573
    },
    {
        "content": "<p>Do we have them?</p>",
        "id": 212169663,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601728620
    },
    {
        "content": "<p>I guess so... we have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Create a bilinear map from a function that is linear in each component. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">mk₂</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">N</span> <span class=\"bp\">→</span> <span class=\"n\">P</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">H1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">m₁</span> <span class=\"n\">m₂</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">m₁</span> <span class=\"bp\">+</span> <span class=\"n\">m₂</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">m₁</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"n\">m₂</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">H2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">:</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">•</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">•</span> <span class=\"n\">f</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">H3</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">m</span> <span class=\"n\">n₁</span> <span class=\"n\">n₂</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">n₁</span> <span class=\"bp\">+</span> <span class=\"n\">n₂</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">m</span> <span class=\"n\">n₁</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"n\">m</span> <span class=\"n\">n₂</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">H4</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">:</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">•</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">•</span> <span class=\"n\">f</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→ₗ</span> <span class=\"n\">N</span> <span class=\"bp\">→ₗ</span> <span class=\"n\">P</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"bp\">...</span><span class=\"o\">]</span>\n</code></pre></div>\n\n<p>and</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">lift.equiv</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">→ₗ</span> <span class=\"n\">N</span> <span class=\"bp\">→ₗ</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"bp\">≃ₗ</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">⊗</span> <span class=\"n\">N</span> <span class=\"bp\">→ₗ</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"bp\">...</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 212169939,
        "sender_full_name": "Reid Barton",
        "timestamp": 1601729024
    },
    {
        "content": "<p>I guess what we don't have is the property that an existing map <code>M -&gt; N -&gt; P</code> is bilinear, like you would expect in the algebraic hierarchy: <code>(A : Type) [add_comm_group A] [module R A] [has_mul A] [is_bilinear_mul R A]</code>.</p>",
        "id": 212170313,
        "sender_full_name": "Reid Barton",
        "timestamp": 1601729669
    }
]