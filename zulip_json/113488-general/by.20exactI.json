[
    {
        "content": "<p>I have a question for Lean hackers (<span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> <span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span>  etc).<br>\nHere is the main statement from LTE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">main</span> <span class=\"o\">[</span><span class=\"n\">BD.suitable</span> <span class=\"n\">c'</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"n\">r'</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">r</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">r'</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">&lt;</span> <span class=\"n\">r'</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">r'</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span>\n  <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span><span class=\"o\">)],</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">c₀</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">S</span><span class=\"o\">],</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">NormedGroup</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">normed_with_aut</span> <span class=\"n\">r</span> <span class=\"n\">V</span><span class=\"o\">],</span>\n  <span class=\"kd\">by</span> <span class=\"n\">exactI</span> <span class=\"o\">(</span><span class=\"n\">Mbar_system</span> <span class=\"n\">V</span> <span class=\"n\">S</span> <span class=\"n\">r</span> <span class=\"n\">r'</span> <span class=\"n\">BD</span> <span class=\"n\">c'</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">is_bdd_exact_for_bdd_degree_above_idx</span> <span class=\"n\">k</span> <span class=\"n\">m</span> <span class=\"n\">c₀</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>All of this looks pretty reasonable, but the <code>by exactI</code> is of course a bit annoying.</p>\n<p>Do you think we can change Lean so that it will trigger a cache reset when it parses <code>[normed_with_aut r V]</code> (or any other <code>[foobar]</code>) after <code>:</code>?</p>\n<p>I realise that this would lead to 3 extra cache resets in the current statement... is that expensive?</p>",
        "id": 222904065,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1610735906
    },
    {
        "content": "<p>It's not impossible.  The real question is: how important is this to you given that it will be fixed in <span aria-label=\"four leaf clover\" class=\"emoji emoji-1f340\" role=\"img\" title=\"four leaf clover\">:four_leaf_clover:</span> and that we have a workaround in <span aria-label=\"three\" class=\"emoji emoji-0033-20e3\" role=\"img\" title=\"three\">:three:</span>?</p>",
        "id": 222904183,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1610735952
    },
    {
        "content": "<p>You can also make notation if you find the current workaround to be too ugly.</p>",
        "id": 222904221,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1610735973
    },
    {
        "content": "<p>How would that work?</p>",
        "id": 222904249,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1610735984
    },
    {
        "content": "<p>You mean some notation for the <code>by exactI</code>?</p>",
        "id": 222904280,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1610735994
    },
    {
        "content": "<p>I think you can do this using user notation.</p>",
        "id": 222904473,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1610736056
    },
    {
        "content": "<p>I don't know what you have in mind, sorry</p>",
        "id": 222904729,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1610736144
    },
    {
        "content": "<p>This seems to work, you just need to adapt it to exactI:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">tactic</span> <span class=\"n\">expr</span>\n<span class=\"kn\">open</span> <span class=\"n\">lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">lean.parser</span>\n<span class=\"kn\">open</span> <span class=\"n\">interactive</span>\n<span class=\"kn\">open</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">reserve</span> <span class=\"kd\">prefix</span> <span class=\"bp\">`♯ᵢ</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">100</span>\n\n<span class=\"kd\">@[user_notation]</span>\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">exact_notation</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"bp\">$</span> <span class=\"n\">tk</span> <span class=\"s2\">\"♯ᵢ\"</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">lean.parser.pexpr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">parser</span> <span class=\"n\">pexpr</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n<span class=\"n\">expr.macro</span> <span class=\"n\">d</span> <span class=\"o\">[</span><span class=\"n\">_</span><span class=\"o\">]</span> <span class=\"bp\">←</span> <span class=\"n\">pure</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">skip</span><span class=\"o\">),</span>\n<span class=\"n\">pure</span> <span class=\"bp\">$</span> <span class=\"n\">expr.macro</span> <span class=\"n\">d</span> <span class=\"o\">[</span><span class=\"n\">const</span> <span class=\"bp\">``</span><span class=\"n\">tactic.interactive.exact</span> <span class=\"o\">[]</span> <span class=\"o\">(</span><span class=\"n\">cast</span> <span class=\"n\">undefined</span> <span class=\"n\">e.reflect</span><span class=\"o\">)]</span>\n\n<span class=\"k\">#check</span> <span class=\"bp\">♯ᵢ</span> <span class=\"mi\">1</span>\n</code></pre></div>",
        "id": 222906492,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1610736864
    },
    {
        "content": "<p>Ooh wow! I would have never been able to write that myself</p>",
        "id": 222906533,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1610736885
    },
    {
        "content": "<p>I'll try it out</p>",
        "id": 222906596,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1610736910
    },
    {
        "content": "<p>Yes, I would have liked to write <code> ``(by exact %%e) </code>, but lean doesn't let me do that.</p>",
        "id": 222906597,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1610736911
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> if I replace <code>by exactI</code> with <code>♯ᵢ</code> then I get <code>unexpected token</code></p>",
        "id": 222907025,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1610737084
    },
    {
        "content": "<p>sorry, that was a copy-paste error... let me try better</p>",
        "id": 222907690,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1610737316
    },
    {
        "content": "<p>With</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[user_notation]</span>\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">exact_notation</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"bp\">$</span> <span class=\"n\">tk</span> <span class=\"s2\">\"♯ᵢ\"</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">lean.parser.pexpr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">parser</span> <span class=\"n\">pexpr</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n<span class=\"n\">expr.macro</span> <span class=\"n\">d</span> <span class=\"o\">[</span><span class=\"n\">_</span><span class=\"o\">]</span> <span class=\"bp\">←</span> <span class=\"n\">pure</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">skip</span><span class=\"o\">),</span>\n<span class=\"n\">pure</span> <span class=\"bp\">$</span> <span class=\"n\">expr.macro</span> <span class=\"n\">d</span> <span class=\"o\">[</span><span class=\"n\">const</span> <span class=\"bp\">`</span><span class=\"n\">tactic.interactive.exactI</span> <span class=\"o\">[]</span> <span class=\"o\">(</span><span class=\"n\">cast</span> <span class=\"n\">undefined</span> <span class=\"n\">e.reflect</span><span class=\"o\">)]</span>\n</code></pre></div>\n<p>it works! <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> thanks a lot, this is very nice indeed!</p>",
        "id": 222908190,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1610737472
    },
    {
        "content": "<p>You should also change <code>lean.parser.pexpr</code> to <code>(lean.parser.pexpr 0)</code> (then it parses more like <code>$</code> or <code>by exactI</code>)</p>",
        "id": 222908384,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1610737555
    },
    {
        "content": "<p>aah, cool, let me try that</p>",
        "id": 222908627,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1610737657
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">main</span> <span class=\"o\">[</span><span class=\"n\">BD.suitable</span> <span class=\"n\">c'</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"n\">r'</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">r</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">r'</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">&lt;</span> <span class=\"n\">r'</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">r'</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span>\n  <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span><span class=\"o\">)],</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">c₀</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">S</span><span class=\"o\">],</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">NormedGroup</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">normed_with_aut</span> <span class=\"n\">r</span> <span class=\"n\">V</span><span class=\"o\">],</span><span class=\"bp\">​</span>\n    <span class=\"o\">(</span><span class=\"n\">Mbar_system</span> <span class=\"n\">V</span> <span class=\"n\">S</span> <span class=\"n\">r</span> <span class=\"n\">r'</span> <span class=\"n\">BD</span> <span class=\"n\">c'</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">is_bdd_exact_for_bdd_degree_above_idx</span> <span class=\"n\">k</span> <span class=\"n\">m</span> <span class=\"n\">c₀</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>\n<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> this is awesome!</p>",
        "id": 222908841,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1610737740
    },
    {
        "content": "<ol>\n<li>yes, that is totally a zero-width space after that final <code>,</code></li>\n<li>this statement looks a lot better</li>\n<li>this also solves another annoying bug: with <code>by exactI</code> if you Ctrl-clicked on <code>is_bdd_exact_for_bdd_degree_above_idx</code> it would go to the definition of <code>exactI</code> instead of the definition that you actually want. Now \"Go to definition\" works as expected</li>\n</ol>",
        "id": 222909087,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1610737834
    },
    {
        "content": "<p>Of course, a better solution would be to have explicit <code>k</code> and <code>c₀</code> in terms of <code>m</code>, and put everything left of the colon :-)</p>",
        "id": 222913765,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1610739699
    },
    {
        "content": "<p>I do not yet have enough understanding of the proof to know whether that is an option</p>",
        "id": 222914005,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1610739793
    },
    {
        "content": "<p>Maybe explicit can even mean <code>classical.some</code>?</p>",
        "id": 222914075,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1610739826
    },
    {
        "content": "<p>But I guess we still need to understand what properties of <code>k</code> are needed :)</p>",
        "id": 222914174,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1610739861
    },
    {
        "content": "<p>I'm pretty sure the proof has to give an explicit <code>k</code>, because you couldn't do a proof by contradiction by quantifying over every type and every normed group like that (no way to take a limit and argue that the limit has a nice behavior, as one often does in proofs that give something non-explicit). Although this \"explicit\" might be completely untractable :-)</p>",
        "id": 222914521,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1610740017
    }
]