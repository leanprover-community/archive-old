[
    {
        "content": "<p>I know this is probably dependent type theory 101, but I've realised that as a mathematician I am only really interested in structures, and hence don't have a good understanding of recursors [my excitement in discovering that I could do induction on the reals was rather punctured when I realised the recursor was \"if it's true for all equivalence classes of Cauchy sequences, then it's true for all reals\"].</p>\n<p>Q1) The recursor for <code>eq</code> is basically the assertion that if <code>x = y</code> then there's a map <code>C x -&gt; C y</code> where C is Sort-valued (indeed I've been telling the 1st years that transitivity of = is proved by induction on =). But I can't convince myself that this should be the recursor, which just means that I don't understand the precise algorithm which goes from the definition of the inductive type to the definition of the recursor. Where do I learn more about that? Is it easy to see if you think about things the right way?</p>\n<p>Q2) <code>=</code> is a prop and <code>or</code> is as well. But <code>or</code> only eliminates to Prop, and <code>=</code> seems to eliminate to Sort. What is the difference? This might just be Q1 again.</p>",
        "id": 179096325,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572044636
    },
    {
        "content": "<p>Recursors for propositions make more sense if you look at the <code>drec</code> recursor.</p>",
        "id": 179096477,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1572044790
    },
    {
        "content": "<p>For Q2 the difference is that <code>or</code> has two constructors and <code>eq</code> has one.</p>",
        "id": 179096519,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1572044865
    },
    {
        "content": "<p>Also, every argument to the constructor is either a proposition or mentioned in the Type of the output.</p>",
        "id": 179096576,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1572044898
    },
    {
        "content": "<p>Mario's paper has the generic algorithm</p>",
        "id": 179096981,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1572045422
    },
    {
        "content": "<p><a href=\"https://github.com/digama0/lean-type-theory\" target=\"_blank\" title=\"https://github.com/digama0/lean-type-theory\">https://github.com/digama0/lean-type-theory</a></p>",
        "id": 179096991,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1572045430
    },
    {
        "content": "<p>I find it quite hard to read personally.</p>",
        "id": 179097068,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1572045506
    },
    {
        "content": "<p>For <code>eq</code>, the key is to notice that <code>eq</code> is not the inductive type, <code>eq a : A -&gt; Prop</code> is. It has one constructor, <code>refl : (eq a) a</code>. So suppose you have a dependent family <code>C : Pi (b : A), eq a b -&gt; Prop</code>, and you want to prove it holds true \"everywhere\", that is, <code>\\all b h, C b h</code>. Since <code>h : eq a b</code>, and there is \"only one\" equality in the inductive family, namely <code>h = (refl : eq a a)</code>, then it suffices to prove <code>C a (refl a)</code>. And that's the recursor: <code>C a (refl a) -&gt; \\all b (h : a = b), C b h</code>. If you ignore the last argument, it says <code>C a -&gt; a = b -&gt; C b</code>.</p>",
        "id": 179097117,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572045580
    },
    {
        "content": "<p>Sorry about the readability; chapter 2 was intended to be terse so that it can be used as a reference. It's not the best source for motivation</p>",
        "id": 179097178,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572045635
    },
    {
        "content": "<p>Thanks for these comments. I will go away and think more.</p>",
        "id": 179097409,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572045925
    },
    {
        "content": "<p>I'm trying to get a better understanding of recursors too. If I understand correctly, <code>rec</code> is the fundamental recursor from which the other recursors are defined. Is that correct?</p>\n<p>Playing around, it seems that:</p>\n<ul>\n<li><code>rec</code>, <code>rec_on</code>, and <code>cases_on</code> are defined for all inductive types,</li>\n<li><code>binduction_on</code> and <code>brec_on</code> are defined if the type has a recursive constructor, and</li>\n<li><code>dcases_on</code>, <code>drec</code>, and <code>drec_on</code> are defined if the type is in <code>Prop</code>.</li>\n</ul>\n<p>Is that correct?</p>\n<p>If so, it would be great if there was a list of simple examples of each recursor in action. For instance, give a simple example of a proof by <code>dcases_on</code> that is nicer than the (nicest) proof of the same result by <code>rec</code>.</p>",
        "id": 241426015,
        "sender_full_name": "Gihan Marasingha",
        "timestamp": 1622741974
    },
    {
        "content": "<p>I don't know the story at all about exactly what the system generates (eg when you get a <code>no_confusion</code> or whatever) but I do know that everything is built from <code>rec</code>. You can use try things like <code>#print nat.rec_on</code> and see its definition and then<code>#print nat.rec</code> and see something completely different.</p>",
        "id": 241468257,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622762019
    },
    {
        "content": "<p>Thanks. I'm probably wasting my time with this as I only see one use (outside of the <code>induction'</code> tactic definition) of <code>dcases_on</code> in  mathlib . I wonder if it's only there to help with constructing induction tactics.</p>",
        "id": 241469829,
        "sender_full_name": "Gihan Marasingha",
        "timestamp": 1622763235
    }
]