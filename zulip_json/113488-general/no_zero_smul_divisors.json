[
    {
        "content": "<p>we have a fair few theorems stating that some algebra map is injective. we also have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/no_zero_smul_divisors\">docs#no_zero_smul_divisors</a>, which is essentially that fact but made available to TC; can we start adding instances such as <code>no_zero_smul_divisors A K</code> for <code>is_fraction_ring A K</code>? (<a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_fraction_ring.injective\">docs#is_fraction_ring.injective</a>)? If so, should we also _remove_ these explicit <code>algebra_map_injective</code>s and use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/no_zero_smul_divisors.algebra_map_injective\">docs#no_zero_smul_divisors.algebra_map_injective</a>? In that case, should we even rename this to <code>algebra_map_injective</code>, and then basically have it documented that if you want <code>injective(algebra_map)</code>, you should basically try this magic incantation? Or is that too noob-unfriendly</p>",
        "id": 266089994,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1640491707
    },
    {
        "content": "<p>I'm very happy with any solution, but I'd quite like the instances... I'll put a poll up too</p>",
        "id": 266090010,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1640491740
    },
    {
        "content": "<p>/poll What to do with injective <code>algebra_map</code>s?<br>\nMove everything to <code>no_smul_zero_divisors</code> + rename <code>no_smul_zero_divisors.algebra_map_injective</code><br>\nMove everything to <code>no_smul_zero_divisors</code> without the rename<br>\nLeave both options available<br>\nDon't move anything to <code>no_smul_zero_divisors</code></p>",
        "id": 266090080,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1640491849
    },
    {
        "content": "<p>Why didn't we make <code>function.injective</code> a class in the first place?</p>",
        "id": 266090272,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1640492204
    },
    {
        "content": "<p>My fuzzy memory tells me it used to be, then issues came up; maybe this is sort of what Anne's <code>fun_like</code> things are building up to (the \"correct\" approach to turning things like this into classes)</p>",
        "id": 266090617,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1640492890
    },
    {
        "content": "<p>I mean, in general you don't want things to be classes by default because classes are a pain</p>",
        "id": 266091199,
        "sender_full_name": "Reid Barton",
        "timestamp": 1640494150
    },
    {
        "content": "<p>Why so? I've not yet been bitten by a Prop valued class.</p>",
        "id": 266091254,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1640494239
    },
    {
        "content": "<p>They make it harder to just prove stuff</p>",
        "id": 266091267,
        "sender_full_name": "Reid Barton",
        "timestamp": 1640494295
    },
    {
        "content": "<p>Its probably because of my lack of experience that I have not yet ran into any problems, but I think the category theory part of mathlib uses classes quite extensively and yet it is quite easy to use?</p>",
        "id": 266091441,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1640494656
    },
    {
        "content": "<p>I just wanna bump this before I start a refactor and then find out people have opinions on how this should be done</p>",
        "id": 266176387,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1640615234
    },
    {
        "content": "<p>(although maybe this is inadvisable considering how many problems I'm having with this specific class in FLT-regular, c.f. <a href=\"#narrow/stream/113488-general/topic/TC.20hell.20in.20FLT-regular\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/TC.20hell.20in.20FLT-regular</a>)</p>",
        "id": 266176422,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1640615276
    }
]