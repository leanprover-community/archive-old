[
    {
        "content": "<p>Is there any technical obstacle to defining composition on <code>fun_like</code> classes? It'd be nice to compose, e.g., <code>nat.cast_add_monoid_hom</code> with <code>F</code> which is an <code>add_monoid_hom_class F nat A</code>; I guess the output would have to be in <code>F</code></p>",
        "id": 266369456,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1640804053
    },
    {
        "content": "<p>Lack of dot notation, as far as I'm aware. But do ping <span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span></p>",
        "id": 266370473,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640804774
    },
    {
        "content": "<p>You'd need something like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">has_comp</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">FAB</span> <span class=\"n\">FBC</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">FAC</span> <span class=\"o\">:</span> <span class=\"n\">out_param</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">fun_like</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">FAB</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fun_like</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"n\">FBC</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fun_like</span> <span class=\"n\">A</span> <span class=\"n\">C</span> <span class=\"n\">FAC</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">comp</span> <span class=\"o\">:</span> <span class=\"n\">FBC</span> <span class=\"bp\">→</span> <span class=\"n\">FAB</span> <span class=\"bp\">→</span> <span class=\"n\">FAC</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 266379143,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1640812345
    },
    {
        "content": "<p>argh, of course, because if we hardwire <code>add_monoid_hom</code> then we just get back to the same issues again on the output</p>",
        "id": 266380321,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1640813330
    },
    {
        "content": "<p>hmm, although something like this works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">field_theory.abel_ruffini</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">comp</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"n\">F</span> <span class=\"n\">G</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">non_assoc_semiring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">non_assoc_semiring</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">non_assoc_semiring</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">ring_hom_class</span> <span class=\"n\">F</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ring_hom_class</span> <span class=\"n\">G</span> <span class=\"n\">B</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→+*</span> <span class=\"n\">C</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"n\">g</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"n\">map_one'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">map_one</span><span class=\"o\">,</span> <span class=\"n\">function.comp</span><span class=\"o\">],</span>\n  <span class=\"n\">map_mul'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">function.comp_app</span><span class=\"o\">,</span> <span class=\"n\">map_mul</span><span class=\"o\">],</span>\n  <span class=\"n\">map_zero'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">map_zero</span><span class=\"o\">,</span> <span class=\"n\">function.comp</span><span class=\"o\">],</span>\n  <span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">function.comp_app</span><span class=\"o\">,</span> <span class=\"n\">map_add</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 266380689,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1640813671
    },
    {
        "content": "<p>(and it went quite a lot smoother than I expected)</p>",
        "id": 266380696,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1640813681
    },
    {
        "content": "<p>Right, that <code>def</code> could be the field of an instance of my typeclass that says \"any two <code>ring_hom_class</code>es can be composed into a <code>ring_hom</code>\". I guess you might need to use instance priorities to encourage lean to find the strongest bundling possible, such as when the ring_homs are also alg_homs.</p>",
        "id": 266388211,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1640820708
    },
    {
        "content": "<p>Maybe this doesn't scale though.</p>",
        "id": 266388214,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1640820712
    },
    {
        "content": "<p>it's worth trying, anyways; I'll mess with it when I get some chance (not for a while, probably) and probably get slapped with TC issues</p>",
        "id": 266391243,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1640823872
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/.60fun_like.60.20composition/near/266379143\">said</a>:</p>\n<blockquote>\n<p>You'd need something like:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">has_comp</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">FAB</span> <span class=\"n\">FBC</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">FAC</span> <span class=\"o\">:</span> <span class=\"n\">out_param</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">fun_like</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">FAB</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fun_like</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"n\">FBC</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fun_like</span> <span class=\"n\">A</span> <span class=\"n\">C</span> <span class=\"n\">FAC</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">comp</span> <span class=\"o\">:</span> <span class=\"n\">FBC</span> <span class=\"bp\">→</span> <span class=\"n\">FAB</span> <span class=\"bp\">→</span> <span class=\"n\">FAC</span><span class=\"o\">)</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>This is probably the way forward (although you would also need something asserting <code>comp</code> has the correct definition):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">has_comp</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">FAB</span> <span class=\"n\">FBC</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">FAC</span> <span class=\"o\">:</span> <span class=\"n\">out_param</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">fun_like</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">FAB</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fun_like</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"n\">FBC</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fun_like</span> <span class=\"n\">A</span> <span class=\"n\">C</span> <span class=\"n\">FAC</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">comp</span> <span class=\"o\">:</span> <span class=\"n\">FBC</span> <span class=\"bp\">→</span> <span class=\"n\">FAB</span> <span class=\"bp\">→</span> <span class=\"n\">FAC</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">comp_apply</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">comp</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>The main reason I haven't tried doing this full-scale is that we'd have to rewrite basically all of algebra to make use of the new <code>has_comp.comp</code> definition instead of the dot-notationed <code>foo_hom.comp</code>.</p>",
        "id": 266421637,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1640863624
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/.60fun_like.60.20composition/near/266388211\">said</a>:</p>\n<blockquote>\n<p>Right, that <code>def</code> could be the field of an instance of my typeclass that says \"any two <code>ring_hom_class</code>es can be composed into a <code>ring_hom</code>\". I guess you might need to use instance priorities to encourage lean to find the strongest bundling possible, such as when the ring_homs are also alg_homs.</p>\n</blockquote>\n<p>I don't think making completely general instances is a good idea since the <code>out_param</code>s make it extremely fragile. <code>out_param</code>s are filled through unification with the first applicable instances, and the context of the instance parameter is checked later. I suspect even <code>some_lemma_involving_ring_homs (comp alg_hom_1 alg_hom_2)</code> will result in a type error, not a coercion, even if you insert a type ascription. But let me check to make sure...</p>",
        "id": 266421920,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1640863922
    },
    {
        "content": "<p>Although I guess that would be less problematic if the <code>some_lemma_involving_ring_homs</code> actually takes a <code>ring_hom_class</code>.</p>",
        "id": 266422083,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1640864088
    },
    {
        "content": "<p>Here's a toy example that seems to work OK:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">has_comp</span> <span class=\"o\">(</span><span class=\"n\">FAB</span> <span class=\"n\">FBC</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">FAC</span> <span class=\"o\">:</span> <span class=\"n\">out_param</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">comp</span> <span class=\"o\">:</span> <span class=\"n\">FBC</span> <span class=\"bp\">→</span> <span class=\"n\">FAB</span> <span class=\"bp\">→</span> <span class=\"n\">FAC</span><span class=\"o\">)</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">ring_hom</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">to_fun</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n<span class=\"kd\">structure</span> <span class=\"n\">alg_hom</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">to_fun</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n\n\n<span class=\"kd\">class</span> <span class=\"n\">ring_hom_class</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">out_param</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">→</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n<span class=\"kd\">class</span> <span class=\"n\">alg_hom_class</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">out_param</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">→</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[priority 1]</span>\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"n\">FAB</span> <span class=\"n\">FBC</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring_hom_class</span> <span class=\"n\">FAB</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ring_hom_class</span> <span class=\"n\">FBC</span> <span class=\"n\">B</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">has_comp</span> <span class=\"n\">FAB</span> <span class=\"n\">FBC</span> <span class=\"o\">(</span><span class=\"n\">ring_hom</span> <span class=\"n\">A</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">comp</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">g</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">ring_hom_class.coe</span> <span class=\"n\">g</span> <span class=\"bp\">∘</span> <span class=\"n\">ring_hom_class.coe</span> <span class=\"n\">f</span><span class=\"o\">⟩</span> <span class=\"o\">}</span>\n<span class=\"kd\">@[priority 2]</span>\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"n\">FAB</span> <span class=\"n\">FBC</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">alg_hom_class</span> <span class=\"n\">FAB</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">alg_hom_class</span> <span class=\"n\">FBC</span> <span class=\"n\">B</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">has_comp</span> <span class=\"n\">FAB</span> <span class=\"n\">FBC</span> <span class=\"o\">(</span><span class=\"n\">alg_hom</span> <span class=\"n\">A</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">comp</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">g</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">alg_hom_class.coe</span> <span class=\"n\">g</span> <span class=\"bp\">∘</span> <span class=\"n\">alg_hom_class.coe</span> <span class=\"n\">f</span><span class=\"o\">⟩</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">ring_hom.ring_hom_class</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">ring_hom_class</span> <span class=\"o\">(</span><span class=\"n\">ring_hom</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">⟨</span><span class=\"n\">f</span><span class=\"o\">⟩,</span> <span class=\"n\">f</span> <span class=\"o\">}</span>\n<span class=\"kd\">instance</span> <span class=\"n\">alg_hom.ring_hom_class</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">ring_hom_class</span> <span class=\"o\">(</span><span class=\"n\">alg_hom</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">⟨</span><span class=\"n\">f</span><span class=\"o\">⟩,</span> <span class=\"n\">f</span> <span class=\"o\">}</span>\n<span class=\"kd\">instance</span> <span class=\"n\">alg_hom.alg_hom_class</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">alg_hom_class</span> <span class=\"o\">(</span><span class=\"n\">alg_hom</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">⟨</span><span class=\"n\">f</span><span class=\"o\">⟩,</span> <span class=\"n\">f</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">something_involving_ring_homs</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring_hom_class</span> <span class=\"n\">F</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">something_involving_alg_homs</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">alg_hom_class</span> <span class=\"n\">F</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">alg_hom</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">alg_hom</span> <span class=\"n\">B</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">has_comp.comp</span> <span class=\"n\">g</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">has_comp.comp</span> <span class=\"n\">g</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">something_involving_ring_homs</span> <span class=\"o\">(</span><span class=\"n\">has_comp.comp</span> <span class=\"n\">g</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">alg_hom</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">alg_hom</span> <span class=\"n\">B</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">has_comp.comp</span> <span class=\"n\">g</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">has_comp.comp</span> <span class=\"n\">g</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">something_involving_alg_homs</span> <span class=\"o\">(</span><span class=\"n\">has_comp.comp</span> <span class=\"n\">g</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 266422615,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1640864723
    },
    {
        "content": "<p>So as long as we keep the priorities coherent, this seems to work for toy examples.</p>",
        "id": 266422872,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1640865050
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/.60fun_like.60.20composition/near/266379143\">said</a>:</p>\n<blockquote>\n<p>You'd need something like:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">has_comp</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">FAB</span> <span class=\"n\">FBC</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">FAC</span> <span class=\"o\">:</span> <span class=\"n\">out_param</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">fun_like</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">FAB</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fun_like</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"n\">FBC</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fun_like</span> <span class=\"n\">A</span> <span class=\"n\">C</span> <span class=\"n\">FAC</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">comp</span> <span class=\"o\">:</span> <span class=\"n\">FBC</span> <span class=\"bp\">→</span> <span class=\"n\">FAB</span> <span class=\"bp\">→</span> <span class=\"n\">FAC</span><span class=\"o\">)</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Note that a similar trick is used for composition of semilinear maps, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ring_hom_comp_triple\">docs#ring_hom_comp_triple</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_map.comp\">docs#linear_map.comp</a></p>",
        "id": 266441535,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1640882927
    },
    {
        "content": "<p>Is <code>ring_hom_comp_triple</code> the same as <code>is_scalar_tower</code>?</p>",
        "id": 266441655,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1640883028
    },
    {
        "content": "<p>One for algebras, the other for ring homs.</p>",
        "id": 266441666,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1640883045
    },
    {
        "content": "<p>A difference is that the third one (A-C, out of A-B, B-C, A-C) is an out-param in <code>ring_hom_comp_triple</code>, so it can be searched for by Lean.</p>",
        "id": 266441884,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1640883258
    },
    {
        "content": "<p>Is the docstring of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ring_hom_comp_triple\">docs#ring_hom_comp_triple</a> wrong? They're not equivs, right?</p>",
        "id": 266445829,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1640887129
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/.60fun_like.60.20composition/near/266445829\">said</a>:</p>\n<blockquote>\n<p>Is the docstring of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ring_hom_comp_triple\">docs#ring_hom_comp_triple</a> wrong? They're not equivs, right?</p>\n</blockquote>\n<p>Yes, the docstring is wrong, it's a leftover from an early version of the semilinear map refactor where we used ring equivs.</p>",
        "id": 266445877,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1640887197
    },
    {
        "content": "<p>Because you're passing the maps and not the rings, you can do different tricks with out_params.</p>",
        "id": 266445959,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1640887217
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/11150\">#11150</a></p>",
        "id": 266446407,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1640887513
    }
]