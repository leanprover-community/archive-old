[
    {
        "content": "<p>My understanding too is that they're one-constructor inductive types, though there are a couple constraints. There might be others, but I know they can't be recursive, and if the structure is <code>Prop</code>-valued each field must be a <code>Prop</code>. I'm not sure if there's some deep reason for the first constraint, but the second is so that you can get field notation. (That Lean 4 soundness bug from a few months ago had to do with being able to use field notation in cases that violated this constraint.)</p>",
        "id": 284970678,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1654337700
    },
    {
        "content": "<p>I think more-or-less the translation of</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">foo</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo.x</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">foo.mk</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>though with the latter you don't get <code>{ x := ... }</code> notation.</p>",
        "id": 284970855,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1654337954
    },
    {
        "content": "<p>Ok, I think I get it. Like syntactic sugar for a product type or \\Sigma type, with variables and proofs of all the axioms built in.</p>",
        "id": 284970925,
        "sender_full_name": "Bart Michels",
        "timestamp": 1654338033
    },
    {
        "content": "<p>Though <a href=\"https://leanprover-community.github.io/mathlib_docs/find/prod\">docs#prod</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/sigma\">docs#sigma</a> are both defined in Lean using <code>structure</code> -- but yes, <code>structure</code> is for the special case of an inductive type that's some kind of (dependent) product.</p>",
        "id": 284971169,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1654338361
    },
    {
        "content": "<p>As I understand it, the Lean kernel natively knows about inductive types, so structures are very close to being \"real\" mathematical objects for Lean</p>",
        "id": 284971283,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1654338487
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"501306\">Bart Michels</span> has marked this topic as resolved.</p>",
        "id": 284971309,
        "sender_full_name": "Notification Bot",
        "timestamp": 1654338544
    },
    {
        "content": "<p>The Lean frontend also processes <code>inductive</code> declarations into some kind of lower-level inductive type declaration for the kernel, but I'm not really sure what that entails. (The kernel is what does the final verification that the frontend typechecked everything correctly.)</p>",
        "id": 284971382,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1654338629
    },
    {
        "content": "<p>the kernel does not know anything about <code>structure</code>, and so the reduction to one-constructor <code>inductive</code> is indeed done during this lowering. There is essentially no desugaring that happens when you use a regular <code>inductive</code>, it is passed straight on to the kernel, unless it is a nested or mutual inductive in which case it does a simulation in terms of regular (indexed) kernel inductives</p>",
        "id": 284978816,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654347775
    },
    {
        "content": "<p><code>inductive</code> does declare some additional derived operations such as <code>no_confusion</code> though</p>",
        "id": 284979501,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1654348713
    }
]