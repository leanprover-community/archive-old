[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">open</span> <span class=\"n\">tactic</span> <span class=\"n\">expr</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">wat</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"n\">ctx</span> <span class=\"err\">←</span> <span class=\"n\">local_context</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">app</span> <span class=\"n\">ctx</span><span class=\"bp\">.</span><span class=\"n\">head</span> <span class=\"o\">(</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">reverse</span> <span class=\"n\">ctx</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">head</span><span class=\"o\">,</span>\n  <span class=\"n\">type</span> <span class=\"err\">←</span> <span class=\"n\">infer_type</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">trace</span> <span class=\"n\">type</span><span class=\"o\">,</span>\n  <span class=\"n\">skip</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">begins</span>  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">wat</span><span class=\"o\">,</span>  <span class=\"c1\">-- returns ℕ</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>But </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span>  <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"o\">)</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">g</span> <span class=\"n\">a</span>\n</pre></div>\n\n\n<p>returns a type mismatch error?</p>",
        "id": 155291582,
        "sender_full_name": "Koundinya Vajjha",
        "timestamp": 1547675636
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">namespace</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span>\n<span class=\"kn\">open</span> <span class=\"n\">tactic</span> <span class=\"n\">lean</span><span class=\"bp\">.</span><span class=\"n\">parser</span> <span class=\"n\">interactive</span> <span class=\"n\">expr</span>\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">wat</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"n\">ctx</span> <span class=\"err\">←</span> <span class=\"n\">local_context</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">app</span> <span class=\"n\">ctx</span><span class=\"bp\">.</span><span class=\"n\">head</span> <span class=\"o\">(</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">reverse</span> <span class=\"n\">ctx</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">head</span><span class=\"o\">,</span>\n  <span class=\"n\">type</span> <span class=\"err\">←</span> <span class=\"n\">infer_type</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">trace</span> <span class=\"n\">type</span><span class=\"o\">,</span>\n  <span class=\"n\">skip</span>\n<span class=\"kn\">end</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">begins</span>  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">wat</span><span class=\"o\">,</span>  <span class=\"c1\">-- returns ℕ</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 155291781,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1547675779
    },
    {
        "content": "<p>more info:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">namespace</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span>\n<span class=\"kn\">open</span> <span class=\"n\">tactic</span> <span class=\"n\">lean</span><span class=\"bp\">.</span><span class=\"n\">parser</span> <span class=\"n\">interactive</span> <span class=\"n\">expr</span>\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">wat</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"n\">ctx</span> <span class=\"err\">←</span> <span class=\"n\">local_context</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">app</span> <span class=\"n\">ctx</span><span class=\"bp\">.</span><span class=\"n\">head</span> <span class=\"o\">(</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">reverse</span> <span class=\"n\">ctx</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">head</span><span class=\"o\">,</span>\n  <span class=\"n\">type</span> <span class=\"err\">←</span> <span class=\"n\">infer_type</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"k\">let</span> <span class=\"n\">none</span> <span class=\"n\">none</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"err\">%%</span><span class=\"n\">a</span><span class=\"o\">),</span>\n  <span class=\"n\">skip</span>\n<span class=\"kn\">end</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">begins</span>  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">wat</span><span class=\"o\">,</span>\n<span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>tactic state after <code>wat</code>:</p>\n<div class=\"codehilite\"><pre><span></span>f : ℕ → ℕ,\na : bool,\nthis : ℕ := f a\n⊢ Prop\n</pre></div>\n\n\n<p>and error message of lemma after I put <code>sorry</code>:</p>\n<div class=\"codehilite\"><pre><span></span>type mismatch at application\n  f a\nterm\n  a\nhas type\n  bool\nbut is expected to have type\n  ℕ\n</pre></div>",
        "id": 155291999,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1547675952
    },
    {
        "content": "<p>You manually built an <code>expr</code>= supposedly fully elaborated expression, but the <code>expr</code> you constructed is not actually valid. I guess that <code>infer_type</code> assumes the expression is valid and then according to the typing rules its type must be the return type of <code>f</code>. You didn't get an error because you didn't do anything with the <code>expr</code>.</p>",
        "id": 155292170,
        "sender_full_name": "Reid Barton",
        "timestamp": 1547676078
    },
    {
        "content": "<p>Yeah, <code>infer_type</code> doesn't completely type check the expression, otherwise it would be very expensive. There's another tactic called <code>type_check</code> that should fail if you call it on <code>a</code>.</p>",
        "id": 155292366,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1547676260
    },
    {
        "content": "<p>If you used <code>tactic.exact a</code> (supposing you change the goal to <code>nat</code>) then I imagine the tactic would succeed but then you would get a type error at a later stage.</p>",
        "id": 155292374,
        "sender_full_name": "Reid Barton",
        "timestamp": 1547676273
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span>  yeah seems like that's what is happening.</p>",
        "id": 155292406,
        "sender_full_name": "Koundinya Vajjha",
        "timestamp": 1547676304
    },
    {
        "content": "<p>well it's <code>meta</code> so it can be unsound anyway</p>",
        "id": 155292507,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1547676362
    },
    {
        "content": "<p><code>type_check</code> is exactly what I needed.</p>",
        "id": 155292545,
        "sender_full_name": "Koundinya Vajjha",
        "timestamp": 1547676370
    },
    {
        "content": "<p>you aren't actually changing the partially generated proof by <code>trace</code></p>",
        "id": 155292547,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1547676373
    },
    {
        "content": "<p>In general, making applications manually can be difficult. Do it if you're confident in what you're doing, since it will be more efficient. Otherwise <code>mk_app</code> and <code>mk_mapp</code> are your friends. In particular the error messages will be more helpful.</p>",
        "id": 155292687,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1547676491
    },
    {
        "content": "<p>I'm having trouble figuring out how to use <code>mk_app</code>.  I have <code>f : ℕ → ℝ</code> and <code>b : ℕ</code>. How do I use this to make the application <code>f b</code>?</p>",
        "id": 155293217,
        "sender_full_name": "Koundinya Vajjha",
        "timestamp": 1547676990
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">namespace</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span>\n<span class=\"kn\">open</span> <span class=\"n\">tactic</span> <span class=\"n\">lean</span><span class=\"bp\">.</span><span class=\"n\">parser</span> <span class=\"n\">interactive</span> <span class=\"n\">expr</span>\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">wat</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"n\">ctx</span> <span class=\"err\">←</span> <span class=\"n\">local_context</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">expr</span><span class=\"bp\">.</span><span class=\"n\">mk_app</span> <span class=\"n\">ctx</span><span class=\"bp\">.</span><span class=\"n\">head</span> <span class=\"o\">[</span><span class=\"n\">ctx</span><span class=\"bp\">.</span><span class=\"n\">reverse</span><span class=\"bp\">.</span><span class=\"n\">head</span><span class=\"o\">],</span>\n  <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">type_check</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">type</span> <span class=\"err\">←</span> <span class=\"n\">infer_type</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">trace</span> <span class=\"n\">type</span><span class=\"o\">,</span>\n  <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"k\">let</span> <span class=\"n\">none</span> <span class=\"n\">none</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"err\">%%</span><span class=\"n\">a</span><span class=\"o\">),</span>\n  <span class=\"n\">skip</span>\n<span class=\"kn\">end</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">begins</span>  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">wat</span><span class=\"o\">,</span>  <span class=\"c1\">-- returns ℕ</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 155293421,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1547677164
    },
    {
        "content": "<p>Okay that was silly. Thanks <span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span></p>",
        "id": 155293593,
        "sender_full_name": "Koundinya Vajjha",
        "timestamp": 1547677311
    }
]