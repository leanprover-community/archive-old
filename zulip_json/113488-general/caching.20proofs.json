[
    {
        "content": "<p>So I'm moving it here.</p>",
        "id": 134150227,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1537255517
    },
    {
        "content": "<p>From <a href=\"#narrow/stream/113489-new-members/subject/caching.20proofs/near/134150221\" title=\"#narrow/stream/113489-new-members/subject/caching.20proofs/near/134150221\">https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/subject/caching.20proofs/near/134150221</a></p>",
        "id": 134150232,
        "sender_full_name": "Sean Leather",
        "timestamp": 1537255531
    },
    {
        "content": "<p>Thanks.</p>",
        "id": 134150236,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1537255555
    },
    {
        "content": "<p>Yes, that second pass is just unavoidably slow.</p>",
        "id": 134150273,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1537255563
    },
    {
        "content": "<p>So I'm fine if Travis does that, and I never do it.</p>",
        "id": 134150280,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537255577
    },
    {
        "content": "<p>But I think there's still useful information for the user in seeing the first pass succeed.</p>",
        "id": 134150281,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1537255578
    },
    {
        "content": "<p>Or almost never...</p>",
        "id": 134150282,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537255583
    },
    {
        "content": "<p>Yes.</p>",
        "id": 134150283,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1537255588
    },
    {
        "content": "<p>What exactly are you guys referring to when you say “proof cache”?</p>",
        "id": 134150286,
        "sender_full_name": "Sean Leather",
        "timestamp": 1537255610
    },
    {
        "content": "<p>The point of course is to get back as quickly as possible to responsive editing.</p>",
        "id": 134150288,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1537255610
    },
    {
        "content": "<p>(For us poor idiots who use interactive mode, and <em>can't</em>, like some people here, write Lean code while offline. :-)</p>",
        "id": 134150295,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1537255633
    },
    {
        "content": "<p>Of course, olean files _are_ a proof cache.</p>",
        "id": 134150308,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1537255676
    },
    {
        "content": "<p>So the idea might be merely this:</p>",
        "id": 134150312,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1537255682
    },
    {
        "content": "<p>if Lean notices that an olean file is outdated (i.e. the source file, or a dependency source file, is newer)</p>",
        "id": 134150353,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1537255704
    },
    {
        "content": "<p>Do you know about <a href=\"https://github.com/leanprover/lean/issues/1601\" target=\"_blank\" title=\"https://github.com/leanprover/lean/issues/1601\">https://github.com/leanprover/lean/issues/1601</a>? Fixing this issue is part of the Lean 4 plan ifI understand correctly</p>",
        "id": 134150356,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537255712
    },
    {
        "content": "<p><em>before</em> disposing of the olean file it loads it one last time</p>",
        "id": 134150364,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1537255725
    },
    {
        "content": "<p>and tries to use existing proofs for the current set of lemmas, ignoring on the first pass the actual proof term written in the source file (whether generated in term or tactic mode)</p>",
        "id": 134150380,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1537255765
    },
    {
        "content": "<p>but of course eventually there does have to be a second pass that reverifies what the user has written and constructs a new olean.</p>",
        "id": 134150386,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1537255783
    },
    {
        "content": "<blockquote>\n<p>(For us poor idiots who use interactive mode, and <em>can't</em>, like some people here, write Lean code while offline. :-)</p>\n</blockquote>\n<p>Q1 What's \"offline\"? Q2 why can't you write code offline? What is interactive mode?</p>",
        "id": 134150446,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537255809
    },
    {
        "content": "<p>I think \"offline\" here means: Writing code without Lean responding to what you write. (Just using your internal elaborater/kernel to verify your own code.)</p>",
        "id": 134150523,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537255931
    },
    {
        "content": "<p>eew.</p>",
        "id": 134150545,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537255997
    },
    {
        "content": "<p>In particular <span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> appears to have written working code for me without ever running Lean...!</p>",
        "id": 134150547,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1537256005
    },
    {
        "content": "<p>(Sometimes I've been able to tell because of some minor typo, meaning it just barely missed actually compiling. :-)</p>",
        "id": 134150599,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1537256046
    },
    {
        "content": "<p>In Orsay I witnessed Mario writing half a proof while Lean was thinking. He didn't need to go back and change those 5 lines after Lean caught up with him.</p>",
        "id": 134150602,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537256056
    },
    {
        "content": "<p>It's terrifying, isn't it? :-)</p>",
        "id": 134150603,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1537256068
    },
    {
        "content": "<p>Yellow bars just cause my brain to freeze up. :-)</p>",
        "id": 134150610,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1537256096
    },
    {
        "content": "<p>I don't use interactive mode, so I just see walls of errors, not yellow bars.</p>",
        "id": 134150678,
        "sender_full_name": "Sean Leather",
        "timestamp": 1537256186
    },
    {
        "content": "<blockquote>\n<p>I don't use interactive mode, so I just see walls of errors, not yellow bars.</p>\n</blockquote>\n<p>Wait... do you mean that you write Lean the way I would write C or Python?</p>",
        "id": 134150700,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537256247
    },
    {
        "content": "<p>Edit file → Save → Compile/run the file in terminal → Parse errors → Go back to step 1</p>",
        "id": 134150744,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537256284
    },
    {
        "content": "<p>Well... presumably he doesn't actually ever <em>execute</em> any code.</p>",
        "id": 134150745,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1537256284
    },
    {
        "content": "<p>Yep.</p>",
        "id": 134150748,
        "sender_full_name": "Sean Leather",
        "timestamp": 1537256288
    },
    {
        "content": "<p>Well, Sean might, actually. :-)</p>",
        "id": 134150750,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1537256299
    },
    {
        "content": "<p><span class=\"emoji emoji-1f604\" title=\"big smile\">:big_smile:</span></p>",
        "id": 134150751,
        "sender_full_name": "Sean Leather",
        "timestamp": 1537256306
    },
    {
        "content": "<p>Aaahrg... <span class=\"emoji emoji-1f631\" title=\"scream\">:scream:</span> you guys are really crazy...</p>",
        "id": 134150756,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537256331
    },
    {
        "content": "<p>Anyway, I'm not sure if it's the same problem as in interactive mode: I'd like to speed up <code>lean --make</code>.</p>",
        "id": 134150807,
        "sender_full_name": "Sean Leather",
        "timestamp": 1537256407
    },
    {
        "content": "<p>So, it would be nice if I had all of the generated proof terms for, say, mathlib. So, if I make one change, <code>lean</code> doesn't have to recheck entire files.</p>",
        "id": 134150822,
        "sender_full_name": "Sean Leather",
        "timestamp": 1537256449
    },
    {
        "content": "<p>I guess it is the same bottleneck that we are hitting.</p>",
        "id": 134150823,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537256450
    },
    {
        "content": "<p>On the other hand, as Scott said, one small change can change tactics. But I think that should be checked at “release” time.</p>",
        "id": 134150835,
        "sender_full_name": "Sean Leather",
        "timestamp": 1537256475
    },
    {
        "content": "<p>... as opposed to “interactive” time.</p>",
        "id": 134150836,
        "sender_full_name": "Sean Leather",
        "timestamp": 1537256485
    },
    {
        "content": "<p>So, at the very least, I know proof works. But I may need to go back and check a tactic somewhere afterwards.</p>",
        "id": 134150846,
        "sender_full_name": "Sean Leather",
        "timestamp": 1537256518
    },
    {
        "content": "<p>I envision it like having a <code>--fast</code> mode and a <code>--release</code> mode. Names up for debate.</p>",
        "id": 134150900,
        "sender_full_name": "Sean Leather",
        "timestamp": 1537256559
    },
    {
        "content": "<p>We already have trust levels...</p>",
        "id": 134150912,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537256581
    },
    {
        "content": "<p>Or <code>--fast</code> and <code>--full</code> to use alliteration.</p>",
        "id": 134150918,
        "sender_full_name": "Sean Leather",
        "timestamp": 1537256596
    },
    {
        "content": "<p>How do trust levels come into the picture here?</p>",
        "id": 134150922,
        "sender_full_name": "Sean Leather",
        "timestamp": 1537256607
    },
    {
        "content": "<p>Well, you are putting \"trust\" in the cache, right?</p>",
        "id": 134150934,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537256629
    },
    {
        "content": "<p>I could envision a new trust level, that will trust cached proofs.</p>",
        "id": 134150977,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537256651
    },
    {
        "content": "<p>Does that make sense?</p>",
        "id": 134150983,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537256676
    },
    {
        "content": "<p>Perhaps. I don't have a clear picture of what that means.</p>",
        "id": 134150989,
        "sender_full_name": "Sean Leather",
        "timestamp": 1537256687
    },
    {
        "content": "<p>I'm not thinking of trust. I'm thinking of checking only what changed within a single file (to simplify the problem).</p>",
        "id": 134151006,
        "sender_full_name": "Sean Leather",
        "timestamp": 1537256748
    },
    {
        "content": "<p>Here's something that doesn't work for all changes, but might work for some: run a quick pass over the interfaces of a file's cached proof terms, check if they differ from the source file, build the ones that differ or are not found in the cache.</p>",
        "id": 134151145,
        "sender_full_name": "Sean Leather",
        "timestamp": 1537256959
    },
    {
        "content": "<p>After that, perhaps you could more lazily regenerate the other proof terms of the file.</p>",
        "id": 134151220,
        "sender_full_name": "Sean Leather",
        "timestamp": 1537257052
    },
    {
        "content": "<p>Also, perhaps the generated proof cache could keep track of failed proofs and Lean would try to rebuild those first.</p>",
        "id": 134151306,
        "sender_full_name": "Sean Leather",
        "timestamp": 1537257156
    },
    {
        "content": "<p>That might improve interactive responsiveness.</p>",
        "id": 134151318,
        "sender_full_name": "Sean Leather",
        "timestamp": 1537257174
    },
    {
        "content": "<p>I wouldn't mind if Lean did low-priority (in the sense of CPU scheduler) checks to see if my new <code>@[simp]</code> lemma broke a proof <code>by tidy</code> in some files that I didn't have open. But as soon as I make a change in my file the <code>--fast</code> Lean should do a high-priority check to get me back to responsive editing as soon as possible.</p>",
        "id": 134151328,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537257193
    },
    {
        "content": "<p>Yeah, that's the idea, though I was actually thinking <code>--fast</code> wouldn't even try to check the effect of <code>@[simp]</code> lemmas or other things that change how tactics work. But I could see it going either way.</p>",
        "id": 134151406,
        "sender_full_name": "Sean Leather",
        "timestamp": 1537257300
    },
    {
        "content": "<blockquote>\n<p>Do you know about <a href=\"https://github.com/leanprover/lean/issues/1601\" target=\"_blank\" title=\"https://github.com/leanprover/lean/issues/1601\">https://github.com/leanprover/lean/issues/1601</a>? Fixing this issue is part of the Lean 4 plan ifI understand correctly</p>\n</blockquote>\n<p>That definitely looks relevant! Thanks <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span></p>",
        "id": 134151413,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537257305
    },
    {
        "content": "<p>Here are two possibilities:</p>\n<p>1. An interactive mode that optimizes for checking work-in-progress proofs and reduces the priority of full-file and full-library builds.<br>\n2. A fast mode that only checks for work-in-progress proofs and builds a single file at a time and a full mode that builds everything.</p>",
        "id": 134151538,
        "sender_full_name": "Sean Leather",
        "timestamp": 1537257509
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110045\">@Sean Leather</span> Isn't that already what the ideas do? I feel like lean-mode does it at least.</p>\n<p><span class=\"user-mention\" data-user-id=\"110524\">@Scott Morrison</span> I do use the interactive modes but sometimes I'm too lazy to go back to emacs to write my code snippets. I'm glad I don't have too bad a track record :)</p>",
        "id": 134200810,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1537314025
    },
    {
        "content": "<blockquote>\n<p>Isn't that already what the ideas do? I feel like lean-mode does it at least.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> What are “the ideas”?</p>\n<p>I don't know exactly what does what, so I'm just throwing out some thoughts. I do know that if I make a change in a large file in mathlib and build with <code>lean --make</code>, I see that the entire file has to be built before it gets to my change. That's what I would propose improving.</p>\n<p>As I said above, I don't use the interactive approach, and I don't know if the problem I have is the same problem others are discussing.</p>",
        "id": 134212305,
        "sender_full_name": "Sean Leather",
        "timestamp": 1537335639
    },
    {
        "content": "<p>I misspelled IDE</p>",
        "id": 134213789,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1537338320
    },
    {
        "content": "<p>So what is your workflow like if you don't use them?</p>",
        "id": 134213795,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1537338332
    },
    {
        "content": "<p>Edit in <code>vim</code>, run <code>leanpkg build</code>.</p>",
        "id": 134213841,
        "sender_full_name": "Sean Leather",
        "timestamp": 1537338393
    },
    {
        "content": "<p>That sounds painful</p>",
        "id": 134214709,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1537339934
    },
    {
        "content": "<p><span class=\"emoji emoji-1f937\" title=\"shrug\">:shrug:</span> Works well for me.</p>",
        "id": 134214720,
        "sender_full_name": "Sean Leather",
        "timestamp": 1537339990
    },
    {
        "content": "<p>I print the files out, cross out some lines in pencil and add others in, then compile in my head.</p>",
        "id": 134214780,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537340113
    },
    {
        "content": "<p>that's how we did it in the old days before computers</p>",
        "id": 134214784,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537340129
    },
    {
        "content": "<p>How did you print files without computers? <span class=\"emoji emoji-1f4bb\" title=\"computer\">:computer:</span> <span class=\"emoji emoji-27a1\" title=\"right\">:right:</span> <span class=\"emoji emoji-1f5a8\" title=\"printer\">:printer:</span></p>",
        "id": 134214792,
        "sender_full_name": "Sean Leather",
        "timestamp": 1537340161
    },
    {
        "content": "<p>I use my typewriter</p>",
        "id": 134214831,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537340169
    },
    {
        "content": "<p>Oh, they usually refer to that as typing, not printing, right?</p>",
        "id": 134214849,
        "sender_full_name": "Sean Leather",
        "timestamp": 1537340189
    },
    {
        "content": "<p>He has a printing press à la Gutenberg in his cellar (-;</p>",
        "id": 134214864,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537340209
    },
    {
        "content": "<p>I guess they call it that nowadays.</p>",
        "id": 134214865,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537340210
    },
    {
        "content": "<p>Amateurs. Here's my workflow: <a href=\"https://xkcd.com/378/\" target=\"_blank\" title=\"https://xkcd.com/378/\">https://xkcd.com/378/</a></p>",
        "id": 134214929,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1537340298
    },
    {
        "content": "<p><code>C-x M-c M-butterfly</code></p>",
        "id": 134215138,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537340611
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110045\">@Sean Leather</span> I think this is a case in which, before you see what you're missing out on, you don't know that you're missing out. I find it incredibly useful when writing tactic that, as I type and change my scripts, I can see the print out of the example I'm using the tactic on. That save a whole lot of time</p>",
        "id": 134256955,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1537378835
    }
]