[
    {
        "content": "<p>Hi,<br>\n<code>use</code> is giving me a weird error in a particular situation. I'm trying to formalize a proof that a set of axioms is satisfiable. Satisfiability is an existential, so Im starting the proof with <code>use \\N</code>. I believe this should type check with my definition of satisfiability:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">satisfiable</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">Ax</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"bp\">→</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">N</span><span class=\"o\">),</span> <span class=\"bp\">∀</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"n\">Ax</span><span class=\"o\">,</span> <span class=\"n\">φ</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">φ</span> <span class=\"n\">N</span> <span class=\"n\">S</span> <span class=\"n\">z</span>\n</code></pre></div>\n<p>the goal is <code>satisfiable {Zer, Sur, Dni}</code>. Am I misusing <code>Type*</code> or the existential quantifier?</p>\n<p><code>existsi</code> tells me the expected type is <code>Type</code>, but even though <code>nat</code> has type <code>Type</code>, it tells me there is a type mismatch.</p>",
        "id": 264015803,
        "sender_full_name": "Bruno Bandeira Monteiro",
        "timestamp": 1638890604
    },
    {
        "content": "<p>Can you post a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>? If I cut and paste your code  as it stands I get errors (different to the errors you're seeing)</p>",
        "id": 264015926,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1638890650
    },
    {
        "content": "<p>i.e. can you post enough so that I can see the error you want me to see, and not random unrelated errors about not knowing what Ax is.</p>",
        "id": 264016040,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1638890707
    },
    {
        "content": "<p>ok, </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.set.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.nat.basic</span>\n<span class=\"kn\">open</span> <span class=\"n\">nat</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Ax</span> <span class=\"o\">:=</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"bp\">→</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">N</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"kd\">def</span> <span class=\"n\">satisfiable</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">Ax</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"bp\">→</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">N</span><span class=\"o\">),</span> <span class=\"bp\">∀</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"n\">Ax</span><span class=\"o\">,</span> <span class=\"n\">φ</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">φ</span> <span class=\"n\">N</span> <span class=\"n\">S</span> <span class=\"n\">z</span>\n<span class=\"kd\">def</span> <span class=\"n\">Zer</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"bp\">→</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">N</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">N</span><span class=\"o\">),</span> <span class=\"n\">S</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">z</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">ex1</span> <span class=\"o\">:</span> <span class=\"n\">satisfiable</span> <span class=\"o\">{</span><span class=\"n\">Zer</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">use</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>edit : fixed the mwe</p>",
        "id": 264016385,
        "sender_full_name": "Bruno Bandeira Monteiro",
        "timestamp": 1638890866
    },
    {
        "content": "<p>ah sorry, 1 moment</p>",
        "id": 264016442,
        "sender_full_name": "Bruno Bandeira Monteiro",
        "timestamp": 1638890884
    },
    {
        "content": "<p>there</p>",
        "id": 264017521,
        "sender_full_name": "Bruno Bandeira Monteiro",
        "timestamp": 1638891313
    },
    {
        "content": "<p><code>use</code> generally provides poor error messages. If you get an error from <code>use</code>, better try:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n</code></pre></div>\n<p>and now we get a better error message:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">Exists.intro</span> <span class=\"n\">ℕ</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">ℕ</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Type</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"mi\">1</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Type</span> <span class=\"n\">u_1</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u_1</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">satisfiable</span> <span class=\"o\">{</span><span class=\"n\">Zer</span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 264020817,
        "sender_full_name": "Reid Barton",
        "timestamp": 1638892568
    },
    {
        "content": "<p>I suggest not using <code>Type*</code> in situations like this, under an existential, unless you really know what you're doing (and probably even not then).</p>",
        "id": 264020877,
        "sender_full_name": "Reid Barton",
        "timestamp": 1638892594
    },
    {
        "content": "<p>In short the error is because Lean determines the type of a <code>lemma</code> before looking at its definition, and here it thinks the type should be universe-polymorphic because there is nothing to determine the universe variable in <code>satisfiable</code>. But then the proof beginning with <code>ℕ</code> only works for a specific universe.</p>",
        "id": 264021264,
        "sender_full_name": "Reid Barton",
        "timestamp": 1638892755
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"462202\">Bruno Bandeira Monteiro</span> <a href=\"#narrow/stream/113488-general/topic/failing.20to.20instantiate.2C.20type.20mismatch/near/264015803\">said</a>:</p>\n<blockquote>\n<p><code>existsi</code> tells me the expected type is <code>Type</code>, but even though <code>nat</code> has type <code>Type</code>, it tells me there is a type mismatch.</p>\n</blockquote>\n<p>Oh yes, and <code>existsi</code> is also known to give poor errors...</p>",
        "id": 264022366,
        "sender_full_name": "Reid Barton",
        "timestamp": 1638893150
    },
    {
        "content": "<p>Ok,<br>\nI'm not sure I understood what lean is doing there. But I changed <code>Type* </code> to <code>Type</code> and it worked. I guess using <code>Type*</code> would be unnecessarily general, and maybe I misunderstood what <code>Type* </code> actually is.</p>",
        "id": 264022409,
        "sender_full_name": "Bruno Bandeira Monteiro",
        "timestamp": 1638893160
    },
    {
        "content": "<p>Thanks for the help!</p>",
        "id": 264022554,
        "sender_full_name": "Bruno Bandeira Monteiro",
        "timestamp": 1638893202
    },
    {
        "content": "<p><code>def satisfiable (A : set Ax) := ∃ (N : Type*)  ...</code> doesn't mean<br>\n\"<code>A</code> is satisfiable if there is a type <code>N</code> in some universe such that ...\"</p>",
        "id": 264022589,
        "sender_full_name": "Reid Barton",
        "timestamp": 1638893215
    },
    {
        "content": "<p>instead, it means<br>\n<code>def {u} satisfiable (A : set Ax) := ∃ (N : Type u) ...</code> which is<br>\n\"for each universe <code>u</code>, <code>A</code> is satisfiable with respect to universe <code>u</code> if there is a type <code>N</code> in universe <code>u</code> such that ...\"</p>",
        "id": 264022703,
        "sender_full_name": "Reid Barton",
        "timestamp": 1638893257
    },
    {
        "content": "<p>Really? What does it mean then?</p>",
        "id": 264022707,
        "sender_full_name": "Bruno Bandeira Monteiro",
        "timestamp": 1638893257
    },
    {
        "content": "<p>ahh</p>",
        "id": 264022892,
        "sender_full_name": "Bruno Bandeira Monteiro",
        "timestamp": 1638893325
    },
    {
        "content": "<p>Ok, I think I see</p>",
        "id": 264022944,
        "sender_full_name": "Bruno Bandeira Monteiro",
        "timestamp": 1638893343
    },
    {
        "content": "<p>and then<br>\n<code>lemma ex1 : satisfiable {Zer} := ...</code><br>\nwas inferred as <code>lemma {u} ex1 : satisfiable.{u} {Zer} := ...</code>, i.e., <code>{Zer}</code> is satisfiable with respect to any universe <code>u</code>, so you had better come up with a type in an arbitrary universe <code>u</code> (which is possible to do, but probably not what you are interested in)</p>",
        "id": 264022971,
        "sender_full_name": "Reid Barton",
        "timestamp": 1638893355
    },
    {
        "content": "<p>In fact <code>Type*</code> is just another way to write <code>Type _</code>, meaning \"Lean please figure out what univese goes here\". The name <code>Type*</code> can be misleading.</p>",
        "id": 264023364,
        "sender_full_name": "Reid Barton",
        "timestamp": 1638893484
    },
    {
        "content": "<p>ah ok,<br>\nI thought it was the 'union' of Type n for all n \\in \\N</p>",
        "id": 264023651,
        "sender_full_name": "Bruno Bandeira Monteiro",
        "timestamp": 1638893589
    },
    {
        "content": "<p>Thanks a lot for the explanations.</p>",
        "id": 264023938,
        "sender_full_name": "Bruno Bandeira Monteiro",
        "timestamp": 1638893708
    }
]