[
    {
        "content": "<p>I am trying to define denotational semantics of simply typed lambda calculus using lean 3.49.1 with mathlib (commit 22feff54d70f45fe7f4dfdd7770e32e13f1aa3d4).<br>\nHowever, lean fails to prove an obvious equation about structural recursion at the bottom of the following code.<br>\nWhat do you think is the reason?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">category_theory.closed.cartesian</span>\n\n<span class=\"kn\">section</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Member</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">head</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">as</span><span class=\"o\">},</span> <span class=\"n\">Member</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">::</span><span class=\"n\">as</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">tail</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">bs</span><span class=\"o\">},</span> <span class=\"n\">Member</span> <span class=\"n\">a</span> <span class=\"n\">bs</span> <span class=\"bp\">→</span> <span class=\"n\">Member</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">::</span><span class=\"n\">bs</span><span class=\"o\">)</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Ty</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">base</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">Ty</span>\n<span class=\"bp\">|</span> <span class=\"n\">fn</span> <span class=\"o\">:</span> <span class=\"n\">Ty</span> <span class=\"bp\">→</span> <span class=\"n\">Ty</span> <span class=\"bp\">→</span> <span class=\"n\">Ty</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Term</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">Ty</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Ty</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">var</span>   <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">ty</span> <span class=\"n\">ctx</span><span class=\"o\">},</span> <span class=\"n\">Member</span> <span class=\"n\">ty</span> <span class=\"n\">ctx</span> <span class=\"bp\">→</span> <span class=\"n\">Term</span> <span class=\"n\">ctx</span> <span class=\"n\">ty</span>\n<span class=\"bp\">|</span> <span class=\"n\">app</span>   <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">ctx</span> <span class=\"n\">dom</span> <span class=\"n\">ran</span><span class=\"o\">},</span> <span class=\"n\">Term</span> <span class=\"n\">ctx</span> <span class=\"o\">(</span><span class=\"n\">Ty.fn</span> <span class=\"n\">dom</span> <span class=\"n\">ran</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Term</span> <span class=\"n\">ctx</span> <span class=\"n\">dom</span> <span class=\"bp\">→</span> <span class=\"n\">Term</span> <span class=\"n\">ctx</span> <span class=\"n\">ran</span>\n<span class=\"bp\">|</span> <span class=\"n\">lam</span>   <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">ctx</span> <span class=\"n\">dom</span> <span class=\"n\">ran</span><span class=\"o\">},</span> <span class=\"n\">Term</span> <span class=\"o\">(</span><span class=\"n\">dom</span> <span class=\"o\">::</span> <span class=\"n\">ctx</span><span class=\"o\">)</span> <span class=\"n\">ran</span> <span class=\"bp\">→</span> <span class=\"n\">Term</span> <span class=\"n\">ctx</span> <span class=\"o\">(</span><span class=\"n\">Ty.fn</span> <span class=\"n\">dom</span> <span class=\"n\">ran</span><span class=\"o\">)</span>\n\n<span class=\"kd\">end</span>\n\n<span class=\"kn\">section</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span> <span class=\"n\">category_theory.category</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">v</span> <span class=\"n\">u</span> <span class=\"n\">w</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">category.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">limits.has_finite_products</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">category_theory.cartesian_closed</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">C</span><span class=\"o\">)</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">Ty.denote</span> <span class=\"o\">:</span> <span class=\"n\">Ty</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">C</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">Ty.base</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">Ty.fn</span> <span class=\"n\">t1</span> <span class=\"n\">t2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">t1.denote</span> <span class=\"bp\">⟹</span> <span class=\"n\">t2.denote</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">ctx_denote</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">Ty</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">C</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"n\">limits.terminal</span> <span class=\"n\">C</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">::</span><span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">limits.prod</span> <span class=\"o\">(</span><span class=\"n\">Ty.denote</span> <span class=\"n\">a</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ctx_denote</span> <span class=\"n\">xs</span><span class=\"o\">)</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">term_var_proj</span> <span class=\"o\">{</span><span class=\"n\">ty</span> <span class=\"o\">:</span> <span class=\"n\">Ty</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">ctx</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">Ty</span> <span class=\"n\">β</span><span class=\"o\">)},</span> <span class=\"n\">Member</span> <span class=\"n\">ty</span> <span class=\"n\">ctx</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">ctx_denote</span> <span class=\"n\">a</span> <span class=\"n\">ctx</span> <span class=\"bp\">⟶</span> <span class=\"n\">Ty.denote</span> <span class=\"n\">a</span> <span class=\"n\">ty</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"n\">Member.head</span> <span class=\"o\">:=</span> <span class=\"n\">limits.prod.fst</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">::</span><span class=\"n\">tl</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Member.tail</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span> <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">ctx_denote</span><span class=\"o\">],</span> <span class=\"n\">exact</span> <span class=\"n\">limits.prod.snd</span> <span class=\"kd\">end</span> <span class=\"bp\">≫</span> <span class=\"n\">term_var_proj</span> <span class=\"n\">m</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">Term.denote</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">ctx</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">Ty</span> <span class=\"n\">β</span><span class=\"o\">)}</span> <span class=\"o\">{</span><span class=\"n\">ty</span> <span class=\"o\">:</span> <span class=\"n\">Ty</span> <span class=\"n\">β</span><span class=\"o\">},</span> <span class=\"n\">Term</span> <span class=\"n\">ctx</span> <span class=\"n\">ty</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">ctx_denote</span> <span class=\"n\">a</span> <span class=\"n\">ctx</span> <span class=\"bp\">⟶</span> <span class=\"n\">Ty.denote</span> <span class=\"n\">a</span> <span class=\"n\">ty</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">ctx</span> <span class=\"n\">ty</span> <span class=\"o\">(</span><span class=\"n\">Term.var</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">term_var_proj</span> <span class=\"n\">a</span> <span class=\"n\">m</span>  <span class=\"c1\">--  Term.denote a (Term.var m) is defined here.</span>\n<span class=\"bp\">|</span> <span class=\"n\">ctx</span> <span class=\"n\">cod</span> <span class=\"o\">(</span><span class=\"n\">Term.app</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">limits.prod.lift</span> <span class=\"n\">n.denote</span> <span class=\"n\">m.denote</span> <span class=\"bp\">≫</span> <span class=\"kd\">begin</span> <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">Ty.denote</span><span class=\"o\">],</span> <span class=\"n\">exact</span> <span class=\"o\">((</span><span class=\"n\">exp.ev</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"kd\">end</span>\n<span class=\"bp\">|</span> <span class=\"n\">ctx</span> <span class=\"o\">(</span><span class=\"n\">Ty.fn</span> <span class=\"n\">dom</span> <span class=\"n\">cod</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Term.lam</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">Ty.denote</span><span class=\"o\">],</span>\n    <span class=\"n\">apply</span> <span class=\"n\">cartesian_closed.curry</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">m_denote</span> <span class=\"o\">:=</span> <span class=\"n\">Term.denote</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n    <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">ctx_denote</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">m_denote</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">m_denote</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">ctx</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">Ty</span> <span class=\"n\">β</span><span class=\"o\">)}</span> <span class=\"o\">{</span><span class=\"n\">ty</span> <span class=\"o\">:</span> <span class=\"n\">Ty</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Member</span> <span class=\"n\">ty</span> <span class=\"n\">ctx</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Term.denote</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">Term.var</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">term_var_proj</span> <span class=\"n\">a</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"c1\">-- type mismatch, term</span>\n<span class=\"c1\">--   rfl</span>\n<span class=\"c1\">-- has type</span>\n<span class=\"c1\">--   ?m_2 = ?m_2</span>\n<span class=\"c1\">-- but is expected to have type</span>\n<span class=\"c1\">--   Term.denote a (Term.var m) = term_var_proj a m</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 313674645,
        "sender_full_name": "Satoshi Kura",
        "timestamp": 1670069005
    }
]