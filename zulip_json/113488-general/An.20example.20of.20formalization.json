[
    {
        "content": "<p>I am going to talk about formalized math on Thursday at the European congrees of mathematics and I'd like to show some examples of Lean. I can produce my own, but I am likely going to miss some idioms as I have not used Lean much (yet). Is there a nice soul that could produce a Lean snippet which expresses the following:</p>\n<blockquote>\n<p><em>If f is linear then f(2 · x + y) = 2 · f(x) + f(y).</em></p>\n</blockquote>\n<p>Feel free to interpret \"linear\" so that it fits existing things in the library. (I had vector spaces in mind.) The point of the example should be to show what needs to be done when one takes a statement and formalizes it in a proof assistant. I am trying to showcase existing technology (type classes, notations, implicit arguments, et.c) Many thanks!</p>\n<p>For reference, here is how I intend to elaborate the statement in \"human math\":</p>\n<blockquote>\n<p><em>If K is a field, U and V are vector spaces over K, and f : |U| → |V| is linear then, for all x, y ∈ |U|, f(2_K ·_U x +_U y) = 2_K ·_V f(x) +_V f(y).</em></p>\n</blockquote>",
        "id": 243527449,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1624373210
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">W</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">K</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">K</span> <span class=\"n\">W</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"n\">W</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">v1</span> <span class=\"n\">v2</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">•</span> <span class=\"n\">v1</span> <span class=\"bp\">+</span> <span class=\"n\">v2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">•</span> <span class=\"n\">f</span> <span class=\"n\">v1</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"n\">v2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 243528279,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1624373523
    },
    {
        "content": "<p><code>V →ₗ[K] W</code> is notation for the type of <code>K</code>-linear maps from <code>V</code> to <code>W</code></p>",
        "id": 243528392,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1624373571
    },
    {
        "content": "<p>Beware that <code>2</code> is interpreted as a natural number, the proof is more specifically:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">linear_map.map_add</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">•</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">linear_map.map_smul_of_tower</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 243528469,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1624373602
    },
    {
        "content": "<p>This works if you want to use the <code>2 : K</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">W</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">K</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">K</span> <span class=\"n\">W</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"n\">W</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">v1</span> <span class=\"n\">v2</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">((</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">v1</span> <span class=\"bp\">+</span> <span class=\"n\">v2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">f</span> <span class=\"n\">v1</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"n\">v2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 243528630,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1624373658
    }
]