[
    {
        "content": "<p>Hi friends, I'm wondering what's the right way to let Lean accept recursive calls with list.map?<br>\nFor example:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span>     <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"err\">$</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">bar</span> <span class=\"o\">[</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"o\">]</span>\n</pre></div>\n\n\n<p>Lean is not happy with the above one.</p>",
        "id": 129302165,
        "sender_full_name": "Minchao Wu",
        "timestamp": 1531060306
    },
    {
        "content": "<p>This works for this example. In general I think you pretty cannot do recursive calls with <code>list.map</code> and you have to find some different way of defining the function.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span>     <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"err\">$</span> <span class=\"o\">[</span><span class=\"n\">bar</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">bar</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">bar</span> <span class=\"n\">n</span><span class=\"o\">]</span>\n</pre></div>",
        "id": 129306754,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1531068652
    },
    {
        "content": "<p>Yes, your solution definitely works. But I am curious about why it cannot be done with maps.</p>",
        "id": 129307191,
        "sender_full_name": "Minchao Wu",
        "timestamp": 1531069546
    },
    {
        "content": "<p>It might be possible, but it's not easy. The equation compiler knows your function is well-founded if the recursive call applies it to a nat less than <code>n + 1</code>. Here your function <code>bar</code> is not actually applied to anything, so it cannot prove it is well founded.</p>",
        "id": 129307283,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1531069686
    },
    {
        "content": "<p>That's true. Usually if Lean cannot prove well-foundedness then it throws a different error asking me for a proof, but for this one it just gives up. I guess the reason is exactly that <code>bar</code> is not applied to anything as you said.</p>",
        "id": 129307398,
        "sender_full_name": "Minchao Wu",
        "timestamp": 1531070036
    },
    {
        "content": "<p>I found a way </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"n\">def</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span>     <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">length</span>\n  <span class=\"o\">(</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">pmap</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">hm</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">bar</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">lt_succ_self</span><span class=\"o\">]))</span>\n</pre></div>",
        "id": 129307555,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1531070307
    },
    {
        "content": "<p>Great, this looks like a general solution. Thanks!</p>",
        "id": 129307790,
        "sender_full_name": "Minchao Wu",
        "timestamp": 1531070841
    }
]