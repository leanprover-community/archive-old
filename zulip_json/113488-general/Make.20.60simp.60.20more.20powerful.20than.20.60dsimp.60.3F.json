[
    {
        "content": "<p>Would it be possible to change the behaviour of <code>simp</code> (i.e. the C++ implementation), so that whenever it is trying to use a <code>_refl_lemma</code>, it behaves as <code>dsimp</code>?</p>",
        "id": 209160433,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1599278906
    },
    {
        "content": "<p>It would be great to avoid the need for <code>dsimp, simp</code> which we see so often in the category theory library, and explained in this library note:<br>\n<a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/category_theory/category/default.lean#L249\">https://github.com/leanprover-community/mathlib/blob/master/src/category_theory/category/default.lean#L249</a></p>",
        "id": 209160446,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1599278967
    },
    {
        "content": "<p>(I've just found myself writing <code>simp, dsimp, simp</code>.)</p>",
        "id": 209160449,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1599278985
    },
    {
        "content": "<p>Ideally, <code>simp</code> should traverse the term, recursing into <em>all</em> subterms, but when the subterm is not one provided by the congr lemma it should switch to \"definitional mode\" where it only does things dsimp would do. That algorithm yields <code>simp</code> and <code>dsimp</code> as special cases</p>",
        "id": 209160866,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1599279621
    },
    {
        "content": "<p>Alternatively, we can just make <code>simp'</code> a wrapper around <code>repeat {simp &lt;|&gt; dsimp}</code> which is a lot easier to do. :)</p>",
        "id": 209160886,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1599279686
    },
    {
        "content": "<p>I'd certainly be happy with that. Obviously it's slower.</p>",
        "id": 209160933,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1599279729
    },
    {
        "content": "<p>Presumably it would need to support <code>simp' [X, Y, Z]</code> and <code>simp' only [X, Y, Z]</code> and so on.</p>",
        "id": 209160953,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1599279783
    },
    {
        "content": "<p>One of the overhead there is building the <code>simp_lemmas</code> lists multiple times which we can skip. Where is the rest of the inefficiency coming from?</p>",
        "id": 209161008,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1599279876
    },
    {
        "content": "<p>Multiple traversals of the expression.</p>",
        "id": 209161010,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1599279897
    },
    {
        "content": "<p>But that's already part of what <code>simp</code> does. Do we cut down the number if we merge the two tasks? I'm not sure because <code>simp</code> and <code>dsimp</code> have distinct tasks. <code>simp</code> has to be careful not to break the type correctness of the expression while <code>dsimp</code> can be more aggressive.</p>",
        "id": 209161075,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1599280045
    },
    {
        "content": "<p>the approach I described doesn't break type correctness</p>",
        "id": 209161114,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1599280086
    },
    {
        "content": "<p>two traversals is more expensive than one</p>",
        "id": 209161118,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1599280116
    },
    {
        "content": "<p>the repeat actually has more failed traversals than that</p>",
        "id": 209161125,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1599280151
    },
    {
        "content": "<p>Your estimate is that you'd roughly cut down the number of traversals by half?</p>",
        "id": 209161128,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1599280161
    },
    {
        "content": "<p>at the very least the repeat must do 3 traversals for a successful run</p>",
        "id": 209161158,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1599280203
    },
    {
        "content": "<p>Don't <code>simp</code> and <code>dsimp</code> by themselves only ever do a single traverse? Sometimes they act multiple times on the same subexpression, but they never \"go back\".</p>",
        "id": 209161172,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1599280213
    },
    {
        "content": "<p>No, on their own they also repeat. They traverse bottom up and then they try again. They stop when they can't make any more changes</p>",
        "id": 209161177,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1599280288
    },
    {
        "content": "<p>(unless you turn on the <code>single_pass</code> option)</p>",
        "id": 209161181,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1599280312
    },
    {
        "content": "<p>consider a case where we want to do <code>simp, dsimp, simp</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">simp</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">succeed</span>\n<span class=\"n\">simp</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">fail</span>\n<span class=\"n\">dsimp</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">succeed</span>\n<span class=\"n\">simp</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">succeed</span>\n<span class=\"n\">simp</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">fail</span>\n<span class=\"n\">dsimp</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">fail</span>\n</code></pre></div>\n\n\n<p>that's 6 traversals where 3 were done before and 1 could do the job in principle</p>",
        "id": 209161219,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1599280333
    },
    {
        "content": "<p>I thought <code>single_pass</code> just prevented it from rewriting in an already rewritten subexpression</p>",
        "id": 209161221,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1599280349
    },
    {
        "content": "<p>I've been trying to read <a href=\"https://github.com/leanprover-community/lean/blob/master/src/library/tactic/simplify.cpp\">https://github.com/leanprover-community/lean/blob/master/src/library/tactic/simplify.cpp</a> looking for the spot where <code>simp</code> stops looking inwards because it can't find an appropriate <code>congr</code>. And failing. :-)</p>",
        "id": 209161230,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1599280401
    },
    {
        "content": "<p>Look for the function <code>visit_app</code></p>",
        "id": 209161270,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1599280466
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I believe you. I don't have a firm grip on the number of passes that <code>simp</code> performs on average. If you have the time to implement your idea, I'd love to see the difference</p>",
        "id": 209161281,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1599280538
    },
    {
        "content": "<p>It is possible to get fewer than 6 calls with better state management even if you only treat <code>simp</code> and <code>dsimp</code> as black boxes</p>",
        "id": 209161319,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1599280586
    },
    {
        "content": "<p>if you assume that <code>simp</code> never succeeds twice in a row (which is false, but close enough) then you can get it down to 4 calls in the example</p>",
        "id": 209161324,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1599280644
    },
    {
        "content": "<p>That would be worth experimenting with. This is something that can be done without going into the C++ code I think</p>",
        "id": 209161375,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1599280717
    },
    {
        "content": "<p>So is Mario's suggestion to revert to <code>dsimp</code> mode if congr lemmas aren't available a suggestion to add a line before<br>\n<a href=\"https://github.com/leanprover-community/lean/blob/master/src/library/tactic/simplify.cpp#L769\">https://github.com/leanprover-community/lean/blob/master/src/library/tactic/simplify.cpp#L769</a></p>",
        "id": 209161379,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1599280733
    },
    {
        "content": "<p>that does definitional simplification on <code>arg</code>?</p>",
        "id": 209161386,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1599280764
    },
    {
        "content": "<p>I think we want to enhance the <code>defeq_canonize</code> step at the beginning of that function</p>",
        "id": 209161432,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1599280846
    },
    {
        "content": "<p>For comparison, you can look at what <code>dsimplify.cpp</code> does in <code>visit_app</code></p>",
        "id": 209161482,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1599280956
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean/blob/master/src/library/tactic/dsimplify.cpp#L188\">https://github.com/leanprover-community/lean/blob/master/src/library/tactic/dsimplify.cpp#L188</a></p>",
        "id": 209161487,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1599280992
    },
    {
        "content": "<p>I think you're right Mario, defeq canonize is a good place to look</p>",
        "id": 209161489,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1599280998
    },
    {
        "content": "<p>what's not clear to me is whether to basically call <code>dsimp</code> on the expression, or just do a head simplification; the first sounds like it might have exponential blowup but the second is probably incomplete</p>",
        "id": 209161538,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1599281070
    },
    {
        "content": "<p>In order to incorporate it in the traversal, we need to analyze the congr lemma to find all arguments that <em>don't</em> change, and <code>dsimp</code> in them before traversing the hypotheses of the congr lemma</p>",
        "id": 209161592,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1599281180
    },
    {
        "content": "<p>Is it really necessary to do this analysis? I feel like we'd get most of the benefit just by doing the <code>dsimp</code> on the <code>arg</code> of a dependent function, when <code>simp</code> has fallen back just using <code>congr_fun</code>.</p>",
        "id": 209161697,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1599281460
    },
    {
        "content": "<p>It comes up pretty frequently in automatically generated congr lemmas, for example <code>a = b -&gt; c = d -&gt; @add A inst a c = @add A inst b d</code></p>",
        "id": 209161747,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1599281536
    },
    {
        "content": "<p>here if we loop over just the hypotheses we will miss <code>A</code> and <code>inst</code></p>",
        "id": 209161751,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1599281558
    },
    {
        "content": "<p>We can probably modify <a href=\"https://github.com/leanprover-community/lean/blob/master/src/library/tactic/simplify.cpp#L355-L356\"><code>try_auto_eq_congr</code></a> to do something else in the <code>Fixed</code> and <code>FixedNoParam</code> cases</p>",
        "id": 209161810,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1599281713
    },
    {
        "content": "<p>Going back to the <code>repeat {simp &lt;|&gt; dsimp}</code> suggestion, I think</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">core</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">alternate</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span>\n<span class=\"bp\">|</span> <span class=\"n\">t₁</span> <span class=\"n\">t₂</span> <span class=\"o\">:=</span> <span class=\"n\">t₁</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">try</span> <span class=\"o\">(</span><span class=\"n\">alternate</span> <span class=\"n\">t₂</span> <span class=\"n\">t₁</span><span class=\"o\">)</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">alternate&#39;</span> <span class=\"o\">(</span><span class=\"n\">t₁</span> <span class=\"n\">t₂</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">t₁</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">try</span> <span class=\"o\">(</span><span class=\"n\">alternate</span> <span class=\"n\">t₂</span> <span class=\"n\">t₁</span><span class=\"o\">))</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"o\">(</span><span class=\"n\">t₂</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">try</span> <span class=\"o\">(</span><span class=\"n\">alternate</span> <span class=\"n\">t₁</span> <span class=\"n\">t₂</span><span class=\"o\">))</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">simp&#39;</span> <span class=\"o\">:=</span> <span class=\"n\">alternate&#39;</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">dsimp</span><span class=\"o\">]</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">tactic</span>\n</code></pre></div>\n\n\n<p>would work.</p>",
        "id": 209162437,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1599282927
    },
    {
        "content": "<p>Should I bother dressing this up (e.g. argument handling  an interactive <code>simp'</code>)?</p>",
        "id": 209162442,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1599282957
    },
    {
        "content": "<p>(Of course I'd be perfectly happy if making a PR of this provoked someone into working out how to improve <code>simp</code> in core, thereby making it obsolete!)</p>",
        "id": 209162497,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1599283029
    },
    {
        "content": "<p>But on the other hand if people wouldn't want to allow <code>simp'</code> as a valid terminal step in proofs I'm not keen to do the work.</p>",
        "id": 209162505,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1599283063
    },
    {
        "content": "<p>That looks like a reasonable workaround to me. Given how prevalent the pattern is in category theory code, that looks like a nice improvement. And we could support it with <code>squeeze_*</code> too</p>",
        "id": 209162786,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1599283570
    },
    {
        "content": "<p>The <code>hsimp</code> tactic did this in '18: <a href=\"https://github.com/gebner/hott3/blob/7ead7a8a2503049eacd45cbff6587802bae2add2/src/hott/init/meta/simp.lean\">https://github.com/gebner/hott3/blob/7ead7a8a2503049eacd45cbff6587802bae2add2/src/hott/init/meta/simp.lean</a></p>",
        "id": 209171340,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1599300703
    }
]