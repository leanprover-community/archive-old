[
    {
        "content": "<p>What's going on here?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.normed_space.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"bp\">𝕜</span> <span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- ok</span>\n<span class=\"kd\">example</span>\n  <span class=\"o\">[</span><span class=\"n\">nondiscrete_normed_field</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">normed_group</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">semi_normed_space</span> <span class=\"bp\">𝕜</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n  <span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">module</span> <span class=\"bp\">𝕜</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span>\n\n<span class=\"c1\">-- fails</span>\n<span class=\"kd\">example</span>\n  <span class=\"o\">[</span><span class=\"n\">nondiscrete_normed_field</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">normed_group</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">semi_normed_space</span> <span class=\"bp\">𝕜</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n  <span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">module</span> <span class=\"bp\">𝕜</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span>\n\n<span class=\"sd\">/-- This is `semi_normed_space.to_module` with stronger assumptions -/</span>\n<span class=\"kd\">instance</span> <span class=\"n\">semi_normed_space.to_module'</span>\n  <span class=\"o\">[</span><span class=\"n\">normed_field</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">normed_group</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semi_normed_space</span> <span class=\"bp\">𝕜</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">module</span> <span class=\"bp\">𝕜</span> <span class=\"n\">F</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span>\n\n<span class=\"c1\">-- now works</span>\n<span class=\"kd\">example</span>\n  <span class=\"o\">[</span><span class=\"n\">nondiscrete_normed_field</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">normed_group</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">semi_normed_space</span> <span class=\"bp\">𝕜</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n  <span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">module</span> <span class=\"bp\">𝕜</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span>\n</code></pre></div>",
        "id": 245151099,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625649184
    },
    {
        "content": "<p>It's probably an instance of <a href=\"https://github.com/leanprover/lean4/issues/509\">https://github.com/leanprover/lean4/issues/509</a> . This has been fixed in Lean 4, but backporting the fix is out of my league.</p>",
        "id": 245152408,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1625649941
    },
    {
        "content": "<p>I realized I ran into this before in <a href=\"#narrow/stream/113489-new-members/topic/decidable_pred.20instance.20not.20found.20by.20typeclass.20search/near/219962294\">https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/decidable_pred.20instance.20not.20found.20by.20typeclass.20search/near/219962294</a></p>",
        "id": 245152692,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625650106
    },
    {
        "content": "<p>Adding this new <code>semi_normed_space.to_module'</code> instance seems to remove the need for a handful of <code>@</code> symbols, so seems to me like a good idea.</p>",
        "id": 245176934,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625663613
    },
    {
        "content": "<p>I just bumped into the following, which I'm guessing is related:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.normed_space.basic</span>\n\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"bp\">𝕜</span> <span class=\"n\">M</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">normed_field</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">normed_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"bp\">𝕜</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"bp\">𝕜</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">apply_instance</span> <span class=\"c1\">-- Works</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">normed_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"n\">ℝ</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">apply_instance</span> <span class=\"c1\">-- Fails :-(</span>\n</code></pre></div>",
        "id": 281296989,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1651756378
    },
    {
        "content": "<p>Knowing (vaguely) that there are issues (fixed in Lean 4) with typeclass inference and pi types, I'm not so surprised that my second <code>example</code> fails. However conditioning on my first <code>example</code> succeeding, I am.</p>",
        "id": 281297170,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1651756468
    },
    {
        "content": "<p>FWIW, this is a proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">normed_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"n\">ℝ</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">haveI</span> <span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"n\">ℝ</span> <span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span><span class=\"o\">,</span>\n  <span class=\"n\">apply_instance</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 281297231,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1651756504
    },
    {
        "content": "<p>I wonder is this somehow connected with noncomputability weirdness: we need to use <code>real.normed_field</code> for this to work.</p>",
        "id": 281297425,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1651756603
    },
    {
        "content": "<p>So should this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">normed_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"n\">ℝ</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"n\">ℝ</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">apply_instance</span>\n</code></pre></div>\n<p>be an explicit instance? (this fixes the problem in this instance, unsurprisingly). Sometimes you see this sort of stuff in mathlib (e.g. at one point data.rat.basic had a ton of this stuff) with comments such as \"short cutting type class inference\".</p>",
        "id": 281300352,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1651758110
    },
    {
        "content": "<p>Right, this is really my question. I think your <code>foo</code> should be an instance but I'll wait a few hours before I take any action to see if there are other remarks.</p>",
        "id": 281300977,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1651758392
    },
    {
        "content": "<p>oh those <code>rat</code> instances are <a href=\"https://github.com/leanprover-community/mathlib/blob/057e0283c5a877ddf8286ee8168c7fb17703349e/src/data/rat/basic.lean#L469-L489\">still there</a>! What's that all about?</p>",
        "id": 281304814,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1651760228
    },
    {
        "content": "<p>I think I ran into this over and over again in my matrix exponential PR (<a href=\"https://github.com/leanprover-community/mathlib/pull/13520\">#13520</a>)</p>",
        "id": 281308643,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651761916
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/blob/53b1437ed8455a51cf10af033e299a8101b2f6b4/src/analysis/normed_space/matrix_exponential.lean#L64-L103\">https://github.com/leanprover-community/mathlib/blob/53b1437ed8455a51cf10af033e299a8101b2f6b4/src/analysis/normed_space/matrix_exponential.lean#L64-L103</a></p>",
        "id": 281309129,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651762104
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/14013\">#14013</a></p>",
        "id": 281551453,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1651944817
    },
    {
        "content": "<p>Repeating my comment from the PR, this instance also works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">function.module</span>\n  <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">β</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">apply_instance</span>\n</code></pre></div>",
        "id": 281557094,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651952395
    },
    {
        "content": "<p>Note we already have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/function.algebra\">docs#function.algebra</a> in the same style</p>",
        "id": 281557134,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651952404
    }
]