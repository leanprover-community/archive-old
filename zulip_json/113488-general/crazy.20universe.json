[
    {
        "content": "<p>Does anyone understands why Lean gets crazy with universes in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/topological_add_group.of_comm_of_nhds_zero\">docs#topological_add_group.of_comm_of_nhds_zero</a>? I can fix this by replacing <code>G : Type*</code>  by <code>G : Type u</code>  but it would be nice to understand when this happens because it really causes a lot of confusion when it strikes.</p>",
        "id": 249420298,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1628892610
    },
    {
        "content": "<p>You can also fix it by moving <code>G</code> to a variables statement</p>",
        "id": 249420509,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1628892774
    },
    {
        "content": "<p>Could we have a linter for this? I can't imagine a situation where a parameter can have such a universe annotation.</p>",
        "id": 249420878,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1628892984
    },
    {
        "content": "<p>It seems to not realize that once it's solved for the universe variables it can generalize <code>max u_1 u_2</code> (or, rather, it found too specialized of a solution through whatever algorithm it uses).  Here's the <code>pp.universes</code> output at the beginning of that lemma's proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u_1</span> <span class=\"n\">u_2</span><span class=\"o\">),</span>\n<span class=\"n\">_inst_5</span> <span class=\"o\">:</span> <span class=\"n\">comm_group.</span><span class=\"o\">{(</span><span class=\"n\">max</span> <span class=\"n\">u_1</span> <span class=\"n\">u_2</span><span class=\"o\">)}</span> <span class=\"n\">G</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_6</span> <span class=\"o\">:</span> <span class=\"n\">topological_space.</span><span class=\"o\">{(</span><span class=\"n\">max</span> <span class=\"n\">u_1</span> <span class=\"n\">u_2</span><span class=\"o\">)}</span> <span class=\"n\">G</span><span class=\"o\">,</span>\n<span class=\"n\">hmul</span> <span class=\"o\">:</span>\n  <span class=\"n\">tendsto.</span><span class=\"o\">{(</span><span class=\"n\">max</span> <span class=\"n\">u_1</span> <span class=\"n\">u_2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u_1</span> <span class=\"n\">u_2</span><span class=\"o\">)}</span>\n    <span class=\"o\">(</span><span class=\"n\">uncurry.</span><span class=\"o\">{(</span><span class=\"n\">max</span> <span class=\"n\">u_1</span> <span class=\"n\">u_2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u_1</span> <span class=\"n\">u_2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u_1</span> <span class=\"n\">u_2</span><span class=\"o\">)}</span> <span class=\"n\">has_mul.mul.</span><span class=\"o\">{(</span><span class=\"n\">max</span> <span class=\"n\">u_1</span> <span class=\"n\">u_2</span><span class=\"o\">)})</span>\n    <span class=\"o\">(</span><span class=\"bp\">𝓝</span> <span class=\"mi\">1</span> <span class=\"bp\">×ᶠ</span> <span class=\"bp\">𝓝</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">𝓝</span> <span class=\"mi\">1</span><span class=\"o\">),</span>\n<span class=\"n\">hinv</span> <span class=\"o\">:</span> <span class=\"n\">tendsto.</span><span class=\"o\">{(</span><span class=\"n\">max</span> <span class=\"n\">u_1</span> <span class=\"n\">u_2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u_1</span> <span class=\"n\">u_2</span><span class=\"o\">)}</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span> <span class=\"mi\">1</span><span class=\"o\">),</span>\n<span class=\"n\">hleft</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x₀</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"bp\">𝓝</span> <span class=\"n\">x₀</span> <span class=\"bp\">=</span> <span class=\"n\">map.</span><span class=\"o\">{(</span><span class=\"n\">max</span> <span class=\"n\">u_1</span> <span class=\"n\">u_2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u_1</span> <span class=\"n\">u_2</span><span class=\"o\">)}</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"n\">x₀</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">topological_group.</span><span class=\"o\">{(</span><span class=\"n\">max</span> <span class=\"n\">u_1</span> <span class=\"n\">u_2</span><span class=\"o\">)}</span> <span class=\"n\">G</span>\n</code></pre></div>",
        "id": 249421595,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1628893633
    },
    {
        "content": "<p>In case it's helpful in figuring out what's going on, it's something to do with the <code>hinv</code> argument.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">crazy_universe</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hinv</span> <span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"o\">(</span><span class=\"n\">uncurry</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"bp\">𝓝</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">×ᶠ</span> <span class=\"bp\">𝓝</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span> <span class=\"c1\">-- can see that G : Type (max u_1 u_2)</span>\n</code></pre></div>",
        "id": 249422650,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1628894553
    },
    {
        "content": "<p>This reproduces it, too:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">crazy_universe</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">×ᶠ</span> <span class=\"n\">F</span> <span class=\"bp\">=</span> <span class=\"n\">F</span> <span class=\"bp\">×ᶠ</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span> <span class=\"c1\">-- can see G : Type (max u_1 u_2)</span>\n</code></pre></div>\n<p>Strangely, replacing <code>filter</code> with <code>set</code> doesn't show this behavior:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">order.filter.basic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">crazy_universe</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">s.prod</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">s.prod</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span> <span class=\"c1\">-- can see G : Type (max u_1 u_2)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ok_universe</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">s.prod</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">s.prod</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span> <span class=\"c1\">-- can see G : Type u_1</span>\n</code></pre></div>",
        "id": 249423064,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1628894961
    },
    {
        "content": "<p>Changing the transparency of <code>set</code> to <code>irreducible</code> changes the inferred universe:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">irreducible</span><span class=\"o\">]</span> <span class=\"n\">set</span>\n<span class=\"kd\">def</span> <span class=\"n\">crazy_universe'</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">s.prod</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">s.prod</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span> <span class=\"c1\">-- can see G : Type (max u_1 u_2)</span>\n</code></pre></div>",
        "id": 249423991,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1628895834
    },
    {
        "content": "<p>I've seen a few of these recently and I've always just figured that it's the fact that lean universe arithmetic is hardly its strong point and it's just easier to do it yourself sometimes</p>",
        "id": 249446005,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1628925136
    },
    {
        "content": "<p>I agree with Patrick that it's confusing. It can often manifest itself in things taking much longer to typecheck than they should</p>",
        "id": 249446025,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1628925190
    },
    {
        "content": "<p>This sort of thing is why I largely stopped using <code>Type*</code> outside of <code>variables</code>.</p>",
        "id": 249453117,
        "sender_full_name": "Reid Barton",
        "timestamp": 1628936847
    },
    {
        "content": "<p>Yeah, we can definitely have a linter that catches this kind of behavior. <br>\nWe can probably just check for an argument of the form <code>Type (max _ _)</code> or <code>Sort (max _ _)</code>(ignoring the conclusion). I think that doesn't give many false positives.</p>",
        "id": 249470930,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1628963926
    },
    {
        "content": "<p>I opened <a href=\"https://github.com/leanprover-community/mathlib/issues/8677\">#8677</a>, where I fix a bunch of current bad universes in the library.<br>\nThe linter has a bunch of false positives in declarations, such as <a href=\"https://leanprover-community.github.io/mathlib_docs/find/module.projective/src\">src#module.projective</a>, where <code>Type (max u v)</code> is used as an arbitrary type larger than <code>Type u</code>. <br>\nThere were also still a bunch of bad declarations that weren't caught by my linter, like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/algebraic_geometry.Spec.SheafedSpace_map/src\">src#algebraic_geometry.Spec.SheafedSpace_map</a>, where <code>CommRing</code> means <code>CommRing.{max u v}</code>. In this case I was lucky, since an auxiliary declaration part of this one was caught by the linter. </p>\n<p>I think we should make a linter where we properly test for declarations whether it has two universe variables <code>u</code> and <code>v</code> that <em>only</em> occur as <code>max u v</code>. This is a little trickier to test than my previous suggestion, but I'll take another stab.</p>",
        "id": 249491219,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1628999966
    },
    {
        "content": "<p>I don't think false positives are a problem here, since the few cases where they are used legitimately could use a small acknowledgment in the form of a <code>@[nolint]</code> and/or comment</p>",
        "id": 249491404,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629000181
    },
    {
        "content": "<p>That's true, but note that we also need to apply <code>nolint</code> to all lemmas that use <code>module.projective</code>. But the current version doesn't catch much more false positives (there are ~5 rarely used declarations, for example <a href=\"https://leanprover-community.github.io/mathlib_docs/find/uliftable.adapt_up/src\">src#uliftable.adapt_up</a> in <code>control/uliftable</code>).</p>\n<p>I hope that the proper version of the linter catches more declarations that are ignored by the current linter.</p>",
        "id": 249491952,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1629001070
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> Can you tell me how to fix the universe levels of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/uliftable.down_map/src\">src#uliftable.down_map</a>?<br>\nCurrently the universes <code>u₀</code> and <code>v₀</code> only occur in the declaration as <code>max u₀ v₀</code>. I suspect that <code>G : Type → Type v₁</code> should be replaced by <code>G : Type u₀ → Type v₁</code>?</p>",
        "id": 249495541,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1629008200
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span>  you're right, that's what it should be. That's a simple fix</p>",
        "id": 249496403,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1629009783
    },
    {
        "content": "<p>Ok, I've added it to <a href=\"https://github.com/leanprover-community/mathlib/issues/8677\">#8677</a></p>",
        "id": 249496704,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1629010394
    },
    {
        "content": "<p>Oh you're a bit faster than me: <a href=\"https://github.com/leanprover-community/mathlib/issues/8684\">#8684</a></p>",
        "id": 249496763,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1629010499
    },
    {
        "content": "<p>I've PR'd the linter in <a href=\"https://github.com/leanprover-community/mathlib/issues/8685\">#8685</a>. This version catches a lot more problematic declarations than the earlier version, and I don't think it gives any false positives.</p>",
        "id": 249496883,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1629010757
    },
    {
        "content": "<p>Great! Thank you very much Floris!</p>",
        "id": 249502254,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1629019199
    }
]