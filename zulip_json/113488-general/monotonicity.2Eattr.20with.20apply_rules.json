[
    {
        "content": "<p>The tactic <code>apply_rules</code> works with sets of lemmas defined by a user attribute.  The example given in the documentation of <code>apply_rules</code> is that you could make a custom monotonicity attribute and then use <code>apply_rules</code> with it, and that indeed works just fine.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.order.group</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_add_comm_group</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kd\">@[user_attribute]</span>\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">mono_rules</span> <span class=\"o\">:</span> <span class=\"n\">user_attribute</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"n\">mono_rules</span><span class=\"o\">,</span>\n  <span class=\"n\">descr</span> <span class=\"o\">:=</span> <span class=\"s2\">\"lemmas usable to prove monotonicity\"</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">local</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">mono_rules</span><span class=\"o\">]</span> <span class=\"n\">add_le_add</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">d</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply_rules</span> <span class=\"n\">mono_rules</span><span class=\"o\">,</span> <span class=\"c1\">-- takes action</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>So I figured, we already have an attribute <code>mono</code> from the monotonicity tactic for this use case, why not use that?  But when I tried the experiment it didn't work.  Any ideas?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.monotonicity</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_add_comm_group</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">d</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply_rules</span> <span class=\"n\">tactic.interactive.monotonicity.attr</span><span class=\"o\">,</span> <span class=\"c1\">-- `no matching rule`</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 276818333,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1648430948
    },
    {
        "content": "<p>I wanted to <span aria-label=\"ping pong\" class=\"emoji emoji-1f3d3\" role=\"img\" title=\"ping pong\">:ping_pong:</span> this question about getting a user attribute to work.  Maybe <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> or <span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span> knows the answer?</p>",
        "id": 277066141,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1648588849
    },
    {
        "content": "<p>It looks like a bug in <code>apply_rules</code>. It should work based on the <code>name</code> field of the user attribute, so <code>apply_rules mono</code> should work. But it seems to fail unless the name of the user attribute and the <code>name</code> field are the same. I've starred this message but won't have time to try to fix this week.</p>",
        "id": 277088009,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1648607795
    }
]