[
    {
        "content": "<p>What is the nice way to alternate two tactics until the goal is closed or neither make any progress? I know I can do <code>repeat (tac1 &lt;|&gt; tac2)</code> but this is stupid, right?</p>",
        "id": 198461853,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590164506
    },
    {
        "content": "<p>why is it stupid? i thought the behavior is exactly as you described (so there probably isn't a more efficient implementation), and it's hard to imagine a shorter incantation</p>",
        "id": 198461997,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590164554
    },
    {
        "content": "<p>(also i usually write <code>repeat { tac1 &lt;|&gt; tac2}</code> instead, is there any difference?)</p>",
        "id": 198462078,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590164586
    },
    {
        "content": "<p>what would you like to type instead, and would the behavior be different from the repeat block?</p>",
        "id": 198462304,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590164653
    },
    {
        "content": "<p>I should have said that tac1 and tac2 cannot succeed twice in a row.</p>",
        "id": 198462318,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590164658
    },
    {
        "content": "<p>oh i see, the repeat block will incur possibly a factor of 2 penalty?</p>",
        "id": 198462385,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590164688
    },
    {
        "content": "<p>Say tac1 succeeds. Then you repeat and first try tac1 that you know will fail before trying tac2. etc.</p>",
        "id": 198462387,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590164689
    },
    {
        "content": "<p>Yes</p>",
        "id": 198462396,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590164696
    },
    {
        "content": "<p>I need a computer scientist. Is there a computer scientist in this plane?</p>",
        "id": 198462457,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590164719
    },
    {
        "content": "<p>i wonder if passing your tactics to tidy works?</p>",
        "id": 198462472,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590164724
    },
    {
        "content": "<p>The penalty factor might shoot up a lot more then :-)</p>",
        "id": 198462752,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590164827
    },
    {
        "content": "<p>I'm not sure I understand what you want but is <code>repeat { tac1 , tac2} &lt;|&gt; repeat { tac2, tac1}</code> better?</p>",
        "id": 198463039,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1590164958
    },
    {
        "content": "<p>Right, I really meant \"does tidy specifically know how to not re-apply a tactic it know will fail\", and then if the answer is yes, looking at the tidy source will tell you the answer</p>\n<p>but probably the answer is no, <code>tidy</code> doesn't have a way to know that a tactic won't succeed twice</p>",
        "id": 198463130,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590165002
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/113488-general/topic/alternate.20tactics/near/198463039\">said</a>:</p>\n<blockquote>\n<p>I'm not sure I understand what you want but is <code>repeat { tac1 , tac2} &lt;|&gt; repeat { tac2, tac1}</code> better?</p>\n</blockquote>\n<p>I think yes? I think this never applies <code>tac1</code> twice in a row and applies <code>tac2</code> twice in a row at most once</p>",
        "id": 198463305,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590165096
    },
    {
        "content": "<p>This will fail if tac1 closes the goal immediately for instance</p>",
        "id": 198463449,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590165147
    },
    {
        "content": "<p>then use a semicolon?</p>",
        "id": 198463469,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590165157
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">repeat</span> <span class=\"o\">{</span> <span class=\"n\">tac1</span><span class=\"bp\">;</span> <span class=\"n\">tac2</span> <span class=\"o\">}</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">repeat</span> <span class=\"o\">{</span> <span class=\"n\">tac2</span><span class=\"bp\">;</span> <span class=\"n\">tac1</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 198463511,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590165189
    },
    {
        "content": "<p>That one may work...</p>",
        "id": 198463540,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590165206
    },
    {
        "content": "<p>It works on 12 examples, and we're in meta-land so I guess it counts as a proof.</p>",
        "id": 198463863,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590165382
    },
    {
        "content": "<p>did you have examples when you opened the question? it's possible that posting them may have led to us getting the answer faster</p>",
        "id": 198463946,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590165439
    },
    {
        "content": "<p>oh, does \"work\" mean \"close the goal\" or \"close the goal faster than <code>repeat { tac1 &lt;|&gt; tac2 }</code>\"?</p>",
        "id": 198464092,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590165511
    },
    {
        "content": "<p>Close the goal without applying the same tactic twice in a row.</p>",
        "id": 198464210,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590165575
    },
    {
        "content": "<p>In my case  it seems we can even assume we always start with tac1</p>",
        "id": 198464353,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590165641
    },
    {
        "content": "<p>so <code>repeat (tac1 ; tac 2)</code> is good enough</p>",
        "id": 198464392,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590165665
    },
    {
        "content": "<p>Here's a direct implementation (untested, ymmv):</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">iterate_alternating_aux</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span>\n<span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">t₁</span> <span class=\"n\">t₂</span> <span class=\"n\">stop_on_fail</span><span class=\"o\">,</span> <span class=\"n\">do</span>\n  <span class=\"n\">progress</span> <span class=\"err\">←</span> <span class=\"n\">try_core</span> <span class=\"n\">t₁</span><span class=\"o\">,</span>\n  <span class=\"k\">match</span> <span class=\"n\">progress</span><span class=\"o\">,</span> <span class=\"n\">stop_on_fail</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"n\">iterate_alternating_aux</span> <span class=\"n\">t₂</span> <span class=\"n\">t₁</span> <span class=\"n\">ff</span>\n  <span class=\"bp\">|</span> <span class=\"n\">none</span><span class=\"o\">,</span> <span class=\"n\">ff</span> <span class=\"o\">:=</span> <span class=\"n\">iterate_alternating_aux</span> <span class=\"n\">t₂</span> <span class=\"n\">t₁</span> <span class=\"n\">tt</span>\n  <span class=\"bp\">|</span> <span class=\"n\">none</span><span class=\"o\">,</span> <span class=\"n\">tt</span> <span class=\"o\">:=</span> <span class=\"n\">pure</span> <span class=\"o\">()</span>\n  <span class=\"kn\">end</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">iterate_alternating</span> <span class=\"o\">(</span><span class=\"n\">t₁</span> <span class=\"n\">t₂</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">iterate_alternating_aux</span> <span class=\"n\">t₁</span> <span class=\"n\">t₂</span> <span class=\"n\">ff</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">tactic</span>\n\n\n<span class=\"kn\">namespace</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">iterate_alternating</span> <span class=\"o\">(</span><span class=\"n\">t₁</span> <span class=\"n\">t₂</span> <span class=\"o\">:</span> <span class=\"n\">itactic</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">iterate_alternating</span> <span class=\"n\">t₁</span> <span class=\"n\">t₂</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span>\n</code></pre></div>",
        "id": 198464642,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1590165828
    },
    {
        "content": "<p>Thanks. Is there any advantage over the naive method that Jalex found?</p>",
        "id": 198466069,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590166471
    },
    {
        "content": "<p>Jalex's tactic looks fishy to me because <code>repeat t</code> never fails, so the <code>&lt;|&gt; ...</code> should never be executed.</p>\n<p><code>repeat (tac1; tac2)</code> behaves slightly differently than my tactic: afaiu, it stops when <em>either</em> <code>tac1</code> or <code>tac2</code> fails for the first time, whereas my tactic only stops when <em>both</em> <code>tac1</code> and <code>tac2</code> fail. So my tactic permits the sequence <code>tac2, tac2, ...</code>whereas yours requires <code>tac1, tac2, tac1, ...</code>.</p>",
        "id": 198467327,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1590167087
    },
    {
        "content": "<p>Avoiding tac2, tac2 was exactly my request</p>",
        "id": 198467392,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590167125
    },
    {
        "content": "<p>Then the <code>repeat</code> thing should have the right semantics.</p>",
        "id": 198467582,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1590167228
    }
]