[
    {
        "content": "<p>Is there any sense in writing <code>noncomputable theorem</code>, as in mathlib <code>logic.basic</code> lines 516-519?</p>",
        "id": 136123067,
        "sender_full_name": "Reid Barton",
        "timestamp": 1539967089
    },
    {
        "content": "<p>What happens if you remove <code>noncomputable</code>?</p>",
        "id": 136124051,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1539967955
    },
    {
        "content": "<p>Probably I wait a long time for mathlib to rebuild and then nothing interesting happens--I've written lots of <code>theorem</code>s that use noncomputable things before.</p>",
        "id": 136124347,
        "sender_full_name": "Reid Barton",
        "timestamp": 1539968229
    },
    {
        "content": "<p>I wonder whether they should be <code>noncomputable def</code>, or just <code>theorem</code>, or maybe none of this matters</p>",
        "id": 136124359,
        "sender_full_name": "Reid Barton",
        "timestamp": 1539968246
    },
    {
        "content": "<p>Actually I could be wrong--these <code>theorem</code>s are special because their result types are not Props (that's why I'm looking at them), and maybe that is what triggers the <code>noncomputable</code> check</p>",
        "id": 136124519,
        "sender_full_name": "Reid Barton",
        "timestamp": 1539968376
    },
    {
        "content": "<p>Okay yes, that seems to be the case.</p>",
        "id": 136124688,
        "sender_full_name": "Reid Barton",
        "timestamp": 1539968497
    },
    {
        "content": "<p>I never thought about exactly what is going on with <code>def</code> and <code>theorem</code>. I guess the difference is like <code>let</code> vs <code>have</code>, that is, something defined with <code>def</code> can be replaced by its definition by one of the reduction rules, while something defined with <code>theorem</code> can't be replaced by, well, its proof?</p>",
        "id": 136125141,
        "sender_full_name": "Reid Barton",
        "timestamp": 1539968889
    },
    {
        "content": "<p>The VM can't reduce a <code>theorem</code> either, right? So why bother with the <code>noncomputable</code> check for theorems?</p>",
        "id": 136125354,
        "sender_full_name": "Reid Barton",
        "timestamp": 1539969061
    },
    {
        "content": "<p>In the case of <code>classical.dec</code> I guess someone decided that it was useless to allow it to be unfolded because it's essentially just an application of an axiom, and it's uniquely determined up to propositional equality, anyways?</p>",
        "id": 136125488,
        "sender_full_name": "Reid Barton",
        "timestamp": 1539969180
    },
    {
        "content": "<p>This all seems to make sense, I'm just not sure my mental picture is actually correct.</p>",
        "id": 136125590,
        "sender_full_name": "Reid Barton",
        "timestamp": 1539969267
    },
    {
        "content": "<p>I'm wondering if it's about generating byte code for the VM. If the theorem's type is in <code>Prop</code>, then, it doesn't matter.</p>",
        "id": 136129728,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1539973260
    },
    {
        "content": "<p>But otherwise, you may have to say explicitly \"Don't generate code\" with <code>noncomputable</code></p>",
        "id": 136129843,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1539973361
    },
    {
        "content": "<p>If you mark something as <em>either</em> <code>noncomputable</code> or <code>theorem</code>, then the VM does not generate code for the definition. This is why sometimes you get those errors about bytecode generation failed when you accidentally mark something as a <code>theorem</code></p>",
        "id": 136143543,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539988883
    },
    {
        "content": "<p><code>noncomputable theorem</code> is almost always not needed, but it is used in a few specialized instances. One other consequence of defining something as a <code>theorem</code> is that it is \"definition irrelevant\", that is, lean will not generate or use the definitional equation for this definition. This is almost never appropriate for a <code>Type</code> valued expression, since it provides relations between definiendum and definiens that we can't otherwise recover. So the place where it makes sense is when the definition is already ambiguous, as in <code>classical.some</code> - unfolding it will not tell us any more about its value - and it is also using the axiom of choice so it should not have any code generation.</p>",
        "id": 136143755,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539989150
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span></p>",
        "id": 136143757,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539989153
    },
    {
        "content": "<p>As part of sanity_check cleanup, I tried making these theorems <code>dec</code>, <code>dec_eq</code>, <code>dec_rel</code> and <code>dec_pred</code> definitions, but it does cause an error later on:</p>\n<div class=\"codehilite\"><pre><span></span>D:\\projects\\mathlib2\\src\\ring_theory\\unique_factorization_domain.lean:146:18: warning: failed to generate bytecode for &#39;of_unique_irreducible_factorization&#39;\n</pre></div>\n\n\n<p>Interestingly, when I mark that definition as <code>noncomputable</code>, I get two conflicting(?) errors:</p>\n<div class=\"codehilite\"><pre><span></span>D:\\projects\\mathlib2\\src\\ring_theory\\unique_factorization_domain.lean:146:18: warning: definition &#39;of_unique_irreducible_factorization&#39; was incorrectly marked as noncomputable\nD:\\projects\\mathlib2\\src\\ring_theory\\unique_factorization_domain.lean:146:18: warning: failed to generate bytecode for &#39;of_unique_irreducible_factorization&#39;\n</pre></div>\n\n\n<p>For now, I just added the <code>sanity_skip</code> attribute to these decidability declarations.</p>",
        "id": 177077487,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1569950587
    },
    {
        "content": "<p>Hi, where are the definitions that you're trying to change from <code>theorem</code> to <code>def</code>? I mean, file/line.</p>",
        "id": 177087935,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1569957151
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/logic/basic.lean#L593-L597\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/src/logic/basic.lean#L593-L597\">https://github.com/leanprover-community/mathlib/blob/master/src/logic/basic.lean#L593-L597</a></p>",
        "id": 177087973,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1569957189
    },
    {
        "content": "<p>BTW, is there any difference between <code>theorem</code> and <code>noncomputable theorem</code>? I mean, theorems do not generate bytecode anyway.</p>",
        "id": 177088346,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1569957443
    },
    {
        "content": "<p>Lean will try to generate bytecode for them, because their type is non a proposition. You get an error when you remove <code>noncomputable</code>.</p>",
        "id": 177089515,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1569958244
    },
    {
        "content": "<p>Does <code>noncomputable</code> infect the declarations that use them?</p>",
        "id": 177089671,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1569958352
    },
    {
        "content": "<p>I had a similar error when one of the dependencies of a <code>def</code> was marked as <code>theorem</code> instead of <code>def</code>. It was something like <code>induction_on</code> with output in <code>Sort</code>.</p>",
        "id": 177089848,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1569958477
    },
    {
        "content": "<p>The reason is that <code>letI</code> hides the definition behind <code>let ... in ...</code>, and Lean can't understand that <code>classical.choice</code> is used only in the proofs.</p>",
        "id": 177105951,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1569970886
    },
    {
        "content": "<p>A few ways to fix the problem: (a) use <code>haveI</code>; (b) move <code>letI</code> to the proof of <code>prime_factors</code>; (c) write <code>refine_struct { .. o }</code> before <code>letI</code>.</p>",
        "id": 177106045,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1569970997
    },
    {
        "content": "<p>It seems that the reason for using <code>noncomputable theorem</code> here no longer applies, as replacing it with <code>noncomputable def</code> as in <a href=\"https://github.com/leanprover-community/mathlib/issues/10292\">#10292</a> seems to work just fine.</p>",
        "id": 261520332,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636993111
    }
]