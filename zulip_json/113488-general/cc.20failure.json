[
    {
        "content": "<p>Is this a bug?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x1</span> <span class=\"n\">x2</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x1</span> <span class=\"bp\">=</span> <span class=\"n\">x2</span><span class=\"o\">)</span>\n  <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">y&#39;</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">y&#39;</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">x2</span><span class=\"o\">,</span> <span class=\"n\">y&#39;</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x1</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">existsi</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">split</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"c1\">-- ⊢ (x2, y) = (x1, y)</span>\n  <span class=\"n\">cc</span>                          <span class=\"c1\">-- cc tactic failed</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 126654388,
        "sender_full_name": "Reid Barton",
        "timestamp": 1526490201
    },
    {
        "content": "<p>(I know the lemma and proof are strange, this is a minimized version of some real code)</p>",
        "id": 126654522,
        "sender_full_name": "Reid Barton",
        "timestamp": 1526490365
    },
    {
        "content": "<p>It seems that <code>cc</code> doesn't recognize that the <code>y</code>s are equal because one of them was created by substituting for a metavariable, or something.</p>",
        "id": 126654615,
        "sender_full_name": "Reid Barton",
        "timestamp": 1526490523
    },
    {
        "content": "<p><code>subst h</code></p>",
        "id": 126654631,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1526490594
    },
    {
        "content": "<p>I observed this a few days ago as well, but in a setting which was too hard to minimize.</p>",
        "id": 126654692,
        "sender_full_name": "Reid Barton",
        "timestamp": 1526490633
    },
    {
        "content": "<p>try <code>set_option pp.all true</code></p>",
        "id": 126654713,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1526490667
    },
    {
        "content": "<blockquote>\n<p><code>subst h</code></p>\n</blockquote>\n<p><code>rw h</code></p>",
        "id": 126654714,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1526490668
    },
    {
        "content": "<p>stop!</p>",
        "id": 126654717,
        "sender_full_name": "Reid Barton",
        "timestamp": 1526490673
    },
    {
        "content": "<p>this works</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x1</span> <span class=\"n\">x2</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x1</span> <span class=\"bp\">=</span> <span class=\"n\">x2</span><span class=\"o\">)</span>\n  <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">y&#39;</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">y&#39;</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">x2</span><span class=\"o\">,</span> <span class=\"n\">y&#39;</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x1</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"k\">begin</span>\n    <span class=\"n\">cc</span><span class=\"o\">,</span>\n  <span class=\"kn\">end</span><span class=\"bp\">⟩</span>\n</pre></div>\n\n\n<p>So it seems like a bug.</p>",
        "id": 126654798,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1526490785
    },
    {
        "content": "<p><code>by cc</code></p>",
        "id": 126654801,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1526490794
    },
    {
        "content": "<p>Yeah, changing <code>cc</code> to <code>exact by cc</code> works also</p>",
        "id": 126654812,
        "sender_full_name": "Reid Barton",
        "timestamp": 1526490819
    },
    {
        "content": "<p>(And also in my real code.)</p>",
        "id": 126654831,
        "sender_full_name": "Reid Barton",
        "timestamp": 1526490842
    },
    {
        "content": "<p>It's to do with the metavariable</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x1</span> <span class=\"n\">x2</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x1</span> <span class=\"bp\">=</span> <span class=\"n\">x2</span><span class=\"o\">)</span>\n  <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">y&#39;</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">y&#39;</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">x2</span><span class=\"o\">,</span> <span class=\"n\">y&#39;</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x1</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">existsi</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">split</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"c1\">-- ⊢ (x2, y) = (x1, y)</span>\n  <span class=\"n\">cc</span>                          <span class=\"c1\">-- cc tactic failed</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>works</p>",
        "id": 126654862,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1526490864
    },
    {
        "content": "<p>I thought <code>exact hp</code> unified the metavariable</p>",
        "id": 126654867,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1526490883
    },
    {
        "content": "<p>It does. That's what makes this so confusing.</p>",
        "id": 126654875,
        "sender_full_name": "Reid Barton",
        "timestamp": 1526490899
    },
    {
        "content": "<p>The displayed proof state is exactly the same whether you write <code>existsi _</code> or <code>existsi y</code></p>",
        "id": 126654908,
        "sender_full_name": "Reid Barton",
        "timestamp": 1526490955
    },
    {
        "content": "<p>but <code>cc</code> only works in the second case</p>",
        "id": 126654948,
        "sender_full_name": "Reid Barton",
        "timestamp": 1526490965
    }
]