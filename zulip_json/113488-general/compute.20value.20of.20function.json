[
    {
        "content": "<p>Hi. Lean-newbie here. I've got a function f : \\N \\to \\Z with a pretty involved definition. I would like to see what Lean thinks that the value of f is on 0,1,2,3 for example.<br>\nMy current approach has been:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">refl</span>\n</pre></div>\n\n\n<p>and then just trying different values of n, until I am lucky. But there should be a better way...</p>\n<p>(Ok, I just saw there is a \"new members\" stream. If someone can move this topic overthere, please feel free to do so.)</p>",
        "id": 123932056,
        "sender_full_name": "jmc",
        "timestamp": 1521490284
    },
    {
        "content": "<p>Try:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">f</span> <span class=\"mi\">0</span>\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">f</span> <span class=\"mi\">1</span>\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">f</span> <span class=\"mi\">2</span>\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">f</span> <span class=\"mi\">3</span>\n</pre></div>",
        "id": 123932203,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1521490496
    },
    {
        "content": "<p>You can just <code>#eval f x</code></p>",
        "id": 123932204,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1521490498
    },
    {
        "content": "<p>Aah, thanks!</p>",
        "id": 123932212,
        "sender_full_name": "jmc",
        "timestamp": 1521490509
    },
    {
        "content": "<p>It uses the virtual machine so if <code>f</code> is computation intensive, this will ensure swift execution</p>",
        "id": 123932223,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1521490559
    },
    {
        "content": "<p>If you want slow execution, you can try <code>#reduce f x</code> ;).</p>",
        "id": 123932268,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1521490586
    },
    {
        "content": "<p>(Also your <code>refl</code> trick made me giggle so you're awarded a pointless internet point.)</p>",
        "id": 123932273,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1521490609
    },
    {
        "content": "<p>(I think we can use octopuses to award those internet points)</p>",
        "id": 123932327,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1521490687
    },
    {
        "content": "<p>What an excellent idea.</p>",
        "id": 123932332,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1521490698
    },
    {
        "content": "<p>Thanks for the point!</p>",
        "id": 123932348,
        "sender_full_name": "jmc",
        "timestamp": 1521490752
    },
    {
        "content": "<p>thanks)</p>",
        "id": 123932349,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1521490754
    },
    {
        "content": "<p>the <code>rfl</code> thing is considered good style if you go by \"Software Foundations\"</p>",
        "id": 123932352,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1521490756
    },
    {
        "content": "<p>it's basically inline unit testing</p>",
        "id": 123932357,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1521490790
    },
    {
        "content": "<p>I have no recollection of that in SF o_O?</p>",
        "id": 123932360,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1521490792
    },
    {
        "content": "<p>Aaah right.</p>",
        "id": 123932361,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1521490794
    },
    {
        "content": "<p>You mean his auto-tests.</p>",
        "id": 123932362,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1521490797
    },
    {
        "content": "<p>yeah, for ex</p>",
        "id": 123932423,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1521490829
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">Definition</span> <span class=\"n\">hd</span> <span class=\"o\">(</span><span class=\"n\">default</span><span class=\"o\">:</span><span class=\"kt\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">:</span><span class=\"n\">natlist</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">l</span> <span class=\"k\">with</span>\n  <span class=\"o\">|</span> <span class=\"n\">nil</span> <span class=\"err\">⇒</span> <span class=\"n\">default</span>\n  <span class=\"o\">|</span> <span class=\"n\">h</span> <span class=\"o\">::</span> <span class=\"n\">t</span> <span class=\"err\">⇒</span> <span class=\"n\">h</span>\n  <span class=\"k\">end</span><span class=\"o\">.</span>\n<span class=\"kn\">Definition</span> <span class=\"n\">tl</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">:</span><span class=\"n\">natlist</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">natlist</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">l</span> <span class=\"k\">with</span>\n  <span class=\"o\">|</span> <span class=\"n\">nil</span> <span class=\"err\">⇒</span> <span class=\"n\">nil</span>\n  <span class=\"o\">|</span> <span class=\"n\">h</span> <span class=\"o\">::</span> <span class=\"n\">t</span> <span class=\"err\">⇒</span> <span class=\"n\">t</span>\n  <span class=\"k\">end</span><span class=\"o\">.</span>\n<span class=\"kn\">Example</span> <span class=\"n\">test_hd1</span><span class=\"o\">:</span> <span class=\"n\">hd</span> <span class=\"mi\">0</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">;</span><span class=\"mi\">2</span><span class=\"o\">;</span><span class=\"mi\">3</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"o\">.</span>\n<span class=\"kn\">Proof</span><span class=\"o\">.</span> <span class=\"kp\">reflexivity</span><span class=\"o\">.</span> <span class=\"kn\">Qed</span><span class=\"o\">.</span>\n<span class=\"kn\">Example</span> <span class=\"n\">test_hd2</span><span class=\"o\">:</span> <span class=\"n\">hd</span> <span class=\"mi\">0</span> <span class=\"bp\">[]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">.</span>\n<span class=\"kn\">Proof</span><span class=\"o\">.</span> <span class=\"kp\">reflexivity</span><span class=\"o\">.</span> <span class=\"kn\">Qed</span><span class=\"o\">.</span>\n<span class=\"kn\">Example</span> <span class=\"n\">test_tl</span><span class=\"o\">:</span> <span class=\"n\">tl</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">;</span><span class=\"mi\">2</span><span class=\"o\">;</span><span class=\"mi\">3</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">;</span><span class=\"mi\">3</span><span class=\"o\">].</span>\n<span class=\"kn\">Proof</span><span class=\"o\">.</span> <span class=\"kp\">reflexivity</span><span class=\"o\">.</span> <span class=\"kn\">Qed</span><span class=\"o\">.</span>\n</pre></div>",
        "id": 123932425,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1521490834
    },
    {
        "content": "<p>Yeah absolutely.</p>",
        "id": 123932428,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1521490841
    },
    {
        "content": "<p>Oh boy that book is such an excellent introduction to these things.</p>",
        "id": 123932431,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1521490850
    },
    {
        "content": "<p>Compare that to CPDT... :-\\.</p>",
        "id": 123932446,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1521490870
    },
    {
        "content": "<p>(Sorry Adam...)</p>",
        "id": 123932448,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1521490874
    },
    {
        "content": "<p>yeah, if you do 2 semesters of software foundations</p>",
        "id": 123932498,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1521490924
    },
    {
        "content": "<p>first</p>",
        "id": 123932500,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1521490929
    },
    {
        "content": "<p>maybe you can understand cpdt, except you still won't</p>",
        "id": 123932503,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1521490935
    },
    {
        "content": "<p>Anyway, the function in question is the Ramanujan tau function (<a href=\"https://en.wikipedia.org/wiki/Ramanujan%27s_tau_function\" target=\"_blank\" title=\"https://en.wikipedia.org/wiki/Ramanujan%27s_tau_function\">https://en.wikipedia.org/wiki/Ramanujan%27s_tau_function</a>)<br>\nAlready <code>#reduce \\tau 2</code> is extremely slow for my implementation.<br>\nBut <code>#eval \\tau 4</code> is pretty fast. And the first 5 values are correct (^;</p>",
        "id": 123932504,
        "sender_full_name": "jmc",
        "timestamp": 1521490940
    }
]