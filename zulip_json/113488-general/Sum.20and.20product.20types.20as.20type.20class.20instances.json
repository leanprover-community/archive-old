[
    {
        "content": "<p>I've been trying to rewrite <code>finsupp.finsupp_prod_equiv</code> to not require <code>add_comm_monoid x</code>. I've managed to do so, but i instead needed to add a pair of <code>decideable_eq y</code> instances instead. </p>\n<p>What's the mathlib way to provide both proofs?<br>\nAm I on a road to hell with <code>[inst : add_comm_monoid γ ⊕ (decidable_eq ii × decidable_eq jj)]</code>, then using <code>cases inst</code> to pick between two different proofs / definitions?<br>\nIs the done thing just to have <code>finsupp_prod_equiv</code> and <code>finsupp_prod_equiv'</code>?</p>",
        "id": 204832248,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1595527537
    },
    {
        "content": "<p>Yes to both the 2nd and 3rd questions. :-)</p>",
        "id": 204862373,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595544785
    },
    {
        "content": "<p>From the module doc of <code>finsupp</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">This</span> <span class=\"n\">file</span> <span class=\"n\">is</span> <span class=\"n\">a</span> <span class=\"bp\">`</span><span class=\"n\">noncomputable</span> <span class=\"n\">theory</span><span class=\"bp\">`</span> <span class=\"n\">and</span> <span class=\"n\">uses</span> <span class=\"n\">classical</span> <span class=\"n\">logic</span> <span class=\"n\">throughout</span><span class=\"bp\">.</span>\n</code></pre></div>\n\n\n<p>So can't you just use <code>classical.prop_decidable</code> for both instance arguments?</p>",
        "id": 204863079,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1595545261
    }
]