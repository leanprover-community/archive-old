[
    {
        "content": "<p>I have read this link about  using Lean: <a href=\"https://leanprover.github.io/reference/using_lean.html\" target=\"_blank\" title=\"https://leanprover.github.io/reference/using_lean.html\">https://leanprover.github.io/reference/using_lean.html</a><br>\nand am able to use Lean with VSCode, but I still have questions about using Lean from the command line. </p>\n<ol>\n<li>When I download the lean binaries, there is a lean and leanchecker binary.  What does each one do, and is there any documentation on using them?</li>\n<li>What is LEAN_PATH? I wrote a Lean file that uses the Lean library list type. I want this to to be checked from the command-line, that is when I write a #check command in the file, on VSCode the #check is underlined in blue letting me know that it checks; I want to do the equivalent from the command-line. But when I run the Lean binary on my file, it says 'error: file 'data/list' not found in the LEAN_PATH'. Now, I have the entire Lean repository (<a href=\"https://github.com/leanprover/lean\" target=\"_blank\" title=\"https://github.com/leanprover/lean\">https://github.com/leanprover/lean</a>) in my system and it also contains the built binaries - this is what it took to get Lean to work on VSCode (that and telling VSCode where the head of the repository is). Also, the head of this repository is in my PATH but what does it mean for data/list to be in my LEAN_PATH?</li>\n</ol>\n<p>I'm not able to find documentation for these specifics, most of them talk about using Lean from VSCode or Emacs. If I missed it, please point me to the right resource. Thanks!</p>",
        "id": 183297144,
        "sender_full_name": "Arjun Viswanathan",
        "timestamp": 1576181607
    },
    {
        "content": "<p>If you create a Lean project the way described in <a href=\"https://github.com/leanprover-community/mathlib/blob/master/docs/install/project.md\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/docs/install/project.md\">https://github.com/leanprover-community/mathlib/blob/master/docs/install/project.md</a> then there is no need to fiddle with LEAN_PATH. You can simply run <code>lean</code> from the root of your project.</p>",
        "id": 183297602,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1576181891
    },
    {
        "content": "<p>Thanks, useful as that is, I still want to understand how this works before having the package manager take care of the details for me. So I would still appreciate responses to my questions, if anybody is able to help.</p>",
        "id": 183299853,
        "sender_full_name": "Arjun Viswanathan",
        "timestamp": 1576183367
    },
    {
        "content": "<p><code>lean</code> is Lean. You don't need <code>leanchecker</code>. You should also have <code>leanpkg</code> of course.</p>",
        "id": 183300317,
        "sender_full_name": "Reid Barton",
        "timestamp": 1576183653
    },
    {
        "content": "<p>There is no <code>data.list</code> in the Lean standard library. Are you trying to use mathlib?</p>",
        "id": 183300344,
        "sender_full_name": "Reid Barton",
        "timestamp": 1576183669
    },
    {
        "content": "<p><code>leanpkg</code> will create a <code>leanpkg.path</code> file in your project root folder. <code>lean</code> reads it, and you can read it as well, it's not hard to guess what it says.</p>",
        "id": 183300684,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1576183870
    },
    {
        "content": "<p>You will have trouble with imports if you are running Lean on the command line and haven't set up a new project in the recommended way. However if you are only interested in lists and are happy with the list functionality of core Lean, you won't need to import anything.</p>\n<p>The Lean binary runs Lean on a file and reports any errors, or, if there are none, compiles the file into bytecode (an .olean file). You can read Theorem Proving In Lean if you want to learn more about Lean.</p>",
        "id": 183305870,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576187163
    },
    {
        "content": "<blockquote>\n<p>There is no <code>data.list</code> in the Lean standard library. Are you trying to use mathlib?</p>\n</blockquote>\n<p>You're right, I was unintentionally using mathlib.</p>",
        "id": 183392257,
        "sender_full_name": "Arjun Viswanathan",
        "timestamp": 1576265667
    },
    {
        "content": "<p>Thanks for the responses. I'll just use lean in a project, as recommended. Is anybody able to tell me what the leanchecker binary is for?</p>",
        "id": 183392449,
        "sender_full_name": "Arjun Viswanathan",
        "timestamp": 1576265789
    },
    {
        "content": "<p>It's the Lean kernel in a standalone executable. It can read the files produced by <code>lean --export</code>. I doubt you'll find a use for it.</p>",
        "id": 183393034,
        "sender_full_name": "Reid Barton",
        "timestamp": 1576266160
    },
    {
        "content": "<p>We do use it in the mathlib automated test infrastructure as an extra sanity check. As far as I know it only ever catches when two definitions (in unrelated files) have the same name.</p>",
        "id": 183393126,
        "sender_full_name": "Reid Barton",
        "timestamp": 1576266219
    },
    {
        "content": "<p>And nowadays we even have a back-up test for that, since the sanity check creates a file that imports all other files, and therefore will also raise an error if two definitions have the same name.</p>",
        "id": 183513981,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1576461260
    }
]