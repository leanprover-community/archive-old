[
    {
        "content": "<p>This is a bit surprising,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.polynomial.eval</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p.eval</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p.eval</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"c1\">-- p is expected to have type polynomial (polynomial (polynomial ℕ))</span>\n</code></pre></div>\n<p>Is there any way to tell lean that the dot notation for <code>polynomial.eval</code> is always supposed to be for the second argument?</p>",
        "id": 270344399,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1643787060
    },
    {
        "content": "<p>Unfortunately not as far as I'm aware. The trick is to apply the function enough for Lean to figure out what you're dot notating on, and not use dot notation when that's impossible.</p>",
        "id": 270351455,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643791943
    },
    {
        "content": "<p>Ha ha exactly this happened to me in a live lean session yesterday and I just resorted to lambdas</p>",
        "id": 270352350,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1643792442
    },
    {
        "content": "<p>One reason it's not this way is because \"eval 0\" is a pretty useful function to apply to the various polynomials as is. \"eval r\" is a ring_hom, for all r, for example.</p>",
        "id": 270387722,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1643810503
    },
    {
        "content": "<p>i'm still sad that we can't make <code>map</code> a bundled morphism because of dot notation</p>",
        "id": 270388941,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1643810977
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/113488-general/topic/polynomial.20eval.20dot.20notation/near/270388941\">said</a>:</p>\n<blockquote>\n<p>i'm still sad that we can't make <code>map</code> a bundled morphism because of dot notation</p>\n</blockquote>\n<p>I would much rather it be bundled and lose the notation.</p>",
        "id": 270406418,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1643817214
    },
    {
        "content": "<p>there's something like 1K uses in the library, plus we'd want to migrate <code>map_zero/one/mul/add...</code> to use the <code>fun_like</code> ones. I'm happy to help with that, but I really don't want to start that and then be told \"oh actually we don't like this\"</p>",
        "id": 270406731,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1643817298
    }
]