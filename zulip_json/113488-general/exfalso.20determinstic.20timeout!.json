[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"452140\">@Billy Miao</span> just showed me some Lean code at Xena where <code>exfalso</code> causes a determinstic timeout! This really surprised me because I thought <code>exfalso</code> would just be <code>apply false.elim</code>. Apparently not -- it seems to do something far more exotic involving the <code>contradiction</code> tactic, and <code>contradiction</code> also times out on the below goal.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"k\">let</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">finset.range</span> <span class=\"mi\">101</span><span class=\"o\">,</span>\n<span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"n\">finset.image</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"n\">s</span> <span class=\"k\">in</span>\n<span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"mi\">100</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">s</span> <span class=\"n\">S</span><span class=\"o\">,</span>\n  <span class=\"n\">exfalso</span><span class=\"o\">,</span> <span class=\"c1\">-- deterministic timeout</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 270596019,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1643913128
    },
    {
        "content": "<p>I think <code>contradiction</code> tries to check if you have both <code>P</code> and <code>not P</code> as hypotheses, or something? And maybe it tries to reduce <code>s</code></p>",
        "id": 270600009,
        "sender_full_name": "Reid Barton",
        "timestamp": 1643914825
    },
    {
        "content": "<p>Blocking reduction does eliminate the deterministic timeout (and it seems that <code>s</code> being reduced is the problem):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"kd\">@[irreducible]</span>\n<span class=\"kd\">def</span> <span class=\"n\">no_reduce</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"k\">let</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">no_reduce</span> <span class=\"bp\">$</span> <span class=\"n\">finset.range</span> <span class=\"mi\">101</span><span class=\"o\">,</span>\n<span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"n\">no_reduce</span> <span class=\"bp\">$</span> <span class=\"n\">finset.image</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"n\">s</span> <span class=\"k\">in</span>\n<span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"mi\">100</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">s</span> <span class=\"n\">S</span><span class=\"o\">,</span>\n  <span class=\"n\">exfalso</span><span class=\"o\">,</span> <span class=\"c1\">-- no timeout</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 270603113,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1643916064
    },
    {
        "content": "<p>Putting aside the question of what <code>exfalso</code> is doing in the first place, it seems reasonable that <code>contradiction</code> should do its work at \"reducible\" transparency level so this doesn't happen.</p>",
        "id": 270604087,
        "sender_full_name": "Reid Barton",
        "timestamp": 1643916499
    },
    {
        "content": "<p>On a related but separate note, I always wished we could <code>exfalso (_ : false)</code>; i dislike <code>exact (...).elim</code> and <code>exfalso, exact</code> as they often force awkward code</p>",
        "id": 270604435,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1643916638
    },
    {
        "content": "<p>Billy actually found the timeout when applying the <code>use</code> tactic, a really common tactic amongst beginner mathematicians. Use tries triv which tries contradiction.</p>",
        "id": 270684971,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1643964907
    },
    {
        "content": "<p>Do you mean <code>trivial</code>? I didn't know about <code>triv</code> but from the documentation, its unique feature is that it <em>doesn't</em> try <code>contradiction</code>.</p>",
        "id": 270702048,
        "sender_full_name": "Reid Barton",
        "timestamp": 1643974328
    },
    {
        "content": "<p><code>use</code> now uses <code>trivial'</code> rather than <code>triv</code> (assuming you have a recent version of mathlib). <code>use</code> doesn't use <code>trivial</code> because it wants to be careful only to only look for things that are trivial with <code>reducible</code> visibility.</p>\n<p>I recently renamed <code>triv</code> to <code>trivial'</code> and made a variant of <code>trivial</code> called <code>triv</code> that does everything but <code>contradiction</code>, since Kevin had wanted a tactic that really only looks for triviality. As far as I was able to tell, <code>triv</code> had only existed for the implementation of <code>use</code>.</p>",
        "id": 270755330,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1643999978
    },
    {
        "content": "<p>Something that should still be done, I think, is make a variant of <code>contradiction</code> that similarly only looks at <code>reducible</code> visibility, then make <code>trivial'</code> use that instead.</p>",
        "id": 270755428,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1644000013
    },
    {
        "content": "<p>Oh sorry, I might have been on an older mathlib when I wrote that post. The changes to triv came about from frustration that students were proving things accidentally using it</p>",
        "id": 270764142,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1644004242
    },
    {
        "content": "<p>I was getting questions of the form \"you said <code>triv</code> proves the goal when it's <code>true</code> but it also proves the goal when it's <code>false</code>\"</p>",
        "id": 270764329,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1644004343
    },
    {
        "content": "<p>(because I have contradictory hypotheses)</p>",
        "id": 270764448,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1644004404
    }
]