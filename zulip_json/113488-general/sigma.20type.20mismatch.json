[
    {
        "content": "<p><code>stalk2</code> below doesn't typecheck:</p>",
        "id": 124220067,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522058395
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>universe u\nvariables (X : Type u) (P : set (set X))\n\ndefinition  stalk1 (x : X) :=\nΣ U : {U : set X // x ∈ U ∧ P U}, ℕ\n\ndefinition  stalk2 (x : X) :=\nΣ (U : set X) (Hx : x ∈ U) (PU : P U), ℕ\n</pre></div>",
        "id": 124220112,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522058416
    },
    {
        "content": "<p>red squiggle is on the sigma in stalk2</p>",
        "id": 124220122,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522058433
    },
    {
        "content": "<p>error is</p>",
        "id": 124220123,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522058435
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>type mismatch at application\n  Σ (PU : P U), ℕ\nterm\n  λ (PU : P U), ℕ\nhas type\n  P U → Type : Type 1\nbut is expected to have type\n  ?m_1 → Type : Type (max ? 1)\n</pre></div>",
        "id": 124220124,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522058440
    },
    {
        "content": "<p>I <em>think</em> that I would rather work with stalk2 rather than stalk1</p>",
        "id": 124220146,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522058482
    },
    {
        "content": "<p>because I tend to avoid subtypes if I can</p>",
        "id": 124220163,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522058513
    },
    {
        "content": "<p>I am still a bit scared of all the up-arrows</p>",
        "id": 124220167,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522058521
    },
    {
        "content": "<p>[background : X is a topological space, P is a basis for the open sets, I'm defining the stalk of a presheaf <a href=\"https://stacks.math.columbia.edu/tag/009H\" target=\"_blank\" title=\"https://stacks.math.columbia.edu/tag/009H\">https://stacks.math.columbia.edu/tag/009H</a> just after 6.30.1; here's a special case <a href=\"https://stacks.math.columbia.edu/tag/0078\" target=\"_blank\" title=\"https://stacks.math.columbia.edu/tag/0078\">https://stacks.math.columbia.edu/tag/0078</a> which in Lean currently looks like <a href=\"https://github.com/kbuzzard/lean-stacks-project/blob/16a88206397eaa664dd00cf917c78359b7119cb3/src/tag0078.lean#L9\" target=\"_blank\" title=\"https://github.com/kbuzzard/lean-stacks-project/blob/16a88206397eaa664dd00cf917c78359b7119cb3/src/tag0078.lean#L9\">https://github.com/kbuzzard/lean-stacks-project/blob/16a88206397eaa664dd00cf917c78359b7119cb3/src/tag0078.lean#L9</a> ]</p>",
        "id": 124220282,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522058662
    },
    {
        "content": "<p>Sigma only takes two arguments. Also the type of nat doesn't depend on the set, so you may as well use prod.</p>",
        "id": 124221257,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1522060575
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> It's desugared to nested sigmas. But it still doesn't typecheck because <code>P U</code> does not live in <code>Type _</code>. I would suggest using structures in favor of nested anything.</p>",
        "id": 124221456,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1522060926
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span>  -- the actual type I want to make is  more complex -- the nat was just a MWE of my problem. <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> I need to make a type because I am actually interested in a quotient of the type I'm trying to construct. Your observation is that this doesn't typecheck either:</p>",
        "id": 124222122,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522062130
    },
    {
        "content": "<p><code> definition  stalk2 (x : X) (U : set X) (Hx : x ∈ U) := Σ (PU : P U), ℕ</code></p>",
        "id": 124222127,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522062147
    },
    {
        "content": "<p>and I don't really understand why.</p>",
        "id": 124222139,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522062198
    },
    {
        "content": "<p>But at the end of the day</p>",
        "id": 124222146,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522062226
    },
    {
        "content": "<p>I would like some sigma type so I can put an equivalence relation on it and form the quotient type.</p>",
        "id": 124222187,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522062251
    },
    {
        "content": "<p>Are you suggesting I stick with the <code>stalk1</code> approach?</p>",
        "id": 124222207,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522062301
    },
    {
        "content": "<p>Presumably you prefer <code>A -&gt; B -&gt; C</code> to <code>A and B -&gt; C</code>, i.e. here we avoid the structure [not subtype -- sorry] and prefer the \"nested\" approach?</p>",
        "id": 124222271,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522062390
    },
    {
        "content": "<p>No, I'm suggesting</p>\n<div class=\"codehilite\"><pre><span></span>structure stalk3 (x : X) :=\n(U : set X) (Hx : x ∈ U) (PU : P U) (n : ℕ)\n</pre></div>\n\n\n<p>so that you don't have to worry about every component whether it should be a sigma or a prod or a pprod or ... and on top of that you get projections with meaningful names.</p>",
        "id": 124222300,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1522062474
    },
    {
        "content": "<p>Oh, I see: and then this is still a type so I can still put an equivalence relation on it. I will try it this way! Thanks!</p>",
        "id": 124223706,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522065335
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> have you tried it? (if not, i’ll do it)</p>",
        "id": 124230980,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522077426
    },
    {
        "content": "<p>No, I've been at meetings until recently and since then I've been talking to Chris about rings</p>",
        "id": 124231051,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522077558
    },
    {
        "content": "<p>I’ll do it when i get back home then</p>",
        "id": 124231262,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522077877
    },
    {
        "content": "<p>which will happen in 15 minutes</p>",
        "id": 124231264,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522077884
    },
    {
        "content": "<p>I pushed as far as I got. Thanks.</p>",
        "id": 124231348,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522078016
    }
]