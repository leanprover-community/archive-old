[
    {
        "content": "<p>How can I debug the following error?</p>\n<div class=\"codehilite\"><pre><span></span>deep recursion was detected at &#39;replace&#39; (potential solution: increase stack space in your system)\n</pre></div>\n\n\n<p>It showed up while trying to define a class. As far as I can see there is no loop or something...</p>",
        "id": 160568189,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1552396278
    },
    {
        "content": "<p>have you tried turning Lean off and on again?</p>",
        "id": 160568495,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1552396539
    },
    {
        "content": "<p>Yes, in fact I have.</p>",
        "id": 160568511,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1552396558
    },
    {
        "content": "<p>I've found the culprit:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">-- somewhere in the perfectoid project</span>\n<span class=\"n\">local</span> <span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">instance</span><span class=\"o\">]</span> <span class=\"n\">topological_add_group</span><span class=\"bp\">.</span><span class=\"n\">to_uniform_space</span>\n</pre></div>",
        "id": 160572907,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1552399656
    },
    {
        "content": "<p>I've now put a <code>section ... end</code> around this attribute (and its one use) and the problem is gone.<br>\nSo... this question is solved. Thanks for letting me rubber-duck this issue!</p>",
        "id": 160573872,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1552400300
    },
    {
        "content": "<p>I'm hitting this error in <a href=\"https://github.com/leanprover-community/mathlib/issues/7123\">#7123</a>. MWE</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.fintype.basic</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n\n<span class=\"sd\">/-- A finite bounded lattice is complete. -/</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">instance</span> <span class=\"n\">fintype.to_complete_lattice</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">hl</span> <span class=\"o\">:</span> <span class=\"n\">lattice</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">bounded_order</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">complete_lattice</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">Sup</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">s.to_finset.sup</span> <span class=\"n\">id</span><span class=\"o\">,</span>\n  <span class=\"n\">Inf</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">s.to_finset.inf</span> <span class=\"n\">id</span><span class=\"o\">,</span>\n  <span class=\"n\">le_Sup</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">Sup_le</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">Inf_le</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">le_Inf</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span> <span class=\"n\">hl</span><span class=\"o\">,</span> <span class=\"bp\">..</span> <span class=\"n\">hb</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">bounded_order</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"c1\">-- deep recursion was detected at 'expression equality test' (potential solution: increase stack</span>\n<span class=\"c1\">-- space in your system)</span>\n</code></pre></div>\n<p>and I don't know how to circumvent it.</p>",
        "id": 262834623,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1637960528
    },
    {
        "content": "<p>Precisely, it happens because <code>[bounded_order α]</code> looks for <code>[has_le α]</code>, which it tries to get from <code>[complete_lattice α]</code>, which it tries to get using <code>fintype.to_complete_lattice</code>, which needs <code>[bounded_order α]</code>... This instance is bad, and I know it, but in this PR I need it to prove 2 lemmas about it (and then it's used once on <code>fin</code>).</p>",
        "id": 262834854,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1637960813
    },
    {
        "content": "<p>does lowering priority help?</p>",
        "id": 262834891,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1637960877
    },
    {
        "content": "<p>Should I simply give up on stating those lemmas generally and simply provide them for <code>fin</code>?</p>",
        "id": 262834893,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1637960879
    },
    {
        "content": "<p>Nope...</p>",
        "id": 262834904,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1637960883
    },
    {
        "content": "<p>Btw Yakov this is an unforeseen consequence of your refactor <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 262834977,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1637960953
    },
    {
        "content": "<p>Yeah I can see that</p>",
        "id": 262834986,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1637960970
    },
    {
        "content": "<p>I'll have to take a look in a couple of days</p>",
        "id": 262834992,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1637960984
    },
    {
        "content": "<p>One solution is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">hα</span> <span class=\"o\">:</span> <span class=\"n\">lattice</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"bp\">@</span><span class=\"n\">bounded_order</span> <span class=\"n\">α</span> <span class=\"bp\">$</span> <span class=\"bp\">@</span><span class=\"n\">preorder.to_has_le</span> <span class=\"n\">α</span> <span class=\"bp\">$</span> <span class=\"bp\">@</span><span class=\"n\">partial_order.to_preorder</span> <span class=\"n\">α</span> <span class=\"bp\">$</span> <span class=\"n\">semilattice_inf.to_partial_order</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n</code></pre></div>\n<p><span aria-label=\"nauseated\" class=\"emoji emoji-1f922\" role=\"img\" title=\"nauseated\">:nauseated:</span></p>",
        "id": 262835258,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1637961245
    },
    {
        "content": "<p>If this instance is bad, why not make it a def?</p>",
        "id": 262838066,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637964648
    },
    {
        "content": "<p>In the PR, it <em>is</em> a def. The point was to make it an instance for one section to prove general lemmas about when it's used, but TC inference already pukes at the <code>variables</code>.</p>",
        "id": 262838257,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1637964742
    },
    {
        "content": "<p>I think it would be better to use <code>by haveI := ...; exact ...</code> in the theorem statement</p>",
        "id": 262838401,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637964803
    },
    {
        "content": "<p>(which elaborates without any let bindings)</p>",
        "id": 262838433,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637964844
    },
    {
        "content": "<p>So I solved it by simply swapping the <code>variables</code> and <code>local attribute</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">lattice</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">bounded_order</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- this line is crucially *after* the `variables` so that `bounded_order` gets filled in correctly</span>\n<span class=\"kn\">local</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kd\">instance</span><span class=\"o\">]</span> <span class=\"n\">fintype.to_complete_lattice</span>\n</code></pre></div>\n<p>Apparently Lean fills in the arguments in stuff declared in <code>variables</code> at declaration time rather than at each lemma?</p>",
        "id": 262864258,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1638005739
    },
    {
        "content": "<p>This is correct. For example, see the difference here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">=</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- error</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">=</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- no error</span>\n</code></pre></div>\n<p>The first example fails, because <code> α : Type u_1</code>, and the universe variable <code>u_1</code> cannot be unified with <code>0</code>. The second example works, because the universe metavariable in the type of <code>β</code> can be unified with <code>0</code> (of course, the <code>Type*</code> is super misleading, since it's just <code>Type</code>).</p>",
        "id": 262867965,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1638011545
    },
    {
        "content": "<p>Ah, I see, you wanted to have bounded_order without specifying the order (has_le) or anything else. Yeah, that won't work.</p>",
        "id": 262895752,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1638051266
    },
    {
        "content": "<p>Do you get the the same style of error if you invoke a new type alpha and [topological_group alpha] without saying [group alpha]?</p>",
        "id": 262896667,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1638052792
    }
]