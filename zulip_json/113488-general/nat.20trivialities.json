[
    {
        "content": "<p>I'm very bad at finding nat trivialities in mathlib, and <code>library_search</code> does seem to want to help me today. Where can I find:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">forall_ge_iff</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">m</span> <span class=\"bp\">≥</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">k</span><span class=\"o\">)</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">forall_gt_iff</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">m</span> <span class=\"bp\">&gt;</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">k</span><span class=\"o\">)</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">strict_mono_of_succ</span> <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">u</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">strict_mono</span> <span class=\"n\">u</span> <span class=\"o\">:=</span>\n</pre></div>",
        "id": 192923034,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586028234
    },
    {
        "content": "<p>Note that I can prove those lemmas, but they must be there somewhere, right?</p>",
        "id": 192923086,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586028270
    },
    {
        "content": "<p>You can only do them because there's no subtraction ;-)</p>",
        "id": 192923099,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586028299
    },
    {
        "content": "<p>Sure, I wouldn't call them trivialities otherwise. They would be either false or hard.</p>",
        "id": 192923109,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586028341
    },
    {
        "content": "<p>I don't think we make a habit of writing lemmas of this form</p>",
        "id": 192923161,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586028405
    },
    {
        "content": "<p>the closest equivalent to <code>nat.forall_ge_iff</code> is <code>nat.le.dest</code> (where's the converse?)</p>",
        "id": 192923219,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586028505
    },
    {
        "content": "<p>Would that be a bad habit according to you?</p>",
        "id": 192923224,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586028533
    },
    {
        "content": "<p>No, although I'm not sure if they would be very effective. Perhaps they might work as manual simp lemmas</p>",
        "id": 192923262,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586028601
    },
    {
        "content": "<p>I would usually just use <code>rcases le.dest h with &lt;n,rfl&gt;</code> if I had a goal that I wanted to rewrite like this</p>",
        "id": 192923321,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586028658
    },
    {
        "content": "<p>The last one is in mathlib in the stuff about well orders</p>",
        "id": 192923334,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586028713
    },
    {
        "content": "<p><code>strict_mono.nat</code> in <code>algebra.strict_mono</code></p>",
        "id": 192923380,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586028756
    },
    {
        "content": "<p>And now <code>library_search</code> confesses...</p>",
        "id": 192923394,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586028826
    },
    {
        "content": "<p>I was thinking of <code>order_embedding.nat_lt</code> in <code>order.order_iso</code> but that other one is a much better fit</p>",
        "id": 192923446,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586028905
    }
]