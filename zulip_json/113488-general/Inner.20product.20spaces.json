[
    {
        "content": "<p>Hello,<br>\nIs there anyone else currently interested in inner product spaces? I'd like to start working on this.</p>\n<p>I found this formalization: <br>\n<a href=\"https://github.com/ImperialCollegeLondon/xena-UROP-2018/blob/master/src/inner_product_spaces/basic.lean\" target=\"_blank\" title=\"https://github.com/ImperialCollegeLondon/xena-UROP-2018/blob/master/src/inner_product_spaces/basic.lean\">https://github.com/ImperialCollegeLondon/xena-UROP-2018/blob/master/src/inner_product_spaces/basic.lean</a>.<br>\n<span class=\"user-mention\" data-user-id=\"120943\">@Andreas Swerdlow</span>  Are there still plans to bring this into mathlib?</p>\n<p>I am also aware of the Lean2 formalization: <a href=\"https://github.com/leanprover/lean2/blob/master/library/theories/analysis/inner_product.lean\" target=\"_blank\" title=\"https://github.com/leanprover/lean2/blob/master/library/theories/analysis/inner_product.lean\">https://github.com/leanprover/lean2/blob/master/library/theories/analysis/inner_product.lean</a></p>\n<p>The ImperialCollege formalization is over complex numbers and the Lean2 formalization is over the reals. I am interested in the reals, but I will try to find a generalization that subsumes both. Are there any concepts like this already?</p>",
        "id": 160909836,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1552680944
    },
    {
        "content": "<p>There is the whole theory of quadratic forms, which works over any field (though characteristic 2 can be hairy).</p>",
        "id": 160910126,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1552681197
    },
    {
        "content": "<p>Then you can specialise to nondegenerate forms, symmetric forms, alternating forms, hermitian forms, etc...</p>",
        "id": 160910213,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1552681251
    },
    {
        "content": "<p>In number theory we define unitary groups in the setting where K is a field (say) and L/K is a finite etale K-algebra of degree 2, which is a fancy way of saying either L=K+K or L is a separable quadratic extension of K. The non-trivial K-automorphism of L is denoted c, say (c for complex conjugation if K=real and L=complex) and then one can consider a non-degenerate hermitian sesquilinear form on an L-vector space. For it to be positive definite you need some notion of positive though, so then K should embed into the reals.</p>",
        "id": 160910843,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552681810
    },
    {
        "content": "<p>Ok, thanks. I'll see what I can do.</p>",
        "id": 160912710,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1552683248
    },
    {
        "content": "<p>I was thinking of submitting to mathlib fairly soon. A more up to date version is available here: <a href=\"https://github.com/leanprover-fork/mathlib-backup/blob/inner_product_spaces/linear_algebra/herm_inner_product_space.lean\" target=\"_blank\" title=\"https://github.com/leanprover-fork/mathlib-backup/blob/inner_product_spaces/linear_algebra/herm_inner_product_space.lean\">https://github.com/leanprover-fork/mathlib-backup/blob/inner_product_spaces/linear_algebra/herm_inner_product_space.lean</a></p>",
        "id": 160930218,
        "sender_full_name": "Andreas Swerdlow",
        "timestamp": 1552704101
    },
    {
        "content": "<p>I have transferred the Lean2 formalization to Lean3 now. It's for real vector spaces only. Let's see if we can merge after you submit to mathlib.</p>",
        "id": 160960138,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1552757662
    },
    {
        "content": "<p>As suggested by <span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span>, I'm looking at proving Bessel's inequality. I have a couple of basic questions.</p>\n<ol>\n<li>\n<p>If I explicitly include the instance <code>[normed_group E]</code> below, Lean complains that it couldn't synthesize a type class instance for <code>add_comm_monoid E</code>. Why is that? I thought <code>inner_product_space</code> extends <code>normed_group</code>. What do I have to do to fix this?</p>\n</li>\n<li>\n<p>Lean doesn't like my use of the<code>⟪·, ·⟫</code> notation here. It seems to work fine if I put the example directly in the <a href=\"https://leanprover-community.github.io/mathlib_docs/analysis/normed_space/inner_product.html#top\">analysis.normed_space.inner_product</a> file. How do I use the notation outside that file?</p>\n</li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.normed_space.inner_product</span> <span class=\"n\">data.complex.is_R_or_C</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"bp\">𝕜</span> <span class=\"n\">E</span> <span class=\"n\">ι</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">is_R_or_C</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span>  <span class=\"o\">[</span><span class=\"n\">inner_product_space</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">complete_space</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">normed_group</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"o\">:=</span>  <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">normed_group</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"o\">:=</span>\n<span class=\"n\">x</span> <span class=\"bp\">-</span>  <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"bp\">⟪</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"bp\">⟫</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"c1\">-- doesn't work.</span>\n</code></pre></div>",
        "id": 243007006,
        "sender_full_name": "Gihan Marasingha",
        "timestamp": 1623931348
    },
    {
        "content": "<p>Notation: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">localized</span> <span class=\"s2\">\"notation `⟪`x`, `y`⟫` := @inner ℝ _ _ x y\"</span> <span class=\"k\">in</span> <span class=\"n\">real_inner_product_space</span>\n<span class=\"n\">localized</span> <span class=\"s2\">\"notation `⟪`x`, `y`⟫` := @inner ℂ _ _ x y\"</span> <span class=\"k\">in</span> <span class=\"n\">complex_inner_product_space</span>\n</code></pre></div>\n<p>means \"if you want to use this notation, write <code>open_locale real_inner_product_space</code> resp <code>complex_inner_product_space</code> -- but do you want to be linear or sesquilinear?</p>",
        "id": 243007662,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1623931689
    },
    {
        "content": "<p>Thanks. I suppose sesquilinear for Bessel's inequality.</p>\n<p>As far as I can tell, the code at <a href=\"https://leanprover-community.github.io/mathlib_docs/analysis/normed_space/inner_product.html#properties-of-inner-product-spaces\">analysis.normed_space.inner_product#properties-of-inner-product-spaces</a> uses the <code>⟪·, ·⟫</code> notion for both real and complex inner product spaces. I've found that stealing the line:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"bp\">`⟪`</span><span class=\"n\">x</span><span class=\"bp\">`</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"n\">y</span><span class=\"bp\">`⟫`</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">inner</span> <span class=\"bp\">𝕜</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n</code></pre></div>\n<p>just above my example makes Lean stop complaining. Hopefully that's the right thing to do here!</p>",
        "id": 243009706,
        "sender_full_name": "Gihan Marasingha",
        "timestamp": 1623932894
    },
    {
        "content": "<p>Aah yes, this seems to be the trick used on line 151 of the file. Nice!</p>",
        "id": 243012404,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1623934510
    },
    {
        "content": "<p>I couldn't understand your other question. Can you show me the error?</p>",
        "id": 243012459,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1623934547
    },
    {
        "content": "<p>Nothing in the examples mentions <code>𝕜</code>, hence that type and all instances that depend on it are not in the context. If you look at the context in the first example, there is no <code>inner_product_space 𝕜 E</code></p>",
        "id": 243013141,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1623934866
    },
    {
        "content": "<p>This works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.normed_space.inner_product</span> <span class=\"n\">data.complex.is_R_or_C</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"bp\">𝕜</span> <span class=\"n\">E</span> <span class=\"n\">ι</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">is_R_or_C</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span>  <span class=\"o\">[</span><span class=\"n\">inner_product_space</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">complete_space</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n\n<span class=\"kn\">include</span> <span class=\"bp\">𝕜</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"o\">:=</span>  <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span>\n<span class=\"kn\">omit</span> <span class=\"bp\">𝕜</span>\n</code></pre></div>",
        "id": 243013239,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1623934905
    },
    {
        "content": "<p>I would advise against redefining the notation. Simply open the namespace.</p>",
        "id": 243013318,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1623934927
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"350992\">@Rémy Degenne</span> and <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span>. That's working much better.</p>",
        "id": 243013445,
        "sender_full_name": "Gihan Marasingha",
        "timestamp": 1623934984
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> as per <span class=\"user-mention\" data-user-id=\"350992\">@Rémy Degenne</span>'s comment, my error was that I hadn't included <code>𝕜</code> in the context so I wasn't really dealing with an instance of <code>inner_product_space 𝕜 E</code>!</p>",
        "id": 243015812,
        "sender_full_name": "Gihan Marasingha",
        "timestamp": 1623936045
    }
]