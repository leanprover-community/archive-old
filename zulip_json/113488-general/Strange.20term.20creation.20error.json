[
    {
        "content": "<p>MWE:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">types</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">monad</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span> <span class=\"n\">monad</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simps</span><span class=\"o\">]</span>\n<span class=\"n\">def</span> <span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"err\">⥤</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n  <span class=\"n\">map</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">,</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">image</span> <span class=\"o\">}</span>\n\n<span class=\"n\">def</span> <span class=\"n\">P_monad</span> <span class=\"o\">:</span> <span class=\"n\">monad</span> <span class=\"n\">P</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">η</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">app</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">Y</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">({</span><span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">Y</span><span class=\"o\">),</span>\n    <span class=\"n\">naturality&#39;</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">tidy</span> <span class=\"o\">},</span>\n  <span class=\"n\">μ</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">app</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">Y</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">sUnion</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">naturality&#39;</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">tidy</span> <span class=\"o\">},</span>\n  <span class=\"n\">left_unit&#39;</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">tidy</span><span class=\"o\">,</span>\n  <span class=\"n\">right_unit&#39;</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">tidy</span><span class=\"o\">,</span>\n  <span class=\"n\">assoc&#39;</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">tidy</span> <span class=\"o\">}</span>\n</code></pre></div>\n\n\n<p>Each of the <code>tidy</code> seem to succeed, but the monad structure gives me this error:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">a_h_left_w</span> <span class=\"n\">a</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">a</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">X_1</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">X</span>\n<span class=\"n\">types</span> <span class=\"n\">contain</span> <span class=\"n\">aliased</span> <span class=\"n\">name</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">):</span> <span class=\"n\">X</span>\n<span class=\"n\">remark</span><span class=\"o\">:</span> <span class=\"n\">the</span> <span class=\"n\">tactic</span> <span class=\"bp\">`</span><span class=\"n\">dedup</span><span class=\"bp\">`</span> <span class=\"n\">can</span> <span class=\"n\">be</span> <span class=\"n\">used</span> <span class=\"n\">to</span> <span class=\"n\">rename</span> <span class=\"n\">aliases</span>\n</code></pre></div>",
        "id": 197162322,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1589210998
    },
    {
        "content": "<p>Is something strange happening inside the <code>tidy</code>?</p>",
        "id": 197162388,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1589211009
    },
    {
        "content": "<p>Replacing the <code>tidy</code> with the tactic script <code>tidy?</code> tells me gives the same error</p>",
        "id": 197162682,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1589211108
    },
    {
        "content": "<p>Maybe it's <a href=\"#narrow/stream/113488-general/topic/simp.20and.20dedup\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/simp.20and.20dedup</a> again?</p>",
        "id": 197163035,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1589211236
    },
    {
        "content": "<p>Yeah that seems like the same problem</p>",
        "id": 197163230,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1589211307
    },
    {
        "content": "<p>I also just encountered this.</p>",
        "id": 197761097,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589583056
    },
    {
        "content": "<p>I think it should be fixed here: <a href=\"https://github.com/leanprover-community/lean/issues/236\">https://github.com/leanprover-community/lean/issues/236</a></p>",
        "id": 197761216,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1589583157
    }
]