[
    {
        "content": "<p>Would anyone object to adding the assumption of decidable le/lt/eq in <code>ordered_semiring</code>? I think we've talked about this class and its strange counterexamples before, so perhaps it needs a more throrough refactoring than this, but the fact that it doesn't have <code>a ≤ b → 0 ≤ c → c * a ≤ c * b</code> as an axiom and instead derives this using asymmetry is frustrating my attempts to reduce AC in certain foundational areas (like <code>nat.semiring</code>).</p>",
        "id": 232147548,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616914298
    },
    {
        "content": "<p>The earlier discussion on the pathologies of <code>ordered_semiring</code> is here: <a href=\"#narrow/stream/113489-new-members/topic/canonically_ordered.20pathology/near/225129909\">https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/canonically_ordered.20pathology/near/225129909</a></p>",
        "id": 232147621,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616914403
    },
    {
        "content": "<p>Didn't we once remove this assumption from <code>field</code>?</p>",
        "id": 232152122,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616920248
    },
    {
        "content": "<p>Actually I was looking at that just now</p>",
        "id": 232152130,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616920264
    },
    {
        "content": "<p>when did that happen?</p>",
        "id": 232152133,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616920269
    },
    {
        "content": "<p>I thought we added <code>decidable_eq</code> to <code>field</code></p>",
        "id": 232152141,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616920281
    },
    {
        "content": "<p>(previously there were two classes, <code>discrete_field</code> and <code>field</code>)</p>",
        "id": 232152148,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616920304
    },
    {
        "content": "<p>Right, and everyone used to say to the mathematicians \", if you want a field, use <code>discrete_field</code> and don't ask any questions\"</p>",
        "id": 232152204,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616920379
    },
    {
        "content": "<p>right, which seems to suggest that it is better to have <code>decidable_eq</code> in all the basic classes rather than not</p>",
        "id": 232152255,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616920412
    },
    {
        "content": "<p>it also occurs to me that we can use an auto_param to supply the classical proof by default, so that most structure instances won't even need to change</p>",
        "id": 232152367,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616920535
    },
    {
        "content": "<p>Does a classical proof in a decidable class field make the entire structure uncomputable though?</p>",
        "id": 232152463,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616920657
    },
    {
        "content": "<p>yes</p>",
        "id": 232152472,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616920675
    },
    {
        "content": "<p>For fields I think that's fine because you will almost certainly have an <code>if x = 0</code> in the definition of <code>inv</code> anyway</p>",
        "id": 232152529,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616920711
    },
    {
        "content": "<p>Really, I'm not sure there is much of a downside to making even really basic classes like <code>group</code> require decidability. If you are a programmer then probably everything in sight has decidable eq, and if you are a mathematician then it doesn't matter</p>",
        "id": 232152547,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616920753
    },
    {
        "content": "<p>If you're a mathematician then don't you just get completely confused by any mention of decidable?</p>",
        "id": 232152601,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616920808
    },
    {
        "content": "<p>You shouldn't generally see it at all unless you are looking at the definition of the structure or are adding it as a field in the structure instance (and the latter can be solved by an auto param as mentioned)</p>",
        "id": 232152640,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616920891
    },
    {
        "content": "<p>for the former issue, there isn't much we can do besides documentation and library notes</p>",
        "id": 232152704,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616920938
    },
    {
        "content": "<p>it certainly wouldn't be the first time something is stated slightly oddly to support formalization</p>",
        "id": 232152714,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616920962
    },
    {
        "content": "<p>An alternative proposal specific to <code>ordered_semiring</code> is to add <code>a ≤ b → 0 ≤ c → c * a ≤ c * b</code> and the commuted version as fields, with an autoparam to provide a proof from the lt theorem. I think it would be better in this case to just delete the lt theorem though, <a href=\"https://en.wikipedia.org/wiki/Ordered_ring\">wikipedia</a> doesn't think it should be an axiom of ordered rings</p>",
        "id": 232152924,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616921241
    },
    {
        "content": "<p>I'd lean towards just adding the missing field</p>",
        "id": 232153025,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616921354
    },
    {
        "content": "<p>like this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- An `ordered_semiring α` is a semiring `α` with a partial order such that</span>\n<span class=\"sd\">multiplication with a positive number and addition are monotone. -/</span>\n<span class=\"kd\">@[protect_proj]</span>\n<span class=\"kd\">class</span> <span class=\"n\">ordered_semiring</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">semiring</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">ordered_cancel_add_comm_monoid</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">zero_le_one</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">mul_lt_mul_of_pos_left</span> <span class=\"o\">:</span>  <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">mul_lt_mul_of_pos_right</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">mul_le_mul_of_nonneg_left</span> <span class=\"o\">:</span>  <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">.</span> <span class=\"n\">prove_mul_le_mul_of_nonneg_left</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">mul_le_mul_of_nonneg_right</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">.</span> <span class=\"n\">prove_mul_le_mul_of_nonneg_right</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 232153086,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616921422
    },
    {
        "content": "<p>I'm not remotely qualified to comment on what the correct axioms are</p>",
        "id": 232153208,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616921636
    },
    {
        "content": "<p>But that looks plausible</p>",
        "id": 232153264,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616921672
    },
    {
        "content": "<p>I think, to avoid the pathologies, we should remove the \"cancellation\" from this definition, as in</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- An ordered additive commutative monoid</span>\n<span class=\"sd\">is an additive commutative monoid with a partial order,</span>\n<span class=\"sd\">in which addition is monotone. -/</span>\n<span class=\"kd\">@[protect_proj, ancestor add_comm_monoid partial_order]</span>\n<span class=\"kd\">class</span> <span class=\"n\">ordered_add_comm_monoid</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n      <span class=\"kd\">extends</span> <span class=\"n\">add_comm_monoid</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">partial_order</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">add_le_add_left</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n\n<span class=\"sd\">/-- An `ordered_semiring α` is a semiring `α` with a partial order such that</span>\n<span class=\"sd\">multiplication with a positive number and addition are monotone. -/</span>\n<span class=\"kd\">@[protect_proj]</span>\n<span class=\"kd\">class</span> <span class=\"n\">ordered_semiring</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">semiring</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">ordered_add_comm_monoid</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">zero_le_one</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">mul_le_mul_of_nonneg_left</span> <span class=\"o\">:</span>  <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">mul_le_mul_of_nonneg_right</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>But this is really a different definition, so the refactoring would be bigger</p>",
        "id": 232153299,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616921742
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/decidable.20equality.20in.20ordered_semiring.3F/near/232152547\">said</a>:</p>\n<blockquote>\n<p>Really, I'm not sure there is much of a downside to making even really basic classes like <code>group</code> require decidability. If you are a programmer then probably everything in sight has decidable eq, and if you are a mathematician then it doesn't matter</p>\n</blockquote>\n<p>The one programming counterexample I can think of is function spaces, which people coming from Haskell would expect to be monoids.</p>",
        "id": 232162701,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1616933121
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Whatever you decide to do, could you please add a comment saying something like \"these extra fields are here to make some proofs about <code>nat</code> independent of the axiom of choice\"?</p>",
        "id": 232170113,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1616941481
    },
    {
        "content": "<p>And I think that we should have an attribute + linter for definitions/lemmas that must not depend on AC.</p>",
        "id": 232170149,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1616941526
    },
    {
        "content": "<p>Otherwise people like me can accidentally golf the proof and make them classical.</p>",
        "id": 232170164,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1616941555
    },
    {
        "content": "<p>Yeah, that makes sense. In fact I'm pretty sure there was a regression at one point wrt AC free proofs in core</p>",
        "id": 232170222,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616941592
    },
    {
        "content": "<p>I'm sorry if my golfing caused this regression.</p>",
        "id": 232170553,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1616942010
    },
    {
        "content": "<p>Did anything happen about this? i.e. is there an attribute you can put on a lemma to indicate its proof independent of AC so that's not golfed away?</p>",
        "id": 233789812,
        "sender_full_name": "Alistair Tucker",
        "timestamp": 1617959500
    },
    {
        "content": "<p>I don't think it was in this thread, but I think <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> wrote such an attribute, and I think it would be reasonable to have in mathlib</p>",
        "id": 233791577,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617960387
    },
    {
        "content": "<p>I didn't implement this attribute, although I still think it is a good idea</p>",
        "id": 233791683,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617960452
    },
    {
        "content": "<p>right now the nearest equivalent is the decidable namespace and associated linter</p>",
        "id": 233791706,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617960472
    },
    {
        "content": "<p>Oh wait, actually I did write an attribute for this once</p>",
        "id": 233791816,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617960531
    },
    {
        "content": "<p><a href=\"#narrow/stream/113489-new-members/topic/intuitionistic.20logic/near/224372999\">https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/intuitionistic.20logic/near/224372999</a></p>",
        "id": 233791897,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617960587
    },
    {
        "content": "<p>I used a variation on this code to double check that I didn't miss anything in the last round of AC cleanup in core</p>",
        "id": 233792033,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617960648
    },
    {
        "content": "<p>Could you please PR this attr?</p>",
        "id": 233792164,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1617960730
    },
    {
        "content": "<p>Would <code>@[avoids_axiom classical.choice]</code> be a better spelling that <code>@[intuit]</code>?</p>",
        "id": 233792205,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617960757
    },
    {
        "content": "<p>I think it would be better to have a positive statement, \"this theorem depends only on these axioms\", since otherwise something silly like <code>sorry</code> could sneak in</p>",
        "id": 233792464,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617960897
    },
    {
        "content": "<p>but also there should be \"presets\" for commonly used axiom sets</p>",
        "id": 233792552,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617960942
    },
    {
        "content": "<p><code>@[uses_axioms choice_free]</code>?</p>",
        "id": 233792637,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617960969
    },
    {
        "content": "<p>where <code>choice_free = [quot.sound, propext]</code></p>",
        "id": 233792673,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617960992
    },
    {
        "content": "<p>I would also prefer a positive assertion, but, if an exception is made, <code>no_AC</code> is a common abbreviation that I have seen.</p>",
        "id": 233792737,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617961035
    },
    {
        "content": "<p>I thought about using AC in the name but I don't think we use that abbreviation anywhere in mathlib</p>",
        "id": 233792780,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617961069
    },
    {
        "content": "<p>For non-mathlib projects, it might be nice to have <code>sorry_free</code> as well.</p>",
        "id": 233792785,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617961072
    },
    {
        "content": "<p>it's usually called \"classical\" and/or \"choice\"</p>",
        "id": 233792841,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617961092
    },
    {
        "content": "<p>there is a theorem called <code>axiom_of_choice</code> but it is rarely used</p>",
        "id": 233792871,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617961121
    },
    {
        "content": "<p>plus, in lean avoiding <code>choice</code> is a lot more about LEM than it is about AC as set theorists know it</p>",
        "id": 233792930,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617961162
    },
    {
        "content": "<p>I wouldn't mind tagging several of the larger lemmas in <code>lean-liquid</code> with <code>sorry_free</code> to make sure they stay that way during the frequent refactors of the project.</p>",
        "id": 233793011,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617961205
    },
    {
        "content": "<p>They are usually in files that import other files that still contain <code>sorry</code>.</p>",
        "id": 233793036,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617961221
    },
    {
        "content": "<p>Does anyone ever care about avoiding quot.sound and propext?</p>",
        "id": 233793521,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617961478
    },
    {
        "content": "<p>No axioms lean is interesting because you can compute with those proofs</p>",
        "id": 233794068,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617961759
    },
    {
        "content": "<p>this might come up if you want to execute a function defined by well founded recursion using <code>rfl</code></p>",
        "id": 233794119,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617961788
    },
    {
        "content": "<p>Also if you are doing proof translation to coq or something you might want to avoid quot.sound</p>",
        "id": 233794287,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617961860
    }
]