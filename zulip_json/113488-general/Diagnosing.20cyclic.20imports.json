[
    {
        "content": "<p>Is there a tool that will show me the full import cycle / graph?</p>",
        "id": 216457747,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1605181713
    },
    {
        "content": "<p>Ah, found <code>leanproject import-graph</code>, which seems to run quite slowly on mathlib</p>",
        "id": 216457875,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1605181824
    },
    {
        "content": "<p>i found <code>grep</code> to be the most useful tool here (or the similar <code>ack</code>)</p>",
        "id": 216493011,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1605198857
    },
    {
        "content": "<p>Running into cyclic import issues again in <a href=\"https://github.com/leanprover-community/mathlib/pull/5187\">https://github.com/leanprover-community/mathlib/pull/5187</a> :(</p>",
        "id": 218603017,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606935503
    },
    {
        "content": "<p>It would be really handy if lean could print the full cycle when this happens</p>",
        "id": 218605032,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606936496
    },
    {
        "content": "<p>I get the feeling <code>mathlibtools.leanproject import-graph</code> doesn't work when cyclic imports are present either</p>",
        "id": 218605487,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606936725
    },
    {
        "content": "<p>For some reason even if I revert to a working build and run <code>py -3.8 -m mathlibtools.leanproject import-graph --to data.fintype.basic bad.graphml</code>, I get a file with a single node in it</p>",
        "id": 218607783,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606937814
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/Diagnosing.20cyclic.20imports/near/218605032\">said</a>:</p>\n<blockquote>\n<p>It would be really handy if lean could print the full cycle when this happens</p>\n</blockquote>\n<p>note that <code>tsort</code> will print cycles. So if you use the bash functions that I posted last time, it might be easy to get the full cycle.</p>",
        "id": 218608998,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1606938392
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/Diagnosing.20cyclic.20imports/near/218607783\">said</a>:</p>\n<blockquote>\n<p>For some reason even if I revert to a working build and run <code>py -3.8 -m mathlibtools.leanproject import-graph --to data.fintype.basic bad.graphml</code>, I get a file with a single node in it</p>\n</blockquote>\n<p>I just tried this again from python - the exception on <a href=\"https://github.com/leanprover-community/mathlib-tools/blob/77e36fa1c84b87cea81407d5acd08389b9777790/mathlibtools/lib.py#L681-L685\">these lines</a> is being thrown by<code>Path(r\"C:/projects/mathlib/src\").relative_to(\"src\")</code>. I think this is a <code>mathlibtools</code> bug, although perhaps I have an outdated version</p>",
        "id": 218610115,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606938927
    },
    {
        "content": "<p>Updated to <code>mathlibtools == 1.0.0</code>, but still have the problem. Can someone check if <code>import-graph</code> works for them?</p>",
        "id": 218610792,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606939247
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib-tools/issues/88\">leanprover-community/mathlib-tools#88</a> fixes it for me. cc <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span>, since you just looked at another mathlibtools thread.</p>",
        "id": 218679868,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606994201
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 218682681,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1606995980
    },
    {
        "content": "<p>Hey, I'm also wanting lean to show me where the cycle is that I've introduced. Is there a good way of doing this / where can I get <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> 's bash functions that make this easier?</p>",
        "id": 250026851,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1629397501
    },
    {
        "content": "<p>Doing it by hand is usually not too hard if the files concerned do not have transitive imports. A rough knowledge of the library's organisation also helps.</p>",
        "id": 250027481,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1629397772
    },
    {
        "content": "<p>Yeah, ok, after focusing and clicking for about a minute I found the cycle, thanks for the advice.</p>",
        "id": 250028540,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1629398217
    },
    {
        "content": "<p>It is true that you sort of have to have a working knowledge of how imports in mathlib tend to work though, so I would support the error message printing the cycle.</p>",
        "id": 250028779,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1629398334
    },
    {
        "content": "<p>Yeah absolutely! Would be a great addition.</p>",
        "id": 250030013,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1629398911
    },
    {
        "content": "<p>Hehe, I am now trying to reconstruct what I did to find the cycle and I can't find it.</p>",
        "id": 250030597,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1629399167
    },
    {
        "content": "<p>Importing wrongly once will likely create many cycles, so it's probably hard to find the \"meaningful\" one.</p>",
        "id": 250030750,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1629399238
    },
    {
        "content": "<p>Ok, found it again, crisis averted</p>",
        "id": 250031112,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1629399384
    }
]