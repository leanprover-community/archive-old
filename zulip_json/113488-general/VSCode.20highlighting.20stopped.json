[
    {
        "content": "<p>Suddenly, VSCode highlights selectively only some of the keywords. Restarting doesn't work, and it happens only in this project.<br>\n<a href=\"/user_uploads/3121/VGBf6U-3d3iniHC0bUW8Qgm_/highlight-broken.png\">highlight-broken.png</a> <br>\nHas anyone seen this or knows how could I fix it?</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/VGBf6U-3d3iniHC0bUW8Qgm_/highlight-broken.png\" title=\"highlight-broken.png\"><img src=\"/user_uploads/3121/VGBf6U-3d3iniHC0bUW8Qgm_/highlight-broken.png\"></a></div>",
        "id": 240686949,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1622269908
    },
    {
        "content": "<p>This could easily be my fault</p>",
        "id": 240687096,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622270067
    },
    {
        "content": "<p>Can you create a mwe?</p>",
        "id": 240687101,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622270075
    },
    {
        "content": "<p>I'll try to</p>",
        "id": 240687179,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1622270166
    },
    {
        "content": "<p>Ok, so I managed to reduce to this file:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">type</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">type</span>\n<span class=\"bp\">|</span> <span class=\"n\">arrow</span> <span class=\"o\">:</span> <span class=\"n\">type</span> <span class=\"bp\">→</span> <span class=\"n\">type</span> <span class=\"bp\">→</span> <span class=\"n\">type</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">type</span>\n\n  <span class=\"kd\">infixl</span> <span class=\"bp\">`↣`</span> <span class=\"o\">:</span> <span class=\"mi\">50</span> <span class=\"o\">:=</span> <span class=\"n\">arrow</span>\n\n  <span class=\"kd\">@[simp]</span>\n  <span class=\"kd\">def</span> <span class=\"n\">interpret</span> <span class=\"o\">:</span> <span class=\"n\">type</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"n\">ℕ</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"bp\">↣</span> <span class=\"n\">τ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">σ.interpret</span> <span class=\"bp\">→</span> <span class=\"n\">τ.interpret</span>\n\n  <span class=\"kd\">notation</span> <span class=\"bp\">`∥`</span> <span class=\"n\">σ</span> <span class=\"bp\">`∥`</span> <span class=\"o\">:=</span> <span class=\"n\">σ.interpret</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">type</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">formula</span>\n<span class=\"bp\">|</span> <span class=\"n\">prime</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">formula</span>\n<span class=\"bp\">|</span> <span class=\"n\">universal</span> <span class=\"o\">{</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">type</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∥</span><span class=\"n\">σ</span><span class=\"bp\">∥</span> <span class=\"bp\">→</span> <span class=\"n\">formula</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">formula</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">formula</span>\n\n  <span class=\"kd\">notation</span> <span class=\"bp\">`∀∀`</span> <span class=\"n\">binders</span> <span class=\"bp\">`;`</span> <span class=\"n\">r</span><span class=\"o\">:(</span><span class=\"n\">scoped</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">universal</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">r</span>\n\n  <span class=\"c1\">-- removing `eqext` fixes the highlighting following it</span>\n  <span class=\"kd\">def</span> <span class=\"n\">eqext</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">type</span><span class=\"o\">},</span> <span class=\"bp\">∥</span><span class=\"n\">σ</span><span class=\"bp\">∥</span> <span class=\"bp\">→</span> <span class=\"bp\">∥</span><span class=\"n\">σ</span><span class=\"bp\">∥</span> <span class=\"bp\">→</span> <span class=\"n\">formula</span>\n  <span class=\"bp\">|</span> <span class=\"n\">type.zero</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">prime</span> <span class=\"bp\">$</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"bp\">↣</span> <span class=\"n\">τ</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"bp\">∀∀</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"bp\">∥</span><span class=\"n\">σ</span><span class=\"bp\">∥</span><span class=\"o\">)</span> <span class=\"bp\">;</span> <span class=\"o\">(</span><span class=\"n\">eqext</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">))</span>\n\n  <span class=\"kd\">def</span> <span class=\"n\">def_no_highlight</span> <span class=\"o\">:</span> <span class=\"n\">formula</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n  <span class=\"kn\">section</span> <span class=\"n\">section_no_highlight</span>\n\n  <span class=\"kd\">end</span> <span class=\"n\">section_no_highlight</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">formula</span>\n</code></pre></div>",
        "id": 240688378,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1622271932
    },
    {
        "content": "<p>Which on my computer looks like this:<br>\n<a href=\"/user_uploads/3121/MQi9MKsAMkJE4m-HSYW9PQJ_/highlight-broken-mwe.png\">highlight-broken-mwe.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/MQi9MKsAMkJE4m-HSYW9PQJ_/highlight-broken-mwe.png\" title=\"highlight-broken-mwe.png\"><img src=\"/user_uploads/3121/MQi9MKsAMkJE4m-HSYW9PQJ_/highlight-broken-mwe.png\"></a></div>",
        "id": 240688427,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1622272007
    },
    {
        "content": "<p>The <code>eqext</code> function seems to be the culprit here</p>",
        "id": 240688460,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1622272070
    },
    {
        "content": "<p>Ah, the highlighting is being confused by <code>\\forall\\forall</code>, and looking for a trailing comma</p>",
        "id": 240689415,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622273848
    },
    {
        "content": "<p>Which would be fixable by changing the highlighter to only recognize <code>forall</code> if followed by a space (even though the space is not strictly required)</p>",
        "id": 240689530,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622274033
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 240689533,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622274040
    },
    {
        "content": "<p>Is this a deal breaker for the new highlighter? Essentially, by using heuristics for better highlighting, there will always be user-defined syntax that will make those heuristics misfire.</p>",
        "id": 240689594,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622274177
    },
    {
        "content": "<p>Thank you for looking into it. For one, I am happy to workaround this by replacing the semicolon with a comma in this notation. (off-topic: which seems to work better anyway. <code>∀∀ z : ∥σ∥ , (eqext (x z) (y z))</code> works but <br>\n<code>∀∀ (z : ∥σ∥) ; (eqext (x z) (y z))</code> needs those parentheses around the typing statement in order to parse, if someone is willing to shed some light on this behaviour)</p>",
        "id": 240690153,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1622275170
    },
    {
        "content": "<p>I'm probably not the right person at all to discuss these design decisions, but wouldn't it be weird if <code>\\forall</code> followed immediately by a <code>(</code> or a <code>{</code> wouldn't be recognized?</p>",
        "id": 240690236,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1622275299
    },
    {
        "content": "<p>Mathlib style is to write it with a space anyway</p>",
        "id": 240690306,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622275360
    },
    {
        "content": "<p>Right, it's not a big deal</p>",
        "id": 240690413,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1622275558
    },
    {
        "content": "<p>Another example (distinct from Horatiu's and the other one I've mentioned) happens in data/list/defs from line 386 down, I think the issue is <code>\nsection forall₂</code></p>",
        "id": 240714171,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1622312233
    },
    {
        "content": "<p><code>\\b</code> is evidently meaningless in regexes when this much unicode is used</p>",
        "id": 240717309,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622316490
    },
    {
        "content": "<p>Is this intended to be fixed? Or do we have to live with the fact that mathlib lists don't highlight correctly</p>",
        "id": 240767175,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1622397890
    },
    {
        "content": "<p>Forall2 should be another easy fix, but not from mobile, which is all I have available till Tuesday</p>",
        "id": 240767398,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622398211
    },
    {
        "content": "<p>Fixed in <a href=\"https://github.com/leanprover/vscode-lean/pull/272\">https://github.com/leanprover/vscode-lean/pull/272</a></p>",
        "id": 240927529,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622546924
    },
    {
        "content": "<p>It's a shame github just updated linguist with the previous version</p>",
        "id": 240933917,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622550779
    },
    {
        "content": "<p>Nothing is ever easy - github interprets the syntax file in a different way to how vscode does...</p>",
        "id": 240982071,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622571159
    },
    {
        "content": "<p>There's also the growing issue of support for Lean 4 in the github syntax highlighting: <a href=\"https://github.com/leanprover/lean4/issues/377\">https://github.com/leanprover/lean4/issues/377</a></p>",
        "id": 240982337,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1622571272
    },
    {
        "content": "<p>Github linguist lets you <a href=\"https://github.com/github/linguist/blob/master/docs/overrides.md#using-gitattributes\">override syntax in <code>.gitattributes</code></a> - so I don't think we need to support a polyglot grammar.</p>",
        "id": 241077258,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622582302
    },
    {
        "content": "<p>I noticed a couple other places where highlighting stopped:<br>\n<code>core.init.meta.simp_tactic</code><br>\n<a href=\"/user_uploads/3121/divpqzVTW5PDqprDcIrmeo8d/image.png\">image.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/divpqzVTW5PDqprDcIrmeo8d/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/divpqzVTW5PDqprDcIrmeo8d/image.png\"></a></div><p><code>core.init.meta.smt.rsimp</code><br>\n<a href=\"/user_uploads/3121/EpKND9MYyCjMK6p6VJYHCpl7/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/EpKND9MYyCjMK6p6VJYHCpl7/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/EpKND9MYyCjMK6p6VJYHCpl7/image.png\"></a></div>",
        "id": 241085182,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1622587619
    },
    {
        "content": "<p>Also <code>meta def</code> is not highlighted for most of <code>core.init.meta.tactic</code>.</p>",
        "id": 241085389,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1622587788
    },
    {
        "content": "<p>Which extension version?</p>",
        "id": 241085670,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622587951
    },
    {
        "content": "<p>Thanks for the report</p>",
        "id": 241085687,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622587968
    },
    {
        "content": "<p><code>lean 0.16.34</code></p>",
        "id": 241085944,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1622588128
    },
    {
        "content": "<p>I'll look at this again tomorrow.</p>",
        "id": 241086514,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622588497
    },
    {
        "content": "<p>Here is another one where highlighting fails on <code>0.16.34</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"> @[simps]: -/</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n</code></pre></div>",
        "id": 241097799,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1622598798
    },
    {
        "content": "<p>Another bug I just found. It doesn't detect the dot at the end of lines (order/bounded_lattice):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">top_ne_coe</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">⊤</span> <span class=\"bp\">≠</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">with_top</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">.</span>\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">coe_ne_top</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">with_top</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"bp\">⊤</span> <span class=\"bp\">.</span>\n\n<span class=\"kd\">@[priority 10]</span>\n<span class=\"kd\">instance</span> <span class=\"n\">has_lt</span> <span class=\"o\">[</span><span class=\"n\">has_lt</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_lt</span> <span class=\"o\">(</span><span class=\"n\">with_top</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">lt</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">o₁</span> <span class=\"n\">o₂</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">o₁</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">o₂</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p><a href=\"/user_uploads/3121/1cLhJsL20hbzswLr3ypp0Uiz/image.png\">yet another bug</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/1cLhJsL20hbzswLr3ypp0Uiz/image.png\" title=\"yet another bug\"><img src=\"/user_uploads/3121/1cLhJsL20hbzswLr3ypp0Uiz/image.png\"></a></div>",
        "id": 241107207,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1622611535
    },
    {
        "content": "<p>I think the <code>@[simps]</code> one has always been broken</p>",
        "id": 241110153,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622615412
    },
    {
        "content": "<p>The other bug is the <code> `name </code> parser not knowing when to stop and eating the <code>)</code></p>",
        "id": 241111148,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622616502
    },
    {
        "content": "<p>At that point, is it worth spending too much time on fixing all of that? You said that the lean4 highlighting uses directly Lean's parsing, right?</p>",
        "id": 241115588,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1622620106
    },
    {
        "content": "<p>Fixes were easy: <a href=\"https://github.com/leanprover/vscode-lean/pull/273\">https://github.com/leanprover/vscode-lean/pull/273</a></p>",
        "id": 241116476,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622620763
    },
    {
        "content": "<p>I have no idea what lean4 highlighting looks like, I don't have it installed</p>",
        "id": 241116606,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622620810
    },
    {
        "content": "<p>I've left the <code>simps</code> one alone as it's a problem with the markdown parser, and I don't want to open that can of worms too</p>",
        "id": 241117223,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622621208
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113488-general/topic/VSCode.20highlighting.20stopped/near/241115588\">said</a>:</p>\n<blockquote>\n<p>At that point, is it worth spending too much time on fixing all of that? You said that the lean4 highlighting uses directly Lean's parsing, right?</p>\n</blockquote>\n<p>Lean 4 uses both the VSCode syntax highlighting and semantic highlighting (which happens on the server side). The downside of semantic highlighting is that the code needs to be elaborated to display the highlighting, so it's always good to have something like the VSCode highlighting as a backup.</p>",
        "id": 241122180,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1622624457
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"221921\">@Marc Huisinga</span>, can you paste a screenshot of what the highlighting looks like for a typical lean4 definition?</p>",
        "id": 241122944,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622624899
    },
    {
        "content": "<p>(preferably one that leverages the semantic highlighting)</p>",
        "id": 241123011,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622624938
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/VSCode.20highlighting.20stopped/near/241122944\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"221921\">Marc Huisinga</span>, can you paste a screenshot of what the highlighting looks like for a typical lean4 definition?</p>\n</blockquote>\n<p>Stolen from the Lean 4 course at KIT:<br>\n<a href=\"/user_uploads/3121/yw6Ybn3voTfmUQrMII0PH4Kn/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/yw6Ybn3voTfmUQrMII0PH4Kn/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/yw6Ybn3voTfmUQrMII0PH4Kn/image.png\"></a></div>",
        "id": 241123028,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1622624952
    },
    {
        "content": "<p>note that all tactics are highlighted, variables etc.</p>",
        "id": 241123069,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1622624987
    },
    {
        "content": "<p>Odd that <code>count_erase</code> is highlighted but not the other lemmas in <code>simp</code></p>",
        "id": 241123236,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622625085
    },
    {
        "content": "<p>maybe because that's the induction hypothesis</p>",
        "id": 241123306,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1622625122
    },
    {
        "content": "<p>But at any rate, the fact that <code>{as : ...}</code> in the argument is in a pale blue is consistent with the new lean3 vscode syntax, which is nice</p>",
        "id": 241123328,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622625126
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/VSCode.20highlighting.20stopped/near/241123236\">said</a>:</p>\n<blockquote>\n<p>Odd that <code>count_erase</code> is highlighted but not the other lemmas in <code>simp</code></p>\n</blockquote>\n<p>It's telling you \"why are you using recursion in a tactic proof\"</p>",
        "id": 241123590,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1622625306
    },
    {
        "content": "<p>Here's an example from a macro declaration where the keywords in the macro are highlighted in the <code>macro_rules</code> command:<br>\n<a href=\"/user_uploads/3121/dXYf_nAKVEhMxAB0ZujFRg45/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/dXYf_nAKVEhMxAB0ZujFRg45/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/dXYf_nAKVEhMxAB0ZujFRg45/image.png\"></a></div>",
        "id": 241123613,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1622625319
    },
    {
        "content": "<p>I guess the sepBy highlighting might be a bug</p>",
        "id": 241123632,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1622625331
    },
    {
        "content": "<p>Well, that <em>is</em> the token :) . Not sure if we should add some heuristics to terminate highlighting before the <code>(</code>, or add some annotation in the parser for that.</p>",
        "id": 241123841,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1622625454
    },
    {
        "content": "<p>One more example with string interpolation:<br>\n<a href=\"/user_uploads/3121/nsFphxTCChT3ocw_ztMpZSgD/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/nsFphxTCChT3ocw_ztMpZSgD/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/nsFphxTCChT3ocw_ztMpZSgD/image.png\"></a></div>",
        "id": 241124332,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1622625740
    },
    {
        "content": "<p>is it possible to revert the coloring of regular text inside the interpolation? like that <code>&lt;-</code> shouldn't be brown</p>",
        "id": 241125841,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1622626624
    },
    {
        "content": "<p>I don't think LSP has an appropriate token kind for that. But it lets us invent our own.</p>",
        "id": 241126250,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1622626859
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"111080\">Floris van Doorn</span> <a href=\"#narrow/stream/113488-general/topic/VSCode.20highlighting.20stopped/near/241097799\">said</a>:</p>\n<blockquote>\n<p>Here is another one where highlighting fails on <code>0.16.34</code>:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"> @[simps]: -/</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Filed as <a href=\"https://github.com/leanprover/vscode-lean/issues/274\">https://github.com/leanprover/vscode-lean/issues/274</a>, this has probably been around as long as we've highlighted markdown comments.</p>",
        "id": 241134215,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622632183
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/VSCode.20highlighting.20stopped/near/241125841\">said</a>:</p>\n<blockquote>\n<p>is it possible to revert the coloring of regular text inside the interpolation? like that <code>&lt;-</code> shouldn't be brown</p>\n</blockquote>\n<p>The vim syntax highlighting does that for all strings by default, and I believe we could do that in vscode as well.  It works mostly fine, except for <code>syntax \"{\" term \"}\" : term</code>, where <code>\" term \"</code> is highlighted as a string.  There was some talk of enabling interpolation by default for all strings, then we'd just need to write <code>\"\\{\"</code> instead.</p>",
        "id": 241173839,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1622651224
    },
    {
        "content": "<p>wait, why <em>isn't</em> that interpreted as an interpolated string by lean? Is it because <code>syntax</code> is magic?</p>",
        "id": 241174155,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1622651377
    },
    {
        "content": "<p>It would be nice if we could escape braces today, even if it's not necessary. It might help with these things</p>",
        "id": 241174292,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1622651427
    },
    {
        "content": "<p>In <code>data.list.rotate</code>, probably because of <code>exists</code><br>\n<a href=\"/user_uploads/3121/Fz1ZTgYRXp11z79xdJ53gT5V/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/Fz1ZTgYRXp11z79xdJ53gT5V/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/Fz1ZTgYRXp11z79xdJ53gT5V/image.png\"></a></div>",
        "id": 243387137,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1624284412
    },
    {
        "content": "<p>Honestly, I'm beginning to feel that highlighting the argument names brought more issues than it's worth because the failure mode is so extreme.  (Looking though the screenshot, the <code>λ ⟨n, hn⟩, ...</code> is also highlighted incorrectly.)</p>",
        "id": 243392639,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1624286578
    },
    {
        "content": "<p>I agree with Gabriel. I never noticed any issues with highlighting for years, because I wasn't observant enough to spot any of the subtleties which people would occasionally spot, but now I'm noticing issues all the time which are really easy to spot, like the above.</p>",
        "id": 243392905,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1624286675
    },
    {
        "content": "<p>There was a really long and obvious in <code>subgroup</code>, and it didn't have anything to do with the new highlighting, but yeah I agree that this seems to have introduced lots.</p>",
        "id": 243396486,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1624288056
    },
    {
        "content": "<p>The change that fixed <code>subgroup</code> was independent of the change that introduced the binder names</p>",
        "id": 243402643,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1624290525
    },
    {
        "content": "<p>I'll put together a patch to fix the above two bugs, even if we do eventually decide to revert the feature entirely</p>",
        "id": 243403150,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1624290750
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113488-general/topic/VSCode.20highlighting.20stopped/near/243387137\">said</a>:</p>\n<blockquote>\n<p>In <code>data.list.rotate</code>, probably because of <code>exists</code><br>\n<a href=\"/user_uploads/3121/Fz1ZTgYRXp11z79xdJ53gT5V/image.png\">image.png</a></p>\n</blockquote>\n<p>Fixed in <a href=\"https://github.com/leanprover/vscode-lean/pull/276\">https://github.com/leanprover/vscode-lean/pull/276</a></p>",
        "id": 243405499,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1624291754
    },
    {
        "content": "<p>Well, almost...</p>",
        "id": 243405998,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1624292011
    },
    {
        "content": "<p>Ok, fixed properly and updated with a fix for <code>λ ⟨n, hn⟩, ...</code> too:</p>\n<p><a href=\"user_uploads/3121/YJX4CylKYr5mgsYdIu1t511M/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"user_uploads/3121/YJX4CylKYr5mgsYdIu1t511M/image.png\" title=\"image.png\"><img src=\"user_uploads/3121/YJX4CylKYr5mgsYdIu1t511M/image.png\"></a></div>",
        "id": 243407375,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1624292664
    },
    {
        "content": "<p>Highlighting the contents of the<code>⟨⟩</code> as a parameter is the wrong thing to do anyway, as you can have all sorts of weird things in there:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">⟨</span><span class=\"bp\">.</span><span class=\"o\">((</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">unit.star</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">snd</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">))⟩,</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">unit</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 243408102,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1624293023
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.ring.basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>highlights in unexpected ways:<br>\n<a href=\"/user_uploads/3121/NFhsCTt6-eFQhhiNFgQzl4b-/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/NFhsCTt6-eFQhhiNFgQzl4b-/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/NFhsCTt6-eFQhhiNFgQzl4b-/image.png\"></a></div>",
        "id": 243873091,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1624593155
    },
    {
        "content": "<p>I'm not so worried about the parameter highlighting occasionally being suboptimal - it's the cases where it breaks things that worked before I added it that I'm most worried about. Thanks for the report anyway, I'll have a go at fixing that one once the other PR is merged.</p>",
        "id": 243945390,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1624641735
    },
    {
        "content": "<p>I don't know if this one is already reported:<br>\n<code>listΠ</code><br>\n<a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/tactic/rcases.lean#L426\">https://github.com/leanprover-community/mathlib/blob/master/src/tactic/rcases.lean#L426</a><br>\n<a href=\"/user_uploads/3121/DHlp9jn0dNl24z2QJrYvP4Je/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/DHlp9jn0dNl24z2QJrYvP4Je/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/DHlp9jn0dNl24z2QJrYvP4Je/image.png\"></a></div>",
        "id": 244291654,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1624977500
    },
    {
        "content": "<p>It pains me a bit given how much work went into it, but I've now removed the binder highlighting completely.</p>",
        "id": 244296304,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1624979102
    },
    {
        "content": "<p>Removing it from vscode-lean4 might also be the right call. I had originally removed it in the first iteration of the syntax highlighting for the same reasons (and the fact that Lean 4 was expected to have semantic highlighting).</p>",
        "id": 244297106,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1624979356
    },
    {
        "content": "<p>I don't think we ever had it in vscode-lean4 (or at least I can't find it right now).</p>",
        "id": 244297431,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1624979460
    },
    {
        "content": "<p>You're right, I was thinking of definition name highlighting! Sorry.</p>",
        "id": 244297491,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1624979479
    },
    {
        "content": "<p>Definition name highlighting is much less tricky, since it can't go on forever (at some point there's going to be whitespace).  Highlighting binder names can go wrong much more easily, since you need to keep track of nested parentheses, etc.  (And god forbid somebody declares <code>noooo(</code> as a prefix notation.)</p>",
        "id": 244298008,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1624979651
    },
    {
        "content": "<p>TextMate grammars are spooky</p>",
        "id": 244299533,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1624980202
    },
    {
        "content": "<p>Right, the binder hightlighting never had a chance if faced with <code>nooo(</code>. <del><code>listΠ</code> would be straighforward to add another fix for.</del></p>",
        "id": 244299994,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1624980370
    },
    {
        "content": "<p>Ah, actually <code>listΠ</code> would be impossible to handle, since it's notation defined as <code>local notation `listΠ` := list_Pi</code></p>",
        "id": 244300128,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1624980433
    },
    {
        "content": "<p>And there's no way for the textmate grammar to know when someone has stolen its binder syntax to use for something else - this is exactly like the <code>nooo(</code> case, and would require heuristics based on what someone would \"reasonably want to do\"</p>",
        "id": 244300172,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1624980455
    },
    {
        "content": "<p>It looks like highlighting for lambdas has gone too - is it my imagination or was that there before the binder highlighting?</p>",
        "id": 244342160,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1624998200
    },
    {
        "content": "<p>That was part of the binder highlighting</p>",
        "id": 244346164,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625000012
    },
    {
        "content": "<p>Maybe we can ship a second \"Lean (with binders)\" syntax file and let users choose between them?</p>",
        "id": 244349339,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625001558
    },
    {
        "content": "<p>Even though lean 4 has semantic highlighting, it won't work on github where a (modified) TextMate engine is used</p>",
        "id": 244349463,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625001608
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/VSCode.20highlighting.20stopped/near/244346164\">said</a>:</p>\n<blockquote>\n<p>That was part of the binder highlighting</p>\n</blockquote>\n<p>Hmm I'm fairly sure that in examples like<br>\n<a href=\"/user_uploads/3121/-ZXeXSKHRoQy5kr-6-R0Ioar/image.png\">image.png</a> <br>\nthe <code>λ</code> was highlighted before the binders change...</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/-ZXeXSKHRoQy5kr-6-R0Ioar/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/-ZXeXSKHRoQy5kr-6-R0Ioar/image.png\"></a></div>",
        "id": 244358500,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1625007119
    },
    {
        "content": "<p>I went looking for some old screenshots to double check: <a href=\"/user_uploads/3121/-7LB782x-utn2VlLXsyk26Bd/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/-7LB782x-utn2VlLXsyk26Bd/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/-7LB782x-utn2VlLXsyk26Bd/image.png\"></a></div>",
        "id": 244359013,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1625007452
    },
    {
        "content": "<p>(from the discord, posted in May)</p>",
        "id": 244359043,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1625007470
    },
    {
        "content": "<p>Could we have this feature back? It would be a shame for this to disappear in favour of seemingly nothing</p>",
        "id": 244814274,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1625331018
    },
    {
        "content": "<p>The whole feature or just blue <code>λ</code>?</p>",
        "id": 244814899,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625331973
    },
    {
        "content": "<p>Blue λ</p>",
        "id": 244819306,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1625338640
    },
    {
        "content": "<p>Essentially just how it was before the binders change</p>",
        "id": 244819309,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1625338651
    }
]