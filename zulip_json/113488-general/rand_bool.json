[
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/rand_bool\">docs#rand_bool</a> is broken</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">system.random</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">list</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">sample</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">bool</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"n\">N</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">rand_bool</span> <span class=\"o\">(</span><span class=\"n\">mk_std_gen</span> <span class=\"n\">k</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">sample</span> <span class=\"mi\">3737</span>\n<span class=\"c1\">-- [tt, tt, tt, tt, tt, tt, tt, tt, tt, tt, tt, tt, tt, tt, tt, ..., tt]</span>\n</code></pre></div>\n<p>It always return true! <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span></p>",
        "id": 267717754,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641991085
    },
    {
        "content": "<p>It might just be chance! <a href=\"https://dilbert.com/strip/2001-10-25\">https://dilbert.com/strip/2001-10-25</a></p>",
        "id": 267718033,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1641991247
    },
    {
        "content": "<p>More generally, I noticed that <a href=\"https://leanprover-community.github.io/mathlib_docs/find/rand_nat\">docs#rand_nat</a> really wasn't random when <code>lo</code> and <code>hi</code> are too close together. <code>rand_bool</code> being defined from <code>rand_nat 0 1</code>, the above isn't surprising.</p>",
        "id": 267718125,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641991309
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112857\">Leonardo de Moura</span> was the one writing this. Should I bother him?</p>",
        "id": 267719202,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641991897
    },
    {
        "content": "<p>If the bug is still there in Lean 4, then I'd say yes.</p>",
        "id": 267719400,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1641991994
    },
    {
        "content": "<p>But the code is also pretty outdated style-wise, so maybe removing/rewriting it would also be an option.</p>",
        "id": 267719449,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1641992026
    },
    {
        "content": "<p>I'm writing my computational project using Lean and Lean 3 isn't fast enough to keep up with the level of precision required, so I'll have to port my 20 lines or so to Lean 4 and then I'll see whether the bug still exists.</p>",
        "id": 267719561,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641992072
    },
    {
        "content": "<p>To be fair, you're also using it in a slightly unexpected way.  I believe this is how it is intended to be used:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">system.random</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">sample</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">state</span> <span class=\"n\">std_gen</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">list.range</span> <span class=\"n\">N</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mmap</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">rand_bool</span><span class=\"o\">⟩</span>\n\n<span class=\"k\">#eval</span> <span class=\"o\">((</span><span class=\"n\">sample</span> <span class=\"mi\">3737</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">run</span> <span class=\"n\">mk_std_gen</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span>  <span class=\"c1\">-- ``random''</span>\n</code></pre></div>",
        "id": 267719616,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1641992115
    },
    {
        "content": "<p>Oh, this sounds like my problem is coming from the <code>/ 2147483562</code> in</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">mk_std_gen</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">std_gen</span> <span class=\"o\">:=</span>\n<span class=\"k\">let</span> <span class=\"n\">q</span>  <span class=\"o\">:=</span> <span class=\"n\">s</span> <span class=\"bp\">/</span> <span class=\"mi\">2147483562</span><span class=\"o\">,</span>\n    <span class=\"n\">s1</span> <span class=\"o\">:=</span> <span class=\"n\">s</span> <span class=\"bp\">%</span> <span class=\"mi\">2147483562</span><span class=\"o\">,</span>\n    <span class=\"n\">s2</span> <span class=\"o\">:=</span> <span class=\"n\">q</span> <span class=\"bp\">%</span> <span class=\"mi\">2147483398</span> <span class=\"k\">in</span>\n<span class=\"o\">⟨</span><span class=\"n\">s1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">s2</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 267719784,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641992219
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 267719787,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1641992220
    },
    {
        "content": "<p>I see. I was using a new seed every time rather than passing it on using <code>std_next</code> where arguably the randomness happens.</p>",
        "id": 267719977,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641992329
    },
    {
        "content": "<p>I just checked and if you run my <code>sample 10</code> function on various seeds then it also returns different results.  It's apparently just the first boolean that is not so random.</p>",
        "id": 267720059,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1641992396
    },
    {
        "content": "<blockquote>\n<p>just the first boolean that is not so random.</p>\n</blockquote>\n<p>Which is still worth fixing.</p>",
        "id": 267720198,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1641992429
    },
    {
        "content": "<p>In my real code, I'm generating a bunch of experiments (and <code>sample</code> is meant to collect them) but each experiment needs several coin tosses. To me it seems that the <code>mmap</code> will cause a problem because the first coin toss of the first experiment will have the same <code>std_gen</code> as the second experiment.</p>",
        "id": 267720597,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641992610
    },
    {
        "content": "<p>Schematically,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">1</span><span class=\"n\">st</span> <span class=\"n\">exp</span> <span class=\"bp\">→</span> <span class=\"mi\">2</span><span class=\"n\">nd</span> <span class=\"n\">exp</span> <span class=\"bp\">→</span> <span class=\"mi\">3</span><span class=\"n\">rd</span> <span class=\"n\">exp</span>\n<span class=\"mi\">1</span><span class=\"n\">st</span> <span class=\"n\">gen</span>   <span class=\"mi\">2</span><span class=\"n\">nd</span> <span class=\"n\">gen</span>   <span class=\"mi\">3</span><span class=\"n\">rd</span> <span class=\"n\">gen</span>\n    <span class=\"bp\">↓</span>         <span class=\"bp\">↓</span>         <span class=\"bp\">↓</span>\n<span class=\"mi\">1</span><span class=\"n\">st</span> <span class=\"n\">toss</span>  <span class=\"mi\">1</span><span class=\"n\">st</span> <span class=\"n\">toss</span>  <span class=\"mi\">1</span><span class=\"n\">st</span> <span class=\"n\">toss</span>\n<span class=\"mi\">2</span><span class=\"n\">nd</span> <span class=\"n\">gen</span>   <span class=\"mi\">3</span><span class=\"n\">rd</span> <span class=\"n\">gen</span>   <span class=\"mi\">4</span><span class=\"n\">th</span> <span class=\"n\">gen</span>\n    <span class=\"bp\">↓</span>         <span class=\"bp\">↓</span>         <span class=\"bp\">↓</span>\n<span class=\"mi\">2</span><span class=\"n\">st</span> <span class=\"n\">toss</span>  <span class=\"mi\">2</span><span class=\"n\">st</span> <span class=\"n\">toss</span>  <span class=\"mi\">2</span><span class=\"n\">st</span> <span class=\"n\">toss</span>\n<span class=\"mi\">3</span><span class=\"n\">nd</span> <span class=\"n\">gen</span>   <span class=\"mi\">4</span><span class=\"n\">rd</span> <span class=\"n\">gen</span>   <span class=\"mi\">5</span><span class=\"n\">th</span> <span class=\"n\">gen</span>\n</code></pre></div>\n<p>Am I right?</p>",
        "id": 267720873,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641992761
    },
    {
        "content": "<p>My idea was then to create a new seed every time</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">1</span><span class=\"n\">st</span> <span class=\"n\">exp</span> <span class=\"bp\">→</span> <span class=\"mi\">2</span><span class=\"n\">nd</span> <span class=\"n\">exp</span>           <span class=\"bp\">→</span> <span class=\"mi\">3</span><span class=\"n\">rd</span> <span class=\"n\">exp</span>\n<span class=\"mi\">1</span><span class=\"n\">st</span> <span class=\"n\">seed</span>  <span class=\"mi\">2</span><span class=\"n\">nd</span> <span class=\"n\">seed</span>            <span class=\"mi\">3</span><span class=\"n\">rd</span> <span class=\"n\">seed</span>\n    <span class=\"bp\">↓</span>         <span class=\"bp\">↓</span>                   <span class=\"bp\">↓</span>\n<span class=\"mi\">1</span><span class=\"n\">st</span> <span class=\"n\">toss</span>  <span class=\"mi\">1</span><span class=\"n\">st</span> <span class=\"n\">toss</span>            <span class=\"mi\">1</span><span class=\"n\">st</span> <span class=\"n\">toss</span>\n<span class=\"mi\">1</span><span class=\"n\">nd</span> <span class=\"n\">gen</span>   <span class=\"mi\">1</span><span class=\"n\">st</span> <span class=\"n\">unrelated</span> <span class=\"n\">gen</span>   <span class=\"mi\">1</span><span class=\"n\">st</span> <span class=\"n\">yet</span> <span class=\"n\">unrelated</span> <span class=\"n\">gen</span>\n    <span class=\"bp\">↓</span>         <span class=\"bp\">↓</span>                   <span class=\"bp\">↓</span>\n<span class=\"mi\">2</span><span class=\"n\">st</span> <span class=\"n\">toss</span>  <span class=\"mi\">2</span><span class=\"n\">st</span> <span class=\"n\">toss</span>            <span class=\"mi\">2</span><span class=\"n\">st</span> <span class=\"n\">toss</span>\n<span class=\"mi\">2</span><span class=\"n\">nd</span> <span class=\"n\">gen</span>   <span class=\"mi\">2</span><span class=\"n\">nd</span> <span class=\"n\">unrelated</span> <span class=\"n\">gen</span>   <span class=\"mi\">2</span><span class=\"n\">nd</span> <span class=\"n\">yet</span> <span class=\"n\">unrelated</span> <span class=\"n\">gen</span>\n</code></pre></div>",
        "id": 267721226,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641992921
    },
    {
        "content": "<p>If you write your program as a single computation in the <code>state std_gen</code> monad, then you will automatically use the RNG in the correct way. You should only ever generate one seed.</p>",
        "id": 267721311,
        "sender_full_name": "Reid Barton",
        "timestamp": 1641992982
    },
    {
        "content": "<p>Oh okay. I really wish this was better documented...</p>",
        "id": 267721544,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641993114
    },
    {
        "content": "<p>You can also use <code>std_split</code> to turn a seed into two \"independent\" seeds, if writing the program as a single computation is too onerous for some reason (e.g. if you needed parallelism). Though I wouldn't necessarily trust the statistical properties of <code>std_split</code> (the one in GHC had some fun bugs for a while).</p>",
        "id": 267721548,
        "sender_full_name": "Reid Barton",
        "timestamp": 1641993115
    },
    {
        "content": "<p>So <code>sample</code> uses <code>state</code>. But how should I write the auxiliary functions?</p>",
        "id": 267721716,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641993217
    },
    {
        "content": "<p>Wouldn't the experiment be a pure function that you feed a random input?</p>",
        "id": 267724729,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1641994694
    },
    {
        "content": "<p>Typically, I would guess that you can do almost everything outside the random monad, and run the actual experiment in ~10 lines in the random monad.</p>",
        "id": 267724798,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1641994740
    },
    {
        "content": "<p>Maybe slightly counterintuitively, but you should run all experiments in the \"same\" monad.</p>",
        "id": 267725845,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1641995228
    },
    {
        "content": "<p>That is, something like <code>experiment : state std_gen experiment_result</code> and then:<br>\n<code>(list.range 10).mmap $ λ _, experiment</code> if you want to run 10 experiments.</p>",
        "id": 267725923,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1641995267
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/rand_bool/near/267724729\">said</a>:</p>\n<blockquote>\n<p>Wouldn't the experiment be a pure function that you feed a random input?</p>\n</blockquote>\n<p>But how does the experiment itself manage randomness? It has to call several times the coin toss function</p>",
        "id": 267727712,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641996029
    },
    {
        "content": "<p>I'm pretty sure this file is a port of Haskell's version, so you might find that documentation helpful <a href=\"https://hackage.haskell.org/package/random-1.2.1/docs/System-Random.html\">https://hackage.haskell.org/package/random-1.2.1/docs/System-Random.html</a></p>",
        "id": 267728890,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1641996522
    },
    {
        "content": "<p>Btw, why is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/state_t\">docs#state_t</a> not fully universe polymorphic?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">state_t'</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">run</span> <span class=\"o\">:</span> <span class=\"n\">σ</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">σ</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 267729110,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641996616
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/113488-general/topic/rand_bool/near/267725845\">said</a>:</p>\n<blockquote>\n<p>Maybe slightly counterintuitively, but you should run all experiments in the \"same\" monad.</p>\n</blockquote>\n<p>Thanks a lot! It works great!</p>",
        "id": 267731635,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641997739
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> Probably that <code>(m : Type (max u w) → Type v)</code> constraint will lead to unification issues</p>",
        "id": 267822866,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1642048406
    }
]