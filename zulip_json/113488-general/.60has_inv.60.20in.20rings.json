[
    {
        "content": "<p>I would like help from an algebra person; let me ping <span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span> for concreteness.  I don't understand the following behaviour of <code>has_inv</code>.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">ring</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>  <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- &quot;failed to synthesize type class instance for ... has_inv R&quot;</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">units</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹</span>\n\n<span class=\"c1\">-- works</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">units</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:</span> <span class=\"n\">units</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>Why does Lean look for a <code>has_inv</code> instance for <code>R</code>, when <code>x</code> is already of type <code>units R</code> which does have a <code>has_inv</code> instance?</p>\n<p>I have been bitten by this repeatedly in <a href=\"https://github.com/leanprover-community/mathlib/issues/3510\">#3510</a>, where, given <code>x : units R</code>, I have often had to consider <code>x⁻¹</code>, cast to be of type <code>R</code>.  It works if I do the double cast <code>((x⁻¹ : units R) : R)</code>, but not if I just do <code>(x⁻¹: R)</code>.</p>",
        "id": 204690518,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1595435909
    },
    {
        "content": "<p>I think that once lean gets here <code>example (x : units R) : R</code> it decides that the output should be <code>R</code>, and uses that to decide where to take the inverse</p>",
        "id": 204690913,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1595436113
    },
    {
        "content": "<p>So is there a way to avoid the double cast?</p>",
        "id": 204691100,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1595436196
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">normed_space</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">normed_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- &quot;failed to synthesize type class instance for ... has_add (units R)&quot;</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">units</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"err\">∥</span><span class=\"n\">x</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"err\">∥</span>\n\n<span class=\"c1\">-- &quot;failed to synthesize type class instance for ... has_inv R&quot;</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">units</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"err\">∥</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"err\">∥</span>\n\n<span class=\"c1\">-- works</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">units</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"err\">∥</span><span class=\"o\">((</span><span class=\"n\">x</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:</span> <span class=\"n\">units</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"err\">∥</span>\n</code></pre></div>",
        "id": 204691590,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1595436446
    },
    {
        "content": "<p>Writing it left to right avoids writing the explicit cast <span aria-label=\"anguish\" class=\"emoji emoji-1f62b\" role=\"img\" title=\"anguish\">:anguish:</span>, thats kinda annoying though</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">units</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"err\">∥</span><span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:</span> <span class=\"n\">units</span> <span class=\"n\">R</span><span class=\"o\">)</span><span class=\"err\">∥</span>\n</code></pre></div>",
        "id": 204694020,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1595437583
    },
    {
        "content": "<p>I think it would be hard to do that -- this happens all over the file, mostly in the middle of longer computations.</p>",
        "id": 204694137,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1595437631
    },
    {
        "content": "<p>I guess I'm curious why it doesn't \"just work\".  Shouldn't <code>⁻¹</code> be applied to the object it follows, without trying to second-guess whether that object will later be cast to something else?</p>",
        "id": 204694409,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1595437782
    },
    {
        "content": "<p>(deleted wrong statement)</p>",
        "id": 204694631,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1595437893
    },
    {
        "content": "<p>lean (the elaborator?) has to make a choice about whether to put apply coercion before the inverse or after. i don't know how it makes that choice; i guess this thread is about the fact that it makes the wrong choice in some case</p>",
        "id": 204695294,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1595438197
    },
    {
        "content": "<p>Thanks, that's instructive.  Is this in (core) Lean territory or still in mathlib territory?  IIUC, it is still choosing between two things that are defined in mathlib: <code>units.has_coe</code> and <code>has_inv.inv</code></p>",
        "id": 204695783,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1595438410
    },
    {
        "content": "<p>(I don't know anything about this stuff and I hope someone else comes by later to clarify)</p>",
        "id": 204696079,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1595438545
    },
    {
        "content": "<p>Yes, that'd be great.  I'm curious about how deeply buried the code is in which Lean (the elaborator?) makes this bad decision.</p>",
        "id": 204696509,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1595438739
    },
    {
        "content": "<p>I guess it is deep as in C++ deep...</p>",
        "id": 204697176,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595439038
    },
    {
        "content": "<p>Is there any way to locally (within one file) \"redirect\" the elaborator?</p>",
        "id": 204697495,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1595439215
    },
    {
        "content": "<p>Lean elaborates from outside to inside</p>",
        "id": 204707375,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1595443995
    },
    {
        "content": "<p>Lean first sees <code>⁻¹</code> and expects a term of type <code>R</code>, so it assumes <code>⁻¹</code> means <code>@has_inv.inv R _</code></p>",
        "id": 204707453,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1595444033
    },
    {
        "content": "<p>more accurately, Lean sees <code>@has_inv.inv ?m_1 ?m_2 x</code> and tries to solve <code>@has_inv.inv ?m_1 ?m_2 x : R</code></p>",
        "id": 204707567,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1595444080
    },
    {
        "content": "<p>Lean sees the <code>?m_1</code> before it sees <code>x</code>, so it unifies <code>?m_1</code> with <code>R</code></p>",
        "id": 204707695,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1595444132
    },
    {
        "content": "<p>and then fails at <code>?m_2</code> and <em>does not backtrack</em></p>",
        "id": 204707714,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1595444141
    },
    {
        "content": "<p>at least that's how I understand it, I've never seen the c++ code</p>",
        "id": 204707788,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1595444165
    },
    {
        "content": "<p>Recall you can use <code>set_option trace.type_context.is_def_eq_detail true</code> to see what Lean is doing here.</p>",
        "id": 204725421,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1595453566
    },
    {
        "content": "<p>By the way, <code>example (x : units R) : R := ↑x⁻¹</code> works fine and is probably the least ugly workaround for this</p>",
        "id": 204760234,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595479364
    },
    {
        "content": "<p>ah right, the solution to \"the elaborator made the wrong choice about when to apply coercion\" is to tell the elaborator when to apply coercion</p>",
        "id": 204760253,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1595479431
    },
    {
        "content": "<p>Thanks!  That works with some examples; do you have any idea why it doesn't work with the following one?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">normed_space</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">normed_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- &quot;don&#39;t know how to synthesize placeholder ... ⊢ Type ? &quot;</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">units</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"err\">∥↑</span><span class=\"n\">x</span><span class=\"bp\">⁻¹</span><span class=\"err\">∥</span>\n</code></pre></div>",
        "id": 204761040,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1595480736
    },
    {
        "content": "<p>this works</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">normed_space</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">normed_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- &quot;don&#39;t know how to synthesize placeholder ... ⊢ Type ? &quot;</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">units</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"err\">∥</span><span class=\"o\">(</span><span class=\"err\">↑</span><span class=\"n\">x</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span><span class=\"err\">∥</span>\n</code></pre></div>",
        "id": 204761394,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1595481296
    },
    {
        "content": "<p>When you use <code>\\u</code> explicitly, you are implicitly asserting that the types on both sides of the <code>\\u</code> can be inferred by other information. In this case the type in the norm can't be inferred</p>",
        "id": 204761475,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595481370
    }
]