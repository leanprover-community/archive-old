[
    {
        "content": "<p>If I understand correctly, the fact that <code>P ↔ Q</code> implies <code>P</code> can be substituted for <code>Q</code> is a consequence (in Lean's setup) of the <a href=\"https://leanprover-community.github.io/mathlib_docs/find/propext\">docs#propext</a> axiom:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">↔</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">Q</span> <span class=\"o\">:=</span>\n<span class=\"n\">eq.rec</span> <span class=\"n\">h2</span> <span class=\"o\">(</span><span class=\"n\">propext</span> <span class=\"n\">h1</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Does the implication go the other way?  Can <code>propext</code> be deduced from this?</p>",
        "id": 319657350,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1672946958
    },
    {
        "content": "<p>Hint: use <code>f := fun R =&gt; R = P</code></p>",
        "id": 319657548,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1672947017
    },
    {
        "content": "<p>Let <code>f x := P = x</code></p>",
        "id": 319657559,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1672947018
    },
    {
        "content": "<p>Ha!  I guess that was a pretty easy question for people who know type theory :). Thanks!</p>",
        "id": 319658073,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1672947217
    },
    {
        "content": "<p>So we could set up the foundations as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">axiom</span> <span class=\"n\">iff.subst</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">↔</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">Q</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">propext'</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">↔</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">=</span> <span class=\"n\">Q</span> <span class=\"o\">:=</span> <span class=\"n\">h.subst</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>if we wanted to.  Are there other systems where this approach is taken?</p>",
        "id": 319658414,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1672947331
    },
    {
        "content": "<p>Oh, I see this exact question is treated in TPIL.<br>\n<a href=\"https://leanprover.github.io/theorem_proving_in_lean/axioms_and_computation.html#propositional-extensionality\">https://leanprover.github.io/theorem_proving_in_lean/axioms_and_computation.html#propositional-extensionality</a></p>",
        "id": 319658874,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1672947494
    }
]