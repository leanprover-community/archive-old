[
    {
        "content": "<p>I don't suppose <code>abbreviation</code> is documented anywhere?</p>",
        "id": 150746902,
        "sender_full_name": "Reid Barton",
        "timestamp": 1543805180
    },
    {
        "content": "<p>It seems to do something very specific that I want (MWE incoming)</p>",
        "id": 150746904,
        "sender_full_name": "Reid Barton",
        "timestamp": 1543805205
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">test1</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_add</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">x</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">class</span><span class=\"o\">,</span> <span class=\"kn\">reducible</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">my_add</span> <span class=\"o\">:=</span> <span class=\"n\">has_add</span>\n<span class=\"n\">def</span> <span class=\"n\">test2</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">my_add</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"c1\">-- failed to synthesize type class instance for has_add α</span>\n<span class=\"kn\">abbreviation</span> <span class=\"n\">my_add&#39;</span> <span class=\"o\">:=</span> <span class=\"n\">has_add</span>\n<span class=\"n\">def</span> <span class=\"n\">test3</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">my_add&#39;</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"c1\">-- ok!</span>\n</pre></div>",
        "id": 150746954,
        "sender_full_name": "Reid Barton",
        "timestamp": 1543805299
    },
    {
        "content": "<p>Is there a catch?</p>",
        "id": 150746955,
        "sender_full_name": "Reid Barton",
        "timestamp": 1543805309
    },
    {
        "content": "<p>You can also do more interesting things like <code>abbreviation my_add' (α : Type) := has_add (list α)</code></p>",
        "id": 150747018,
        "sender_full_name": "Reid Barton",
        "timestamp": 1543805426
    },
    {
        "content": "<p>I have tried to convert <code>module</code> to an abbreviation for <code>semimodule</code>, but something is not working out of the box. Here is a minimal example showing the problem.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">pi_instances</span>\n\n<span class=\"n\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span>\n\n<span class=\"n\">class</span> <span class=\"n\">SemiModule</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n\n<span class=\"kn\">abbreviation</span> <span class=\"n\">Module</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"n\">SemiModule</span> <span class=\"n\">β</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">piSemiModule</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">add_comm_monoid</span> <span class=\"err\">$</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">SemiModule</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n  <span class=\"n\">SemiModule</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">constructor</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">piModule</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">add_comm_group</span> <span class=\"err\">$</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">Module</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n  <span class=\"n\">Module</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span>\n</pre></div>\n\n\n<p>The last <code>by apply_instance</code> does not find the instance <code>piSemiModule</code> which is right here. I don't understand why.</p>",
        "id": 184386743,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1577559466
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">pi_instances</span>\n\n<span class=\"n\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span>\n\n<span class=\"n\">class</span> <span class=\"n\">SemiModule</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n\n<span class=\"kn\">abbreviation</span> <span class=\"n\">Module</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"n\">SemiModule</span> <span class=\"n\">β</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">piSemiModule</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">add_comm_monoid</span> <span class=\"err\">$</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">SemiModule</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n  <span class=\"n\">SemiModule</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">constructor</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">piSemiModule&#39;</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">add_comm_monoid</span> <span class=\"err\">$</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">SemiModule</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n  <span class=\"n\">SemiModule</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span> <span class=\"c1\">-- works</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">piModule</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">add_comm_group</span> <span class=\"err\">$</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">SemiModule</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"c1\">-- changed from Module</span>\n  <span class=\"n\">Module</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n  <span class=\"n\">delta</span> <span class=\"n\">Module</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- ⊢ SemiModule (Π (i : I), f i)</span>\n\n  <span class=\"c1\">-- apply piSemiModule I f, -- works</span>\n  <span class=\"n\">apply_instance</span> <span class=\"c1\">-- still fails</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>Bewildering!</p>",
        "id": 184424287,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1577631837
    },
    {
        "content": "<p>Changing <code>abbreviation Module (β : Type v) [add_comm_group β]</code> to <code>abbreviation Module (β : Type v) [add_comm_monoid β]</code> makes it work. I think the problem is unifying the different <code>add_comm_monoid</code> instance generated because of this.</p>",
        "id": 184428817,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1577639665
    },
    {
        "content": "<p>I haven't worked it out exactly, but I think it's basically trying to do this unification, but with more metavariables, and it doesn't work with the metavariables</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">add_comm_group</span> <span class=\"err\">$</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"bp\">@</span><span class=\"n\">pi</span><span class=\"bp\">.</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">I</span> <span class=\"n\">f</span> <span class=\"bp\">_</span> <span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">add_comm_group</span><span class=\"bp\">.</span><span class=\"n\">to_add_comm_monoid</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</pre></div>",
        "id": 184428882,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1577639773
    },
    {
        "content": "<p>I might be completely wrong.</p>",
        "id": 184428885,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1577639788
    },
    {
        "content": "<p>It must be trying to unify</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"n\">SemiModule</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"err\">?</span><span class=\"n\">M_1</span><span class=\"o\">),</span> <span class=\"err\">?</span><span class=\"n\">M_2</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">pi</span><span class=\"bp\">.</span><span class=\"n\">add_comm_monoid</span> <span class=\"err\">?</span><span class=\"n\">M_1</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"err\">?</span><span class=\"n\">M_1</span><span class=\"o\">),</span> <span class=\"err\">?</span><span class=\"n\">M_2</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"err\">?</span><span class=\"n\">M_1</span><span class=\"o\">),</span> <span class=\"err\">?</span><span class=\"n\">M_3</span> <span class=\"n\">i</span><span class=\"o\">))</span>\n</pre></div>\n\n\n<p>with </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"n\">SemiModule</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_group</span><span class=\"bp\">.</span><span class=\"n\">to_add_comm_monoid</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">pi</span><span class=\"bp\">.</span><span class=\"n\">add_comm_group</span> <span class=\"n\">I</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">),</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"n\">i</span><span class=\"o\">)))</span>\n</pre></div>",
        "id": 184428957,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1577639909
    },
    {
        "content": "<p>Which is difficult with the metavariables there.</p>",
        "id": 184428962,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1577639932
    },
    {
        "content": "<p><code>?M_1</code> and <code>?M_2</code> look easy to infer, but <code>?M_3</code> must be the difficult one.</p>",
        "id": 184429051,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1577640112
    },
    {
        "content": "<p>And you have to unfold <code>?M_3</code> to see that they are defeq.</p>",
        "id": 184429099,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1577640153
    },
    {
        "content": "<p>I guess this maybe answers the question you asked me the other day about extending type classes, versus having the other class as an argument. This seems to be a downside of the argument approach.</p>",
        "id": 184429802,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1577641325
    },
    {
        "content": "<p>Is there documentation for <code>abbreviation</code>?</p>",
        "id": 223772201,
        "sender_full_name": "Paul van Wamelen",
        "timestamp": 1611431975
    },
    {
        "content": "<p>Oh: \"<code>abbreviation</code> is indeed a synonym for <code>@[inline, reducible] def</code>\" (from Mario a while ago)</p>",
        "id": 223773039,
        "sender_full_name": "Paul van Wamelen",
        "timestamp": 1611432862
    }
]