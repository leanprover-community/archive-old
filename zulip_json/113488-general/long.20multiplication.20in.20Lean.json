[
    {
        "content": "<p><code>nat</code> is great for proving things, but is computationally inefficient because it uses O(n) memory to store the natural number n:</p>\n<p><code>#reduce 10000 * 10000 -- deep recursion error</code></p>\n<p><code>pos_num</code> is a computationally efficient implementation of the positive integers in Lean.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">pos_num</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">one</span>  <span class=\"o\">:</span> <span class=\"n\">pos_num</span>\n<span class=\"bp\">|</span> <span class=\"n\">bit1</span> <span class=\"o\">:</span> <span class=\"n\">pos_num</span> <span class=\"bp\">→</span> <span class=\"n\">pos_num</span>\n<span class=\"bp\">|</span> <span class=\"n\">bit0</span> <span class=\"o\">:</span> <span class=\"n\">pos_num</span> <span class=\"bp\">→</span> <span class=\"n\">pos_num</span>\n</pre></div>\n\n\n<p>Now we only need O(log n) memory to store n. But I must be using it incorrectly because I see performance issues:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">num</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"c1\">-- takes a few seconds on my machine</span>\n<span class=\"bp\">#</span><span class=\"n\">reduce</span> <span class=\"o\">(</span><span class=\"mi\">10000</span> <span class=\"o\">:</span> <span class=\"n\">pos_num</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"mi\">10000</span> <span class=\"c1\">-- binary repn of 10^8</span>\n\n<span class=\"c1\">-- (deterministic) timeout</span>\n<span class=\"bp\">#</span><span class=\"n\">reduce</span> <span class=\"o\">(</span><span class=\"mi\">1000000</span> <span class=\"o\">:</span> <span class=\"n\">pos_num</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"mi\">1000000</span>\n</pre></div>\n\n\n<p>Why are these things not instantaneous, like they would be in a computer algebra system? Lean has clearly solved these problems somehow, because computationally efficient types are presumably at the root of why these proofs work:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">norm_num</span>\n\n<span class=\"c1\">-- all this is immediate</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">10000</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"mi\">10000</span> <span class=\"bp\">=</span> <span class=\"mi\">100000000</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">norm_num</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1000000</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"mi\">1000000</span> <span class=\"bp\">=</span> <span class=\"mi\">1000000000000</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">norm_num</span>\n</pre></div>\n\n\n<p>Oh! <code>tactic.norm_num</code> does not even seem to import <code>data.num.basic</code>! So it must be using something else. The <code>norm_num.lean</code> file looks much less scary to me than it did a year ago, but I still can't see how it is doing multiplication (maybe because there is no 50 line module docstring ;-) )</p>",
        "id": 154983199,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1547297942
    },
    {
        "content": "<p>The norm_num interactive tactic actually delegates addition, subtraction and multiplication to <code>tactic.norm_num</code> in core</p>",
        "id": 154983632,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1547298775
    },
    {
        "content": "<p>Oh! And am I right in thinking that this is written in C++?</p>",
        "id": 154983812,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1547299107
    },
    {
        "content": "<p><code>meta constant norm_num : expr → tactic (expr × expr)</code></p>\n<p>meta constants are in some sense invisible to me.</p>",
        "id": 154983814,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1547299134
    },
    {
        "content": "<p>Yes, the core <code>norm_num</code> is in C++. For addition and multiplication it works basically like a special purpose simplifier: <code>bit0 a + bit0 b</code> simplifies to <code>bit0 (a + b)</code>, etc. But it does this in the context of proving an equality, so it really changes <code>bit0 a + bit0 b = c</code> to <code>bit0 (a + b) = c</code> where <code>c</code> is in normal form. This makes it easy to reduce <code>-</code> and <code>/</code> to <code>+</code> and <code>*</code>.</p>",
        "id": 154984074,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1547299629
    },
    {
        "content": "<p>The reason why <code>#reduce (10000 : pos_num)</code> is slow is because the parser produces <code>bit0</code> and <code>bit1</code> applications, which could be defined in terms of the constructors of the <code>pos_num</code> type but instead uses the fixed definition <code>_root_.bit0</code> which is defined using self-addition. As a result the <code>bit0</code> operation is linear time instead of O(1), and a full numeral should be O(n^2) to evaluate (rather than O(n)). But it is still much better than the exponential time implementation for <code>nat</code>. This could be solved if there was a typeclass like <code>has_bit</code> providing the bit operations directly</p>",
        "id": 154986513,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1547304356
    },
    {
        "content": "<p>It looks like the equation compiler definitions of <code>pos_num.add</code> and <code>pos_num.succ</code> are also significant factors. If I define the functions using <code>pos_num.rec</code> or the induction tactic then it goes much faster</p>",
        "id": 154986619,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1547304575
    }
]