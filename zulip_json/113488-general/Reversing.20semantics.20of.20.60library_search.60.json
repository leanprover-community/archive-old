[
    {
        "content": "<p>Currently <code>library_search</code> only unfolds <code>reducible</code> definitions when trying to apply lemmas (or local facts), while <code>library_search!</code> uses the default behaviour of <code>apply</code>, that is, it will look through normal definitions.</p>",
        "id": 204420734,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595251118
    },
    {
        "content": "<p>The reason for this is that often you're looking for a suitable rewriting lemma, and being told <code>rfl</code> isn't very helpful.</p>",
        "id": 204420781,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595251147
    },
    {
        "content": "<p>Also, with the default behaviour of apply you're more likely to get \"weird\" answers...</p>",
        "id": 204420814,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595251172
    },
    {
        "content": "<p>However <code>library_search</code> is definitely weaker than <code>library_search!</code>, if all you want is an answer.</p>",
        "id": 204420840,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595251191
    },
    {
        "content": "<p>I am tempted to reverse the semantics, and have <code>library_search</code> be the \"by all any means necessary\" tactic, and <code>library_search!</code> be the more refined option.</p>",
        "id": 204420920,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595251222
    },
    {
        "content": "<p>In my experience from last week, beginners want the brute force option, while experts want the subtler one, so we should make the experts work harder to get what they want.</p>",
        "id": 204420993,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595251263
    },
    {
        "content": "<p>Makes sense to me..., except that <code>!</code> seems to a mnemonic for \"apply more force\". How about <code>'</code>? Or is that too generic a suffix?</p>",
        "id": 204426617,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595254230
    },
    {
        "content": "<p>It seems reasonable to make the current <code>library_search!</code> the default one.<br>\nAs Johan said, I don't think <code>library_search!</code> is a good name for the current <code>library_search</code>. We could just use a different name, like <code>quick_search</code>? Or if we want the same name, maybe <code>library_search-</code>?</p>",
        "id": 204446292,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1595263677
    },
    {
        "content": "<p><code>library_search♭</code> — the joys of unicode</p>",
        "id": 204446478,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595263773
    },
    {
        "content": "<p>We could have <code>set_option old_library_search true</code></p>",
        "id": 204446809,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595263946
    },
    {
        "content": "<p>That seemed to work well for structures :P</p>",
        "id": 204446827,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595263956
    },
    {
        "content": "<p>I think that matches that abuse defeq should be discouraged to newcomers</p>",
        "id": 204475396,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595278834
    },
    {
        "content": "<p>for the exact reason that they shouldn't need to know the defeqs to make sense of the lemma and why it works</p>",
        "id": 204475478,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595278874
    },
    {
        "content": "<p>so I don't think that we should make <code>library_search!</code> the default. It could possibly be a fallback if the usual search fails</p>",
        "id": 204475598,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595278925
    },
    {
        "content": "<p>Yes --- Mario makes a good point too. I'm conflicted.</p>",
        "id": 204502698,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595293025
    },
    {
        "content": "<p>Regarding the \"matches that abuse defeq should be discouraged to newcomers\" --- if the _only_ match requires unfolding something semireducible, is it better to fail, or return that match?</p>",
        "id": 204502771,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595293109
    },
    {
        "content": "<p>That's the essential question I'm unsure of.</p>",
        "id": 204502772,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595293118
    },
    {
        "content": "<p>If we think it's better to return that match, there are three options:</p>\n<ol>\n<li>swap the semantics</li>\n<li>have <code>library_search</code> do two passes, the first time with current <code>library_search</code> behaviour, the second time with current <code>library_search!</code> behaviour</li>\n<li>just do one pass, looking for lemmas that apply with standard <code>apply</code> settings. If one is found, try again with the same lemma, with <code>apply { md := reducible }</code>. If it matches with <code>reducible</code>, return that solution immediately. If it doesn't, stash this lemma away, and continue through the rest of the library. If the rest of the library fails, return the lemma that we found that works with standard <code>apply</code> settings.</li>\n</ol>",
        "id": 204502924,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595293291
    },
    {
        "content": "<p>All three options are bad:</p>\n<ol>\n<li>we'll be returning many more up-to-defeq solutions, like we did until a month ago</li>\n<li>it will take twice as long to run anytime it fails</li>\n<li>it involves a substantial rewrite :-)</li>\n</ol>",
        "id": 204502978,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595293335
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130491\">@Scott Olson</span> I'm sure that you realise that the badness of (3) is categorically different from the badness in (1) and (2).<br>\nBut of course I understand your point completely. <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 204511670,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595305991
    },
    {
        "content": "<p>So, let's at least not forget about (3), even if we don't choose it immediately. It might be a good limit point that we want to converge to.</p>",
        "id": 204511676,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595306025
    },
    {
        "content": "<p>I think you meant to ping a different Scott?</p>",
        "id": 204512273,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1595307099
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> <span aria-label=\"up\" class=\"emoji emoji-2b06\" role=\"img\" title=\"up\">:up:</span> <br>\nScott Olson: Oops, sorry for the bad ping.</p>",
        "id": 204512512,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595307570
    }
]