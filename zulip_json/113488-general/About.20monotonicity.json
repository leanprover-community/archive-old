[
    {
        "content": "<p>I'm currently working on monotonicity related simplification. In some places I consider associativity and commutativity with regards to monotonicity but let's leave that aside for now.</p>\n<p>A general monotonicity law for addition looks like:</p>\n<div class=\"codehilite\"><pre><span></span>@[monotonic]\nlemma add_mono {x₀ y₀ x₁ y₁ : α} [ordered_semiring α]\n  (h : x₀ ≤ y₀)\n  (h&#39; : x₁ ≤ y₁)\n: x₀ + x₁ ≤ y₀ + y₁ := ...\n</pre></div>\n\n\n<p>Very straightforward, no side conditions. When I turn to multiplication, the lemmas multiply (fun definitely intended). I get one position monotonicity:</p>\n<div class=\"codehilite\"><pre><span></span>@[monotonic]\nlemma mul_mono_nonneg_left {x y z : α} [ordered_semiring α]\n  (h&#39; : 0 ≤ z)\n  (h : x ≤ y)\n: x * z ≤ y * z := ...\n\n@[monotonic]\nlemma mul_mono_nonneg_right {x y z : α} [ordered_semiring α]\n  (h&#39; : 0 ≤ z)\n  (h : x ≤ y)\n: z * x ≤ z * y := ...\n</pre></div>\n\n\n<p>In total, 4 of them. The other 2 are left as an exercise <span class=\"emoji emoji-1f609\" title=\"wink\">:wink:</span>. When considering two position-monotonicity for multiplication, their number blows up: </p>\n<div class=\"codehilite\"><pre><span></span>@[monotonic]\nlemma mul_mono_nonpos_nonpos_left {x₀ y₀ x₁ y₁ : α} [linear_ordered_ring α]\n  [decidable_rel ((≤) : α → α → Prop)]\n  (h : 0 ≥ x₀)\n  (h : 0 ≥ y₁)\n  (h₀ : y₀ ≤ x₀)\n  (h₁ : y₁ ≤ x₁)\n: x₀ * x₁ ≤ y₀ * y₁ := ...\n\n@[monotonic]\nlemma mul_mono_nonpos_nonpos_right {x₀ y₀ x₁ y₁ : α} [linear_ordered_ring α]\n  [decidable_rel ((≤) : α → α → Prop)]\n  (h : 0 ≥ y₀)\n  (h : 0 ≥ x₁)\n  (h₀ : y₀ ≤ x₀)\n  (h₁ : y₁ ≤ x₁)\n: x₀ * x₁ ≤ y₀ * y₁ := ...\n</pre></div>\n\n\n<p>The difference is in the side condition. They could be unified and make <code>(h : 0 ≥ x₀) (h : 0 ≥ x₁)</code> but that is stronger than required. I have additionally six more combinations of <code>nonpos</code> / <code>nonneg</code>. The goal of <code>mono</code> is that you don't have to remember those lemmas, it just applies the right one for you. With the explosion of possible side condition, the error messages might get long if they can't be discharged automatically (because <code>mono</code> will look in your assumptions, try <code>norm_num</code> and other to discharge side conditions and eliminate candidates).</p>\n<p>Does anybody have an opinion on this large number of lemmas just for multiplication?</p>",
        "id": 123813072,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1521233030
    },
    {
        "content": "<p>Don't all of these just follow from 0&lt;=x, 0&lt;=y implies 0&lt;=xy, a&lt;=b implies a+t &lt;= b+t and standard ring theory axioms?</p>",
        "id": 123816761,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521239098
    },
    {
        "content": "<p>Do you mean \"do all those multiplication lemmas follow from ...\"?</p>",
        "id": 123816943,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1521239298
    },
    {
        "content": "<p>right</p>",
        "id": 123816949,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521239303
    },
    {
        "content": "<p>but presumably you're asking something else</p>",
        "id": 123816951,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521239308
    },
    {
        "content": "<p>I mean, I am saying that they should do</p>",
        "id": 123816956,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521239325
    },
    {
        "content": "<p>In any case, their truth is rather straightforward. What I'm wondering about is how usable they are.</p>",
        "id": 123816957,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1521239327
    },
    {
        "content": "<p>I have no feeling for this sort of thing. Does simp solve any of them? Presumably some cunning tactic would solve them all?</p>",
        "id": 123817031,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521239464
    },
    {
        "content": "<p>For instance, if I don't split <code>mul_mono_nonpos_nonpos</code> into <code>mul_mono_nonpos_nonpos_left</code> and <code>mul_mono_nonpos_nonpos_right</code>, I get a simpler set of rules. However, some situations won't be addressed by monotonicity because <code>0 ≤ x0</code> and <code>0 ≤ x1</code> are stronger assumptions than what is strictly necessary</p>",
        "id": 123817048,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1521239490
    },
    {
        "content": "<p>I believe you are talking about proving them. Again, proving them is easy. I'm writing them up so that the monotonicity tactic will be able to decompose proofs of <code>x * y ≤ z * w</code> into simpler subgoals.</p>",
        "id": 123817116,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1521239582
    },
    {
        "content": "<p>The tricky part in doing that is remembering to have assumptions about some of your terms being non-negative or non-positive.</p>",
        "id": 123817216,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1521239662
    },
    {
        "content": "<p>But there are are lots of ways to deduce <code>x*y &lt;= z*w</code>, right?</p>",
        "id": 123817225,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521239676
    },
    {
        "content": "<p>If you forget, <code>mono</code> will list all the ways in which <code>*</code> is monotonic with the corresponding side conditions</p>",
        "id": 123817252,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1521239709
    },
    {
        "content": "<p>e.g. <code>0&lt;=x&lt;=z and 0&lt;=y&lt;=w</code>, or <code>0&lt;=x&lt;=w and 0&lt;=y&lt;=z</code>, or...</p>",
        "id": 123817255,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521239710
    },
    {
        "content": "<p>Exactly. That's why I have 12 monotonicity lemmas for multiplication. It seems like a lot to me but maybe it's justifiable</p>",
        "id": 123817273,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1521239747
    },
    {
        "content": "<p><code>z&lt;=x&lt;=0 and w&lt;=y&lt;=0...</code></p>",
        "id": 123817275,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521239749
    },
    {
        "content": "<p>Do you care about <code>0&lt;=x and z&lt;=-x and 0&lt;=y and w&lt;=-y</code>?</p>",
        "id": 123817323,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521239782
    },
    {
        "content": "<p><code>0&lt;=x&lt;=3z and 0&lt;=y&lt;=w/3</code>?</p>",
        "id": 123817346,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521239837
    },
    {
        "content": "<p>I hadn't thought of it. Maybe I should care about that.</p>",
        "id": 123817350,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1521239842
    },
    {
        "content": "<p>I don't really know what your applications are.</p>",
        "id": 123817354,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521239855
    },
    {
        "content": "<p>It's slightly disconcerting that there are so many!</p>",
        "id": 123817406,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521239889
    },
    {
        "content": "<blockquote>\n<p><code>0&lt;=x&lt;=3z and 0&lt;=y&lt;=w/3</code>?</p>\n</blockquote>\n<p>That, I will leave out.</p>",
        "id": 123817409,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1521239894
    },
    {
        "content": "<p>Let me give you an example</p>",
        "id": 123817414,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1521239906
    },
    {
        "content": "<p>Let's say that you have to prove:</p>\n<div class=\"codehilite\"><pre><span></span>⊢ x₀ * x₁ * x₂ * y₀ * x₃ * y₁ * x₄ * x₅ ≤ x₀ * x₁ * x₂ * z₀ * x₃ * z₁ * x₄ * x₅\n</pre></div>\n\n\n<p>I want it to be possible to call </p>\n<div class=\"codehilite\"><pre><span></span>mono*\n</pre></div>\n\n\n<p>and get the proof reduced to two goals:</p>\n<div class=\"codehilite\"><pre><span></span>⊢ y₀ ≤ z₀\n⊢ y₁ ≤ z₁\n</pre></div>\n\n\n<p>provided that you have the right assumptions about <code>x₀</code>, <code>x₁</code>, <code>x₂</code>, <code>x₃</code>, <code>x₄</code>, <code>x₅</code>, namely, them being non-negative or non-positive.</p>",
        "id": 123817589,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1521240203
    },
    {
        "content": "<p>If there were a simp lemma that said <code>0&lt;x -&gt; (a&lt;=b iff x*a &lt;= x*b)</code> and similar for <code>0&gt;x</code> wouldn't simp get you as far as <code>y0*y1&lt;=z0*z1</code> or similar?</p>",
        "id": 123817661,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521240336
    },
    {
        "content": "<p>and then you have no reason to believe y0&lt;=z0 and y1&lt;=z1 because maybe y0&lt;=3*z0 and y1&lt;=z1/3</p>",
        "id": 123817706,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1521240364
    },
    {
        "content": "<p>Of course, as a user, you're the one deciding to call <code>mono</code>. And if you want to keep <code>y</code> and <code>z</code> in the same goal <code>ac_mono</code> will get you the goal that you're mentioning. But <code>simp</code> can't get you there automatically because the choice of rewrite is not unique so marking those lemmas as <code>[simp]</code> would make your proofs brittle</p>",
        "id": 123817789,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1521240546
    },
    {
        "content": "<p>And if you only want a few steps of mono, you can use <code>mono^3</code> instead and it will stop after three applications of monotonicity laws</p>",
        "id": 123817847,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1521240624
    },
    {
        "content": "<p>The point is, in a monotonic context, you can get rid of all lot of noise in one shot using <code>mono</code> or <code>ac_mono</code></p>",
        "id": 123817872,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1521240675
    }
]