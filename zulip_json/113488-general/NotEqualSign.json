[
    {
        "content": "<p>I'm relatively new to LEAN and I'm trying to prove that $succ(x)\\neq0$, I get my goal of $succ(x)\\neq0$ and am a bit stuck from there. I have tried cases and induction.</p>",
        "id": 198354751,
        "sender_full_name": "James Arthur",
        "timestamp": 1590084108
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/wiki/Minimum-Working-Example-&#40;MWE&#41;\">#mwe</a></p>",
        "id": 198354866,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1590084153
    },
    {
        "content": "<p>It's from the natural numbers game, but I assume just add the link as it suggests:</p>\n<p><a href=\"https://wwwf.imperial.ac.uk/~buzzard/xena/natural_number_game/?world=8&amp;level=9\">https://wwwf.imperial.ac.uk/~buzzard/xena/natural_number_game/?world=8&amp;level=9</a></p>",
        "id": 198355783,
        "sender_full_name": "James Arthur",
        "timestamp": 1590084560
    },
    {
        "content": "<p>This will work:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">nat</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">contradiction</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>What is going on is that the natural numbers are an inductively defined type, and Lean knows that the constructors (in this case, <code>zero</code> and <code>succ</code>) are disjoint. That is one of the things the contradiction tactic will look for.</p>",
        "id": 198355817,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1590084579
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110865\">Jeremy Avigad</span> <a href=\"#narrow/stream/113488-general/topic/NotEqualSign/near/198355817\">said</a>:</p>\n<blockquote>\n<p>This will work:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">nat</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">contradiction</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>What is going on is that the natural numbers are an inductively defined type, and Lean knows that the constructors (in this case, <code>zero</code> and <code>succ</code>) are disjoint. That is one of the things the contradiction tactic will look for.</p>\n</blockquote>\n<p>Thankyou, although I assume this isn't the intended solution, it works!</p>",
        "id": 198356011,
        "sender_full_name": "James Arthur",
        "timestamp": 1590084672
    },
    {
        "content": "<p>I imagine the intended solution starts like this (and may give you some extra insight into why jeremy's solution works </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">nat</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 198356408,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590084886
    },
    {
        "content": "<p>If you don't want to use <code>contradiction</code> you can use the axiom <code>zero_ne_succ</code></p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"n\">apply</span> <span class=\"n\">zero_ne_succ</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n<span class=\"n\">rwa</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 198356427,
        "sender_full_name": "Jason KY.",
        "timestamp": 1590084902
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"252300\">@Jalex Stark</span> there is no need to cases on <code>n</code> as it is already a successor in the theorem</p>",
        "id": 198356476,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590084934
    },
    {
        "content": "<p><code>intro h, cases h</code> would be my recommendation</p>",
        "id": 198356512,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590084953
    },
    {
        "content": "<p>It's also a place for my favorite trick:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"bp\">.</span>\n</code></pre></div>",
        "id": 198356578,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590084976
    },
    {
        "content": "<p>the no proof proof</p>",
        "id": 198356592,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590084983
    },
    {
        "content": "<p>Can you explalin what <code>.</code> means? In general as well as here</p>",
        "id": 198356621,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1590085004
    },
    {
        "content": "<p>it's a 0-ary use of the equation compiler</p>",
        "id": 198356648,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590085020
    },
    {
        "content": "<p>in general it ends a definition, which is almost always optional but not here</p>",
        "id": 198356696,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590085040
    },
    {
        "content": "<p>Thankyou all!</p>",
        "id": 198356770,
        "sender_full_name": "James Arthur",
        "timestamp": 1590085077
    },
    {
        "content": "<p>(usually the end of a definition is signaled by the next command keyword, e.g. the <code>def</code>/<code>theorem</code> on the next line)</p>",
        "id": 198356772,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590085080
    },
    {
        "content": "<p>I love it when he comes out with those dot proofs.</p>",
        "id": 198392316,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590104787
    },
    {
        "content": "<p>It is ultimate golf.</p>",
        "id": 198392329,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590104798
    }
]