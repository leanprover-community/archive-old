[
    {
        "content": "<p>I wanted to implement a simple GADT to experiment with when i encountered a problem : </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">expression</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">number</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">expression</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"n\">boolean</span> <span class=\"o\">:</span> <span class=\"n\">bool</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">expression</span> <span class=\"n\">bool</span>\n<span class=\"bp\">|</span> <span class=\"n\">add</span> <span class=\"o\">:</span> <span class=\"n\">expression</span> <span class=\"n\">ℕ</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">expression</span> <span class=\"n\">ℕ</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">expression</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"n\">mul</span> <span class=\"o\">:</span> <span class=\"n\">expression</span> <span class=\"n\">ℕ</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">expression</span> <span class=\"n\">ℕ</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">expression</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"n\">and</span> <span class=\"o\">:</span> <span class=\"n\">expression</span> <span class=\"n\">bool</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">expression</span> <span class=\"n\">bool</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">expression</span> <span class=\"n\">bool</span>\n<span class=\"bp\">|</span> <span class=\"n\">or</span> <span class=\"o\">:</span> <span class=\"n\">expression</span> <span class=\"n\">bool</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">expression</span> <span class=\"n\">bool</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">expression</span> <span class=\"n\">bool</span>\n<span class=\"bp\">|</span> <span class=\"n\">ifThenElse</span> <span class=\"o\">:</span> <span class=\"n\">expression</span> <span class=\"n\">bool</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">expression</span> <span class=\"n\">a</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">expression</span> <span class=\"n\">a</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">expression</span> <span class=\"n\">a</span>\n</code></pre></div>\n<p>I wanted <code>a</code> to represent any type but i don't know how to do that, can someone help me ?</p>",
        "id": 243933393,
        "sender_full_name": "Alice Laroche",
        "timestamp": 1624635855
    },
    {
        "content": "<p>You can set <code>a</code> as an argument of type <code>Type</code> to your constructor</p>",
        "id": 243933825,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1624636046
    },
    {
        "content": "<p><code>ifThenElse (a : Type) : expression bool -&gt; expression a -&gt; expression a -&gt; expression a</code></p>",
        "id": 243933836,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1624636053
    },
    {
        "content": "<p>Yeah i tried of course, but then i got this error <code>universe level of type_of(arg #1) of 'expression.ifThenElse' is too big for the corresponding inductive datatype</code></p>",
        "id": 243933945,
        "sender_full_name": "Alice Laroche",
        "timestamp": 1624636095
    },
    {
        "content": "<p>Right</p>",
        "id": 243933989,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1624636120
    },
    {
        "content": "<p>Does it work if you let <code>expression</code> be of type <code>Type -&gt; Type 1</code>?</p>",
        "id": 243934090,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1624636160
    },
    {
        "content": "<p>Yes it's working, thanks</p>",
        "id": 243934313,
        "sender_full_name": "Alice Laroche",
        "timestamp": 1624636258
    },
    {
        "content": "<p>If it helps, the trouble was that since you were quantifying over any <code>Type</code> you needed something larger the <code>Type</code> for your definition to live in, which is provided by <code>Type 1</code></p>",
        "id": 243935216,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1624636675
    },
    {
        "content": "<p>Yeah i understanded , Now i wonder if there is a way to make a automatic type level ? So i can use every types level expression and not only type level 0</p>",
        "id": 243936516,
        "sender_full_name": "Alice Laroche",
        "timestamp": 1624637192
    },
    {
        "content": "<p>Yeah, up to technical details that other people are more qualified to explain than me, you can use <code>Type*</code> to mean any type level.</p>",
        "id": 243937184,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1624637516
    },
    {
        "content": "<p>Sure there is. The <code>a</code> argument in your constructor would be of type <code>Type u</code> and your inductive would be of type <code>Type u -&gt; Type (u+1)</code></p>",
        "id": 243937311,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1624637565
    },
    {
        "content": "<p>After you first declare <code>universe u</code> somewhere before your definition</p>",
        "id": 243937397,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1624637613
    },
    {
        "content": "<p>Or like Yaël says, you can in general use <code>Type*</code> to mean a type at any universe level. Though I am not sure there is a way to work with that in this particular instance, since you need to refer to the successor of the universe level</p>",
        "id": 243937815,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1624637807
    },
    {
        "content": "<p>I think it figures out by itself the lowest universe level it can work in.</p>",
        "id": 243939037,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1624638449
    },
    {
        "content": "<p>So you can just write <code>Type*</code> everywhere and it just figures it out? That would be nice (sorry, I'm not at a computer right now and I can't check for myself)</p>",
        "id": 243939634,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1624638758
    },
    {
        "content": "<p>most of the time - sometimes you'll get universe issues, like in the category theory library sometimes, and you have to help out, but otherwise yah</p>",
        "id": 243943773,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1624640909
    },
    {
        "content": "<p>I already tried to use universe u , but then i got an error : </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">ℕ</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Type</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"mi\">1</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 243945431,
        "sender_full_name": "Alice Laroche",
        "timestamp": 1624641755
    },
    {
        "content": "<p>You can use <code>ulift \\nat</code> instead of <code>\\nat</code></p>",
        "id": 243945716,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1624641907
    },
    {
        "content": "<p>Thanks</p>",
        "id": 243946088,
        "sender_full_name": "Alice Laroche",
        "timestamp": 1624642122
    }
]