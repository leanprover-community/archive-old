[
    {
        "content": "<p>I'm learning a new area and library_search has really helped me to get going much more quickly than usual. Thanks <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> .</p>\n<p>Is this supposed to happen:</p>\n<div class=\"codehilite\"><pre><span></span>import data.equiv.basic\n\nexample (α β : Type) (e : equiv α β) : e.inv_fun ∘ e.to_fun = id := by library_search\n-- excessive memory consumption\n</pre></div>\n\n\n<p>? Whenever I see a thing like this I figure that it'll be somewhere in mathlib so just search for it.</p>",
        "id": 171348525,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563668785
    },
    {
        "content": "<p>Aah :-) Lean restart fixed it :-)</p>",
        "id": 171348543,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563668854
    },
    {
        "content": "<p>You're welcome! A student here is writing a related tool <code>list_applies</code>, which hopefully will list all (or at list a few) lemmas that can be applied at the current moment.</p>",
        "id": 171362178,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1563696471
    },
    {
        "content": "<p><code>library_search</code> just spit out <code>exact buffer.lt_aux_2 hs</code>. <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> Is that intended behaviour? (It is a valid proof...)</p>",
        "id": 172204355,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564650841
    },
    {
        "content": "<p>Ok, maybe that lemma is just in the wrong file, etc...</p>",
        "id": 172204605,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564651080
    },
    {
        "content": "<p>There is also <code>nat.sub_lt</code> and the identical <code>nat.sub_lt_self</code>. I understand that <code>library_search</code> didn't find those...</p>",
        "id": 172204793,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564651240
    },
    {
        "content": "<p>What was the question?</p>",
        "id": 172206948,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1564653328
    },
    {
        "content": "<p>That <code>buffer.aux_blah</code> is quite a funny name for this lemma. Not really a question, I agree.</p>",
        "id": 172211045,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564657651
    },
    {
        "content": "<p><code>library_search</code> filters imported lemmas according to their head symbol, sorts them the length of their name, and tells you the first thing that works! It's not trying to be very clever.</p>",
        "id": 172211921,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1564658579
    },
    {
        "content": "<p>I meant: what was the question you asked library_search?</p>",
        "id": 172213484,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1564660288
    },
    {
        "content": "<p>The question was to prove <code>n - 1 &lt; n</code>, where <code>n : nat</code></p>",
        "id": 172218499,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564664979
    },
    {
        "content": "<p>That's not true!</p>",
        "id": 172221685,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1564667351
    },
    {
        "content": "<p>aah, maybe <code>hs</code> is the assumption that n isn't 0 somehow...</p>",
        "id": 172221727,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1564667381
    },
    {
        "content": "<p>Aah, sorry, forgot to include the assumption.</p>",
        "id": 172222565,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564667876
    },
    {
        "content": "<p>librarysearch finds different things depending on whether you have n &gt; 0 or n ne 0</p>",
        "id": 172222633,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1564667901
    },
    {
        "content": "<p>(unsurprisingly)</p>",
        "id": 172222662,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1564667909
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">library_search</span>\n<span class=\"c1\">-- exact buffer.lt_aux_3 h</span>\n</pre></div>\n\n\n<p>What can you do? It's the right answer :-)</p>",
        "id": 172231381,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1564673651
    },
    {
        "content": "<p>And the definitions are in core :-)</p>",
        "id": 172231450,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1564673717
    },
    {
        "content": "<p>Yeah, I guess so...</p>",
        "id": 172237426,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564677786
    },
    {
        "content": "<p>It's just... a bit disappointing from an aesthetic point of view?</p>",
        "id": 172237456,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564677822
    },
    {
        "content": "<p>Also, I would have never found this name without <code>library_search</code>. So... <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> thanks a lot! It really helps with finding things I wouldn't find manually!</p>",
        "id": 172237556,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564677872
    },
    {
        "content": "<p>I'm idly trying to do one of this year's IMO problems in Lean whilst in a meeting and library_search has been essential!</p>",
        "id": 172239574,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1564679172
    },
    {
        "content": "<p>Is the problem that easy?</p>",
        "id": 172239656,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564679263
    },
    {
        "content": "<p>I just finished it! I used library_search four times :-)</p>",
        "id": 172242825,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1564681524
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">ring</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">imo2019Q1</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)))</span> <span class=\"bp\">↔</span>\n<span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"bp\">∃</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span> <span class=\"n\">swap</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"c1\">-- easy way</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n      <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">),</span> <span class=\"n\">h</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">))],</span>\n      <span class=\"n\">simp</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">c</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">h</span><span class=\"o\">},</span>\n    <span class=\"n\">ring</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h0</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n    <span class=\"n\">convert</span> <span class=\"n\">h</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n    <span class=\"n\">convert</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">b</span><span class=\"o\">),</span>\n    <span class=\"n\">intro</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">convert</span> <span class=\"n\">h</span> <span class=\"mi\">0</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">b</span><span class=\"o\">),</span>\n    <span class=\"n\">intro</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">convert</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">;</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"n\">f</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n    <span class=\"n\">intro</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">domain</span><span class=\"bp\">.</span><span class=\"n\">mul_left_inj</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">dec_trivial</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">mul_sub</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h4</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">2</span><span class=\"o\">),</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span><span class=\"n\">h2</span> <span class=\"n\">b</span><span class=\"o\">],</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h5</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span><span class=\"n\">h1</span> <span class=\"n\">b</span><span class=\"o\">],</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h4</span><span class=\"o\">,</span> <span class=\"n\">h5</span><span class=\"o\">],</span>\n    <span class=\"n\">rw</span> <span class=\"n\">eq_sub_of_add_eq</span> <span class=\"n\">h0</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span>\n    <span class=\"n\">ring</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h3</span> <span class=\"k\">with</span> <span class=\"n\">m</span> <span class=\"n\">h3</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h4</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n    <span class=\"n\">intro</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">induction_on&#39;</span> <span class=\"n\">b</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">k</span> <span class=\"n\">hk</span> <span class=\"n\">hf</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">eq_add_of_sub_eq</span> <span class=\"o\">(</span><span class=\"n\">h3</span> <span class=\"n\">k</span><span class=\"o\">),</span> <span class=\"n\">hf</span><span class=\"o\">],</span>\n      <span class=\"n\">ring</span>\n    <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">k</span> <span class=\"n\">hk</span> <span class=\"n\">hf</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"n\">h4</span> <span class=\"o\">:=</span> <span class=\"n\">h3</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">),</span>\n      <span class=\"n\">replace</span> <span class=\"n\">h4</span> <span class=\"o\">:=</span> <span class=\"n\">eq_add_of_sub_eq</span> <span class=\"n\">h4</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">add_comm</span> <span class=\"n\">m</span> <span class=\"n\">at</span> <span class=\"n\">h4</span><span class=\"o\">,</span>\n      <span class=\"n\">replace</span> <span class=\"n\">h4</span> <span class=\"o\">:=</span> <span class=\"n\">eq_sub_of_add_eq</span> <span class=\"n\">h4</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">h4</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">add_comm</span> <span class=\"n\">at</span> <span class=\"n\">hf</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">eq_sub_of_add_eq</span> <span class=\"n\">hf</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">sub_add_cancel</span><span class=\"o\">,</span>\n      <span class=\"n\">ring</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n  <span class=\"n\">conv</span> <span class=\"n\">at</span> <span class=\"n\">h</span> <span class=\"k\">in</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"bp\">_</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">_</span><span class=\"o\">)))</span> <span class=\"k\">begin</span>\n    <span class=\"n\">rw</span> <span class=\"n\">h4</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">),</span>\n    <span class=\"n\">rw</span> <span class=\"n\">h4</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">h4</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">),</span>\n    <span class=\"n\">rw</span> <span class=\"n\">h4</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"mi\">0</span><span class=\"o\">),</span>\n  <span class=\"kn\">end</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h5</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n    <span class=\"n\">simpa</span> <span class=\"kn\">using</span> <span class=\"n\">h</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">h6</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">swap</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h7</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">domain</span><span class=\"bp\">.</span><span class=\"n\">mul_right_inj</span> <span class=\"n\">h6</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">h5</span><span class=\"o\">,</span>\n    <span class=\"n\">right</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"mi\">0</span><span class=\"o\">),</span>\n    <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">convert</span> <span class=\"n\">h4</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">h6</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">h7</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n    <span class=\"n\">left</span><span class=\"o\">,</span>\n    <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">convert</span> <span class=\"n\">h4</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h6</span><span class=\"o\">,</span> <span class=\"n\">h7</span><span class=\"o\">],</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h8</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n    <span class=\"n\">simpa</span> <span class=\"kn\">using</span> <span class=\"n\">h</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">replace</span> <span class=\"n\">h8</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">domain</span><span class=\"bp\">.</span><span class=\"n\">mul_right_inj</span> <span class=\"n\">h7</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">h8</span><span class=\"o\">,</span>\n  <span class=\"n\">right</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"mi\">0</span><span class=\"o\">),</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">convert</span> <span class=\"n\">h4</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 172242939,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1564681582
    },
    {
        "content": "<p>I couldn't find a=b-c -&gt; c=b-a in <code>int</code> (or any add_comm_group) though</p>",
        "id": 172243016,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1564681653
    },
    {
        "content": "<p>I had to use eq_add_of_sub_eq, add_comm, eq_sub_of_add_eq</p>",
        "id": 172243091,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1564681684
    },
    {
        "content": "<p>I was a bit surprised -- a lot of things I thought \"eew, that will be hard in Lean\" and then it turned out not to be so hard. Thanks <span class=\"user-mention\" data-user-id=\"213273\">@Paul-Nicolas Madelaine</span> for PR'ing <code>int.induction_on'</code> -- things would have been a lot more awful without it.</p>",
        "id": 172243210,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1564681800
    },
    {
        "content": "<p>I have memories of these sorts of questions being hell in Lean but because everything was in int not nat it was really quite straightforward.</p>",
        "id": 172243287,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1564681843
    },
    {
        "content": "<p>Nice!</p>",
        "id": 172243328,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564681889
    },
    {
        "content": "<p>Just looked at the official solution -- I think mine is slightly better ;-) [and not just because it has been formalised!]</p>",
        "id": 172243346,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1564681919
    },
    {
        "content": "<p>Now formalise the statement of the geometry question (-;</p>",
        "id": 172243398,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564681927
    },
    {
        "content": "<p>rofl I never liked the geometry questions :-)</p>",
        "id": 172243483,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1564681988
    },
    {
        "content": "<p>I've been thinking about formalizing IMO questions. This is really nice!</p>",
        "id": 172243527,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1564682020
    },
    {
        "content": "<p>The only difference between the official solution and my solution is that they say \"if M(a+b)+K=0 for all a and b then obviously M=K=0\" whereas I say \"let a=0,b=0 and then let a=0,b=1\"</p>",
        "id": 172243542,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1564682030
    },
    {
        "content": "<p>I think my proof is better :P</p>",
        "id": 172243550,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1564682037
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> I was quite surprised myself it came out so easily. I solved it on paper with not too much trouble 5 minutes before the meeting, and then I started on the formalisation in the meeting but I was expecting it to be troublesome, because formalisation is troublesome. But then it turned out to be quite straightforward. <code>convert</code> was crucial, as was <code>ring</code>, <code>simp</code>,and also that integer induction principle which has only been in mathlib for 3 months. But in a sense this has forced me to re-evaluate a bit how difficult these things are. I \"knew\" before I started that formalising an IMO problem would be a nightmare, but I kept going on and the things I thought might be hard just kind of turned out to be easy. As I say, I was surprised myself. Without stuff like <code>ring</code> it would have been a nightmare. In particular I think it's a credit to the community that even though core Lean is not moving, mathlib has somehow moved enough to make the paper proof formalisable without too much trouble.</p>",
        "id": 172243890,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1564682233
    },
    {
        "content": "<p>Yeah, it's nice that these kinds of problems can now be formalized without being a herculean task.</p>",
        "id": 172247451,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1564684359
    },
    {
        "content": "<p>Was that true 10 years ago in Coq though?</p>",
        "id": 172248390,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1564684862
    },
    {
        "content": "<p>I actually did this too!</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">rcases</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">ring</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">linarith</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">linear_of_constant_difference</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">a&#39;</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a&#39;</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"n\">a&#39;</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">c</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">d</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">use</span> <span class=\"o\">[</span><span class=\"n\">f</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"mi\">0</span><span class=\"o\">],</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">induction_on&#39;</span> <span class=\"n\">x</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">ring</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">i</span> <span class=\"bp\">_</span> <span class=\"n\">IH</span><span class=\"o\">,</span>\n    <span class=\"k\">calc</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">ring</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">hf</span> <span class=\"n\">i</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">refl</span> <span class=\"o\">}</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"bp\">_</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">IH</span><span class=\"o\">,</span> <span class=\"n\">ring</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">i</span> <span class=\"bp\">_</span> <span class=\"n\">IH</span><span class=\"o\">,</span>\n    <span class=\"k\">calc</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">((</span><span class=\"n\">i</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">simp</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">hf</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">refl</span> <span class=\"o\">}</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"bp\">_</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">IH</span><span class=\"o\">,</span> <span class=\"n\">ring</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">section</span>\n\n<span class=\"kn\">parameters</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)))</span>\n<span class=\"n\">include</span> <span class=\"n\">hf</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">only_solutions</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"k\">calc</span>\n      <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n        <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">hf</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">}</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">hf</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n    <span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">sub_eq_zero</span> <span class=\"n\">at</span> <span class=\"err\">⊢</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"n\">convert</span> <span class=\"n\">this</span> <span class=\"kn\">using</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n    <span class=\"n\">ring</span> <span class=\"o\">},</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">linear_of_constant_difference</span> <span class=\"n\">f</span> <span class=\"bp\">_</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">lf</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">swap</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">a&#39;</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">eq_of_mul_eq_mul_left</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">),</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">this</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">this</span> <span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">hf₀</span> <span class=\"o\">:=</span> <span class=\"n\">hf</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hf₁</span> <span class=\"o\">:=</span> <span class=\"n\">hf</span> <span class=\"mi\">1</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">lf</span><span class=\"o\">,</span> <span class=\"n\">mul_add</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hf₀</span> <span class=\"n\">hf₁</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">linarith</span> <span class=\"o\">[</span><span class=\"n\">hf₀</span><span class=\"o\">,</span> <span class=\"n\">hf₁</span><span class=\"o\">],</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span><span class=\"n\">sub_eq_zero</span><span class=\"o\">,</span> <span class=\"err\">←</span><span class=\"n\">mul_sub</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">mul_eq_zero</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">this</span> <span class=\"k\">with</span> <span class=\"n\">hc</span><span class=\"bp\">|</span><span class=\"n\">hc</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">subst</span> <span class=\"n\">c</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">zero_mul</span><span class=\"o\">,</span> <span class=\"n\">mul_eq_zero</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hf₀</span><span class=\"o\">,</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">hf₀</span> <span class=\"k\">with</span> <span class=\"n\">hd</span><span class=\"bp\">|</span><span class=\"n\">hd</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">norm_num</span> <span class=\"n\">at</span> <span class=\"n\">hd</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">subst</span> <span class=\"n\">d</span><span class=\"o\">,</span>\n      <span class=\"n\">left</span><span class=\"o\">,</span>\n      <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n      <span class=\"n\">convert</span> <span class=\"n\">lf</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n      <span class=\"n\">simp</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">sub_eq_zero</span> <span class=\"n\">at</span> <span class=\"n\">hc</span><span class=\"o\">,</span>\n    <span class=\"n\">subst</span> <span class=\"n\">c</span><span class=\"o\">,</span>\n    <span class=\"n\">right</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"n\">d</span><span class=\"o\">,</span>\n    <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">lf</span> <span class=\"n\">x</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">imo2019_1</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)))</span> <span class=\"bp\">↔</span>\n  <span class=\"o\">(((</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">d</span><span class=\"o\">)))</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">only_solutions</span> <span class=\"n\">f</span> <span class=\"n\">h</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintros</span> <span class=\"o\">(</span><span class=\"n\">hf</span><span class=\"bp\">|⟨</span><span class=\"n\">d</span><span class=\"o\">,</span><span class=\"n\">hf</span><span class=\"bp\">⟩</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hf</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">ring</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 172249659,
        "sender_full_name": "Reid Barton",
        "timestamp": 1564685645
    },
    {
        "content": "<p>Oh nice!</p>",
        "id": 172250358,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1564686010
    },
    {
        "content": "<p>Maybe we should start a little project to pick off some other easy ones :-)</p>",
        "id": 172250391,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1564686036
    },
    {
        "content": "<p>How are you doing with the geometry ones? :-)</p>",
        "id": 172250860,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1564686287
    },
    {
        "content": "<p>I'm working on IMO2019-4...</p>",
        "id": 172250955,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1564686351
    },
    {
        "content": "<p>I don't really know what to do with any of the geometry ones. Even some of the problems involving games or other random combinatorics seem pretty tricky to formalize.</p>",
        "id": 172251029,
        "sender_full_name": "Reid Barton",
        "timestamp": 1564686378
    },
    {
        "content": "<p>As you might guess from my other recent messages I started on problem 4 too but didn't get much further than proving that 2^36 &lt; 15!</p>",
        "id": 172251102,
        "sender_full_name": "Reid Barton",
        "timestamp": 1564686445
    },
    {
        "content": "<p>For geometry we would have to define some basic planar geometry definitions. I don't know whether it is nicer to do analytically or synthetically (my guess would be analytically).</p>",
        "id": 172251527,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1564686712
    },
    {
        "content": "<p>For combinatorics it depends a lot on the problem. I think IMO2019-3 is not too hard to formulate as a finite sequence of graphs (it will not be pretty, though)</p>",
        "id": 172251721,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1564686838
    },
    {
        "content": "<p>IMO2019-3 is just <code>dec_trivial</code>.</p>",
        "id": 172253850,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1564688289
    }
]