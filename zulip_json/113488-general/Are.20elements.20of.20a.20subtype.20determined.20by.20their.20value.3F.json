[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">order</span><span class=\"bp\">.</span><span class=\"n\">bounds</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">ordered_group</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">real</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">infinite_sum</span>\n<span class=\"n\">noncomputable</span> <span class=\"n\">theory</span>\n\n<span class=\"kn\">definition</span> <span class=\"n\">nnreal</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">//</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">r</span><span class=\"o\">}</span>\n<span class=\"kn\">notation</span> <span class=\"bp\">`</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span> <span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">nnreal</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">val_eq_val</span> <span class=\"o\">(</span><span class=\"n\">r₁</span> <span class=\"n\">r₂</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">r₁</span> <span class=\"bp\">=</span> <span class=\"n\">r₂</span> <span class=\"bp\">↔</span> <span class=\"n\">r₁</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">=</span> <span class=\"n\">r₂</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>\n\n\n<p>I want to mutter something about proof-irrelevance... and of course I'm working classical</p>",
        "id": 126915156,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1526982091
    },
    {
        "content": "<p>yes. <code>subtype.eq</code></p>",
        "id": 126915217,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1526982162
    },
    {
        "content": "<p>Ok, thanks!</p>",
        "id": 126915243,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1526982234
    },
    {
        "content": "<p>That is helpful</p>",
        "id": 126915244,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1526982239
    },
    {
        "content": "<p>I expected that to be right after the definition of a subtype, but I should have thought of looking for a separate file</p>",
        "id": 126915299,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1526982307
    },
    {
        "content": "<p>mathlib vs core :)</p>",
        "id": 126915302,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1526982320
    },
    {
        "content": "<p>I see</p>",
        "id": 126915312,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1526982353
    },
    {
        "content": "<p>All methods have advantages and disadvantages but the reason I'm mentioning this is that it's important to get into the right mindset.</p>",
        "id": 126915354,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526982364
    },
    {
        "content": "<p>The logic is \"it's important, so it's probably there already, so I could either plough through subtype.lean, or guess what the theorem might be called and try and find it with the ctrl-space dance, or just ask here\"</p>",
        "id": 126915355,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526982364
    },
    {
        "content": "<p>my posts are appearing in random orders</p>",
        "id": 126915364,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526982377
    },
    {
        "content": "<p>I asked here too much in the early days and it took me a while to figure out the other algorithms, it's a sort of \"give a man a fish\" thing, and of course asking here is a super-helpful resource, but somehow I understand the other possibilities better now and once you understand them you become more powerful.</p>",
        "id": 126915428,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526982499
    },
    {
        "content": "<p>And of course from where you're sitting you have no idea about what will be in core and what will be in mathlib, so sometimes it's just less frustrating to ask</p>",
        "id": 126915432,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526982542
    },
    {
        "content": "<p>What it took me a long time to understand was \"if it's natural, it's already there, and is almost certainly named well\"</p>",
        "id": 126915441,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526982578
    },
    {
        "content": "<p>Ok, so I applied your strategy, and expected there to be a <code>subtype.neq</code>. But it's not there...</p>",
        "id": 126916503,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1526984556
    },
    {
        "content": "<p>someone is being too classical</p>",
        "id": 126916508,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1526984573
    },
    {
        "content": "<p>it's just a <code>rw</code> for the other direction</p>",
        "id": 126916512,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1526984577
    },
    {
        "content": "<p>You should add it :-)</p>",
        "id": 126916574,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526984645
    },
    {
        "content": "<p>subtype.eq is an iff</p>",
        "id": 126916577,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526984651
    },
    {
        "content": "<p>Hmm, so I should <code>rw</code>, instead of <code>apply</code>...?</p>",
        "id": 126916584,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1526984694
    },
    {
        "content": "<p>There aren't a lot of negated theorems like that, since <code>mt</code> is literally two characters and turns any A -&gt; B into \\not B -&gt; \\not A</p>",
        "id": 126916595,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526984712
    },
    {
        "content": "<p><code>congr_arg subtype.val</code>, whatever</p>",
        "id": 126916596,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1526984713
    },
    {
        "content": "<p>If H is A &lt;-&gt; B then H.1 is A -&gt; B and H.2 is B -&gt; A, if this helps</p>",
        "id": 126916652,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526984767
    },
    {
        "content": "<p>(this is because the _definition_ of &lt;-&gt; is what you think it is)</p>",
        "id": 126916657,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526984809
    },
    {
        "content": "<p>Wait, how do I use <code>mt</code>?</p>",
        "id": 126916672,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1526984872
    },
    {
        "content": "<p><code>#print mt</code></p>",
        "id": 126916716,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526984901
    },
    {
        "content": "<p>Hmmz, I see</p>",
        "id": 126916718,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1526984928
    },
    {
        "content": "<p>or <code>#check mt</code> if you just want to see the type</p>",
        "id": 126916720,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526984930
    },
    {
        "content": "<p>Some questions of the form \"how do I use X\" are really \"what is its type?\" and some are \"what is its definition?\"</p>",
        "id": 126916727,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526984956
    },
    {
        "content": "<p>Stuff isn't typechecking over here... I'll have to work a bit</p>",
        "id": 126916728,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1526984962
    },
    {
        "content": "<p>so you use <code>#check</code> or <code>#print</code></p>",
        "id": 126916729,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526984969
    },
    {
        "content": "<p>That's another thing I learnt -- when I get errors now I read them carefully</p>",
        "id": 126916730,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526984980
    },
    {
        "content": "<p>because they tell you exactly what you have got wrong</p>",
        "id": 126916733,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526984987
    },
    {
        "content": "<p>Ok, so my subtype.eq is not an iff, it's something from core saying</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">protected</span> <span class=\"kn\">lemma</span> <span class=\"n\">eq</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a1</span> <span class=\"n\">a2</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">}},</span> <span class=\"n\">val</span> <span class=\"n\">a1</span> <span class=\"bp\">=</span> <span class=\"n\">val</span> <span class=\"n\">a2</span> <span class=\"bp\">→</span> <span class=\"n\">a1</span> <span class=\"bp\">=</span> <span class=\"n\">a2</span>\n<span class=\"bp\">|</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">h1</span><span class=\"bp\">⟩</span> <span class=\"bp\">⟨.</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"n\">h2</span><span class=\"bp\">⟩</span> <span class=\"n\">rfl</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</pre></div>",
        "id": 126916842,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1526985205
    },
    {
        "content": "<p>OK great -- I just assumed it was an iff from something someone said earlier</p>",
        "id": 126921269,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526993747
    },
    {
        "content": "<p>I guess it's protected because if you open subtype then all of a sudden you have clobbered the definition of eq</p>",
        "id": 126921310,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526993779
    }
]