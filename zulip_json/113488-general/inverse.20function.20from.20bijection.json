[
    {
        "content": "<p>How do you get the inverse function from <code>function.bijective f</code>?</p>",
        "id": 265730341,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1640118275
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/function.inv_fun\">docs#function.inv_fun</a>?</p>",
        "id": 265730391,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1640118318
    },
    {
        "content": "<p>or maybe <a href=\"https://leanprover-community.github.io/mathlib_docs/find/function.surj_inv\">docs#function.surj_inv</a></p>",
        "id": 265730411,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1640118335
    },
    {
        "content": "<p>Nice. Thank you.</p>",
        "id": 265730493,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1640118375
    },
    {
        "content": "<p>You can even build an equiv using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/equiv.of_bijective\">docs#equiv.of_bijective</a></p>",
        "id": 265730599,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1640118460
    },
    {
        "content": "<p>Cool.</p>",
        "id": 265730793,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1640118551
    },
    {
        "content": "<p>Remember <a href=\"https://xenaproject.wordpress.com/2019/06/11/the-inverse-of-a-bijection/\">it's noncomputable though</a> (not that we're too bothered about this around here!)</p>",
        "id": 265730952,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1640118632
    },
    {
        "content": "<p>That's right. That means it can be slightly tedious to prove things involving the inverse if you need to use the precise definition of your function.</p>",
        "id": 265731097,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1640118723
    },
    {
        "content": "<p>It might be better to just work with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/equiv\">docs#equiv</a> instead of bijective in the first place</p>",
        "id": 265734737,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1640121128
    },
    {
        "content": "<p>BTW, should we have <code>can_lift (α → β) (α ≃ β)</code> with <code>cond := bijective</code> (and probably same for <code>embedding</code> and <code>injective</code>)? Or should we wait till someone needs it in a tactic proof?</p>",
        "id": 265753377,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1640133778
    },
    {
        "content": "<p>I don't think those are urgent, but if someone spends the time to PR them I see no harm in adding them</p>",
        "id": 265754862,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1640135226
    },
    {
        "content": "<p>You mean <code>embedding</code> + <code>surjective</code>, I assume?</p>",
        "id": 265776732,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640161093
    },
    {
        "content": "<p>I meant <code>can_lift (α → β) (α ↪ β)</code> with <code>cond := injective</code>.</p>",
        "id": 265801167,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1640177697
    }
]