[
    {
        "content": "<p>I think that everyone agrees that bundling substructures has benefits.<br>\nIt has also been discussed before that we might have been to zealous in our efforts to eradicate the classes <code>is_sub*</code>, and deprecating them, and moving them to <code>deprecated.*</code>.<br>\n<span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> has pointed out that it is probably better to rehabilitate them as honest and appreciated mathlib citizens, but as <code>structure</code> rather than <code>class</code>. And then give some glue to move between the bundled and unbundled versions.<br>\nThe same might apply to bundled/unbundled morphisms.</p>\n<p>With this thread, I want to hear thoughts from some experienced contributors. <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> <span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> <span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span> <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> <span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span>  <span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span> <span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> <span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> <br>\nWhat are your thoughts? Shall I make a PR to put these pieces back in the main tree. Or do you disagree with the idea? (If I make any PR, it will not be before Wed next week.)</p>",
        "id": 210400716,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1600354209
    },
    {
        "content": "<p>I agree with this. <code>is_subgroup</code> is certainly a useful proposition, it just isn't well suited for structural properties. I think it should just take a less central role</p>",
        "id": 210400924,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600354310
    },
    {
        "content": "<p>I agree we need to be able to express the idea that some given set is a sub*.</p>",
        "id": 210400931,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1600354312
    },
    {
        "content": "<p>Of course we can state this in the current setup (in term of existence of a bundle sub* whose coercion to set is the set we care about) but this is really weird.</p>",
        "id": 210401066,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1600354358
    },
    {
        "content": "<p>Have we solved this issue? <a href=\"https://github.com/leanprover-community/mathlib/blame/93468fee1888f18382c68bbbca2bc054db7ee2fb/src/ring_theory/free_ring.lean#L120\">https://github.com/leanprover-community/mathlib/blame/93468fee1888f18382c68bbbca2bc054db7ee2fb/src/ring_theory/free_ring.lean#L120</a></p>",
        "id": 210401721,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1600354629
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\">- Lift of a map `f : α → R` to `free_ring α` as a ring homomorphism.</span>\n<span class=\"cm\">We don&#39;t use it as the canonical form because Lean fails to coerce it to a function. -/</span>\n<span class=\"n\">def</span> <span class=\"n\">lift_hom</span> <span class=\"o\">:</span> <span class=\"n\">free_ring</span> <span class=\"n\">α</span> <span class=\"bp\">→+*</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨</span><span class=\"n\">lift</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">lift_one</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">lift_mul</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">lift_zero</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">lift_add</span> <span class=\"n\">f</span><span class=\"bp\">⟩</span>\n</code></pre></div>",
        "id": 210401738,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1600354636
    },
    {
        "content": "<p>I agree with this as well, and possibly the same idea with <code>is_ring_hom</code> etc., but with the expectation that they won't be used very much.</p>",
        "id": 210401847,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1600354683
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110064\">Kenny Lau</span> <a href=\"#narrow/stream/113488-general/topic/deprecated.20is_sub*/near/210401721\">said</a>:</p>\n<blockquote>\n<p>Have we solved this issue? <a href=\"https://github.com/leanprover-community/mathlib/blame/93468fee1888f18382c68bbbca2bc054db7ee2fb/src/ring_theory/free_ring.lean#L120\">https://github.com/leanprover-community/mathlib/blame/93468fee1888f18382c68bbbca2bc054db7ee2fb/src/ring_theory/free_ring.lean#L120</a></p>\n</blockquote>\n<p>I don't think so... but isn't that orthogonal to this discussion?</p>",
        "id": 210402234,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1600354814
    },
    {
        "content": "<p>I guess it is</p>",
        "id": 210402557,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1600354945
    },
    {
        "content": "<p>I agree with using bundled substructures as much as possible, and making <code>is_sub*</code> a structure instead of a class.</p>\n<p>Notice that if in mathematics you have a theorem that (under certain conditions) <code>H</code> is a subgroup of <code>G</code>, you can translate that to Lean as</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">H_subgroup</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">...</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"n\">G</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">carrier</span> <span class=\"o\">:=</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"bp\">...</span> <span class=\"o\">}</span>\n</code></pre></div>\n\n\n<p>From the type alone you cannot tell that this definition states \"<code>H</code> is a subgroup of <code>G</code>\", but it will be equally useful to that statement.<br>\nIf you do that, I think you will hardly ever need the <code>is_subgroup</code> predicate.</p>",
        "id": 210451366,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1600376776
    },
    {
        "content": "<p>The situation I encountered recently (which was not for groups specifically, but I'll translate it to groups) was that I had a series of subsets <code>H n</code> for <code>n : nat</code>, I wanted to prove by induction on <code>n</code> that each <code>H n</code> was a subgroup, and in the inductive step, I wanted to apply some theorem about subgroups (say, that any finite product of elements of <code>H n</code> is again in <code>H n</code>).</p>",
        "id": 210452380,
        "sender_full_name": "Reid Barton",
        "timestamp": 1600377335
    },
    {
        "content": "<p>Here <code>H n</code> was defined ahead of time in some complicated way.</p>",
        "id": 210452615,
        "sender_full_name": "Reid Barton",
        "timestamp": 1600377442
    },
    {
        "content": "<p>Yeah, that seems to be one of the cases where the <code>is_subgroup</code> predicate is useful.</p>",
        "id": 210452828,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1600377497
    },
    {
        "content": "<p>More generally, when accepting <code>is_subgroup</code> as a hypothesis--here the inductive hypothesis</p>",
        "id": 210452890,
        "sender_full_name": "Reid Barton",
        "timestamp": 1600377526
    },
    {
        "content": "<p>It's possible to do, but awkward</p>",
        "id": 210453127,
        "sender_full_name": "Reid Barton",
        "timestamp": 1600377635
    }
]