[
    {
        "content": "<p>Might be a weird question: let's say I wanted to define an enumerated type with ~1000 elements. Is there an \"efficient\" way to do this? </p>\n<p>My naive way of just doing </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Data</span>\n<span class=\"bp\">|</span> <span class=\"n\">foo1</span>\n<span class=\"bp\">|</span> <span class=\"n\">foo2</span>\n<span class=\"bp\">...</span>\n</code></pre></div>\n<p>eats memory like crazy. Is this just not feasible?</p>",
        "id": 269280723,
        "sender_full_name": "Logan Murphy",
        "timestamp": 1643127465
    },
    {
        "content": "<p>Even adding the inductive directly to the environment seems slow,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kd\">run_cmd</span> <span class=\"o\">(</span><span class=\"n\">add_inductive</span> <span class=\"bp\">`</span><span class=\"n\">foo</span> <span class=\"o\">[]</span> <span class=\"mi\">0</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"n\">list.range</span> <span class=\"mi\">100</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">name.append</span> <span class=\"bp\">`</span><span class=\"n\">foo</span> <span class=\"n\">sformat</span><span class=\"bp\">!</span><span class=\"s2\">\"f{n}\"</span><span class=\"o\">,</span> <span class=\"n\">expr.const</span> <span class=\"bp\">`</span><span class=\"n\">foo</span> <span class=\"o\">[]))))</span> <span class=\"n\">ff</span>\n\n<span class=\"k\">#print</span> <span class=\"kd\">inductive</span> <span class=\"n\">foo</span>\n<span class=\"k\">#check</span> <span class=\"n\">foo.f1</span>\n</code></pre></div>",
        "id": 269282520,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1643128176
    },
    {
        "content": "<p>On a slightly unrelated note, I remember seeing a commit on an optimization for such types in Lean 4 some time ago so this might well be fixed in 4, one would have to try though.</p>",
        "id": 269283346,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1643128488
    },
    {
        "content": "<p>Is there a reason to not use <code>fin 1000</code>?</p>",
        "id": 269285820,
        "sender_full_name": "David Wärn",
        "timestamp": 1643129440
    },
    {
        "content": "<p>Hacky workaround:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Data</span>\n<span class=\"bp\">|</span> <span class=\"n\">data1</span> <span class=\"o\">:</span> <span class=\"n\">Data1</span>\n<span class=\"bp\">|</span> <span class=\"n\">data2</span> <span class=\"o\">:</span> <span class=\"n\">Data2</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Data1</span>\n<span class=\"bp\">|</span> <span class=\"n\">foo1</span>\n<span class=\"bp\">|</span> <span class=\"bp\">...</span>\n<span class=\"bp\">|</span> <span class=\"n\">foo500</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Data2</span>\n<span class=\"bp\">|</span> <span class=\"n\">foo501</span>\n<span class=\"bp\">...</span>\n<span class=\"bp\">|</span> <span class=\"n\">foo1000</span>\n</code></pre></div>\n<p>Repeat for quadratic decrease in the number of constructors (and logarithmic increase in programmer annoyance).</p>",
        "id": 269286212,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1643129586
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130377\">David Wärn</span> <a href=\"#narrow/stream/113488-general/topic/.22Efficient.22.20enumerated.20type/near/269285820\">said</a>:</p>\n<blockquote>\n<p>Is there a reason to not use <code>fin 1000</code>?</p>\n</blockquote>\n<p>I suppose not in principle,  but part of what I'm trying to do involves having</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Struct</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">Foo</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Bar</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>where <code>Foo</code> and <code>Bar</code> are both big enumerated types, but with <code>Foo</code> and <code>Bar</code> being disjoint. So having both types be <code>fin 1000</code> might cause some other issues</p>",
        "id": 269286811,
        "sender_full_name": "Logan Murphy",
        "timestamp": 1643129820
    },
    {
        "content": "<p>You can have type synonyms</p>",
        "id": 269286905,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1643129856
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> <a href=\"#narrow/stream/113488-general/topic/.22Efficient.22.20enumerated.20type/near/269286905\">said</a>:</p>\n<blockquote>\n<p>You can have type synonyms</p>\n</blockquote>\n<p>True</p>",
        "id": 269286962,
        "sender_full_name": "Logan Murphy",
        "timestamp": 1643129880
    },
    {
        "content": "<p>myfoo : Type := fin 1000, etc. Even make them irreducible after you make some wrapper api, if you want to be really particular about not accidentally giving a foo for a bar</p>",
        "id": 269287133,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1643129931
    },
    {
        "content": "<blockquote>\n<p>On a slightly unrelated note, I remember seeing a commit on an optimization for such types in Lean 4 some time ago so this might well be fixed in 4, one would have to try though.</p>\n</blockquote>\n<p>In lean 4 it takes half of a second on my machine (tried 1000 constructors - didn't notice significant memory growth). In Lean 3 I get timeout.</p>",
        "id": 269289104,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1643130567
    }
]