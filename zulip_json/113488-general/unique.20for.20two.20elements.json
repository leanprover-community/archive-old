[
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/mathlib/pull/12671\">#12671</a>, I state things about indexed families where the indexing family has exactly two elements (and I need to refer explicitly to those elements).</p>\n<p>For one element, we can use <code>unique X</code> and <code>default</code>.</p>\n<p>Whats's the preferred way to refer to this type of thing for two elements?</p>\n<ol>\n<li><code>{i j : ι} (hij : i ≠ j) (h : (set.univ : set ι) = {i, j}) : foo i j</code></li>\n<li><code>[fintype ι] {i j : ι} (hij : i ≠ j) (h : (finset.univ : set ι) = {i, j}) : foo i j</code></li>\n<li><code>{i j : ι} (hij : i ≠ j) (h : ∀ k, k = i ∨ k = j) : foo i j</code></li>\n<li><code>[almost_unique ι] : foo default other_default</code></li>\n</ol>",
        "id": 276466302,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1648124057
    },
    {
        "content": "<p>Currently I've gone with 1, but 2 has the benefit that  <code>h</code> is often true by <code>rfl</code></p>",
        "id": 276466410,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1648124159
    },
    {
        "content": "<p><code>X ≃ bool</code> or <code>fin 2</code>? <code>f : bool → X</code> <code>function.bijective f</code>?</p>",
        "id": 276469776,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1648126025
    },
    {
        "content": "<p>I was thinking that maybe it's better to state the result for <code>fin 2</code> first and do an equivalence, too</p>",
        "id": 276469828,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1648126058
    },
    {
        "content": "<p><code>fin 2</code> also has some sort of an API, which is nice (like the <code>fin 3</code> stuff earlier)</p>",
        "id": 276469907,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1648126084
    },
    {
        "content": "<p>I guess I only really care about <code>zmod 2</code> and <code>units ℤ</code></p>",
        "id": 276472134,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1648127047
    },
    {
        "content": "<p>Another one is <code>punit ⊕ punit</code></p>",
        "id": 276472240,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1648127098
    }
]