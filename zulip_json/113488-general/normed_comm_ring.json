[
    {
        "content": "<p>It seems that Lean fails to unify two ways to get <code>ring</code> from <code>normed_comm_ring</code>: <code>normed_comm_ring</code> → <code>comm_ring</code> → <code>ring</code> and <code>normed_comm_ring</code> → <code>normed_ring</code> → <code>ring</code>, see <a href=\"https://github.com/leanprover-community/mathlib/runs/1244482591\">https://github.com/leanprover-community/mathlib/runs/1244482591</a></p>",
        "id": 213235984,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1602636958
    },
    {
        "content": "<p>I'm surprised this wasn't already an issue for two paths from <code>normed_field</code> to <code>ring</code>?</p>",
        "id": 213236051,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1602637016
    },
    {
        "content": "<p>While I can use some workaround here (e.g., redo everything in terms of <code>polynomial.eval₂</code> to drop the commutativity assumption), I wonder if there is some way to actually fix this problem.</p>",
        "id": 213236078,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1602637062
    },
    {
        "content": "<p><code>normed_field</code> extends <code>field</code> using new structure cmd, so it just has <code>to_field</code>. What paths are you talking about?</p>",
        "id": 213236150,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1602637124
    },
    {
        "content": "<p>I think that in the case of <code>normed_comm_ring</code>, Lean fails to unify two paths because of some mix of new and old structures.</p>",
        "id": 213236222,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1602637181
    },
    {
        "content": "<p>Oh, I see.  I don't really know about the old/new structure distinction (past the fact that it exists), it's not possible to use new structures for <code>normed_comm_ring</code>?</p>",
        "id": 213236298,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1602637234
    },
    {
        "content": "<p><code>normed_comm_ring</code> is a new structure but it's impossible to make a new structure <code>extend</code> two structures with competing fields.</p>",
        "id": 213236829,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1602637856
    },
    {
        "content": "<p>Because new structure stores <code>to_*</code> fields instead of unpacking all the extended structures.</p>",
        "id": 213236857,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1602637894
    },
    {
        "content": "<p>And I don't want to redo the whole algebraic hierarchy based on the new structure cmd right now.</p>",
        "id": 213236914,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1602637949
    },
    {
        "content": "<p>And without Lean 4 support for cyclic inheritance.</p>",
        "id": 213236935,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1602637984
    },
    {
        "content": "<p>Can you just make <code>normed_comm_ring</code> an old structure?</p>",
        "id": 213254513,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602660552
    },
    {
        "content": "<p>This would require making lots of other typeclasses old structures too.</p>",
        "id": 213287766,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1602682094
    },
    {
        "content": "<p>And there are no old structures in Lean 4, so I don't think that migrating in this direction is a good idea.</p>",
        "id": 213287814,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1602682119
    },
    {
        "content": "<p>We will have the option to put back the old structure command. But it won't be there by default.</p>",
        "id": 213291670,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1602683856
    },
    {
        "content": "<p><code>old_structure_cmd</code> seems pretty core to the entire algebraic heirarchy - I don't think it's unreasonable to keep using it when building further on top of that.</p>",
        "id": 213295996,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602685640
    }
]