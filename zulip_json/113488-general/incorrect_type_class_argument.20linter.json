[
    {
        "content": "<p>I would like to define something which is not a class, but use it as a class in a part of a development. Typically something like</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">- Something which is not a class, but that I will use locally as a class -/</span>\n<span class=\"n\">def</span> <span class=\"n\">not_class</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"kn\">section</span>\n\n<span class=\"n\">local</span> <span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"n\">class</span><span class=\"o\">]</span> <span class=\"n\">not_class</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">- I want to use `not_class` as a class here. -/</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">nolint</span> <span class=\"n\">incorrect_type_class_argument</span> <span class=\"n\">unused_arguments</span><span class=\"o\">]</span>\n<span class=\"n\">def</span> <span class=\"n\">use_class</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">not_class</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">n</span>\n\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>This works well, except that the linter complains:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"> INCORRECT TYPE-CLASS ARGUMENTS.</span>\n<span class=\"cm\">Some declarations have non-classes between [square brackets]: -/</span>\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">use_class</span><span class=\"bp\">.</span><span class=\"n\">equations</span><span class=\"bp\">._</span><span class=\"n\">eqn_1</span> <span class=\"c\">/-</span><span class=\"cm\"> These are not classes. argument 2: [_inst_1 : not_class n] -/</span>\n</code></pre></div>\n\n\n<p>What is the right way to tell the linter that, really, I know what I am doing here?</p>",
        "id": 200250775,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1591718260
    },
    {
        "content": "<p>I guess <code>use_class</code> will be useless outside of this section, right? Can you make it <code>private</code>?</p>",
        "id": 200251021,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1591718340
    },
    {
        "content": "<p>Hmm, private declarations seem to be included in that lint, that doesn't seem right.</p>",
        "id": 200251514,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1591718508
    },
    {
        "content": "<p>Maybe it would make more sense to just implement this test in Lean itself?</p>",
        "id": 200251549,
        "sender_full_name": "Reid Barton",
        "timestamp": 1591718518
    },
    {
        "content": "<p>Why is it linting the autogenerated equational lemma?</p>",
        "id": 200251990,
        "sender_full_name": "Reid Barton",
        "timestamp": 1591718652
    },
    {
        "content": "<p>Some linters apply to all declarations including the autogenerated ones. This one probably shouldn't.</p>",
        "id": 200252103,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1591718696
    },
    {
        "content": "<p>Ideally, if I disable a linter for a def, then it should be disabled also for its equational lemmas.</p>",
        "id": 200252107,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1591718698
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span>  for <a href=\"https://github.com/leanprover-community/mathlib/issues/3006\">#3006</a>. Shortest (and most efficient) PR ever?</p>",
        "id": 200257708,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1591720922
    }
]