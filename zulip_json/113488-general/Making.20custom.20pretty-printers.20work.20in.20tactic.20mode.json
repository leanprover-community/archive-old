[
    {
        "content": "<p>How can I force Lean to use my pretty-printer when printing types/expressions in the tactic state? I defined all instances I could think of but it still insists on using the full constructor form. (I don't want to use <code>infix</code>/<code>notation</code> in this case).</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">Expr</span>\n<span class=\"bp\">|</span> <span class=\"n\">Mul</span><span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span>\n<span class=\"bp\">|</span> <span class=\"n\">Const</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">):</span> <span class=\"n\">Expr</span>\n<span class=\"kn\">open</span> <span class=\"n\">Expr</span>\n\n<span class=\"n\">def</span> <span class=\"n\">Expr</span><span class=\"bp\">.</span><span class=\"n\">to_string</span><span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">string</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">Mul</span> <span class=\"n\">e1</span> <span class=\"n\">e2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"s2\">&quot;(&quot;</span> <span class=\"bp\">++</span> <span class=\"n\">e1</span><span class=\"bp\">.</span><span class=\"n\">to_string</span> <span class=\"bp\">++</span> <span class=\"s2\">&quot;*&quot;</span> <span class=\"bp\">++</span> <span class=\"n\">e2</span><span class=\"bp\">.</span><span class=\"n\">to_string</span> <span class=\"bp\">++</span> <span class=\"s2\">&quot;)&quot;</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">Const</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">has_to_string</span><span class=\"bp\">.</span><span class=\"n\">to_string</span> <span class=\"n\">n</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_to_string</span> <span class=\"n\">Expr</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">Expr</span><span class=\"bp\">.</span><span class=\"n\">to_string</span><span class=\"bp\">⟩</span>\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_repr</span> <span class=\"n\">Expr</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">Expr</span><span class=\"bp\">.</span><span class=\"n\">to_string</span><span class=\"bp\">⟩</span> <span class=\"c\">/-</span><span class=\"cm\"> NB this instance is invalid, eval (repr e) = e doesn&#39;t hold -/</span>\n<span class=\"n\">meta</span> <span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_to_format</span> <span class=\"n\">Expr</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨λ</span><span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"err\">↑</span><span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">to_string</span><span class=\"bp\">⟩</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"o\">(</span><span class=\"n\">Mul</span> <span class=\"o\">(</span><span class=\"n\">Const</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Const</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"c1\">-- (0*1) :)</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">Mul</span> <span class=\"o\">(</span><span class=\"n\">Const</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Const</span> <span class=\"mi\">1</span><span class=\"o\">)),</span>\n<span class=\"c\">/-</span><span class=\"cm\"> Tactic State:</span>\n<span class=\"cm\">x : Expr := Mul (Const 0) (Const 1) -- :(</span>\n<span class=\"cm\">⊢ true -/</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 170787830,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1563020565
    },
    {
        "content": "<p>i'm not sure if you can do that, what if a parameter to Expr isn't fully evaluated in the tactic state? what should to_string do then?</p>\n<p>the usual way to do this is to use the notation command - notations will show up in the tactic state.<br>\naccording to <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span>, one can also write some kind of parser, but i've never done that in lean and i'm not sure if that shows up in the tactic state.</p>\n<p>edit: i just realized that i don't really understand to_format, so disregard what i said for to_format ...</p>",
        "id": 170789091,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1563023095
    },
    {
        "content": "<p>Ah okay, I see what you mean. There could be something like <code>maybe_uneval_to_string: maybe_uneval mytype -&gt; string</code> which would also have to handle cases where the value is a metavariable/let-binding/etc but with the current system, <code>to_string</code> expects the whole value to be well-defined. <code>to_format</code> is basically the same in this respect - it differs only in allowing finer control over the formatting.</p>",
        "id": 170791621,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1563027558
    },
    {
        "content": "<p>You most certainly do not want to evaluate things in the tactic state in order to print them; the most interesting parts in there usually are <em>not</em> constructors</p>",
        "id": 170798606,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1563039192
    },
    {
        "content": "<p>Apart from notations, the only customization Lean 3 gives you for tactic state reporting is overriding the <code>has_to_format tactic_state</code> instance - but then you'll have to format the whole goal yourself</p>",
        "id": 170798650,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1563039242
    },
    {
        "content": "<p>I agree that evaluation is not the way to go, but I think there would still be a lot of value in pretty printers that can handle metavariables, local constants and so on. Thanks to notation commands we can get nice output like <code>|- x*(y*z) = x*y*z</code>, but notation is limited - for example, if I wanted to print a tree structure in some form within the goal:</p>\n<div class=\"codehilite\"><pre><span></span>|-\n+- root\n +- left\n  +- leaf1\n  +- leaf2\n +- right\n=\nsome_other_tree\n</pre></div>",
        "id": 170798885,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1563039730
    },
    {
        "content": "<blockquote>\n<p>Apart from notations, the only customization Lean 3 gives you for tactic state reporting is overriding the <code>has_to_format tactic_state</code> instance - but then you'll have to format the whole goal yourself</p>\n</blockquote>\n<p>aha! i was getting really confused when i tried to implement has_to_format similar to other inductive types like list in format.lean and it wouldn't work.</p>",
        "id": 170798960,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1563039931
    },
    {
        "content": "<blockquote>\n<p>I agree that evaluation is not the way to go</p>\n</blockquote>\n<p>Right, so what you'd want instead is a reflected analog to <code>has_to_format</code> - for a given type (identified by its constant <code>name</code>), take a <em>term</em> (<code>expr</code>) of that type and return its <code>format</code>. That is how notations pretty-printing in Lean 3 works, it's just missing such a user hook.</p>",
        "id": 170799288,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1563040554
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> I just got this PR in <a href=\"https://github.com/leanprover-community/mathlib/issues/1222\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/1222\">#1222</a> which among other things lets you use <code>tactic</code> to pretty print stuff (e.g. <code>trace!\"expr: {e}; type: {infer_type e}\"</code>). Are you saying that's definitely a bad idea?</p>",
        "id": 170836617,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1563115469
    },
    {
        "content": "<p>No, <code>has_to_tactic_format</code> is fine. This was about using evaluation for printing terms.</p>",
        "id": 170838510,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1563119345
    }
]