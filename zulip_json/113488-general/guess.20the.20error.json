[
    {
        "content": "<div class=\"codehilite\"><pre><span></span>theorem  easy : let H : 0  &lt;  2  := dec_trivial in\n(⟨0,H⟩ : fin 2) = ⟨0,H⟩ := rfl\n</pre></div>",
        "id": 124371146,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522337475
    },
    {
        "content": "<p>Ah, I guess there are two ways in which a lemma can fail to be rfl: either the proof is not rfl, or the proposition is not an equation.</p>",
        "id": 124372404,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1522339286
    },
    {
        "content": "<p>Note that <code>easy</code> would not work as a simp lemma, since it matches on the <code>let</code> instead of the <code>fin.mk</code> (and the exact decidability proof):</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">simp_lemmas</span><span class=\"bp\">.</span><span class=\"n\">mk</span><span class=\"bp\">.</span><span class=\"n\">add_simp</span> <span class=\"bp\">``</span><span class=\"n\">easy</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">simp_lemmas</span><span class=\"bp\">.</span><span class=\"n\">pp</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">trace</span>\n<span class=\"c1\">-- simplification rules for iff</span>\n<span class=\"c1\">-- [easy] #0, let H : 0 &lt; 2 := _ in ⟨0, H⟩ = ⟨0, H⟩ ↦ true</span>\n</pre></div>",
        "id": 124372463,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1522339351
    },
    {
        "content": "<p>To explain: <code>lemma foo : ... = ... := rfl</code> is only intended to be used for simp-lemmas.  And then it <em>literally</em> needs to be <code>rfl</code> on the right-hand side.  Not <code>eq.refl _</code>, not <code>by refl</code>, but <code>rfl</code>.</p>",
        "id": 124372537,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1522339498
    },
    {
        "content": "<p>So in your case you can just use <code>by refl</code> or <code>eq.refl _</code> and <code>easy</code> will work.</p>",
        "id": 124372551,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1522339527
    },
    {
        "content": "<p>So this let isn't just syntactic sugar?</p>",
        "id": 124376162,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522345583
    },
    {
        "content": "<p>No, let is a primitive term kind supported by the kernel</p>",
        "id": 124417030,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1522424322
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">fish</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">refl</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>(doesn't compile)</p>",
        "id": 200763808,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592050991
    },
    {
        "content": "<p>I'm hoping the error is that there is already a lemma named <code>fish</code></p>",
        "id": 200763931,
        "sender_full_name": "Reid Barton",
        "timestamp": 1592051166
    },
    {
        "content": "<p>Furthermore, it's not just some random test lemma, there's even a little API for it. We have <code>fish_pipe</code> and <code>fish_pure</code> for example.</p>",
        "id": 200763946,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592051200
    },
    {
        "content": "<p>That's why you should always call your lemmas <code>fishy</code>.</p>",
        "id": 200763947,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592051201
    },
    {
        "content": "<p>ohh</p>",
        "id": 200763949,
        "sender_full_name": "Reid Barton",
        "timestamp": 1592051205
    },
    {
        "content": "<p>ok, now I know what it is</p>",
        "id": 200763952,
        "sender_full_name": "Reid Barton",
        "timestamp": 1592051213
    },
    {
        "content": "<p>What the heck is a fish pipe?</p>",
        "id": 200763963,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592051236
    },
    {
        "content": "<p>I didn't know it was actually called <code>fish</code> though, that's funny.</p>",
        "id": 200763964,
        "sender_full_name": "Reid Barton",
        "timestamp": 1592051237
    },
    {
        "content": "<p>It's the <code>(a -&gt; m b) -&gt; (b -&gt; m c) -&gt; a -&gt; m c</code> thing right?</p>",
        "id": 200763969,
        "sender_full_name": "Reid Barton",
        "timestamp": 1592051259
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> <code>&gt;=&gt; |</code>?</p>",
        "id": 200763970,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592051260
    },
    {
        "content": "<p>(I just needed a random lemma name so I could <code>#print</code> it to check I got a more useful answer than \"Lean forgot the proof of your lemma\" (and indeed I do))</p>",
        "id": 200764016,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592051295
    },
    {
        "content": "<p>I hope this is going in some setup documentation</p>",
        "id": 200764049,
        "sender_full_name": "Reid Barton",
        "timestamp": 1592051348
    },
    {
        "content": "<p>\"To check that you have installed Lean correctly, type <code>#print fish</code>\"</p>",
        "id": 200764055,
        "sender_full_name": "Reid Barton",
        "timestamp": 1592051357
    }
]