[
    {
        "content": "<p>Does anyone know if we have heterogenous lists (hlist) somewhere in mathlib?</p>",
        "id": 134000255,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1536995120
    },
    {
        "content": "<p>is that just <code>list Σ T : Type u, T</code>?</p>",
        "id": 134000304,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536995202
    },
    {
        "content": "<p>I want to be able to specify the types:</p>",
        "id": 134000319,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1536995257
    },
    {
        "content": "<p>so if I have <code>T : list (Type u)</code>, I want <code>hlist T</code></p>",
        "id": 134000326,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1536995276
    },
    {
        "content": "<p>with length the same at T, and the i-th element has type the i-th element of T.</p>",
        "id": 134000365,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1536995299
    },
    {
        "content": "<p><code>{L : list (Σ T : Type u, T) // L.map sigma.fst =T}</code></p>",
        "id": 134000631,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1536995964
    },
    {
        "content": "<p>what are the lemmas that you want to prove regarding hlist?</p>",
        "id": 134000679,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536996037
    },
    {
        "content": "<p>I've definitely seen them somewhere.... sorry</p>",
        "id": 134000960,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1536996691
    },
    {
        "content": "<p>Ugh, what's the trick for matching on fin n?</p>",
        "id": 134001356,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1536997528
    },
    {
        "content": "<p>(Thanks, Chris, for your suggestion. I agree that would have worked; but I decided to just use dependent functions on fin n for now.)</p>",
        "id": 134001405,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1536997571
    },
    {
        "content": "<p>I've got a <code>n : fin 2</code> and want to write <code>match n with | \\&lt; 0, _ \\&gt; := ... | \\&lt;1, _\\&gt; := ... end</code></p>",
        "id": 134001572,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1536997870
    },
    {
        "content": "<p>but this isn't exhaustive</p>",
        "id": 134001573,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1536997876
    },
    {
        "content": "<p>how about fin.succ_rec_on</p>",
        "id": 134001808,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536998293
    },
    {
        "content": "<p>I certainly have a definition of <code>hlist</code> sitting around somewhere, but I never managed to get it mathlib ready</p>",
        "id": 134001921,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536998567
    },
    {
        "content": "<p>I pushed to a <code>hlist</code> branch on community mathlib: <a href=\"https://github.com/leanprover/mathlib/commit/b5d6d6\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/commit/b5d6d6\">https://github.com/leanprover/mathlib/commit/b5d6d6</a></p>",
        "id": 134002166,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536999204
    },
    {
        "content": "<p>I want to be clear that I'm not really advocating this representation, this is more of an experiment. It also doesn't completely compile since the top half of the file was rewritten more than the bottom</p>",
        "id": 134002208,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536999266
    }
]