[
    {
        "content": "<p>Consider the following.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.zmod.basic</span>\n<span class=\"kn\">open</span> <span class=\"n\">zmod</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"mi\">8</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">cast_nat_cast</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">norm_num</span> <span class=\"o\">:</span> <span class=\"mi\">4</span> <span class=\"bp\">∣</span> <span class=\"mi\">8</span><span class=\"o\">)</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- leaves `char_p (zmod 4) 4`</span>\n  <span class=\"n\">apply_instance</span><span class=\"o\">,</span> <span class=\"c1\">-- why is this not found automatically?</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"mi\">8</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">exact</span> <span class=\"n\">cast_nat_cast</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">norm_num</span> <span class=\"o\">:</span> <span class=\"mi\">4</span> <span class=\"bp\">∣</span> <span class=\"mi\">8</span><span class=\"o\">)</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"c1\">-- works</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I'm wondering why <code>apply</code> does not clear the goal by itself. Can somebody enlighten me?</p>",
        "id": 299468213,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1663528682
    },
    {
        "content": "<p>As I understand it - the flexibility of <code>apply</code> means it first has to evaluate (elaborate?) the expression to some point and then find a way to match it to the current goal, and that by the time it's figured out what the typeclass goals are, exactly,  it's too late to deal with them (or the implementation doesn't bother anymore). <code>refine</code> and <code>exact</code> know that the expression needs to match exactly, so they can use the current goal to figure things out earlier.</p>\n<p>(I'm assuming plenty of people here could explain better, but I'm hoping this is somewhere near the truth, at least.)</p>",
        "id": 299472343,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1663532007
    },
    {
        "content": "<p>If anyone ever says \"oh why doesn't <code>apply</code> work here\" I just say \"oh that'll be the <code>apply</code> bug\".</p>",
        "id": 299475266,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1663534701
    },
    {
        "content": "<p><code>rw</code> has exactly the same behaviour here, leaving the typeclass as a side goal in the same way it does any other arguments that can't be inferred from what it is rewriting. I think having versions of these tactics that were a bit smarter in these instances would be useful, but there may be some trade-off with efficiency if they try to do this all the time to consider.</p>",
        "id": 299475450,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1663534878
    }
]