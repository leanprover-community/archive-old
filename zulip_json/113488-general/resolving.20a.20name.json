[
    {
        "content": "<p>Say I've got <code>n : name</code>, which I get passed, but would like to be of type <code>my_type</code>.  I know I can use <code>t &lt;- infer_type n</code> to get the type of the identifier pointed to by <code>n</code>, and then can use an if to guard against the type being wrong. But I'd really like to do more and \"cast\" <code>n</code> to type <code>my_type</code>, getting some <code>inst : my_type</code> from <code>n</code>.  Would anyone be able to point me to a nice/any facility for doing this? (I've grepped for <code>cast</code> without success, is <code>mk_app</code> what I'm looking for?)</p>",
        "id": 133714444,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1536650690
    },
    {
        "content": "<p>I don't quite understand the setup here. How does <code>my_type</code> relate to <code>n</code>?</p>",
        "id": 133714683,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536651043
    },
    {
        "content": "<p>Sorry: secretly in some file a user wrote <code>def foo : my_type := blah</code>, and then in tactic mode later on they called my code <code>cast_fn `(foo) </code>. So here <code>n = `foo</code>, and I'd like <code>cast_fn</code> to be of type <code>name -&gt; tactic my_type</code>.</p>",
        "id": 133714858,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1536651334
    },
    {
        "content": "<p>Maybe my attempt at an MWE confused the issue. I'm getting a <code>name</code> in an attribute handler, and I expect what was annotated to be of a particular type. I'd like to get the actual thing that was annotated and call a function on it.</p>",
        "id": 133714912,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1536651379
    },
    {
        "content": "<p><code>eval_expr</code> is what you want</p>",
        "id": 133714916,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536651393
    },
    {
        "content": "<p>Right. So to invoke it, I only get to pass a single <code>expr</code>, so I figure I need to convert the name of the function I want to call into an <code>expr</code> and then create a <code>expr</code> which says \"evaluate the function at the first <code>expr</code>\". How can I build such an <code>expr</code>?</p>",
        "id": 133714953,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1536651480
    },
    {
        "content": "<p>Ah. I think <code>eval_expr my_type (expr.app `(my_fn) n)</code> does the job!</p>",
        "id": 133715275,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1536651896
    },
    {
        "content": "<p>Ok, so the point of <code>mk_app</code> is that I don't need to know the type beforehand? Right.</p>",
        "id": 133715292,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1536651952
    },
    {
        "content": "<p><code>mk_const</code> will turn a name into an <code>expr</code></p>",
        "id": 133715294,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536651953
    },
    {
        "content": "<p>This whole area is just screaming out for a small pdf or web page containing 10 very basic examples followed by 10 very basic questions.</p>",
        "id": 133715409,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536652138
    },
    {
        "content": "<p>What happened to <span class=\"user-mention\" data-user-id=\"121918\">@Edward Ayers</span>? He started to write such documentation and then vanished? Is there a meta-documentation curse?</p>",
        "id": 133715483,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536652209
    },
    {
        "content": "<p>What does the <code>local</code> in <code>local attribute ...</code> mean?</p>",
        "id": 133722360,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1536661398
    },
    {
        "content": "<p><a href=\"https://en.wikipedia.org/wiki/Scope_(computer_science)\" target=\"_blank\" title=\"https://en.wikipedia.org/wiki/Scope_(computer_science)\">https://en.wikipedia.org/wiki/Scope_(computer_science)</a></p>",
        "id": 133722435,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536661523
    },
    {
        "content": "<p>I <em>think</em> it means \"it's an attribute for this <code>.lean</code> file only\" in this case, but I'm certainly not an expert.</p>",
        "id": 133722660,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536661874
    },
    {
        "content": "<p>Well, even \"this <code>section</code> only\"</p>",
        "id": 133723327,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536662942
    },
    {
        "content": "<p>Haha thanks Kenny, I've written a fair few curly-braces in my time!</p>\n<p>In that case does anyone know if the <code>before_unset</code> member of <code>user_attribute</code> is ever actually called when a <code>local</code> attribute is removed for the reason that a section has ended? It seems that it is not, which I find very strange.</p>",
        "id": 133730395,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1536671148
    },
    {
        "content": "<p>It seems that the none of mathlib and only one file in the lean library itself uses the feature, and this is in <code>library/init/meta/smt/ematch.lean</code> where <code>before_unset</code> is defined to do nothing anyway.</p>",
        "id": 133730604,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1536671340
    },
    {
        "content": "<p>It seems that <code>tactic.unset_attribute</code> does perform the unsetting... Perhaps this is a bug in lean?</p>",
        "id": 133730914,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1536671598
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110111\">@Keeley Hoek</span> \"Unsetting\" an attribute means using <code>attribute [-simp] ...</code>, not just leaving the scope of a local attribute declaration</p>",
        "id": 133746407,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1536686043
    },
    {
        "content": "<p>fair enough!</p>",
        "id": 133746476,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1536686126
    },
    {
        "content": "<p>Hi I've been on hols.</p>",
        "id": 134089643,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1537175874
    },
    {
        "content": "<p>Welcome back!</p>",
        "id": 134089683,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537175889
    },
    {
        "content": "<p>We thought you were dead!</p>",
        "id": 134089684,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537175891
    },
    {
        "content": "<p>We were worried</p>",
        "id": 134089686,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537175900
    },
    {
        "content": "<p>Or worse than dead: decided to use another proof assistant</p>",
        "id": 134089692,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537175927
    },
    {
        "content": "<p>I was flirting with Isabelle again a bit</p>",
        "id": 134089697,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1537175939
    },
    {
        "content": "<p>Lol, I knew that <span class=\"emoji emoji-1f44d\" title=\"thumbs up\">:thumbs_up:</span> was coming...</p>",
        "id": 134089761,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537176016
    },
    {
        "content": "<p>hehe</p>",
        "id": 134089764,
        "sender_full_name": "Johannes HÃ¶lzl",
        "timestamp": 1537176020
    },
    {
        "content": "<p>Scott, did we understand correctly what you learned in Dagstuhl?</p>",
        "id": 134089767,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537176025
    }
]