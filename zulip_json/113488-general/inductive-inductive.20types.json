[
    {
        "content": "<p>Hi everyone. Sorry in advance for the vague question. I'm trying to define what I understand to be an example of an inductive-inductive type in lean (see e.g. <a href=\"https://ncatlab.org/nlab/show/inductive-inductive+type\">https://ncatlab.org/nlab/show/inductive-inductive+type</a> ). </p>\n<p>In my specific case, I'm trying to define a type <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span> and a relation on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span>, say <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>r</mi><mo>:</mo><mi>A</mi><mo>→</mo><mi>A</mi><mo>→</mo><mi>P</mi><mi>r</mi><mi>o</mi><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">r : A \\to A \\to Prop</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mord mathnormal\">ro</span><span class=\"mord mathnormal\">p</span></span></span></span>, with both <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>r</mi></mrow><annotation encoding=\"application/x-tex\">r</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span></span></span></span> defined inductively, while using <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>r</mi></mrow><annotation encoding=\"application/x-tex\">r</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span></span></span></span> in the definition of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span>.</p>\n<p>I tried coming up with some minimized pseudocode (replacing a relation with a predicate for simplicity), and here is an example along the same lines for what I actually want to accomplish.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">mutual</span> <span class=\"kd\">inductive</span> <span class=\"n\">foo</span><span class=\"o\">,</span> <span class=\"n\">bar</span>\n<span class=\"k\">with</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">foo</span>\n<span class=\"bp\">|</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">bar</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">foo</span>\n<span class=\"k\">with</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">bar</span> <span class=\"n\">foo.a</span>\n</code></pre></div>\n<p>I don't see any simple way to simulate this using a single inductive definition. Does anyone have any ideas?</p>",
        "id": 257945449,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1634501876
    },
    {
        "content": "<p>It's not easy, but there are methods which will work in general. I believe that these methods do <em>not</em> give you definitional computation rules, if that is something you care about.<br>\nThe idea in general is to first forget about the indexing that <code>bar</code> has, and then define a predicate that specifies the well-formed expressions of <code>foo</code> and the well-formed expressions of <code>bar x</code>.<br>\nIn this case, the encoding would look something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">mutual</span> <span class=\"kd\">inductive</span> <span class=\"n\">foo'</span><span class=\"o\">,</span> <span class=\"n\">bar'</span>\n<span class=\"k\">with</span> <span class=\"n\">foo'</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">foo'</span>\n<span class=\"bp\">|</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">foo'</span> <span class=\"bp\">→</span> <span class=\"n\">bar'</span> <span class=\"bp\">→</span> <span class=\"n\">foo'</span>\n<span class=\"k\">with</span> <span class=\"n\">bar'</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">bar'</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">foo'</span> <span class=\"n\">bar'</span>\n\n<span class=\"kd\">mutual</span> <span class=\"kd\">inductive</span> <span class=\"n\">good_foo</span><span class=\"o\">,</span> <span class=\"n\">good_bar</span>\n<span class=\"c1\">-- `good_foo x` means that `x` is well-formed</span>\n<span class=\"k\">with</span> <span class=\"n\">good_foo</span> <span class=\"o\">:</span> <span class=\"n\">foo'</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">a_good</span> <span class=\"o\">:</span> <span class=\"n\">good_foo</span> <span class=\"n\">a</span>\n<span class=\"bp\">|</span> <span class=\"n\">b_good</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">foo'</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">bar'</span><span class=\"o\">},</span> <span class=\"n\">good_foo</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">good_bar</span> <span class=\"n\">y</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">good_foo</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n<span class=\"c1\">-- `good_bar y x` means that `y` is well-formed with index `x`</span>\n<span class=\"k\">with</span> <span class=\"n\">good_bar</span> <span class=\"o\">:</span> <span class=\"n\">bar'</span> <span class=\"bp\">→</span> <span class=\"n\">foo'</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">c_good</span> <span class=\"o\">:</span> <span class=\"n\">good_bar</span> <span class=\"n\">c</span> <span class=\"n\">a</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">foo'</span> <span class=\"bp\">//</span> <span class=\"n\">good_foo</span> <span class=\"n\">x</span> <span class=\"o\">}</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_coe</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">foo'</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">subtype.val</span><span class=\"o\">⟩</span>\n<span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">foo</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">bar'</span> <span class=\"bp\">//</span> <span class=\"n\">good_bar</span> <span class=\"n\">y</span> <span class=\"n\">x</span> <span class=\"o\">}</span>\n\n<span class=\"c1\">-- now we have to define/prove constructors, recursors and computation rules</span>\n</code></pre></div>",
        "id": 257948965,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1634505086
    },
    {
        "content": "<p>For more information, see for example Fredrik Nordvall Forsberg's PhD thesis  (<a href=\"https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.704.8246&amp;rep=rep1&amp;type=pdf\">link</a>) section 5.3 (which might be in a different type theory with equality reflection, I'm not sure)</p>",
        "id": 257949238,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1634505340
    },
    {
        "content": "<p>Thanks Floris. I'll need some time to digest this (which means that it will have to happen later). I'll probably have some more questions later</p>",
        "id": 257950446,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1634506382
    },
    {
        "content": "<p>I thought it was a good exercise for myself, so here are the constructors, one way of formulating the recursor and the computation rules.<br>\nI made two changes:</p>\n<ul>\n<li>I used the standard encoding of mutual inductives into an indexed inductive, because I don't know how to induct on a mutual inductive in tactic mode</li>\n<li>I had to make the type of <code>good</code> a <code>Type</code> instead of a <code>Prop</code>, in order to make the recursor work for <code>Sort u</code>.</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.basic</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">foo_bar</span> <span class=\"o\">:</span> <span class=\"n\">bool</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">foo_bar</span> <span class=\"n\">tt</span>\n<span class=\"bp\">|</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">foo_bar</span> <span class=\"n\">tt</span> <span class=\"bp\">→</span> <span class=\"n\">foo_bar</span> <span class=\"n\">ff</span> <span class=\"bp\">→</span> <span class=\"n\">foo_bar</span> <span class=\"n\">tt</span>\n<span class=\"bp\">|</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">foo_bar</span> <span class=\"n\">ff</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">sum</span>\n<span class=\"kn\">section</span>\n<span class=\"kn\">open</span> <span class=\"n\">foo_bar</span>\n\n<span class=\"c1\">-- `good (inl x)` means that `x` is well-formed</span>\n<span class=\"c1\">-- `good (inr (y, x))` means that `y` is well-formed with index `x`</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">good</span> <span class=\"o\">:</span> <span class=\"n\">foo_bar</span> <span class=\"n\">tt</span> <span class=\"bp\">⊕</span> <span class=\"o\">(</span><span class=\"n\">foo_bar</span> <span class=\"n\">ff</span> <span class=\"bp\">×</span> <span class=\"n\">foo_bar</span> <span class=\"n\">tt</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">good</span> <span class=\"o\">(</span><span class=\"n\">inl</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">foo_bar</span> <span class=\"n\">tt</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">foo_bar</span> <span class=\"n\">ff</span><span class=\"o\">},</span> <span class=\"n\">good</span> <span class=\"o\">(</span><span class=\"n\">inl</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">good</span> <span class=\"o\">(</span><span class=\"n\">inr</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">good</span> <span class=\"o\">(</span><span class=\"n\">inl</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">))</span>\n<span class=\"bp\">|</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">good</span> <span class=\"o\">(</span><span class=\"n\">inr</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">))</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">! Type formation -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"bp\">Σ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">foo_bar</span> <span class=\"n\">tt</span><span class=\"o\">,</span> <span class=\"n\">good</span> <span class=\"o\">(</span><span class=\"n\">inl</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"kd\">instance</span> <span class=\"n\">foo.has_coe</span> <span class=\"o\">:</span> <span class=\"n\">has_coe</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">foo_bar</span> <span class=\"n\">tt</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">sigma.fst</span><span class=\"o\">⟩</span>\n<span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">foo</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"bp\">Σ</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">foo_bar</span> <span class=\"n\">ff</span><span class=\"o\">,</span> <span class=\"n\">good</span> <span class=\"o\">(</span><span class=\"n\">inr</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n<span class=\"kd\">instance</span> <span class=\"n\">bar.has_coe</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">foo</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">has_coe</span> <span class=\"o\">(</span><span class=\"n\">bar</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">foo_bar</span> <span class=\"n\">ff</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">sigma.fst</span><span class=\"o\">⟩</span>\n<span class=\"kd\">end</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">! Constructors -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">foo.a</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">foo_bar.a</span><span class=\"o\">,</span> <span class=\"n\">good.a</span><span class=\"o\">⟩</span>\n<span class=\"kd\">def</span> <span class=\"n\">foo.b</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">foo</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">bar</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">foo_bar.b</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">good.b</span> <span class=\"n\">x.2</span> <span class=\"n\">y.2</span><span class=\"o\">⟩</span>\n<span class=\"kd\">def</span> <span class=\"n\">bar.c</span> <span class=\"o\">:</span> <span class=\"n\">bar</span> <span class=\"n\">foo.a</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">foo_bar.c</span><span class=\"o\">,</span> <span class=\"n\">good.c</span><span class=\"o\">⟩</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">! Auxilliary definitions for the recursor -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">data</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">b</span><span class=\"o\">},</span> <span class=\"n\">foo_bar</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">tt</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">good</span> <span class=\"o\">(</span><span class=\"n\">inl</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">ff</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"bp\">Σ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">foo</span><span class=\"o\">,</span> <span class=\"n\">good</span> <span class=\"o\">(</span><span class=\"n\">inr</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">foo_bar</span> <span class=\"n\">b</span><span class=\"o\">},</span> <span class=\"n\">data</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">foo</span> <span class=\"bp\">⊕</span> <span class=\"bp\">Σ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">bar</span> <span class=\"n\">x</span>\n<span class=\"bp\">|</span> <span class=\"n\">tt</span> <span class=\"n\">x</span> <span class=\"n\">hx</span> <span class=\"o\">:=</span> <span class=\"n\">inl</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">⟩</span>\n<span class=\"bp\">|</span> <span class=\"n\">ff</span> <span class=\"n\">y</span> <span class=\"n\">hy</span> <span class=\"o\">:=</span> <span class=\"n\">inr</span> <span class=\"o\">⟨</span><span class=\"n\">hy.1</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">hy.2</span><span class=\"o\">⟩⟩</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">! One way to formulate the recursor -/</span>\n<span class=\"kd\">universe</span> <span class=\"kd\">variable</span> <span class=\"n\">u</span>\n<span class=\"kd\">def</span> <span class=\"n\">rec</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"bp\">⊕</span> <span class=\"bp\">Σ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">bar</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">inl</span> <span class=\"n\">foo.a</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">bar</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">inl</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">inr</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">⟩)</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">inl</span> <span class=\"bp\">$</span> <span class=\"n\">foo.b</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">inr</span> <span class=\"o\">⟨</span><span class=\"n\">foo.a</span><span class=\"o\">,</span> <span class=\"n\">bar.c</span><span class=\"o\">⟩))</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">foo_bar</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">data</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"n\">hx</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"o\">(⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">⟩</span><span class=\"bp\">|</span><span class=\"o\">⟨⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"o\">⟩⟩),</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">this</span> <span class=\"n\">tt</span> <span class=\"n\">x</span> <span class=\"n\">hx</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">this</span> <span class=\"n\">ff</span> <span class=\"n\">y</span> <span class=\"o\">⟨⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">⟩,</span> <span class=\"n\">hy</span><span class=\"o\">⟩</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"n\">intros</span> <span class=\"n\">b</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">x</span> <span class=\"k\">with</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">ihx</span> <span class=\"n\">ihy</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">ha</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">hx</span> <span class=\"k\">with</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">hx</span> <span class=\"n\">hy</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">hb</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"o\">⟩</span> <span class=\"o\">(</span><span class=\"n\">ihx</span> <span class=\"n\">hx</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ihy</span> <span class=\"o\">⟨⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">⟩,</span> <span class=\"n\">hy</span><span class=\"o\">⟩)</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rcases</span> <span class=\"n\">hx</span> <span class=\"k\">with</span> <span class=\"o\">⟨⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">⟨⟩⟩,⟨⟩⟩,</span> <span class=\"n\">exact</span> <span class=\"n\">hc</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">! Computation rules -/</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">rec_a</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"bp\">⊕</span> <span class=\"bp\">Σ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">bar</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">inl</span> <span class=\"n\">foo.a</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">bar</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">inl</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">inr</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">⟩)</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">inl</span> <span class=\"bp\">$</span> <span class=\"n\">foo.b</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">inr</span> <span class=\"o\">⟨</span><span class=\"n\">foo.a</span><span class=\"o\">,</span> <span class=\"n\">bar.c</span><span class=\"o\">⟩))</span> <span class=\"o\">:</span> <span class=\"n\">rec</span> <span class=\"n\">ha</span> <span class=\"n\">hb</span> <span class=\"n\">hc</span> <span class=\"o\">(</span><span class=\"n\">inl</span> <span class=\"n\">foo.a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">ha</span> <span class=\"o\">:=</span>\n<span class=\"n\">rfl</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">rec_b</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"bp\">⊕</span> <span class=\"bp\">Σ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">bar</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">inl</span> <span class=\"n\">foo.a</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">bar</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">inl</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">inr</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">⟩)</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">inl</span> <span class=\"bp\">$</span> <span class=\"n\">foo.b</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">inr</span> <span class=\"o\">⟨</span><span class=\"n\">foo.a</span><span class=\"o\">,</span> <span class=\"n\">bar.c</span><span class=\"o\">⟩))</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">foo</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">bar</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">rec</span> <span class=\"n\">ha</span> <span class=\"n\">hb</span> <span class=\"n\">hc</span> <span class=\"o\">(</span><span class=\"n\">inl</span> <span class=\"o\">(</span><span class=\"n\">foo.b</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">hb</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">(</span><span class=\"n\">rec</span> <span class=\"n\">ha</span> <span class=\"n\">hb</span> <span class=\"n\">hc</span> <span class=\"o\">(</span><span class=\"n\">inl</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">rec</span> <span class=\"n\">ha</span> <span class=\"n\">hb</span> <span class=\"n\">hc</span> <span class=\"o\">(</span><span class=\"n\">inr</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">⟩))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">x</span> <span class=\"k\">with</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">y</span> <span class=\"k\">with</span> <span class=\"n\">y</span> <span class=\"n\">hy</span><span class=\"o\">,</span> <span class=\"n\">refl</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">rec_c</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"bp\">⊕</span> <span class=\"bp\">Σ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">bar</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">inl</span> <span class=\"n\">foo.a</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">bar</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">inl</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">inr</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">⟩)</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">inl</span> <span class=\"bp\">$</span> <span class=\"n\">foo.b</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">inr</span> <span class=\"o\">⟨</span><span class=\"n\">foo.a</span><span class=\"o\">,</span> <span class=\"n\">bar.c</span><span class=\"o\">⟩))</span> <span class=\"o\">:</span> <span class=\"n\">rec</span> <span class=\"n\">ha</span> <span class=\"n\">hb</span> <span class=\"n\">hc</span> <span class=\"o\">(</span><span class=\"n\">inr</span> <span class=\"o\">⟨</span><span class=\"n\">foo.a</span><span class=\"o\">,</span> <span class=\"n\">bar.c</span><span class=\"o\">⟩)</span> <span class=\"bp\">=</span> <span class=\"n\">hc</span> <span class=\"o\">:=</span>\n<span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 257953252,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1634509118
    }
]