[
    {
        "content": "<p>Are the rules for how <code>variables</code> are implicitly introduced mentioned anywhere? (If they aren't, does anyone know where this is in the source code?)</p>\n<p>Example: suppose we have</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">class</span> <span class=\"n\">magic_data</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">dummy</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">magic_data</span> <span class=\"n\">k</span><span class=\"o\">]</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">blah</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"bp\">.....</span>\n</pre></div>\n\n\n<p>Then <code>k</code> and the <code>magic_data k</code> instance will both be available inside <code>blah</code>, in particular the instance comes along for the ride. But if I give <code>magic_data k</code> a name in the <code>variables</code> declaration by writing <code>[h : magic_data k]</code> instead, then the instance wont come along for the ride.</p>\n<p>What if <code>magic_data</code> depended on two <code>nat</code>s <code>k</code> and <code>m</code>, but <code>k</code> was only mentioned in a declaration? (Then presumably the other variable <code>m</code> and the instance are not introduced?) Is this the extent of the complexity possible?</p>\n<p>I got a bit more than I bargained with when making <code>#simp</code> work with <code>variables</code> declarations, and I need to know the normal behavior so I can emulate it.</p>",
        "id": 194915683,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1587554005
    },
    {
        "content": "<p>If this is all I need to deal with than I have half a machine to figure this out so far, but I just want to know how many more cases are left. :)</p>",
        "id": 194915773,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1587554085
    },
    {
        "content": "<p>My implementation in lean of something which is meant to do this is now here: <a href=\"https://github.com/leanprover-community/mathlib/pull/2478/files#diff-e7095d9e0d82ddacf3794d17daf86844R586\" title=\"https://github.com/leanprover-community/mathlib/pull/2478/files#diff-e7095d9e0d82ddacf3794d17daf86844R586\">https://github.com/leanprover-community/mathlib/pull/2478/files#diff-e7095d9e0d82ddacf3794d17daf86844R586</a></p>",
        "id": 194966671,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1587577324
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110111\">Keeley Hoek</span> <a href=\"#narrow/stream/113488-general/topic/.60variables.60.20introduction.20rules/near/194915683\" title=\"#narrow/stream/113488-general/topic/.60variables.60.20introduction.20rules/near/194915683\">said</a>:</p>\n<blockquote>\n<p>(If they aren't, does anyone know where this is in the source code?)</p>\n</blockquote>\n<p>fwiw, it's at <a href=\"https://github.com/kha/lean/blob/master/src/frontends/lean/decl_util.cpp#L256\" title=\"https://github.com/kha/lean/blob/master/src/frontends/lean/decl_util.cpp#L256\">https://github.com/kha/lean/blob/master/src/frontends/lean/decl_util.cpp#L256</a></p>",
        "id": 194992423,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1587590183
    }
]