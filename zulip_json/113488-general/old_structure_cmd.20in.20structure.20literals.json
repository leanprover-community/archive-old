[
    {
        "content": "<p>Here's a strange discovery:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">order</span><span class=\"bp\">.</span><span class=\"n\">complete_lattice</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">lattice</span>\n<span class=\"kn\">set_option</span> <span class=\"n\">old_structure_cmd</span> <span class=\"n\">false</span>\n\n<span class=\"n\">def</span> <span class=\"n\">complete_lattice</span><span class=\"bp\">.</span><span class=\"n\">copy</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">complete_lattice</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">le</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">eq_le</span> <span class=\"o\">:</span> <span class=\"n\">le</span> <span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">complete_lattice</span><span class=\"bp\">.</span><span class=\"n\">le</span> <span class=\"n\">α</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">top</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">eq_top</span> <span class=\"o\">:</span> <span class=\"n\">top</span> <span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">complete_lattice</span><span class=\"bp\">.</span><span class=\"n\">top</span> <span class=\"n\">α</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">bot</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">eq_bot</span> <span class=\"o\">:</span> <span class=\"n\">bot</span> <span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">complete_lattice</span><span class=\"bp\">.</span><span class=\"n\">bot</span> <span class=\"n\">α</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">sup</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">eq_sup</span> <span class=\"o\">:</span> <span class=\"n\">sup</span> <span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">complete_lattice</span><span class=\"bp\">.</span><span class=\"n\">sup</span> <span class=\"n\">α</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">inf</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">eq_inf</span> <span class=\"o\">:</span> <span class=\"n\">inf</span> <span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">complete_lattice</span><span class=\"bp\">.</span><span class=\"n\">inf</span> <span class=\"n\">α</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">Sup</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">eq_Sup</span> <span class=\"o\">:</span> <span class=\"n\">Sup</span> <span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">complete_lattice</span><span class=\"bp\">.</span><span class=\"n\">Sup</span> <span class=\"n\">α</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">Inf</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">eq_Inf</span> <span class=\"o\">:</span> <span class=\"n\">Inf</span> <span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">complete_lattice</span><span class=\"bp\">.</span><span class=\"n\">Inf</span> <span class=\"n\">α</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">complete_lattice</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"o\">{</span> <span class=\"n\">le</span> <span class=\"o\">:=</span> <span class=\"n\">le</span><span class=\"o\">,</span> <span class=\"n\">top</span> <span class=\"o\">:=</span> <span class=\"n\">top</span><span class=\"o\">,</span> <span class=\"n\">bot</span> <span class=\"o\">:=</span> <span class=\"n\">bot</span><span class=\"o\">,</span> <span class=\"n\">sup</span> <span class=\"o\">:=</span> <span class=\"n\">sup</span><span class=\"o\">,</span> <span class=\"n\">inf</span> <span class=\"o\">:=</span> <span class=\"n\">inf</span><span class=\"o\">,</span> <span class=\"n\">Sup</span> <span class=\"o\">:=</span> <span class=\"n\">Sup</span><span class=\"o\">,</span> <span class=\"n\">Inf</span> <span class=\"o\">:=</span> <span class=\"n\">Inf</span><span class=\"o\">,</span> <span class=\"bp\">..</span><span class=\"o\">}</span><span class=\"bp\">;</span>\n    <span class=\"n\">subst_vars</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"bp\">@</span><span class=\"n\">complete_lattice</span><span class=\"bp\">.</span><span class=\"n\">le_refl</span> <span class=\"n\">α</span> <span class=\"n\">c</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"bp\">@</span><span class=\"n\">complete_lattice</span><span class=\"bp\">.</span><span class=\"n\">le_trans</span> <span class=\"n\">α</span> <span class=\"n\">c</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"bp\">@</span><span class=\"n\">complete_lattice</span><span class=\"bp\">.</span><span class=\"n\">le_antisymm</span> <span class=\"n\">α</span> <span class=\"n\">c</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"bp\">@</span><span class=\"n\">complete_lattice</span><span class=\"bp\">.</span><span class=\"n\">le_sup_left</span> <span class=\"n\">α</span> <span class=\"n\">c</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"bp\">@</span><span class=\"n\">complete_lattice</span><span class=\"bp\">.</span><span class=\"n\">le_sup_right</span> <span class=\"n\">α</span> <span class=\"n\">c</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"bp\">@</span><span class=\"n\">complete_lattice</span><span class=\"bp\">.</span><span class=\"n\">sup_le</span> <span class=\"n\">α</span> <span class=\"n\">c</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"bp\">@</span><span class=\"n\">complete_lattice</span><span class=\"bp\">.</span><span class=\"n\">inf_le_left</span> <span class=\"n\">α</span> <span class=\"n\">c</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"bp\">@</span><span class=\"n\">complete_lattice</span><span class=\"bp\">.</span><span class=\"n\">inf_le_right</span> <span class=\"n\">α</span> <span class=\"n\">c</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"bp\">@</span><span class=\"n\">complete_lattice</span><span class=\"bp\">.</span><span class=\"n\">le_inf</span> <span class=\"n\">α</span> <span class=\"n\">c</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"bp\">@</span><span class=\"n\">complete_lattice</span><span class=\"bp\">.</span><span class=\"n\">le_top</span> <span class=\"n\">α</span> <span class=\"n\">c</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"bp\">@</span><span class=\"n\">complete_lattice</span><span class=\"bp\">.</span><span class=\"n\">bot_le</span> <span class=\"n\">α</span> <span class=\"n\">c</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"bp\">@</span><span class=\"n\">complete_lattice</span><span class=\"bp\">.</span><span class=\"n\">le_Sup</span> <span class=\"n\">α</span> <span class=\"n\">c</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"bp\">@</span><span class=\"n\">complete_lattice</span><span class=\"bp\">.</span><span class=\"n\">Sup_le</span> <span class=\"n\">α</span> <span class=\"n\">c</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"bp\">@</span><span class=\"n\">complete_lattice</span><span class=\"bp\">.</span><span class=\"n\">Inf_le</span> <span class=\"n\">α</span> <span class=\"n\">c</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"bp\">@</span><span class=\"n\">complete_lattice</span><span class=\"bp\">.</span><span class=\"n\">le_Inf</span> <span class=\"n\">α</span> <span class=\"n\">c</span>\n<span class=\"kn\">end</span>\n<span class=\"kn\">end</span> <span class=\"n\">lattice</span>\n</pre></div>\n\n\n<p>If you put <code>set_option old_structure_cmd true</code> instead, this proof times out</p>",
        "id": 146821394,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541449426
    },
    {
        "content": "<p>this despite the fact that there are no structures being declared</p>",
        "id": 146821466,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541449482
    },
    {
        "content": "<p>uff, luckily I didn't run into this. Does the <code>{ f := _, .. _}</code> notation depend on <code>old_structure_cmd</code>?</p>",
        "id": 146826135,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1541453979
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean/blob/687745d887ebd89da94ba36d853eff12746af136/src/frontends/lean/elaborator.cpp#L2854\" target=\"_blank\" title=\"https://github.com/leanprover/lean/blob/687745d887ebd89da94ba36d853eff12746af136/src/frontends/lean/elaborator.cpp#L2854\">It does</a>. Maybe it shouldn't.</p>",
        "id": 146851518,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1541491843
    },
    {
        "content": "<p>The structure instance notation is pretty complex and fragile in Lean 3. I'm really not sure what we should do with it in Lean 4.</p>",
        "id": 146851533,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1541491884
    }
]