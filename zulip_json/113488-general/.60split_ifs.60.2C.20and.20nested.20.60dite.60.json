[
    {
        "content": "<p>I'm having trouble with a proof involving nested, dependent if-then-else statements. Unfortunately <code>split_ifs</code> isn't working (and I can't even do it by hand). Has anyone experienced this?</p>\n<div class=\"codehilite\"><pre><span></span>import data.fin\n\ndef hom (n m : ℕ) := fin n → fin m\ndef map {n m : ℕ} (f : hom n m) : hom (n+1) (m+1) := λ i, if h : i.val &lt; n then (f (i.cast_lt h)).cast_succ else fin.last _\nlemma map_comp {l m n : ℕ} (f : hom l m) (g : hom m n) : map (g ∘ f) = (map g) ∘ (map f) :=\nbegin\n  ext,\n  dsimp [map],\n  split_ifs,\n  split_ifs, -- succeeds, but does nothing\nend\n</pre></div>",
        "id": 167580416,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1559917071
    },
    {
        "content": "<p>Yeah that is surprising.</p>",
        "id": 167593063,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1559926228
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">fin</span>\n\n<span class=\"n\">def</span> <span class=\"n\">hom</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">fin</span> <span class=\"n\">m</span>\n<span class=\"n\">def</span> <span class=\"n\">map</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">hom</span> <span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">hom</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"k\">then</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"n\">cast_lt</span> <span class=\"n\">h</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">cast_succ</span> <span class=\"k\">else</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">last</span> <span class=\"bp\">_</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">map_comp</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">hom</span> <span class=\"n\">l</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">hom</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"err\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"err\">∘</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">ext</span><span class=\"o\">,</span>\n  <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">map</span><span class=\"o\">],</span>\n  <span class=\"n\">split_ifs</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">split_ifs</span><span class=\"o\">,</span>\n    <span class=\"n\">by_cases</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">dite</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">&lt;</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">&lt;</span> <span class=\"n\">l</span><span class=\"o\">),</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">cast_succ</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">cast_lt</span> <span class=\"n\">x</span> <span class=\"n\">h</span><span class=\"o\">)))</span>\n            <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">&lt;</span> <span class=\"n\">l</span><span class=\"o\">),</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">last</span> <span class=\"n\">m</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">&lt;</span>\n         <span class=\"n\">m</span><span class=\"o\">),</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">rw</span> <span class=\"n\">dif_pos</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n      <span class=\"n\">sorry</span>\n    <span class=\"o\">},</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">rw</span> <span class=\"n\">dif_neg</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n      <span class=\"n\">sorry</span>\n    <span class=\"o\">}</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">sorry</span>\n  <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>That's a way to proceed if you just want to get on.</p>",
        "id": 167593316,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1559926460
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>    <span class=\"o\">{</span>\n      <span class=\"n\">rw</span> <span class=\"n\">dif_pos</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">dif_pos</span> <span class=\"n\">h</span> <span class=\"n\">at</span> <span class=\"n\">h2</span><span class=\"o\">,</span> <span class=\"c1\">-- now have two h2&#39;s but never mind; dites have gone</span>\n      <span class=\"n\">sorry</span>\n    <span class=\"o\">},</span>\n</pre></div>",
        "id": 167593432,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1559926572
    }
]