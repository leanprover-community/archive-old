[
    {
        "content": "<p>I noticed something when descending proofs from a function on an object to a function on a quotient object. In short: I have v : R -&gt; X satisfying some axioms, and it is constant on cosets of J so it descends to a function vbar: R/J -&gt; X. I now need to prove that vbar satisfies the axioms which v satisfies, and in each case the proof is \"this follows immediately\". But look at my proofs:</p>\n<div class=\"codehilite\"><pre><span></span>  <span class=\"n\">map_zero</span> <span class=\"o\">:=</span> <span class=\"n\">map_zero</span> <span class=\"n\">v</span><span class=\"o\">,</span>\n  <span class=\"n\">map_one</span> <span class=\"o\">:=</span> <span class=\"n\">map_one</span> <span class=\"n\">v</span><span class=\"o\">,</span>\n  <span class=\"n\">map_mul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">induction_on₂&#39;</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"err\">$</span>\n    <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"c1\">-- my goal does not even mention x and y</span>\n    <span class=\"n\">map_mul</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n</pre></div>\n\n\n<p>The function <code>map_mul</code> wants two elements x and y of R/J and then a proof that <code>vbar(x*y)=vbar(x)*vbar(y)</code>. I eat x and y and then apply one of these standard <code>quotient.induction_on₂'</code> functions which instantly wants <code>x</code> and <code>y</code> as input, plus a proof that for all a,b in R, <code>v(a*b)=v(a)*v(b)</code>. My goal does not even mention <code>x</code> and <code>y</code>, they have already been used. </p>\n<p>So I defined a new <code>quotient.induction_on₂''</code> which asks for the proof first (it is simply re-ordering the inputs):</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">definition</span> <span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">induction_on₂&#39;&#39;</span> <span class=\"o\">:</span>\n<span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s₁</span> <span class=\"o\">:</span> <span class=\"n\">setoid</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s₂</span> <span class=\"o\">:</span> <span class=\"n\">setoid</span> <span class=\"n\">β</span><span class=\"o\">}</span>\n<span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">quotient</span> <span class=\"n\">s₁</span> <span class=\"bp\">→</span> <span class=\"n\">quotient</span> <span class=\"n\">s₂</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n<span class=\"c1\">-- this first</span>\n<span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a₁</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a₂</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">mk&#39;</span> <span class=\"n\">a₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">mk&#39;</span> <span class=\"n\">a₂</span><span class=\"o\">))</span>\n<span class=\"c1\">-- then these</span>\n<span class=\"o\">(</span><span class=\"n\">q₁</span> <span class=\"o\">:</span> <span class=\"n\">quotient</span> <span class=\"n\">s₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">q₂</span> <span class=\"o\">:</span> <span class=\"n\">quotient</span> <span class=\"n\">s₂</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"n\">q₁</span> <span class=\"n\">q₂</span>\n<span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">s₁</span> <span class=\"n\">s₂</span> <span class=\"n\">p</span> <span class=\"n\">h</span> <span class=\"n\">q₁</span> <span class=\"n\">q₂</span><span class=\"o\">,</span> <span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">induction_on₂&#39;</span> <span class=\"n\">q₁</span> <span class=\"n\">q₂</span> <span class=\"n\">h</span>\n</pre></div>\n\n\n<p>and now for <code>map_add</code> I could just write</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">map_add</span> <span class=\"o\">:=</span> <span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">induction_on₂&#39;&#39;</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">map_add</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>People here are smart and they must have realised this before. Is my <code>quotient.induction_on₂''</code> function already in Lean or mathlib?</p>",
        "id": 157700137,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549468397
    },
    {
        "content": "<p>Hmm, does <code>_on</code> mean \"I am going to ask for the variables first\", like <code>rec_on</code>?</p>",
        "id": 157700838,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549468914
    },
    {
        "content": "<blockquote>\n<p>Hmm, does <code>_on</code> mean \"I am going to ask for the variables first\", like <code>rec_on</code>?</p>\n</blockquote>\n<p>Yes, usually. Without looking at the details, is <code>quotient.ind₂</code> what you want?</p>",
        "id": 157701025,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1549469036
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> Did you trying using more <code>rintro</code> magic as I told you?</p>",
        "id": 157702693,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1549470231
    },
    {
        "content": "<p>as in </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">ideals</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"bp\">.</span><span class=\"n\">quotient</span><span class=\"o\">,</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rintro</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">trivial</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>look at tactic state after the first line</p>",
        "id": 157702751,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1549470249
    },
    {
        "content": "<p>I am not even in tactic mode; I want to say \"this is trivial\" as quickly as possible.</p>",
        "id": 157703197,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549470582
    },
    {
        "content": "<p>I wasn't in front of Lean when the penny dropped about <code>_on</code> but now I am, and I think that the <code>'</code> also has a meaning -- <code>'</code> means \"use <a href=\"http://quotient.mk\" target=\"_blank\" title=\"http://quotient.mk\">quotient.mk</a>' not <a href=\"http://quotient.mk\" target=\"_blank\" title=\"http://quotient.mk\">quotient.mk</a>\". I am only just getting to the bottom of things. Maybe I want <code>quotient.ind₂'</code>? Is that the name of this function? It doesn't appear to be there.</p>",
        "id": 157703342,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549470691
    },
    {
        "content": "<p>So apparently <code>quotient.mk</code> means \"infer the equivalence relation using type class inference\" and  <code>quotient.mk'</code> means \"infer it using unification\"</p>",
        "id": 157703512,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549470830
    },
    {
        "content": "<p>In my situation I have a quotient of a ring by an ideal, and rings have lots of ideals, so I guess I will not be using type class inference. This seems to put me in the <code>'</code> world. So currently my belief is that the function I want should be called <code>quotient.ind₂'</code>.</p>",
        "id": 157703633,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549470906
    },
    {
        "content": "<p>And I can't find this. Have I got this straight? My conclusion is that I should write a short PR adding <code>quotient.ind'</code> and <code>quotient.ind₂'</code> and maybe a 3 variable version, to <code>data/quot.lean</code>.</p>",
        "id": 157704054,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549471220
    },
    {
        "content": "<p><code>quotient.induction_on'</code> and <code>quotient.induction_on₂'</code></p>",
        "id": 157706433,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1549472915
    },
    {
        "content": "<p>The variables are in the wrong order for me with <code>_on</code></p>",
        "id": 157706902,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549473206
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">@</span><span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">ind&#39;</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">quotient.ind&#39; :</span>\n<span class=\"cm\">  ∀ {α : Sort u_5} {s₁ : setoid α} {p : quotient s₁ → Prop},</span>\n<span class=\"cm\">    (∀ (a : α), p (quotient.mk&#39; a)) → ∀ (q : quotient s₁), p q</span>\n<span class=\"cm\">    -/</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">@</span><span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">induction_on&#39;</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">quotient.induction_on&#39; :</span>\n<span class=\"cm\">  ∀ {α : Sort u_5} {s₁ : setoid α} {p : quotient s₁ → Prop} (q : quotient s₁),</span>\n<span class=\"cm\">    (∀ (a : α), p (quotient.mk&#39; a)) → p q</span>\n<span class=\"cm\">    -/</span>\n</pre></div>\n\n\n<p>I want the hypothesis before the quotient variables. I hope I've understood the rules for naming these functions correctly.</p>",
        "id": 157707076,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549473308
    }
]