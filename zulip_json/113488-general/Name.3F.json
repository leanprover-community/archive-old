[
    {
        "content": "<p>What is the correct name for the typeclass \"all sets are measurable\"?</p>",
        "id": 214695987,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603804031
    },
    {
        "content": "<p>Discrete?</p>",
        "id": 214698797,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1603805443
    },
    {
        "content": "<p>There's a model of ZF where AC fails and all subsets of the reals are measurable, and the reals aren't discrete :-/</p>",
        "id": 214705922,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1603808611
    },
    {
        "content": "<p><code>vitali_averse</code></p>",
        "id": 214706039,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603808658
    },
    {
        "content": "<p>In the presence of AC is this equivalent to discrete? Does the counting measure on the rationals with its usual topology have the property that every subset is measurable?</p>",
        "id": 214706110,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1603808690
    },
    {
        "content": "<p>For a measurable space, this is just <code>M = \\top</code>. There are lots of non-top measurable spaces, like borel sets</p>",
        "id": 214706323,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603808779
    },
    {
        "content": "<p>if you want a <em>measure</em> space, then there are again lots of examples where the measure is trivial in some sense, like the counting measure</p>",
        "id": 214706414,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603808824
    },
    {
        "content": "<p>every subset of the reals with counting measure is measurable</p>",
        "id": 214706482,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603808851
    },
    {
        "content": "<p>Vitali's theorem says that lebesgue measure is not defined on <code>\\top</code></p>",
        "id": 214706739,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603808959
    },
    {
        "content": "<p>and it applies more generally to nontrivial translation-invariant measures on the reals</p>",
        "id": 214707035,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603809077
    },
    {
        "content": "<p>Yes, I'm looking for a name for the typeclass <code>_inst_1 = \\top</code></p>",
        "id": 214707645,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603809299
    },
    {
        "content": "<p>Like we have a name for \"topology = \\bot\"</p>",
        "id": 214707760,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603809346
    },
    {
        "content": "<p>I don't see the problem with a name involving \"discrete\" in some way. E.g. the discrete <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>σ</mi></mrow><annotation encoding=\"application/x-tex\">\\sigma</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">σ</span></span></span></span>-algebra is a name for the largest <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>σ</mi></mrow><annotation encoding=\"application/x-tex\">\\sigma</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">σ</span></span></span></span>-algebra (at least according to wikipedia: <a href=\"https://en.wikipedia.org/wiki/%CE%A3-algebra#Particular_cases_and_examples\">https://en.wikipedia.org/wiki/%CE%A3-algebra#Particular_cases_and_examples</a> )</p>",
        "id": 214708940,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1603809818
    },
    {
        "content": "<p>OK, thanks</p>",
        "id": 214709099,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603809873
    },
    {
        "content": "<p>How would you call this operation?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">new_op</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"o\">[]</span>\n<span class=\"bp\">|</span> <span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">]</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">b</span> <span class=\"o\">::</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">::</span> <span class=\"n\">new_op</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">::</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 230604560,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1615934004
    },
    {
        "content": "<p><code>cum_scanl</code>?</p>",
        "id": 230604715,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1615934081
    },
    {
        "content": "<p>It's not <code>scanl</code>. It's a combination of <code>zip</code>/<code>map₂</code> and <a href=\"https://hackage.haskell.org/package/deriving-compat-0.5.10/docs/Data-Deriving-Internal.html#v:interleave\">interleave</a></p>",
        "id": 230605212,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1615934371
    },
    {
        "content": "<p>(not exactly because I leave the last element of the original list)</p>",
        "id": 230605237,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1615934386
    },
    {
        "content": "<p>isn't it like a modified <code>scanl (zip l l.tail)</code>?</p>",
        "id": 230605348,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1615934444
    },
    {
        "content": "<p><code>scanl f a [b, c]</code> produces <code>[a, f a b, f (f a b) c]</code></p>",
        "id": 230605565,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1615934580
    },
    {
        "content": "<p>E.g., <code>scanl (+) 0 [1, 2, 3] = [0, 1, 3, 6]</code></p>",
        "id": 230605566,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1615934581
    },
    {
        "content": "<p>My operation works as <code>new_op (+) [a, b, c] = [a, a + b, b, b + c, c]</code></p>",
        "id": 230605579,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1615934590
    },
    {
        "content": "<p>How about <a href=\"https://hackage.haskell.org/package/base-4.14.1.0/docs/Data-List.html#v:intersperse\"><code>intersperse</code></a><code>_map</code> or <code>intersperse_zip</code>?</p>",
        "id": 230656402,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1615970839
    },
    {
        "content": "<p>Do we have a definition that sends <code>foo (+) [a, b, c, d]</code> to <code>[a + b, b + c, c + d]</code>?</p>",
        "id": 230657037,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615971249
    },
    {
        "content": "<p><code>foo o l = zipWith o l l.tail</code> should do this</p>",
        "id": 230683608,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1615985215
    }
]