[
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/mathlib/issues/4810\">#4810</a>, I add a convenience lemma</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">subtype.ext_iff_heq</span> <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">a1</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">}}</span> <span class=\"o\">{</span><span class=\"n\">a2</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">}}</span> <span class=\"o\">:</span>\n  <span class=\"n\">a1</span> <span class=\"bp\">==</span> <span class=\"n\">a2</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">a1</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a2</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">subst</span> <span class=\"n\">h'</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">heq_iff_eq.trans</span> <span class=\"n\">ext_iff</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n\n<p>However, I found later that using it was more convenient if it is stated as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">subtype.ext_iff_heq</span> <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">↔</span> <span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">a1</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">}}</span> <span class=\"o\">{</span><span class=\"n\">a2</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">}}</span> <span class=\"o\">:</span>\n  <span class=\"n\">a1</span> <span class=\"bp\">==</span> <span class=\"n\">a2</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">a1</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a2</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"n\">funext</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">propext</span> <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"n\">x</span><span class=\"o\">)),</span>\n  <span class=\"n\">subst</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">heq_iff_eq.trans</span> <span class=\"n\">subtype.ext_iff</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n\n<p>Which spelling of <code>h'</code> is more \"simp-normal\"?</p>",
        "id": 214968381,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1603979423
    },
    {
        "content": "<p>I would prefer the second one, but the theorem itself looks dubious</p>",
        "id": 214981591,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603984827
    },
    {
        "content": "<p>I think that in general people try very hard to avoid <code>==</code>. Why do you need it?</p>",
        "id": 214984347,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1603985812
    },
    {
        "content": "<p>It falls out naturally from equating <code>dfinsupp</code>s</p>",
        "id": 214984844,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1603985972
    },
    {
        "content": "<p>If I'm working with a direct sum of submodules (as I do in <a href=\"https://github.com/leanprover-community/mathlib/issues/4812\">#4812</a>), then I can end up with proving <code>dfinsupp.single  a1 &lt;b1,  _&gt; = dfinsupp.single (a1 + 0)  &lt;b2,  _&gt;</code>. With that lemma, I can just do <code>congr, have := zero_add a1, rw this, rw subtype.ext_iff_heq, ...</code></p>",
        "id": 214985204,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1603986092
    },
    {
        "content": "<p>Can't you start with <code>ext</code>?</p>",
        "id": 214985286,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603986121
    },
    {
        "content": "<p>Wait, what's the pair <code>&lt;b1, _&gt;</code>?</p>",
        "id": 214985374,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603986141
    },
    {
        "content": "<p>Oh, submodules.</p>",
        "id": 214985403,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603986152
    },
    {
        "content": "<p>It's me not typing the right brackets in zulip</p>",
        "id": 214985410,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1603986154
    },
    {
        "content": "<p><code>ext</code> makes things worse than <code>congr</code> - it means I end up with <code>dite</code>s that after calling <code>congr</code> on give me more <code>==</code> or <code>eq.rec</code>s, neither of which I want</p>",
        "id": 215075003,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1604052492
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/.60p.20.3D.20q.60.20or.20.60.E2.88.80.20x.2C.20p.20x.20.E2.86.94.20q.20x.60/near/214984347\">said</a>:</p>\n<blockquote>\n<p>I think that in general people try very hard to avoid <code>==</code>.</p>\n</blockquote>\n<p>Surely then any lemma that makes a <code>==</code> go away is a good thing?</p>",
        "id": 215075043,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1604052517
    },
    {
        "content": "<p>If <code>==</code> never arises then you don't have to make it go away</p>",
        "id": 215079833,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604055665
    },
    {
        "content": "<p><code>congr</code> is a tactic that will give you heq goals if you aren't careful. Use <code>congr' n</code> where <code>n</code> is chosen low enough that no heq goals come up</p>",
        "id": 215079966,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604055756
    }
]