[
    {
        "content": "<p>I am proving the following lemma</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory.adjoin.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">]</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">algebra</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"n\">adjoin</span> <span class=\"n\">A</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">}))</span> <span class=\"o\">:</span>  <span class=\"n\">b</span> <span class=\"bp\">∈</span>\n  <span class=\"n\">adjoin</span> <span class=\"n\">A</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"n\">adjoin</span> <span class=\"n\">A</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">})</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">b</span> <span class=\"k\">with</span> <span class=\"n\">b</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"n\">adjoin_induction</span> <span class=\"n\">hb</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">b₁</span> <span class=\"n\">hb₁</span><span class=\"o\">,</span> <span class=\"n\">subset_adjoin</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">hx</span> <span class=\"n\">hy</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n    <span class=\"o\">((</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">hx</span> <span class=\"n\">hy</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">)),</span>\n  <span class=\"o\">{</span> <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">hn</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hb₁</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">subalgebra.coe_eq_one</span><span class=\"o\">,</span> <span class=\"n\">subalgebra.coe_pow</span><span class=\"o\">],</span>\n    <span class=\"n\">convert</span> <span class=\"n\">hn</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">convert</span> <span class=\"n\">subalgebra.algebra_map_mem</span> <span class=\"n\">_</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">subtype.ext</span><span class=\"o\">,</span>\n    <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">subalgebra.coe_algebra_map</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">convert</span> <span class=\"n\">subalgebra.add_mem</span> <span class=\"n\">_</span> <span class=\"n\">hx</span> <span class=\"n\">hy</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">subtype.ext</span><span class=\"o\">,</span>\n    <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">subalgebra.coe_add</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">convert</span> <span class=\"n\">subalgebra.mul_mem</span> <span class=\"n\">_</span> <span class=\"n\">hx</span> <span class=\"n\">hy</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">subtype.ext</span><span class=\"o\">,</span>\n    <span class=\"c1\">--the goal is ↑⟨x * y, hb⟩ = ↑(⟨x, hb⟩ * ⟨y, hb⟩), that can be proved by simpa only [subalgebra.coe_mul]</span>\n    <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>The infoview shows me the last goal normally, but if I prove it, I get the error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"o\">⟨</span><span class=\"n\">_x</span><span class=\"o\">,</span> <span class=\"n\">hb</span><span class=\"o\">⟩</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">hb</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">adjoin</span> <span class=\"n\">A</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">}</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">adjoin</span> <span class=\"n\">A</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">})</span> <span class=\"n\">_x</span>\n</code></pre></div>\n<p>The infoview says the error is happening in line 7, that is the line with the statement (that was fine before the last goal was proved). Note that the same happens with any of the four goals produced by <code>adjoin_induction</code>: when I prove the last one I get the error. The same happens if I put <code>sorry</code> as proof of all the goals.</p>\n<p>I've never seen such a behavior, so I don't really know what to do.</p>\n<p>I agree that the statement of the lemma is weird, so let me add some context before people say \"replace <code>b : ↥(adjoin A {b : B | ∃ (n : ℕ), b ^ n = 1})</code> in the statement with <code>(b : B) (hb : b ∈ (adjoin A {b : B | ∃ (n : ℕ), b ^ n = 1}))</code>\". What I really want to prove is that if <code>B</code> is the cyclotomic extension of <code>A</code> given by roots of unity of order <code>T : set ℕ+</code> and <code>S ⊆ T</code>, then <code>adjoin A { b : B | ∃ a : ℕ+, a ∈ S ∧ b ^ (a : ℕ) = 1 }</code> is a cyclotomic extension of <code>A</code> given by roots of order <code>S</code>, so <a href=\"https://github.com/leanprover-community/flt-regular/blob/3001f96dcaf0aa1231cea1d151976ccdc3dbce82/src/number_theory/cyclotomic/basic.lean#L112\">this</a> is the real proof that doesn't work.</p>",
        "id": 262303699,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1637578270
    },
    {
        "content": "<p>Yeah I've never seen that before. I wondered whether you had too many b's (i.e. you weren't proving what you thought you were proving, or something?) but I've changed a few and the error remains.</p>",
        "id": 262304213,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1637578578
    },
    {
        "content": "<p>Maybe you've found a bug in a tactic?</p>",
        "id": 262304431,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1637578725
    },
    {
        "content": "<p>This is typically the result of a buggy tactic.  See for example <a href=\"https://github.com/leanprover-community/mathlib/issues/9805\">https://github.com/leanprover-community/mathlib/issues/9805</a> for another interesting example.  What happens is that the tactic produces a buggy proof term and Lean only notices this at the end when the kernel goes over the proof again.</p>",
        "id": 262304626,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1637578831
    },
    {
        "content": "<p>Thank's. Using <code>@adjoin_induction...</code> the proof doesn't work anymore, so maybe I can just fix it. Let me see.</p>",
        "id": 262305011,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1637579133
    },
    {
        "content": "<p>I think the problem comes from <code>adjoin_induction</code>: the initial goal, after <code>cases b with b hb</code>, is <code>⟨b, hb⟩ ∈ ...</code> and so it's not exactly a goal about <code>b</code>. I don't know which <code>p : B → Prop</code> Lean decides to use in <code>adjoin_induction</code> (since there is no <code>hb</code> for a general <code>b : B</code>) but the bug (if there is one) is just the fact that it doesn't say immediately that there is a problem.</p>",
        "id": 262305757,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1637579674
    },
    {
        "content": "<p>Here's a more minimised example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory.adjoin.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">]</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">algebra</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"n\">adjoin</span> <span class=\"n\">A</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">}))</span> <span class=\"o\">:</span>  <span class=\"n\">b</span> <span class=\"bp\">∈</span>\n  <span class=\"n\">adjoin</span> <span class=\"n\">A</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"n\">adjoin</span> <span class=\"n\">A</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">})</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">b</span> <span class=\"k\">with</span> <span class=\"n\">b</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"n\">adjoin_induction</span> <span class=\"n\">hb</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">b₁</span> <span class=\"n\">hb₁</span><span class=\"o\">,</span> <span class=\"n\">subset_adjoin</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">hx</span> <span class=\"n\">hy</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n    <span class=\"o\">((</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">hx</span> <span class=\"n\">hy</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">)),</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 262307393,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1637580836
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"n\">adjoin</span> <span class=\"n\">A</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">}))</span> <span class=\"o\">:</span>  <span class=\"n\">b</span> <span class=\"bp\">∈</span>\n  <span class=\"n\">adjoin</span> <span class=\"n\">A</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"n\">adjoin</span> <span class=\"n\">A</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">})</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">b</span> <span class=\"k\">with</span> <span class=\"n\">b</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">adjoin_induction</span> <span class=\"n\">hb</span> <span class=\"gr\">sorry</span> <span class=\"gr\">sorry</span> <span class=\"gr\">sorry</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 262308228,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1637581443
    },
    {
        "content": "<p>Dunno if this helps. <span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> is this the proof you expect to work? I tried to rephrase it (changing the lean but not the maths) and I broke a <code>convert</code>.  The goal doesn't look true :-/</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"n\">adjoin</span> <span class=\"n\">A</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">}))</span> <span class=\"o\">:</span>  <span class=\"n\">b</span> <span class=\"bp\">∈</span>\n  <span class=\"n\">adjoin</span> <span class=\"n\">A</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"n\">adjoin</span> <span class=\"n\">A</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">})</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">b</span> <span class=\"k\">with</span> <span class=\"n\">b</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"o\">(⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">hb</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"n\">adjoin</span> <span class=\"n\">A</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">})),</span>\n  <span class=\"n\">convert</span> <span class=\"o\">(</span><span class=\"n\">adjoin_induction</span> <span class=\"n\">hb</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">b₁</span> <span class=\"n\">hb₁</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">hx</span> <span class=\"n\">hy</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">hx</span> <span class=\"n\">hy</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n    <span class=\"n\">foo</span> <span class=\"bp\">∈</span> <span class=\"n\">adjoin</span> <span class=\"n\">A</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"n\">adjoin</span> <span class=\"n\">A</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">})</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">}),</span>\n  <span class=\"o\">{</span> <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">hn</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hb₁</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"n\">subset_adjoin</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">subalgebra.coe_eq_one</span><span class=\"o\">,</span> <span class=\"n\">subalgebra.coe_pow</span><span class=\"o\">],</span>\n    <span class=\"n\">convert</span> <span class=\"n\">hn</span><span class=\"o\">,</span> <span class=\"c1\">-- this closes the goal in the original proof</span>\n    <span class=\"gr\">sorry</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"gr\">sorry</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"gr\">sorry</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"gr\">sorry</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 262308669,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1637581802
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"n\">adjoin</span> <span class=\"n\">A</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">}))</span> <span class=\"o\">:</span>  <span class=\"n\">b</span> <span class=\"bp\">∈</span>\n  <span class=\"n\">adjoin</span> <span class=\"n\">A</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"n\">adjoin</span> <span class=\"n\">A</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">})</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"c1\">--cases b with b hb,</span>\n  <span class=\"n\">refine</span> <span class=\"n\">adjoin_induction</span> <span class=\"n\">b.2</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">b₁</span> <span class=\"n\">hb₁</span><span class=\"o\">,</span> <span class=\"n\">subset_adjoin</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">hx</span> <span class=\"n\">hy</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n    <span class=\"o\">((</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">hx</span> <span class=\"n\">hy</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">)),</span>\n  <span class=\"o\">{</span> <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">hn</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hb₁</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">subalgebra.coe_eq_one</span><span class=\"o\">,</span> <span class=\"n\">subalgebra.coe_pow</span><span class=\"o\">],</span>\n    <span class=\"n\">convert</span> <span class=\"n\">hn</span><span class=\"o\">,</span> <span class=\"c1\">-- no longer works</span>\n    <span class=\"gr\">sorry</span> <span class=\"o\">},</span>\n<span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 262308894,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1637582023
    },
    {
        "content": "<p>If you don't do the <code>cases</code> but just use <code>b.1</code> and <code>b.2</code>, the proof breaks earlier. Is there a mathematical problem with the proof?</p>",
        "id": 262308991,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1637582053
    },
    {
        "content": "<p>I now think that <code>adjoin_induction</code> is not the right strategy to prove the result, at least not directly: after <code>cases</code> we have <code>b: B</code> and <code>hb : b ∈ adjoin A {b : B | ∃ (n : ℕ), b ^ n = 1}</code> and the goal concerns both <code>b</code> and <code>hb</code>. Now, <code>adjoin_induction</code> acts on <code>b</code>, but keep the original <code>hb</code>, so it doesn't work.</p>",
        "id": 262309209,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1637582256
    },
    {
        "content": "<p>I am not sure what is the best solution: find a different proof or make <code>adjoin_induction</code> act on <code>hb</code> too somehow.</p>",
        "id": 262309234,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1637582281
    },
    {
        "content": "<p>What does the b on the RHS of the condition in the set builder in the starting goal refer to? I don't mean mathematically, but to Lean? The mwe might be clearer if there are more variable names and fewer possible name shadowing.</p>",
        "id": 262309432,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1637582408
    },
    {
        "content": "<p>Voilà.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory.adjoin.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">]</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">algebra</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"n\">adjoin</span> <span class=\"n\">A</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">β</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">}))</span> <span class=\"o\">:</span>  <span class=\"n\">b</span> <span class=\"bp\">∈</span>\n  <span class=\"n\">adjoin</span> <span class=\"n\">A</span> <span class=\"o\">{</span><span class=\"n\">β₁</span> <span class=\"o\">:</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"n\">adjoin</span> <span class=\"n\">A</span> <span class=\"o\">{</span><span class=\"n\">β₂</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">β₂</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">})</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">β₁</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">b</span> <span class=\"k\">with</span> <span class=\"n\">b</span> <span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"c1\">--goal is ⟨b, hb⟩ ∈ adjoin A {β₁ : ↥(adjoin A {β₂ : B | ∃ (n : ℕ), β₂ ^ n = 1}) | ∃ (n : ℕ), β₁ ^ n = 1}</span>\n  <span class=\"n\">exact</span> <span class=\"n\">adjoin_induction</span> <span class=\"n\">hb</span> <span class=\"gr\">sorry</span> <span class=\"gr\">sorry</span> <span class=\"gr\">sorry</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 262309541,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1637582460
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/algebra.adjoin_induction\">docs#algebra.adjoin_induction</a></p>",
        "id": 262309605,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1637582509
    },
    {
        "content": "<p>When I was looking at this I wondered if maybe we should prove that <code>adjoin</code> is \"idempotent\" i.e. <code>adjoin (adjoin A S)  S = adjoin A  S</code> , but this isn't true as written  as the algebra structures get messed up. But it felt like something like this is what we want.  That said, this is probably just as annoying to prove</p>",
        "id": 262310044,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1637582778
    },
    {
        "content": "<p>One issue is that the induction is proving something solely about b (inferring from hb) but the goal is about a subtype whose value is b. Do you have lemmas that simplify or change goals that are about being mem of adjoin of a subtype?</p>",
        "id": 262310467,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1637583112
    },
    {
        "content": "<p>I am looking for them since 30 minutes. Is the following true?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.set.basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ht</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">∈</span> <span class=\"n\">T</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hti</span> <span class=\"o\">:</span> <span class=\"bp\">↑</span><span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">hi</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">T</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 262310547,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1637583150
    },
    {
        "content": "<p>I don't even care about <code>adjoin</code> (at least, not now), I don't know how to work with members of set of a subtype.</p>",
        "id": 262310646,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1637583236
    },
    {
        "content": "<p><code>rw [← hti],</code> says <code>rewrite tactic failed, motive is not type correct λ (_a : ι), ⟨i, hi⟩ ∈ T = (⟨_a, hi⟩ ∈ T)</code>. That usually means I am missing something.</p>",
        "id": 262310804,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1637583334
    },
    {
        "content": "<p>Mmm, <code>simp [← hti, ht],</code> proves it.</p>",
        "id": 262310910,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1637583397
    },
    {
        "content": "<p>The point is that in the following</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">t</span> <span class=\"bp\">∈</span> <span class=\"n\">T</span><span class=\"o\">,</span> <span class=\"bp\">↑</span><span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">hi</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">T</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">ht</span><span class=\"o\">,</span> <span class=\"n\">hti</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">hti</span><span class=\"o\">,</span> <span class=\"n\">ht</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>in <code>H</code> there is no mention of <code>hi</code>, so it can (maybe) proved using <code>adjoin_induction</code>. I am trying.</p>",
        "id": 262311355,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1637583756
    },
    {
        "content": "<p>Indeed no errors in</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"n\">adjoin</span> <span class=\"n\">A</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">β</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">}))</span> <span class=\"o\">:</span>  <span class=\"n\">b</span> <span class=\"bp\">∈</span>\n  <span class=\"n\">adjoin</span> <span class=\"n\">A</span> <span class=\"o\">{</span><span class=\"n\">β₁</span> <span class=\"o\">:</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"n\">adjoin</span> <span class=\"n\">A</span> <span class=\"o\">{</span><span class=\"n\">β₂</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">β₂</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">})</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">β₁</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">b</span> <span class=\"k\">with</span> <span class=\"n\">b</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n  <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">adjoin</span> <span class=\"n\">A</span> <span class=\"o\">{</span><span class=\"n\">β₁</span> <span class=\"o\">:</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"n\">adjoin</span> <span class=\"n\">A</span> <span class=\"o\">{</span><span class=\"n\">β₂</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">β₂</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">})</span> <span class=\"bp\">|</span>\n    <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">β₁</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">},</span> <span class=\"bp\">↑</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">hxb</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">hxb</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"n\">exact</span> <span class=\"n\">adjoin_induction</span> <span class=\"n\">hb</span> <span class=\"gr\">sorry</span> <span class=\"gr\">sorry</span> <span class=\"gr\">sorry</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>But still four <code>sorry</code> :)</p>",
        "id": 262311419,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1637583810
    },
    {
        "content": "<p>Oh nice! This feels like progress. With your earlier question, <code>⟨i, hi⟩</code> and <code>t</code> are equal because all proofs of a proposition are defeq. This works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ht</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">∈</span> <span class=\"n\">T</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hti</span> <span class=\"o\">:</span> <span class=\"bp\">↑</span><span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">hi</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">T</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n  <span class=\"n\">convert</span> <span class=\"n\">ht</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hti.symm</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 262311634,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1637583940
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/subtype.eq\">docs#subtype.eq</a></p>",
        "id": 262311731,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1637583998
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ht</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">∈</span> <span class=\"n\">T</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hti</span> <span class=\"o\">:</span> <span class=\"bp\">↑</span><span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">hi</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">T</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n  <span class=\"n\">subst</span> <span class=\"n\">hti</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">ht</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p><code>subst</code> is a really cool tactic.</p>",
        "id": 262311822,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1637584074
    },
    {
        "content": "<p>This works</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory.adjoin.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">]</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">algebra</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"n\">adjoin</span> <span class=\"n\">A</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">β</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">}))</span> <span class=\"o\">:</span>  <span class=\"n\">b</span> <span class=\"bp\">∈</span>\n  <span class=\"n\">adjoin</span> <span class=\"n\">A</span> <span class=\"o\">{</span><span class=\"n\">β₁</span> <span class=\"o\">:</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"n\">adjoin</span> <span class=\"n\">A</span> <span class=\"o\">{</span><span class=\"n\">β₂</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">β₂</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">})</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">β₁</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">b</span> <span class=\"k\">with</span> <span class=\"n\">b</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n  <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">adjoin</span> <span class=\"n\">A</span> <span class=\"o\">{</span><span class=\"n\">β₁</span> <span class=\"o\">:</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"n\">adjoin</span> <span class=\"n\">A</span> <span class=\"o\">{</span><span class=\"n\">β₂</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">β₂</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">})</span> <span class=\"bp\">|</span>\n    <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">β₁</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">},</span> <span class=\"bp\">↑</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">hxb</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">hxb</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"n\">refine</span> <span class=\"n\">adjoin_induction</span> <span class=\"n\">hb</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">b₁</span> <span class=\"n\">hb₁</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">b₁</span> <span class=\"n\">b₂</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">b₁</span> <span class=\"n\">b₂</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">hb₁</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hb₁</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"o\">⟨⟨</span><span class=\"n\">b₁</span><span class=\"o\">,</span> <span class=\"n\">subset_adjoin</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">hb₁</span><span class=\"o\">⟩⟩,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">exists_prop</span><span class=\"o\">,</span> <span class=\"n\">and_true</span><span class=\"o\">,</span> <span class=\"n\">eq_self_iff_true</span><span class=\"o\">,</span> <span class=\"n\">subtype.coe_mk</span><span class=\"o\">],</span>\n    <span class=\"n\">refine</span> <span class=\"n\">subset_adjoin</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">subalgebra.coe_eq_one</span><span class=\"o\">,</span> <span class=\"n\">subalgebra.coe_pow</span><span class=\"o\">],</span>\n    <span class=\"n\">convert</span> <span class=\"n\">hb₁</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"o\">⟨⟨</span><span class=\"n\">algebra_map</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">subalgebra.algebra_map_mem</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">exists_prop</span><span class=\"o\">,</span> <span class=\"n\">set_like.coe_mk</span><span class=\"o\">,</span> <span class=\"n\">and_true</span><span class=\"o\">,</span> <span class=\"n\">eq_self_iff_true</span><span class=\"o\">],</span>\n    <span class=\"n\">convert</span> <span class=\"n\">subalgebra.algebra_map_mem</span> <span class=\"n\">_</span> <span class=\"n\">a</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">and_imp</span><span class=\"o\">,</span> <span class=\"n\">exists_prop</span><span class=\"o\">,</span> <span class=\"n\">forall_exists_index</span><span class=\"o\">],</span>\n    <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">hxmem</span> <span class=\"n\">hxb</span> <span class=\"n\">y</span> <span class=\"n\">hymem</span> <span class=\"n\">hyb</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"o\">⟨⟨</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">subalgebra.add_mem</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)⟩,</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩⟩,</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">subalgebra.coe_add</span><span class=\"o\">],</span>\n      <span class=\"n\">exact</span> <span class=\"n\">subalgebra.add_mem</span> <span class=\"n\">_</span> <span class=\"n\">hxmem</span> <span class=\"n\">hymem</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">hxb</span><span class=\"o\">,</span> <span class=\"n\">hyb</span><span class=\"o\">],</span>\n      <span class=\"n\">refl</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">and_imp</span><span class=\"o\">,</span> <span class=\"n\">exists_prop</span><span class=\"o\">,</span> <span class=\"n\">forall_exists_index</span><span class=\"o\">],</span>\n    <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">hxmem</span> <span class=\"n\">hxb</span> <span class=\"n\">y</span> <span class=\"n\">hymem</span> <span class=\"n\">hyb</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"o\">⟨⟨</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">subalgebra.mul_mem</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)⟩,</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩⟩,</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">subalgebra.coe_mul</span><span class=\"o\">],</span>\n      <span class=\"n\">exact</span> <span class=\"n\">subalgebra.mul_mem</span> <span class=\"n\">_</span> <span class=\"n\">hxmem</span> <span class=\"n\">hymem</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">hxb</span><span class=\"o\">,</span> <span class=\"n\">hyb</span><span class=\"o\">],</span>\n      <span class=\"n\">refl</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 262314769,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1637585855
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"389019\">@Chris Birkbeck</span> if you find a reasonable way to state that <code>adjoin</code> is idempotent I think that a similar proof should work too.</p>",
        "id": 262314899,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1637585914
    },
    {
        "content": "<p>Yeah let me think about how to state it properly.</p>",
        "id": 262314959,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1637585955
    },
    {
        "content": "<p>But I agree that it is a pain</p>",
        "id": 262315126,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1637586014
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory.adjoin.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">A</span><span class=\"o\">}</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">algebra</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">adjoin</span> <span class=\"o\">(</span><span class=\"n\">adjoin</span> <span class=\"n\">A</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"n\">S</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">adjoin</span> <span class=\"n\">A</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"n\">adjoin_induction</span> <span class=\"n\">hx</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">y</span> <span class=\"n\">hy</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">subalgebra.algebra_map_mem</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">hr</span><span class=\"o\">⟩,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">subalgebra.algebra_map_mem</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">subalgebra.add_mem</span> <span class=\"n\">_</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">subalgebra.mul_mem</span> <span class=\"n\">_</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"n\">adjoin_induction</span> <span class=\"n\">hx</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">y</span> <span class=\"n\">hy</span><span class=\"o\">,</span>\n      <span class=\"k\">let</span> <span class=\"n\">y'</span> <span class=\"o\">:</span> <span class=\"n\">adjoin</span> <span class=\"n\">A</span> <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">subalgebra.algebra_map_mem</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">subalgebra.algebra_map_mem</span> <span class=\"n\">_</span> <span class=\"n\">y'</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">r</span><span class=\"o\">,</span>\n      <span class=\"k\">let</span> <span class=\"n\">r'</span> <span class=\"o\">:</span> <span class=\"n\">adjoin</span> <span class=\"n\">A</span> <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">subalgebra.algebra_map_mem</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">subalgebra.algebra_map_mem</span> <span class=\"n\">_</span> <span class=\"n\">r'</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">subalgebra.add_mem</span> <span class=\"n\">_</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">subalgebra.mul_mem</span> <span class=\"n\">_</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 262324813,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1637591006
    },
    {
        "content": "<p>If I understood the desiratum correctly</p>",
        "id": 262324853,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1637591030
    },
    {
        "content": "<p>Ah, it needs to be:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">B</span><span class=\"o\">}</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">algebra</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">adjoin_idem</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">adjoin</span> <span class=\"o\">(</span><span class=\"n\">adjoin</span> <span class=\"n\">A</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"n\">S</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">adjoin</span> <span class=\"n\">A</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 262325425,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1637591284
    },
    {
        "content": "<p>Right?</p>",
        "id": 262325500,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1637591314
    },
    {
        "content": "<p>Ah yes that would work! I was trying to figure out how to state it as an equality of subalgebras, but element-wise would be enough</p>",
        "id": 262326487,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1637591716
    },
    {
        "content": "<p>Here is a proof (I cheated and used some <code>tidy</code>'s as you'll see):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">B</span><span class=\"o\">}</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">algebra</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">adjoin_idem</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">adjoin</span> <span class=\"o\">(</span><span class=\"n\">adjoin</span> <span class=\"n\">A</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"n\">S</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">adjoin</span> <span class=\"n\">A</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"n\">adjoin_induction</span> <span class=\"n\">hx</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">y</span> <span class=\"n\">hy</span><span class=\"o\">,</span>\n      <span class=\"n\">intros</span> <span class=\"n\">t</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">induction</span> <span class=\"n\">H_h</span><span class=\"o\">,</span> <span class=\"n\">intros</span> <span class=\"n\">t_1</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">induction</span> <span class=\"n\">H_h</span><span class=\"o\">,</span> <span class=\"n\">dsimp</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">H_w_1</span><span class=\"o\">,</span> <span class=\"n\">solve_by_elim</span><span class=\"o\">,},</span>\n    <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">hr</span><span class=\"o\">⟩,</span>\n      <span class=\"n\">assumption</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">subalgebra.add_mem</span> <span class=\"n\">_</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">subalgebra.mul_mem</span> <span class=\"n\">_</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"n\">adjoin_induction</span> <span class=\"n\">hx</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">y</span> <span class=\"n\">hy</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span> <span class=\"n\">t</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">induction</span> <span class=\"n\">H_h</span><span class=\"o\">,</span> <span class=\"n\">intros</span> <span class=\"n\">t_1</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">induction</span> <span class=\"n\">H_h</span><span class=\"o\">,</span> <span class=\"n\">dsimp</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">H_w_1</span><span class=\"o\">,</span> <span class=\"n\">solve_by_elim</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">r</span><span class=\"o\">,</span>\n     <span class=\"k\">let</span> <span class=\"n\">r'</span> <span class=\"o\">:=</span> <span class=\"n\">algebra_map</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">adjoin</span> <span class=\"n\">A</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">r</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">subalgebra.algebra_map_mem</span> <span class=\"n\">_</span> <span class=\"n\">r'</span><span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">subalgebra.add_mem</span> <span class=\"n\">_</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">subalgebra.mul_mem</span> <span class=\"n\">_</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 262330640,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1637593525
    },
    {
        "content": "<p>Ah actually maybe this isn't enough (at least no immediately), since its not the same S in both cases for this goal.</p>",
        "id": 262333594,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1637594820
    },
    {
        "content": "<p>Something like this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">adjoin_idem'</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">adjoin</span> <span class=\"n\">A</span> <span class=\"n\">S</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">adjoin</span> <span class=\"n\">A</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">adjoin</span> <span class=\"n\">A</span> <span class=\"n\">S</span> <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">}</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">adjoin</span> <span class=\"n\">A</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 262333636,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1637594839
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">adjoin_idem'</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">adjoin</span> <span class=\"n\">A</span> <span class=\"n\">S</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">adjoin</span> <span class=\"n\">A</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">adjoin</span> <span class=\"n\">A</span> <span class=\"n\">S</span> <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">}</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">adjoin</span> <span class=\"n\">A</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"n\">adjoin_induction</span> <span class=\"n\">hx</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"n\">y</span> <span class=\"n\">hy</span> <span class=\"n\">_</span> <span class=\"o\">⟨</span><span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n      <span class=\"n\">rintro</span> <span class=\"n\">_</span> <span class=\"o\">⟨</span><span class=\"n\">hR</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">set.union_subset_iff</span><span class=\"o\">,</span> <span class=\"n\">set.mem_set_of_eq</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hR</span><span class=\"o\">,</span>\n      <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">hR.right</span> <span class=\"n\">hy</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"gr\">sorry</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">subalgebra.add_mem</span> <span class=\"n\">_</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">subalgebra.mul_mem</span> <span class=\"n\">_</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"n\">adjoin_induction</span> <span class=\"n\">hx</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"n\">y</span> <span class=\"n\">hy</span> <span class=\"n\">_</span> <span class=\"o\">⟨</span><span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n      <span class=\"n\">rintro</span> <span class=\"n\">_</span> <span class=\"o\">⟨</span><span class=\"n\">hR</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">set.union_subset_iff</span><span class=\"o\">,</span> <span class=\"n\">set.mem_set_of_eq</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hR</span><span class=\"o\">,</span>\n      <span class=\"gr\">sorry</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">r</span><span class=\"o\">,</span>\n      <span class=\"gr\">sorry</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n      <span class=\"n\">simp</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n      <span class=\"n\">simp</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"n\">adjoin</span> <span class=\"n\">A</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">β</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">}))</span> <span class=\"o\">:</span>  <span class=\"n\">b</span> <span class=\"bp\">∈</span>\n  <span class=\"n\">adjoin</span> <span class=\"n\">A</span> <span class=\"o\">{</span><span class=\"n\">β₁</span> <span class=\"o\">:</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"n\">adjoin</span> <span class=\"n\">A</span> <span class=\"o\">{</span><span class=\"n\">β₂</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">β₂</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">})</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">β₁</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">convert</span> <span class=\"n\">adjoin_idem'.mpr</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">subtype.ext_iff</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">b.prop</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 262333868,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1637594921
    },
    {
        "content": "<p>If you want to play with the real life theorem, it is <a href=\"https://github.com/leanprover-community/flt-regular/blob/c813f0fdc091c844a2e88520c108831984e0b5e4/src/number_theory/cyclotomic/basic.lean#L125\">here</a>.</p>",
        "id": 262334479,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1637595139
    },
    {
        "content": "<p>It is sorry free, but it can surely be golfed.</p>",
        "id": 262334503,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1637595149
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> <a href=\"#narrow/stream/113488-general/topic/An.20error.20that.20appears.20after.20the.20last.20goal.20is.20proved/near/262333868\">said</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">adjoin_idem'</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">adjoin</span> <span class=\"n\">A</span> <span class=\"n\">S</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">adjoin</span> <span class=\"n\">A</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">adjoin</span> <span class=\"n\">A</span> <span class=\"n\">S</span> <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">}</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">adjoin</span> <span class=\"n\">A</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"n\">adjoin_induction</span> <span class=\"n\">hx</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"n\">y</span> <span class=\"n\">hy</span> <span class=\"n\">_</span> <span class=\"o\">⟨</span><span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n      <span class=\"n\">rintro</span> <span class=\"n\">_</span> <span class=\"o\">⟨</span><span class=\"n\">hR</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">set.union_subset_iff</span><span class=\"o\">,</span> <span class=\"n\">set.mem_set_of_eq</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hR</span><span class=\"o\">,</span>\n      <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">hR.right</span> <span class=\"n\">hy</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"gr\">sorry</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">subalgebra.add_mem</span> <span class=\"n\">_</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">subalgebra.mul_mem</span> <span class=\"n\">_</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"n\">adjoin_induction</span> <span class=\"n\">hx</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"n\">y</span> <span class=\"n\">hy</span> <span class=\"n\">_</span> <span class=\"o\">⟨</span><span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n      <span class=\"n\">rintro</span> <span class=\"n\">_</span> <span class=\"o\">⟨</span><span class=\"n\">hR</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">set.union_subset_iff</span><span class=\"o\">,</span> <span class=\"n\">set.mem_set_of_eq</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hR</span><span class=\"o\">,</span>\n      <span class=\"gr\">sorry</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">r</span><span class=\"o\">,</span>\n      <span class=\"gr\">sorry</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n      <span class=\"n\">simp</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n      <span class=\"n\">simp</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"n\">adjoin</span> <span class=\"n\">A</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">β</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">}))</span> <span class=\"o\">:</span>  <span class=\"n\">b</span> <span class=\"bp\">∈</span>\n  <span class=\"n\">adjoin</span> <span class=\"n\">A</span> <span class=\"o\">{</span><span class=\"n\">β₁</span> <span class=\"o\">:</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"n\">adjoin</span> <span class=\"n\">A</span> <span class=\"o\">{</span><span class=\"n\">β₂</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">β₂</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">})</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">β₁</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">convert</span> <span class=\"n\">adjoin_idem'.mpr</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">subtype.ext_iff</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">b.prop</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Ok this works, so I just need to make it sorry-free...</p>",
        "id": 262347721,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1637600559
    },
    {
        "content": "<p>Isn't this all some Galois insertion thing? (According to the docstring, <code>adjoin A S</code> is the smallest <code>A</code>-algebra containing <code>S</code>, so an <code>A</code>-algebra contains <code>adjoin A S</code> iff it contains <code>S</code> and therefore <code>adjoin A (adjoin A S) = adjoin A S</code>)<br>\nIf you want to prove it manually, seems a better strategy is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/algebra.adjoin_le_iff\">docs#algebra.adjoin_le_iff</a> not induction</p>",
        "id": 262348817,
        "sender_full_name": "Reid Barton",
        "timestamp": 1637601063
    },
    {
        "content": "<p>The issue is that <code>adjoin (adjoin A S)  S= adjoin A S</code> isnt quite true as the algebra structures dont match. One is an <code>A</code>-algebra while the other is an <code>adjoin A S</code>-algebra.</p>",
        "id": 262349090,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1637601172
    },
    {
        "content": "<p>Ah but maybe what you wrote is different to what I'm thinking of.</p>",
        "id": 262349394,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1637601307
    },
    {
        "content": "<p>Aha I didn't notice you were talking about a different thing</p>",
        "id": 262349578,
        "sender_full_name": "Reid Barton",
        "timestamp": 1637601383
    },
    {
        "content": "<p>Hm  yeah, but can't figure out if what you're suggesting would work.</p>",
        "id": 262349746,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1637601468
    },
    {
        "content": "<p>Maybe it does and I'm just being slow</p>",
        "id": 262349777,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1637601481
    },
    {
        "content": "<p>The original question only contains things of the form <code>adjoin A _</code></p>",
        "id": 262349907,
        "sender_full_name": "Reid Barton",
        "timestamp": 1637601536
    },
    {
        "content": "<p>Good point! let me see if this works</p>",
        "id": 262350121,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1637601634
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/113488-general/topic/An.20error.20that.20appears.20after.20the.20last.20goal.20is.20proved/near/262334479\">said</a>:</p>\n<blockquote>\n<p>If you want to play with the real life theorem, it is <a href=\"https://github.com/leanprover-community/flt-regular/blob/c813f0fdc091c844a2e88520c108831984e0b5e4/src/number_theory/cyclotomic/basic.lean#L125\">here</a>.</p>\n</blockquote>\n<p>Ok so I got the other version working. But its more like I anti-golfed it (at least its a bit more general now).</p>",
        "id": 262368188,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1637610164
    },
    {
        "content": "<p>Is it possible you're after an induction principle like the primed <a href=\"https://leanprover-community.github.io/mathlib_docs/find/submonoid.closure_induction'\">docs#submonoid.closure_induction'</a>?</p>",
        "id": 262413005,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637643319
    },
    {
        "content": "<p>Ah, that's exactly what we need</p>",
        "id": 262434784,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1637662183
    },
    {
        "content": "<p>I'll PR a version for <code>adjoin</code> later today</p>",
        "id": 262434933,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1637662254
    },
    {
        "content": "<p>Looking at the proof of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/closure_induction'\">docs#closure_induction'</a> it seems they used the same trick I proposed here (replace the statement by some <code>∃...</code>) <span aria-label=\"sunglasses\" class=\"emoji emoji-1f60e\" role=\"img\" title=\"sunglasses\">:sunglasses:</span></p>",
        "id": 262441881,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1637666202
    },
    {
        "content": "<p>Yeah its a good trick, I tried for ages yesterday to do it without it, but in the end just gave up.</p>",
        "id": 262443014,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1637666885
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"389019\">@Chris Birkbeck</span> I've golfed your <code>adjoin_idem</code> <a href=\"https://github.com/leanprover-community/flt-regular/blob/master/src/ready_for_mathlib/adjoin.lean\">here</a>. If you agree I am going to PR it, it can be in same PR as <code>adjoin_induction'</code>.</p>",
        "id": 262447510,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1637669805
    },
    {
        "content": "<p>Oh great, it looks much better now! I'm happy for this to be PR'd</p>",
        "id": 262447654,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1637669890
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/10427\">#10427</a></p>",
        "id": 262448273,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1637670287
    },
    {
        "content": "<p>BTW the RHS of the iff is not necessary. It's just x.prop</p>",
        "id": 262449192,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1637670869
    },
    {
        "content": "<p>So if you have \"x : adjoin R s\" then you can just directly prove the LHS</p>",
        "id": 262449246,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1637670919
    },
    {
        "content": "<p>Thank's, I've golfed the proof.</p>",
        "id": 262453089,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1637673231
    }
]