[
    {
        "content": "<p>I would like to have a tactic exist_elim that, when we have something like <br>\n<code>∃ (r : ℝ) (H : r &gt; 0)</code><br>\nintroduces a variable r and get rid of the <code>∃ (H : r &gt; 0)</code><br>\nby applying <code>rw [exists_prop]</code>.</p>\n<p>But I do not know how to use <code>rw</code>inside a tactic.<br>\nSo far I have tried this:<br>\n<code>meta def existeelim (names : parse ident*) : tactic unit :=\nmatch names with \n    | [nom_var, nom_hypo] := do  \n        nom_h ← get_local nom_hypo,\n        cases_core nom_h [nom_var, nom_hypo],\n        rewrite_hyp  exists_prop nom_hypo \n    | _ := fail \"existe  demande un nom de propriété et un nom de variable\"\n    end</code><br>\nBut <code>rewrite_hyp</code> fails because <code>exists_prop</code> does not have type expr.</p>",
        "id": 197737979,
        "sender_full_name": "Frédéric Le Roux",
        "timestamp": 1589569542
    },
    {
        "content": "<p>does <code>cases h, rw [exists_prop]</code> work?</p>",
        "id": 197738146,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589569608
    },
    {
        "content": "<p>I could have sworn that someone implemented this already (<span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> ?)</p>",
        "id": 197738247,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589569646
    },
    {
        "content": "<p>Is this what <code>erw</code> is about? <br>\nEDIT: no, per mario below</p>",
        "id": 197738333,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589569660
    },
    {
        "content": "<p>no</p>",
        "id": 197738424,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589569674
    },
    {
        "content": "<p>You can write <code> `[rw [exists_prop]]</code> to call the interactive tactic <code>rw [exists_prop]</code> inside another (non-interactive) tactic</p>",
        "id": 197738579,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589569715
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"251825\">@Frédéric Le Roux</span> tip: <a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a> use <code> ``` </code> for code formatting in blocks</p>",
        "id": 197738594,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589569720
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>   Thanks, it looks better now!</p>",
        "id": 197740096,
        "sender_full_name": "Frédéric Le Roux",
        "timestamp": 1589570142
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> <br>\nBut how do I specify the location?  I tried  <code> `[rw [exists_prop] at nom_h]</code>  and  <code> `[rw [exists_prop] at nom_hypo]</code> <br>\nand both fail:<br>\nget_local tactic failed, unknown 'nom_hypo' local<br>\nget_local tactic failed, unknown 'nom_h' local</p>",
        "id": 197742881,
        "sender_full_name": "Frédéric Le Roux",
        "timestamp": 1589571285
    },
    {
        "content": "<p>If you have variables, then you probably can't use the interactive tactics and have to instead mimic what they do. In this case, I think <code>rewrite_hyp</code> takes an <code>expr</code>, so you should convert <code>```(exists_prop)</code>, which is a <code>pexpr</code> to an <code>expr</code> using <code>to_expr</code></p>",
        "id": 197743791,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589571784
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/Using.20the.20rw.20tactic.20inside.20a.20tactic/near/197738247\">said</a>:</p>\n<blockquote>\n<p>I could have sworn that someone implemented this already (<span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> ?)</p>\n</blockquote>\n<p>I'd love to answer that question but I don't understand what Frédéric wants to do.</p>",
        "id": 197750905,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589575947
    },
    {
        "content": "<p>turn <code>|- \\exists (r : A) (h : p r), q r</code> into <code>|- p r /\\ q r</code></p>",
        "id": 197751114,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589576084
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">r</span><span class=\"o\">),</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">use</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 197751431,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589576280
    },
    {
        "content": "<p>I don't remember whether I implemented this myself but i certainly asked for it</p>",
        "id": 197751516,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589576314
    },
    {
        "content": "<p>Git blame says I did: <a href=\"https://github.com/leanprover-community/mathlib/pull/1882\">https://github.com/leanprover-community/mathlib/pull/1882</a></p>",
        "id": 197751601,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589576382
    },
    {
        "content": "<p>Aha, this is exists intro not elim</p>",
        "id": 197752877,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589577071
    },
    {
        "content": "<p>Frédéric is actually turning <code>h :  \\exists (r : A) (h : p r), q r |- goal</code> into <code>r : A, h : p r /\\ q r |- goal</code>, although I don't know why this would be preferred over <code>r : A, h : p r, h2 : q r |- goal</code></p>",
        "id": 197753126,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589577185
    },
    {
        "content": "<p>Exactly, I would like to do for \"exists intro\" what Patrick did for \"exists elim\". The motivation is the same: <code>∃ (H : δ &gt; 0), P δ </code>is confusing for beginners.<br>\nAt the moment I am still unable to make it work (I am still very confused by all these types in metaprogramming). I will try to mimic the syntax of <code>use</code>.</p>",
        "id": 197788256,
        "sender_full_name": "Frédéric Le Roux",
        "timestamp": 1589623813
    },
    {
        "content": "<p>I see. Maybe the following will put you back on track:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span>\n<span class=\"n\">setup_tactic_parser</span>\n<span class=\"kn\">open</span> <span class=\"n\">tactic</span>\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">existeelim</span> <span class=\"o\">(</span><span class=\"n\">hyp</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">ident</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nom</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"o\">(</span><span class=\"n\">tk</span> <span class=\"s2\">&quot;with&quot;</span> <span class=\"bp\">*&gt;</span> <span class=\"n\">ident</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n <span class=\"n\">do</span>\n   <span class=\"n\">nom_h</span> <span class=\"err\">←</span> <span class=\"n\">get_local</span> <span class=\"n\">hyp</span><span class=\"o\">,</span>\n   <span class=\"n\">cases_core</span> <span class=\"n\">nom_h</span> <span class=\"o\">[</span><span class=\"n\">nom</span><span class=\"o\">,</span> <span class=\"n\">hyp</span><span class=\"o\">],</span>\n   <span class=\"n\">lem</span> <span class=\"err\">←</span> <span class=\"n\">to_expr</span> <span class=\"bp\">```</span><span class=\"o\">(</span><span class=\"n\">exists_prop</span><span class=\"o\">),</span>\n   <span class=\"n\">nom_h</span> <span class=\"err\">←</span> <span class=\"n\">get_local</span> <span class=\"n\">hyp</span><span class=\"o\">,</span>\n   <span class=\"n\">rewrite_hyp</span> <span class=\"n\">lem</span> <span class=\"n\">nom_h</span><span class=\"o\">,</span>\n   <span class=\"n\">skip</span>\n<span class=\"kn\">end</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">r</span><span class=\"o\">),</span> <span class=\"n\">q</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">existeelim</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">trivial</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 197792756,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589631013
    },
    {
        "content": "<p>Would this problem go away if we made <code>posreal</code>?</p>",
        "id": 197794554,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589633776
    },
    {
        "content": "<p>Thanks Patrick, that works! Although I do not really understand why we need the <code>with</code> (it is clearer this way though), and above all why we need to call <code>get_local hyp</code>twice?</p>",
        "id": 197923507,
        "sender_full_name": "Frédéric Le Roux",
        "timestamp": 1589803524
    },
    {
        "content": "<p>After the <code>cases_core</code> the new <code>hyp</code> has nothing to do with the old one. It would be clearer to use a different name, but I tried to stay close to your code.</p>",
        "id": 197939655,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589810984
    }
]