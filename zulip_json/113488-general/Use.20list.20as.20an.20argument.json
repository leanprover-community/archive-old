[
    {
        "content": "<p>I define a function which takes a list as a argument but I do not know why it always break when I use it in my other theorem or function.<br>\nmy function no error:</p>\n<div class=\"codehilite\"><pre><span></span>def f_span (l : list V) : set V :=\nspan {vc : V | vc ∈ l}\n</pre></div>\n\n\n<p>use it later in</p>\n<div class=\"codehilite\"><pre><span></span>def are_basis_equal (l₀ : list V) (l₁ : list V) : Prop :=\n∀vc : V, vc ∈ (f_span l₀) ∧ vc ∈ (f_span l₁)\n</pre></div>\n\n\n<p>it reports error :</p>\n<div class=\"codehilite\"><pre><span></span>[Lean]\ntype mismatch at application\n  f_span l₀\nterm\n  l₀\nhas type\n  list V : Type v\nbut is expected to have type\n  Type ? : Type (?+1)\n</pre></div>",
        "id": 129458509,
        "sender_full_name": "Blair Shi",
        "timestamp": 1531298196
    },
    {
        "content": "<p>You have some variable <code>V</code> somewhere, I guess?</p>",
        "id": 129458841,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531298768
    },
    {
        "content": "<p>If you look at what you wrote as the definition of <code>f_span</code> then it <em>looks</em> like it is expecting one input, namely <code>l</code> of type <code>list V</code></p>",
        "id": 129458858,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531298800
    },
    {
        "content": "<p>But after the definition of <code>f_span</code>, if you write <code>#check f_span</code> you will probably see a different story!</p>",
        "id": 129458871,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531298822
    },
    {
        "content": "<p>Probably <code>f_span</code> is also expecting you to input <code>V</code> itself. So that's my guess as to what your error is caused by -- you need <code>f_span V l_0</code></p>",
        "id": 129458902,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531298875
    },
    {
        "content": "<p>The trick is to make <code>V</code> a <code>{}</code> variable; then <code>f_span</code> won't ask for it. I've got to run but that's the idea</p>",
        "id": 129458955,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531298906
    },
    {
        "content": "<blockquote>\n<p>But after the definition of <code>f_span</code>, if you write <code>#check f_span</code> you will probably see a different story!</p>\n</blockquote>\n<p>Even better would be to write <code>#check @f_span</code>. That fills in those pesky metavariables with something readable.</p>",
        "id": 129459298,
        "sender_full_name": "Sean Leather",
        "timestamp": 1531299558
    },
    {
        "content": "<p>I added more argument using <code>[]</code> and it works now. thank you !</p>",
        "id": 129459870,
        "sender_full_name": "Blair Shi",
        "timestamp": 1531300632
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119876\">@Blair Shi</span> Can you show us what it looks like now?</p>",
        "id": 129460007,
        "sender_full_name": "Sean Leather",
        "timestamp": 1531300890
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>def f_span (l : list V) : set V :=\nspan {vc : V | vc ∈ l}\ndef are_basis_equal (l₀ : list V) (l₁ : list V) : Prop :=\n∀vc : V, vc ∈ (f_span k V l₀) ∧ vc ∈ (f_span k V l₁)\n</pre></div>\n\n\n<p>I just added k V everywhere when I using the function <code>f_span</code> without any change of <code>f_span</code> </p>\n<p>Because if you check my <code>f_span</code>, the type is</p>\n<div class=\"codehilite\"><pre><span></span>f_span :\n  Π (k : Type u_1) (V : Type u_2) [_inst_1 : field k] [_inst_2 : ring k] [_inst_3 : module k V], list V → set V\n</pre></div>\n\n\n<p>I also tried like added <code>(k : Type u_1) (V : Type u_2) [_inst_1 : field k] [_inst_2 : ring k] [_inst_3 : module k V]</code> all of them as arguments to my <code>f_span</code> but I realized I don't need to do so. But adding arguments also works for me.</p>",
        "id": 129460651,
        "sender_full_name": "Blair Shi",
        "timestamp": 1531301945
    },
    {
        "content": "<p>Are you sure you're not duplicating stuff around <a href=\"https://github.com/leanprover/mathlib/blob/master/linear_algebra/basic.lean#L122\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/blob/master/linear_algebra/basic.lean#L122\">https://github.com/leanprover/mathlib/blob/master/linear_algebra/basic.lean#L122</a>?</p>",
        "id": 129460809,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531302192
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span>  because the vector space in mathlib does not support finite dimensional vector space. I am currently working on finite dimensional vector space and in the definition of finite dimensional vector space, the basis is a list.</p>",
        "id": 129461143,
        "sender_full_name": "Blair Shi",
        "timestamp": 1531302723
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110045\">@Sean Leather</span> <br>\nI realized I have wrote the global variables and if I delete them the code does not work</p>\n<div class=\"codehilite\"><pre><span></span>variables (k : Type u) (V : Type v)\nvariable [field k]\nvariables [ring k] [module k V]\nvariables (a : k) (b : V)\ninclude k\n</pre></div>",
        "id": 129461329,
        "sender_full_name": "Blair Shi",
        "timestamp": 1531303046
    },
    {
        "content": "<p>Ok. I remember we had this discussion about ordering basis elements here.</p>",
        "id": 129461449,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531303203
    },
    {
        "content": "<p>You want <code>variables {k : Type u} {V : Type v}</code> in the first line</p>",
        "id": 129461828,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531303806
    },
    {
        "content": "<p>I change it to be <code>{k : Type u} {V : Type v}</code>as you said. Now I delete all <code>k V</code> when I use the function:)</p>",
        "id": 129462340,
        "sender_full_name": "Blair Shi",
        "timestamp": 1531304592
    },
    {
        "content": "<p>ordering basis elements -- it's a funny situation! In the general case you seem to want a basis to be a set. But to prove the standard undergraduate theorems about linear maps = matrices you seem to want the basis to be a finite totally ordered set.</p>",
        "id": 129462359,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531304642
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119876\">@Blair Shi</span> yes -- if you are doing vector spaces over a field field <code>k</code> then you don't want to have to keep mentioning <code>k</code>. If you're doing <code>k</code>-linear maps between vector spaces <code>V</code> and <code>W</code> then you probably want to mention <code>V</code> but if you're doing things with a fixed <code>V</code> like showing that sets of size less than dim(V) can't span then you might not even want to mention <code>V</code>. This is how those <code>{}</code> and <code>()</code> brackets that I talked about in my lecture on Monday work in practice. There are tricks to change the variable from <code>()</code> to <code>{}</code>and back in the middle of a file which I can tell you about later if you need them.</p>",
        "id": 129462488,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531304811
    }
]