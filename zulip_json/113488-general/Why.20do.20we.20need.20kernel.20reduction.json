[
    {
        "content": "<p>The <a href=\"#narrow/stream/113488-general/topic/library_search\" title=\"#narrow/stream/113488-general/topic/library_search\">library_search thread</a> made me think about this question. I'm not sure exactly what the question is.</p>\n<p>Why should we resort to adding an axiom for structural eta, when it's already provable.</p>\n<p>Definitional reduction could also I guess in principle be a tactic that applied all the reduction rules and produced a proof term containing the reduction steps.</p>\n<p>Is it inevitable that tactics and interface can never be as good as a definitional reduction rule? When you rely on definitional reduction, you're forced to stay somewhat close to the axioms. It feels like a major limitation to me that for example we need both <code>option</code> and <code>roption</code> just for slightly different definitional equality properties. There are plenty of things that I want to treat like the same thing but will never be axioms. Can they ever be as good as axioms?</p>",
        "id": 182133468,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1574971827
    },
    {
        "content": "<p>The major benefit of defeq is that it is invisible. Hence it allows you to write short code, which is often more readable. Wednesday I gave a Lean talk in front of an audience of pure mathematicians that had never seen Lean before. They thought it was really cool. But the immediate question was: \"You are writing</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">have</span> <span class=\"n\">key_fact</span> <span class=\"o\">:</span> <span class=\"n\">some_prop</span><span class=\"o\">,</span>\n<span class=\"o\">{</span> <span class=\"n\">a</span> <span class=\"n\">simple</span> <span class=\"k\">proof</span> <span class=\"o\">}</span>\n</pre></div>\n\n\n<p>Can't the <code>a simple proof</code> be hidden away?\"<br>\nDefeq and kernel reduction is one way that we are currently able to hide such \"trivial proofs\". I'm not saying it is the best way. Tactics could provide these trivial proofs, but with the current state of things, that would give even more \"trivial proofs\" that make mathematicians wonder \"why am I even writing this proof?\"...</p>",
        "id": 182155755,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1575011886
    },
    {
        "content": "<p><del>Sorry, somehow a duplicate got posted.</del></p>",
        "id": 182155822,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1575012037
    },
    {
        "content": "<p>With the natural number game I completely hid the concept of definitional equality. At the end of it, mathematicians are writing <code>rw zero_add</code> and <code>rw add_zero</code> and have no idea that one is a theorem and one is defeq. Because the concept \"doesn't exist\" in mathematics (a concept can have three definitions, as long as they're all logically equivalent; the advantage of this approach is that far more things are true \"by definition\"; I think the question \"yes but which one is the <em>actual definition</em>?\" barely makes sense to a mathematician) means that this question is firmly an implementation issue. Isn't the trick to make each simple proof a one-line tactic? I don't care if it's <code>refl</code> or <code>simp</code>.  And then who cares about defeq? There's also the issue that computer scientists point out again and again that what a mathematician means by \"simple\" can range from <code>refl</code> to <code>omega</code>/<code>linarith</code>/<code>ring</code>, which all look simple to mathematicians and which computer scientists (correctly) point out have a hugely different amount of computational content to <code>refl</code>.</p>",
        "id": 182160070,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1575017003
    }
]