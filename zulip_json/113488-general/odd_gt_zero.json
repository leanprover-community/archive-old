[
    {
        "content": "<p>There is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.odd_gt_zero\">docs#nat.odd_gt_zero</a>, which defies naming conventions. (I was looking for something containing <code>pos</code> or perhaps <code>zero_lt</code>.) It would also be nice to have the same statement with the assumption <code>n % 2 = 1</code> instead of <code>odd n</code>.<br>\nIt looks like it is not used anywhere in mathlib right now and otherwise only once (in <code>archive/imo/imo1998_q2.lean</code>).<br>\nI'd suggest to rename it <code>nat.odd_pos</code> (and add <code>nat.odd_pos'</code> for the variant).</p>",
        "id": 284663046,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1654114252
    },
    {
        "content": "<p>Oh yeah I started doing this a while back and forgot about it <a href=\"https://github.com/leanprover-community/mathlib/pull/13040\">#13040</a>, I'll try and get this merged now lol. Then you can add the variant you want separately if you like.</p>",
        "id": 284663317,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1654114418
    },
    {
        "content": "<p>OK, sounds good.</p>",
        "id": 284663443,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1654114489
    },
    {
        "content": "<p>Actually, you can generalize it quite a bit.</p>",
        "id": 284677918,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1654122492
    },
    {
        "content": "<p>Agree with <code>odd_pos</code></p>",
        "id": 284698857,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1654144856
    },
    {
        "content": "<p>Can't we do <code>odd.pos</code> for canonically ordered monoids it something?</p>",
        "id": 284699174,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1654145230
    },
    {
        "content": "<p>This might be a bit of an offhand comment, but I feel like there should be something more general than canonically ordered monoids for which many of the order results still hold true, including this one</p>",
        "id": 284699386,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1654145499
    },
    {
        "content": "<p>I recently ran into the problem of ordinals not being a canonically ordered monoid, just because of the technicality that addition isn't commutative</p>",
        "id": 284699441,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1654145532
    },
    {
        "content": "<p><code>odd.pos</code> would still hold true for ordinals, though</p>",
        "id": 284699444,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1654145543
    },
    {
        "content": "<p>ordinals are rather odd as an algebraic structure though. Cardinals too</p>",
        "id": 284699464,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654145578
    },
    {
        "content": "<p>I generally try to avoid introducing a new weak algebraic structure if there is only one example</p>",
        "id": 284699540,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654145668
    },
    {
        "content": "<p>even defining what it means to be an \"odd ordinal\" is a bit subtle and the definition that works for ordinals isn't necessarily the most natural or correct in other situations</p>",
        "id": 284699564,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654145722
    },
    {
        "content": "<p>and \"odd cardinal\" is all sorts of broken</p>",
        "id": 284699726,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654145808
    },
    {
        "content": "<p>That's fair</p>",
        "id": 284699742,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1654145838
    },
    {
        "content": "<p>Yeah actually, odd and even ordinals would be quite broken under the current definition</p>",
        "id": 284699829,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1654145941
    },
    {
        "content": "<p><code>ω + 1</code> is both even as <code>(ω + 1) + (ω + 1)</code>, and odd as <code>2 * ω + 1</code></p>",
        "id": 284699843,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1654145967
    },
    {
        "content": "<p>Nevermind my remark then</p>",
        "id": 284699846,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1654145972
    },
    {
        "content": "<p>the \"correct\" definition for ordinals is that an ordinal is odd if its finite part is odd, or equivalently it has the form <code>o * 2 + 1</code></p>",
        "id": 284699925,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654146018
    },
    {
        "content": "<p>hm, actually you're right, that \"or equivalently\" definition doesn't work since <code>(ω + 1) * 2 = ω * 2 + 1</code>. I think it works if you use <code>o.nmul 2</code></p>",
        "id": 284700150,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654146240
    },
    {
        "content": "<p>Ordinals with natural operations aren't canonically ordered though, since there's no ordinal with <code>1 nadd o = ω</code></p>",
        "id": 284700238,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1654146337
    },
    {
        "content": "<p>Being canonically ordered feels like too strong of a property to state some of the order results like <code>0 ≤ x</code> and this one, but I don't know what the appropriate generalization would be</p>",
        "id": 284700312,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1654146406
    },
    {
        "content": "<p>I mean it's basically just <code>zero_le_order</code></p>",
        "id": 284700321,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654146427
    },
    {
        "content": "<p>Wait, that's a typeclass?</p>",
        "id": 284700335,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1654146466
    },
    {
        "content": "<p>I'm not sure there's really anything else to this kind of structure besides general compatibility of + and &lt;=</p>",
        "id": 284700336,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654146467
    },
    {
        "content": "<p>no it's not</p>",
        "id": 284700339,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654146472
    },
    {
        "content": "<p>Can you use <code>bot_le</code> instead? I assume <code>⊥</code> is defeq to <code>0</code>.</p>",
        "id": 284700413,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1654146543
    },
    {
        "content": "<p>you need a typeclass that asserts it if you want it to be part of <code>odd.pos</code></p>",
        "id": 284700428,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654146582
    },
    {
        "content": "<p>A typeclass for <code>has_bot + has_zero</code> with <code>⊥ = 0</code> seems like it could be useful</p>",
        "id": 284700429,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1654146596
    },
    {
        "content": "<p>I feel like I'm derailing this thread, though...</p>",
        "id": 284700477,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1654146617
    },
    {
        "content": "<p>I'll make a new one</p>",
        "id": 284700486,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1654146644
    },
    {
        "content": "<p>Here's another mostly unrelated remark, but why does <code>odd</code> require a semiring?</p>",
        "id": 284701352,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1654147760
    },
    {
        "content": "<p>Is the definition <code>∃ k, a = k + k + 1</code> not good enough?</p>",
        "id": 284701413,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1654147809
    },
    {
        "content": "<p>Arguably this might lead to worse def-eq, but if so, why is <code>even</code> defined as <code>∃ k, a = k + k</code> and not as <code>∃ k, a = 2 * k</code>?</p>",
        "id": 284701429,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1654147850
    },
    {
        "content": "<p>Even then, why not just require <code>has_add</code>, <code>has_mul</code>, and <code>has_one</code>?</p>",
        "id": 284701560,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1654148014
    },
    {
        "content": "<p>For the <code>even/odd</code> definition, there was a <a href=\"#narrow/stream/113488-general/topic/even.2Fodd\">previous thread</a>.</p>\n<p>The summary: <code>even</code> is more useful, no one really has strong feelings as to what is a \"good\" definition of <code>odd</code>.</p>",
        "id": 284702786,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1654149546
    },
    {
        "content": "<p>Understandable</p>",
        "id": 284702805,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1654149580
    },
    {
        "content": "<p>With respect to the \"ordinal odd\", it seems that in this case, all that you use of \"odd\" is that the ordinal is a successor and therefore non-zero, right?  This might be more useful for ordinals, than defining odd for them.</p>",
        "id": 284702813,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1654149589
    }
]