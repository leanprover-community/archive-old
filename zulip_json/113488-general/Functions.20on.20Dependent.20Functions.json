[
    {
        "content": "<p>Are there special rules for functions operating on dependent functions? I'm not sure why one of these works but the other doesn't:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">test₁</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">unit</span><span class=\"o\">},</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">unit</span><span class=\"o\">},</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">id</span> <span class=\"c1\">-- works</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">test₂</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">unit</span><span class=\"o\">},</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">unit</span><span class=\"o\">},</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>",
        "id": 315257430,
        "sender_full_name": "Devon Tuma",
        "timestamp": 1670793736
    },
    {
        "content": "<p>This is because of the <code>{}</code> binders.</p>",
        "id": 315257480,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1670793783
    },
    {
        "content": "<p>It has to do with the implicitness of <code>i</code>. In the second argument, <code>i</code> gets filled in (somehow) and then you're left with a number, not a function.</p>",
        "id": 315257495,
        "sender_full_name": "Reid Barton",
        "timestamp": 1670793795
    },
    {
        "content": "<p>If you don't want <code>i</code> to get filled in automatically in this situation, you can use the <code>{{ }}</code> or <code>\\{{ \\}}</code> binders (e.g. <a href=\"https://leanprover-community.github.io/mathlib_docs/find/function.injective\">docs#function.injective</a>)</p>",
        "id": 315257691,
        "sender_full_name": "Reid Barton",
        "timestamp": 1670793979
    }
]