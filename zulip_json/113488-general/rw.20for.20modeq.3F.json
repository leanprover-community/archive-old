[
    {
        "content": "<p>I am formalizing an easy IMO problem on modular arithmetic:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.pnat.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic.norm_num</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic.interval_cases</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic.ring</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.nat.modeq</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">imo_1964_p1_1</span>\n  <span class=\"c1\">-- (n : ℤ)</span>\n  <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h₀</span> <span class=\"o\">:</span> <span class=\"mi\">7</span> <span class=\"bp\">∣</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"mi\">3</span> <span class=\"bp\">∣</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">hupper</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">nat.mod_lt</span> <span class=\"n\">n</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">),</span>\n  <span class=\"n\">interval_cases</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"mi\">3</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">nat.dvd_of_mod_eq_zero</span> <span class=\"n\">h</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"c1\">-- Case: n % 3 = 1</span>\n    <span class=\"k\">have</span> <span class=\"n\">hn</span> <span class=\"o\">:=</span> <span class=\"n\">nat.div_add_mod</span> <span class=\"n\">n</span> <span class=\"mi\">3</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">h</span> <span class=\"n\">at</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">hn</span> <span class=\"n\">at</span> <span class=\"n\">h₀</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span><span class=\"o\">),</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">pow_succ</span><span class=\"o\">,</span> <span class=\"n\">pow_mul</span><span class=\"o\">],</span>\n    <span class=\"n\">rw</span> <span class=\"n\">H</span> <span class=\"n\">at</span> <span class=\"n\">h₀</span><span class=\"o\">,</span>\n    <span class=\"n\">ring_nf</span> <span class=\"n\">at</span> <span class=\"n\">h₀</span><span class=\"o\">,</span>\n\n    <span class=\"k\">have</span> <span class=\"n\">H₇</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"mi\">8</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">≡</span> <span class=\"mi\">0</span> <span class=\"o\">[</span><span class=\"n\">MOD</span> <span class=\"mi\">7</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">nat.mod_eq_zero_of_dvd</span> <span class=\"n\">h₀</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">H₇</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"mi\">8</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">≡</span> <span class=\"mi\">1</span> <span class=\"o\">[</span><span class=\"n\">MOD</span> <span class=\"mi\">7</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">nat.modeq.add_right</span> <span class=\"mi\">1</span> <span class=\"n\">H₇</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">nat.sub_add_cancel</span> <span class=\"n\">at</span> <span class=\"n\">H₇</span><span class=\"o\">,</span>\n\n    <span class=\"k\">have</span> <span class=\"n\">h₈</span> <span class=\"o\">:</span> <span class=\"mi\">8</span> <span class=\"bp\">≡</span> <span class=\"mi\">1</span> <span class=\"o\">[</span><span class=\"n\">MOD</span> <span class=\"mi\">7</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">nat.add_modeq_left</span> <span class=\"mi\">1</span> <span class=\"mi\">7</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₈'</span> <span class=\"o\">:=</span> <span class=\"n\">nat.modeq.pow</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">/</span><span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"n\">h₈</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h₈'</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₈''</span> <span class=\"o\">:=</span> <span class=\"n\">nat.modeq.mul_left</span> <span class=\"mi\">2</span> <span class=\"n\">h₈'</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h₈''</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">contra</span> <span class=\"o\">:=</span> <span class=\"n\">nat.modeq.trans</span> <span class=\"o\">(</span><span class=\"n\">nat.modeq.comm.1</span> <span class=\"n\">h₈''</span><span class=\"o\">)</span> <span class=\"n\">H₇</span><span class=\"o\">,</span>\n    <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">nat.modeq</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">contra</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">nat.mod_def</span> <span class=\"n\">at</span> <span class=\"n\">contra</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">contra</span><span class=\"o\">,</span>\n    <span class=\"n\">contradiction</span><span class=\"o\">,</span>\n\n    <span class=\"k\">have</span> <span class=\"n\">hle₁</span> <span class=\"o\">:=</span> <span class=\"n\">nat.one_le_pow</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"mi\">8</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">),</span>\n    <span class=\"k\">have</span> <span class=\"n\">hle₂</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">nat.le_mul_of_pos_left</span> <span class=\"o\">(</span><span class=\"mi\">8</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">/</span><span class=\"mi\">3</span><span class=\"o\">))</span> <span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">),</span>\n    <span class=\"n\">exact</span> <span class=\"n\">trans</span> <span class=\"n\">hle₁</span> <span class=\"n\">hle₂</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"c1\">-- Case: n % 3 = 2</span>\n    <span class=\"c1\">-- similarly</span>\n    <span class=\"gr\">sorry</span>\n  <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p><code>nat.modeq</code> provides all the lemmas needed to perform such computations. However, working with <code>modeq</code> did not come very natural to me because I couldn't use <code>simp</code>s and <code>rw</code>s like I could with equalities. Does <code>rw</code> support rewriting along equivalence relations? Or is it better to work in the quotients? What would you recommend / are there any best practices?</p>",
        "id": 274704418,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1646840000
    },
    {
        "content": "<p>No, <code>rw</code> only works for <code>=</code> and <code>&lt;-&gt;</code>. If you want to use <code>=</code> then I can recommend the <code>zmod n</code> type (which is the quotient, with API). You can't in general rewrite along equivalence relations because if <code>X ~ Y</code> and <code>P X</code> is true then in general there's no reason for <code>P Y</code> to be true.</p>",
        "id": 274704714,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1646840124
    },
    {
        "content": "<p>Slightly off topic, but a better tactic together with appropriate congruence lemmas _could_ do such rewriting (Isabelle's simplifier can). Maybe one day :-)</p>\n<p>(Although I am suddenly not sure if I remember that correctly. Maybe I am spreading fake news. Hmm, I'll do more research.)</p>",
        "id": 274715449,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1646844364
    },
    {
        "content": "<p>Coq also has 'generalised rewriting', so it's certainly possible. Lots of work though and it's not so urgent in Lean because of the quotient workaround.</p>",
        "id": 274716944,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1646844945
    },
    {
        "content": "<p>Ah, maybe I was misremembering what's in Isabelle and what's in Coq. But good point about quotients, of course.</p>",
        "id": 274718844,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1646845641
    },
    {
        "content": "<p>I wrote a small tactic for this kind of thing, for my students.  I never PR'd it because I am sure I'm missing a lot of tricks, but it should give an idea of what's possible.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.interactive</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.int.modeq</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">tactic</span>\n\n<span class=\"sd\">/-- Congruence lemmas (currently an incomplete list) -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">mod_lemmas</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">name</span> <span class=\"o\">:=</span>\n<span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"n\">int.modeq.add_right</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"n\">int.modeq.add_left</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"n\">int.modeq.add</span><span class=\"o\">,</span>\n <span class=\"bp\">`</span><span class=\"n\">int.modeq.sub_right</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"n\">int.modeq.sub_left</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"n\">int.modeq.sub</span><span class=\"o\">,</span>\n <span class=\"bp\">`</span><span class=\"n\">int.modeq.mul_left</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"n\">int.modeq.mul_right</span><span class=\"o\">,</span>\n <span class=\"bp\">`</span><span class=\"n\">int.modeq.neg</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"n\">int.modeq.pow</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"n\">int.modeq.refl</span><span class=\"o\">]</span>\n\n<span class=\"sd\">/-- Append all the congruence lemmas to a list of expressions. -/</span>\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">append_mod_lemmas</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">expr</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">mod_lemmas.mmap</span> <span class=\"n\">resolve_name</span><span class=\"o\">)</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"o\">(</span><span class=\"n\">list.mmap</span> <span class=\"n\">i_to_expr_for_apply</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">::</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span> <span class=\"n\">l</span> <span class=\"bp\">←</span> <span class=\"n\">append_mod_lemmas</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n                 <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">::</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n\n<span class=\"sd\">/-- Run through a list of expressions and, for any of the form `a ≡ b [ZMOD c]`, append the</span>\n<span class=\"sd\">symemtric expression `b ≡ a [ZMOD c]`. -/</span>\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">add_symms</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">expr</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"n\">return</span> <span class=\"o\">[]</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">::</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"k\">do</span> <span class=\"n\">tail</span> <span class=\"bp\">←</span> <span class=\"n\">add_symms</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n       <span class=\"n\">h_typ</span> <span class=\"bp\">←</span> <span class=\"n\">infer_type</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n       <span class=\"k\">match</span> <span class=\"n\">h_typ</span> <span class=\"k\">with</span>\n       <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">int.modeq</span> <span class=\"bp\">%%</span><span class=\"n\">a</span> <span class=\"bp\">%%</span><span class=\"n\">b</span> <span class=\"bp\">%%</span><span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span> <span class=\"n\">h_symm</span> <span class=\"bp\">←</span> <span class=\"n\">mk_app</span> <span class=\"bp\">`</span><span class=\"n\">int.modeq.symm</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">],</span>\n                                        <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">h_symm</span> <span class=\"o\">::</span> <span class=\"n\">h</span> <span class=\"o\">::</span> <span class=\"n\">tail</span><span class=\"o\">)</span>\n       <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">::</span> <span class=\"n\">tail</span><span class=\"o\">)</span>\n       <span class=\"kd\">end</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">tactic</span> <span class=\"n\">expr</span><span class=\"o\">))</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"n\">return</span> <span class=\"o\">[]</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">::</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span> <span class=\"n\">l</span> <span class=\"bp\">←</span> <span class=\"n\">foo</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n                 <span class=\"n\">return</span> <span class=\"o\">((</span><span class=\"n\">return</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">::</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">mod_substitute</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">pexpr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span> <span class=\"n\">l₀</span> <span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"n\">hs.mmap</span> <span class=\"n\">i_to_expr_for_apply</span><span class=\"o\">)</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">add_symms</span><span class=\"o\">,</span>\n   <span class=\"n\">l</span> <span class=\"bp\">←</span> <span class=\"n\">lock_tactic_state</span> <span class=\"bp\">$</span> <span class=\"n\">append_mod_lemmas</span> <span class=\"n\">l₀</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">foo</span><span class=\"o\">,</span>\n   <span class=\"n\">iterate_at_most_on_subgoals</span> <span class=\"mi\">50</span> <span class=\"o\">(</span><span class=\"n\">apply_list_expr</span> <span class=\"o\">{}</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">add_pos_hyp</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span> <span class=\"n\">z</span> <span class=\"bp\">←</span> <span class=\"n\">mk_app</span> <span class=\"bp\">`</span><span class=\"n\">nat.zero</span> <span class=\"o\">[],</span>\n   <span class=\"n\">pos</span> <span class=\"bp\">←</span> <span class=\"n\">mk_app</span> <span class=\"bp\">`</span><span class=\"n\">has_lt.lt</span> <span class=\"o\">[</span><span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">p</span><span class=\"o\">],</span>\n   <span class=\"n\">assert</span> <span class=\"bp\">`</span><span class=\"n\">h_pos</span> <span class=\"n\">pos</span><span class=\"o\">,</span> <span class=\"n\">tactic.exact_dec_trivial</span>\n\n<span class=\"n\">setup_tactic_parser</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">interactive</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">mod_substitute</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">pexpr_list_or_texpr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">tactic.mod_substitute</span> <span class=\"n\">hs</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">interactive</span>\n<span class=\"kd\">end</span> <span class=\"n\">tactic</span>\n</code></pre></div>",
        "id": 274719240,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1646845786
    },
    {
        "content": "<p>It allows for things like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">5</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">7</span> <span class=\"bp\">≡</span> <span class=\"mi\">1</span> <span class=\"o\">[</span><span class=\"n\">ZMOD</span> <span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"k\">calc</span> <span class=\"mi\">5</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">7</span>\n        <span class=\"bp\">≡</span> <span class=\"mi\">5</span> <span class=\"bp\">*</span> <span class=\"mi\">0</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"mi\">7</span> <span class=\"o\">[</span><span class=\"n\">ZMOD</span> <span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">mod_substitute</span> <span class=\"n\">hn</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">≡</span> <span class=\"mi\">1</span> <span class=\"o\">[</span><span class=\"n\">ZMOD</span> <span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">apply</span> <span class=\"n\">int.modeq_add_fac'</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 274719767,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1646845923
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"210057\">@Fabian Glöckle</span> here's a <code>zmod 7</code> proof of the middle case:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"o\">{</span> <span class=\"c1\">-- Case: n % 3 = 1</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">nat.div_add_mod</span> <span class=\"n\">n</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">pow_add</span><span class=\"o\">,</span> <span class=\"n\">pow_mul</span><span class=\"o\">,</span>\n      <span class=\"bp\">←</span> <span class=\"n\">zmod.nat_coe_zmod_eq_zero_iff_dvd</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h₀</span><span class=\"o\">,</span>\n    <span class=\"n\">norm_num</span> <span class=\"o\">[</span><span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"mi\">8</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"mi\">7</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">dec_trivial</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h₀</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n</code></pre></div>\n<p>The first line tidies up the way you tidied up (but more efficiently -- you might want to compare what the first line does with how you did it). But then that last rewrite puts us into Z/7 and then <code>norm_num</code> knows things like 1^(n/3)=1.</p>",
        "id": 274729076,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1646849338
    },
    {
        "content": "<p>Thank you for all your answers.<br>\nI guess what I am asking for is a way to rewrite <code>P X</code> to <code>P Y</code> provided that <code>X ~ Y</code> and that <code>P</code> is <code>~</code>-equivariant in O(1) tactic lines, not in O(depth of P).<br>\nTo sum up the answers: Both a dedicated rewriting system for equivalence relations which is aware of the equivariance lemmas (as in Coq or <span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> 's tactic), and rewriting equalities in the quotient as in <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> 's solution achieve this. The latter works because <code>norm_num</code> is aware of the \"equivariance lemmas for zmod coes\".</p>",
        "id": 274739178,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1646853823
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"256311\">@Jannis Limperg</span> <span class=\"user-mention\" data-user-id=\"470149\">@Joachim Breitner</span> Where can I find out more about this \"generalized rewriting\"?  The tactic I wrote works pretty well for the relation <code>≡ [ZMOD n]</code>, but my attempts at doing something similar for the relation <code>≤</code> failed dismally.  (<a href=\"#narrow/stream/113488-general/topic/apply_rules.20getting.20stuck\">Here</a>'s the kind of problem I hit.). I'd love to see something more expert there.</p>",
        "id": 274754286,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1646861020
    },
    {
        "content": "<p>Just to document some poking around in Lean internals: there's an extremely weak version of this in <code>simp</code>, if I understand it correctly, which is the <code>lift_eq</code> option (by default <code>tt</code>). It looks like that when <code>simp</code> is trying to prove <code>R a b</code> when <code>R</code> is a reflexive relation, it will try to prove <code>a = b</code>, which gives it access to all the congruence lemmas, and then construct a proof of the relation if it succeeds.</p>\n<p>I've wondered what it would be like if <code>simp</code> were able to pass to a quotient by a relation, so for example go from <code>ZMOD</code> to <code>zmod</code>, in both the goal/target and the hypotheses. It might also have to \"<code>zmodify</code>\" things to be useful (or maybe <code>@[congr]</code> lemmas are enough? I'm not sure).</p>",
        "id": 274755965,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1646861877
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> User-level docs are <a href=\"https://coq.inria.fr/refman/addendum/generalized-rewriting.html\">here</a>. The corresponding paper seems to be <a href=\"https://jfr.unibo.it/article/view/1574/1077\">this one</a>. Re-implementing this is certainly doable, but it's a significant amount of work. I would guesstimate one or two good MSc theses.</p>",
        "id": 274766724,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1646867662
    },
    {
        "content": "<p>Thanks!  In any case I guess this wouldn't work for the relation <code>≤</code>:  it looks like it's specific to equivalence relations.</p>",
        "id": 274767582,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1646868219
    },
    {
        "content": "<p>No, the Coq implementation also supports asymmetric relations (though maybe the paper version didn't). See <a href=\"https://coq.inria.fr/refman/addendum/generalized-rewriting.html#rewriting-and-nonsymmetric-relations\">this section</a> for a remarkably confusing example.</p>",
        "id": 274768461,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1646868838
    }
]