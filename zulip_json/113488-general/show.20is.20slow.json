[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">set_option</span> <span class=\"n\">profiler</span> <span class=\"n\">true</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">works_fine</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"c1\">-- elaboration of works_fine took 31.9ms</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">very_slow</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H1</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"err\">↑</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H2</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">show</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"o\">((</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"c1\">-- this is the bad line</span>\n  <span class=\"n\">rw</span> <span class=\"n\">H1</span><span class=\"o\">,</span>\n  <span class=\"n\">rwa</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">cast_lt</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"c1\">-- elaboration of very_slow took 5.4s</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">much_faster</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H1</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"err\">↑</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H2</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"n\">rfl</span><span class=\"o\">),</span>\n  <span class=\"n\">rw</span> <span class=\"n\">H1</span><span class=\"o\">,</span>\n  <span class=\"n\">rwa</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">cast_lt</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n<span class=\"c1\">-- elaboration of much_faster took 61.6ms</span>\n</pre></div>\n\n\n<p>Note one elaboration time is in seconds not milliseconds. What have I done wrong here? I have somehow misused <code>show</code>, it seems.</p>",
        "id": 130888169,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533382622
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">very_slow</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H1</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"err\">↑</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H2</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">show</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"o\">((</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"c1\">-- this is the bad line</span>\n  <span class=\"n\">rw</span> <span class=\"n\">H1</span><span class=\"o\">,</span>\n  <span class=\"n\">rwa</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">cast_lt</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>doesn't fix it. I can't imagine what <code>show</code> is doing.</p>",
        "id": 130888235,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533382700
    },
    {
        "content": "<p>does <code>change</code> do any better?</p>",
        "id": 130888627,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533383410
    },
    {
        "content": "<p>Progress:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">set_option</span> <span class=\"n\">profiler</span> <span class=\"n\">true</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">works_fine</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"c1\">-- elaboration of works_fine took 14.3ms</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">very_slow2</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">H</span>\n<span class=\"kn\">end</span>\n<span class=\"c1\">-- elaboration of very_slow2 took 5.83s</span>\n</pre></div>",
        "id": 130888631,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533383425
    },
    {
        "content": "<p>(progress in the sense that the problem is now simpler and even more confusing)</p>",
        "id": 130888638,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533383476
    },
    {
        "content": "<p>Don't use definitional reduction for reals is probably the best solution.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">very_slow</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H1</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"err\">↑</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H2</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">H1</span><span class=\"o\">,</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">cast_lt</span><span class=\"o\">],</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 130888802,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1533383740
    },
    {
        "content": "<p>Sure there are workarounds, but what is surprising is that Lean is <em>sometimes</em> proving the result by <code>rfl</code> quickly and sometimes not</p>",
        "id": 130888858,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533383814
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">very_slow3</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">change</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"o\">((</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">very_slow4</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">change</span> <span class=\"o\">((</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>same problem with change</p>",
        "id": 130888874,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533383871
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">very_slow</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">H</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">works_fine</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span>\n    <span class=\"n\">refl</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>Way beyond my pay grade</p>",
        "id": 130889010,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533384103
    },
    {
        "content": "<p>I have narrowed it down to</p>\n<div class=\"codehilite\"><pre><span></span>run_cmd assertv_core `h `((3 : ℝ) = ((3 : ℤ) : ℝ)) `(eq.refl (3 : ℝ))\n</pre></div>\n\n\n<p>which is slow, while</p>\n<div class=\"codehilite\"><pre><span></span>run_cmd assertv_core `h `((3 : ℝ) = ((3 : ℤ) : ℝ))\n  `(show (3 : ℝ) = ((3 : ℤ) : ℝ), from eq.refl (3 : ℝ))\n</pre></div>\n\n\n<p>is fast</p>",
        "id": 130889117,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533384327
    },
    {
        "content": "<p>how do I use <code>run_cmd</code>?</p>",
        "id": 130889181,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1533384423
    },
    {
        "content": "<p>it accepts a <code>tactic A</code> and runs it in a dummy state</p>",
        "id": 130889191,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533384446
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"n\">run_cmd</span> <span class=\"n\">assertv_core</span> <span class=\"bp\">`</span><span class=\"n\">h</span> <span class=\"bp\">`</span><span class=\"o\">((</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">))</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">))</span>\n</pre></div>",
        "id": 130889195,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1533384466
    },
    {
        "content": "<p>this doesn't work</p>",
        "id": 130889196,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1533384467
    },
    {
        "content": "<p>it's basically the same as <code>example : true := by tac</code></p>",
        "id": 130889199,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533384472
    },
    {
        "content": "<p><code>open tactic</code></p>",
        "id": 130889239,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533384488
    },
    {
        "content": "<p>lol</p>",
        "id": 130889243,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1533384495
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">run_cmd</span> <span class=\"n\">assertv_core</span> <span class=\"bp\">`</span><span class=\"n\">h</span> <span class=\"bp\">`</span><span class=\"o\">((</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">))</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">))</span>\n</pre></div>",
        "id": 130889311,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1533384607
    },
    {
        "content": "<p>this is slow</p>",
        "id": 130889312,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1533384609
    },
    {
        "content": "<p>this timed out</p>",
        "id": 130889315,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1533384614
    },
    {
        "content": "<p>(it's 2 instead of 3 in the beginning)</p>",
        "id": 130889317,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1533384624
    },
    {
        "content": "<p>while this is fast (I changed the last 3 to 2 instead):</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">run_cmd</span> <span class=\"n\">assertv_core</span> <span class=\"bp\">`</span><span class=\"n\">h</span> <span class=\"bp\">`</span><span class=\"o\">((</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">))</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">))</span>\n</pre></div>",
        "id": 130889333,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1533384668
    },
    {
        "content": "<p>so the <code>show</code> is slow</p>",
        "id": 130889340,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1533384693
    },
    {
        "content": "<p>it's not a fair comparison when the statement isn't true though</p>",
        "id": 130889463,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533384884
    },
    {
        "content": "<p>because then lean does completely different things with regard to error reporting and stuff</p>",
        "id": 130889470,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533384907
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">run_cmd</span> <span class=\"n\">assertv_core</span> <span class=\"bp\">`</span><span class=\"n\">h</span> <span class=\"bp\">`</span><span class=\"o\">((</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">))</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">))</span>\n</pre></div>",
        "id": 130889473,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1533384912
    },
    {
        "content": "<p>the statement is true, and it is slow</p>",
        "id": 130889474,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1533384918
    },
    {
        "content": "<p>oh wait, this is fast:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">run_cmd</span> <span class=\"n\">assertv_core</span> <span class=\"bp\">`</span><span class=\"n\">h</span> <span class=\"bp\">`</span><span class=\"o\">((</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">))</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">))</span>\n</pre></div>",
        "id": 130889477,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1533384932
    },
    {
        "content": "<p>In both cases it's going to fail because the types don't match</p>",
        "id": 130889481,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533384959
    },
    {
        "content": "<p>but they expect <code>2</code> instead of <code>3</code>!</p>",
        "id": 130889520,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1533384964
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>type mismatch at application\n  (λ (this : 2 = ↑2), this) (eq.refl 3)\nterm\n  eq.refl 3\nhas type\n  3 = 3\nbut is expected to have type\n  2 = ↑2\n</pre></div>",
        "id": 130889526,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1533384980
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>unexpected argument at application\n  eq.refl 3\ngiven argument\n  3\nexpected argument\n  2\n</pre></div>",
        "id": 130889527,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1533384982
    },
    {
        "content": "<p><code>assertv_core</code> checks that the type of the last argument is the same as the second argument</p>",
        "id": 130889530,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533384998
    },
    {
        "content": "<p>so all of the numbers have to match</p>",
        "id": 130889535,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533385017
    },
    {
        "content": "<p>I think there is a bug in <code>assertv_core</code>. If I use <code>assert_core</code> instead, it works fine, which you can achieve by using the proof-omitted form of tactic <code>have</code></p>",
        "id": 130889593,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533385148
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">not_slow</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">exact</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">H</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 130889595,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533385166
    },
    {
        "content": "<p>note that <code>definev_core</code> is also slow, which is linked in to the <code>let</code> tactic</p>",
        "id": 130889641,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533385242
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">vm_obj</span> <span class=\"nf\">assert_define_core</span><span class=\"p\">(</span><span class=\"kt\">bool</span> <span class=\"n\">is_assert</span><span class=\"p\">,</span> <span class=\"n\">name</span> <span class=\"k\">const</span> <span class=\"o\">&amp;</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">expr</span> <span class=\"k\">const</span> <span class=\"o\">&amp;</span> <span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"n\">tactic_state</span> <span class=\"k\">const</span> <span class=\"o\">&amp;</span> <span class=\"n\">s</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"n\">optional</span><span class=\"o\">&lt;</span><span class=\"n\">metavar_decl</span><span class=\"o\">&gt;</span> <span class=\"n\">g</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">get_main_goal_decl</span><span class=\"p\">();</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">g</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"n\">mk_no_goals_exception</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">);</span>\n    <span class=\"n\">type_context_old</span> <span class=\"n\">ctx</span>     <span class=\"o\">=</span> <span class=\"n\">mk_type_context_for</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">);</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">is_sort</span><span class=\"p\">(</span><span class=\"n\">ctx</span><span class=\"p\">.</span><span class=\"n\">whnf</span><span class=\"p\">(</span><span class=\"n\">ctx</span><span class=\"p\">.</span><span class=\"n\">infer</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">))))</span> <span class=\"p\">{</span>\n        <span class=\"n\">format</span> <span class=\"n\">msg</span><span class=\"p\">(</span><span class=\"s\">&quot;invalid &quot;</span><span class=\"p\">);</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">is_assert</span><span class=\"p\">)</span> <span class=\"n\">msg</span> <span class=\"o\">+=</span> <span class=\"n\">format</span><span class=\"p\">(</span><span class=\"s\">&quot;assert&quot;</span><span class=\"p\">);</span> <span class=\"k\">else</span> <span class=\"n\">msg</span> <span class=\"o\">+=</span> <span class=\"n\">format</span><span class=\"p\">(</span><span class=\"s\">&quot;define&quot;</span><span class=\"p\">);</span>\n        <span class=\"n\">msg</span> <span class=\"o\">+=</span> <span class=\"n\">format</span><span class=\"p\">(</span><span class=\"s\">&quot; tactic, expression is not a type&quot;</span><span class=\"p\">);</span>\n        <span class=\"n\">msg</span> <span class=\"o\">+=</span> <span class=\"n\">pp_indented_expr</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">t</span><span class=\"p\">);</span>\n        <span class=\"k\">return</span> <span class=\"n\">tactic</span><span class=\"o\">::</span><span class=\"n\">mk_exception</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"p\">,</span> <span class=\"n\">s</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">local_context</span> <span class=\"n\">lctx</span>   <span class=\"o\">=</span> <span class=\"n\">g</span><span class=\"o\">-&gt;</span><span class=\"n\">get_context</span><span class=\"p\">();</span>\n    <span class=\"n\">expr</span> <span class=\"n\">new_M_1</span>         <span class=\"o\">=</span> <span class=\"n\">ctx</span><span class=\"p\">.</span><span class=\"n\">mk_metavar_decl</span><span class=\"p\">(</span><span class=\"n\">lctx</span><span class=\"p\">,</span> <span class=\"n\">t</span><span class=\"p\">);</span>\n    <span class=\"n\">expr</span> <span class=\"n\">new_M_2</span><span class=\"p\">,</span> <span class=\"n\">new_val</span><span class=\"p\">;</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">is_assert</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">expr</span> <span class=\"n\">new_target</span>  <span class=\"o\">=</span> <span class=\"n\">mk_pi</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"n\">g</span><span class=\"o\">-&gt;</span><span class=\"n\">get_type</span><span class=\"p\">());</span>\n        <span class=\"n\">new_M_2</span>          <span class=\"o\">=</span> <span class=\"n\">ctx</span><span class=\"p\">.</span><span class=\"n\">mk_metavar_decl</span><span class=\"p\">(</span><span class=\"n\">lctx</span><span class=\"p\">,</span> <span class=\"n\">new_target</span><span class=\"p\">);</span>\n        <span class=\"n\">new_val</span>          <span class=\"o\">=</span> <span class=\"n\">mk_app</span><span class=\"p\">(</span><span class=\"n\">new_M_2</span><span class=\"p\">,</span> <span class=\"n\">new_M_1</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n        <span class=\"n\">expr</span> <span class=\"n\">new_target</span>  <span class=\"o\">=</span> <span class=\"n\">mk_let</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"n\">new_M_1</span><span class=\"p\">,</span> <span class=\"n\">g</span><span class=\"o\">-&gt;</span><span class=\"n\">get_type</span><span class=\"p\">());</span>\n        <span class=\"n\">new_M_2</span>          <span class=\"o\">=</span> <span class=\"n\">ctx</span><span class=\"p\">.</span><span class=\"n\">mk_metavar_decl</span><span class=\"p\">(</span><span class=\"n\">lctx</span><span class=\"p\">,</span> <span class=\"n\">new_target</span><span class=\"p\">);</span>\n        <span class=\"n\">new_val</span>          <span class=\"o\">=</span> <span class=\"n\">new_M_2</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">ctx</span><span class=\"p\">.</span><span class=\"n\">assign</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">goals</span><span class=\"p\">()),</span> <span class=\"n\">new_val</span><span class=\"p\">);</span>\n    <span class=\"n\">list</span><span class=\"o\">&lt;</span><span class=\"n\">expr</span><span class=\"o\">&gt;</span> <span class=\"n\">new_gs</span>    <span class=\"o\">=</span> <span class=\"n\">cons</span><span class=\"p\">(</span><span class=\"n\">new_M_1</span><span class=\"p\">,</span> <span class=\"n\">cons</span><span class=\"p\">(</span><span class=\"n\">new_M_2</span><span class=\"p\">,</span> <span class=\"n\">tail</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">goals</span><span class=\"p\">())));</span>\n    <span class=\"k\">return</span> <span class=\"n\">tactic</span><span class=\"o\">::</span><span class=\"n\">mk_success</span><span class=\"p\">(</span><span class=\"n\">set_mctx_goals</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">ctx</span><span class=\"p\">.</span><span class=\"n\">mctx</span><span class=\"p\">(),</span> <span class=\"n\">new_gs</span><span class=\"p\">));</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">vm_obj</span> <span class=\"nf\">tactic_assert_core</span><span class=\"p\">(</span><span class=\"n\">vm_obj</span> <span class=\"k\">const</span> <span class=\"o\">&amp;</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">vm_obj</span> <span class=\"k\">const</span> <span class=\"o\">&amp;</span> <span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"n\">vm_obj</span> <span class=\"k\">const</span> <span class=\"o\">&amp;</span> <span class=\"n\">s</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"n\">assert_define_core</span><span class=\"p\">(</span><span class=\"nb\">true</span><span class=\"p\">,</span> <span class=\"n\">to_name</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">),</span> <span class=\"n\">to_expr</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">),</span> <span class=\"n\">tactic</span><span class=\"o\">::</span><span class=\"n\">to_state</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">));</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">vm_obj</span> <span class=\"nf\">assertv_definev_core</span><span class=\"p\">(</span><span class=\"kt\">bool</span> <span class=\"n\">is_assert</span><span class=\"p\">,</span> <span class=\"n\">name</span> <span class=\"k\">const</span> <span class=\"o\">&amp;</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">expr</span> <span class=\"k\">const</span> <span class=\"o\">&amp;</span> <span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"n\">expr</span> <span class=\"k\">const</span> <span class=\"o\">&amp;</span> <span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">tactic_state</span> <span class=\"k\">const</span> <span class=\"o\">&amp;</span> <span class=\"n\">s</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"n\">optional</span><span class=\"o\">&lt;</span><span class=\"n\">metavar_decl</span><span class=\"o\">&gt;</span> <span class=\"n\">g</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">get_main_goal_decl</span><span class=\"p\">();</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">g</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"n\">mk_no_goals_exception</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">);</span>\n    <span class=\"n\">type_context_old</span> <span class=\"n\">ctx</span>     <span class=\"o\">=</span> <span class=\"n\">mk_type_context_for</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">);</span>\n    <span class=\"n\">expr</span> <span class=\"n\">v_type</span>          <span class=\"o\">=</span> <span class=\"n\">ctx</span><span class=\"p\">.</span><span class=\"n\">infer</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">);</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">ctx</span><span class=\"p\">.</span><span class=\"n\">is_def_eq</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"n\">v_type</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n        <span class=\"k\">auto</span> <span class=\"n\">thunk</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"o\">=</span><span class=\"p\">]()</span> <span class=\"p\">{</span>\n            <span class=\"n\">format</span> <span class=\"n\">msg</span><span class=\"p\">(</span><span class=\"s\">&quot;invalid &quot;</span><span class=\"p\">);</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">is_assert</span><span class=\"p\">)</span> <span class=\"n\">msg</span> <span class=\"o\">+=</span> <span class=\"n\">format</span><span class=\"p\">(</span><span class=\"s\">&quot;assertv&quot;</span><span class=\"p\">);</span> <span class=\"k\">else</span> <span class=\"n\">msg</span> <span class=\"o\">+=</span> <span class=\"n\">format</span><span class=\"p\">(</span><span class=\"s\">&quot;definev&quot;</span><span class=\"p\">);</span>\n            <span class=\"n\">msg</span> <span class=\"o\">+=</span> <span class=\"n\">format</span><span class=\"p\">(</span><span class=\"s\">&quot; tactic, value has type&quot;</span><span class=\"p\">);</span>\n            <span class=\"n\">msg</span> <span class=\"o\">+=</span> <span class=\"n\">pp_indented_expr</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">v_type</span><span class=\"p\">);</span>\n            <span class=\"n\">msg</span> <span class=\"o\">+=</span> <span class=\"n\">line</span><span class=\"p\">()</span> <span class=\"o\">+</span> <span class=\"n\">format</span><span class=\"p\">(</span><span class=\"s\">&quot;but is expected to have type&quot;</span><span class=\"p\">);</span>\n            <span class=\"n\">msg</span> <span class=\"o\">+=</span> <span class=\"n\">pp_indented_expr</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">t</span><span class=\"p\">);</span>\n            <span class=\"k\">return</span> <span class=\"n\">msg</span><span class=\"p\">;</span>\n        <span class=\"p\">};</span>\n        <span class=\"k\">return</span> <span class=\"n\">tactic</span><span class=\"o\">::</span><span class=\"n\">mk_exception</span><span class=\"p\">(</span><span class=\"n\">thunk</span><span class=\"p\">,</span> <span class=\"n\">s</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">local_context</span> <span class=\"n\">lctx</span>   <span class=\"o\">=</span> <span class=\"n\">g</span><span class=\"o\">-&gt;</span><span class=\"n\">get_context</span><span class=\"p\">();</span>\n    <span class=\"n\">expr</span> <span class=\"n\">new_M</span><span class=\"p\">,</span> <span class=\"n\">new_val</span><span class=\"p\">;</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">is_assert</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">expr</span> <span class=\"n\">new_target</span>  <span class=\"o\">=</span> <span class=\"n\">mk_pi</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"n\">g</span><span class=\"o\">-&gt;</span><span class=\"n\">get_type</span><span class=\"p\">());</span>\n        <span class=\"n\">new_M</span>            <span class=\"o\">=</span> <span class=\"n\">ctx</span><span class=\"p\">.</span><span class=\"n\">mk_metavar_decl</span><span class=\"p\">(</span><span class=\"n\">lctx</span><span class=\"p\">,</span> <span class=\"n\">new_target</span><span class=\"p\">);</span>\n        <span class=\"n\">new_val</span>          <span class=\"o\">=</span> <span class=\"n\">mk_app</span><span class=\"p\">(</span><span class=\"n\">new_M</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n        <span class=\"n\">expr</span> <span class=\"n\">new_target</span>  <span class=\"o\">=</span> <span class=\"n\">mk_let</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">g</span><span class=\"o\">-&gt;</span><span class=\"n\">get_type</span><span class=\"p\">());</span>\n        <span class=\"n\">new_M</span>            <span class=\"o\">=</span> <span class=\"n\">ctx</span><span class=\"p\">.</span><span class=\"n\">mk_metavar_decl</span><span class=\"p\">(</span><span class=\"n\">lctx</span><span class=\"p\">,</span> <span class=\"n\">new_target</span><span class=\"p\">);</span>\n        <span class=\"n\">new_val</span>          <span class=\"o\">=</span> <span class=\"n\">new_M</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">ctx</span><span class=\"p\">.</span><span class=\"n\">assign</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">goals</span><span class=\"p\">()),</span> <span class=\"n\">new_val</span><span class=\"p\">);</span>\n    <span class=\"n\">list</span><span class=\"o\">&lt;</span><span class=\"n\">expr</span><span class=\"o\">&gt;</span> <span class=\"n\">new_gs</span>    <span class=\"o\">=</span> <span class=\"n\">cons</span><span class=\"p\">(</span><span class=\"n\">new_M</span><span class=\"p\">,</span> <span class=\"n\">tail</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">goals</span><span class=\"p\">()));</span>\n    <span class=\"k\">return</span> <span class=\"n\">tactic</span><span class=\"o\">::</span><span class=\"n\">mk_success</span><span class=\"p\">(</span><span class=\"n\">set_mctx_goals</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">ctx</span><span class=\"p\">.</span><span class=\"n\">mctx</span><span class=\"p\">(),</span> <span class=\"n\">new_gs</span><span class=\"p\">));</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">vm_obj</span> <span class=\"nf\">tactic_assertv_core</span><span class=\"p\">(</span><span class=\"n\">vm_obj</span> <span class=\"k\">const</span> <span class=\"o\">&amp;</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">vm_obj</span> <span class=\"k\">const</span> <span class=\"o\">&amp;</span> <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">vm_obj</span> <span class=\"k\">const</span> <span class=\"o\">&amp;</span> <span class=\"n\">pr</span><span class=\"p\">,</span> <span class=\"n\">vm_obj</span> <span class=\"k\">const</span> <span class=\"o\">&amp;</span> <span class=\"n\">s</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"n\">assertv_definev_core</span><span class=\"p\">(</span><span class=\"nb\">true</span><span class=\"p\">,</span> <span class=\"n\">to_name</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">),</span> <span class=\"n\">to_expr</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">),</span> <span class=\"n\">to_expr</span><span class=\"p\">(</span><span class=\"n\">pr</span><span class=\"p\">),</span> <span class=\"n\">tactic</span><span class=\"o\">::</span><span class=\"n\">to_state</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">));</span>\n<span class=\"p\">}</span>\n</pre></div>",
        "id": 130889707,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1533385372
    },
    {
        "content": "<p>the issue is somewhere in <code>assertv_definev_core</code>, but I don't see anything wrong</p>",
        "id": 130889756,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533385458
    },
    {
        "content": "<p>the <code>ctx.is_def_eq</code> call is potentially expensive, but you can test that in lean and it's not</p>",
        "id": 130889764,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533385493
    },
    {
        "content": "<p>The mystery continues. As far as I can tell, the following lean code should do the same as <code>assertv_definev_core</code> in this case:</p>\n<div class=\"codehilite\"><pre><span></span>run_cmd do\n  let t : expr := `((3 : ℝ) = ((3 : ℤ) : ℝ)),\n  let v : expr := `(eq.refl (3:ℝ)),\n  v_t ← infer_type v,\n  is_def_eq t v_t,\n  r ← target,\n  let e := expr.pi `h binder_info.default t r,\n  m ← mk_meta_var e,\n  let e&#39; := expr.app m v,\n  exact e&#39;,\n  set_goals [m]\n</pre></div>\n\n\n<p>yet it runs without any problems</p>",
        "id": 130890110,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533386187
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> Could you debug this for me? Here's a mathlib free version of the test:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">structure</span> <span class=\"n\">Q</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">num</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n<span class=\"n\">def</span> <span class=\"n\">id&#39;</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">gcd</span> <span class=\"mi\">1</span><span class=\"bp\">⟩</span>\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_zero</span> <span class=\"n\">Q</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨⟨</span><span class=\"mi\">0</span><span class=\"bp\">⟩⟩</span>\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_one</span> <span class=\"n\">Q</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨⟨</span><span class=\"mi\">1</span><span class=\"bp\">⟩⟩</span>\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_add</span> <span class=\"n\">Q</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨λ</span> <span class=\"bp\">⟨</span><span class=\"n\">n₁</span><span class=\"bp\">⟩</span> <span class=\"bp\">⟨</span><span class=\"n\">n₂</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">id&#39;</span> <span class=\"o\">(</span><span class=\"n\">n₁</span> <span class=\"bp\">+</span> <span class=\"n\">n₂</span><span class=\"o\">)</span><span class=\"bp\">⟩</span>\n\n<span class=\"n\">run_cmd</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">try_for</span> <span class=\"mi\">1000</span> <span class=\"o\">(</span><span class=\"n\">assertv_core</span> <span class=\"bp\">`</span><span class=\"n\">h</span>\n  <span class=\"bp\">`</span><span class=\"o\">((</span><span class=\"mi\">4</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span><span class=\"bp\">+</span><span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"mi\">4</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span><span class=\"bp\">+</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"o\">(</span><span class=\"mi\">4</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">))</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">admit</span><span class=\"o\">)</span> <span class=\"c1\">--works</span>\n\n<span class=\"n\">run_cmd</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">try_for</span> <span class=\"mi\">10000</span> <span class=\"o\">(</span><span class=\"n\">assertv_core</span> <span class=\"bp\">`</span><span class=\"n\">h</span>\n  <span class=\"bp\">`</span><span class=\"o\">((</span><span class=\"mi\">4</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span><span class=\"bp\">+</span><span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"o\">(</span><span class=\"mi\">4</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">))</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">admit</span><span class=\"o\">)</span> <span class=\"c1\">--timeout</span>\n</pre></div>",
        "id": 130891358,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533388861
    },
    {
        "content": "<p>The <code>--works</code> version has <code>1000</code>, whereas the <code>--timeout</code> version has <code>10000</code>. I don't know if that matters...</p>",
        "id": 130891933,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533390227
    },
    {
        "content": "<p>That's probably not needed, but it is saying that the first completes in &lt;1000 ms and the second does not complete with &lt;10000 ms so it is much worse</p>",
        "id": 130892761,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533392059
    },
    {
        "content": "<p>Is this something <code>norm_num</code> would help with?</p>",
        "id": 130897379,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1533402527
    },
    {
        "content": "<p>If I understand correctly, <code>refl</code> is slow because it's unfolding the numerals.</p>",
        "id": 130897429,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1533402640
    },
    {
        "content": "<p>refl isn't always slow. It's just slow if you invoke it the wrong way :-)</p>",
        "id": 130897479,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533402772
    },
    {
        "content": "<p>You can prove that the real 3 is the coercion of the integer 3 using simp as well, which is quick (but not as quick as when you use refl, if you use refl the right way)</p>",
        "id": 130897489,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533402814
    },
    {
        "content": "<p>I don't think <code>rfl</code> wins over <code>simp</code> here even in the \"good\" case, at least not if your numbers are moderately large. Calculating <code>4 : real</code> directly requires a number of gcd calculations, which are slow</p>",
        "id": 130898142,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533404011
    }
]