[
    {
        "content": "<p>I'm having some issues with <code>norm_cast</code>. I'll repeat my example from the other thread:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"err\">↑</span><span class=\"o\">((</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"err\">↑</span><span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"err\">↑</span><span class=\"n\">y</span> <span class=\"bp\">-</span> <span class=\"err\">↑</span><span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"err\">↑</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"err\">↑</span><span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"err\">↑</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"err\">↑</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"err\">↑</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">norm_cast</span><span class=\"o\">,</span> <span class=\"c1\">-- this doesn&#39;t move enough `coe`s.</span>\n  <span class=\"n\">ring</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 176078615,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1568881748
    },
    {
        "content": "<p>Nevertheless, <code>int.coe_nat_mul</code> and friends are tagged with the <code>move_cast</code> attribute in <code>tactic/norm_cast.lean</code></p>",
        "id": 176078630,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1568881786
    },
    {
        "content": "<p>Isn't the problem here that <code>norm_cast</code> is moving casts upwards, and you want them moved downwards?</p>",
        "id": 176083418,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1568886581
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>import tactic\n\nexample (k : ℕ) {x y : ℕ} :\n  (x * x + y * y : ℤ) - ↑((x * y + 1) * k) = ↑y * ↑y - ↑k * ↑x * ↑y + (↑x * ↑x - ↑k) :=\nbegin\n  -- goal is:\n  --  ↑x * ↑x + ↑y * ↑y - ↑((x * y + 1) * k) = ↑y * ↑y - ↑k * ↑x * ↑y + (↑x * ↑x - ↑k)\n  norm_cast,\n  -- goal is:\n  --  ↑(x * x + y * y) - ↑((x * y + 1) * k) = ↑(y * y) - ↑(k * x * y) + (↑(x * x) - ↑k)\n  sorry\nend\n</pre></div>",
        "id": 176083666,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1568886823
    },
    {
        "content": "<p><code>norm_cast</code> has done what it's meant to do --- pull casts upwards --- as far as it makes sense to do so --- it isn't going to convert <code>↑x - ↑y</code> to <code>↑(x - y)</code> because that requires the side condition <code>y &lt;= x</code>.</p>",
        "id": 176083754,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1568886904
    },
    {
        "content": "<p>The problem is just that we need a <code>push_cast</code> tactic here instead, which would hopefully convert the goal to</p>\n<div class=\"codehilite\"><pre><span></span>↑x * ↑x + ↑y * ↑y - ((↑x * ↑y + 1) * ↑k) = ↑y * ↑y - ↑k * ↑x * ↑y + (↑x * ↑x - ↑k)\n</pre></div>\n\n\n<p>which <code>ring</code> can cope with:</p>\n<div class=\"codehilite\"><pre><span></span>example (k : ℕ) {x y : ℕ} : (x : ℤ) * (x : ℤ) + (y : ℤ) * (y : ℤ) - (((x : ℤ) * (y : ℤ) + 1) * (k : ℤ)) = (y : ℤ) * (y : ℤ) - (k : ℤ) * (x : ℤ) * (y : ℤ) + ((x : ℤ) * (x : ℤ) - (k : ℤ)) :=\nby ring\n</pre></div>",
        "id": 176083887,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1568887080
    },
    {
        "content": "<p>Aha, that makes sense.</p>",
        "id": 176085875,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1568889014
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span> <span class=\"user-mention\" data-user-id=\"213273\">@Paul-Nicolas Madelaine</span> What do you think about adding a <code>push_cast</code> tactic to your bundle?</p>",
        "id": 176085902,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1568889050
    },
    {
        "content": "<p>I think <code>push_cast</code> would just be a simp set.</p>",
        "id": 176098575,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1568899585
    },
    {
        "content": "<p>Even if it is, it might be nice to wrap it in a tactic. <code>push_cast</code> is shorter than <code>simp with push_cast</code>.</p>",
        "id": 176099679,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1568900215
    },
    {
        "content": "<p>I recorded this conversation as an issue, <a href=\"https://github.com/leanprover-community/mathlib/issues/1464\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/1464\">#1464</a>. It should be pretty straightforward to add.</p>",
        "id": 176182317,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1568976874
    }
]