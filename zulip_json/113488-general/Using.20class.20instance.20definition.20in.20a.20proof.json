[
    {
        "content": "<p>If a type <code>Y</code> has zero or addition, then we can naturally extend zero and addition to the type <code>X -&gt; Y</code>. Naturally, the zero of <code>X -&gt; Y</code> should evaluate to zero for every input and function evaluation should distribute over addition in <code>X -&gt; Y</code>. I'm having hard time proving this when I define zero and addition with typeclasses. The code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">fspace.has_zero</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_zero</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">has_zero.mk</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"kd\">instance</span> <span class=\"n\">fspace.has_add</span>  <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_add</span> <span class=\"n\">Y</span><span class=\"o\">]</span>  <span class=\"o\">:</span> <span class=\"n\">has_add</span>  <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">has_add.mk</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">eval_zero_is_zero</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n<span class=\"n\">intros</span> <span class=\"n\">H</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n<span class=\"n\">rewrite</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n<span class=\"n\">sorry</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">add_on_vals</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_add</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">+</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n<span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n\n<p>Is there a way to use the definition of zero and addition in the proof?  </p>\n<p>It is likely, that I'm asking for something that cannot be done. How else can I define zero and addition on types <code>X -&gt; Y</code> such that I can prove those lemmas?</p>",
        "id": 211285784,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1601053579
    },
    {
        "content": "<p><code>refl</code> for both <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 211286161,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1601053795
    },
    {
        "content": "<p>You've already got both <code>sorry</code>s  to the point where it is true by definition, and thats what the <code>refl</code> tactic will prove for you.</p>",
        "id": 211286375,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1601053904
    },
    {
        "content": "<p>BTW, these instances are defined already if you <code>import algebra.group.pi</code></p>",
        "id": 211286589,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1601054025
    },
    {
        "content": "<p>Ohh, I didn't realize that the proof is done :D. Now, I can do the more complicated case I was originally struggling with. </p>\n<p>Is there a way to monetarily turn off the <code>+</code> and <code>0</code> notation? So I can see the actual definition? Something like <code>\"unfold +\"</code>.</p>",
        "id": 211288096,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1601054839
    },
    {
        "content": "<p><code>set_option pp.notation false</code> I guess</p>",
        "id": 211288291,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601054918
    },
    {
        "content": "<p><code>simp only [(+)]</code> is what I normally do to actually unfold the definition.</p>",
        "id": 211288293,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1601054919
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110596\">Rob Lewis</span> <a href=\"#narrow/stream/113488-general/topic/Using.20class.20instance.20definition.20in.20a.20proof/near/211286589\">said</a>:</p>\n<blockquote>\n<p>BTW, these instances are defined already if you <code>import algebra.group.pi</code></p>\n</blockquote>\n<p>Good to know, thanks!</p>",
        "id": 211288300,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1601054926
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/113488-general/topic/Using.20class.20instance.20definition.20in.20a.20proof/near/211288293\">said</a>:</p>\n<blockquote>\n<p><code>simp only [(+)]</code> is what I normally do to actually unfold the definition.</p>\n</blockquote>\n<p>This works perfectly!</p>",
        "id": 211288821,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1601055181
    },
    {
        "content": "<p>Hmm but <code>simp only [(0)]</code> does not work.</p>",
        "id": 211289056,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1601055268
    },
    {
        "content": "<p>Probably it's the wrong zero :-)</p>",
        "id": 211290004,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601055778
    },
    {
        "content": "<p>Try <code>has_zero.zero</code> :-(</p>",
        "id": 211290043,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601055801
    },
    {
        "content": "<p>Oh, replace <code>(0)</code> with <code>(0 : X)</code> and you might be ok</p>",
        "id": 211290192,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601055861
    }
]