[
    {
        "content": "<p>Is this the correct use of <code>omega</code>?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">omega</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">omega</span> <span class=\"c1\">-- &#39;unreachable&#39; code was reached</span>\n</pre></div>",
        "id": 163650482,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1555593614
    },
    {
        "content": "<p>well you just broke logic :P</p>",
        "id": 163651478,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1555594309
    },
    {
        "content": "<p>I get the error here as well</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">omega</span>\n</pre></div>",
        "id": 163651583,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1555594375
    },
    {
        "content": "<p>Probably some error in equality elimination. I'll look into it.</p>",
        "id": 163656343,
        "sender_full_name": "Seul Baek",
        "timestamp": 1555597639
    },
    {
        "content": "<p>It's a problem on my end. I'm on a branch of mathlib which I modified.</p>",
        "id": 163656611,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1555597789
    },
    {
        "content": "<p>Does it work on the unmodified branch?</p>",
        "id": 163656714,
        "sender_full_name": "Seul Baek",
        "timestamp": 1555597830
    },
    {
        "content": "<p>Yes.</p>",
        "id": 163656783,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1555597877
    },
    {
        "content": "<p>\"unreachable code was reached\" is a bad sign no matter what, unless you're modifying Lean source code...</p>",
        "id": 163656908,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1555597931
    },
    {
        "content": "<p>I'm not editing lean source code.</p>",
        "id": 163657013,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1555598016
    },
    {
        "content": "<p>If you feel like digging deep, you could compile Lean in debug mode and see if there's an assertion violation that leads to this.</p>",
        "id": 163657363,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1555598256
    },
    {
        "content": "<p>Not quite sure what could be causing this; I've never encountered this error when using <code>omega</code>. But both examples are definitely correct usage</p>",
        "id": 163657654,
        "sender_full_name": "Seul Baek",
        "timestamp": 1555598411
    },
    {
        "content": "<p>Okay, I restarted Lean, and it all works on my modified branch. Probably no need to worry.</p>",
        "id": 163657747,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1555598509
    },
    {
        "content": "<p>you have piqued the computer scientists' interest!</p>",
        "id": 163660075,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555600015
    },
    {
        "content": "<p>Can you please try very hard to reproduce so they can debug properly? :-)</p>",
        "id": 163660103,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555600031
    },
    {
        "content": "<p>Is this a Presburger formula? <code>omega</code> doesn't solve it</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">omega</span> <span class=\"c1\">-- failed</span>\n</pre></div>",
        "id": 163660182,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1555600085
    },
    {
        "content": "<p>The formula is in Presburger arithmetic, but not in the quantifier-free (i.e., purely universally quantified) fragment of Presburger arithmetic, which is what <code>omega</code>works with</p>",
        "id": 163661274,
        "sender_full_name": "Seul Baek",
        "timestamp": 1555600797
    },
    {
        "content": "<p><code>cooper</code> would solve it since it handles quantifiers in any combination, but would be much slower overall</p>",
        "id": 163661514,
        "sender_full_name": "Seul Baek",
        "timestamp": 1555600948
    },
    {
        "content": "<p>Out of interest, where are the limitations here? <code>example : ∃ (a b c : ℕ), a ^ 3 = b ^ 3 + c ^ 3 + 42</code> is presumably not within the realm of <code>cooper</code> -- it is an open question in pure mathematics in fact, although it is believed that such integers exist.</p>",
        "id": 163664981,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555603521
    },
    {
        "content": "<p>Oh -- I remember now -- Presburger arithmetic can't do squaring or cubing of variables can it. It can only do multiplication by a numerical constant (and that's by cheating -- repeated addition)</p>",
        "id": 163666017,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555604318
    },
    {
        "content": "<p>that's the intuitive justification, but most algorithms I know for presburger explicitly represent multiplication by constants (and divisibility by constants in the case of cooper)</p>",
        "id": 163672676,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1555609014
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116585\">@Seul Baek</span> , all -- I have encountered a strange bug with omega. I'm showing one successful example below and one where I get some low-level error message about <code>s</code>. Observe that the second example is an instance of the first example.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"n\">n₀</span> <span class=\"n\">m₀</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hnm</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n₀</span> <span class=\"bp\">+</span> <span class=\"n\">m₀</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">omega</span>  <span class=\"c1\">-- succeeds</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">n₀</span> <span class=\"n\">m₀</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">string</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hnm</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"s2\">&quot;m&quot;</span> <span class=\"bp\">+</span> <span class=\"n\">s</span> <span class=\"s2\">&quot;n&quot;</span> <span class=\"bp\">=</span> <span class=\"n\">n₀</span> <span class=\"bp\">+</span> <span class=\"n\">m₀</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">s</span> <span class=\"s2\">&quot;n&quot;</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">s</span> <span class=\"s2\">&quot;m&quot;</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"s2\">&quot;n&quot;</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">s</span> <span class=\"s2\">&quot;m&quot;</span> <span class=\"bp\">+</span> <span class=\"n\">s</span> <span class=\"s2\">&quot;n&quot;</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">omega</span>  <span class=\"c1\">-- fails</span>\n</pre></div>\n\n\n<p>It's a pity, because it prevents me from using \"omega\" in my MSc-level course.</p>",
        "id": 188539696,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1582115425
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"121058\">@Jasmin Blanchette</span>  I think there has been some effort to get <code>omega</code> into a usable state in mathlib. But it seems to be a non-trivial effort.</p>",
        "id": 188550699,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1582123898
    },
    {
        "content": "<p>I think this will be addressed by <a href=\"https://github.com/leanprover-community/mathlib/issues/1748\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/1748\">#1748</a>.</p>",
        "id": 188563790,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1582132150
    }
]