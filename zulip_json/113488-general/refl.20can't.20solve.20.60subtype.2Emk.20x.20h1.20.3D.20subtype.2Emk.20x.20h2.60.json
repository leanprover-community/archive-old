[
    {
        "content": "<p>I'm seeing something very weird on these lines:</p>\n<p><a href=\"https://github.com/leanprover-community/mathlib/blob/b8875386202f5675d7a5c52a41d5fc79831e257a/src/combinatorics/stars_and_bars.lean#L194-L199\">https://github.com/leanprover-community/mathlib/blob/b8875386202f5675d7a5c52a41d5fc79831e257a/src/combinatorics/stars_and_bars.lean#L194-L199</a></p>\n<p>Specifically, if I replace <code>ext : 1, refl</code> with <code>refl</code>, the proofs breaks.</p>\n<p>The only difference between the two goal states is inside the second argument of <code>subtype.mk</code> containing the proof - so why does lean not accept <code>refl</code> as a proof?</p>",
        "id": 277176574,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1648659949
    },
    {
        "content": "<p>mwe:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">stars_and_bars</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">s</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">:</span> <span class=\"n\">stars_and_bars</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">star</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">stars_and_bars</span> <span class=\"n\">s</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">stars_and_bars</span> <span class=\"o\">(</span><span class=\"n\">nat.succ</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">b</span>\n<span class=\"bp\">|</span> <span class=\"n\">bar</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">stars_and_bars</span> <span class=\"n\">s</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">stars_and_bars</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">nat.succ</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">stars_and_bars</span>\n<span class=\"kn\">open</span> <span class=\"n\">list</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">to_list.star_proof</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">bool</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hl</span> <span class=\"o\">:</span> <span class=\"n\">l.count</span> <span class=\"n\">ff</span> <span class=\"bp\">=</span> <span class=\"n\">s</span> <span class=\"bp\">∧</span> <span class=\"n\">l.count</span> <span class=\"n\">tt</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">ff</span> <span class=\"o\">::</span> <span class=\"n\">l</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">count</span> <span class=\"n\">ff</span> <span class=\"bp\">=</span> <span class=\"n\">s.succ</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">ff</span> <span class=\"o\">::</span> <span class=\"n\">l</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">count</span> <span class=\"n\">tt</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨(</span><span class=\"n\">count_cons_self</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">congr_arg</span> <span class=\"n\">nat.succ</span> <span class=\"n\">hl.1</span><span class=\"o\">),</span>\n  <span class=\"o\">(</span><span class=\"n\">count_cons_of_ne</span> <span class=\"n\">tt_eq_ff_eq_false</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">hl.2</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">to_list</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">},</span>\n  <span class=\"n\">stars_and_bars</span> <span class=\"n\">s</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">bool</span> <span class=\"bp\">//</span> <span class=\"n\">l.count</span> <span class=\"n\">ff</span> <span class=\"bp\">=</span> <span class=\"n\">s</span> <span class=\"bp\">∧</span> <span class=\"n\">l.count</span> <span class=\"n\">tt</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">}</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span> <span class=\"n\">nil</span> <span class=\"o\">:=</span> <span class=\"o\">⟨[],</span> <span class=\"n\">count_nil</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">count_nil</span> <span class=\"n\">_</span><span class=\"o\">⟩</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">.</span><span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">star</span> <span class=\"n\">s</span> <span class=\"n\">b</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">ff</span> <span class=\"o\">::</span> <span class=\"n\">to_list</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">stars_and_bars.to_list.star_proof</span> <span class=\"o\">(</span><span class=\"n\">to_list</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">prop</span><span class=\"o\">⟩</span>\n<span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">bar</span> <span class=\"n\">s</span> <span class=\"n\">b</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">tt</span> <span class=\"o\">::</span> <span class=\"n\">to_list</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"gr\">sorry</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">to_list_star</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">stars_and_bars</span> <span class=\"n\">s</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">to_list</span> <span class=\"o\">(</span><span class=\"n\">star</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">⟨</span><span class=\"n\">ff</span> <span class=\"o\">::</span> <span class=\"n\">to_list</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">to_list.star_proof</span> <span class=\"o\">(</span><span class=\"n\">to_list</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">prop</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">to_list</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- `ff :: ↑(x.to_list), _⟩ = ⟨ff :: ↑(x.to_list), _⟩`, but `refl` fails</span>\n  <span class=\"n\">success_if_fail</span> <span class=\"o\">{</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n  <span class=\"n\">ext</span> <span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- ↑⟨ff :: ↑(x.to_list), _⟩ = ↑⟨ff :: ↑(x.to_list), _⟩</span>\n  <span class=\"n\">simp_rw</span> <span class=\"n\">subtype.coe_mk</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- ↑⟨ff :: ↑(x.to_list), _⟩ = ff :: ↑(x.to_list)</span>\n  <span class=\"n\">success_if_fail</span> <span class=\"o\">{</span><span class=\"n\">simp_rw</span> <span class=\"n\">subtype.coe_mk</span><span class=\"o\">},</span>  <span class=\"c1\">-- also fails</span>\n  <span class=\"n\">refl</span> <span class=\"c1\">-- ok</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">stars_and_bars</span>\n</code></pre></div>",
        "id": 277177298,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1648660261
    },
    {
        "content": "<p>The type of the first missing proof is <code>count ff (ff :: ↑(to_list._main x)) = s.succ ∧ count tt (ff :: ↑(to_list._main x)) = b</code> and the type of the second missing proof is the not-quite-the-same <code>count ff (ff :: ↑(x.to_list)) = s.succ ∧ count tt (ff :: ↑(x.to_list)) = b</code>.</p>",
        "id": 277178515,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1648660807
    },
    {
        "content": "<p>Indeed - but presumably those types must be defeq else the equality wouldn't be type-correct</p>",
        "id": 277178678,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1648660888
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">to_list</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:=</span> <span class=\"n\">to_list._main._proof_2</span> <span class=\"n\">s</span> <span class=\"n\">b</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:=</span> <span class=\"n\">to_list.star_proof</span> <span class=\"n\">x.to_list.prop</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">h1</span> <span class=\"bp\">=</span> <span class=\"n\">h2</span><span class=\"o\">,</span> <span class=\"c1\">-- type mismatch at application</span>\n</code></pre></div>",
        "id": 277179042,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1648661049
    },
    {
        "content": "<p>And yet, the types seem compatible enough that we can state the equality of the subtypes?</p>",
        "id": 277179492,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1648661289
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> This looks like a bug in Lean 3. A similar example works as expected in Lean 4.<br>\n<a href=\"https://github.com/leanprover/lean4/blob/master/tests/lean/run/starsAndBars.lean\">https://github.com/leanprover/lean4/blob/master/tests/lean/run/starsAndBars.lean</a></p>",
        "id": 277196305,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1648669418
    },
    {
        "content": "<p>Whether it reproduced in lean4 was going to be my next question, thanks!</p>",
        "id": 277201118,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1648672606
    }
]