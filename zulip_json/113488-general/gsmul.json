[
    {
        "content": "<p>Now that we have overloaded <code>â€¢</code> with the scalar multiplication in modules and <code>gsmul</code>, how are we going to tell Lean that I want to use <code>gsmul</code>?</p>",
        "id": 124838585,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523284196
    },
    {
        "content": "<p>(note that things get more complicated as there is a coercion from integers to rings)</p>",
        "id": 124838630,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523284215
    },
    {
        "content": "<p>Just trying to figure out what is going on here.</p>",
        "id": 124840466,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523287102
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"c\">/-</span><span class=\"cm\"> map constructors -/</span>\n<span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"n\">to_additive</span> <span class=\"n\">has_add</span><span class=\"bp\">.</span><span class=\"n\">mk</span><span class=\"o\">]</span> <span class=\"n\">has_mul</span><span class=\"bp\">.</span><span class=\"n\">mk</span>\n<span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"n\">to_additive</span> <span class=\"n\">has_zero</span><span class=\"bp\">.</span><span class=\"n\">mk</span><span class=\"o\">]</span> <span class=\"n\">has_one</span><span class=\"bp\">.</span><span class=\"n\">mk</span>\n<span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"n\">to_additive</span> <span class=\"n\">has_neg</span><span class=\"bp\">.</span><span class=\"n\">mk</span><span class=\"o\">]</span> <span class=\"n\">has_neg</span><span class=\"bp\">.</span><span class=\"n\">mk</span>\n</pre></div>",
        "id": 124840469,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523287110
    },
    {
        "content": "<p><code>has_neg</code> -&gt; <code>has_neg</code> not <code>has_inv</code>?</p>",
        "id": 124840481,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523287131
    },
    {
        "content": "<p>that's in group.lean</p>",
        "id": 124840496,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523287151
    },
    {
        "content": "<p><code>gsmul</code> is additive Group Scalar MULtiplication?</p>",
        "id": 124840673,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523287338
    },
    {
        "content": "<p>yes</p>",
        "id": 124840677,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523287348
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> are you trying to fix it?</p>",
        "id": 124863514,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523322011
    },
    {
        "content": "<p>I already did earlier today</p>",
        "id": 124864636,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523324468
    },
    {
        "content": "<p>by \"are you trying\" I don't necessarily mean this particular moment</p>",
        "id": 124864637,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523324490
    },
    {
        "content": "<p>I asked because I saw your commit</p>",
        "id": 124864638,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523324501
    },
    {
        "content": "<p>so what is the solution now?</p>",
        "id": 124864639,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523324510
    },
    {
        "content": "<p>No more overloading - <code>has_scalar.smul</code> is the global bullet notation, which is used in modules, while <code>gsmul</code> has no notation unless you declare it locally</p>",
        "id": 124864681,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523324580
    },
    {
        "content": "<p>nice</p>",
        "id": 124864687,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523324594
    }
]