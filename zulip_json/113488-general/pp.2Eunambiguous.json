[
    {
        "content": "<p>How hard would it be to write a tactic that takes an <code>expr</code> and prints a string that is close to the standard pretty printed version, but ready for copy-pasting into the current editor window?</p>",
        "id": 199258973,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590848616
    },
    {
        "content": "<p>Relevant: <a href=\"#narrow/stream/113488-general/topic/pp.2Eall.20with.20more.20.40\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/pp.2Eall.20with.20more.20.40</a></p>",
        "id": 199259120,
        "sender_full_name": "Jason Rute",
        "timestamp": 1590848792
    },
    {
        "content": "<p>Typical examples are ambiguous <code>0</code> that need a type ascription</p>",
        "id": 199259199,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590848955
    },
    {
        "content": "<p>it needs more than a type ascription in general</p>",
        "id": 199259211,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590848982
    },
    {
        "content": "<p>why?</p>",
        "id": 199259218,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590848997
    },
    {
        "content": "<p>I would start from pp.all as a baseline</p>",
        "id": 199259256,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590849004
    },
    {
        "content": "<p>You can try to take pp.all output and progressively try to remove <code>@</code> signs while ensuring that the elaborator still produces the right term, but this is pretty expensive since you have to typecheck hundreds of variations of the term</p>",
        "id": 199259299,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590849089
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/pp.2Eunambiguous/near/199259218\">said</a>:</p>\n<blockquote>\n<p>why?</p>\n</blockquote>\n<p>You could have a zero with a non-canonical instance, or one that was provided manually and can't be found by instance search</p>",
        "id": 199259365,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590849150
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/pp.2Eunambiguous/near/199259299\">said</a>:</p>\n<blockquote>\n<p>You can try to take pp.all output and progressively try to remove <code>@</code> signs while ensuring that the elaborator still produces the right term, but this is pretty expensive since you have to typecheck hundreds of variations of the term</p>\n</blockquote>\n<p>Expensive is fine if it's only used occasionally, say in <code>extract_goal</code>.</p>",
        "id": 199259653,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590849564
    },
    {
        "content": "<p>I believe Lean 4 is making sure the pp.all round trip succeeds.  See <a href=\"https://github.com/leanprover/lean4/blob/50fc9610379243e419f75de7e281cbeb61287324/src/Lean/Delaborator.lean\">https://github.com/leanprover/lean4/blob/50fc9610379243e419f75de7e281cbeb61287324/src/Lean/Delaborator.lean</a></p>",
        "id": 199259655,
        "sender_full_name": "Jason Rute",
        "timestamp": 1590849570
    },
    {
        "content": "<p>Sorry, I misunderstood.  You want something <em>closer</em> to standard pp.</p>",
        "id": 199259730,
        "sender_full_name": "Jason Rute",
        "timestamp": 1590849688
    },
    {
        "content": "<p>It's not hard to make something like pp.all that round-trips. I am pretty sure the \"delaborator\" is doing what I outlined above, trying to get closer to an unmarked term</p>",
        "id": 199259789,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590849761
    },
    {
        "content": "<p>I think if you design it well you can get delaboration to be \"only\" as expensive as elaboration. (Still pretty expensive for something that is doing printing...)</p>",
        "id": 199260008,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590850021
    }
]