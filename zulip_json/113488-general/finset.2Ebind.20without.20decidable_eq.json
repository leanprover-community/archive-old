[
    {
        "content": "<p>How can I define the following without needing <code>decidable_eq</code>?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">bind_prod</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">sa</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fb</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">finset</span> <span class=\"n\">β</span><span class=\"o\">):</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n  <span class=\"o\">:=</span> <span class=\"n\">sa</span><span class=\"bp\">.</span><span class=\"n\">bind</span><span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">fb</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"bp\">⟨</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"k\">begin</span>\n    <span class=\"n\">intros</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">mk</span><span class=\"bp\">.</span><span class=\"n\">inj</span> <span class=\"n\">ha</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">right</span><span class=\"o\">,</span>\n  <span class=\"kn\">end</span><span class=\"bp\">⟩</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>Normally <code>sa.bind</code> needs <code>decidable_eq</code> to remove duplicates, but in this case I already know there are no duplicates.</p>",
        "id": 204818038,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1595520626
    },
    {
        "content": "<p>You can use something like <code>⟨sa.1.bind _, multiset.nodup_bind.2 _⟩</code></p>",
        "id": 204819976,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1595521546
    },
    {
        "content": "<p>Yeah, that's the route I went:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span>\n<span class=\"n\">def</span> <span class=\"n\">bind_prod</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">sa</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fb</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">finset</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n  <span class=\"o\">:=</span> <span class=\"bp\">⟨</span>\n    <span class=\"n\">sa</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"bp\">.</span><span class=\"n\">bind</span><span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"o\">((</span><span class=\"n\">fb</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"bp\">⟨</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"k\">begin</span>\n      <span class=\"n\">intros</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">mk</span><span class=\"bp\">.</span><span class=\"n\">inj</span> <span class=\"n\">ha</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">right</span><span class=\"o\">,</span>\n    <span class=\"kn\">end</span><span class=\"bp\">⟩</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">),</span>\n    <span class=\"k\">begin</span>\n      <span class=\"n\">rw</span> <span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">nodup_bind</span><span class=\"o\">,</span>\n      <span class=\"n\">split</span><span class=\"o\">,</span>\n      <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">nodup</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n      <span class=\"n\">refine</span> <span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">pairwise_of_nodup</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">nodup</span> <span class=\"bp\">_</span><span class=\"o\">),</span>\n      <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">ha</span> <span class=\"n\">a2</span> <span class=\"n\">ha2</span> <span class=\"n\">heq</span><span class=\"o\">,</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">map_val</span><span class=\"o\">],</span>\n      <span class=\"n\">rw</span> <span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">disjoint_map_map</span><span class=\"o\">,</span>\n      <span class=\"n\">intros</span> <span class=\"n\">b1</span> <span class=\"n\">hb1</span> <span class=\"n\">b2</span> <span class=\"n\">hb2</span><span class=\"o\">,</span>\n      <span class=\"n\">unfold_coes</span><span class=\"o\">,</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[],</span>\n      <span class=\"n\">intro</span> <span class=\"n\">hanother</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">heq</span> <span class=\"o\">(</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">mk</span><span class=\"bp\">.</span><span class=\"n\">inj</span> <span class=\"n\">hanother</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">left</span><span class=\"o\">,</span>\n    <span class=\"kn\">end</span>\n  <span class=\"bp\">⟩</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">mem_bind_prod</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">sa</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fb</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">finset</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ab</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">ab</span> <span class=\"err\">∈</span> <span class=\"n\">bind_prod</span> <span class=\"n\">sa</span> <span class=\"n\">fb</span> <span class=\"bp\">↔</span> <span class=\"n\">ab</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"err\">∈</span> <span class=\"n\">sa</span> <span class=\"bp\">∧</span> <span class=\"n\">ab</span><span class=\"bp\">.</span><span class=\"n\">snd</span> <span class=\"err\">∈</span> <span class=\"n\">fb</span> <span class=\"n\">ab</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">bind_prod</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">mem_def</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[],</span>\n  <span class=\"n\">rw</span> <span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">mem_bind</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">mem_def</span><span class=\"o\">,</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">mem_map</span><span class=\"o\">,</span> <span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">embedding</span><span class=\"bp\">.</span><span class=\"n\">coe_fn_mk</span><span class=\"o\">],</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">rintros</span> <span class=\"bp\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">mem_def</span> <span class=\"n\">at</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">hb</span><span class=\"o\">],</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">rintros</span> <span class=\"bp\">⟨</span><span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">hb</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">mem_def</span> <span class=\"n\">at</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"o\">[</span><span class=\"n\">ab</span><span class=\"bp\">.</span><span class=\"n\">fst</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">ab</span><span class=\"bp\">.</span><span class=\"n\">snd</span><span class=\"o\">,</span> <span class=\"n\">hb</span><span class=\"o\">],</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">mk</span><span class=\"bp\">.</span><span class=\"n\">eta</span><span class=\"o\">],</span>\n  <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 204823750,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1595523340
    },
    {
        "content": "<p>Would this belong in mathlib?</p>",
        "id": 204823776,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1595523355
    },
    {
        "content": "<p>I guess yes. I'd also add a <code>bind_nodup (s : finset α) (t : α → finset β) (ht : ∀ (i ∈ s) (j ∈ s), i ≠ j → disjoint (t i) (t j)) : finset β</code> as an intermediate definition.</p>",
        "id": 204824214,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1595523570
    },
    {
        "content": "<p>This is very close to <code>finset.sigma</code>, which is slightly more general.</p>",
        "id": 204824237,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1595523585
    },
    {
        "content": "<p>Can you show me how to express this using finset.sigma?</p>",
        "id": 204824370,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1595523616
    },
    {
        "content": "<p>But it's probably worth having.</p>",
        "id": 204824371,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1595523617
    },
    {
        "content": "<p>Is <code>prod_bind</code> a good name?</p>",
        "id": 204824395,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1595523629
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> !</p>",
        "id": 204824436,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1595523649
    },
    {
        "content": "<p>You can do <code>(s.sigma t).map (equiv.sigma_equiv_prod _ _).to_embedding</code></p>",
        "id": 204824465,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1595523673
    },
    {
        "content": "<p>Sweet, thanks!</p>",
        "id": 204824710,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1595523791
    },
    {
        "content": "<p>I end up stuck trying to prove <code>⊢ (equiv.sigma_equiv_prod α β).to_fun ⟨ab.fst, ab.snd⟩ = ab</code> if I go down that route</p>",
        "id": 204825936,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1595524441
    },
    {
        "content": "<p>Which looks like a trivial statement</p>",
        "id": 204825987,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1595524447
    },
    {
        "content": "<p>Does <code>simp</code> work?</p>",
        "id": 204826222,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1595524586
    },
    {
        "content": "<p>I think this is <code>prod.eta</code></p>",
        "id": 204826250,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1595524605
    },
    {
        "content": "<p>No, it doesn't</p>",
        "id": 204826274,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1595524620
    },
    {
        "content": "<p>Or <code>sigma.eta</code></p>",
        "id": 204826282,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1595524623
    },
    {
        "content": "<p>The angle brackets are <code>sigma.mk</code></p>",
        "id": 204826286,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1595524627
    },
    {
        "content": "<p>but <code>ab</code> is a <code>prod</code></p>",
        "id": 204826292,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1595524633
    },
    {
        "content": "<p>So it's <code>prod.eta</code> I think.</p>",
        "id": 204826332,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1595524661
    },
    {
        "content": "<p><code>apply prod.eta</code> should work hopefully.</p>",
        "id": 204826348,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1595524674
    },
    {
        "content": "<p>While you're at it, please rewrite <code>equiv.sigma_equiv_prod</code> to avoid <code>λ ⟨a, b⟩</code></p>",
        "id": 204826355,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1595524677
    },
    {
        "content": "<p>Use <code>λ a, (a.1, b.1)</code> instead.</p>",
        "id": 204826404,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1595524688
    },
    {
        "content": "<p><code>prod.eta</code> doesn't exist</p>",
        "id": 204826449,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1595524726
    },
    {
        "content": "<p><code>prod.mk.eta</code> does the trick though!</p>",
        "id": 204826465,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1595524740
    },
    {
        "content": "<p><code>sigma_equiv_prod</code> is missing <code>simp</code> lemmas.</p>",
        "id": 204826536,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1595524795
    },
    {
        "content": "<p>Goign the other way, how can I extract <code>(a, b) = ab</code> from <code>h: ⇑(equiv.sigma_equiv_prod α β) ⟨a, b⟩ = ab</code>?</p>",
        "id": 204826641,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1595524856
    },
    {
        "content": "<p>The whole <code>sigma</code>/<code>psigma</code> section of <code>data/equiv/basic</code> should be fixed to (a) don't use <code>λ ⟨a, b⟩</code>; (b) have <code>simp</code> lemmas.</p>",
        "id": 204826673,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1595524878
    },
    {
        "content": "<p>Is <code>λ ⟨a, b⟩</code> always an antipattern?</p>",
        "id": 204826722,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1595524900
    },
    {
        "content": "<p>Using <code>λ ⟨a, b⟩, _</code> is a bad idea whenever you care about definitional equality of the result.</p>",
        "id": 204826845,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1595524953
    },
    {
        "content": "<p>I.e., when you define a function. It's OK in a proof.</p>",
        "id": 204826872,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1595524973
    },
    {
        "content": "<p>The main problem with <code>def f : α × β → α := λ ⟨a, b⟩, a</code> is that <code>f p</code> is not defeq <code>p.1</code>.</p>",
        "id": 204827072,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1595525081
    },
    {
        "content": "<p>But <code>f (a, b)</code> is defeq <code>f a</code>.</p>",
        "id": 204827085,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1595525090
    },
    {
        "content": "<p>Ok, my end result is</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span>\n<span class=\"n\">def</span> <span class=\"n\">bind_prod</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">sa</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fb</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">finset</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n  <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">sa</span><span class=\"bp\">.</span><span class=\"n\">sigma</span> <span class=\"n\">fb</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">sigma_equiv_prod</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_embedding</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">mem_bind_prod</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">sa</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fb</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">finset</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ab</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">ab</span> <span class=\"err\">∈</span> <span class=\"n\">bind_prod</span> <span class=\"n\">sa</span> <span class=\"n\">fb</span> <span class=\"bp\">↔</span> <span class=\"n\">ab</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"err\">∈</span> <span class=\"n\">sa</span> <span class=\"bp\">∧</span> <span class=\"n\">ab</span><span class=\"bp\">.</span><span class=\"n\">snd</span> <span class=\"err\">∈</span> <span class=\"n\">fb</span> <span class=\"n\">ab</span><span class=\"bp\">.</span><span class=\"n\">fst</span>\n<span class=\"o\">:=</span> <span class=\"k\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">bind_prod</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">mem_map</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">exists_prop</span><span class=\"o\">,</span> <span class=\"n\">sigma</span><span class=\"bp\">.</span><span class=\"n\">exists</span><span class=\"o\">,</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">mem_sigma</span><span class=\"o\">,</span> <span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">to_embedding_coe_fn</span><span class=\"o\">,</span> <span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">sigma_equiv_prod</span><span class=\"o\">,</span> <span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">coe_fn_mk</span><span class=\"o\">],</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">rintros</span> <span class=\"bp\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">hb</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">h</span><span class=\"o\">],</span>\n    <span class=\"n\">exact</span> <span class=\"bp\">⟨</span><span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">hb</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">rintros</span> <span class=\"bp\">⟨</span><span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">hb</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"o\">[</span><span class=\"n\">ab</span><span class=\"bp\">.</span><span class=\"n\">fst</span><span class=\"o\">,</span> <span class=\"n\">ab</span><span class=\"bp\">.</span><span class=\"n\">snd</span><span class=\"o\">],</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"n\">true_and</span><span class=\"o\">,</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">mk</span><span class=\"bp\">.</span><span class=\"n\">eta</span><span class=\"o\">],</span>\n  <span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 204827509,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1595525354
    },
    {
        "content": "<p>It seems like I ought to be able to use the reverse equivalence to simplify the <code>lemma</code> there, but I don't see how.</p>",
        "id": 204828980,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1595526131
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/113488-general/topic/finset.2Ebind.20without.20decidable_eq/near/204826355\">said</a>:</p>\n<blockquote>\n<p>While you're at it, please rewrite <code>equiv.sigma_equiv_prod</code> to avoid <code>λ ⟨a, b⟩</code></p>\n</blockquote>\n<p>I don't feel confident doing this - perhaps worth opening a github issue so that it's not forgotten about?</p>",
        "id": 204829964,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1595526573
    },
    {
        "content": "<p>It was easier to PR it: <a href=\"https://github.com/leanprover-community/mathlib/issues/3530\">#3530</a></p>",
        "id": 204833305,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1595528063
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/113488-general/topic/finset.2Ebind.20without.20decidable_eq/near/204827072\">said</a>:</p>\n<blockquote>\n<p>The main problem with <code>def f : α × β → α := λ ⟨a, b⟩, a</code> is that <code>f p</code> is not defeq <code>p.1</code>.</p>\n</blockquote>\n<p>Do we have an issue for this? Is there any reason (except effort) not to redefine pattern-matching lambdas so that they desugar to projections?</p>",
        "id": 204839436,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1595530696
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> <span aria-label=\"up\" class=\"emoji emoji-2b06\" role=\"img\" title=\"up\">:up:</span> Do I understand correctly that this should be possible if the source type has only one constructor?</p>",
        "id": 204842967,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1595532351
    },
    {
        "content": "<p>also the type has to be large eliminating (i.e. not <code>Exists</code>)</p>",
        "id": 204876967,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595562492
    },
    {
        "content": "<p>in fact it should probably be restricted to structures anyway since one-constructor inductives don't have standard projections</p>",
        "id": 204876979,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595562535
    },
    {
        "content": "<p>This is not the desired behavior for programming uses though, I'm not sure how I feel about destructuring <code>let</code> doing this all the time</p>",
        "id": 204877071,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595562647
    },
    {
        "content": "<p>actually I take it back, as long as <code>let (x, y) := s in t x y</code> expands to <code>(\\lam p, t p.1 p.2) s</code>it should have the right VM-computational behavior</p>",
        "id": 204877141,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595562776
    },
    {
        "content": "<p>I think the VM generates special instructions for projections (i.e. access one field) that are different from the ones generated by pattern-matching (i.e. destruct the object and put all fields on the stack).</p>",
        "id": 204892395,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1595580513
    },
    {
        "content": "<p>But I'm still open to a PR that turns <code>λ ⟨a,b⟩, a</code> into a projection, given the nicer definitional reduction.</p>",
        "id": 204892464,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1595580582
    },
    {
        "content": "<p>I've also requested this feature in the past but at this point my main concern with it is a migration plan for Lean 4</p>",
        "id": 204983117,
        "sender_full_name": "Reid Barton",
        "timestamp": 1595643009
    }
]