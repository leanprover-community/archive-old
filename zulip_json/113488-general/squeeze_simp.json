[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> To what extend do you think <code>sed</code> and <code>lean</code> could cooperate to automatically turn every <code>simp</code> into a <code>squeeze_simp</code>, and then every <code>squeeze_simp</code> into a <code>simp only</code>? Can we automate Kenny?</p>",
        "id": 135401004,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539003667
    },
    {
        "content": "<p>But we like Kenny!</p>",
        "id": 135406348,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1539008335
    },
    {
        "content": "<p>I was thinking along those lines but I was thinking of adding a feature to the emacs Lean mode. I'm not how I would do it for VS code though. Do you know how to script it?</p>",
        "id": 135406424,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1539008415
    },
    {
        "content": "<p>I don't know anything about VScode</p>",
        "id": 135406432,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539008443
    },
    {
        "content": "<p>But couldn't this just be a CLI-only thing?</p>",
        "id": 135406440,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539008454
    },
    {
        "content": "<p>For other purposes the output of <code>squeeze_simp</code> is already very useful.</p>",
        "id": 135406455,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539008476
    },
    {
        "content": "<p>Can't we use a hole command here again?</p>",
        "id": 135406473,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1539008498
    },
    {
        "content": "<p>you still have to click on a hole command</p>",
        "id": 135406490,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539008513
    },
    {
        "content": "<p>Exactly</p>",
        "id": 135406493,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539008520
    },
    {
        "content": "<p>indeed, you have to manually edit the file to put a hole in in the first place</p>",
        "id": 135406537,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539008538
    },
    {
        "content": "<p>I want <code>sed</code> to \"click\" on the hole command.</p>",
        "id": 135406538,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539008539
    },
    {
        "content": "<p>Oh you mean you want this for batch processing?</p>",
        "id": 135406554,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1539008556
    },
    {
        "content": "<p>The difficult thing about using something like sed is detecting the end of the input <code>squeeze_simp</code></p>",
        "id": 135406562,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1539008559
    },
    {
        "content": "<p>But I guess we could output it in Lean</p>",
        "id": 135406574,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1539008568
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> exactly</p>",
        "id": 135406591,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1539008599
    },
    {
        "content": "<p>Sorry I read too quickly the beginning of this thread (I'm fighting dependent rw)</p>",
        "id": 135406602,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1539008630
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> has shown us how useful awk can be in these situations. Do you think if we output the beginning line and column number of the input, the ending line and column number of the input and the replacement, we can get awk to go in there and do the replacement? You'd probably also have to go from the last to the first if you want to do it in one go so that the line numbers don't get invalidated.</p>",
        "id": 135407907,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1539009678
    },
    {
        "content": "<p>Sure, that should definitely be possible</p>",
        "id": 135408204,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539009918
    },
    {
        "content": "<p>I guess <code>squeeze_simp</code> can get access to its location in the file via some tactic_state magic, right?</p>",
        "id": 135408213,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539009945
    },
    {
        "content": "<p>Or you make <code>squeeze_simp</code> output a patch (-;</p>",
        "id": 135408290,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539009996
    },
    {
        "content": "<p>Then we can just commit it, and git takes care of the rest <span class=\"emoji emoji-1f606\" title=\"lol\">:lol:</span></p>",
        "id": 135408296,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539010009
    },
    {
        "content": "<p>I just looked into the patch file format. It seems like more work to format than to just do it ourselves</p>",
        "id": 135413309,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1539014910
    },
    {
        "content": "<p>Ok, so how about your suggestion, with line+col numbers</p>",
        "id": 135414054,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539015612
    },
    {
        "content": "<p>I think the best bet is to use <code>awk</code> but I'll have to learn it</p>",
        "id": 135415134,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1539016820
    },
    {
        "content": "<p>Right now I'm experimenting with emacs to see if I can get a nice first approximation</p>",
        "id": 135415187,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1539016916
    },
    {
        "content": "<p><code>awk</code> is not hard. Also, I wouldn't mind helping you.</p>",
        "id": 135415446,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539017247
    },
    {
        "content": "<p>We could use <code>sed</code> to squeeze_simpify a <code>.lean</code> file. After that, we run <code>lean --make</code> on the file, and capture the stdout.</p>",
        "id": 135415506,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539017292
    },
    {
        "content": "<p>If <code>squeeze_simp</code> can produce output of the form <code>line:column:replacement_text</code> I think we can take it from there.</p>",
        "id": 135415521,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539017323
    },
    {
        "content": "<p>I was thinking of a format like this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"mi\">84</span><span class=\"o\">:</span><span class=\"mi\">23</span><span class=\"o\">:</span>\n<span class=\"mi\">86</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"o\">:</span>\n<span class=\"c1\">--- BEGIN ---</span>\n<span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">perm_cons</span><span class=\"o\">,</span> <span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">cons_coe</span><span class=\"o\">,</span> <span class=\"n\">iff_self</span><span class=\"o\">,</span> <span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">coe_eq_coe</span><span class=\"o\">,</span> <span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">quot_mk_to_coe&#39;&#39;</span><span class=\"o\">]</span>\n<span class=\"c1\">--- END ---</span>\n</pre></div>",
        "id": 135415693,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1539017562
    },
    {
        "content": "<p>unix prefers to keep everything on 1 line.</p>",
        "id": 135415718,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539017633
    },
    {
        "content": "<p>In that case, how about <code>line0:col0:line1:col1:replacement_text</code>?</p>",
        "id": 135415785,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1539017693
    },
    {
        "content": "<p>Looks good</p>",
        "id": 135415873,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539017787
    },
    {
        "content": "<p>Unless we want to anticipate multiline replacement texts</p>",
        "id": 135415884,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539017813
    },
    {
        "content": "<p>That's what I'm looking at now. The replacement is sometimes multiline but there's no real reason to be. I'll restrict it to one line and let the user reformat if needed</p>",
        "id": 135415997,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1539017970
    },
    {
        "content": "<p>There is no \"user\" if we run this in batch mode over 25 files.</p>",
        "id": 135416006,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539017992
    },
    {
        "content": "<p>But we can write a smart awk script</p>",
        "id": 135416069,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539018021
    },
    {
        "content": "<p>It can try to reformat that line, breaking on suitable <code>,</code></p>",
        "id": 135416073,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539018035
    },
    {
        "content": "<p>That's tricky because it might not be alone on its line</p>",
        "id": 135416182,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1539018185
    },
    {
        "content": "<p>I can compute the old line length, and the new one, etc...</p>",
        "id": 135416288,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539018325
    },
    {
        "content": "<p>It definitely makes a trivial thing a lot harder</p>",
        "id": 135416292,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539018333
    },
    {
        "content": "<p>Let's leave it for the \"future work\" section</p>",
        "id": 135416372,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1539018466
    },
    {
        "content": "<p>It might become necessary to have a Lean code formatter which would make all of that good work redundant</p>",
        "id": 135416427,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1539018495
    },
    {
        "content": "<p>Yep, sounds good</p>",
        "id": 135416431,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539018505
    },
    {
        "content": "<p>This proof engineering stuff is so funny. We're tweaking eternal truths :P</p>",
        "id": 135416520,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1539018606
    },
    {
        "content": "<p>As impatient as I get with Lean and mathlib, it's pretty great that it finds my mistakes faster than my supervisor :D</p>",
        "id": 135416567,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1539018672
    },
    {
        "content": "<p>Are there other \"tactics with output\" where this kind of tooling would also be useful? Maybe <code>tidy</code>?</p>",
        "id": 135416822,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1539018933
    },
    {
        "content": "<p><code>tidy</code> already makes output</p>",
        "id": 135416879,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539018963
    },
    {
        "content": "<p>I'll be reading a bit of Milne to my kids... see you guys soon!</p>",
        "id": 135416916,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539019002
    },
    {
        "content": "<p>Have fun!</p>",
        "id": 135416940,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1539019029
    },
    {
        "content": "<p>Indeed, what I mean is the output format being discussed here something we should also consider for e.g. <code>tidy</code>?</p>",
        "id": 135417013,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1539019092
    },
    {
        "content": "<p>That could be useful. It might be more useful for <code>tidy</code> to have it tied into the IDE because you probably don't use <code>tidy</code><em>en masse</em></p>",
        "id": 135417183,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1539019303
    },
    {
        "content": "<p>Where are you printing the replacement text?  Trace messages?</p>",
        "id": 135417482,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1539019657
    },
    {
        "content": "<p>Yes exactly</p>",
        "id": 135417541,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1539019717
    },
    {
        "content": "<p>It's pretty easy to hook them up in vscode: in the extension, you just need to <a href=\"https://github.com/Microsoft/vscode/blob/5b03dcd69d98b6540f789868cf4647b6486ed739/src/vs/vscode.d.ts#L2046-L2106\" target=\"_blank\" title=\"https://github.com/Microsoft/vscode/blob/5b03dcd69d98b6540f789868cf4647b6486ed739/src/vs/vscode.d.ts#L2046-L2106\">return a list of code actions</a>.  Then you can execute these replacements with <code>ctrl+.</code> (similar to holes, which are also implemented using code actions in the extension).</p>",
        "id": 135417756,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1539019935
    },
    {
        "content": "<p>Emacs gives the line and column of the command issuing the trace. Does VS code also do the same?</p>",
        "id": 135417850,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1539020070
    },
    {
        "content": "<p>A few suggestions for the format: it should not occur by accident (in a simp trace e.g.).  And it would be nice to have a (textual) description for the replacement (vscode shows this in the dropdown).  Ideally also the <a href=\"https://github.com/Microsoft/vscode/blob/5b03dcd69d98b6540f789868cf4647b6486ed739/src/vs/vscode.d.ts#L1926-L1996\" target=\"_blank\" title=\"https://github.com/Microsoft/vscode/blob/5b03dcd69d98b6540f789868cf4647b6486ed739/src/vs/vscode.d.ts#L1926-L1996\">kind of code action</a>, e.g. vscode can apply <em>all</em> quickfixes in a given file automatically.</p>",
        "id": 135417859,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1539020081
    },
    {
        "content": "<p>We have access to the same position information, yes.  However it only includes the start position of the tactic unfortunately.</p>",
        "id": 135417920,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1539020148
    },
    {
        "content": "<p>Does it run them backward so that the line numbers remain valid?</p>",
        "id": 135417924,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1539020154
    },
    {
        "content": "<p>Good question.  I don't really know.  If we do one-line replacements then it shouldn't matter too much.</p>",
        "id": 135417971,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1539020184
    },
    {
        "content": "<p>In the parser <code>cur_pos</code> can give me an arbitrary position. I'm putting it at the end and it gives me a good approximation</p>",
        "id": 135417976,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1539020201
    },
    {
        "content": "<p>Ooh, this is nice. Can we just get a generic hook for writing things from lean?</p>",
        "id": 135417980,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539020209
    },
    {
        "content": "<p>I got a strange <code>squeeze_simp</code> behavior, where the trace output does not has the same effect as the original one. The example is as follows (in a complete lattice):</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">Inf_sup_Inf</span> <span class=\"o\">:</span> <span class=\"n\">Inf</span> <span class=\"n\">s</span> <span class=\"err\">⊔</span> <span class=\"n\">Inf</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"n\">Inf</span> <span class=\"o\">((</span><span class=\"bp\">λ</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"err\">⊔</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"err\">&#39;&#39;</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"n\">s</span> <span class=\"n\">t</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">le_antisymm</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">squeeze_simp</span><span class=\"o\">,</span>\n    <span class=\"n\">sorry</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">sorry</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>After <code>squeeze_simp</code>, the goal is</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"n\">x</span> <span class=\"n\">x_1</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">x_1</span> <span class=\"err\">∈</span> <span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"err\">⊔</span> <span class=\"n\">x_1</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">Inf</span> <span class=\"n\">s</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">Inf</span> <span class=\"n\">t</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span>\n</pre></div>\n\n\n<p>But if I copy the trace formula (hey, I never noticed that it looks like real math:) given by <code>squeeze_simp</code>, i.e.,</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">and_imp</span><span class=\"o\">,</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem_image</span><span class=\"o\">,</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem_prod</span><span class=\"o\">,</span> <span class=\"n\">lattice</span><span class=\"bp\">.</span><span class=\"n\">le_Inf_iff</span><span class=\"o\">,</span>\n               <span class=\"n\">exists_imp_distrib</span><span class=\"o\">,</span> <span class=\"n\">lattice</span><span class=\"bp\">.</span><span class=\"n\">sup_le_iff</span><span class=\"o\">,</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">exists</span><span class=\"o\">],</span>\n</pre></div>\n\n\n<p>then I get the double goal</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"n\">x</span> <span class=\"n\">x_1</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">x_1</span> <span class=\"err\">∈</span> <span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"err\">⊔</span> <span class=\"n\">x_1</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">Inf</span> <span class=\"n\">s</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">∧</span>\n    <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"n\">x</span> <span class=\"n\">x_1</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">x_1</span> <span class=\"err\">∈</span> <span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"err\">⊔</span> <span class=\"n\">x_1</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">Inf</span> <span class=\"n\">t</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span>\n</pre></div>\n\n\n<p>Any idea for the reason of this behavior?</p>",
        "id": 160435221,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1552256278
    },
    {
        "content": "<p>Can you open an issue and put up a MWE? I'll look into it.</p>",
        "id": 160435278,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1552256383
    },
    {
        "content": "<p>Done.</p>",
        "id": 160435569,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1552256843
    },
    {
        "content": "<p>If you remove <code>lattice.sup_le_iff</code> from the list, you get the same effect as not having <code>simp only</code>. I don't get why <code>squeeze_simp</code> suggests it. I'll keep working on it</p>",
        "id": 160437932,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1552260594
    },
    {
        "content": "<p>I'm not sure it is worth trying for 100% fidelity in translating <code>squeeze_simp</code> to an appropriate <code>simp only</code>. The commands are complicated and almost nondeterministic, so I'm not at all surprised that there are edge cases where it doesn't work, and also suggested rewrites that don't need to be in the rewrite list. You should take the output of <code>squeeze_simp</code> as a base for revision rather than an actual reliable representation of what was used.</p>",
        "id": 160438110,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552260906
    }
]