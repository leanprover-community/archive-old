[
    {
        "content": "<p>Hi,</p>\n<p>I wanted to write and prove some code, but passing down proof needed for all function to work well is tedious<br>\nIs there a better patern than that ?</p>",
        "id": 268051243,
        "sender_full_name": "Alice Laroche",
        "timestamp": 1642184003
    },
    {
        "content": "<p>Use junk values!</p>",
        "id": 268051271,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1642184022
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"364007\">@Alice Laroche</span> it depends a lot on your use case and design. Can you be more specific on what you want to do? Maybe pointing out some code that you already have in place</p>",
        "id": 268051678,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1642184251
    },
    {
        "content": "<p>For exemple let's say i want to use <code>nth</code> or <code>nth_le</code><br>\nIf I use the first i need to propagate <code>option something</code> all the way up only for proving it will never be <code>none</code> so using <code>option</code> to begin with seem unnecessary <br>\nIf i use the second i need to pass proof from function to function to pass the proof needed by <code>nth_le</code> , but it create a mess because all my functions become dependant type<br>\nSo i was wondering if there was a third option</p>",
        "id": 268052519,
        "sender_full_name": "Alice Laroche",
        "timestamp": 1642184683
    },
    {
        "content": "<p>Instead of using <code>option</code>, you can return a junk value. For example <a href=\"https://leanprover-community.github.io/mathlib_docs/find/real.sqrt\">docs#real.sqrt</a> returns <code>0</code> on negative reals.</p>",
        "id": 268052633,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1642184740
    },
    {
        "content": "<p>In many case junk value don't exist because they could mean something else</p>",
        "id": 268052974,
        "sender_full_name": "Alice Laroche",
        "timestamp": 1642184869
    },
    {
        "content": "<p>Is it possible to match and resolve the <code>option something</code> right before the first function call so you don't have to pass <code>option something</code> through your pipeline of functions?</p>",
        "id": 268053983,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1642185294
    },
    {
        "content": "<p>I don't think so, like i said it's very like <code>nth</code> Is there a third way of writing <code>nth</code> that don't use neither option or a proof of absurdity</p>",
        "id": 268055376,
        "sender_full_name": "Alice Laroche",
        "timestamp": 1642185981
    },
    {
        "content": "<p>Maybe you want to bind the options? Monadic programming? I'm just guessing at this point. A MWE would be very helpful.</p>",
        "id": 268055397,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1642185997
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"364007\">Alice Laroche</span> <a href=\"#narrow/stream/113488-general/topic/Proving.20code/near/268055376\">said</a>:</p>\n<blockquote>\n<p>I don't think so, like i said it's very like <code>nth</code> Is there a third way of writing <code>nth</code> that don't use neither option or a proof of absurdity</p>\n</blockquote>\n<p>Yes, making it return a junk value.</p>",
        "id": 268055441,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1642186015
    },
    {
        "content": "<p>That's how <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.head\">docs#list.head</a> works, for example.</p>",
        "id": 268055522,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1642186061
    },
    {
        "content": "<p>Errh, i think i wanted something like throwing an exception and prove that never happen, but now i feel stupid about that<br>\n<code>option</code> is the best choice</p>",
        "id": 268056078,
        "sender_full_name": "Alice Laroche",
        "timestamp": 1642186352
    },
    {
        "content": "<p>There is a function <a href=\"https://leanprover-community.github.io/mathlib_docs/find/option.get\">docs#option.get</a> that will allow you to extract the value from an option if you prove it is non-<code>none</code>. So this is roughly equivalent to \"throw an exception and prove that it will never happen\"</p>",
        "id": 268056344,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1642186470
    },
    {
        "content": "<p>Alternatively, you can use a precondition which is crafted specifically to discharge any side conditions that arise; then you have to prove at the top level that the precondition can be satisfied. This is essentially the dual approach; with both methods writing the program is easy and proving that it is total is hard</p>",
        "id": 268056625,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1642186611
    }
]