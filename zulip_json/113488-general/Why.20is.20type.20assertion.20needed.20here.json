[
    {
        "content": "<p>Sorry if this is a beginner question. The following throws a error \"invalid field notation\", and complains on the fourth line that  <code>ps has type ?m_1</code>. But if I mouse over <code>ps</code> on the third line, it correctly says <code>ps : ℕ × ℕ</code>. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">bertrand_interval</span> <span class=\"o\">(</span><span class=\"n\">n_low</span> <span class=\"n\">n_high</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">plist</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">primeplist</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">p</span> <span class=\"bp\">∈</span> <span class=\"n\">plist</span><span class=\"o\">,</span> <span class=\"n\">prime</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">covering</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">ps</span> <span class=\"bp\">∈</span> <span class=\"n\">list.zip</span> <span class=\"n\">plist</span> <span class=\"o\">(</span><span class=\"n\">list.tail</span> <span class=\"n\">plist</span><span class=\"o\">),</span>\n        <span class=\"o\">(</span><span class=\"n\">ps</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">ps.1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">plist.head</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">plist.reverse.head</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">nat.prime</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>If I add a type ascription, it's fine:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">bertrand_interval</span> <span class=\"o\">(</span><span class=\"n\">n_low</span> <span class=\"n\">n_high</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">plist</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">primeplist</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">p</span> <span class=\"bp\">∈</span> <span class=\"n\">plist</span><span class=\"o\">,</span> <span class=\"n\">prime</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">covering</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">ps</span> <span class=\"bp\">∈</span> <span class=\"n\">list.zip</span> <span class=\"n\">plist</span> <span class=\"o\">(</span><span class=\"n\">list.tail</span> <span class=\"n\">plist</span><span class=\"o\">),</span>\n        <span class=\"o\">(</span><span class=\"n\">ps</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">ps.1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">plist.head</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">plist.reverse.head</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">nat.prime</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Why is this type ascription necessary?</p>",
        "id": 265621763,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1640038384
    },
    {
        "content": "<p>I guess I understand that there might in theory be multiple types that can implement has_mem of a list of ℕ × ℕ, even if in practice only ℕ × ℕ does. But then how does the mouseover know the type!?</p>",
        "id": 265622301,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1640038556
    },
    {
        "content": "<p>Yes that's exactly it -- <code>has_mem</code> only knows that <code>ps</code> has type <code>?m_1 : Type</code> and the unifier isn't going to tell it any more information.</p>",
        "id": 265623715,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1640039539
    },
    {
        "content": "<p>But then the mouseover thing is almost magical. How can it possibly know the type <code>ℕ × ℕ</code> when that's possibly not even the correct type?</p>",
        "id": 265627104,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1640041910
    },
    {
        "content": "<p>Is it indeed possible to implement two <code>has_mem</code> instances with the same second type argument? Does that happen anywhere in mathlib?</p>",
        "id": 265627376,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1640042105
    },
    {
        "content": "<p>It is possible to do (in the sense that lean won't stop you), but it's about as good an idea as defining a second instance of <code>semiring nat</code></p>",
        "id": 265628685,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1640043155
    },
    {
        "content": "<p>What's happening is that field notation has to be resolved relatively early in the elaboration process, such that it essentially can't see any text that comes after the field projection, but the error doesn't actually stop elaboration, and the hover reports type information coming from later in the term</p>",
        "id": 265628791,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1640043250
    }
]