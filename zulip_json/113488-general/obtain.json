[
    {
        "content": "<p>I just realised there is <code>obtain</code>:<br>\n<a href=\"https://github.com/leanprover/mathlib/search?q=obtain&amp;unscoped_q=obtain\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/search?q=obtain&amp;unscoped_q=obtain\">https://github.com/leanprover/mathlib/search?q=obtain&amp;unscoped_q=obtain</a></p>",
        "id": 147351059,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541739574
    },
    {
        "content": "<p>I have not yet figured out what it does.</p>",
        "id": 147351108,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541739615
    },
    {
        "content": "<p>I think I looked it up before and I concluded it was a lean 2 thing?</p>",
        "id": 147351132,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1541739705
    },
    {
        "content": "<p>it is a lean 2 thing. <code>obtain x h, from expr, expr'</code> is the lean 2 way of writing <code>let &lt;x, h&gt; := expr in expr'</code>, at least when <code>expr</code> has exists type. I forget how general it is</p>",
        "id": 147351875,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541741079
    },
    {
        "content": "<p>the style guide also uses <code>take</code>, which is no longer a keyword and is the same as <code>λ</code></p>",
        "id": 147351938,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541741178
    },
    {
        "content": "<p>Ok, thanks for explaining!</p>",
        "id": 147351993,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541741284
    },
    {
        "content": "<p><code>obtain</code> used to work on all inductive types with a single constructor. It was the way to do <code>cases</code> in term mode.</p>",
        "id": 147352250,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1541741659
    },
    {
        "content": "<p>I just found myself writing</p>\n<div class=\"codehilite\"><pre><span></span> obtain ⟨V, ⟨m,h₂⟩⟩ : _ := f.r U h₁\n</pre></div>\n\n\n<p>i.e. using <code>obtain</code>, but not wanting to specify the type. This is synonymous with</p>\n<div class=\"codehilite\"><pre><span></span>rcases f.r U h₁ with ⟨V, ⟨m,h₂⟩⟩,\n</pre></div>\n\n\n<p>but I wonder if we should just support dropping the type specification in obtain, if the proof is given after <code>:=</code>.</p>",
        "id": 173183243,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1565770300
    },
    {
        "content": "<p>(Really I'd like <code>have</code> to just do this...)</p>",
        "id": 173183254,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1565770316
    },
    {
        "content": "<p>Hah, I was confused about how this topic started in November, since I just added the <code>obtain</code> tactic last month. We should probably get rid of the Lean 2 syntax in the style guide...</p>",
        "id": 173186457,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1565773676
    },
    {
        "content": "<p>I didn't support that syntax in <code>obtain</code> because it is literally just reordering arguments to <code>rcases</code>. But I'll grant that it reads better with <code>obtain</code> sometimes.</p>",
        "id": 173186540,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1565773747
    },
    {
        "content": "<p>And it doesn't really hurt to handle it.</p>",
        "id": 173186550,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1565773763
    },
    {
        "content": "<p>I haven't had a chance to use <code>obtain</code> yet but I quite like the uniformity of its syntax relative to <code>have</code> and <code>let</code>. I guess <code>let</code> can't do this in tactic mode?</p>",
        "id": 173201934,
        "sender_full_name": "Reid Barton",
        "timestamp": 1565789052
    },
    {
        "content": "<p>I think tactic mode <code>let</code> doesn't destruct things at all, right?</p>",
        "id": 173202960,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1565789633
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/1327\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/pull/1327\">https://github.com/leanprover-community/mathlib/pull/1327</a> by the way.</p>",
        "id": 173203157,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1565789752
    }
]