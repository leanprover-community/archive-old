[
    {
        "content": "<p><code>simp only</code> with no lemmas unfolds <code>s ∈ f</code> to <code>s in f.sets</code>. How can I prevent this?</p>",
        "id": 214759413,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603830381
    },
    {
        "content": "<p>what does <code>simplify.rewrite</code> say?</p>",
        "id": 214759773,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603830541
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">order.filter.basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">filter</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.simplify.rewrite</span> <span class=\"n\">true</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f₁</span> <span class=\"n\">f₂</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">f₁</span> <span class=\"bp\">⊔</span> <span class=\"n\">f₂</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mem_sup_sets</span><span class=\"o\">],</span>  <span class=\"o\">}</span>\n</code></pre></div>\n\n<p>Output:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">6</span><span class=\"o\">:</span><span class=\"mi\">62</span><span class=\"o\">:</span> <span class=\"mi\">0</span><span class=\"bp\">.</span> <span class=\"o\">[</span><span class=\"n\">simplify.rewrite</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">filter.mem_sup_sets</span><span class=\"o\">]:</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">f₁</span> <span class=\"bp\">⊔</span> <span class=\"n\">f₂</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sets</span> <span class=\"bp\">==&gt;</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">f₁</span> <span class=\"bp\">∧</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">f₂</span>\n</code></pre></div>",
        "id": 214761526,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603831364
    },
    {
        "content": "<p>Tactic state after <code>simp</code> shows <code>.sets</code></p>",
        "id": 214761620,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603831417
    },
    {
        "content": "<p>By process of elimination, setting <code>{proj := ff}</code> turns off the behavior</p>",
        "id": 214762132,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603831675
    },
    {
        "content": "<p>The problem is that <code>filter.has_mem</code> is marked <code>@[reducible]</code></p>",
        "id": 214762539,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603831885
    },
    {
        "content": "<p>I'll try to remove this.</p>",
        "id": 214762788,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603832023
    }
]