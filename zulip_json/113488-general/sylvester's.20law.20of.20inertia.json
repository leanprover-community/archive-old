[
    {
        "content": "<p>If there are people looking for an interesting first project to work on, with the aim of making a PR to mathlib, I'm willing to coach <a href=\"https://github.com/leanprover-community/mathlib/issues/2551\">#2551</a> on Sylvester's law of inertia</p>",
        "id": 198415639,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590135014
    },
    {
        "content": "<p>I was looking at that PR and when trying to figure out what ingredients are already in mathlib, I realized that I don't really know how experts navigate the library. Do you typically grep the source tree directly? Use the google search on the mathlib docs webpage? Some better method I don't know about (maybe a VSCode or emacs trick)? Relatedly, google search for \"eigenvector\" turned up no hits in the mathlib docs, and the same when searching the github repo (which I guess would also turn up PRs that mentioned this term, if there were any?) -- this seemed surprising to me. So I grepped and found only the following [using a terminal with poor unicode support]</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"err\">$</span> <span class=\"n\">grep</span> <span class=\"bp\">-</span><span class=\"n\">r</span> <span class=\"n\">eigenv</span> <span class=\"bp\">.</span>\n<span class=\"bp\">./</span><span class=\"n\">archive</span><span class=\"bp\">/</span><span class=\"n\">sensitivity</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"kn\">lemma</span> <span class=\"n\">exists_eigenvalue</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">hH</span> <span class=\"o\">:</span> <span class=\"n\">Card</span> <span class=\"n\">H</span> <span class=\"err\">ΓëÑ</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"bp\">./</span><span class=\"n\">archive</span><span class=\"bp\">/</span><span class=\"n\">sensitivity</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span>  <span class=\"n\">rcases</span> <span class=\"n\">exists_eigenvalue</span> <span class=\"n\">H</span> <span class=\"n\">hH</span> <span class=\"k\">with</span> <span class=\"err\">Γƒ¿</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"err\">Γƒ¿Γƒ¿</span><span class=\"n\">y_mem_H</span><span class=\"o\">,</span> <span class=\"n\">y_mem_g</span><span class=\"err\">Γƒ⌐</span><span class=\"o\">,</span> <span class=\"n\">y_ne</span><span class=\"err\">Γƒ⌐Γƒ⌐</span><span class=\"o\">,</span>\n</code></pre></div>\n\n\n<p>Am I somehow missing a bunch of linear algebra stuff, or is the current state of the art quite barebones?</p>",
        "id": 198515737,
        "sender_full_name": "Sam Lichtenstein",
        "timestamp": 1590204607
    },
    {
        "content": "<p>Eigenvalues are not developed. I think this was blocked on the characteristic polynomial, but that might be solved now</p>",
        "id": 198515967,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590205048
    },
    {
        "content": "<p>I suppose that the eigenvalues of a linear map are relatively easy to define</p>",
        "id": 198516010,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590205099
    },
    {
        "content": "<p>although maybe it is more complicated if you want the eigenvalues to live in an algebraic extension of the scalar ring of the module</p>",
        "id": 198516031,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590205155
    },
    {
        "content": "<p>\" I think this was blocked on the characteristic polynomial, but that might be solved now\"</p>\n<p>Does this imply that there is a bunch of quasi-written code out there in various people's clones? In general, is there a way to distinguish cases where (supposedly simple thing X) is missing from mathlib because nobody has bothered to formalize it, from other cases where it is missing because there is some key technical bottleneck or disagreement about the implementation, and once that's resolved X is already effectively done?</p>",
        "id": 198516159,
        "sender_full_name": "Sam Lichtenstein",
        "timestamp": 1590205332
    },
    {
        "content": "<p>the best way is to ask here</p>",
        "id": 198516269,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590205553
    },
    {
        "content": "<p>if you are lucky there might be an issue about it, or it could be on a docs or project page, but I would say that is the minority</p>",
        "id": 198516327,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590205632
    },
    {
        "content": "<p>I guess that is a good pragmatic answer but doesn't seem like an ideal, scalable solution? I see now that the \"undergraduate math list\" thread in #general started with some complaints related to mine above, about navigability / discoverability</p>",
        "id": 198516331,
        "sender_full_name": "Sam Lichtenstein",
        "timestamp": 1590205666
    },
    {
        "content": "<p>also, to clarify, am I correct that the community's convention is NOT to allow <code>sorry</code> in committed .lean files in mathlib, nor to clutter these files with comments containing long TODO lists of lemmas/theorems that would be nice to have eventually? so github issues are the \"canonical\" place to look for known missing features (aside from asking here)</p>",
        "id": 198516390,
        "sender_full_name": "Sam Lichtenstein",
        "timestamp": 1590205772
    },
    {
        "content": "<p><code>sorry</code> is definitely not allowed, except possibly in the <code>roadmap/</code> directory where there's some trick for using it.</p>",
        "id": 198516448,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1590205854
    },
    {
        "content": "<p>ah, I had not noticed the <code>roadmap/</code> directory, which is a nice idea -- but seems sparsely populated :)</p>",
        "id": 198516506,
        "sender_full_name": "Sam Lichtenstein",
        "timestamp": 1590205965
    },
    {
        "content": "<p>I don't know what to say about long TODOs. I guess I don't see why anyone would want to add very long TODOs.</p>\n<p>GitHub issues is the right place to look outside of Zulip for now. We should make an effort to document more things there, since Zulip is definitely less accessible.</p>",
        "id": 198516508,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1590205967
    },
    {
        "content": "<p>I guess with only 80 open issues, all of mathematics is close to being complete :-)</p>",
        "id": 198516517,
        "sender_full_name": "Sam Lichtenstein",
        "timestamp": 1590206018
    },
    {
        "content": "<p>Lots of things we do now aren't scalable. I think we can worry about optimizing our processes when we have more contributors and contributions.</p>",
        "id": 198516519,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1590206035
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"246647\">Sam Lichtenstein</span> <a href=\"#narrow/stream/113488-general/topic/sylvester's.20law.20of.20inertia/near/198516331\">said</a>:</p>\n<blockquote>\n<p>I guess that is a good pragmatic answer but doesn't seem like an ideal, scalable solution? I see now that the \"undergraduate math list\" thread in #general started with some complaints related to mine above, about navigability / discoverability</p>\n</blockquote>\n<p>Does this scale? Probably not, but that doesn't mean it's not the appropriate solution at <em>this</em> scale. Mathlib procedures have changed as we have grown, and they will continue to change</p>",
        "id": 198516560,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590206053
    },
    {
        "content": "<p>yeah that makes sense -- I'm just trying to figure out how to understand the lay of the land as a newbie</p>",
        "id": 198516562,
        "sender_full_name": "Sam Lichtenstein",
        "timestamp": 1590206058
    },
    {
        "content": "<p>Anyway, here's something to get you started on eigenvectors:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n<span class=\"kn\">variables</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"n\">def</span> <span class=\"n\">eigenvectors</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span><span class=\"err\">ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"err\">Λ</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">carrier</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"bp\">|</span> <span class=\"n\">f</span> <span class=\"n\">v</span> <span class=\"bp\">=</span> <span class=\"err\">Λ</span> <span class=\"err\">•</span> <span class=\"n\">v</span><span class=\"o\">},</span>\n  <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">map_zero</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">smul_zero</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span>\n  <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">ha</span> <span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">smul_add</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n  <span class=\"n\">smul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">c</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">smul_comm</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span> <span class=\"o\">}</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">theorem</span> <span class=\"n\">mem_eigenvectors</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span><span class=\"err\">ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"err\">Λ</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">v</span> <span class=\"err\">∈</span> <span class=\"n\">eigenvectors</span> <span class=\"n\">f</span> <span class=\"err\">Λ</span> <span class=\"bp\">↔</span> <span class=\"n\">f</span> <span class=\"n\">v</span> <span class=\"bp\">=</span> <span class=\"err\">Λ</span> <span class=\"err\">•</span> <span class=\"n\">v</span> <span class=\"o\">:=</span> <span class=\"n\">iff</span><span class=\"bp\">.</span><span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 198516598,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590206137
    },
    {
        "content": "<p>thanks!</p>",
        "id": 198516662,
        "sender_full_name": "Sam Lichtenstein",
        "timestamp": 1590206252
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">eigenvalues</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span><span class=\"err\">ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"err\">Λ</span> <span class=\"bp\">|</span> <span class=\"n\">eigenvectors</span> <span class=\"n\">f</span> <span class=\"err\">Λ</span> <span class=\"bp\">≠</span> <span class=\"err\">⊥</span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 198516705,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590206286
    },
    {
        "content": "<p>Regarding <code>TODO</code>, <code>roadmap/</code>, and the issues page: I think we'd be very happy with contributions in any of these three directions (as long as they are specific enough to be useful: a list of aspirations is only helpful if you're planning on working on them soon). I think for now everyone is open minded about which system works best, and if one of those three gains significant momentum then we can formalise that as the preferred approach.</p>",
        "id": 198519166,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1590210802
    },
    {
        "content": "<p><code>roadmap/</code> works like an issue + branch with some preliminary work.</p>",
        "id": 198519685,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1590211868
    },
    {
        "content": "<p>I would love to see more roadmaps. I think it's much more accessible to get started on something if someone with more mathlib design experience has already made a guess about how the primary definitions should be structured, and indicated which lemmas to aim for.</p>",
        "id": 198519805,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1590212128
    },
    {
        "content": "<p>I wanted some basic number theory and algebra done at some point, and wanted to flag that it was not done, and so I just made a <a href=\"https://github.com/leanprover-community/mathlib/projects/3\">project</a>. Nobody is working hard on it but if it's still in that state in July I'll see if I can get some students working on it</p>",
        "id": 198522671,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590217984
    },
    {
        "content": "<p>We can't do eigenvalues until Lean 4, because <code>λ</code> is a reserved symbol in Lean 3.</p>",
        "id": 198526752,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590225514
    },
    {
        "content": "<p>I think it's reserved in lean 4 too :/</p>",
        "id": 198526848,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590225678
    },
    {
        "content": "<p>What? I thought this was gone. And you can override anything in Lean 4 so you can probably unreserve it</p>",
        "id": 198526968,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590225934
    },
    {
        "content": "<p>Nope: <a href=\"https://github.com/leanprover/lean4/blob/master/src/Init/Lean/Parser/Term.lean#L99\">https://github.com/leanprover/lean4/blob/master/src/Init/Lean/Parser/Term.lean#L99</a></p>",
        "id": 198527291,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590226450
    },
    {
        "content": "<p>It doesn't say you can't unreserve it in favor of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>↦</mo></mrow><annotation encoding=\"application/x-tex\">\\mapsto</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.522em;vertical-align:-0.011em;\"></span><span class=\"mrel\">↦</span></span></span></span></p>",
        "id": 198528668,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590228894
    },
    {
        "content": "<p>It's ok we can just fork</p>",
        "id": 198529051,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590229659
    }
]