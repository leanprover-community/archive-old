[
    {
        "content": "<p>I often end up with goals of the form <code>{to_fun := ⇑h, inj' := _} = h</code> (for example, see <a href=\"https://github.com/leanprover-community/mathlib/blob/9893fcc1c79f6398858588e5129617c4176350cc/src/data/fintype/card_embedding.lean#L67\">here</a>. Is there any way to make <code>suffices</code> and the such like work with them? Because obviously writing <code>suffices : {to_fun := ⇑h, inj' := _} = h</code> won't work; it'll try to make me fill in the gap later (which I don't care for)</p>",
        "id": 237407382,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1620165665
    },
    {
        "content": "<p>(okay, I see there's a simple way here, but the problem stands for more complicated terms)</p>",
        "id": 237407847,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1620165857
    },
    {
        "content": "<p>You might want to try the <code>ext</code> tactic. If your structure has an <code>ext</code> lemma (which it should have, you can even get lean to generate them automatically) then maybe it will make progress</p>",
        "id": 237408381,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1620166128
    },
    {
        "content": "<p>For the equiv in question, it probably can be defined via some <code>equiv.trans</code> of <code>equiv.sum_congr</code>, <code>equiv.sum_compl</code>, etc</p>",
        "id": 237408552,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1620166206
    },
    {
        "content": "<p>Alternatively prove the ext lemma yourself by doing cases on h</p>",
        "id": 237408624,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1620166261
    },
    {
        "content": "<p>It sounds like you're missing a lemma like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/monoid_hom.mk_coe\">docs#monoid_hom.mk_coe</a></p>",
        "id": 237409008,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620166475
    },
    {
        "content": "<p>What type are you working with here?</p>",
        "id": 237409047,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620166499
    },
    {
        "content": "<p>I guess you need a <a href=\"https://leanprover-community.github.io/mathlib_docs/find/function.embedding.mk_coe\">docs#function.embedding.mk_coe</a> simp lemma?</p>",
        "id": 237409114,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620166528
    },
    {
        "content": "<p>Oh the issue isn't how to work around it (the proof I linked is fully working right now), I just wonder if there's some way to tell lean to let me do the <code>suffices/have</code> without having to give it the proof</p>",
        "id": 237409309,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1620166640
    },
    {
        "content": "<p>I guess so Eric, although I remember it working before so not too sure. It's a fairly heavy <code>simp</code> so it may just be stuck</p>",
        "id": 237409343,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1620166671
    },
    {
        "content": "<p><code>suffices : ∀ inj, {to_fun := ⇑h, inj' := inj} = h</code> would solve your problem</p>",
        "id": 237409462,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620166746
    }
]