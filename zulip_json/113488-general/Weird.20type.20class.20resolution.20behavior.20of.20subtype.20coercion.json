[
    {
        "content": "<p>I'm surprised to find that only the first of these four instances works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.free_algebra</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">free_algebra</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">add_proof</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">free_algebra</span> <span class=\"n\">R</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">},</span> <span class=\"n\">C</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">))</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">aux</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">free_algebra</span> <span class=\"n\">R</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>  <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">add_proof</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">value</span> <span class=\"bp\">//</span> <span class=\"n\">C</span> <span class=\"n\">value</span><span class=\"o\">}</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">free_algebra</span> <span class=\"n\">R</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">add_proof</span> <span class=\"n\">C</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- with a proof present, this works</span>\n<span class=\"kd\">instance</span> <span class=\"n\">ok</span> <span class=\"o\">:</span> <span class=\"n\">has_add</span> <span class=\"o\">(</span><span class=\"n\">aux</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"bp\">↑</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"bp\">↑</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">p.add</span> <span class=\"n\">a.prop</span> <span class=\"n\">b.prop</span><span class=\"o\">⟩⟩</span>\n\n<span class=\"c1\">-- without it fails to find `has_lift_t (aux p) (free_algebra R X)`</span>\n<span class=\"kd\">instance</span> <span class=\"n\">fail1</span> <span class=\"o\">:</span> <span class=\"n\">has_add</span> <span class=\"o\">(</span><span class=\"n\">aux</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"bp\">↑</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"bp\">↑</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">sorry</span><span class=\"o\">⟩⟩</span>\n\n<span class=\"c1\">-- even with a type annotation</span>\n<span class=\"kd\">instance</span> <span class=\"n\">fail2</span> <span class=\"o\">:</span> <span class=\"n\">has_add</span> <span class=\"o\">(</span><span class=\"n\">aux</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"o\">⟨(</span><span class=\"bp\">↑</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"bp\">↑</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">free_algebra</span> <span class=\"n\">R</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"n\">sorry</span><span class=\"o\">⟩⟩</span>\n\n<span class=\"c1\">-- or show, from</span>\n<span class=\"kd\">instance</span> <span class=\"n\">fail3</span> <span class=\"o\">:</span> <span class=\"n\">has_add</span> <span class=\"o\">(</span><span class=\"n\">aux</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"k\">show</span> <span class=\"n\">free_algebra</span> <span class=\"n\">R</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"bp\">↑</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"bp\">↑</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">sorry</span><span class=\"o\">⟩⟩</span>\n</code></pre></div>",
        "id": 212165148,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1601721331
    },
    {
        "content": "<p>Since there is no instance for <code>aux</code> I guess the real question is why <code>ok</code> does work. I think the variables <code>a b</code> in <code>λ a b,</code> must be inferred as having type <code>{value // C value}</code> somehow, in order to make sense of <code>a.prop</code> and <code>b.prop</code>. In the other cases they would be inferred as having type <code>aux p</code>.</p>",
        "id": 212169575,
        "sender_full_name": "Reid Barton",
        "timestamp": 1601728481
    },
    {
        "content": "<p>I also didn't know <code>subtype.prop</code> existed.</p>",
        "id": 212169578,
        "sender_full_name": "Reid Barton",
        "timestamp": 1601728488
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/subtype.prop\">docs#subtype.prop</a> looks to be an alias for <a href=\"https://leanprover-community.github.io/mathlib_docs/find/subtype.property\">docs#subtype.property</a></p>",
        "id": 212170603,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1601730240
    }
]