[
    {
        "content": "<p>I would not expect <code>rw h</code> to work here:</p>\n<div class=\"codehilite\"><pre><span></span>h : ⇑Δ (X ^ (n + 1)) = f\n⊢ ⇑Δ (X ^ nat.succ n) = f\n</pre></div>\n\n\n<p>but it does. Why? I cannot rewrite <code>n + 1 = f</code> if the goal is <code>nat.succ n = f</code>. </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">polynomial</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">polynomial</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">delta_structure</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">to_fun</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">delta_structure</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"err\">Δ</span> <span class=\"o\">:</span> <span class=\"n\">delta_structure</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_to_fun</span> <span class=\"o\">(</span><span class=\"n\">delta_structure</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"n\">to_fun</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">polynomial</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"c1\">-- doesn&#39;t work</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"err\">Δ</span> <span class=\"o\">:</span> <span class=\"n\">delta_structure</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"err\">Δ</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"err\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"err\">Δ</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"err\">^</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"c1\">-- works??</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">delta_structure</span>\n</pre></div>\n\n\n<p>PS sorry if two versions of this post appear, I'm having real problems with Zulip today</p>",
        "id": 191780278,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585156292
    },
    {
        "content": "<p>You can clearly see that the terms differ with <code>pp.all true</code> -- at the very end <code>h</code> has <code>has_add.add</code> and <code>f</code> has <code>nat.succ</code>.</p>\n<div class=\"codehilite\"><pre><span></span>h :\n  @eq.{1} (@polynomial.{0} R (@comm_ring.to_comm_semiring.{0} R _inst_1))\n    (@coe_fn.{1 1} (@delta_structure R _inst_1) (@delta_structure.has_coe_to_fun R _inst_1) Δ\n       (@has_pow.pow.{0 0} (@polynomial.{0} R (@comm_ring.to_comm_semiring.{0} R _inst_1)) nat\n          (@monoid.has_pow.{0} (@polynomial.{0} R (@comm_ring.to_comm_semiring.{0} R _inst_1))\n             (@ring.to_monoid.{0} (@polynomial.{0} R (@comm_ring.to_comm_semiring.{0} R _inst_1))\n                (@comm_ring.to_ring.{0} (@polynomial.{0} R (@comm_ring.to_comm_semiring.{0} R _inst_1))\n                   (@polynomial.comm_ring.{0} R _inst_1))))\n          (@polynomial.X.{0} R (@comm_ring.to_comm_semiring.{0} R _inst_1))\n          (@has_add.add.{0} nat nat.has_add n (@has_one.one.{0} nat nat.has_one))))\n    f\n⊢ @eq.{1} (@polynomial.{0} R (@comm_ring.to_comm_semiring.{0} R _inst_1))\n    (@coe_fn.{1 1} (@delta_structure R _inst_1) (@delta_structure.has_coe_to_fun R _inst_1) Δ\n       (@has_pow.pow.{0 0} (@polynomial.{0} R (@comm_ring.to_comm_semiring.{0} R _inst_1)) nat\n          (@monoid.has_pow.{0} (@polynomial.{0} R (@comm_ring.to_comm_semiring.{0} R _inst_1))\n             (@ring.to_monoid.{0} (@polynomial.{0} R (@comm_ring.to_comm_semiring.{0} R _inst_1))\n                (@comm_ring.to_ring.{0} (@polynomial.{0} R (@comm_ring.to_comm_semiring.{0} R _inst_1))\n                   (@polynomial.comm_ring.{0} R _inst_1))))\n          (@polynomial.X.{0} R (@comm_ring.to_comm_semiring.{0} R _inst_1))\n          (nat.succ n)))\n    f\n</pre></div>",
        "id": 191780795,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585156506
    },
    {
        "content": "<p>I've noticed this specific thing before (<code>n+1</code> working in place of <code>nat.succ n</code> in rewrites). At the time I just thought it was some useful magic, but it does seem out of place. My guess is that it is the same thing that lets <code>n+1</code> work inside the equation compiler: it is marked as <code>@[pattern]</code></p>",
        "id": 191780888,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585156549
    },
    {
        "content": "<p><code>@[pattern]</code> was my guess too, but the direct rewrite in my example still fails.</p>",
        "id": 191781392,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585156742
    },
    {
        "content": "<p>Credit to <span class=\"user-mention\" data-user-id=\"266440\">@Shing Tak Lam</span> for making me notice this :-)</p>",
        "id": 191781451,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585156775
    },
    {
        "content": "<p>It's not the coercion:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">polynomial</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">polynomial</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span>  <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"err\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span><span class=\"o\">))</span> <span class=\"o\">:</span>  <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"err\">^</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"c1\">-- works??</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 191781937,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585156988
    },
    {
        "content": "<p>It's not the polynomials either.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span>  <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"err\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">5</span><span class=\"o\">))</span> <span class=\"o\">:</span>  <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"err\">^</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">5</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"c1\">-- works??</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 191782172,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585157087
    },
    {
        "content": "<p>might it because the headword matches in the cases that work?</p>",
        "id": 191782231,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1585157109
    },
    {
        "content": "<p>It's not Lean either:</p>\n<div class=\"codehilite\"><pre><span></span>  <span class=\"c1\">-- works??</span>\n</pre></div>",
        "id": 191782263,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585157129
    },
    {
        "content": "<p>and it's not <code>has_pow.pow</code></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span>  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">5</span><span class=\"o\">))</span> <span class=\"o\">:</span>  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"mi\">5</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"c1\">-- works??</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 191782278,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585157137
    },
    {
        "content": "<p>Maybe this can be fixed in 3.8?</p>",
        "id": 191782459,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585157213
    },
    {
        "content": "<p>we don't want definitional rewriting, right?</p>",
        "id": 191782503,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585157232
    },
    {
        "content": "<p>Hey, crippling <code>rw</code> is fine for the NNG, but not here!</p>",
        "id": 191782536,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585157252
    },
    {
        "content": "<p>I'm sure this is not general definitional rewriting. <code>rw</code> already does definitional unfolding when the definition is <code>@[reducible]</code>, this is likely a similar effect</p>",
        "id": 191782993,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585157425
    },
    {
        "content": "<p>I agree with patrick that this shouldn't be \"fixed\"</p>",
        "id": 191783083,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585157471
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">order</span><span class=\"bp\">.</span><span class=\"n\">bounded_lattice</span> <span class=\"c1\">-- contains `attribute [pattern] has_bot.bot has_top.top`</span>\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_bot</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"mi\">37</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"err\">⊥</span> <span class=\"bp\">=</span> <span class=\"mi\">42</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">37</span> <span class=\"bp\">=</span> <span class=\"mi\">42</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"c1\">-- fails</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>How should I be checking to see if it has anything to do with <code>pattern</code>?</p>",
        "id": 191786479,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585158779
    },
    {
        "content": "<p>Regardless of the eventual resolution you should make a community Lean issue with your original \"doesn't work\" and the one with <code>f (n + 1) = 5</code> as examples</p>",
        "id": 191786744,
        "sender_full_name": "Reid Barton",
        "timestamp": 1585158911
    },
    {
        "content": "<p>For all I know this is something hardcoded into lean for <code>nat.add</code></p>",
        "id": 191786790,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585158930
    },
    {
        "content": "<p>How should I be seeing that <code>rw</code> works if things are reducible?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">reducible</span><span class=\"o\">]</span> <span class=\"n\">has_add</span><span class=\"bp\">.</span><span class=\"n\">add</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">add</span> <span class=\"n\">has_one</span><span class=\"bp\">.</span><span class=\"n\">one</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"c1\">-- doesn&#39;t work</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 191786879,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585158962
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> I thought you told me Lean did not do magic?</p>",
        "id": 191786940,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585158992
    },
    {
        "content": "<p>did I?</p>",
        "id": 191786963,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1585159004
    },
    {
        "content": "<p>Maybe it's just sufficiently advanced technology :-)</p>",
        "id": 191786994,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585159018
    },
    {
        "content": "<p>Kevin invented this citation so long ago that he doesn't remember inventing it.</p>",
        "id": 191787045,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585159031
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> You told me verbally a long time ago when I told you that I treated simp and/or type class inference as magic. Your comment made me re-evaluate how I thought about Lean. Before that I just figured that if I didn't understand why it worked then I shouldn't worry</p>",
        "id": 191794619,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585162383
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">definitely_not_false</span> <span class=\"o\">:</span> <span class=\"n\">bool</span> <span class=\"o\">:=</span> <span class=\"n\">tt</span>\n\n<span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">irreducible</span><span class=\"o\">]</span> <span class=\"n\">definitely_not_false</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">bool</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">definitely_not_false</span> <span class=\"bp\">=</span> <span class=\"n\">ff</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">tt</span> <span class=\"bp\">=</span> <span class=\"n\">ff</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">h</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">definitely_not_false</span> <span class=\"bp\">=</span> <span class=\"n\">ff</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tt</span> <span class=\"bp\">=</span> <span class=\"n\">ff</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">h</span>\n\n<span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"n\">semireducible</span><span class=\"o\">]</span> <span class=\"n\">definitely_not_false</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">bool</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">definitely_not_false</span> <span class=\"bp\">=</span> <span class=\"n\">ff</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">tt</span> <span class=\"bp\">=</span> <span class=\"n\">ff</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">h</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">definitely_not_false</span> <span class=\"bp\">=</span> <span class=\"n\">ff</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tt</span> <span class=\"bp\">=</span> <span class=\"n\">ff</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">h</span>\n\n<span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">reducible</span><span class=\"o\">]</span> <span class=\"n\">definitely_not_false</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">bool</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">definitely_not_false</span> <span class=\"bp\">=</span> <span class=\"n\">ff</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">tt</span> <span class=\"bp\">=</span> <span class=\"n\">ff</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">h</span> <span class=\"c1\">-- only one that works</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">definitely_not_false</span> <span class=\"bp\">=</span> <span class=\"n\">ff</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tt</span> <span class=\"bp\">=</span> <span class=\"n\">ff</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">h</span>\n</pre></div>",
        "id": 191833964,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1585189391
    },
    {
        "content": "<p>adding more evidence to my claim about headwords</p>",
        "id": 191834218,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1585189686
    }
]