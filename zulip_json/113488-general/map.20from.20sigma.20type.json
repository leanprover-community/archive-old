[
    {
        "content": "<p>aargh I can't figure out a basic type theory thing. As part of LTE I want to relate binary sums to sigma types over a type with two terms, but I'm failing to write down the map from the sigma type to the binary sum:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">variables</span> <span class=\"n\">S</span> <span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">bool</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">ff</span> <span class=\"o\">:=</span> <span class=\"n\">S</span>\n<span class=\"bp\">|</span> <span class=\"n\">tt</span> <span class=\"o\">:=</span> <span class=\"n\">T</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"bp\">Σ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">X</span> <span class=\"n\">S</span> <span class=\"n\">T</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">S</span> <span class=\"bp\">⊕</span> <span class=\"n\">T</span> <span class=\"o\">:=</span> <span class=\"c1\">-- the obvious map, sending (ff,s) to s and (tt,t) to t</span>\n<span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">sigma.rec</span> <span class=\"n\">bool</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">S</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">S</span> <span class=\"bp\">⊕</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">b</span> <span class=\"n\">st</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">bool.rec</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">S</span> <span class=\"bp\">⊕</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">sum.inl</span> <span class=\"n\">st</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">sum.inr</span> <span class=\"n\">st</span><span class=\"o\">))</span> <span class=\"n\">x</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">type mismatch at application</span>\n<span class=\"cm\">  sum.inl st</span>\n<span class=\"cm\">term</span>\n<span class=\"cm\">  st</span>\n<span class=\"cm\">has type</span>\n<span class=\"cm\">  X S T b</span>\n<span class=\"cm\">but is expected to have type</span>\n<span class=\"cm\">  S</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>Ideally I'd like to avoid the equation compiler because I'm doing this as a <code>let</code> in the middle of a tactic proof, but I could just break this definition out if necessary.</p>",
        "id": 260706305,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1636399686
    },
    {
        "content": "<p>Fwiw, <code>X</code> is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/cond\">docs#cond</a></p>",
        "id": 260706826,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636399926
    },
    {
        "content": "<p>And if you're lucky we have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/equiv.sum_equiv_sigma_bool\">docs#equiv.sum_equiv_sigma_bool</a></p>",
        "id": 260707018,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636400008
    },
    {
        "content": "<p>aah got it -- <a href=\"https://leanprover-community.github.io/mathlib_docs/find/sum_equiv_sigma_bool\">docs#sum_equiv_sigma_bool</a></p>",
        "id": 260707170,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1636400068
    },
    {
        "content": "<p>so the key is to use <code>match</code>, which seems to me to somehow be strictly more powerful than <code>sigma.rec</code> the way I was using it because it forces <code>x.2</code> to have the right type. Nice!</p>",
        "id": 260707427,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1636400180
    },
    {
        "content": "<p>it also parses as <code>Σ a, (X S T a → S ⊕ T)</code> the way you wrote it, fyi</p>",
        "id": 260707565,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1636400267
    },
    {
        "content": "<p>fortunately that wasn't true in my actual use case but thanks!</p>",
        "id": 260707687,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1636400319
    },
    {
        "content": "<p>in your original code, this seems to work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">Σ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">X</span> <span class=\"n\">S</span> <span class=\"n\">T</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">S</span> <span class=\"bp\">⊕</span> <span class=\"n\">T</span> <span class=\"o\">:=</span> <span class=\"c1\">-- the obvious map, sending (ff,s) to s and (tt,t) to t</span>\n<span class=\"bp\">@</span><span class=\"n\">sigma.rec</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">S</span> <span class=\"bp\">⊕</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">bool.rec_on</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">X</span> <span class=\"n\">S</span> <span class=\"n\">T</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">S</span> <span class=\"bp\">⊕</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"n\">b</span> <span class=\"n\">sum.inl</span> <span class=\"n\">sum.inr</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>was a super pain to get the elaborator to work, though; I did it in tactic mode, turned on <code>pp.all</code> and <code>show_term</code>, and then worked backwards removing what could be removed and not what couldn't</p>",
        "id": 260708895,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1636400886
    },
    {
        "content": "<p><del>Aah I had the motive wrong! </del> no that's not it -- you moved <code>st</code> after the colon, that's the trick I was missing.</p>",
        "id": 260715563,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1636403908
    },
    {
        "content": "<p>Yeah with that trick you don't even need the @s, like in the match case:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo'</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">Σ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">X</span> <span class=\"n\">S</span> <span class=\"n\">T</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">S</span> <span class=\"bp\">⊕</span> <span class=\"n\">T</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">sigma.rec</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">bool.rec</span> <span class=\"o\">(</span><span class=\"n\">sum.inl</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">sum.inr</span><span class=\"o\">)</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>Thanks!</p>",
        "id": 260716315,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1636404322
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/map.20from.20sigma.20type/near/260707427\">said</a>:</p>\n<blockquote>\n<p>so the key is to use <code>match</code>, which seems to me to somehow be strictly more powerful than <code>sigma.rec</code> the way I was using it because it forces <code>x.2</code> to have the right type. Nice!</p>\n</blockquote>\n<p>For those following along (like me), this is a <code>match</code> that implements it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo''</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">Σ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">X</span> <span class=\"n\">S</span> <span class=\"n\">T</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">S</span> <span class=\"bp\">⊕</span> <span class=\"n\">T</span>\n<span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">ff</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">sum.inl</span> <span class=\"n\">x</span>\n<span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">tt</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">sum.inr</span> <span class=\"n\">y</span>\n</code></pre></div>",
        "id": 260718390,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1636405314
    },
    {
        "content": "<p>Yeah, I didn't try pattern matching with my original goal because I was in the middle of a proof, and pattern matching failed when I tried in my example above because of my bracket fail :D</p>",
        "id": 260718783,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1636405487
    }
]