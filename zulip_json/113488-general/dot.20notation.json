[
    {
        "content": "<p>I've tried to convert some lemmas about <code>eq_on_source</code> in <code>local_equiv</code> to use dot notation, and in many cases I can't use dot notation due to an issue illustrated by the following <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">same_parity</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"err\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"err\">%</span> <span class=\"mi\">2</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">same_parity_setoid</span> <span class=\"o\">:</span> <span class=\"n\">setoid</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">same_parity</span><span class=\"o\">,</span>\n  <span class=\"n\">iseqv</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">hab</span> <span class=\"n\">hbc</span><span class=\"o\">,</span> <span class=\"n\">hab</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">hbc</span><span class=\"bp\">⟩</span><span class=\"o\">}</span>\n\n<span class=\"kn\">axiom</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">same_parity</span><span class=\"bp\">.</span><span class=\"n\">add</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≈</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">≈</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">same_parity</span><span class=\"bp\">.</span><span class=\"n\">add_one</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≈</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">≈</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">same_parity</span><span class=\"bp\">.</span><span class=\"n\">add</span> <span class=\"n\">h</span> <span class=\"mi\">1</span> <span class=\"c1\">-- works</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">same_parity</span><span class=\"bp\">.</span><span class=\"n\">add&#39;</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≈</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">≈</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">add</span> <span class=\"n\">c</span> <span class=\"c1\">-- fails</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">same_parity</span><span class=\"bp\">.</span><span class=\"n\">add_one&#39;</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≈</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">≈</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">add_one</span> <span class=\"c1\">-- works</span>\n</code></pre></div>",
        "id": 198552708,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1590269132
    },
    {
        "content": "<p>Is there any good way to fix this?</p>",
        "id": 198552718,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1590269161
    },
    {
        "content": "<p>I mean, make <code>h.add c</code> in this example work.</p>",
        "id": 198552760,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1590269181
    },
    {
        "content": "<p>Dot notation has become ubiquitous in the goal state recently, and this is in general very nice, but it is very hard to parse expressions such as</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">log</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">exp</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">log</span> <span class=\"bp\">*</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">exp</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>Is there a trick to tell Lean that, for some functions, it should not use the dot notation?</p>",
        "id": 199274463,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1590870231
    },
    {
        "content": "<p>Ouch, this is even worse than the <code>f.ker</code> example.</p>",
        "id": 199274524,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590870339
    },
    {
        "content": "<p><a href=\"#narrow/stream/113488-general/topic/to_matrix.20change/near/197841073\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/to_matrix.20change/near/197841073</a></p>",
        "id": 199274526,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1590870343
    },
    {
        "content": "<p><code>set_option rtl true</code> [/joking]</p>",
        "id": 199274645,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590870539
    },
    {
        "content": "<p>I want <code>@[please_dont_use_polish_notation] def exp := ...</code> :)</p>",
        "id": 199274706,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1590870640
    },
    {
        "content": "<p>Please file an issue so that we don't forget this.</p>",
        "id": 199274714,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1590870669
    },
    {
        "content": "<p>Done.</p>",
        "id": 199274927,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1590870974
    },
    {
        "content": "<p>it isn't so hard to parse for me</p>",
        "id": 199274944,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590871039
    },
    {
        "content": "<p>Maybe you know python?</p>",
        "id": 199275006,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590871121
    },
    {
        "content": "<p>I do know Python</p>",
        "id": 199275018,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590871157
    },
    {
        "content": "<p>Could we have a rule like don't use dot notation if the namespace is already open?</p>",
        "id": 199275301,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1590871638
    }
]