[
    {
        "content": "<p>why do we need to re-compile the file as well as all the files that depend on the file even if all we did is adding a space?</p>",
        "id": 147299477,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541684397
    },
    {
        "content": "<p>or if we just change proofs?</p>",
        "id": 147299709,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541684606
    },
    {
        "content": "<p>Because the alternative is so complex that not a single ITP I know does otherwise</p>",
        "id": 147300005,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1541684887
    },
    {
        "content": "<p>could you elaborate?</p>",
        "id": 147300301,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541685241
    },
    {
        "content": "<p>For adding a space, the short story is that we should compare the old and new AST's contents to decide if there was a semantic change. But Lean 3 does not even have ASTs for full definitions.</p>",
        "id": 147305164,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1541689644
    },
    {
        "content": "<p>If you change a proof, that is an actual change that results in a different .olean file. So now you need some extra logic to tell dependent files that while the .olean file has changed, they shouldn't care about that.</p>",
        "id": 147305250,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1541689709
    },
    {
        "content": "<p>etc. pp.. It's not impossible, and we have at least discussed whether we could do something in that direction in Lean 4, but it's not at all trivial</p>",
        "id": 147305300,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1541689763
    },
    {
        "content": "<p>what is AST?</p>",
        "id": 147305319,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541689787
    },
    {
        "content": "<p>abstract syntax tree</p>",
        "id": 147305325,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1541689796
    },
    {
        "content": "<p>what makes ITP different from ordinary programming languages that can do that?</p>",
        "id": 147305521,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541689968
    },
    {
        "content": "<p>(that's probably a stupid question)</p>",
        "id": 147305525,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541689974
    },
    {
        "content": "<p>Ordinary programming languages would recompile everything if you changed a \"proof\", because the don't have \"proof\"-irrelevance. All their function definitions are data.</p>",
        "id": 147305750,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541690184
    },
    {
        "content": "<p>Incremental compilation is even harder in \"ordinary languages\" where all definitions live in the same mutually recursive context. The Rust people have been working on it for multiple years and are still not done.</p>",
        "id": 147306095,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1541690502
    },
    {
        "content": "<p>Very na√Øve question, but why are the proofs stored in the .olean files? Since there is proof irrelevance, isn't it true that they won't be read again?</p>",
        "id": 147307938,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1541691997
    },
    {
        "content": "<p>I guess you didn't say that the proofs are stored in the .olean files and perhaps it's not true. But then my question is why should changing proofs change the .olean files?</p>",
        "id": 147308007,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1541692081
    },
    {
        "content": "<p>The proofs are not needed, but they witness the fact that a proof exists. I think the idea with the olean files was something that could both have its program-parts executed, and be run through a Lean checker in order to check correctness.</p>",
        "id": 147340884,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1541723234
    },
    {
        "content": "<p>Yes, the proofs are consumed by external checkers. They could be move to a separate file, but it doesn't help much: Even just inserting a newline somewhere changes position information in the .olean file. So you really need a more sophisticated dependency system than on the file level.</p>",
        "id": 147357737,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1541751826
    },
    {
        "content": "<p>I think the easiest thing to do would be to get a build system to hash the olean files and consider a change only when the olean's hash changes</p>",
        "id": 147464338,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1541914432
    },
    {
        "content": "<p>Changing a proof would still trigger a rebuild but adding a space wouldn't</p>",
        "id": 147464339,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1541914432
    }
]