[
    {
        "content": "<p>The hole command to create a record stub is really nice!<br>\nCan any emacs gurus (<span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span>?) tell me how I can write an emacs command that will insert <code>{! !}</code> at the point, navigate inside it (if necessary), and then invoke the Instance Stub hole command?</p>",
        "id": 136169584,
        "sender_full_name": "Reid Barton",
        "timestamp": 1540043452
    },
    {
        "content": "<p>Sure :) Let's go step by step. In your configuration file (<code>.emacs</code> or <code>.emacs.d/init.el</code>), create a function, let's say:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"p\">(</span><span class=\"nb\">defun</span> <span class=\"nv\">lean-insert-stub</span> <span class=\"p\">()</span>\n  <span class=\"p\">(</span><span class=\"nf\">print</span> <span class=\"s\">&quot;hello world&quot;</span><span class=\"p\">))</span>\n</pre></div>",
        "id": 136183553,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1540067191
    },
    {
        "content": "<p>You can change it a little so that you can invoke it from anywhere in emacs:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"p\">(</span><span class=\"nb\">defun</span> <span class=\"nv\">lean-insert-stub</span> <span class=\"p\">()</span>\n  <span class=\"p\">(</span><span class=\"k\">interactive</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"nf\">print</span> <span class=\"s\">&quot;hello world&quot;</span><span class=\"p\">))</span>\n</pre></div>\n\n\n<p>Then, you just need <code>M-x lean-insert-stub</code> to invoke it.</p>",
        "id": 136183684,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1540067474
    },
    {
        "content": "<p>And if you want it to actually do something: </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"p\">(</span><span class=\"nb\">defun</span> <span class=\"nv\">lean-insert-stub</span> <span class=\"p\">()</span>\n  <span class=\"p\">(</span><span class=\"k\">interactive</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"nf\">insert</span> <span class=\"s\">&quot;{!  !}&quot;</span><span class=\"p\">))</span>\n</pre></div>",
        "id": 136183728,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1540067540
    },
    {
        "content": "<p>I tried having it call <code>(lean-hole)</code> next but I got an error even though repositioning the cursor after the insert isn't necessary interactively</p>",
        "id": 136183809,
        "sender_full_name": "Reid Barton",
        "timestamp": 1540067742
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>error in lean-server command handler: (wrong-type-argument number-or-marker-p nil)\nServer response was:\n</pre></div>",
        "id": 136183855,
        "sender_full_name": "Reid Barton",
        "timestamp": 1540067772
    },
    {
        "content": "<p>I'm looking at <code>lean-hole--command</code> instead</p>",
        "id": 136183867,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1540067822
    },
    {
        "content": "<p>It kind of looks like the lean mode is not designed to handle selecting a hole command non-interactively, in terms of the code structure</p>",
        "id": 136183935,
        "sender_full_name": "Reid Barton",
        "timestamp": 1540067918
    },
    {
        "content": "<p>Am I supposed to locally set this thing <code>completing-read-function</code>? Is that the \"emacs way\"?</p>",
        "id": 136184005,
        "sender_full_name": "Reid Barton",
        "timestamp": 1540068057
    },
    {
        "content": "<p>not that that helps, when it is not getting that far yet</p>",
        "id": 136184014,
        "sender_full_name": "Reid Barton",
        "timestamp": 1540068089
    },
    {
        "content": "<p>Yeah, now that I look more closely, it's not obvious</p>",
        "id": 136184074,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1540068183
    },
    {
        "content": "<p>To be fair, I'm still new to emacs. Maybe <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> can shed some light. What I got so far is:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"p\">(</span><span class=\"nb\">defun</span> <span class=\"nv\">lean-insert-stub</span> <span class=\"p\">()</span>\n  <span class=\"p\">(</span><span class=\"k\">interactive</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"nf\">insert</span> <span class=\"s\">&quot;{!  !}&quot;</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"nf\">forward-char</span> <span class=\"mi\">-3</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\">let</span> <span class=\"p\">((</span><span class=\"nv\">p</span> <span class=\"p\">(</span><span class=\"nf\">point</span><span class=\"p\">)))</span>\n  <span class=\"p\">(</span><span class=\"k\">let</span> <span class=\"p\">((</span><span class=\"nv\">start-pos</span> <span class=\"nv\">p</span><span class=\"p\">)</span>\n        <span class=\"p\">(</span><span class=\"nv\">end-pos</span> <span class=\"nv\">p</span><span class=\"p\">))</span>\n    <span class=\"p\">(</span><span class=\"k\">let</span> <span class=\"p\">((</span><span class=\"nv\">start-marker</span> <span class=\"p\">(</span><span class=\"nf\">make-marker</span><span class=\"p\">))</span>\n          <span class=\"p\">(</span><span class=\"nv\">end-marker</span> <span class=\"p\">(</span><span class=\"nf\">make-marker</span><span class=\"p\">)))</span>\n      <span class=\"p\">(</span><span class=\"nf\">set-marker</span> <span class=\"nv\">start-marker</span> <span class=\"nv\">start-pos</span> <span class=\"p\">(</span><span class=\"nf\">current-buffer</span><span class=\"p\">))</span>\n      <span class=\"p\">(</span><span class=\"nf\">set-marker</span> <span class=\"nv\">end-marker</span> <span class=\"nv\">end-pos</span> <span class=\"p\">(</span><span class=\"nf\">current-buffer</span><span class=\"p\">))</span>\n      <span class=\"p\">(</span><span class=\"nv\">lean-hole--command</span> <span class=\"s\">&quot;Instance Stub&quot;</span> <span class=\"nv\">start-marker</span> <span class=\"nv\">end-marker</span><span class=\"p\">))))</span>\n  <span class=\"p\">)</span>\n</pre></div>\n\n\n<p>which I built from copying bits from <code>lean-hole</code></p>",
        "id": 136184663,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1540069350
    },
    {
        "content": "<p>i bound the first 3 lines of that command (just inserting the hole) to <code>C-c C-SPC</code>, do <code>C-c SPC</code> to open the menu, and tab-complete <code>Ins</code></p>",
        "id": 167348618,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1559696667
    },
    {
        "content": "<p>is the <code>env &lt;- get_env</code> doing anything in the definition of <code>instance_stub</code>?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">hole_command</span><span class=\"o\">]</span> <span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">instance_stub</span> <span class=\"o\">:</span> <span class=\"n\">hole_command</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"s2\">&quot;Instance Stub&quot;</span><span class=\"o\">,</span>\n  <span class=\"n\">descr</span> <span class=\"o\">:=</span> <span class=\"s2\">&quot;Generate a skeleton for the structure under construction.&quot;</span><span class=\"o\">,</span>\n  <span class=\"n\">action</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">do</span> <span class=\"n\">tgt</span> <span class=\"err\">←</span> <span class=\"n\">target</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">whnf</span><span class=\"o\">,</span>\n     <span class=\"k\">let</span> <span class=\"n\">cl</span> <span class=\"o\">:=</span> <span class=\"n\">tgt</span><span class=\"bp\">.</span><span class=\"n\">get_app_fn</span><span class=\"bp\">.</span><span class=\"n\">const_name</span><span class=\"o\">,</span>\n     <span class=\"n\">env</span> <span class=\"err\">←</span> <span class=\"n\">get_env</span><span class=\"o\">,</span>\n     <span class=\"n\">fs</span> <span class=\"err\">←</span> <span class=\"n\">expanded_field_list</span> <span class=\"n\">cl</span><span class=\"o\">,</span>\n     <span class=\"k\">let</span> <span class=\"n\">fs</span> <span class=\"o\">:=</span> <span class=\"n\">fs</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">snd</span><span class=\"o\">,</span>\n     <span class=\"k\">let</span> <span class=\"n\">fs</span> <span class=\"o\">:=</span> <span class=\"n\">format</span><span class=\"bp\">.</span><span class=\"n\">intercalate</span> <span class=\"o\">(</span><span class=\"s2\">&quot;,</span><span class=\"se\">\\n</span><span class=\"s2\">  &quot;</span> <span class=\"o\">:</span> <span class=\"n\">format</span><span class=\"o\">)</span> <span class=\"err\">$</span> <span class=\"n\">fs</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">fn</span><span class=\"o\">,</span> <span class=\"n\">format</span><span class=\"bp\">!</span><span class=\"s2\">&quot;{fn} := _&quot;</span><span class=\"o\">),</span>\n     <span class=\"k\">let</span> <span class=\"n\">out</span> <span class=\"o\">:=</span> <span class=\"n\">format</span><span class=\"bp\">.</span><span class=\"n\">to_string</span> <span class=\"n\">format</span><span class=\"bp\">!</span><span class=\"s2\">&quot;{{ {fs} }&quot;</span><span class=\"o\">,</span>\n     <span class=\"n\">return</span> <span class=\"o\">[(</span><span class=\"n\">out</span><span class=\"o\">,</span><span class=\"s2\">&quot;&quot;</span><span class=\"o\">)]</span> <span class=\"o\">}</span>\n</pre></div>",
        "id": 167348641,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1559696711
    },
    {
        "content": "<p>looks vestigial to me</p>",
        "id": 167351290,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1559700062
    }
]