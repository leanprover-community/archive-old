[
    {
        "content": "<p>Andreas Abel and Thierry Coquand have brought my attention to the following counterexample to normalization in impredicative type theories with proof irrelevance, such as Lean.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">false&#39;</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span> <span class=\"n\">p</span>\n<span class=\"n\">def</span> <span class=\"n\">true&#39;</span> <span class=\"o\">:=</span> <span class=\"n\">false&#39;</span> <span class=\"bp\">→</span> <span class=\"n\">false&#39;</span>\n<span class=\"n\">def</span> <span class=\"n\">omega</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">),</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">false&#39;</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">h</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">cast</span> <span class=\"n\">true&#39;</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">true&#39;</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">z</span><span class=\"o\">:</span> <span class=\"n\">false&#39;</span><span class=\"o\">,</span> <span class=\"n\">z</span> <span class=\"n\">true&#39;</span> <span class=\"n\">z</span>\n\n<span class=\"n\">def</span> <span class=\"n\">Omega</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">),</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">false&#39;</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">omega</span> <span class=\"n\">h</span> <span class=\"n\">true&#39;</span> <span class=\"o\">(</span><span class=\"n\">omega</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n\n<span class=\"bp\">#</span><span class=\"n\">reduce</span> <span class=\"n\">Omega</span> <span class=\"c1\">-- timeout</span>\n</pre></div>",
        "id": 181055359,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1574110875
    },
    {
        "content": "<p>Should we care?</p>",
        "id": 181055479,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1574110947
    },
    {
        "content": "<p>It is news; this was the last remaining unresolved question in my MS thesis, and I had expected it to be true, so this counterexample is a surprise. Normalization is sometimes used for proofs of consistency, but in lean's case we have a model construction that achieves this goal by alternate means, so that at least is not at risk</p>",
        "id": 181055756,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1574111133
    },
    {
        "content": "<p>It does, however, put us more firmly in the \"classical\" camp, because our type theory can't be used to \"just compute\" anything that doesn't use axioms</p>",
        "id": 181056278,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1574111372
    },
    {
        "content": "<p>at this point I would prefer to just have a reflection axiom to deduce <code>A</code> is defeq to <code>B</code> from <code>A = B</code> and finish the job</p>",
        "id": 181056423,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1574111441
    },
    {
        "content": "<p>It does possibly open the door to performing arbitrary TM computations in the lean kernel. We already knew that this was possible in theory, but lean would not actually perform the required sequence of reductions, it would get stuck early on. The difference with this example is that lean <em>actually</em> goes ahead and does the infinite reduction.</p>",
        "id": 181056857,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1574111695
    },
    {
        "content": "<p>(It's not clear if this can be used to do <em>useful</em> computation, though, as, like the example in my paper, it requires an inconsistent context, so it's tricky to get the computation out into an inhabited context.)</p>",
        "id": 181057260,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1574111924
    },
    {
        "content": "<p>In <code>#reduce Omega -- timeout</code>, <code>Omega</code> should be a lambda abstraction. Why does the reduction not stop there?</p>",
        "id": 181059585,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1574113329
    },
    {
        "content": "<p>Are there options to control the number of steps <code>#reduce</code> takes? Is there any option to trace the reduction steps?</p>",
        "id": 181059714,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1574113436
    },
    {
        "content": "<p><code>#reduce</code> will reduce the whole term to a normal form, it doesn't stop at whnf</p>",
        "id": 181059978,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1574113601
    },
    {
        "content": "<p>sadly there is no way to trace the reduction</p>",
        "id": 181060017,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1574113630
    },
    {
        "content": "<p>How hard would it be to imitate the reduction in <code>meta</code> code?</p>",
        "id": 181060127,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1574113707
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Omega</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"n\">Omega</span> <span class=\"n\">h</span> <span class=\"o\">:=</span>\n<span class=\"k\">calc</span> <span class=\"n\">Omega</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"n\">omega</span> <span class=\"n\">h</span> <span class=\"n\">true&#39;</span> <span class=\"o\">(</span><span class=\"n\">omega</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">rfl</span>\n         <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">cast</span> <span class=\"n\">true&#39;</span> <span class=\"n\">true&#39;</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">true&#39;</span> <span class=\"n\">true&#39;</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">z</span><span class=\"o\">:</span> <span class=\"n\">false&#39;</span><span class=\"o\">,</span> <span class=\"n\">z</span> <span class=\"n\">true&#39;</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">omega</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">rfl</span>\n         <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">z</span><span class=\"o\">:</span> <span class=\"n\">false&#39;</span><span class=\"o\">,</span> <span class=\"n\">z</span> <span class=\"n\">true&#39;</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">omega</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">rfl</span>\n         <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">omega</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"n\">true&#39;</span> <span class=\"o\">(</span><span class=\"n\">omega</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">rfl</span>\n         <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">Omega</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">rfl</span>\n</pre></div>",
        "id": 181060342,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1574113830
    },
    {
        "content": "<p>Their result is a very pretty result, even though it is unfortunate for Lean. But it is not clear whether this result has any bearing on data, i.e. whether we can get a term of type <code>nat</code> that doesn't normalize. And even if we can, there is still hope for <code>eval</code>, which will erase nonsense like Omega.</p>\n<p>I don't know what to make of it. Definitional proof irrelevance is nice in practice, and it is hard to imagine someone formalizing mathematics stumbling across a non-normalizing term. I'd rather have a type theory that is theoretically bad but nice in practice than a type theory that is theoretically nice but bad in practice, but of course it would be better to have a theory with both the theoretical and the practical virtues.</p>",
        "id": 181060697,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1574114048
    },
    {
        "content": "<p>So the question of whether VM evaluation on a computable well typed term can run forever is still open</p>",
        "id": 181060789,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1574114141
    },
    {
        "content": "<p>Here's a modification of the example to act like a Y combinator:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">false&#39;</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span> <span class=\"n\">p</span>\n<span class=\"n\">def</span> <span class=\"n\">true&#39;</span> <span class=\"o\">:=</span> <span class=\"n\">false&#39;</span> <span class=\"bp\">→</span> <span class=\"n\">false&#39;</span>\n<span class=\"n\">def</span> <span class=\"n\">y</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">false&#39;</span> <span class=\"bp\">→</span> <span class=\"n\">false&#39;</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">),</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">false&#39;</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">cast</span> <span class=\"n\">true&#39;</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">true&#39;</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">z</span><span class=\"o\">:</span> <span class=\"n\">false&#39;</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"n\">true&#39;</span> <span class=\"n\">z</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">Y</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">false&#39;</span> <span class=\"bp\">→</span> <span class=\"n\">false&#39;</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">),</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">false&#39;</span> <span class=\"o\">:=</span>\n<span class=\"n\">y</span> <span class=\"n\">f</span> <span class=\"n\">h</span> <span class=\"n\">true&#39;</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"n\">f</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"n\">f</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"n\">f</span> <span class=\"n\">h</span><span class=\"o\">))))))</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</pre></div>\n\n\n<p>Now we can compute with arbitrary functions on <code>false'</code> :P</p>",
        "id": 181095679,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1574156804
    },
    {
        "content": "<blockquote>\n<p>It does, however, put us more firmly in the \"classical\" camp, because our type theory can't be used to \"just compute\" anything that doesn't use axioms</p>\n</blockquote>\n<p>So in fact this is something to celebrate, as far as mathematicians are concerned!</p>",
        "id": 181095838,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1574156935
    },
    {
        "content": "<p>Embedded lambda calculus:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">section</span>\n<span class=\"kn\">parameter</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">),</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">D</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span> <span class=\"n\">p</span>\n<span class=\"n\">def</span> <span class=\"n\">F</span> <span class=\"o\">:=</span> <span class=\"n\">D</span> <span class=\"bp\">→</span> <span class=\"n\">D</span>\n\n<span class=\"n\">def</span> <span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">D</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"n\">F</span> <span class=\"n\">b</span>\n<span class=\"n\">local</span> <span class=\"kn\">infix</span> <span class=\"bp\">`</span> <span class=\"err\">$$</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">400</span> <span class=\"o\">:=</span> <span class=\"n\">app</span>\n\n<span class=\"n\">def</span> <span class=\"n\">lam</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">D</span> <span class=\"bp\">→</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">D</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">cast</span> <span class=\"n\">F</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"n\">F</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"n\">f</span>\n<span class=\"n\">local</span> <span class=\"kn\">notation</span> <span class=\"bp\">`</span><span class=\"err\">Λ</span><span class=\"bp\">`</span> <span class=\"n\">binders</span> <span class=\"bp\">`</span><span class=\"o\">,</span> <span class=\"bp\">`</span> <span class=\"n\">r</span><span class=\"o\">:(</span><span class=\"n\">scoped</span> <span class=\"n\">P</span><span class=\"o\">,</span> <span class=\"n\">lam</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">r</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">lam</span> <span class=\"n\">f</span> <span class=\"err\">$$</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"n\">def</span> <span class=\"n\">y</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">D</span> <span class=\"o\">:=</span> <span class=\"err\">Λ</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"err\">$$</span> <span class=\"n\">z</span><span class=\"o\">)</span>\n<span class=\"n\">def</span> <span class=\"n\">Y</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">D</span> <span class=\"o\">:=</span> <span class=\"n\">y</span> <span class=\"n\">f</span> <span class=\"err\">$$</span> <span class=\"n\">y</span> <span class=\"n\">f</span>\n\n<span class=\"bp\">#</span><span class=\"n\">reduce</span> <span class=\"n\">lam</span> <span class=\"n\">id</span>\n\n<span class=\"n\">def</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">D</span> <span class=\"o\">:=</span> <span class=\"err\">Λ</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span>\n<span class=\"n\">def</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">D</span> <span class=\"o\">:=</span> <span class=\"err\">Λ</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"err\">$$</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"err\">$$</span> <span class=\"n\">f</span> <span class=\"err\">$$</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">of_nat</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">D</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">zero</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">of_nat</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">plus</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">D</span> <span class=\"o\">:=</span> <span class=\"err\">Λ</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"err\">$$</span> <span class=\"n\">f</span> <span class=\"err\">$$</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"err\">$$</span> <span class=\"n\">f</span> <span class=\"err\">$$</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">plus</span> <span class=\"o\">(</span><span class=\"n\">of_nat</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">of_nat</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">of_nat</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 181097047,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1574158082
    },
    {
        "content": "<blockquote>\n<p>(It's not clear if this can be used to do useful computation, though, as, like the example in my paper, it requires an inconsistent context, so it's tricky to get the computation out into an inhabited context.)</p>\n</blockquote>\n<p>It doesn't require an inconsistent context (but does require an axiom AFAICT), you can do the same manipulation using an hypothesis <code>∀ (A B : Prop), A → B → A = B</code> (propext for inhabited propositions) and instead of inhabiting <code>∀ p : Prop, p</code> inhabit <code>∀ p : Prop, p → p</code><br>\nie</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">top</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">p</span>\n\n<span class=\"n\">def</span> <span class=\"n\">ext</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">),</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"n\">B</span>\n\n<span class=\"n\">def</span> <span class=\"n\">supercast</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">ext</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">B</span>\n  <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">cast</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">a</span>\n\n<span class=\"n\">def</span> <span class=\"n\">omega</span> <span class=\"o\">:</span> <span class=\"n\">ext</span> <span class=\"bp\">→</span> <span class=\"n\">top</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">λ</span> <span class=\"n\">h</span> <span class=\"n\">A</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">supercast</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">top</span> <span class=\"bp\">→</span> <span class=\"n\">top</span><span class=\"o\">)</span> <span class=\"n\">A</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">z</span><span class=\"o\">:</span> <span class=\"n\">top</span><span class=\"o\">,</span> <span class=\"n\">z</span> <span class=\"o\">(</span><span class=\"n\">top</span> <span class=\"bp\">→</span> <span class=\"n\">top</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"n\">a</span>\n\n<span class=\"n\">def</span> <span class=\"n\">Omega</span> <span class=\"o\">:</span> <span class=\"n\">ext</span> <span class=\"bp\">→</span> <span class=\"n\">top</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">omega</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">top</span> <span class=\"bp\">→</span> <span class=\"n\">top</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">omega</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n\n<span class=\"bp\">#</span><span class=\"n\">reduce</span> <span class=\"n\">Omega</span> <span class=\"c1\">-- timeout</span>\n</pre></div>\n\n\n<p>See also discussion at <a href=\"https://github.com/coq/coq/pull/10390\" target=\"_blank\" title=\"https://github.com/coq/coq/pull/10390\">https://github.com/coq/coq/pull/10390</a></p>",
        "id": 181196013,
        "sender_full_name": "Gaëtan Gilbert",
        "timestamp": 1574246441
    },
    {
        "content": "<p>Right, here's another example shared by Andreas Abel:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">-- axiom propext {a b : Prop} : (a ↔ b) → a = b</span>\n\n<span class=\"n\">def</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">p</span>\n\n<span class=\"n\">def</span> <span class=\"n\">om</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">A</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n   <span class=\"bp\">@</span><span class=\"n\">cast</span> <span class=\"o\">(</span><span class=\"n\">True</span> <span class=\"bp\">→</span> <span class=\"n\">True</span><span class=\"o\">)</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">propext</span> <span class=\"bp\">⟨λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">id</span><span class=\"bp\">⟩</span><span class=\"o\">)</span> <span class=\"err\">$</span>\n   <span class=\"bp\">λ</span> <span class=\"n\">z</span><span class=\"o\">:</span> <span class=\"n\">True</span><span class=\"o\">,</span> <span class=\"n\">z</span> <span class=\"o\">(</span><span class=\"n\">True</span> <span class=\"bp\">→</span> <span class=\"n\">True</span><span class=\"o\">)</span> <span class=\"n\">id</span> <span class=\"n\">z</span>\n\n<span class=\"n\">def</span> <span class=\"n\">Om</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"n\">om</span> <span class=\"o\">(</span><span class=\"n\">True</span> <span class=\"bp\">→</span> <span class=\"n\">True</span><span class=\"o\">)</span> <span class=\"n\">id</span> <span class=\"n\">om</span>\n\n<span class=\"c1\">-- #reduce Om  -- timeout</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">Om</span> <span class=\"bp\">=</span> <span class=\"n\">Om</span> <span class=\"o\">:=</span>\n<span class=\"k\">calc</span> <span class=\"n\">Om</span> <span class=\"bp\">=</span> <span class=\"n\">om</span> <span class=\"o\">(</span><span class=\"n\">True</span> <span class=\"bp\">→</span> <span class=\"n\">True</span><span class=\"o\">)</span> <span class=\"n\">id</span> <span class=\"n\">om</span> <span class=\"o\">:</span> <span class=\"n\">rfl</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">cast</span> <span class=\"o\">(</span><span class=\"n\">True</span> <span class=\"bp\">→</span> <span class=\"n\">True</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">True</span> <span class=\"bp\">→</span> <span class=\"n\">True</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">propext</span> <span class=\"bp\">⟨λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">id</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">id</span><span class=\"bp\">⟩</span><span class=\"o\">)</span>\n            <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">z</span><span class=\"o\">:</span> <span class=\"n\">True</span><span class=\"o\">,</span> <span class=\"n\">z</span> <span class=\"o\">(</span><span class=\"n\">True</span> <span class=\"bp\">→</span> <span class=\"n\">True</span><span class=\"o\">)</span> <span class=\"n\">id</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"n\">om</span> <span class=\"o\">:</span> <span class=\"n\">rfl</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">z</span><span class=\"o\">:</span> <span class=\"n\">True</span><span class=\"o\">,</span> <span class=\"n\">z</span> <span class=\"o\">(</span><span class=\"n\">True</span> <span class=\"bp\">→</span> <span class=\"n\">True</span><span class=\"o\">)</span> <span class=\"n\">id</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"n\">om</span> <span class=\"o\">:</span> <span class=\"n\">rfl</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">om</span> <span class=\"o\">(</span><span class=\"n\">True</span> <span class=\"bp\">→</span> <span class=\"n\">True</span><span class=\"o\">)</span> <span class=\"n\">id</span> <span class=\"n\">om</span> <span class=\"o\">:</span> <span class=\"n\">rfl</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">Om</span> <span class=\"o\">:</span> <span class=\"n\">rfl</span>\n</pre></div>",
        "id": 181200161,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1574250960
    },
    {
        "content": "<p>More lambda calculus:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">D</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">p</span>\n<span class=\"n\">def</span> <span class=\"n\">F</span> <span class=\"o\">:=</span> <span class=\"n\">D</span> <span class=\"bp\">→</span> <span class=\"n\">D</span>\n\n<span class=\"n\">def</span> <span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">D</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"n\">F</span> <span class=\"n\">id</span> <span class=\"n\">b</span>\n<span class=\"n\">local</span> <span class=\"kn\">infix</span> <span class=\"bp\">`</span> <span class=\"err\">$$</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">400</span> <span class=\"o\">:=</span> <span class=\"n\">app</span>\n\n<span class=\"n\">def</span> <span class=\"n\">lam</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">D</span> <span class=\"bp\">→</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">D</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">A</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">cast</span> <span class=\"n\">F</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">propext</span> <span class=\"bp\">⟨λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">id</span><span class=\"bp\">⟩</span><span class=\"o\">)</span> <span class=\"n\">f</span>\n<span class=\"n\">local</span> <span class=\"kn\">notation</span> <span class=\"bp\">`</span><span class=\"err\">Λ</span><span class=\"bp\">`</span> <span class=\"n\">binders</span> <span class=\"bp\">`</span><span class=\"o\">,</span> <span class=\"bp\">`</span> <span class=\"n\">r</span><span class=\"o\">:(</span><span class=\"n\">scoped</span> <span class=\"n\">P</span><span class=\"o\">,</span> <span class=\"n\">lam</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">r</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">lam</span> <span class=\"n\">f</span> <span class=\"err\">$$</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</pre></div>",
        "id": 181200371,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1574251190
    },
    {
        "content": "<p>However, it is still difficult to use this for actual computations, because they take place inside proof reduction, which is not something that lean will normally even do anyway. For example, the final example <code>lam f $$ x = f x</code> is a bit misleading, because even if I wrote <code>lam f $$ x = f (f x)</code> it would still be proved by <code>rfl</code> because both sides are proofs. The real demonstration that this encoding works is the observation that the LHS <code>#reduce</code>s to the RHS:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">D</span><span class=\"o\">)</span>\n<span class=\"bp\">#</span><span class=\"n\">reduce</span> <span class=\"n\">lam</span> <span class=\"n\">f</span> <span class=\"err\">$$</span> <span class=\"n\">x</span> <span class=\"c1\">-- f x</span>\n</pre></div>",
        "id": 181200682,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1574251550
    },
    {
        "content": "<p>Am I misunderstanding something, or does this mean that Lean's algorithmic equivalence is also undecidable?</p>",
        "id": 181235567,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1574274870
    },
    {
        "content": "<p>Oh well, it shouldn't be because these are <code>Prop</code>s, right? But then</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">Omega&#39;</span> <span class=\"o\">:</span> <span class=\"n\">pext</span> <span class=\"bp\">→</span> <span class=\"n\">top</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">blah</span> <span class=\"o\">:</span> <span class=\"n\">Omega</span> <span class=\"bp\">=</span> <span class=\"n\">Omega&#39;</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</pre></div>\n\n\n<p>goes into a loop in the kernel (<code>deep recursion was detected at 'replace' (potential solution: increase stack space in your system)</code>). What's going on here - why does Lean seemingly reduce them instead of immediately coming back and saying \"these are two proofs of <code>pext → top</code>, hence the same\"?</p>",
        "id": 181264528,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1574295801
    },
    {
        "content": "<blockquote>\n<p>Am I misunderstanding something, or does this mean that Lean's algorithmic equivalence is also undecidable?</p>\n</blockquote>\n<p>I think it is decidable, but lean's algorithm doesn't decide it. If you never reduce proofs then I think you might be able to dodge this bullet</p>",
        "id": 181268329,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1574300108
    },
    {
        "content": "<p>I'm not sure why your example loops. Perhaps lean doesn't notice that they are props? That seems unlikely...</p>",
        "id": 181268481,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1574300324
    },
    {
        "content": "<p>Abel and Coquand's paper with the original example is on arXiv: <a href=\"https://arxiv.org/abs/1911.08174\" target=\"_blank\" title=\"https://arxiv.org/abs/1911.08174\">https://arxiv.org/abs/1911.08174</a></p>",
        "id": 181308545,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1574346193
    },
    {
        "content": "<p>Just came across this: <a href=\"https://www.youtube.com/watch?v=rhNea8VlWcA\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=rhNea8VlWcA\">Cedille Cast #9: Impredicativity, proof-irrelevance, and normalization</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"rhNea8VlWcA\" href=\"https://www.youtube.com/watch?v=rhNea8VlWcA\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=rhNea8VlWcA\"><img src=\"https://i.ytimg.com/vi/rhNea8VlWcA/default.jpg\"></a></div>",
        "id": 182498829,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1575408909
    },
    {
        "content": "<p>No idea if this is related or interesting, but I stumbled upon this failing to reduce as well. It reduces if I replace <code>false</code> with <code>empty</code>.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">not&#39;</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">false</span>\n\n<span class=\"kn\">prefix</span> <span class=\"bp\">`</span> <span class=\"bp\">¬</span><span class=\"err\">&#39;</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">40</span> <span class=\"o\">:=</span> <span class=\"n\">not&#39;</span>\n\n<span class=\"n\">def</span> <span class=\"n\">X</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"err\">&#39;</span> <span class=\"bp\">¬</span><span class=\"err\">&#39;</span> <span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"err\">&#39;</span> <span class=\"bp\">¬</span><span class=\"err\">&#39;</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">assume</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"err\">&#39;</span> <span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"err\">&#39;</span> <span class=\"bp\">¬</span><span class=\"err\">&#39;</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">p</span><span class=\"o\">),</span>\n<span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hnnp</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">hnnp</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hnnp</span><span class=\"o\">,</span> <span class=\"n\">hp</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"n\">elim</span><span class=\"o\">)</span>\n\n<span class=\"bp\">#</span><span class=\"n\">reduce</span> <span class=\"n\">X</span>\n</pre></div>",
        "id": 186840845,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1580253708
    },
    {
        "content": "<p>What's Lean developers' attitude towards this counterexample of normalization</p>",
        "id": 244345786,
        "sender_full_name": "ice1000",
        "timestamp": 1624999812
    },
    {
        "content": "<p>This issue occurs in proof normalization, which is not something that matters in practice (we have made efforts to limit/deprecate things requiring proof normalization over time). It is still an open question whether well typed lean terms can cause nonterminating VM computations, which is what we really care about. In any case, it doesn't impact soundness which is what use in mathematics requires of the system.</p>",
        "id": 244347225,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1625000516
    },
    {
        "content": "<p>Even if VM computations could be made to loop, this is not a significant issue since you can already just turn off the termination checker and write <code>meta</code> code, and in practice most lean code written for execution is <code>meta</code> because the tactic monad is <code>meta</code></p>",
        "id": 244347734,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1625000798
    },
    {
        "content": "<p>Also, this example is specifically invoking the normalizer (aka <code>#reduce</code>). It is not an issue in definitional equality checking which is what is needed by the kernel and implemented by external checkers. I don't know how to turn this example into a nonterminating defeq check, because defeq of propositions is trivial. Combined with the fact that \"ideal\" defeq in lean is already known to be undecidable for other reasons, it does not represent a significant change of the status quo.</p>",
        "id": 244348390,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1625001097
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/Normalization.20fails.20in.20lean/near/244347734\">said</a>:</p>\n<blockquote>\n<p>Even if VM computations could be made to loop, this is not a significant issue since you can already just turn off the termination checker and write <code>meta</code> code, and in practice most lean code written for execution is <code>meta</code> because the tactic monad is <code>meta</code></p>\n</blockquote>\n<p>And also in practice there is not much difference between non-termination and very slow termination. Totality really is mostly interesting for soundness of reduction.</p>",
        "id": 244348550,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1625001176
    },
    {
        "content": "<p>The conventional wisdom on <code>#reduce</code> is already \"it's stupidly slow and times out on all non-toy examples\". A fun example is <code>#reduce 'a'</code></p>",
        "id": 244348633,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1625001226
    }
]