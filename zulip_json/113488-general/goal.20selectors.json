[
    {
        "content": "<p>In Coq they have really nice goal selectors. You can write things like</p>\n<div class=\"codehilite\"><pre><span></span>    <span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">5</span><span class=\"o\">,</span><span class=\"mi\">8</span><span class=\"o\">:</span> <span class=\"n\">cbn</span><span class=\"o\">;</span> <span class=\"kp\">by</span> <span class=\"k\">rewrite</span> <span class=\"n\">right_identity</span><span class=\"o\">.</span>\n    <span class=\"mi\">3</span><span class=\"o\">,</span><span class=\"mi\">4</span><span class=\"o\">:</span> <span class=\"k\">symmetry</span><span class=\"o\">;</span> <span class=\"k\">apply</span> <span class=\"n\">left_identity</span><span class=\"o\">.</span>\n</pre></div>\n\n\n<p>in your proof scripts. How hard would it be to get that for Lean tactic proofs?</p>",
        "id": 191463161,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584964929
    },
    {
        "content": "<p>I remember <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> had a <code>work_on_goal 1 { tac }</code> tactic that is used by tidy scripts; that could be adapted to select multiple goals</p>",
        "id": 191463920,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584965474
    },
    {
        "content": "<p>But it's still quite verbose</p>",
        "id": 191463934,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584965493
    },
    {
        "content": "<p>It would be nice if we could now hack Lean to support really short goal selectors</p>",
        "id": 191463951,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584965512
    },
    {
        "content": "<p>I'm not sure I want to encourage this kind of proof style though</p>",
        "id": 191463952,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584965516
    },
    {
        "content": "<p>No, I think the cost of hacking Lean to support this is way higher than the value of the slightly shorter proofs it would allow.</p>",
        "id": 191464006,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1584965542
    },
    {
        "content": "<p>numeric indexes are rarely the most maintainable</p>",
        "id": 191464018,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584965547
    },
    {
        "content": "<p>ok, fair enough</p>",
        "id": 191464083,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584965610
    },
    {
        "content": "<p>what's the recommended way to deal with proofs with lots of cases where there's perhaps lots of duplication at the start of some cases, somewhere in the middle of some cases and at the end of some cases?<br>\nassume that lemmas might not make sense because due to their specialized nature they will only be used in this one proof, and that we can't change the predicates that we work on to cause less duplication.</p>",
        "id": 191464418,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1584965796
    },
    {
        "content": "<p>I will often use <code>; try { tac }</code> if <code>tac</code> works on say 4 of the 16 goals I just got</p>",
        "id": 191464559,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584965878
    },
    {
        "content": "<p>in the past i've used multiple <code>any_goals</code>commands to deal with this, but it's terrible for maintainability because it makes the proofs very difficult to follow</p>",
        "id": 191464605,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1584965888
    },
    {
        "content": "<p><code>case</code> already accepts multiple goal tag names. Unfortunately goal tags aren't used widely in Lean 3.</p>",
        "id": 191467455,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1584967641
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> nice! I didn't even know that.</p>",
        "id": 191506567,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1584983871
    }
]