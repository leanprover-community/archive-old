[
    {
        "content": "<p>I have the following def:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">jacobi_sym</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℤ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℤ</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span>          <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span>          <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">b</span> <span class=\"err\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"k\">then</span> <span class=\"n\">jacobi_sym_aux</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"k\">else</span> <span class=\"mi\">0</span>\n\n<span class=\"n\">local</span> <span class=\"kn\">notation</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"bp\">|</span><span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"n\">jacobi_sym</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n</pre></div>\n\n\n<p>and I am trying to prove </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n<span class=\"err\">⊢</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"bp\">|</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"n\">quadratic_res</span> <span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">n</span> <span class=\"err\">∣</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"n\">quadratic_res</span> <span class=\"n\">a</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>How can I unfold <code> jacoby_sym </code> such that it shows <code> if b % 2 = 1 then jacobi_sym_aux a b else 0</code> ? <br>\nIf I write <code>unfold jacobi_sym</code> the tactic fails</p>",
        "id": 132573040,
        "sender_full_name": "Guy Leroy",
        "timestamp": 1534937617
    },
    {
        "content": "<p>MWE please</p>",
        "id": 132573174,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1534937834
    },
    {
        "content": "<p>but <code>rw [jacobi_sym.equations._eqn_2 a n h]</code> should work</p>",
        "id": 132573310,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1534938048
    },
    {
        "content": "<p>but a better solution would be to not use the equation compiler to define <code>jacobi_sym</code>, but rather use ite</p>",
        "id": 132573444,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1534938251
    },
    {
        "content": "<p>Thank you very much!</p>",
        "id": 132573551,
        "sender_full_name": "Guy Leroy",
        "timestamp": 1534938482
    },
    {
        "content": "<p>Out of curiosity, have you tried <code>dunfold</code>? It is based on <code>dsimp</code> which is more careful about preserving definitional equality.</p>",
        "id": 132583964,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1534950629
    }
]