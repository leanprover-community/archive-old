[
    {
        "content": "<p>I need infrastructure testers again. This thread is for you if you want to help users, especially beginners, and you have a working elan+python3+pip installation (and are not afraid of temporarily screwing up your mathlib tools). The install procedure is:</p>\n<ul>\n<li><code>git clone https://github.com/leanprover-community/mathlib-tools.git</code> if you don't already have it</li>\n<li><code>cd mathlib-tools</code></li>\n<li><code>git checkout refactor</code></li>\n<li>\n<p><code>sudo pip3 install .</code><br>\nThen you should have a brand new <code>leancli</code> toy (whose name is up for discussion). It is meant to replace <code>leanpkg</code>+<code>update-mathlib</code>+<code>cache_olean</code> except that one task corresponds to one command. Things to try out:</p>\n</li>\n<li>\n<p><code>leancli new myprojet</code> should create a new lean project with mathlib ready to go.</p>\n</li>\n<li>in a project depending on mathlib, <code>leancli upgrade-mathlib</code> should upgrade mathlib, including oleans</li>\n<li>in mathlib, <code>leancli upgrade-mathlib</code> should upgrade mathlib, including oleans</li>\n<li>in a project not depending on mathlib (?!),  <code>leancli add-mathlib</code> should make it a decent Lean project, including oleans</li>\n<li>in any project, <code>leancli mk-cache</code> and <code>lean-cli get-cache</code> should make and fetch olean cache. If this project is mathlib, that cache will live in <code>$HOME/.mathlib</code>, else it will live in <code>_cache</code> in the project</li>\n<li>in any project, <code>leancli build</code> should do a <code>leanpkg build</code></li>\n<li>in any project, <code>leancli hooks</code> should do what <code>setup-git-hooks</code> used to do</li>\n<li><code>leancli get tutorials</code> should give you the tutorials project, ready to use (alternative commands: <code>leancli get leanprover-community/tutorials</code> or <code>leancli get https://github.com/leanprover-community/tutorials.git</code>)</li>\n</ul>",
        "id": 188884880,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1582492792
    },
    {
        "content": "<p><code>leancli new myprojet</code> seems to work for me on Ubuntu 18.04, but probably that was the least of your worries.</p>",
        "id": 188888476,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582499450
    },
    {
        "content": "<p>This is still good to know!</p>",
        "id": 188889734,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1582501818
    },
    {
        "content": "<p>On OSX: making  new project works fine! When I go to mathlib and run <code>leancli upgrade-mathlib</code> (why did the name change from <code>update-mathlib</code>?) I get:</p>\n<div class=\"codehilite\"><pre><span></span>+alex:~/mathlib ((bcb63ebf...)) üêå leancli upgrade-mathlib\nTraceback (most recent call last):\n  File &quot;/usr/local/bin/leancli&quot;, line 8, in &lt;module&gt;\n    sys.exit(main())\n  File &quot;/usr/local/lib/python3.7/site-packages/mathlibtools/leancli.py&quot;, line 75, in main\n    &#39;hooks&#39;: hooks,\n  File &quot;/usr/local/lib/python3.7/site-packages/fire/core.py&quot;, line 138, in Fire\n    component_trace = _Fire(component, args, parsed_flag_args, context, name)\n  File &quot;/usr/local/lib/python3.7/site-packages/fire/core.py&quot;, line 471, in _Fire\n    target=component.__name__)\n  File &quot;/usr/local/lib/python3.7/site-packages/fire/core.py&quot;, line 675, in _CallAndUpdateTrace\n    component = fn(*varargs, **kwargs)\n  File &quot;/usr/local/lib/python3.7/site-packages/mathlibtools/leancli.py&quot;, line 26, in upgrade_mathlib\n    proj().upgrade_mathlib()\n  File &quot;/usr/local/lib/python3.7/site-packages/mathlibtools/leanproject.py&quot;, line 306, in upgrade_mathlib\n    rem = next(remote for remote in self.repo.remotes\nStopIteration\n</pre></div>",
        "id": 188889975,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1582502349
    },
    {
        "content": "<p>I believe this is my bad for having my mathlib remote url still pointing to <code>https://github.com/leanprover/mathlib.git</code>  which is the old url</p>",
        "id": 188890180,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1582502606
    },
    {
        "content": "<p>But probably this situation should still be handled either with a nice error message, or it shouldn't be too hard to make this url work too.</p>",
        "id": 188890186,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1582502639
    },
    {
        "content": "<p>e.g. \"You do not appear to have <code>leanprover-community/mathlib</code> as a remote for this repository. Are you sure you are in a mathlib repository?\"</p>",
        "id": 188890234,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1582502674
    },
    {
        "content": "<p>After fixing that and making sure I was on the <code>lean-3.5.1</code> branch it looks to work.<br>\nOne annoyance is that I usually checkout <code>origin/lean-3.5.1</code> which makes it error, maybe that was bad practice on my account still.</p>",
        "id": 188890438,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1582502977
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span>. About the upgrade name: this mess comes from the discrepancy between the existing <code>leanpkg upgrade</code> and <code>update-mathlib</code>. But I think I'll introduce aliases so that <code>leancli upgrade-mathlib</code>, <code>leancli update-mathlib</code> and <code>leancli up</code> all do the same.</p>",
        "id": 188905857,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1582530459
    },
    {
        "content": "<p>About git pulling mathlib, this is clearly the trickiest part, because there can be a wild diversity of git situations. I'll add a couple more heuristics, but the documentation will need to point out that, if you are in a weird setup, you can always do <code>git pull whatever &amp;&amp; leancli get-cache</code>.</p>",
        "id": 188905927,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1582530542
    },
    {
        "content": "<p>It would be nice to have tests on Windows as well. By <span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span> or <span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> maybe?</p>",
        "id": 188905954,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1582530599
    },
    {
        "content": "<p>Also I think <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> recently complained about API rate limit errors. Would you mind trying this brand new toy which should never hit that error (unless you ask for ancient nightlies).</p>",
        "id": 188906019,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1582530652
    },
    {
        "content": "<p>Thanks Patrick! I haven't tried it yet but this looks very nice. Can I bikeshed about the name? <code>leancli</code> sounds kind of awkward. What about <code>leanproject</code>? (Or <code>lean-project</code>?)</p>",
        "id": 188911964,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1582537683
    },
    {
        "content": "<p><code>cliean</code>?</p>",
        "id": 188912009,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1582537721
    },
    {
        "content": "<p>I can confirm that <code>leancli get-cache</code> works for me.  Regarding the name: since we already have all kinds of puns (<code>elan</code>, <code>trepplein</code>, lean forward, lean together, etc.), how about <code>penche</code>?</p>",
        "id": 188914214,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1582539843
    },
    {
        "content": "<p>Another name suggestion: <code>cline</code>.</p>",
        "id": 188921285,
        "sender_full_name": "Vaibhav Karve",
        "timestamp": 1582547771
    },
    {
        "content": "<p>As I wrote in the first message of this thread, the name is definitely open for bike-shedding. But I don't get the pun with <code>penche</code>.</p>",
        "id": 188921507,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1582547994
    },
    {
        "content": "<p>According to my French dictionary, \"pencher\" means \"to lean\".</p>",
        "id": 188921614,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1582548103
    },
    {
        "content": "<p>Are there other remarks about how the tools work? I was teaching this morning, and at 2 I'll go back to teach for three hours, so you all have time for testing.</p>",
        "id": 188921618,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1582548109
    },
    {
        "content": "<p>Oh, I didn't even think to try to read it as French.</p>",
        "id": 188921669,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1582548136
    },
    {
        "content": "<p>Ok, so it does work.</p>",
        "id": 188921676,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1582548148
    },
    {
        "content": "<p>What is \"lean\" as in \"thin\" in French?</p>",
        "id": 188921700,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1582548159
    },
    {
        "content": "<p>\"mince\" or \"svelte\"</p>",
        "id": 188921715,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1582548181
    },
    {
        "content": "<p>depending on context</p>",
        "id": 188921734,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1582548204
    },
    {
        "content": "<p>Ha, <code>mince</code> sounds like you're try to turn the olean files into minced meat or something (-;</p>",
        "id": 188921762,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1582548229
    },
    {
        "content": "<p>How about <code>fuzhou</code>, apparently the name of a prefecture in China which contains Le'an County?</p>",
        "id": 188922090,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1582548499
    },
    {
        "content": "<blockquote>\n<p>Le'an County</p>\n</blockquote>\n<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> for <code>‰πêÂÆâ new-project</code>, this reduces the risk of name collision.</p>",
        "id": 188922444,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1582548804
    },
    {
        "content": "<p>It's certainly more boring than <code>‰πêÂÆâ</code>, but the grammar of <code>leanproject</code> sounds nice. <code>leanproject new</code>, <code>leanproject upgrade-mathlib</code>, <code>leanproject fetch-cache</code>. When you have supporting tools that are going in peoples' paths, I think it's nice to make the name obviously connect to the main tool. If someone installed this and forgot about it, they'd have no idea after a while that <code>penche</code> and <code>lean</code> were connected.</p>",
        "id": 188928748,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1582553350
    },
    {
        "content": "<p>Ok, let's name that <code>leanproject</code>. Should I make a couple of fixes and open a PR to mathlib-tools or are there still people who want to test this or ask for different features? Are there people who would miss the current <code>update-mathlib</code>, <code>cache-olean</code> and <code>setup-git-hooks</code>? Or course <code>leanpkg</code> will stay, even if its direct use will be somehow deprecated.</p>",
        "id": 188946401,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1582564877
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> Thanks a lot for investing time in building this tool</p>",
        "id": 188946506,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1582564958
    },
    {
        "content": "<p>I just got a failure</p>\n<div class=\"codehilite\"><pre><span></span>PS C:\\Users\\sebas\\Desktop\\mathlib_master - Copie&gt; leancli upgrade-mathlib\nLooking for local mathlib oleans\nLooking for Azure mathlib oleans\nTrying to download https://oleanstorage.blob.core.windows.net/mathlib/8030469cccb4306230015df55ba50a5e280727bf.tar.gz¬†to C:\\Users\\sebas\\.mathlib\\8030469cccb4306230015df55ba50a5e280727bf.tar.gz\nTraceback (most recent call last):\n  File &quot;C:\\Program Files\\Python37\\Scripts\\leancli-script.py&quot;, line 11, in &lt;module&gt;\n    load_entry_point(&#39;mathlibtools==0.0.3&#39;, &#39;console_scripts&#39;, &#39;leancli&#39;)()\n  File &quot;c:\\program files\\python37\\lib\\site-packages\\mathlibtools\\leancli.py&quot;, line 75, in main\n    &#39;hooks&#39;: hooks,\n  File &quot;c:\\program files\\python37\\lib\\site-packages\\fire\\core.py&quot;, line 138, in Fire\n    component_trace = _Fire(component, args, parsed_flag_args, context, name)\n  File &quot;c:\\program files\\python37\\lib\\site-packages\\fire\\core.py&quot;, line 471, in _Fire\n    target=component.__name__)\n  File &quot;c:\\program files\\python37\\lib\\site-packages\\fire\\core.py&quot;, line 675, in _CallAndUpdateTrace\n    component = fn(*varargs, **kwargs)\n  File &quot;c:\\program files\\python37\\lib\\site-packages\\mathlibtools\\leancli.py&quot;, line 26, in upgrade_mathlib\n    proj().upgrade_mathlib()\n  File &quot;c:\\program files\\python37\\lib\\site-packages\\mathlibtools\\leanproject.py&quot;, line 317, in upgrade_mathlib\n    self.get_mathlib_olean()\n  File &quot;c:\\program files\\python37\\lib\\site-packages\\mathlibtools\\leanproject.py&quot;, line 227, in get_mathlib_olean\n    unpack_archive(get_mathlib_archive(self.mathlib_rev),\n  File &quot;c:\\program files\\python37\\lib\\site-packages\\mathlibtools\\leanproject.py&quot;, line 117, in get_mathlib_archive\n    download(AZURE_URL+fname, path)\n  File &quot;c:\\program files\\python37\\lib\\site-packages\\mathlibtools\\leanproject.py&quot;, line 96, in download\n    with target.open(&#39;wb&#39;) as tgt:\n  File &quot;c:\\program files\\python37\\lib\\pathlib.py&quot;, line 1165, in open\n    opener=self._opener)\n  File &quot;c:\\program files\\python37\\lib\\pathlib.py&quot;, line 1019, in _opener\n    return self._accessor.open(self, flags, mode)\nFileNotFoundError: [Errno 2] No such file or directory: &#39;C:\\\\Users\\\\sebas\\\\.mathlib\\\\8030469cccb4306230015df55ba50a5e280727bf.tar.gz&#39;\n</pre></div>\n\n\n<p>I then created by hand the directory <code>'C:\\\\Users\\\\sebas\\\\.mathlib</code> and tried again, and it worked.</p>",
        "id": 188950445,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1582567661
    },
    {
        "content": "<p>It seems like the error reporting situation here is not great. When a big script like this fails I have no idea how to recover or what alternative steps to take</p>",
        "id": 188955427,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582571098
    },
    {
        "content": "<p>Could you maybe sprinkle some <code>try:</code> around in the code and explain to the user what went wrong? User facing errors are not supposed to be stackdumps</p>",
        "id": 188955569,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582571207
    },
    {
        "content": "<p>Sure. We are at the testing phase where I do need to see tracebacks (not stackdumps...). But then I'll hide all that.</p>",
        "id": 188955646,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1582571275
    },
    {
        "content": "<blockquote>\n<p>Or course leanpkg will stay</p>\n</blockquote>\n<p><code>leanpkg</code> doesn't do anything magic.  There's nothing to stop you from replacing parts or all of it within <code>leanproject</code> if you want.</p>",
        "id": 188961334,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1582575087
    },
    {
        "content": "<p>I could avoid calling it from <code>leanproject</code>, but I guess we shouldn't remove it from <code>leanprover-community/lean</code></p>",
        "id": 188961454,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1582575161
    },
    {
        "content": "<p>I pushed a new version. Everybody is welcome to test (again). Please see the first message in this thread, except that <code>leancli</code> is now called <code>leanproject</code>.</p>",
        "id": 188968273,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1582579887
    },
    {
        "content": "<p>Note that <code>leanproject up</code> will have a hard time working on mathlib master. It may pull the lastest commit on master before CI builds it and pushes it to the cloud.</p>",
        "id": 188968600,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1582580105
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib-tools/pull/16\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib-tools/pull/16\">https://github.com/leanprover-community/mathlib-tools/pull/16</a></p>",
        "id": 188970878,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1582581673
    },
    {
        "content": "<p>Now is a good time to test!</p>",
        "id": 188970918,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1582581702
    },
    {
        "content": "<p>Oh, CI fails. I haven't modified any CI instructions. Is anyone familiar with CI on this repository and could try to port it to the new system?</p>",
        "id": 188971114,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1582581818
    },
    {
        "content": "<p>Note that the PR does include tests, ran by tox against python 3.5, 3.6, 3.7 and 3.8.</p>",
        "id": 188971239,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1582581909
    },
    {
        "content": "<p>I'll work on this CI tomorrow if nobody does it while I sleep, but everybody can already test by cloning the branch and installing. And everybody can review the python code.</p>",
        "id": 188971356,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1582581974
    },
    {
        "content": "<p>Is the intention to eventually drop the separate repository, and just include this tool in the main (community) lean repository?</p>",
        "id": 188972968,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1582583192
    },
    {
        "content": "<p>I don't know. I don't remember why we separated this repository.</p>",
        "id": 188972996,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1582583223
    },
    {
        "content": "<p>We separated it because of how different the testing of the tools was from testing the mathlib PRs and it caused the mathlib builds to fail for unforeseen reasons</p>",
        "id": 188974432,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1582584361
    },
    {
        "content": "<p>Sounds reasonable.</p>",
        "id": 188974807,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1582584662
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> When I run <code>leanproject get-cache</code> I get</p>\n<div class=\"codehilite\"><pre><span></span>Trying to download https://oleanstorage.blob.core.windows.net/mathlib/5770369f6d3f28356be20931c9ade07be37a01ad.tar.gz¬†to /home/jmc/.mathlib/5770369f6d3f28356be20931c9ade07be37a01ad.tar.gz\n</pre></div>\n\n\n<p>That's still the older slower URL, right?</p>",
        "id": 188998727,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1582617848
    },
    {
        "content": "<p>Also, should <code>leanproject up</code> work in a mathlib directory? That's not clear to me from the output of <code>--help</code></p>",
        "id": 188998753,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1582617871
    },
    {
        "content": "<p>I thought I changed the url, but something went wrong. This should work now</p>",
        "id": 189000957,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1582620494
    },
    {
        "content": "<p>About upgrade, how would you phrase the help message to make it clear it will work everywhere?</p>",
        "id": 189000991,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1582620543
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> What is the difference with <code>up</code>?</p>",
        "id": 189001690,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1582621323
    },
    {
        "content": "<p>I mean <code>get-cache</code> vs <code>up</code>.</p>",
        "id": 189001700,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1582621336
    },
    {
        "content": "<p>In mathlib itself, <code>up</code> will try to <code>git pull</code> then get oleans</p>",
        "id": 189001711,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1582621361
    },
    {
        "content": "<p>Aha, I see.</p>",
        "id": 189001719,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1582621376
    },
    {
        "content": "<p>In a project depending on mathlib, up will do what <code>leanpkg upgrade</code>+<code>leanpkg configure</code>+<code>update-mathlib</code> did</p>",
        "id": 189001733,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1582621404
    },
    {
        "content": "<p>without the occasional \"is not a tree\" weird error message.</p>",
        "id": 189001741,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1582621421
    },
    {
        "content": "<p>Ok, that seems useful.</p>",
        "id": 189001749,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1582621435
    },
    {
        "content": "<p>Is there a place where you want to document this, besides <code>--help</code>? Because this seems hard to summarise in one line.</p>",
        "id": 189001841,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1582621509
    },
    {
        "content": "<p>Or is <code>--help</code> also for longer explanations?</p>",
        "id": 189001848,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1582621518
    },
    {
        "content": "<p>Of course there will be longer help in a new version of <a href=\"https://github.com/leanprover-community/mathlib/blob/master/docs/install/project.md\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/docs/install/project.md\">https://github.com/leanprover-community/mathlib/blob/master/docs/install/project.md</a></p>",
        "id": 189001926,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1582621572
    },
    {
        "content": "<p>But <code>leanproject up --help</code> will also display more</p>",
        "id": 189001938,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1582621587
    },
    {
        "content": "<p>Aah, <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> I think it makes sense to show in the general <code>--help</code> that <code>CMD --help</code> will show more details.</p>",
        "id": 189002060,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1582621725
    },
    {
        "content": "<p>I don't know if we can do that in the current setup, I'll investigate. Yesterday I switched from <a href=\"https://google.github.io/python-fire/\" target=\"_blank\" title=\"https://google.github.io/python-fire/\">fire</a> to <a href=\"https://click.palletsprojects.com/en/7.x/\" target=\"_blank\" title=\"https://click.palletsprojects.com/en/7.x/\">click</a> for command line handling and help building (because it seemed easier to create aliases).</p>",
        "id": 189002193,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1582621838
    },
    {
        "content": "<p>Indeed, I think the output of <code>leanproject --help</code> could be expanded a bit. <code>upgrade-mathlib</code> in particular isn't clear. Maybe \"Upgrade a mathlib dependency to the latest compatible version\" or something like that?</p>",
        "id": 189004098,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1582623765
    },
    {
        "content": "<p>I managed to make travis happy: <a href=\"https://travis-ci.org/leanprover-community/mathlib-tools?utm_medium=notification&amp;utm_source=github_status\" target=\"_blank\" title=\"https://travis-ci.org/leanprover-community/mathlib-tools?utm_medium=notification&amp;utm_source=github_status\">https://travis-ci.org/leanprover-community/mathlib-tools?utm_medium=notification&amp;utm_source=github_status</a>. Now a much harder challenge will be AppVeyor.</p>",
        "id": 189033839,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1582647373
    },
    {
        "content": "<p>Gabriel, I don't understand your latest comment on this PR. Could you clarify what you wish?</p>",
        "id": 189432552,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583067585
    },
    {
        "content": "<p>Let me rephrase it:  when I run <code>leanproject up</code> on an up-to-date mathlib branch, it fetches oleans.  But when I run <code>leanproject up</code> on something that is not a mathlib branch, I suddenly get an error message from <code>git</code> with no further explanation.<br>\nThere is already a helpful error message when <code>leanproject</code> can't find the mathlib remote here:  <a href=\"https://github.com/leanprover-community/mathlib-tools/blob/fc2d84d5cc798a79fb16cf29f433fc77d56b5a25/mathlibtools/lib.py#L373-L375\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib-tools/blob/fc2d84d5cc798a79fb16cf29f433fc77d56b5a25/mathlibtools/lib.py#L373-L375\">https://github.com/leanprover-community/mathlib-tools/blob/fc2d84d5cc798a79fb16cf29f433fc77d56b5a25/mathlibtools/lib.py#L373-L375</a><br>\nI would also like to see this error message when the pull fails two lines after that: <a href=\"https://github.com/leanprover-community/mathlib-tools/blob/fc2d84d5cc798a79fb16cf29f433fc77d56b5a25/mathlibtools/lib.py#L377\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib-tools/blob/fc2d84d5cc798a79fb16cf29f433fc77d56b5a25/mathlibtools/lib.py#L377\">https://github.com/leanprover-community/mathlib-tools/blob/fc2d84d5cc798a79fb16cf29f433fc77d56b5a25/mathlibtools/lib.py#L377</a> (at least that's where I think the error comes from)</p>",
        "id": 189432775,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1583068015
    },
    {
        "content": "<p>Those lines will be executed when you are not working on mathlib.</p>",
        "id": 189432834,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583068183
    },
    {
        "content": "<p>When you are not working on mathlib, git pulling mathlib is handled by <code>leanpkg</code>.</p>",
        "id": 189432876,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583068213
    },
    {
        "content": "<p>AFAICT <code>leanproject up</code> executes <code>proj().upgrade_mathlib()</code>.  The lines I've quoted are then executed if <code>self.is_mathlib</code> is true (which I hope is the case if I'm working on mathlib).</p>",
        "id": 189433171,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1583068834
    },
    {
        "content": "<p>By \"not a mathlib branch\", I mean a branch in mathlib that is only on my own fork (i.e. no corresponding branch on <code>leanprover-community</code>), or I've checked out some random commit (which is on <code>leanprover-community/mathlib</code> but doesn't correspond to any branch).</p>",
        "id": 189433217,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1583068924
    },
    {
        "content": "<p>Ok, I misunderstood \"not a mathlib branch\".</p>",
        "id": 189433227,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583068967
    },
    {
        "content": "<p>This should be fixed now.</p>",
        "id": 189433772,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583070224
    },
    {
        "content": "<p>I think I emptied the request stream. The only thing that is missing is upgrading mathlib to a new version of Lean. One thing we can do is <code>leanproject upgrade-mathlib</code> could ask GitHub whether there is a leanprover-community/mathlib branch named <code>lean-X.Y.Z</code> with <code>X.Y.Z</code> bigger than the Lean version currently used by the project (note this would cost a bit of  time). Then we could change the project Lean version and upgrade mathlib. Do we want that? Do we want <code>leanproject</code> to ask for confirmation before doing that? Or should this be a manual only operation (or a new command in <code>leanproject</code>)?</p>",
        "id": 189433889,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583070451
    },
    {
        "content": "<p><code>leanproject upgrade-lean</code> could also be part of the next PR.  I think <code>leanproject</code> is sufficiently polished and tested now that we should merge the PR and make a new release on pypi.</p>",
        "id": 189434219,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1583071107
    },
    {
        "content": "<p>This will be quick to implement, I can do it tonight if we decide what we want.</p>",
        "id": 189435662,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583073990
    },
    {
        "content": "<p>I think <code>leanproject upgrade-lean</code> should probably take an optional Lean version. So with no version given it upgrades to the newest Lean it can find, and <code>leanproject upgrade-lean 3.6.1</code> does what you'd expect even after 3.6.2 is released.</p>",
        "id": 189435725,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1583074124
    },
    {
        "content": "<p>Do I understand correctly that you both think <code>leanproject upgrade-mathlib</code> should not silently upgrade the lean version?</p>",
        "id": 189435739,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583074177
    },
    {
        "content": "<p>We could have a flag for it. <code>leanproject upgrade-mathlib --upgrade-lean</code>if the default is not to, or swap the default. I'm not sure which is better.</p>",
        "id": 189435793,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1583074306
    },
    {
        "content": "<p>My instinct is to do less by default.</p>",
        "id": 189435840,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1583074356
    },
    {
        "content": "<p>Given that we don't backport anything to old mathlib branches, I would say people who want to upgrade mathlib want to upgrade Lean. But we could at least ask for confirmation.</p>",
        "id": 189435847,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583074383
    },
    {
        "content": "<p>Actually, I'd skip the step of asking for confirmation. As long as there's an option <code>upgrade-mathlib --no-lean-upgrade</code> or whatever, I think it's fine.</p>",
        "id": 189435906,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1583074518
    },
    {
        "content": "<p>Adding prompts just makes the directions for new users more confusing.</p>",
        "id": 189435912,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1583074529
    },
    {
        "content": "<p>Currently <code>leanproject check</code> prompts before touching oleans.</p>",
        "id": 189435953,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583074585
    },
    {
        "content": "<p>That's fine, it's not part of the normal workflow, right?</p>",
        "id": 189435965,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1583074651
    },
    {
        "content": "<p>It's part of making Jason feel safer (and also of helping debugging new users on Zulip).</p>",
        "id": 189436007,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583074695
    },
    {
        "content": "<p>So not part of the normal workflow.</p>",
        "id": 189436063,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583074810
    },
    {
        "content": "<p>I just got a surprising error message from <code>leanproject</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">&gt;</span> <span class=\"n\">leanproject</span> <span class=\"n\">up</span>\n<span class=\"n\">Looking</span> <span class=\"n\">for</span> <span class=\"n\">local</span> <span class=\"n\">mathlib</span> <span class=\"n\">oleans</span>\n<span class=\"n\">Looking</span> <span class=\"n\">for</span> <span class=\"n\">remote</span> <span class=\"n\">mathlib</span> <span class=\"n\">oleans</span>\n<span class=\"n\">Trying</span> <span class=\"n\">to</span> <span class=\"n\">download</span> <span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">oleanstorage</span><span class=\"bp\">.</span><span class=\"n\">azureedge</span><span class=\"bp\">.</span><span class=\"n\">net</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/</span><span class=\"n\">e0030149a7e753283e01c64f6ec8de94d2eebf93</span><span class=\"bp\">.</span><span class=\"n\">tar</span><span class=\"bp\">.</span><span class=\"n\">gz</span>¬†<span class=\"n\">to</span> <span class=\"n\">C</span><span class=\"o\">:</span><span class=\"err\">\\</span><span class=\"n\">Users</span><span class=\"err\">\\</span><span class=\"n\">Sebastien</span><span class=\"err\">\\</span><span class=\"bp\">.</span><span class=\"n\">mathlib</span><span class=\"err\">\\</span><span class=\"n\">e0030149a7e753283e01c64f6ec8de94d2eebf93</span><span class=\"bp\">.</span><span class=\"n\">tar</span><span class=\"bp\">.</span><span class=\"n\">gz</span>\n<span class=\"mi\">100</span><span class=\"err\">%</span><span class=\"bp\">|</span><span class=\"err\">‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà</span><span class=\"bp\">|</span> <span class=\"mi\">215</span><span class=\"bp\">/</span><span class=\"mi\">215</span> <span class=\"o\">[</span><span class=\"mi\">00</span><span class=\"o\">:</span><span class=\"mi\">00</span><span class=\"bp\">&lt;</span><span class=\"err\">?</span><span class=\"o\">,</span> <span class=\"err\">?</span><span class=\"n\">iB</span><span class=\"bp\">/</span><span class=\"n\">s</span><span class=\"o\">]</span>\n<span class=\"n\">Found</span> <span class=\"n\">mathlib</span> <span class=\"n\">oleans</span> <span class=\"n\">at</span> <span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">oleanstorage</span><span class=\"bp\">.</span><span class=\"n\">azureedge</span><span class=\"bp\">.</span><span class=\"n\">net</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/</span>\n<span class=\"n\">C</span><span class=\"o\">:</span><span class=\"err\">\\</span><span class=\"n\">Users</span><span class=\"err\">\\</span><span class=\"n\">Sebastien</span><span class=\"err\">\\</span><span class=\"bp\">.</span><span class=\"n\">mathlib</span><span class=\"err\">\\</span><span class=\"n\">e0030149a7e753283e01c64f6ec8de94d2eebf93</span><span class=\"bp\">.</span><span class=\"n\">tar</span><span class=\"bp\">.</span><span class=\"n\">gz</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">a</span> <span class=\"n\">compressed</span> <span class=\"n\">or</span> <span class=\"n\">uncompressed</span> <span class=\"n\">tar</span> <span class=\"n\">file</span>\n</pre></div>\n\n\n<p>If I understand correctly, the oleans are not yet on Azure, so it downloaded the <code>.xml</code> file and then realized it's not the right file. What is confusing to me is that it mentions a <code>.tar.gz</code> file, and then says it is not a compressed or uncompressed <code>tar</code> file.</p>",
        "id": 189567385,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1583217484
    },
    {
        "content": "<p>S√©bastien, when did you last upgrade leanproject? This xml thing should not happen anymore.</p>",
        "id": 189570322,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583222337
    },
    {
        "content": "<p>The fact that it mentions a tar.gz file is not suprising, leanproject is making up that file name from the commit hash.</p>",
        "id": 189570333,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583222361
    },
    {
        "content": "<p>Yes, I was probably just working with an old version. Sorry for the noise.</p>\n<p>(I have just updated and tried again, but now the oleans are already there on Azure so I can't conclude anything)</p>",
        "id": 189573240,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1583225596
    },
    {
        "content": "<p>I hope <span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span> and <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> will have time to fix that Azure delay issue. This is the main thing blocking the release of <code>leanproject</code>. Until that is fixed, this tool will remain completely unreliable.</p>",
        "id": 189573483,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583225832
    },
    {
        "content": "<p>That tool is already amazing. With a good error message explaining what is going on in case of failure, I think it can (and should?) be released now.</p>",
        "id": 189574044,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1583226358
    },
    {
        "content": "<p>I tried it now, just after a push to mathlib. Indeed I don't get any more the weird error message. Instead, I have</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">&gt;</span> <span class=\"n\">leanproject</span> <span class=\"n\">up</span>\n<span class=\"n\">Looking</span> <span class=\"n\">for</span> <span class=\"n\">local</span> <span class=\"n\">mathlib</span> <span class=\"n\">oleans</span>\n<span class=\"n\">Looking</span> <span class=\"n\">for</span> <span class=\"n\">remote</span> <span class=\"n\">mathlib</span> <span class=\"n\">oleans</span>\n<span class=\"n\">Trying</span> <span class=\"n\">to</span> <span class=\"n\">download</span> <span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">oleanstorage</span><span class=\"bp\">.</span><span class=\"n\">azureedge</span><span class=\"bp\">.</span><span class=\"n\">net</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"n\">d1bd457d4da3383a8154528bb2df09a977523a2</span><span class=\"bp\">.</span><span class=\"n\">tar</span><span class=\"bp\">.</span><span class=\"n\">gz</span>¬†<span class=\"n\">to</span> <span class=\"n\">C</span><span class=\"o\">:</span><span class=\"err\">\\</span><span class=\"n\">Users</span><span class=\"err\">\\</span><span class=\"n\">sebas</span><span class=\"err\">\\</span><span class=\"bp\">.</span><span class=\"n\">mathlib</span><span class=\"err\">\\</span><span class=\"mi\">2</span><span class=\"n\">d1bd457d4da3383a8154528bb2df09a977523a2</span><span class=\"bp\">.</span><span class=\"n\">tar</span><span class=\"bp\">.</span><span class=\"n\">gz</span>\n<span class=\"n\">Looking</span> <span class=\"n\">for</span> <span class=\"n\">GitHub</span> <span class=\"n\">mathlib</span> <span class=\"n\">oleans</span>\n<span class=\"n\">Info</span><span class=\"o\">:</span> <span class=\"n\">No</span> <span class=\"n\">github</span> <span class=\"kn\">section</span> <span class=\"n\">found</span> <span class=\"k\">in</span> <span class=\"err\">&#39;</span><span class=\"n\">git</span> <span class=\"n\">config&#39;</span><span class=\"o\">,</span> <span class=\"n\">we</span> <span class=\"n\">will</span> <span class=\"n\">use</span> <span class=\"n\">GitHub</span> <span class=\"k\">with</span> <span class=\"n\">no</span> <span class=\"n\">authentication</span>\n<span class=\"n\">Failed</span> <span class=\"n\">to</span> <span class=\"n\">fetch</span> <span class=\"n\">mathlib</span> <span class=\"n\">oleans</span>\n</pre></div>\n\n\n<p>I think an error message like <code>oleans not found on Azure. This is usually due to a delay between a push to master and the generation of oleans. Please retry in one hour</code> would be helpful in this situation.</p>",
        "id": 189574271,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1583226525
    },
    {
        "content": "<p>I don't want to wait an hour, I'd rather have the last mathlib for which the oleans are on Azure, right now. I never had to wait for update-mathlib and I don't care if I'm one day out of date. Or is this a problem which is only temporary?</p>\n<p>My instinct is not to switch until I'm being assured that I don't have to wait for an hour.</p>",
        "id": 189576297,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583228232
    },
    {
        "content": "<p>PS should I worry about the \"no authentication\" line? I get this on at least one of the machines I use lean on</p>",
        "id": 189576368,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583228292
    },
    {
        "content": "<p>it's not really a security concern, but it does mean that you get rate limited</p>",
        "id": 189577219,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583229201
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> <code>leanproject get-cache</code> should get you yesterdays oleans...</p>",
        "id": 189579793,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583231360
    },
    {
        "content": "<p>Kevin, I think you missed part of the discussion. There shouldn't be any need to wait. The issue is that our continuous integration keeps building the same lean files but with different git commits. Mergify creates merge commits with no added content compared to the successful build that prompted mergify to merge. Anyway, don't worry about this, Gabriel and Rob will fix it.</p>",
        "id": 189588918,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583239225
    },
    {
        "content": "<p>I thought about the delay a bit more, and I have most of a solution. It's kind of a subtle thing. What we want goes way against the grain of Mergify. And there are enough little things that Mergify does (queuing, setting the commit author, closing PRs, deleting branches) that it will be a huge pain to reimplement in e.g. Actions.</p>\n<p>The big issue is that the final Mergify build has a different git hash than the merge commit that will get pushed to master. And we can't predict what the master commit will be until it happens. But what we can do is this. We store a table in Azure that maps file hashes to git hashes. By a file hash, I mean a hash computed from all .lean files in <code>src</code> and <code>leanpkg.toml</code>. When an archive gets uploaded to Azure, we add a row to the table. </p>\n<p>If <code>leanproject</code> doesn't find an archive corresponding to the git hash, it can compute the file hash, and query the table; if there's a row for that file hash, it points to an archive built from a different commit, but with identical lean files. So it's safe to use that archive instead.</p>",
        "id": 189599261,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1583247045
    },
    {
        "content": "<p>That sounds like a good solution. But where do the file hashes get computed for the entries in the table in Azure?</p>",
        "id": 189600945,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583247965
    },
    {
        "content": "<p>I currently don't know the system very well. Who is pushing the oleans to Azure. Is mergify doing this? Or some other part of CI?</p>",
        "id": 189601008,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583248004
    },
    {
        "content": "<p>GitHub Actions is in charge of pushing the archives to Azure. It can compute the file hashes. We need to make sure that Actions and <code>leanproject</code> compute the same hash, so I think they should use the same Python script.</p>",
        "id": 189601394,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1583248260
    },
    {
        "content": "<p>This</p>\n<div class=\"codehilite\"><pre><span></span>find src | grep &quot;[.]lean$&quot; | sort | xargs sha512sum | sha512sum\n</pre></div>\n\n\n<p>is fast (instant, &lt; 0.1s) on my machine, and makes sure that the order in which files are visited doesn't influence the hash.</p>",
        "id": 189601724,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583248495
    },
    {
        "content": "<p>Is it OS independent?</p>",
        "id": 189601754,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1583248518
    },
    {
        "content": "<p>I really don't know what I can expect windows users to have nowadays</p>",
        "id": 189601808,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583248550
    },
    {
        "content": "<p>Do we expect them to have <code>git bash</code>?</p>",
        "id": 189601824,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583248561
    },
    {
        "content": "<p>Or is that no longer a prerequisite to installing mathlib and friends?</p>",
        "id": 189601894,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583248579
    },
    {
        "content": "<p>We'll have to do this from Python in <code>leanproject</code>. Instead of calling a bash script from Python that might not work on every OS, we should probably just implement it in Python.</p>",
        "id": 189601907,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1583248585
    },
    {
        "content": "<p>Apparently you get all files in subdirectories with</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">glob</span>\n\n<span class=\"n\">files</span> <span class=\"o\">=</span> <span class=\"n\">glob</span><span class=\"o\">.</span><span class=\"n\">glob</span><span class=\"p\">(</span><span class=\"n\">my_path</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;/**/*.lean&#39;</span><span class=\"p\">,</span> <span class=\"n\">recursive</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre></div>",
        "id": 189602308,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583248704
    },
    {
        "content": "<p>I think something like this is right.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\"># adapted from https://stackoverflow.com/questions/24937495/how-can-i-calculate-a-hash-for-a-filesystem-directory-using-python</span>\n<span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">import</span> <span class=\"nn\">hashlib</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pathlib</span> <span class=\"kn\">import</span> <span class=\"n\">Path</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">md5_update_from_file</span><span class=\"p\">(</span><span class=\"n\">filename</span><span class=\"p\">,</span> <span class=\"nb\">hash</span><span class=\"p\">):</span>\n    <span class=\"k\">assert</span> <span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"n\">filename</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">is_file</span><span class=\"p\">()</span>\n    <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">filename</span><span class=\"p\">),</span> <span class=\"s2\">&quot;rb&quot;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n        <span class=\"k\">for</span> <span class=\"n\">chunk</span> <span class=\"ow\">in</span> <span class=\"nb\">iter</span><span class=\"p\">(</span><span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"mi\">4096</span><span class=\"p\">),</span> <span class=\"sa\">b</span><span class=\"s2\">&quot;&quot;</span><span class=\"p\">):</span>\n            <span class=\"nb\">hash</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">chunk</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"nb\">hash</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">md5_file</span><span class=\"p\">(</span><span class=\"n\">filename</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">md5_update_from_file</span><span class=\"p\">(</span><span class=\"n\">filename</span><span class=\"p\">,</span> <span class=\"n\">hashlib</span><span class=\"o\">.</span><span class=\"n\">md5</span><span class=\"p\">())</span><span class=\"o\">.</span><span class=\"n\">hexdigest</span><span class=\"p\">()</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">md5_update_from_dir</span><span class=\"p\">(</span><span class=\"n\">directory</span><span class=\"p\">,</span> <span class=\"nb\">hash</span><span class=\"p\">):</span>\n    <span class=\"k\">assert</span> <span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"n\">directory</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">is_dir</span><span class=\"p\">()</span>\n    <span class=\"k\">for</span> <span class=\"n\">path</span> <span class=\"ow\">in</span> <span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"n\">directory</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">iterdir</span><span class=\"p\">()):</span>\n        <span class=\"k\">if</span> <span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">is_file</span><span class=\"p\">()</span> <span class=\"ow\">and</span> <span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">suffix</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;.lean&#39;</span><span class=\"p\">:</span>\n            <span class=\"nb\">hash</span> <span class=\"o\">=</span> <span class=\"n\">md5_update_from_file</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">,</span> <span class=\"nb\">hash</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"nb\">hash</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">md5_dir</span><span class=\"p\">(</span><span class=\"n\">directory</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">md5_update_from_dir</span><span class=\"p\">(</span><span class=\"n\">directory</span><span class=\"p\">,</span> <span class=\"n\">hashlib</span><span class=\"o\">.</span><span class=\"n\">md5</span><span class=\"p\">())</span><span class=\"o\">.</span><span class=\"n\">hexdigest</span><span class=\"p\">()</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">md5_dir_and_file</span><span class=\"p\">(</span><span class=\"n\">directory</span><span class=\"p\">,</span> <span class=\"n\">file</span><span class=\"p\">):</span>\n  <span class=\"n\">dir_hash</span> <span class=\"o\">=</span> <span class=\"n\">md5_update_from_dir</span><span class=\"p\">(</span><span class=\"n\">directory</span><span class=\"p\">,</span> <span class=\"n\">hashlib</span><span class=\"o\">.</span><span class=\"n\">md5</span><span class=\"p\">())</span>\n  <span class=\"n\">dir_file_hash</span> <span class=\"o\">=</span> <span class=\"n\">md5_update_from_file</span><span class=\"p\">(</span><span class=\"n\">file</span><span class=\"p\">,</span> <span class=\"n\">dir_hash</span><span class=\"p\">)</span>\n  <span class=\"k\">return</span> <span class=\"n\">dir_file_hash</span><span class=\"o\">.</span><span class=\"n\">hexdigest</span><span class=\"p\">()</span>\n\n<span class=\"n\">root</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">getcwd</span><span class=\"p\">()</span>\n<span class=\"n\">src_dir</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">,</span> <span class=\"s1\">&#39;src&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">toml_path</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">,</span> <span class=\"s1\">&#39;leanpkg.toml&#39;</span><span class=\"p\">)</span>\n<span class=\"nb\">hash</span> <span class=\"o\">=</span> <span class=\"n\">md5_dir_and_file</span><span class=\"p\">(</span><span class=\"n\">src_dir</span><span class=\"p\">,</span> <span class=\"n\">toml_path</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">hash</span><span class=\"p\">)</span>\n</pre></div>",
        "id": 189603513,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1583249418
    },
    {
        "content": "<p>This will be sensitive to the presence of untracked .lean files in the src directory.</p>",
        "id": 189603561,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1583249445
    },
    {
        "content": "<p>Maybe it should use the git Python library to only check files that are part of the repo.</p>",
        "id": 189603629,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1583249484
    },
    {
        "content": "<p>Do you really want to use md5?</p>",
        "id": 189603801,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583249603
    },
    {
        "content": "<p>I thought that was deprecated half a century ago...</p>",
        "id": 189603813,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583249614
    },
    {
        "content": "<p>That was just from the StackOverflow example, but I don't think it really matters.</p>",
        "id": 189603842,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1583249641
    },
    {
        "content": "<p>There's no security concern here.</p>",
        "id": 189603900,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1583249666
    },
    {
        "content": "<p>Sure...</p>",
        "id": 189603952,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583249702
    },
    {
        "content": "<p>Good catch that you also take the toml into account</p>",
        "id": 189603992,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583249736
    },
    {
        "content": "<p>With this approach, there will only be a short delay between a commit hitting master and the correctly named archive being uploaded. We'll be able to grab the oleans and skip the build. The untracked file worry only matters in that minute in between.</p>",
        "id": 189604081,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1583249777
    },
    {
        "content": "<p><a href=\"https://gist.github.com/seveas/4318006\" target=\"_blank\" title=\"https://gist.github.com/seveas/4318006\">https://gist.github.com/seveas/4318006</a> -- git-list-all-files</p>",
        "id": 189604129,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583249826
    },
    {
        "content": "<p>If we just filter for <code>.lean</code> and <code>.toml</code>, then we would be done, I guess.</p>",
        "id": 189604171,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583249864
    },
    {
        "content": "<p>That looks like major overkill, all files that have ever existed in the repo in any branch? We just want the current head.</p>",
        "id": 189604309,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1583249946
    },
    {
        "content": "<p>But I'm sure there's a way to get this.</p>",
        "id": 189604328,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1583249958
    },
    {
        "content": "<p>Hmmm, you are right.. I didn't read carefully</p>",
        "id": 189604613,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583250140
    },
    {
        "content": "<p>I need to do other things this afternoon, but I leave a challenge for <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> . Give me a Python script that computes this hash, reliably across OSes. I'll give you a URL pattern to check if <code>leanproject</code> fails to find an archive at the git hash URL. If successful it will return JSON with an alternate git hash to look for.</p>",
        "id": 189604618,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1583250142
    },
    {
        "content": "<p>You know what, ignore that. It will be better to keep this out of <code>leanproject</code> entirely. We can live with a delay of a couple minutes between a commit hitting master and the archive being available. Then this can stay entirely in CI.</p>",
        "id": 189605006,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1583250455
    },
    {
        "content": "<p>In that case you can even resort to my 1-liner (-;</p>",
        "id": 189605122,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583250525
    },
    {
        "content": "<p>Gotta include <code>leanpkg.toml</code> too...</p>",
        "id": 189605194,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1583250583
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>find . | grep &#39;[.]lean$\\|[.]toml$&#39; | sort | xargs shasum | shasum\n</pre></div>",
        "id": 189605526,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583250790
    },
    {
        "content": "<p>Only find <code>lean</code> files in <code>src/</code>, but include <code>leanpkg.toml</code> which is in <code>.</code>? :)</p>",
        "id": 189605647,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1583250856
    },
    {
        "content": "<p>Hmmm, do we not want <code>archive/</code> etc?</p>",
        "id": 189605752,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583250937
    },
    {
        "content": "<p>Nope. Why should we refuse to use olean files from a build that only changed something in archive?</p>",
        "id": 189605931,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1583251023
    },
    {
        "content": "<p>Please also include the output of <code>lean --version</code>, if possible.  Otherwise this is a bit flaky if you use <code>leanprover-community/lean:nightly</code> as the lean version in <code>leanpkg.toml</code>.</p>",
        "id": 189606228,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1583251194
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>echo `find src | grep &#39;[.]lean$&#39; | sort | xargs shasum` `shasum leanpkg.toml` &quot;lean --version:&quot; `lean --version` | shasum | head -c 40; echo\nffd5c1d3c3db39f68d267a5f6d75696ccc8925b4\n</pre></div>",
        "id": 189606492,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583251331
    },
    {
        "content": "<p>This was on a dirty mathlib, so you shouldn't be able to reproduce (-;</p>",
        "id": 189606793,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583251498
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span>  I'm not sure I understand the conclusion of this shasum discussion. Do you expect me to do something?</p>",
        "id": 189633016,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583268810
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> not at the moment. Although, a flag for <code>leanproject get-cache</code> to skip the <code>mathlib-nightly</code> lookup would be helpful! (Meaning, just fail if the cache doesn't exist on Azure.)</p>",
        "id": 189675704,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1583315841
    },
    {
        "content": "<p>I have this mostly implemented. There seems to be a small bug in <code>leanproject</code> blocking it for now: <a href=\"https://github.com/leanprover-community/mathlib-tools/pull/16#issuecomment-594527235\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib-tools/pull/16#issuecomment-594527235\">https://github.com/leanprover-community/mathlib-tools/pull/16#issuecomment-594527235</a></p>",
        "id": 189690752,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1583329246
    },
    {
        "content": "<p>When this lands, oleans should be available on Azure about a minute after a commit hits master, as long as that commit came from a PR from a mathlib branch.</p>",
        "id": 189690827,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1583329319
    },
    {
        "content": "<p>Thanks. What you describe is not a bug, this is the intended behavior of this <code>-u</code> option. It was meant to provide the base url, not the tar.gz file url.</p>",
        "id": 189690896,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583329363
    },
    {
        "content": "<p>Oh, I see. Can I have an option to direct it to a different filename too?</p>",
        "id": 189690962,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1583329423
    },
    {
        "content": "<p>Even better if I can give it the filename and not the full URL!</p>",
        "id": 189690972,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1583329435
    },
    {
        "content": "<p>I don't understand what you want.</p>",
        "id": 189691022,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583329444
    },
    {
        "content": "<p>I want to say \"even though the git hash is <code>xyz</code>, use the oleans from <code>abc.tar.gz</code> instead.\"</p>",
        "id": 189691073,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1583329500
    },
    {
        "content": "<p>The idea being, <code>abc</code> and <code>xyz</code> are different commits that contain identical Lean files.</p>",
        "id": 189691129,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1583329542
    },
    {
        "content": "<p>And who is providing the hashes xyz and abc?</p>",
        "id": 189691139,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583329547
    },
    {
        "content": "<p>We don't want end-users to see any of this trickery, right?</p>",
        "id": 189691196,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583329567
    },
    {
        "content": "<p>I provide <code>abc</code>. You're computing <code>xyz</code> from the current git hash but I want to ignore it in this case.</p>",
        "id": 189691200,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1583329569
    },
    {
        "content": "<p>This is an option, nobody has to use this if they don't know what they're doing.</p>",
        "id": 189691214,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1583329585
    },
    {
        "content": "<p>But let's say Kevin wants to upgrade mathlib, without needing to be lucky to want that one hour and a half after the lean-3.5.1 branch is moved to a new commit in the morning. Does he need to do anything?</p>",
        "id": 189691308,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583329656
    },
    {
        "content": "<p>No.</p>",
        "id": 189691330,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1583329671
    },
    {
        "content": "<p>(I hope Kevin won't mind being used as the archetypal clueless user in this discussion).</p>",
        "id": 189691418,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583329704
    },
    {
        "content": "<p>So, who will be using this option. CI?</p>",
        "id": 189691437,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583329728
    },
    {
        "content": "<p>Yes, CI and users who know what they're doing.</p>",
        "id": 189691481,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1583329777
    },
    {
        "content": "<p>Ok, fine.</p>",
        "id": 189691502,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583329797
    },
    {
        "content": "<p>I'll do that as soon as I'll be done with marking.</p>",
        "id": 189691552,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583329812
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 189691559,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1583329817
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110596\">Rob Lewis</span> <a href=\"#narrow/stream/113488-general/topic/new.20mathlib.20tools/near/189691073\" title=\"#narrow/stream/113488-general/topic/new.20mathlib.20tools/near/189691073\">said</a>:</p>\n<blockquote>\n<p>I want to say \"even though the git hash is <code>xyz</code>, use the oleans from <code>abc.tar.gz</code> instead.\"</p>\n</blockquote>\n<p>Which command do you this option to modify? Is it only <code>leanproject get-cache</code>? Or do you also want <code>leanproject upgrade-mathlib</code> to be also using it?</p>",
        "id": 189773954,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583401221
    },
    {
        "content": "<p>I tried to think about implementation but there is too much to guess here. I need to know <em>precisely</em> what you actually want to do on your side.</p>",
        "id": 189774403,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583401662
    },
    {
        "content": "<p>You probably have a function <code>compute_hash</code> somewhere. Can every command that uses this function get an option <code>--use-hash</code> that specifies a hash (without the <code>.tar.gz</code> suffix) that will be used instead of whatever result <code>compute_hash</code> returns?</p>",
        "id": 189775611,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583402536
    },
    {
        "content": "<p>Thanks Johan, but this kind of message is exactly what doesn't help ( trying to guess what leanproject does and running into XY problem).</p>",
        "id": 189779603,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583406052
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> In the worst case, you can always run curltar yourself:</p>\n<div class=\"codehilite\"><pre><span></span>curl https://oleanstorage.azureedge.net/mathlib/<span class=\"nv\">$MY_FAVORITE_HASH</span>.tar.gz <span class=\"p\">|</span> tar xz\n<span class=\"c1\"># or if you want a one-line replacement for `leanproject get-cache`:</span>\ncurl https://oleanstorage.azureedge.net/mathlib/<span class=\"k\">$(</span>git rev-parse HEAD<span class=\"k\">)</span>.tar.gz <span class=\"p\">|</span> tar xz\n</pre></div>",
        "id": 189780029,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1583406391
    },
    {
        "content": "<p>Is there anything else on the wishlist apart from Rob's item?</p>",
        "id": 189782754,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583408942
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/new.20mathlib.20tools/near/189774403\" title=\"#narrow/stream/113488-general/topic/new.20mathlib.20tools/near/189774403\">said</a>:</p>\n<blockquote>\n<p>I tried to think about implementation but there is too much to guess here. I need to know <em>precisely</em> what you actually want to do on your side.</p>\n</blockquote>\n<p>I only care about <code>get-cache</code>. I don't think it makes sense for <code>upgrade-mathlib</code>. Just like <code>-u</code> lets me change the base url where it looks for the archive, I'd like to change the filename as well.</p>",
        "id": 189784844,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1583410990
    },
    {
        "content": "<p>So regardless of my current mathlib version, if I type <code>leanproject -u mywebsite.com -n filename.tar.gz get-cache</code>  it will download the archive from <code>mywebsite.com/filename.tar.gz</code>.</p>",
        "id": 189784954,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1583411079
    },
    {
        "content": "<p>We only use this for CI, right?  Why not just <code>curl https://mywebsite.com/filename.tar.gz | tar xz</code>?</p>",
        "id": 189785293,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1583411363
    },
    {
        "content": "<p>Well, first we check for the file in the normal place, and then there's the olean touching logic. So it would be repeating a bunch of features of <code>leanproject get-cache</code>. But we could.</p>",
        "id": 189786074,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1583411904
    },
    {
        "content": "<p>I'm not sure we should be touching oleans in CI anyhow.  The CI servers should all have the same timezone and time, so there shouldn't be any issues.  And if there are issues, it's okay if they build twice.</p>",
        "id": 189786444,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1583412169
    },
    {
        "content": "<p>Am I getting this right?  We first check if there's the file for the current commit (in case somebody pushes the same commit to a different branch?), and then we check if there's a file for the current content hash?  Isn't the first check redundant?</p>",
        "id": 189786498,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1583412222
    },
    {
        "content": "<p>Big disclaimer, I'm home sick with a fever today, so yes you're probably right.</p>",
        "id": 189786664,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1583412326
    },
    {
        "content": "<p>I'll try it out when I trust myself to code...</p>",
        "id": 189786698,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1583412362
    },
    {
        "content": "<p>Please take care of yourself.  You should take the day off.</p>",
        "id": 189786764,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1583412388
    },
    {
        "content": "<p>Only here because I've been lying in bed all day and I'm bored ;)</p>",
        "id": 189786802,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1583412425
    },
    {
        "content": "<p>I find myself often typing:</p>\n<div class=\"codehilite\"><pre><span></span>git checkout X    # this successfully downloads oleans, but git also tells me &quot;Your branch is behind &#39;origin/X&#39; by 25 commits&quot;\ngit pull\nleanproject get-cache # successfully downloads the latest oleans\n</pre></div>",
        "id": 189822316,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1583433242
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> This is just <code>git checkout X &amp;&amp; leanproject up</code></p>",
        "id": 189830674,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1583438619
    },
    {
        "content": "<p>Ah, thanks! So I just stop using <code>git pull</code>. I wonder if there is a good way to steer people towards doing this?</p>",
        "id": 189830803,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1583438706
    },
    {
        "content": "<p>(We know lack of oleans is a huge hurdle to newcomers.)</p>",
        "id": 189830823,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1583438719
    },
    {
        "content": "<p>A big issue with <code>leanproject up</code> is that you don't get olean if the branch has been updated in the last two hours.  It would be great if it could check out the latest commit where oleans are available.</p>",
        "id": 189830972,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1583438830
    },
    {
        "content": "<p>that would be the HEAD of the branch <code>lean-3.5.1</code>, no?</p>",
        "id": 189831062,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1583438885
    },
    {
        "content": "<p>I think Gabriel means the latest commit on whichever branch you're on, that has oleans.</p>",
        "id": 189831289,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1583439073
    },
    {
        "content": "<p>So <code>git pull</code> gets you to the HEAD of your current branch, but <code>leanproject up</code> takes you to the latest with oleans.</p>",
        "id": 189831306,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1583439097
    },
    {
        "content": "<p>Or maybe <code>leanproject up</code> should take you to HEAD, but with the latest available oleans, even if they haven't caught up with HEAD?</p>",
        "id": 189831435,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1583439206
    },
    {
        "content": "<p>When checking out master, I typically want the latest one that has full oleans.  When checking out feature branches, I want  the latest one and I'll take whatever oleans I get.</p>",
        "id": 189834070,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1583440859
    },
    {
        "content": "<p>I think it might be better not to have inconsistent behaviour for <code>leanproject up</code> on master and other branches.</p>",
        "id": 189839167,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1583444171
    },
    {
        "content": "<p>For people who want guaranteed oleans, we should advertise to them the existence of the <code>lean-3.X.X</code> branches, which should always have oleans and stay close to master.</p>",
        "id": 189839198,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1583444202
    },
    {
        "content": "<p>(Advertising could even be in the form of a message whenever <code>leanproject</code> fails to find oleans!)</p>",
        "id": 189839233,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1583444234
    },
    {
        "content": "<p>We might also consider, as version numbers seem likely to keep moving for a while now, having a <code>latest</code> branch, that is guaranteed to have oleans, and tracks close to master, regardless of version numbers.</p>",
        "id": 189839347,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1583444302
    },
    {
        "content": "<p>I think I've said it before: we should merge <code>leanproject</code> now.  There are lots of nice suggestions here, and I believe they would be even better as PRs to <code>mathlib-tools</code>.<br>\nPatrick and Kevin have said that we should wait until we've improved the delay between commits to master and olean tarballs being available.  But this is a red herring.  This doesn't work with <code>cache-olean</code> either.  And if you stay on the <code>lean-3.6.1</code> branch like you had to with <code>cache-olean</code> then <code>leanproject up</code> will always find oleans without any delay.</p>",
        "id": 189877530,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1583488704
    },
    {
        "content": "<p>Go for it!</p>",
        "id": 189877722,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583488905
    },
    {
        "content": "<p>Ok, now we just need to wait for <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> to push the release to pypi.</p>",
        "id": 189877930,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1583489107
    },
    {
        "content": "<p>what is the documentation story? Is this live for users?</p>",
        "id": 189877969,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583489152
    },
    {
        "content": "<p>Oh yeah, this is a good point.  I completely forgot about it.  It is not yet live for users that use <code>pip install mathlibtools</code>.  You only get it if you use the git version directly.</p>",
        "id": 189878151,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1583489348
    },
    {
        "content": "<p>Speaking as the old fart who can't be bothered to learn new things, there are too many mathlib tools. What do they all do? Are some superseding others? How do I use them in both simple and less simple use cases? A FAQ or documentation page addressing these questions would be very helpful.</p>",
        "id": 189878159,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583489364
    },
    {
        "content": "<p>Then you'll be delighted.  All of the old tools are gone.  Now there's only one tool called <code>leanproject</code> and it's wonderful.</p>",
        "id": 189878175,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1583489396
    },
    {
        "content": "<p>and <code>pip</code>, of course</p>",
        "id": 189878232,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583489427
    },
    {
        "content": "<p>installing python has been the sticking point in lean setup for me on more than one occasion</p>",
        "id": 189878261,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583489456
    },
    {
        "content": "<p>Ok, this doesn't change.  We've always required <code>pip</code>.</p>",
        "id": 189878304,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1583489506
    },
    {
        "content": "<p>lean itself isn't too hard to get running... can we distribute binary tools?</p>",
        "id": 189878324,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583489522
    },
    {
        "content": "<p>or is CI for that too much work</p>",
        "id": 189878376,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583489550
    },
    {
        "content": "<p>You mean, rewrite it in Rust?</p>",
        "id": 189878488,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1583489643
    },
    {
        "content": "<p>I've made a basic PR to change all descriptions from <code>update-mathlib</code> to <code>leanproject</code>.  <a href=\"https://github.com/leanprover-community/mathlib/issues/2093\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/2093\">#2093</a></p>",
        "id": 189878850,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1583490082
    },
    {
        "content": "<p>I'm sorry I'm super busy all day. I'll push to pypi tonight.</p>",
        "id": 189887303,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583497780
    },
    {
        "content": "<p>No need to hurry.  This can wait another day if it has to.</p>",
        "id": 189887714,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1583498060
    },
    {
        "content": "<p>I'm using my phone in a train so I can't do much but I commented on the doc PR. You haven't explored the full power of leanproject yet.</p>",
        "id": 189888210,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583498472
    },
    {
        "content": "<blockquote>\n<p>You haven't explored the full power of leanproject yet.</p>\n</blockquote>\n<p>I really haven't.  You should have posted a leanproject tutorial!  This is the first time I hear of <code>leanproject get</code> and <code>leanproject new</code>.  BTW, <code>leanproject get</code> didn't work so I filed a PR: <a href=\"https://github.com/leanprover-community/mathlib-tools/pull/18\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib-tools/pull/18\">https://github.com/leanprover-community/mathlib-tools/pull/18</a></p>",
        "id": 189891174,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1583500635
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/113488-general/topic/new.20mathlib.20tools/near/189878175\" title=\"#narrow/stream/113488-general/topic/new.20mathlib.20tools/near/189878175\">said</a>:</p>\n<blockquote>\n<p>Then you'll be delighted.  All of the old tools are gone.  Now there's only one tool called <code>leanproject</code> and it's wonderful.</p>\n</blockquote>\n<p>I think it still depends on <code>elan</code>. But <code>olean-cache</code> and <code>update-mathlib</code> seem to be superseded.</p>",
        "id": 189894120,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583502907
    },
    {
        "content": "<p>Yes, <code>leanproject</code> depends on <code>elan</code>. Internally it also depends on <code>leanpkg</code> (this is pure laziness from me), but from a user point of view it replaces <code>leanpkg</code> entirely. And <code>elan</code> is not meant to be directly used in a normal workflow.</p>",
        "id": 189975391,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583596543
    },
    {
        "content": "<p>I think I emptied the feature requests and bug reports. Tonight I'll write more documentation, and probably some more tests. But real world testing is still very welcome. Everybody is also welcome to write python tests. Up to now there are only end-to-end functional tests, in <a href=\"https://github.com/leanprover-community/mathlib-tools/blob/refactor/tests/test_functional.py\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib-tools/blob/refactor/tests/test_functional.py\">https://github.com/leanprover-community/mathlib-tools/blob/refactor/tests/test_functional.py</a>, that actually run git commands and download stuff. But the python code is written is such a way that unit tests would be easy to build, so feel free to add those if you have too much time.</p>",
        "id": 189975500,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583596730
    },
    {
        "content": "<p>I would happily test if you tell me precisely what to type to get me from where I am now (no leanproject installed) to the command which upgrades a working lean project from Lean 3.4.2 to Lean 3.6.1. I have a student at Xena who would like to use the new case bash tactic but I've been refraining from updating everyone's set-up at Xena because my impression is that things aren't ready yet (I tried upgrading a student project to 3.6.1 last Thursday and it turned out that there were no mathlib oleans which was a disaster)</p>",
        "id": 189977157,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583599575
    },
    {
        "content": "<p>If you have already installed <code>update-mathlib</code> using <code>pip</code> (the current installation method), then you can do the following:</p>\n<div class=\"codehilite\"><pre><span></span>sudo pip3 install https://github.com/leanprover-community/mathlib-tools/archive/refactor.tar.gz\ncd my-lean-project\nleanproject up\n</pre></div>\n\n\n<p>If you don't have <code>pip3</code> yet, then you need to run <code>apt install python3-pip</code> first (as described in our installation docs: <a href=\"https://github.com/leanprover-community/mathlib/blob/master/docs/install/debian_details.md\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/docs/install/debian_details.md\">https://github.com/leanprover-community/mathlib/blob/master/docs/install/debian_details.md</a>).</p>",
        "id": 189978376,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1583601522
    },
    {
        "content": "<p>What if I'm on Ubuntu which is stuck with Python 2.something? Should I be doing all this in some virtual environment, or do I not need to worry about that extra hassle?</p>",
        "id": 189978939,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583602550
    },
    {
        "content": "<p>Kevin, you are not stuck with python 2. You can <code>sudo apt install python3-pip</code> and then clone the repository, checkout the <code>refactor</code> branch and <code>sudo pip3 install .</code>. You don't need to be in a virtual environment if you don't really know what it means.</p>",
        "id": 189989078,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583620297
    },
    {
        "content": "<p>I'm done for tonight. I put documentation at <a href=\"https://github.com/leanprover-community/mathlib-tools/blob/refactor/README.md\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib-tools/blob/refactor/README.md\">https://github.com/leanprover-community/mathlib-tools/blob/refactor/README.md</a>. Everybody is welcome to comment on the documentation, even without trying the tools.</p>",
        "id": 189989119,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583620332
    },
    {
        "content": "<p>For instance, every native speaker is welcome to translate this documentation into actual English without asking for permission.</p>",
        "id": 189989132,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583620441
    },
    {
        "content": "<p>Gabriel, did you find time to read the new documentation and test more stuff?</p>",
        "id": 190021528,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583689114
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/new.20mathlib.20tools/near/189573483\" title=\"#narrow/stream/113488-general/topic/new.20mathlib.20tools/near/189573483\">said</a>:</p>\n<blockquote>\n<p>I hope <span class=\"user-mention silent\" data-user-id=\"110596\">Rob Lewis</span> and <span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> will have time to fix that Azure delay issue. This is the main thing blocking the release of <code>leanproject</code>. Until that is fixed, this tool will remain completely unreliable.</p>\n</blockquote>\n<p>Look at this nice speedy master build: <a href=\"https://github.com/leanprover-community/mathlib/runs/498569708\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/runs/498569708\">https://github.com/leanprover-community/mathlib/runs/498569708</a></p>",
        "id": 190205931,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1583863888
    },
    {
        "content": "<p>26 minutes for linting <span aria-label=\"shock\" class=\"emoji emoji-1f628\" role=\"img\" title=\"shock\">:shock:</span></p>",
        "id": 190206164,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583863992
    },
    {
        "content": "<p>Speedy?  I think it still takes an hour.  But it's nice that the oleans are already available.</p>",
        "id": 190206176,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1583864003
    },
    {
        "content": "<p>But otherwise, I agree that it's quite impressive</p>",
        "id": 190206183,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583864005
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> Actually linting is two times 30 minutes.  The second time we regenerate the <code>nolints.txt</code> file.</p>",
        "id": 190206234,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1583864035
    },
    {
        "content": "<p>30 seconds to push the oleans, that's what matters.</p>",
        "id": 190206327,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1583864068
    },
    {
        "content": "<p>Ooh boy. I didn't realise that linting took that long.</p>",
        "id": 190208187,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583865080
    },
    {
        "content": "<p>I think the linters in <a href=\"https://github.com/leanprover-community/mathlib/issues/2089\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/2089\">#2089</a> slowed it down a bunch.</p>",
        "id": 190208554,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1583865264
    },
    {
        "content": "<p>It's cumulative.   The first simp-normal form linter added 7 minutes, the second one added another 15 minutes or so.  We have 16 linters now in total.</p>",
        "id": 190212600,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1583867377
    },
    {
        "content": "<p>It shouldn't be hard to run the linters in parallel, in case somebody is motivated.</p>",
        "id": 190212698,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1583867415
    },
    {
        "content": "<p>I fear that we'll need that pretty soon, if we continue adding linters like this (-;</p>",
        "id": 190212800,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583867487
    },
    {
        "content": "<p>Which is probably a good thing.</p>",
        "id": 190212816,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583867496
    },
    {
        "content": "<p>I'm not familiar with the new CI infrastructure, do we actually get multiple cpus?</p>",
        "id": 190212895,
        "sender_full_name": "Reid Barton",
        "timestamp": 1583867524
    },
    {
        "content": "<p>According to the github documentation, we have a <code>Standard_DS2_v2</code> virtual machine.  That should be 2 CPUs: <a href=\"https://docs.microsoft.com/en-us/azure/virtual-machines/dv2-dsv2-series#dsv2-series\" target=\"_blank\" title=\"https://docs.microsoft.com/en-us/azure/virtual-machines/dv2-dsv2-series#dsv2-series\">https://docs.microsoft.com/en-us/azure/virtual-machines/dv2-dsv2-series#dsv2-series</a></p>",
        "id": 190213030,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1583867626
    },
    {
        "content": "<p>Does it make sense to say \"we only need to run the linters on the files that changed\" (or at least some of the linters)? Or can a change in one file make a linter fail on a file which imports it?</p>",
        "id": 190217957,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583870509
    },
    {
        "content": "<p>At least the simp and type-class linters (which take the majority of the time) are global.</p>",
        "id": 190218428,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1583870788
    },
    {
        "content": "<p>The caching didn't work for the last PR: <a href=\"https://github.com/leanprover-community/mathlib/runs/498865888\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/runs/498865888\">https://github.com/leanprover-community/mathlib/runs/498865888</a><br>\nApparently the merge commits created by mergify don't run the push action, only the pull_request action.  And the pull_request action doesn't upload to azure: <a href=\"https://github.com/leanprover-community/mathlib/runs/498571556\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/runs/498571556\">https://github.com/leanprover-community/mathlib/runs/498571556</a></p>",
        "id": 190219590,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1583871517
    },
    {
        "content": "<blockquote>\n<p>Apparently the merge commits created by mergify don't run the push action, only the pull_request action.</p>\n</blockquote>\n<p>God damn it, what?</p>",
        "id": 190219883,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1583871707
    },
    {
        "content": "<p>Does Mergify do something different than the \"update branch\" button?</p>",
        "id": 190220171,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1583871842
    },
    {
        "content": "<p>Because I'm pretty sure that triggers a push build, right?</p>",
        "id": 190220227,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1583871856
    },
    {
        "content": "<p>Oh, that last PR was from an external repo.</p>",
        "id": 190220511,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1583872043
    },
    {
        "content": "<p>We won't get oleans in that case.</p>",
        "id": 190220540,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1583872064
    },
    {
        "content": "<p>No oleans were ever uploaded from that PR because external repos don't have write credentials for Azure.</p>",
        "id": 190220673,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1583872138
    },
    {
        "content": "<p>You're right, of course.</p>",
        "id": 190226202,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1583875124
    },
    {
        "content": "<p>This is a good opportunity to remind every occasional contributors that they shouldn't hesitate to ask for write access to branches of our main repository. Opening PRs from such branches have more and more advantages. I sent an invitation to <span class=\"user-mention\" data-user-id=\"260921\">@Markus Himmel</span> who is the author of the PR we are discussing.</p>",
        "id": 190226586,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583875290
    },
    {
        "content": "<p>Please don't hesitate too long, though</p>",
        "id": 190226869,
        "sender_full_name": "Reid Barton",
        "timestamp": 1583875438
    },
    {
        "content": "<p>Corrected, thanks</p>",
        "id": 190226938,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583875470
    },
    {
        "content": "<p>Heh, I just realized something. Our slowness to change the PR process \"saved\" us here. Unlike in Travis, PR builds in Actions are consistently a merge commit between the PR branch and master. So Mergify's \"update branch\" step is unnecessary -- if the PR build succeeds, the branch can be safely merged. We could have gotten rid of this with the switch to Actions. EXCEPT, the \"update branch\" step is now what allows us to have oleans ready to go immediately.</p>",
        "id": 190229381,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1583876850
    },
    {
        "content": "<p>Oh, wait, I guess that's not really true, never mind.</p>",
        "id": 190229552,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1583876971
    },
    {
        "content": "<p>It doesn't re-run the PR builds when master changes.</p>",
        "id": 190229564,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1583876987
    },
    {
        "content": "<p>Actually, is there any point at all in running the PR builds in our current setup?</p>",
        "id": 190229757,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1583877112
    },
    {
        "content": "<p>Even in PRs from external repos, the branch builds should happen, right? Because the Actions config is part of the repo?</p>",
        "id": 190229854,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1583877160
    },
    {
        "content": "<p>Maybe forks need to activate GitHub action? I'm saying that at random</p>",
        "id": 190229946,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583877206
    },
    {
        "content": "<p>It is opt-in, but there's a big green button to do it.</p>",
        "id": 190230402,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1583877467
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> , I tried this out today, but I get the following error with <code>leanproject new myproject</code> :</p>\n<div class=\"codehilite\"><pre><span></span>error: ill-formed search path entry &#39;/home/kody/projects/lean4/library&#39;, should be of form &#39;pkg=path&#39;\nTraceback (most recent call last):\n  File &quot;/usr/bin/leanproject&quot;, line 11, in &lt;module&gt;\n    load_entry_point(&#39;mathlibtools==0.0.3&#39;, &#39;console_scripts&#39;, &#39;leanproject&#39;)()\n  File &quot;/usr/lib/python3.8/site-packages/click/core.py&quot;, line 764, in __call__\n    return self.main(*args, **kwargs)\n  File &quot;/usr/lib/python3.8/site-packages/click/core.py&quot;, line 717, in main\n    rv = self.invoke(ctx)\n  File &quot;/usr/lib/python3.8/site-packages/click/core.py&quot;, line 1137, in invoke\n    return _process_result(sub_ctx.command.invoke(sub_ctx))\n  File &quot;/usr/lib/python3.8/site-packages/click/core.py&quot;, line 956, in invoke\n    return ctx.invoke(self.callback, **ctx.params)\n  File &quot;/usr/lib/python3.8/site-packages/click/core.py&quot;, line 555, in invoke\n    return callback(*args, **kwargs)\n  File &quot;/usr/lib/python3.8/site-packages/mathlibtools/leanproject.py&quot;, line 55, in new\n    LeanProject.new(Path(path), url)\n  File &quot;/usr/lib/python3.8/site-packages/mathlibtools/lib.py&quot;, line 296, in new\n    proj = cls.from_path(path)\n  File &quot;/usr/lib/python3.8/site-packages/mathlibtools/lib.py&quot;, line 161, in from_path\n    repo = Repo(path, search_parent_directories=True)\n  File &quot;/home/kody/.local/lib/python3.8/site-packages/git/repo/base.py&quot;, line 130, in __init__\n    raise NoSuchPathError(epath)\ngit.exc.NoSuchPathError: /home/kody/projects/myproject\n</pre></div>\n\n\n<p>I am on Arch Linux and on python 3.8.1 as it shows. I do have a built-from-source copy of Lean4 which is maybe messing it up.</p>",
        "id": 190277672,
        "sender_full_name": "Koundinya Vajjha",
        "timestamp": 1583931533
    },
    {
        "content": "<p>The script is picking up the Lean4 library path (which doesn't exist) for some reason...?</p>",
        "id": 190277846,
        "sender_full_name": "Koundinya Vajjha",
        "timestamp": 1583931640
    },
    {
        "content": "<p>I knew there would be people waiting for the release to start testing...</p>",
        "id": 190279327,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583932632
    },
    {
        "content": "<p>I need more information. Is there a lean4 folder in <code>projects</code>? Can you paste the output of <code>elan toolchain list</code>?</p>",
        "id": 190279447,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583932691
    },
    {
        "content": "<p>Could you try to run <code>leanpkg new my_test</code> and tell us whether this succeeds?</p>",
        "id": 190279534,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583932757
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/new.20mathlib.20tools/near/190279447\" title=\"#narrow/stream/113488-general/topic/new.20mathlib.20tools/near/190279447\">said</a>:</p>\n<blockquote>\n<p>I need more information. Is there a lean4 folder in <code>projects</code>? Can you paste the output of <code>elan toolchain list</code>?</p>\n</blockquote>\n<p>Yes. I do have such a folder. <br>\nOutput of <code>elan toolchain list</code>:</p>\n<div class=\"codehilite\"><pre><span></span>stable\nnightly\nnightly-2018-06-21\nnightly-2018-11-13\nnightly-2019-01-13\nleanprover-community-lean-3.5.1\nmaster (default)\n3.4.1\n3.4.2\n</pre></div>",
        "id": 190279837,
        "sender_full_name": "Koundinya Vajjha",
        "timestamp": 1583932950
    },
    {
        "content": "<p><code>leanpkg new my_test</code> gives the same error:</p>\n<div class=\"codehilite\"><pre><span></span>error: ill-formed search path entry &#39;/home/kody/projects/lean4/library&#39;, should be of form &#39;pkg=path&#39;\n</pre></div>",
        "id": 190279943,
        "sender_full_name": "Koundinya Vajjha",
        "timestamp": 1583933037
    },
    {
        "content": "<p>I remember changing the default toolchain on elan a long while back to be able to use Lean4.</p>",
        "id": 190280125,
        "sender_full_name": "Koundinya Vajjha",
        "timestamp": 1583933122
    },
    {
        "content": "<p>Ok, so this is indeed a <code>leanpkg</code> bug. Maybe even a Lean4 bug if this is <code>leanpkg</code> from Lean4.</p>",
        "id": 190280230,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583933174
    },
    {
        "content": "<p>Oh yes. Any <code>leanpkg</code> incantation is giving me that error.</p>",
        "id": 190280275,
        "sender_full_name": "Koundinya Vajjha",
        "timestamp": 1583933210
    },
    {
        "content": "<p>So we should really stop relying on <code>leanpkg</code> in <code>leanproject</code>. I need to do other things this afternoon but PR is welcome.</p>",
        "id": 190280332,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583933263
    },
    {
        "content": "<p>In the meantime the workaround is to change your default elan toolchain to <code>leanprover-community-lean-3.6.1</code></p>",
        "id": 190280400,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583933290
    },
    {
        "content": "<p>Alright, to avoid future confusion: <a href=\"https://github.com/leanprover/lean4/commit/10f161353e361f20ac18a7383f46466b149fdfa5\" target=\"_blank\" title=\"https://github.com/leanprover/lean4/commit/10f161353e361f20ac18a7383f46466b149fdfa5\">https://github.com/leanprover/lean4/commit/10f161353e361f20ac18a7383f46466b149fdfa5</a></p>",
        "id": 190283224,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1583934896
    },
    {
        "content": "<p>Nice. I don't know if you followed the discussion around our new package management tool, but I think nobody from the Lean core development team should waste time working on this kind of tooling. It would be much easier if Lean could at least report why it recompiles files (maybe when ran with some debug flag), but otherwise this is all engineering grunt work that is best done by the user community.</p>",
        "id": 190291789,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583939320
    },
    {
        "content": "<p>Yeah, I doubt Lean 4 will come with a package manager in the core repo. You might have already heard that the <code>lean</code> main process will not recompile dependencies anymore at all, though if we have a language server in the core repo, then I suppose it will want to reimplement that.</p>",
        "id": 190293849,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1583940258
    },
    {
        "content": "<p>I've already linked to the import trace I added to Lean 4 before we ripped out that whole module, feel free to adapt: <a href=\"#narrow/stream/113488-general/topic/Lean.203.2E7/near/189816815\" title=\"#narrow/stream/113488-general/topic/Lean.203.2E7/near/189816815\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Lean.203.2E7/near/189816815</a></p>",
        "id": 190294396,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1583940522
    },
    {
        "content": "<p>How does one get oleans for the mathlib revision stored in <code>leanpkg.toml</code>? It seems that <code>leanproject up</code> always pulls the most recent revision, while <code>leanproject build</code> in a directory with no <code>_target/</code> just clones mathlib, but doesn't download oleans and then starts building everything including mathlib.</p>",
        "id": 190297340,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1583941867
    },
    {
        "content": "<p><code>leanproject get-cache</code></p>",
        "id": 190298920,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1583942609
    },
    {
        "content": "<p>I just created <a href=\"https://github.com/leanprover-community/lean/issues/145\" target=\"_blank\" title=\"https://github.com/leanprover-community/lean/issues/145\">https://github.com/leanprover-community/lean/issues/145</a> so that we don't forget again. What do you mean by \"the lean main process will not recompile dependencies anymore at all\"? Will Lean trust every declaration from every import after parsing their statement?</p>",
        "id": 190302801,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583944587
    },
    {
        "content": "<p>It only cares about .olean files for imports. It doesn't look at their .lean files at all.</p>",
        "id": 190302920,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1583944673
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/113488-general/topic/new.20mathlib.20tools/near/190298920\" title=\"#narrow/stream/113488-general/topic/new.20mathlib.20tools/near/190298920\">said</a>:</p>\n<blockquote>\n<p><code>leanproject get-cache</code></p>\n</blockquote>\n<p>This tells me \"Failed to fetch mathlib oleans\"</p>",
        "id": 190303256,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1583944863
    },
    {
        "content": "<p>Gabriel's answer is not correct if you work on a project depending on mathlib (as opposed to working on mathlib) itself.</p>",
        "id": 190303695,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583945093
    },
    {
        "content": "<p>Your use case is not covered by <code>leanproject</code>. Are you sure you really want to do that?</p>",
        "id": 190303743,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583945118
    },
    {
        "content": "<p>To be more explicit: typing <code>leanproject get-cache</code> asks leanproject to find oleans for the current project, not for its dependencies.</p>",
        "id": 190303861,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583945166
    },
    {
        "content": "<p>Adding a command <code>leanproject get-mathlib-cache</code> would be trivial to implement if you really want this.</p>",
        "id": 190303920,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583945204
    },
    {
        "content": "<p>Without <code>get-mathlib-cache</code>, how would you work on an external project like <code>lean-perfectoid-spaces</code>?  You definitely don't want to upgrade the mathlib version there.</p>",
        "id": 190304192,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1583945379
    },
    {
        "content": "<p>Yep, as Gabriel says : the problem is that I might work on a project at mathlib revision <code>a</code>, then push it to GitHub, and because in the meanwhile mathlib got updated to revision <code>b</code> s.t. the project doesn't compile under <code>b</code>, the CI will fail after <code>leanproject upgrade-mathlib</code> runs (it has to, since it seems to be the only way currently to get the .oleans). It'd be better to allow users to update mathlib when they want with <code>leanproject upgrade-mathlib</code>, but for CI to just pull the .oleans as <code>update-mathlib</code> used to do.</p>",
        "id": 190304510,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1583945554
    },
    {
        "content": "<p>leanproject get perfectoid-spaces will get you mathlib oleans.</p>",
        "id": 190306717,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583946603
    },
    {
        "content": "<p>We are having problems with <code>leanproject</code> and github actions, the action <code>actions/checkout@v2</code> doesn't create a <code>.git</code> in the working directory but <code>leanproject</code> crashes if the working directory is not a valid git repository.</p>",
        "id": 190306741,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1583946612
    },
    {
        "content": "<p>But I agree we still need something if mathlib is upgraded upstream and you git pull.</p>",
        "id": 190306891,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583946690
    },
    {
        "content": "<p>Ed, where do you see this issue?</p>",
        "id": 190307011,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583946729
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/new.20mathlib.20tools/near/190307011\" title=\"#narrow/stream/113488-general/topic/new.20mathlib.20tools/near/190307011\">said</a>:</p>\n<blockquote>\n<p>Ed, where do you see this issue?</p>\n</blockquote>\n<p>This is the failing build : <a href=\"https://github.com/b-mehta/topos/runs/501075989\" target=\"_blank\" title=\"https://github.com/b-mehta/topos/runs/501075989\">https://github.com/b-mehta/topos/runs/501075989</a></p>",
        "id": 190307090,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1583946770
    },
    {
        "content": "<p>I think you need to upgrade git in your docker container:</p>\n<blockquote>\n<p>To create a local Git repository instead, add Git 2.18 or higher to the PATH</p>\n</blockquote>",
        "id": 190307747,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1583947083
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>$ docker run --rm edayers/lean git version\ngit version 2.17.1\n</pre></div>",
        "id": 190307872,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1583947146
    },
    {
        "content": "<p>Hi I don't think this is right, everything works if I do this in <code>docker run -it --rm edayers/lean</code>:</p>\n<div class=\"codehilite\"><pre><span></span>git clone https://github.com/b-mehta/topos.git\ncd topos\n# this works:\nleanproject upgrade-mathlib\nrm -rf .git\n# this fails:\nleanproject upgrade-mathlib\n</pre></div>\n\n\n<p>I think the problem is that <code>leanproject upgrade-mathlib</code> is assuming it's in a git repo.</p>",
        "id": 190308587,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1583947521
    },
    {
        "content": "<p>We worked around this by using <code>uses actions/checkout@v1</code> in the github actions yaml. The problem was that <code>actions/checkout@v2</code> is worse than <code>actions/checkout@v1</code>.</p>",
        "id": 190309767,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1583948161
    },
    {
        "content": "<p>Let me rephrase that: the <code>checkout@v2</code> action usually creates a git repository.  But it only does it if you have git &gt;=2.18 installed.  If you have an old git version it will fall back and download a tarball.</p>",
        "id": 190309896,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1583948225
    },
    {
        "content": "<p>Ah ok</p>",
        "id": 190309942,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1583948267
    },
    {
        "content": "<p>This actions file works for us: <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>\n<div class=\"codehilite\"><pre><span></span>on: [push]\n\njobs:\n  build_job:\n    runs-on: ubuntu-latest\n    container: edayers/lean\n    name: Run leanproject build\n    steps:\n    - uses: actions/checkout@v1\n    - run: leanproject upgrade-mathlib\n    - run: leanproject build\n</pre></div>",
        "id": 190310059,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1583948328
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"121918\">Edward Ayers</span> <a href=\"#narrow/stream/113488-general/topic/new.20mathlib.20tools/near/190308587\" title=\"#narrow/stream/113488-general/topic/new.20mathlib.20tools/near/190308587\">said</a>:</p>\n<blockquote>\n<div class=\"codehilite\"><pre><span></span>git clone https://github.com/b-mehta/topos.git\ncd topos\n# this works:\nleanproject upgrade-mathlib\nrm -rf .git\n# this fails:\nleanproject upgrade-mathlib\n</pre></div>\n\n\n<p>I think the problem is that <code>leanproject upgrade-mathlib</code> is assuming it's in a git repo.</p>\n</blockquote>\n<p>I can't reproduce this issue. At don't get any failure here.</p>",
        "id": 190334471,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583962667
    },
    {
        "content": "<p>I get the same error as Ed:</p>\n<div class=\"codehilite\"><pre><span></span>Traceback (most recent call last):\n  File &quot;/nix/store/gfy9cp7iinqqpbqq7d175j912wj90yah-mathlib-tools-0.0.3/lib/python3.7/site-packages/mathlibtools/lib.py&quot;, line 233, in from_path\n    repo = Repo(path, search_parent_directories=True)\n  File &quot;/nix/store/m1y8zxyzbsqijnkw5qj76sxm3nwngiqv-python3.7-GitPython-3.0.5/lib/python3.7/site-packages/git/repo/base.py&quot;, line 184, in __init__\n    raise InvalidGitRepositoryError(epath)\ngit.exc.InvalidGitRepositoryError: /home/gebner/tmp2/topos\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File &quot;/nix/store/gfy9cp7iinqqpbqq7d175j912wj90yah-mathlib-tools-0.0.3/lib/python3.7/site-packages/mathlibtools/leanproject.py&quot;, line 89, in upgrade_mathlib\n    proj().upgrade_mathlib()\n  File &quot;/nix/store/gfy9cp7iinqqpbqq7d175j912wj90yah-mathlib-tools-0.0.3/lib/python3.7/site-packages/mathlibtools/leanproject.py&quot;, line 40, in proj\n    lean_upgrade)\n  File &quot;/nix/store/gfy9cp7iinqqpbqq7d175j912wj90yah-mathlib-tools-0.0.3/lib/python3.7/site-packages/mathlibtools/lib.py&quot;, line 235, in from_path\n    raise InvalidLeanProject(&#39;Invalid git repository&#39;)\nmathlibtools.lib.InvalidLeanProject: Invalid git repository\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File &quot;/nix/store/gfy9cp7iinqqpbqq7d175j912wj90yah-mathlib-tools-0.0.3/bin/.leanproject-wrapped&quot;, line 9, in &lt;module&gt;\n    sys.exit(cli())\n  File &quot;/nix/store/vis123mfyi0ajqg6f321h16wzs595cqw-python3.7-click-7.0/lib/python3.7/site-packages/click/core.py&quot;, line 764, in __call__\n    return self.main(*args, **kwargs)\n  File &quot;/nix/store/vis123mfyi0ajqg6f321h16wzs595cqw-python3.7-click-7.0/lib/python3.7/site-packages/click/core.py&quot;, line 717, in main\n    rv = self.invoke(ctx)\n  File &quot;/nix/store/vis123mfyi0ajqg6f321h16wzs595cqw-python3.7-click-7.0/lib/python3.7/site-packages/click/core.py&quot;, line 1137, in invoke\n    return _process_result(sub_ctx.command.invoke(sub_ctx))\n  File &quot;/nix/store/vis123mfyi0ajqg6f321h16wzs595cqw-python3.7-click-7.0/lib/python3.7/site-packages/click/core.py&quot;, line 956, in invoke\n    return ctx.invoke(self.callback, **ctx.params)\n  File &quot;/nix/store/vis123mfyi0ajqg6f321h16wzs595cqw-python3.7-click-7.0/lib/python3.7/site-packages/click/core.py&quot;, line 555, in invoke\n    return callback(*args, **kwargs)\n  File &quot;/nix/store/gfy9cp7iinqqpbqq7d175j912wj90yah-mathlib-tools-0.0.3/lib/python3.7/site-packages/mathlibtools/leanproject.py&quot;, line 95, in upgrade_mathlib\n    project.upgrade_mathlib()\n  File &quot;/nix/store/gfy9cp7iinqqpbqq7d175j912wj90yah-mathlib-tools-0.0.3/lib/python3.7/site-packages/mathlibtools/lib.py&quot;, line 474, in upgrade_mathlib\n    if mathlib_lean &gt; self.lean_version:\n  File &quot;/nix/store/gfy9cp7iinqqpbqq7d175j912wj90yah-mathlib-tools-0.0.3/lib/python3.7/site-packages/mathlibtools/lib.py&quot;, line 289, in lean_version\n    return parse_version(self.pkg_config[&#39;lean_version&#39;])\nKeyError: &#39;lean_version&#39;\n</pre></div>",
        "id": 190336772,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1583964078
    },
    {
        "content": "<p>Many many thanks <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> , I'm at Xena and I've updated three people (some not remotely computer-literate but all of whom had carefully followed the old installation instructions) to Lean 3.6.1 + mathlib master + oleans completely painlessly with <code>leanproject</code> <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span> <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span> <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span></p>",
        "id": 190434468,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584041681
    },
    {
        "content": "<p>It was important because one of them needed <code>interval_cases</code> which isn't in 3.4.2.</p>",
        "id": 190442956,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584045989
    },
    {
        "content": "<p>How do I do <code>cache-olean --fetch</code> now? I have <code>leanproject</code> and I've just pulled mathlib and I want to work on a (existing) branch, which is pretty up to date with master. Can I get oleans from master and then just compile the few changed files? I can't see it in <a href=\"https://github.com/leanprover-community/mathlib-tools\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib-tools\">these docs</a></p>",
        "id": 190606804,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584208671
    },
    {
        "content": "<p><code>leanproject get-cache</code></p>",
        "id": 190606857,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1584208706
    },
    {
        "content": "<p>See also <a href=\"https://github.com/leanprover-community/mathlib-tools/blob/master/README.md\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib-tools/blob/master/README.md\">https://github.com/leanprover-community/mathlib-tools/blob/master/README.md</a> for more information.</p>",
        "id": 190606871,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1584208737
    },
    {
        "content": "<p>gaargh I just successfully ran <code>pip3 install mathlibtools</code> on Ubuntu 18.04 and leanproject isn't in my path :-/</p>",
        "id": 190606939,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584208817
    },
    {
        "content": "<p>Did you login again?</p>",
        "id": 190606951,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584208848
    },
    {
        "content": "<p>Maybe your path isn't updated yet</p>",
        "id": 190606958,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584208855
    },
    {
        "content": "<p>no</p>",
        "id": 190606959,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584208856
    },
    {
        "content": "<p><code>~/.mathlib/bin</code> is in my path but there's no <code>leanproject</code> in there.</p>",
        "id": 190606975,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584208902
    },
    {
        "content": "<p>oh my <code>.profile</code> doesn't seem to have changed. I just want to fix it manually but I don't know where it is and <code>find</code> is taking an age</p>",
        "id": 190607034,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584208958
    },
    {
        "content": "<p>No, it's installed in some python path thingy...</p>",
        "id": 190607037,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584208969
    },
    {
        "content": "<p>I am reluctant to log out and in again because I don't see what this would do right now -- <code>source .profile</code> doesn't fix the problem.</p>",
        "id": 190607220,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584209229
    },
    {
        "content": "<p>Weird...</p>",
        "id": 190607276,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584209309
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>$ which leanproject\n/home/jmc/.local/bin/leanproject\n</pre></div>",
        "id": 190607284,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584209332
    },
    {
        "content": "<p>That's why we have <code>sudo pip3 install mathlibtools</code> in the documentation.  That installs the binaries in <code>/usr/local/bin</code>, which should already be in your path.</p>",
        "id": 190607295,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1584209371
    },
    {
        "content": "<p>If you run <code>pip</code> as a normal user, you need to add <code>~/.local/bin</code> to your path.  Unfortunately, I don't think it is in the default path on any distribution.</p>",
        "id": 190607301,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1584209400
    },
    {
        "content": "<p>I read the documentation as \"try it without sudo, and if you get an error try it again with sudo\"</p>",
        "id": 190607754,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584210155
    },
    {
        "content": "<p>I ran it with sudo and got warnings and it didn't fix the problem ;-) </p>\n<div class=\"codehilite\"><pre><span></span>The directory &#39;/home/buzzard/.cache/pip/http&#39; or its parent directory is not owned by the current user and the cache has been disabled. Please check the permissions and owner of that directory. If executing pip with sudo, you may want sudo&#39;s -H flag.\nThe directory &#39;/home/buzzard/.cache/pip&#39; or its parent directory is not owned by the current user and caching wheels has been disabled. check the permissions and owner of that directory. If executing pip with sudo, you may want sudo&#39;s -H flag.\nRequirement already satisfied: mathlibtools in ./.local/lib/python3.6/site-packages\nRequirement already satisfied: gitpython in ./.local/lib/python3.6/site-packages (from mathlibtools)\nRequirement already satisfied: requests in ./.local/lib/python3.6/site-packages (from mathlibtools)\nRequirement already satisfied: Click in ./.local/lib/python3.6/site-packages (from mathlibtools)\nRequirement already satisfied: PyGithub in ./.local/lib/python3.6/site-packages (from mathlibtools)\nRequirement already satisfied: toml in ./.local/lib/python3.6/site-packages (from mathlibtools)\nRequirement already satisfied: certifi in ./.local/lib/python3.6/site-packages (from mathlibtools)\nRequirement already satisfied: tqdm in ./.local/lib/python3.6/site-packages (from mathlibtools)\nRequirement already satisfied: paramiko in ./.local/lib/python3.6/site-packages (from mathlibtools)\nRequirement already satisfied: gitdb&lt;5,&gt;=4.0.1 in ./.local/lib/python3.6/site-packages (from gitpython-&gt;mathlibtools)\nRequirement already satisfied: idna&lt;3,&gt;=2.5 in ./.local/lib/python3.6/site-packages (from requests-&gt;mathlibtools)\nRequirement already satisfied: urllib3!=1.25.0,!=1.25.1,&lt;1.26,&gt;=1.21.1 in ./.local/lib/python3.6/site-packages (from requests-&gt;mathlibtools)\nRequirement already satisfied: chardet&lt;4,&gt;=3.0.2 in ./.local/lib/python3.6/site-packages (from requests-&gt;mathlibtools)\nRequirement already satisfied: deprecated in ./.local/lib/python3.6/site-packages (from PyGithub-&gt;mathlibtools)\nRequirement already satisfied: pyjwt in ./.local/lib/python3.6/site-packages (from PyGithub-&gt;mathlibtools)\nRequirement already satisfied: cryptography&gt;=2.5 in ./.local/lib/python3.6/site-packages (from paramiko-&gt;mathlibtools)\nRequirement already satisfied: pynacl&gt;=1.0.1 in ./.local/lib/python3.6/site-packages (from paramiko-&gt;mathlibtools)\nRequirement already satisfied: bcrypt&gt;=3.1.3 in ./.local/lib/python3.6/site-packages (from paramiko-&gt;mathlibtools)\nRequirement already satisfied: smmap&lt;4,&gt;=3.0.1 in ./.local/lib/python3.6/site-packages (from gitdb&lt;5,&gt;=4.0.1-&gt;gitpython-&gt;mathlibtools)\nRequirement already satisfied: wrapt&lt;2,&gt;=1.10 in ./.local/lib/python3.6/site-packages (from deprecated-&gt;PyGithub-&gt;mathlibtools)\nRequirement already satisfied: six&gt;=1.4.1 in ./.local/lib/python3.6/site-packages (from cryptography&gt;=2.5-&gt;paramiko-&gt;mathlibtools)\nRequirement already satisfied: cffi!=1.11.3,&gt;=1.8 in ./.local/lib/python3.6/site-packages (from cryptography&gt;=2.5-&gt;paramiko-&gt;mathlibtools)\nRequirement already satisfied: pycparser in ./.local/lib/python3.6/site-packages (from cffi!=1.11.3,&gt;=1.8-&gt;cryptography&gt;=2.5-&gt;paramiko-&gt;mathlibtools)\n</pre></div>",
        "id": 190607775,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584210231
    },
    {
        "content": "<p>Do you have a <code>leanproject</code> in the <code>.local/bin/</code> in your home directory?</p>",
        "id": 190607893,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584210364
    },
    {
        "content": "<p>Yes, it's working now.</p>",
        "id": 190607895,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584210373
    },
    {
        "content": "<p>Because otherwise I would just add that dir to your path</p>",
        "id": 190607899,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584210379
    },
    {
        "content": "<p>exactly what I did</p>",
        "id": 190607902,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584210387
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> Which ubuntu version are you on?  All ubuntu versions I could quickly test actually add <code>~/.local/bin</code> to your PATH.  (But only if it exists, so you might have to restart your shell.)</p>",
        "id": 190608301,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1584211086
    },
    {
        "content": "<p>All I did was <code>source .profile</code> and it didn't work. I don't know what else happens if you actually log out and log in again (and don't want to find out right now). I'm on 18.04</p>",
        "id": 190608372,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584211238
    },
    {
        "content": "<p>That should've actually worked.. at least it does in a docker container.  I guess we should keep in mind now that <code>sudo pip3 install mathlibtools</code> doesn't help if you've already installed without sudo.</p>",
        "id": 190608667,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1584211784
    },
    {
        "content": "<p>Is it expected that <code>leanproject up</code> triggers a <code>git clone</code> of <code>mathlib</code> at each invocation, rather than a <code>git pull</code> or something lighter like that?</p>",
        "id": 190734716,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1584371132
    },
    {
        "content": "<p>No, it shouldn't clone</p>",
        "id": 190738609,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584372749
    },
    {
        "content": "<p>Only <code>leanproject get</code> should clone</p>",
        "id": 190738630,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584372758
    },
    {
        "content": "<p>Apparently, <code>leanproject</code> actually removes the mathlib directory first: <a href=\"https://github.com/leanprover-community/mathlib-tools/blob/dbc357d2cf8f3edba8394052ede26796548f04fd/mathlibtools/lib.py#L468\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib-tools/blob/dbc357d2cf8f3edba8394052ede26796548f04fd/mathlibtools/lib.py#L468\">https://github.com/leanprover-community/mathlib-tools/blob/dbc357d2cf8f3edba8394052ede26796548f04fd/mathlibtools/lib.py#L468</a></p>",
        "id": 190739266,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1584372964
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/new.20mathlib.20tools/near/190303920\" title=\"#narrow/stream/113488-general/topic/new.20mathlib.20tools/near/190303920\">said</a>:</p>\n<blockquote>\n<p>Adding a command <code>leanproject get-mathlib-cache</code> would be trivial to implement if you really want this.</p>\n</blockquote>\n<p>I wasn't really following this discussion before, but now I find myself needing this! Yes, we really want this.</p>",
        "id": 190752443,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1584378601
    },
    {
        "content": "<p>I can mimic it by running <code>leanproject get-cache</code> in <code>_target/deps/mathlib</code></p>",
        "id": 190752581,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1584378645
    },
    {
        "content": "<p>If I am working on some random (non-master) branch of mathlib, and I just pulled someone else's latest commits, should I expect <code>leanproject get-cache</code> to return the correct olean files?</p>",
        "id": 190798948,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584407281
    },
    {
        "content": "<p>[I ask because I just tried it and it didn't fail but it gave me a broken system, and I've just tried manually compiling and <del>it seems OK</del> actually it's not OK, I think the branch might be broken. Is <code>leanproject get-cache</code> really that amazing?]</p>",
        "id": 190798998,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584407310
    },
    {
        "content": "<p>At least the branch of a PR should give you oleans</p>",
        "id": 190813065,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584428593
    },
    {
        "content": "<p>Other branches, I don't know</p>",
        "id": 190813068,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584428600
    },
    {
        "content": "<p>Is it possible that Scott somehow pushed oleans from a WIP branch and then I could pick them up?</p>",
        "id": 190818341,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584433714
    },
    {
        "content": "<p>Hmm... I don't know</p>",
        "id": 190818879,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584434101
    },
    {
        "content": "<p>Maybe we could have</p>\n<div class=\"codehilite\"><pre><span></span>leanproject export-current-oleans foobar.tar.gz\n<span class=\"c1\"># and then send foobar.tar.gz to your collaborator who writes</span>\nleanproject import-foreign-oleans foobar.tar.gz\n</pre></div>\n\n\n<p>Alternatively, we could have a server where we can push the oleans... but I don't know how easy it would be to set that up.</p>",
        "id": 190819039,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584434190
    },
    {
        "content": "<p>Oleans get uploaded from every branch of leanprover-community/master, whether or not the build succeeds, whether or not there's a PR. If it doesn't compile, you get the oleans up to the point where it fails. Obviously there's a delay here since it has to run the build.</p>",
        "id": 190821516,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1584435875
    },
    {
        "content": "<p>Allowing this from arbitrary branches (away from the community repo) is equivalent to letting anyone upload anything they want to our server, so that's not going to happen.</p>",
        "id": 190821633,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1584435959
    },
    {
        "content": "<blockquote>\n<p>every branch of leanprover-community/master</p>\n</blockquote>\n<p>What does that mean? Is the <code>enriched</code> branch of <code>mathlib</code> a \"branch of leanprover-community/master\" or \"an arbitrary branch\"?</p>",
        "id": 190823024,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584436804
    },
    {
        "content": "<p>Rob meant to say \"branch in leanprover-community/<em>mathlib</em>\".</p>",
        "id": 190823359,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1584436986
    },
    {
        "content": "<p>And yes, the <code>enriched</code> branch has oleans available.  It does not matter whether there is a PR or not.</p>",
        "id": 190823447,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1584437040
    },
    {
        "content": "<p>Oh ok so I will go back to my original position of \"wow\"! This has just made collaborative work on a branch of mathlib much easier. Scott seems to be able to see a route to abelian categories which would be a pretty cool milestone and hopefully I can help him get there. Many thanks to everyone who has made this tooling and these backups, they make a genuine difference further down the line!</p>",
        "id": 190824252,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584437452
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/113488-general/topic/new.20mathlib.20tools/near/190823359\" title=\"#narrow/stream/113488-general/topic/new.20mathlib.20tools/near/190823359\">said</a>:</p>\n<blockquote>\n<p>Rob meant to say \"branch in leanprover-community/<em>mathlib</em>\".</p>\n</blockquote>\n<p>Ah, yes, thanks. I shouldn't post here before my morning coffee.</p>",
        "id": 190826232,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1584438770
    },
    {
        "content": "<p>Please create issues in the mathlib-tools GitHub when you have issues or feature requests</p>",
        "id": 190846453,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1584451564
    },
    {
        "content": "<p>Currently I just have love, although I have found myself writing \"notes to self\" about how to do the <code>leanproject</code> things which form my usual workflow. This is just because I have to do something ten times before I can remember it though :-)</p>",
        "id": 190847995,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584452307
    },
    {
        "content": "<p>This would still be good to have those notes. Maybe the README is not clear enough, or doesn't focus on the right things</p>",
        "id": 190848667,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1584452592
    },
    {
        "content": "<p>currently they just tell me \"leanproject get-cache gets oleans (works on mathlib and on non-mathlib projects); leanproject new makes a new project IN THE CURRENT DIRECTORY SO MAKE A SUBDIRECTORY FIRST and it uses up to date Lean and also pulls mathlib oleans\"</p>",
        "id": 190849847,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584453131
    },
    {
        "content": "<p>Note that <code>leanpkg new</code> made a project in a new directory and I will need to be told 10 times that this is not the behaviour of leanproject new (I'm not suggesting you change it, I'm suggesting I'm a slow learner)</p>",
        "id": 190850194,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584453298
    },
    {
        "content": "<p>I will add a third line on the day I clone another Lean project from github and want to figure out the analogue of <code>leanpkg configure, update-mathlib</code></p>",
        "id": 190850348,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584453354
    },
    {
        "content": "<p>The point is simply that my notes file (in my lean-projects directory) is easier for me to find than the leanproject documentation.</p>",
        "id": 190850757,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584453504
    },
    {
        "content": "<p>OK I added it: \"leanproject get git@github.com/leanprover-community/lean-perfectoid-spaces.git gets a project from github and creates it in a subdirectory and also downloads mathlib oleans\"</p>",
        "id": 190851480,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584453798
    },
    {
        "content": "<p>and that's all I personally need to know right now.</p>",
        "id": 190851502,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584453809
    },
    {
        "content": "<p>I don't get your complain about <code>new</code>. How do you want <code>leanproject</code> to guess the folder name you want if you don't write it?</p>",
        "id": 190852947,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1584454491
    },
    {
        "content": "<p><code>leanproject new my_shiny_folder_name</code> should work just fine</p>",
        "id": 190852992,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1584454518
    },
    {
        "content": "<p><code>leanproject get lean-perfectoid-spaces</code> should work too</p>",
        "id": 190853056,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1584454546
    },
    {
        "content": "<p>Oh wow, you can leave out the project name in <code>leanpkg new</code>?</p>",
        "id": 190853741,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1584454837
    },
    {
        "content": "<p><code>leanproject new</code> without a project name is a better version of <code>leanpkg init</code></p>",
        "id": 190853791,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1584454870
    },
    {
        "content": "<p>which acts on the current directory</p>",
        "id": 190853805,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1584454878
    },
    {
        "content": "<p>/me really wonders what is unclear in <a href=\"https://github.com/leanprover-community/mathlib-tools/blob/master/README.md#creating-a-new-projet\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib-tools/blob/master/README.md#creating-a-new-projet\">https://github.com/leanprover-community/mathlib-tools/blob/master/README.md#creating-a-new-projet</a></p>",
        "id": 190855465,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1584455525
    },
    {
        "content": "<p>I only read the code snippets, and the only example specifies the project name.  I expected an error message if I leave out the argument.</p>",
        "id": 190856239,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1584455849
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/new.20mathlib.20tools/near/190852947\" title=\"#narrow/stream/113488-general/topic/new.20mathlib.20tools/near/190852947\">said</a>:</p>\n<blockquote>\n<p>I don't get your complain about <code>new</code>. How do you want <code>leanproject</code> to guess the folder name you want if you don't write it?</p>\n</blockquote>\n<p>I'm not saying anything other than \"I am a stupid old man\" but often before I use a command I often write <code>command --help</code> to remind myself how to use it. <code>leanpkg --help</code> tells me <code>leanpkg new &lt;dir&gt;</code> so I write the directory, <code>leanproject --help</code> tells me <code>leanproject new</code> so I don't. I write notes to help me use command line commands because my own notes are easier for me to read. I am not suggesting my notes are useful for anyone else other than to help my stupid self, I only posted them because you asked. I just like to know exactly what to type in the very few use cases I have.</p>",
        "id": 190875984,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584463141
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/113488-general/topic/new.20mathlib.20tools/near/190739266\" title=\"#narrow/stream/113488-general/topic/new.20mathlib.20tools/near/190739266\">said</a>:</p>\n<blockquote>\n<p>Apparently, <code>leanproject</code> actually removes the mathlib directory first: <a href=\"https://github.com/leanprover-community/mathlib-tools/blob/dbc357d2cf8f3edba8394052ede26796548f04fd/mathlibtools/lib.py#L468\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib-tools/blob/dbc357d2cf8f3edba8394052ede26796548f04fd/mathlibtools/lib.py#L468\">https://github.com/leanprover-community/mathlib-tools/blob/dbc357d2cf8f3edba8394052ede26796548f04fd/mathlibtools/lib.py#L468</a></p>\n</blockquote>\n<p>Yes, this is a bit brutal, but it is meant to avoid the weird problems we used to have with <code>leanpkg upgrade</code> where git would sometimes complains things are not a tree or something like this. This also avoids having zombie oleans when lean files are deleted.</p>",
        "id": 191007314,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1584549492
    },
    {
        "content": "<p>Yesterday and today I found a bit of time for mathlibtools, so I added the <code>get-mathlib-cache</code> command, and also improved troubleshooting capabilities. Did I miss any feature request? (Again, creating GitHub issues for bug reports and feature requests would help a lot). I know I still have the refactor request to drop dependency on <code>leanpkg</code>, but this has pretty low priority for me. If there are no more obvious requests then I'll release a 0.0.4 version on PyPi.</p>",
        "id": 191391395,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1584875063
    },
    {
        "content": "<p>But before that it would be nice to hear about some real world test of <code>leanproject get-mathlib-cache</code>. In order to test this, you only need to clone the master branch and pip install it.</p>",
        "id": 191391416,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1584875112
    },
    {
        "content": "<p>How is this different to get-cache?</p>",
        "id": 191392154,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584876283
    },
    {
        "content": "<p>If you are editing mathlib this is the same thing. In another project this will get you mathlib oleans without changing the mathlib version mentioned in leanpkg.toml.</p>",
        "id": 191392175,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1584876339
    },
    {
        "content": "<p>(contrasting with upgrade-mathlib that will give you the latest mathlib)</p>",
        "id": 191392178,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1584876359
    },
    {
        "content": "<p>upgrade-mathlib might also change your lean version. Is this correct? I hadn't expected this.</p>",
        "id": 191392250,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584876467
    },
    {
        "content": "<p>But how is get-mathlib-cache different to get-cache?</p>",
        "id": 191392275,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584876483
    },
    {
        "content": "<p>Say you are in the perfectoid spaces project. Then get-cache will try to find cached <em>perfectoid</em> oleans, whereas get-mathlib-cache will  try to find cached <em>mathlib</em> oleans.</p>",
        "id": 191392401,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1584876720
    },
    {
        "content": "<p>Oh --- to do this I just change into target deps mathlib and get cache :-)</p>",
        "id": 191393482,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584878468
    },
    {
        "content": "<p>Yes, this also works, but it's arguably less nice.</p>",
        "id": 191393489,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1584878500
    },
    {
        "content": "<p>Ok so suppose that I have a project and I have a leanpkg.toml and I don't want to upgrade anything I just want to get the oleans for mathlib and build. How do I do that with leanproject?</p>",
        "id": 191509219,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1584984944
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 191510144,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1584985348
    },
    {
        "content": "<p>No, <code>leanproject get-mathlib-cache</code></p>",
        "id": 191510178,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584985364
    },
    {
        "content": "<p>If that is merged already</p>",
        "id": 191510197,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584985374
    },
    {
        "content": "<p>Otherwise <code>cd _target/mathlib/ ; leanproject get-cache</code></p>",
        "id": 191510233,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584985392
    },
    {
        "content": "<p>Yes, Johan is right. <code>get-mathlib-cache</code> been merged, <a href=\"https://github.com/leanprover-community/mathlib-tools#getting-mathlib-oleans\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib-tools#getting-mathlib-oleans\">here</a> it is in the readme.</p>",
        "id": 191510293,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1584985427
    },
    {
        "content": "<p>is it available upon calling <code>pip3 install mathlibtools</code>?</p>",
        "id": 191510778,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1584985652
    },
    {
        "content": "<p>Who knows?? <span aria-label=\"stuck out tongue wink\" class=\"emoji emoji-1f61c\" role=\"img\" title=\"stuck out tongue wink\">:stuck_out_tongue_wink:</span></p>",
        "id": 191510806,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584985668
    },
    {
        "content": "<p>I don't think it is</p>",
        "id": 191510891,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1584985693
    },
    {
        "content": "<p>It certainly will be rather soon</p>",
        "id": 191510905,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584985697
    },
    {
        "content": "<p>Ok, I'll wait</p>",
        "id": 191510917,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1584985705
    },
    {
        "content": "<p>I was waiting for people to test it locally before pushing to PyPi.</p>",
        "id": 191514032,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1584986933
    },
    {
        "content": "<p>Ok, I can see people won't test it if it's not released. <a href=\"https://pypi.org/project/mathlibtools/0.0.4/\" target=\"_blank\" title=\"https://pypi.org/project/mathlibtools/0.0.4/\">https://pypi.org/project/mathlibtools/0.0.4/</a></p>",
        "id": 191590065,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585045501
    },
    {
        "content": "<p>FYI, <code>get-mathlib-cache</code> just worked very nicely for me. Thanks!</p>",
        "id": 191593368,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1585047411
    },
    {
        "content": "<p>Thanks as ever Patrick. I should probably here openly that this tooling has really changed my workflow. Patrick asked <a href=\"#narrow/stream/113488-general/topic/elaboration.20issue.20challenge/near/191282282\" title=\"#narrow/stream/113488-general/topic/elaboration.20issue.20challenge/near/191282282\">some technical elaboration question</a> here, which involved having to use some branch of mathlib; I have a local clone of mathlib, so I used the command line to update mathlib and switch to the branch in question, and then I downloaded the fully compiled oleans in a matter of seconds.</p>",
        "id": 191596497,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585049257
    },
    {
        "content": "<p>I felt that this was a very clean and effective way of passing a <code>sorry</code> between two people.</p>",
        "id": 191596562,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585049291
    },
    {
        "content": "<p>Yes, thank you Patrick, the new <code>leanproject</code> is great. Thanks also to the work Rob and Gabriel have put into speeding up CI, that has been hugely productive as well.</p>",
        "id": 191596866,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585049483
    },
    {
        "content": "<p>Many thanks to Patrick, Rob, Gabriel, Simon and everyone else who was involved.</p>",
        "id": 191597034,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585049561
    },
    {
        "content": "<p>Hello, when I ran <code>leanproject new derivations</code> it started downloading lean 3.4.2. Is this correct?</p>\n<div class=\"codehilite\"><pre><span></span>$ leanproject new derivations\n&gt; mkdir -p derivations\n&gt; cd derivations\n&gt; mkdir src\n&gt; git init -q\n&gt; git checkout -b lean-3.4.2\nSwitched to a new branch &#39;lean-3.4.2&#39;\nconfiguring derivations 0.1\nAdding mathlib\nAdding mathlib\ninfo: downloading component &#39;lean&#39;\n</pre></div>",
        "id": 191618387,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1585060703
    },
    {
        "content": "<p>That confused me too when it happened -- but I think when it says <code>downloading component 'lean'</code> it might be downloading 3.7.1 or anything -- depending on what it in the toml. I think it is just randomly making a branch in your project called lean-3.4.2 for no obvious reason.</p>",
        "id": 191618757,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585060872
    },
    {
        "content": "<p>Yeah I see now. It does seem to be downloading 3.7.2</p>",
        "id": 191618852,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1585060913
    },
    {
        "content": "<p>When it's all over, look at the file <code>leanpkg.toml</code> in the root of the project, and also <code>_target/deps/mathlib/leanpkg.toml</code>. They should both say <code>lean_version = \"leanprover-community/lean:3.7.2\"</code></p>",
        "id": 191618953,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585060944
    },
    {
        "content": "<p>While you're in <code>_target/deps/mathlib</code> you can go into <code>src/data</code> and see if you have just <code>.lean</code> files, or also a bunch of <code>.olean</code> files. If you have the oleans, you're in good shape.</p>",
        "id": 191619060,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585060998
    },
    {
        "content": "<p>Alright, thank you.</p>",
        "id": 191619602,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1585061209
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>~/tmp$ leanproject get git@github.com:ImperialCollegeLondon/real-number-game.git\nCloning from git@github.com:ImperialCollegeLondon/real-number-game.git\nconfiguring real-number-game 0.1\nmathlib: cloning https://github.com/leanprover-community/mathlib to _target/deps/mathlib\n&gt; mkdir -p _target/deps/mathlib\n&gt; git clone https://github.com/leanprover-community/mathlib _target/deps/mathlib\nCloning into &#39;_target/deps/mathlib&#39;...\nremote: Enumerating objects: 58, done.\nremote: Counting objects: 100% (58/58), done.\nremote: Compressing objects: 100% (49/49), done.\nremote: Total 39653 (delta 19), reused 18 (delta 9), pack-reused 39595\nReceiving objects: 100% (39653/39653), 19.02 MiB | 9.96 MiB/s, done.\nResolving deltas: 100% (30230/30230), done.\n&gt; git checkout --detach f86abc7781d85564a9fba9f3deafe73453d22e8d    # in directory _target/deps/mathlib\nHEAD is now at f86abc77 fix(*): lower instance priority (#1724)\nLooking for local mathlib oleans\nLooking for remote mathlib oleans\nTrying to download https://oleanstorage.azureedge.net/mathlib/f86abc7781d85564a9fba9f3deafe73453d22e8d.tar.gz¬†to /home/buzzard/.mathlib/f86abc7781d85564a9fba9f3deafe73453d22e8d.tar.gz\nLooking for GitHub mathlib oleans\nWarning: This does not seem to be a git repository. Expect weird things...\nTrying to download https://github.com/leanprover-community/mathlib-nightly/releases/download/nightly-2019-11-23/mathlib-olean-nightly-2019-11-23.tar.gz¬†to /home/buzzard/.mathlib/f86abc7781d85564a9fba9f3deafe73453d22e8d.tar.gz\n100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 21.2M/21.2M [00:01&lt;00:00, 15.0MiB/s]\nFound GitHub mathlib oleans\n~/tmp$\n</pre></div>\n\n\n<p>Why does it say <code>Warning: This does not seem to be a git repository. Expect weird things...</code>?</p>",
        "id": 191948859,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585256775
    },
    {
        "content": "<p>After <code>leanproject hooks</code> I get</p>\n<div class=\"codehilite\"><pre><span></span>hint: The &#39;.git/hooks/post-checkout&#39; hook was ignored because it&#39;s not set as executable.\nhint: You can disable this warning with `git config advice.ignoredHook false`.\n</pre></div>",
        "id": 191959579,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1585263493
    }
]