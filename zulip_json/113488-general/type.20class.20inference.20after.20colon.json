[
    {
        "content": "<p>In <code>example (α : Type) [comm_ring α] : ∀ x y z : α, x*(y+z)=x*y+x*z := mul_add</code>, type class inference enables us to use <code>mul_add</code>. Is it possible to move the colon to the left of the alpha though? Not that  I need to, it's just an idle question. If I try <code>example : ∀ (α : Type) [comm_ring α], ∀ x y z : α, x*(y+z)=x*y+x*z := mul_add</code> then Lean complains about not being able to find <code>has_add alpha</code> etc.</p>",
        "id": 123577754,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520793251
    },
    {
        "content": "<p>A related question: is there ever a difference between <code>[comm_ring alpha]</code> and <code>[H : comm_ring alpha]</code> in terms of the type class inference system? Or between <code>[comm_ring alpha]</code> and <code>[_inst_1 : comm_ring alpha]</code>?</p>",
        "id": 123577804,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520793421
    },
    {
        "content": "<p>And another type class subtlety. With</p>\n<div class=\"codehilite\"><pre><span></span>structure foo (α : Type) :=\n(bar : α)\n(baz : α → α)\n\n#check @foo.bar\n#check @foo.baz\n</pre></div>\n\n\n<p>both <code>foo.bar</code> and <code>foo.baz</code> are <code>Π {α : Type},...</code>. But if I change the structure to a class, <code>foo.bar</code> (but not <code>foo.baz</code>) magically changes to <code>Π (α : Type)...</code> (no longer implicit). It didn't have to be that way, right? That is presumably some design decision?</p>",
        "id": 123578051,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520794060
    },
    {
        "content": "<p>The first issue is <a href=\"https://github.com/leanprover/lean/issues/1920\" target=\"_blank\" title=\"https://github.com/leanprover/lean/issues/1920\">#1920</a>. You have to write <code>example : ∀ (α : Type) [comm_ring α], ∀ x y z : α, by exactI x*(y+z)=x*y+x*z</code> if you want to use any typeclass args right of the colon</p>",
        "id": 123579280,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1520797010
    },
    {
        "content": "<p>Aah -- this is exactly the change that caused you so much trouble!</p>",
        "id": 123579286,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520797074
    },
    {
        "content": "<p>The second issue is just the usual analysis of when to make arguments implicit. It's a design decision, of course, but it is reasonably predictable and well motivated</p>",
        "id": 123579327,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1520797142
    }
]