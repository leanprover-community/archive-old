[
    {
        "content": "<p>In a month we cut down the number of missing module docstrings by a quarter. It went from 192 on the 1st of June to 140 today! <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 245018976,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1625566564
    },
    {
        "content": "<p>For those interested, here is the number of files without module docstring each top folder still contains</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">61</span> <span class=\"n\">tactic</span>\n<span class=\"mi\">27</span> <span class=\"n\">category_theory</span>\n<span class=\"mi\">23</span> <span class=\"n\">data</span>\n<span class=\"mi\">9</span> <span class=\"n\">control</span>\n<span class=\"mi\">5</span> <span class=\"n\">topology</span>\n<span class=\"mi\">3</span> <span class=\"n\">deprecated</span>\n<span class=\"mi\">3</span> <span class=\"n\">order</span>\n<span class=\"mi\">2</span> <span class=\"n\">logic</span>\n<span class=\"mi\">2</span> <span class=\"n\">set_theory</span>\n<span class=\"mi\">1</span> <span class=\"n\">algebra</span>\n<span class=\"mi\">1</span> <span class=\"n\">analysis</span>\n<span class=\"mi\">1</span> <span class=\"n\">computability</span>\n<span class=\"mi\">1</span> <span class=\"n\">measure_theory</span>\n<span class=\"mi\">1</span> <span class=\"kd\">meta</span>\n</code></pre></div>",
        "id": 245019582,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1625567067
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> Thank you very much for this great effort! It's appreciated! <span aria-label=\"octopus\" class=\"emoji emoji-1f419\" role=\"img\" title=\"octopus\">:octopus:</span> <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> <span aria-label=\"top hat\" class=\"emoji emoji-1f3a9\" role=\"img\" title=\"top hat\">:top_hat:</span></p>",
        "id": 245020514,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1625567712
    },
    {
        "content": "<p>Yes, from what I've seen that's a very charitable use of the word \"we\"!  Thanks for taking this on.</p>",
        "id": 245027094,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625572259
    },
    {
        "content": "<p>And we've now cut it down by half! Only 95 to go <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span><br>\nAmong others, thanks to <span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> and <span class=\"user-mention silent\" data-user-id=\"246273\">Bhavik Mehta</span> for category theory, and <span class=\"user-mention silent\" data-user-id=\"282271\">Bolton Bailey</span> for alists!<br>\nHere is the updated breakdown by top folder:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">58</span> <span class=\"n\">tactic</span>\n<span class=\"mi\">15</span> <span class=\"n\">category_theory</span>\n<span class=\"mi\">9</span> <span class=\"n\">data</span>\n<span class=\"mi\">4</span> <span class=\"n\">control</span>\n<span class=\"mi\">4</span> <span class=\"n\">topology</span>\n<span class=\"mi\">2</span> <span class=\"n\">deprecated</span>\n<span class=\"mi\">1</span> <span class=\"n\">logic</span>\n<span class=\"mi\">1</span> <span class=\"n\">computability</span>\n<span class=\"mi\">1</span> <span class=\"kd\">meta</span>\n</code></pre></div>",
        "id": 259096118,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1635255098
    },
    {
        "content": "<p>Could you tell me what are the 4 topology files? Those should be very easy to fix</p>",
        "id": 259097482,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1635255647
    },
    {
        "content": "<p>You have them <a href=\"https://github.com/leanprover-community/mathlib/blob/master/scripts/style-exceptions.txt#L101\">here</a>:</p>\n<ul>\n<li><code>topology.algebra.group_completion</code></li>\n<li><code>topology.algebra.open_subgroup</code></li>\n<li><code>topology.algebra.uniform_ring</code></li>\n<li><code>topology.category.Top.open_nhds</code></li>\n</ul>",
        "id": 259097696,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1635255731
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 259097698,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1635255731
    },
    {
        "content": "<p>Wow, <code>style_exceptions.txt</code> is only 104 lines long!</p>",
        "id": 259097904,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635255812
    },
    {
        "content": "<p>I expected more stuff, apart from module docstrings.</p>",
        "id": 259097922,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635255823
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/8973\">#8973</a> removed <em>a lot</em> of <code>ERR_LIN</code>.</p>",
        "id": 259098076,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1635255893
    },
    {
        "content": "<p>This is not <a href=\"https://github.com/leanprover-community/mathlib/blob/master/scripts/nolints.txt\">nolints.txt</a> which has 900 lines</p>",
        "id": 259098082,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1635255896
    },
    {
        "content": "<p>Yes, I know. But I was still surprised.</p>",
        "id": 259098151,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635255930
    },
    {
        "content": "<p><code>nolints.txt</code> also got pretty smaller, except for Floris' new <code>fails_quickly</code> linter.</p>",
        "id": 259098254,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1635255970
    },
    {
        "content": "<p>The errors that are not <code>ERR_MOD</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">26</span><span class=\"o\">:</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">pfunctor</span><span class=\"bp\">/</span><span class=\"n\">multivariate</span><span class=\"bp\">/</span><span class=\"n\">M.lean</span> <span class=\"o\">:</span> <span class=\"n\">line</span> <span class=\"mi\">43</span> <span class=\"o\">:</span> <span class=\"n\">ERR_LIN</span> <span class=\"o\">:</span> <span class=\"n\">Line</span> <span class=\"n\">has</span> <span class=\"n\">more</span> <span class=\"n\">than</span> <span class=\"mi\">100</span> <span class=\"n\">characters</span>\n<span class=\"mi\">27</span><span class=\"o\">:</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">pfunctor</span><span class=\"bp\">/</span><span class=\"n\">multivariate</span><span class=\"bp\">/</span><span class=\"n\">W.lean</span> <span class=\"o\">:</span> <span class=\"n\">line</span> <span class=\"mi\">42</span> <span class=\"o\">:</span> <span class=\"n\">ERR_LIN</span> <span class=\"o\">:</span> <span class=\"n\">Line</span> <span class=\"n\">has</span> <span class=\"n\">more</span> <span class=\"n\">than</span> <span class=\"mi\">100</span> <span class=\"n\">characters</span>\n<span class=\"mi\">28</span><span class=\"o\">:</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">qpf</span><span class=\"bp\">/</span><span class=\"n\">multivariate</span><span class=\"bp\">/</span><span class=\"n\">basic.lean</span> <span class=\"o\">:</span> <span class=\"n\">line</span> <span class=\"mi\">73</span> <span class=\"o\">:</span> <span class=\"n\">ERR_LIN</span> <span class=\"o\">:</span> <span class=\"n\">Line</span> <span class=\"n\">has</span> <span class=\"n\">more</span> <span class=\"n\">than</span> <span class=\"mi\">100</span> <span class=\"n\">characters</span>\n<span class=\"mi\">29</span><span class=\"o\">:</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">qpf</span><span class=\"bp\">/</span><span class=\"n\">multivariate</span><span class=\"bp\">/</span><span class=\"n\">constructions</span><span class=\"bp\">/</span><span class=\"n\">cofix.lean</span> <span class=\"o\">:</span> <span class=\"n\">line</span> <span class=\"mi\">38</span> <span class=\"o\">:</span> <span class=\"n\">ERR_LIN</span> <span class=\"o\">:</span> <span class=\"n\">Line</span> <span class=\"n\">has</span> <span class=\"n\">more</span> <span class=\"n\">than</span> <span class=\"mi\">100</span> <span class=\"n\">characters</span>\n<span class=\"mi\">30</span><span class=\"o\">:</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">qpf</span><span class=\"bp\">/</span><span class=\"n\">multivariate</span><span class=\"bp\">/</span><span class=\"n\">constructions</span><span class=\"bp\">/</span><span class=\"n\">fix.lean</span> <span class=\"o\">:</span> <span class=\"n\">line</span> <span class=\"mi\">47</span> <span class=\"o\">:</span> <span class=\"n\">ERR_LIN</span> <span class=\"o\">:</span> <span class=\"n\">Line</span> <span class=\"n\">has</span> <span class=\"n\">more</span> <span class=\"n\">than</span> <span class=\"mi\">100</span> <span class=\"n\">characters</span>\n<span class=\"mi\">31</span><span class=\"o\">:</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">qpf</span><span class=\"bp\">/</span><span class=\"n\">univariate</span><span class=\"bp\">/</span><span class=\"n\">basic.lean</span> <span class=\"o\">:</span> <span class=\"n\">line</span> <span class=\"mi\">35</span> <span class=\"o\">:</span> <span class=\"n\">ERR_LIN</span> <span class=\"o\">:</span> <span class=\"n\">Line</span> <span class=\"n\">has</span> <span class=\"n\">more</span> <span class=\"n\">than</span> <span class=\"mi\">100</span> <span class=\"n\">characters</span>\n<span class=\"mi\">54</span><span class=\"o\">:</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">tactic</span><span class=\"bp\">/</span><span class=\"n\">induction.lean</span> <span class=\"o\">:</span> <span class=\"n\">line</span> <span class=\"mi\">1329</span> <span class=\"o\">:</span> <span class=\"n\">ERR_RNT</span> <span class=\"o\">:</span> <span class=\"n\">Reserved</span> <span class=\"kd\">notation</span> <span class=\"n\">outside</span> <span class=\"n\">tactic.reserved_notation</span>\n<span class=\"mi\">100</span><span class=\"o\">:</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">testing</span><span class=\"bp\">/</span><span class=\"n\">slim_check</span><span class=\"bp\">/</span><span class=\"n\">testable.lean</span> <span class=\"o\">:</span> <span class=\"n\">line</span> <span class=\"mi\">552</span> <span class=\"o\">:</span> <span class=\"n\">ERR_LIN</span> <span class=\"o\">:</span> <span class=\"n\">Line</span> <span class=\"n\">has</span> <span class=\"n\">more</span> <span class=\"n\">than</span> <span class=\"mi\">100</span> <span class=\"n\">characters</span>\n</code></pre></div>",
        "id": 259098304,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635255997
    },
    {
        "content": "<p>Note that the first 6 ones are all caused by a certain paper that I should not quote written by certain people that I should not quote who decided on a long paper name. <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 259098519,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1635256088
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_stats/nolints.png\">https://leanprover-community.github.io/mathlib_stats/nolints.png</a> hasn't been posted in a while</p>\n<div class=\"message_inline_image\"><a href=\"https://leanprover-community.github.io/mathlib_stats/nolints.png\"><img src=\"https://uploads.zulipusercontent.net/006e4f03b7f487385dc0d0d5b356481697162dac/68747470733a2f2f6c65616e70726f7665722d636f6d6d756e6974792e6769746875622e696f2f6d6174686c69625f73746174732f6e6f6c696e74732e706e67\"></a></div>",
        "id": 259099488,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1635256532
    },
    {
        "content": "<p>What's the time span?</p>",
        "id": 259099648,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1635256616
    },
    {
        "content": "<p>It starts late 2019, would be my guess? The x axis is commits, not dates, so time isn't linear</p>",
        "id": 259099846,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1635256697
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/commit/8afcc5ae63c36f4fdd73cd1a63fcf8adef0f50cf#diff-07d0d2424df5b5cf4f849ffc53248147447d41443c6be222b0984fd1a64f8bd5\">Nov 8, 2019</a></p>",
        "id": 259100286,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1635256883
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/9990\">#9990</a> does 10 out of the 15 remaining missing module docs in <code>category_theory</code>.</p>",
        "id": 259178594,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1635293437
    },
    {
        "content": "<p>You know how to speak to me <span aria-label=\"blush\" class=\"emoji emoji-1f60a\" role=\"img\" title=\"blush\">:blush:</span></p>",
        "id": 259201476,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1635319552
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113488-general/topic/Module.20docstrings/near/259097696\">said</a>:</p>\n<blockquote>\n<p>You have them <a href=\"https://github.com/leanprover-community/mathlib/blob/master/scripts/style-exceptions.txt#L101\">here</a>:</p>\n<ul>\n<li><code>topology.algebra.group_completion</code></li>\n<li><code>topology.algebra.open_subgroup</code></li>\n<li><code>topology.algebra.uniform_ring</code></li>\n<li><code>topology.category.Top.open_nhds</code></li>\n</ul>\n</blockquote>\n<p>I opened PRs adding docstrings to those files. In <a href=\"https://github.com/leanprover-community/mathlib/issues/10111\">#10111</a> I also added a <code>lattice</code> instance because it was weird to write the docstring without this instance, and it didn't seem to be implied by the other instances. But maybe our order hierarchy gurus should have a look. We already have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/open_subgroup.semilattice_inf_top\">docs#open_subgroup.semilattice_inf_top</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/open_subgroup.semilattice_sup_top\">docs#open_subgroup.semilattice_sup_top</a> but this does not imply the corresponding lattice instance. Is it dangerous or useless to add this instance?</p>",
        "id": 260000982,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1635862566
    },
    {
        "content": "<p>Looks fine to me!</p>",
        "id": 260075882,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1635898753
    },
    {
        "content": "<p>What kind of markdown syntax is this? <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/data/qpf/univariate/basic.lean#L35\">https://github.com/leanprover-community/mathlib/blob/master/src/data/qpf/univariate/basic.lean#L35</a> Does it allow for linebreaks in some way?</p>",
        "id": 260095531,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635922732
    },
    {
        "content": "<p>You can put line breaks inside the first <code>[]</code></p>",
        "id": 260096161,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635923358
    },
    {
        "content": "<p>Oh really? Then I can fix the last few <code>ERR_LIN</code>!</p>",
        "id": 260100135,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1635926977
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/10136\">#10136</a> is an attempt at adding an indentation linter. But I would prefer if these are \"gentle warnings\" instead of \"harsh errors\".</p>",
        "id": 260100861,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635927557
    },
    {
        "content": "<p>There will probably be many false positives</p>",
        "id": 260100883,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635927575
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span> do you know if <code>::error</code> vs <code>::warning</code> has different impact on CI checkmars in GH actions?</p>",
        "id": 260100933,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635927602
    },
    {
        "content": "<p>Many of the warnings seem spurious!</p>",
        "id": 260101161,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1635927756
    },
    {
        "content": "<p>Although I'm surprised how few there are.</p>",
        "id": 260101540,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1635928071
    },
    {
        "content": "<p>I'm trying to improve a bit more. <code>match..end</code> blocks are adding to the problem.</p>",
        "id": 260101767,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635928236
    },
    {
        "content": "<p>But that's exactly why I want these to be very gentle warnings. They should be very easy to ignore.</p>",
        "id": 260101784,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635928255
    },
    {
        "content": "<p>Ideally, we would invoke the linter by manually running some GH action on PRs that could use a bunch of this advice.</p>",
        "id": 260101822,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635928292
    },
    {
        "content": "<p>The current version is better</p>",
        "id": 260103244,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635929168
    },
    {
        "content": "<p>I haven't look at everything it flags, but a random sample is showing actual mistakes</p>",
        "id": 260103282,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635929194
    },
    {
        "content": "<p>One false positive consisted of an extra-indented simp-config. I think extra-indenting those is good practice.</p>",
        "id": 260103334,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635929225
    },
    {
        "content": "<p><code>calc</code> blocks are another feature where there is a lot of indentation-style-variation. Maybe I should just skip those as well.</p>",
        "id": 260106980,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635931426
    },
    {
        "content": "<p>At least for now.</p>",
        "id": 260106992,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635931434
    },
    {
        "content": "<p>That was my first thought when I saw the output, how come there aren't a billion warnings about calc blocks already?<br>\nAlso are you dealing with lists of simp/rw lemmas, there are (at least) two styles in use:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">some_lemma</span><span class=\"o\">,</span>\n    <span class=\"n\">some_other_lemma</span><span class=\"o\">],</span>\n</code></pre></div>\n<p>and</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">some_lemma</span><span class=\"o\">,</span>\n  <span class=\"n\">some_other_lemma</span><span class=\"o\">],</span>\n</code></pre></div>",
        "id": 260115688,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1635936383
    },
    {
        "content": "<p>Also, <span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span> mentioned a prettier plugin the other day, <a href=\"#narrow/stream/113488-general/topic/.E2.9C.94.20prettier.20pluggin/near/259574899\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/.E2.9C.94.20prettier.20pluggin/near/259574899</a>, personally I think this could be worth the effort to make a simple one even in lean 3 <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 260116033,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1635936636
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span> count me in if you want to give it a try, even if just as an attempt to get the hang of Prettier.</p>",
        "id": 260123399,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1635941069
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/Module.20docstrings/near/260100933\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"123965\">Bryan Gin-ge Chen</span> do you know if <code>::error</code> vs <code>::warning</code> has different impact on CI checkmars in GH actions?</p>\n</blockquote>\n<p>I think it just affects the color of the message that GitHub displays by the error, but <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> would know better than I would.</p>",
        "id": 260134013,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1635946322
    },
    {
        "content": "<p>Yes, I think that's correct</p>",
        "id": 260136054,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635947276
    },
    {
        "content": "<p>There's an <code>info</code> one too I think, that doesn't cause a CI failure</p>",
        "id": 260136108,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635947287
    },
    {
        "content": "<p>Aah, that sounds like what I'm looking for!</p>",
        "id": 260149186,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635952703
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span> Currently, I only lint the indentation of lines starting with <code>{</code></p>",
        "id": 260149236,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635952723
    },
    {
        "content": "<p>I pushed an update that removes some false positives. It now flags 140 indentation errors in mathlib. My N&lt;10 sample shows that they are true positives.</p>",
        "id": 260186045,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635968168
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span> Is it easy to support this linter as an Action that can be manually invoked?</p>",
        "id": 260236857,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1636011206
    },
    {
        "content": "<p>Because, I'm not sure if we want to include it by default...</p>",
        "id": 260236863,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1636011216
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/10163\">#10163</a> fixes almost all things flagged by the indentation linter. The remaining six warnings are false positives.</p>",
        "id": 260274845,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1636035245
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/Module.20docstrings/near/260236857\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"123965\">Bryan Gin-ge Chen</span> Is it easy to support this linter as an Action that can be manually invoked?</p>\n</blockquote>\n<p>It's probably not too hard, but it would take some time. The way to do this that comes to mind is the following:</p>\n<ol>\n<li>The linting script would need to be refactored a bit to accept a command line parameter to run only select linters.</li>\n<li>We'd need an additional GH action which runs when new comments are posted and runs the style linter if it detects certain strings (possibly parsing some provided options); if I were to do this, I'd probably work off the <a href=\"https://github.com/leanprover-community/doc-gen/blob/master/.github/workflows/build-pr.yml\">#deploy</a> script in the doc-gen repo.</li>\n</ol>",
        "id": 260274878,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1636035264
    },
    {
        "content": "<p>Maybe it's possible to always run the linter... there are only a few false positives left.</p>",
        "id": 260276302,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1636035895
    },
    {
        "content": "<p>The main issues:</p>\n<ul>\n<li>Lines of the form</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">some</span> <span class=\"n\">long</span> <span class=\"n\">stuff</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">},</span> <span class=\"n\">more</span> <span class=\"n\">stuff</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<ul>\n<li>Blocks of the form</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">split</span><span class=\"bp\">;</span>\n  <span class=\"o\">[{</span> <span class=\"n\">tac1</span><span class=\"o\">,</span> <span class=\"n\">tac2</span> <span class=\"o\">},</span>\n   <span class=\"o\">{</span> <span class=\"n\">tac3</span><span class=\"o\">,</span> <span class=\"n\">tac4</span> <span class=\"o\">}],</span>\n</code></pre></div>",
        "id": 260276990,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1636036187
    },
    {
        "content": "<p>I don't know what people think about the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2</mn><mi>n</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">2n+1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">2</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span> indentation in the second block.</p>",
        "id": 260277097,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1636036217
    },
    {
        "content": "<p>The first block is certainly legitimate. It's a pattern that occurs twice in mathlib (according to the linter).</p>",
        "id": 260277507,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1636036395
    },
    {
        "content": "<p>The 2nd block occurs 3 times</p>",
        "id": 260277547,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1636036411
    },
    {
        "content": "<p>You could ignore any <code>{}</code>s inside ⟨⟩</p>",
        "id": 260282871,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636038320
    },
    {
        "content": "<p>Hmm, good idea. And also inside <code>[]</code>. I'll add some tracking.</p>",
        "id": 260284674,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1636039016
    },
    {
        "content": "<p>Done</p>",
        "id": 260286993,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1636039920
    },
    {
        "content": "<p>That worked great. The linter is now happy with all of mathlib</p>",
        "id": 260287073,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1636039936
    },
    {
        "content": "<ul>\n<li><a href=\"https://github.com/leanprover-community/mathlib/issues/10136\">#10136</a> is the linter, which doesn't pass CI</li>\n<li><a href=\"https://github.com/leanprover-community/mathlib/issues/10163\">#10163</a> is all the fixes, which is blocked by <span aria-label=\"this\" class=\"emoji emoji-1f446\" role=\"img\" title=\"this\">:this:</span></li>\n</ul>\n<p>Do we just want the second PR, instead of two separate PRs?</p>",
        "id": 260287813,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1636040199
    },
    {
        "content": "<p>You could remove the linter from the second PR (so that it doesn't depend on the first). Or we could accept it in one go.</p>",
        "id": 260295265,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1636042814
    },
    {
        "content": "<p>Let's go for the \"in one go\" option.</p>",
        "id": 260302405,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1636045425
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/Module.20docstrings/near/260276990\">said</a>:</p>\n<blockquote>\n<ul>\n<li>Blocks of the form</li>\n</ul>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">split</span><span class=\"bp\">;</span>\n  <span class=\"o\">[{</span> <span class=\"n\">tac1</span><span class=\"o\">,</span> <span class=\"n\">tac2</span> <span class=\"o\">},</span>\n   <span class=\"o\">{</span> <span class=\"n\">tac3</span><span class=\"o\">,</span> <span class=\"n\">tac4</span> <span class=\"o\">}],</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>I don't understand why you'd write it like this in the first place. Why not just remove the <code>;</code> and <code>[</code>, <code>]</code>?</p>",
        "id": 260479551,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1636157626
    },
    {
        "content": "<p>Because <code>{}</code> inside <code>[]</code> is not <code>solve1</code> but just a sequential combinator</p>",
        "id": 260479932,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636158049
    },
    {
        "content": "<p>So if you remove the <code>[]</code>, then <code>tac2</code> and <code>tac4</code> are required to close all their goals</p>",
        "id": 260479943,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636158065
    },
    {
        "content": "<p>That being said: are people in favour of merging <a href=\"https://github.com/leanprover-community/mathlib/issues/10163\">#10163</a>?</p>",
        "id": 260495388,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1636179074
    }
]