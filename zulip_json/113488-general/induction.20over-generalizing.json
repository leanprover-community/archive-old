[
    {
        "content": "<p>I'm trying to implement the basics of simply typed lambda calculus and I have an inductive type given as </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">has_type</span> <span class=\"o\">:</span> <span class=\"n\">Context</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Term</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Typ</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">t_Var</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">Context</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">var</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">τ</span> <span class=\"o\">:</span> <span class=\"n\">Typ</span><span class=\"o\">),</span> <span class=\"n\">Dict.get</span> <span class=\"bp\">Γ</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">τ</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">has_type</span> <span class=\"bp\">Γ</span> <span class=\"o\">(</span><span class=\"n\">tm_Var</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">τ</span>\n<span class=\"bp\">|</span> <span class=\"n\">t_Lam</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">Context</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">var</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">τ₁</span> <span class=\"n\">τ₂</span> <span class=\"o\">:</span> <span class=\"n\">Typ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t₁</span> <span class=\"o\">:</span> <span class=\"n\">Term</span><span class=\"o\">),</span>\n    <span class=\"n\">has_type</span> <span class=\"o\">(</span><span class=\"n\">Dict.add</span> <span class=\"bp\">Γ</span> <span class=\"n\">x</span> <span class=\"n\">τ₁</span><span class=\"o\">)</span> <span class=\"n\">t₁</span> <span class=\"n\">τ₂</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">has_type</span> <span class=\"bp\">Γ</span> <span class=\"o\">(</span><span class=\"n\">tm_Lam</span> <span class=\"n\">x</span> <span class=\"n\">τ₁</span> <span class=\"n\">t₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">typ_Lam</span> <span class=\"n\">τ₁</span> <span class=\"n\">τ₂</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">t_Ap</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"bp\">Γ</span> <span class=\"n\">τ₁</span> <span class=\"n\">τ₂</span> <span class=\"n\">e₁</span> <span class=\"n\">e₂</span><span class=\"o\">,</span> <span class=\"n\">has_type</span> <span class=\"bp\">Γ</span> <span class=\"n\">e₁</span> <span class=\"o\">(</span><span class=\"n\">typ_Lam</span> <span class=\"n\">τ₁</span> <span class=\"n\">τ₂</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">has_type</span> <span class=\"bp\">Γ</span> <span class=\"n\">e₂</span> <span class=\"n\">τ₁</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">has_type</span> <span class=\"bp\">Γ</span> <span class=\"o\">(</span><span class=\"n\">tm_Ap</span> <span class=\"n\">e₁</span> <span class=\"n\">e₂</span><span class=\"o\">)</span> <span class=\"n\">τ₂</span>\n<span class=\"bp\">|</span> <span class=\"n\">t_Unit</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"bp\">Γ</span><span class=\"o\">,</span> <span class=\"n\">has_type</span> <span class=\"bp\">Γ</span> <span class=\"n\">tm_Unit</span> <span class=\"n\">typ_Unit</span>\n<span class=\"bp\">|</span> <span class=\"n\">t_Nat</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"bp\">Γ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">has_type</span> <span class=\"bp\">Γ</span> <span class=\"o\">(</span><span class=\"n\">tm_Nat</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">typ_Nat</span>\n</code></pre></div>\n<p>based roughly off of <a href=\"https://softwarefoundations.cis.upenn.edu/plf-current/Stlc.html\">https://softwarefoundations.cis.upenn.edu/plf-current/Stlc.html</a></p>\n<p>With that in mind, I'm having  a bit of trouble with induction. For example, I'm trying to prove that every term has a unique type with the followin theorem</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">unique_type</span> <span class=\"o\">{</span><span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">Context</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">τ₁</span> <span class=\"n\">τ₂</span> <span class=\"o\">:</span> <span class=\"n\">Typ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Term</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">has_type</span> <span class=\"bp\">Γ</span> <span class=\"n\">e</span> <span class=\"n\">τ₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">has_type</span> <span class=\"bp\">Γ</span> <span class=\"n\">e</span> <span class=\"n\">τ₂</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">τ₁</span> <span class=\"bp\">=</span> <span class=\"n\">τ₂</span>\n</code></pre></div>\n<p>However, when I start with <code>induction h1</code>, it generalizes the Γ term into a h_Γ. It's important that the context is the same throughout the proofs, but I'm not sure how to fix this. Thank you so much for your help!</p>",
        "id": 306294238,
        "sender_full_name": "zbatt",
        "timestamp": 1666805879
    },
    {
        "content": "<p>My reading is that the context can't be the same thoughout the proof though because <code>t_Lam</code> changes it; am I missing something?</p>",
        "id": 306304474,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1666809042
    },
    {
        "content": "<p>My reading is that the context can't be the same thoughout the proof though because <code>t_Lam</code> changes it; am I missing something?</p>",
        "id": 306310619,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1666811012
    },
    {
        "content": "<p>It does, but for certain theorems it was important that the inductive step not generalize it from the outset (I believe). For example in trying to prove progress its important that when inducting over the typing judgement, the context stay empty. I got it to work using advice from <span class=\"user-mention\" data-user-id=\"128280\">@Wojciech Nawrocki</span>  via</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">progress</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Term</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">τ</span> <span class=\"o\">:</span> <span class=\"n\">Typ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">has_type</span> <span class=\"n\">ctx_Empty</span> <span class=\"n\">e</span> <span class=\"n\">τ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">value</span> <span class=\"n\">e</span> <span class=\"bp\">∨</span> <span class=\"bp\">∃</span> <span class=\"n\">e'</span><span class=\"o\">,</span> <span class=\"n\">e</span> <span class=\"bp\">↦</span> <span class=\"n\">e'</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">generalize_hyp</span> <span class=\"n\">h</span><span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">ctx_Empty</span> <span class=\"bp\">=</span> <span class=\"bp\">Γ</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>Admittedly I'm pretty new to both programming language theory and Lean so I might be missing something obvious.</p>",
        "id": 306320484,
        "sender_full_name": "zbatt",
        "timestamp": 1666814443
    },
    {
        "content": "<p>The trick in the last code snippet is indeed useful if you want to do induction when the context (or the term or type) are not variables. You can also try <code>induction'</code> (available with <code>import tactic.induction</code> from mathlib), which will (hopefully) do this automatically for you.</p>\n<p>On your earlier question: you clearly cannot have the context the same in all induction steps. However, <code>induction h1 generalizing h2</code> is probably good enough: it will also replace the <code>Γ</code> by <code>h_Γ</code> in <code>h2</code>.</p>",
        "id": 306338448,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1666820608
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"483794\">zbatt</span> <a href=\"#narrow/stream/113488-general/topic/induction.20over-generalizing/near/306320484\">said</a>:</p>\n<blockquote>\n<p>It does, but for certain theorems it was important that the inductive step not generalize it from the outset (I believe). For example in trying to prove progress its important that when inducting over the typing judgement, the context stay empty.</p>\n</blockquote>\n<p>This sounds fishy to me. Over-generalisation should never be harmful; you can always recover the specialised induction hypothesis by applying the generalised one. Under-generalisation, on the other hand, where certain expressions remain fixed but should be variable, is a very common source of trouble. This is why <code>induction'</code> generalises everything by default; if you have an example where this is harmful, I'm very interested.</p>",
        "id": 306419132,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1666867024
    },
    {
        "content": "<p>yeah mathematically there's never anything wrong with over-generalizing, but I can't comment on applications to CS/type theory.</p>",
        "id": 306429350,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1666871138
    },
    {
        "content": "<p>it is syntactically annoying since you have to pass a ton of arguments to the IH when you apply it</p>",
        "id": 306430442,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666871526
    },
    {
        "content": "<p>Also, you can't generalize <em>everything</em>; the indices and parameters of the inductive type can't be generalized, as well as their dependencies</p>",
        "id": 306430884,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666871670
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/induction.20over-generalizing/near/306430442\">said</a>:</p>\n<blockquote>\n<p>it is syntactically annoying since you have to pass a ton of arguments to the IH when you apply it</p>\n</blockquote>\n<p>I heard the apply bug was fixed in Lean 4 though :-)</p>",
        "id": 306431091,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1666871751
    },
    {
        "content": "<p>indeed it was, <a href=\"#narrow/stream/116290-rss/topic/Recent.20Commits.20to.20lean4.3Amaster/near/306358091\">just yesterday</a></p>",
        "id": 306432943,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666872353
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/induction.20over-generalizing/near/306430884\">said</a>:</p>\n<blockquote>\n<p>Also, you can't generalize <em>everything</em>; the indices and parameters of the inductive type can't be generalized, as well as their dependencies</p>\n</blockquote>\n<p>Sure, <code>induction'</code> generalises everything that can be generalised. The syntactic overhead can indeed get annoying, but at least for teaching, we thought this was a better default than having people run into the under-generalisation issue all the time.</p>",
        "id": 306453774,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1666878647
    },
    {
        "content": "<p>In NNG you essentially never need to over-generalise and people think they're getting good at the game, and then there's one level in advanced multiplication world where you do and loads of people get stuck there.</p>",
        "id": 306454858,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1666878949
    },
    {
        "content": "<p><a href=\"https://www.ma.imperial.ac.uk/~buzzard/xena/natural_number_game/?world=9&amp;level=4\">https://www.ma.imperial.ac.uk/~buzzard/xena/natural_number_game/?world=9&amp;level=4</a> In the end I just put in a big explainer about the phenomenon.</p>",
        "id": 306455216,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1666879018
    },
    {
        "content": "<p>IIRC, I had a solution for that level without generalizing. <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 306456657,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1666879370
    }
]