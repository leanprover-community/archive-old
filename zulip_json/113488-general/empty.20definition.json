[
    {
        "content": "<p>So, you know how <code>unit</code> is defined as <code>punit.{0}</code>? I wonder why the same isn't true for <code>empty</code> and <code>pempty.{0}</code></p>",
        "id": 285331905,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1654648858
    },
    {
        "content": "<p>You mean <code>pempty.{1}</code>, right? <code>pempty.{0}</code> would be <a href=\"https://leanprover-community.github.io/mathlib_docs/find/false\">docs#false</a>.</p>",
        "id": 285349491,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1654669000
    },
    {
        "content": "<p>The <a href=\"https://github.com/leanprover-community/lean/blob/38b59111b2b4e6c572582b27e8937e92fc70ac02/library/init/core.lean#L48\">docstring for unit</a> seems to be incorrect. Shouldn't it be <code>punit.{1}</code>?</p>",
        "id": 285426255,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1654709360
    },
    {
        "content": "<p>It probably predates <code>Sort</code>.</p>",
        "id": 285426351,
        "sender_full_name": "Reid Barton",
        "timestamp": 1654709404
    },
    {
        "content": "<p>Good catch! I occasionally PR docstrings to core Lean and they're welcomed! In fact I suspect that my only contributions to core Lean are docstring additions/edits ;-)</p>",
        "id": 285435546,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1654713653
    },
    {
        "content": "<p>There's a few extra definitional equalities we could get, actually</p>",
        "id": 285441692,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1654716581
    },
    {
        "content": "<p><code>true</code> could be def-eq to <code>punit.{0}</code>, <code>false</code> could be def-eq to <code>pempty.{0}</code>, and <code>empty</code> could be def-eq to <code>pempty.{1}</code></p>",
        "id": 285441767,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1654716605
    },
    {
        "content": "<p>Sure, the extra convenience gains would be minor, but I can't see any way this could make things less convenient</p>",
        "id": 285441811,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1654716626
    },
    {
        "content": "<p>(of course, every time I've said this I've been wrong)</p>",
        "id": 285441820,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1654716636
    },
    {
        "content": "<p>Would there be any point though?</p>",
        "id": 285441822,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1654716636
    },
    {
        "content": "<p>I feel like the cost of confusing mathematicians by saying \"oh, we call <code>false</code> <code>pempty</code> sometimes\" already outweighs whatever minor benefit you're thinking of</p>",
        "id": 285441886,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1654716678
    },
    {
        "content": "<p>We'd get a few extra lemmas for free from their <code>punit</code> and <code>pempty</code> counterparts</p>",
        "id": 285441892,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1654716681
    },
    {
        "content": "<p>That's about it</p>",
        "id": 285441896,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1654716683
    },
    {
        "content": "<p>Aren't those lemmas ones we already get from the <code>is_empty</code> version?</p>",
        "id": 285441961,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1654716711
    },
    {
        "content": "<p>That's fair</p>",
        "id": 285442088,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1654716766
    },
    {
        "content": "<p>The change <code>empty = pempty.{1}</code> should still make sense, though?</p>",
        "id": 285442128,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1654716789
    },
    {
        "content": "<p>If for nothing else, just for consistency with <code>unit = punit.{1}</code></p>",
        "id": 285442344,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1654716902
    },
    {
        "content": "<p>I'm also happy for <code>false</code> to be redefined as <code>pempty.{0}</code>, but <code>true</code> shouldn't be redefined as <code>punit.{0}</code> because then we have the wrong name for the constructor (this is not a problem for <code>false</code> because there are no constructors!).</p>",
        "id": 285442809,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1654717121
    },
    {
        "content": "<p><code>false</code> would have the wrong name for the eliminator though right?</p>",
        "id": 285450289,
        "sender_full_name": "Reid Barton",
        "timestamp": 1654720837
    },
    {
        "content": "<p>Currently you can write:</p>\n<ul>\n<li><code>⟨⟩</code>, <code>true.intro</code> or <code>trivial</code> to construct a term of type <code>true</code>, </li>\n<li><code>⟨⟩</code>, <code>()</code> or <code>unit.star</code> to construct a term of type <code>unit</code>,</li>\n<li><code>⟨⟩</code> or <code>punit.star</code> to construct a term of type <code>punit</code>,<br>\nso <code>⟨⟩</code> is the most versatile/universal constructor. I don't know where <code>()</code> is defined! Seems there isn't a notation declaration.</li>\n</ul>",
        "id": 285450524,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1654720960
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113488-general/topic/empty.20definition/near/285450289\">said</a>:</p>\n<blockquote>\n<p><code>false</code> would have the wrong name for the eliminator though right?</p>\n</blockquote>\n<p>You can provide <code>false.elim</code> separately.</p>",
        "id": 285451822,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1654721618
    },
    {
        "content": "<p>Isn't <code>()</code> handled separately by Lean because it's round brackets?</p>",
        "id": 285451919,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1654721651
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224323\">Junyan Xu</span> <a href=\"#narrow/stream/113488-general/topic/empty.20definition/near/285450524\">said</a>:</p>\n<blockquote>\n<p>I don't know where <code>()</code> is defined! Seems there isn't a notation declaration.</p>\n</blockquote>\n<p>I think it's <a href=\"https://github.com/leanprover-community/lean/blob/38b59111b2b4e6c572582b27e8937e92fc70ac02/src/frontends/lean/builtin_exprs.cpp#L1243\">here</a>.</p>",
        "id": 285453562,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1654722538
    },
    {
        "content": "<p>Ah yeah, so I was right.</p>",
        "id": 285454625,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1654723115
    },
    {
        "content": "<p>Thanks! Should we / is it easy to make <code>()</code> universe polymorphic as well?</p>\n<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113488-general/topic/empty.20definition/near/285451822\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113488-general/topic/empty.20definition/near/285450289\">said</a>:</p>\n<blockquote>\n<p><code>false</code> would have the wrong name for the eliminator though right?</p>\n</blockquote>\n<p>You can provide <code>false.elim</code> separately.</p>\n</blockquote>\n<p>Don't we now have both <a href=\"https://leanprover-community.github.io/mathlib_docs/find/false.elim\">docs#false.elim</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/empty.elim\">docs#empty.elim</a> / <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pempty.elim\">docs#pempty.elim</a>? Interestingly <code>false.elim</code> is defined in terms of <code>false.rec</code> while the other two are defined by pattern matching (where there's no pattern).</p>",
        "id": 285454940,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1654723306
    },
    {
        "content": "<p>Don't those get compiled to the same thing anyway?</p>",
        "id": 285455670,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1654723644
    },
    {
        "content": "<p>I think so, but in the docs the former shows one equation while the latter two show nothing.</p>",
        "id": 285455763,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1654723690
    },
    {
        "content": "<p>Actually, doesn't seem to be the same syntactically:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[inline]</span>\n<span class=\"kd\">def</span> <span class=\"n\">false.elim</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">},</span> <span class=\"n\">false</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">false</span><span class=\"o\">),</span> <span class=\"n\">false.rec</span> <span class=\"n\">C</span> <span class=\"n\">h</span>\n<span class=\"kd\">def</span> <span class=\"n\">empty.elim</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u_1</span><span class=\"o\">},</span> <span class=\"n\">empty</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u_1</span><span class=\"o\">},</span> <span class=\"n\">empty.elim._main</span>\n<span class=\"kd\">def</span> <span class=\"n\">pempty.elim</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u_1</span><span class=\"o\">},</span> <span class=\"n\">pempty</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u_1</span><span class=\"o\">},</span> <span class=\"n\">pempty.elim._main</span>\n</code></pre></div>",
        "id": 285456049,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1654723895
    },
    {
        "content": "<p>from <code>#print</code></p>",
        "id": 285456084,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1654723914
    },
    {
        "content": "<p>and</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">empty.elim._main</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">_aux_param_0</span><span class=\"o\">},</span> <span class=\"n\">empty</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">_aux_param_0</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ᾰ</span> <span class=\"o\">:</span> <span class=\"n\">empty</span><span class=\"o\">),</span> <span class=\"n\">empty.cases_on</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">ᾰ</span> <span class=\"o\">:</span> <span class=\"n\">empty</span><span class=\"o\">),</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"n\">ᾰ</span>\n\n<span class=\"kd\">@[reducible]</span>\n<span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">pempty.cases_on</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">motive</span> <span class=\"o\">:</span> <span class=\"n\">pempty</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">pempty</span><span class=\"o\">),</span> <span class=\"n\">motive</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">motive</span> <span class=\"o\">:</span> <span class=\"n\">pempty</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">pempty</span><span class=\"o\">),</span> <span class=\"n\">pempty.rec</span> <span class=\"n\">motive</span> <span class=\"n\">n</span>\n</code></pre></div>\n<p>so pattern matching definitions unfolds to <code>cases_on</code>; only when you unfold again you recover <code>rec</code>.</p>",
        "id": 285456159,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1654723953
    },
    {
        "content": "<p>Other observations:<br>\n<a href=\"https://leanprover-community.github.io/mathlib_docs/find/psum\">docs#psum</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/sum\">docs#sum</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/or\">docs#or</a> have the same constructor names <code>inl</code>, <code>inr</code>. <code>or</code> is not a special case of <code>psum</code> because it produces a <code>Prop</code> which is always a subsingleton, while <code>psum</code> produces a <code>Type</code> given two <code>Prop</code>s (so <code>decidable p</code> could in fact be defined to be <code>psum (¬p) p</code>).</p>\n<p><code>psum</code> currently has type <code>Sort u → Sort v → Sort (max 1 u v)</code>. However, the following is also accepted by Lean:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">psum'</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">inl</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">psum'</span>\n<span class=\"bp\">|</span> <span class=\"n\">inr</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">psum'</span>\n</code></pre></div>\n<p>It removes the <code>1</code> from <code>max 1 u v</code>, so should be as robust as the current <code>sum</code> against universe unification issues! (Maybe there is a small problem with the <code>+1</code> from <code>Type</code> to <code>Sort</code>, I'm not sure.) Should it be promoted to the official <code>sum</code> (with <code>or</code> a special case)? We can then provide a separate <code>psum</code> just for the only special case <code>Prop → Prop → Type</code> that's not covered and use it to define <a href=\"https://leanprover-community.github.io/mathlib_docs/find/decidable\">docs#decidable</a>.</p>\n<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/and\">docs#and</a> has constructor names <code>left</code> and <code>right</code> while <a href=\"https://leanprover-community.github.io/mathlib_docs/find/prod\">docs#prod</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pprod\">docs#pprod</a> have the names <code>fst</code> and <code>snd</code>. In this case, it doesn't seem useful to have <code>pprod : Prop → Prop → Type</code>, since it doesn't retain any additional information like in the <code>sum</code> case, and if you want the resulting type to be in <code>Type</code> you can just lift it, so we may as well use one definition to encompass them all:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">pprod'</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">fst</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">snd</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">pprod'</span>\n</code></pre></div>\n<p>However, if you use <code>structure</code> then Lean complains:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">pprod''</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">fst</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">snd</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n<span class=\"c\">/-</span><span class=\"cm\"> invalid universe polymorphic structure declaration,</span>\n<span class=\"cm\">the resultant universe is not Prop (i.e., 0), but it may be Prop</span>\n<span class=\"cm\">for some parameter values (solution: use 'l+1' or 'max 1 l') -/</span>\n</code></pre></div>\n<p>Is it possible to make <code>structure</code> accept this? If we're unable to use structure, I think we lose the nice projections...</p>",
        "id": 285460560,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1654726744
    },
    {
        "content": "<blockquote>\n<p>However, the following is also accepted by Lean:</p>\n</blockquote>\n<p><code>#check psum'.rec</code> tells you this isn't a useful definition</p>",
        "id": 285462078,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1654727827
    },
    {
        "content": "<p>It only has a small eliminator</p>",
        "id": 285462098,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1654727844
    },
    {
        "content": "<p>Which is why you can't pull the same trick for <code>pprod</code>, because the projections need large eliminators</p>",
        "id": 285462125,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1654727873
    },
    {
        "content": "<p>Thanks! <del>In hindsight it's clear the recursor can't be made universe polymorphic.</del></p>",
        "id": 285463074,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1654728514
    }
]