[
    {
        "content": "<p>I just came across this and I am unsure of why this causes the Lean server to segfault on my machine:<br>\nI am writing a tactic to revert all propositions in a theorem. </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">open</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">revert_props</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n    <span class=\"n\">do</span> <span class=\"n\">ctx</span> <span class=\"err\">←</span> <span class=\"n\">local_context</span><span class=\"o\">,</span>\n       <span class=\"n\">lst</span> <span class=\"err\">←</span> <span class=\"n\">mmap</span> <span class=\"n\">infer_type</span> <span class=\"n\">ctx</span><span class=\"o\">,</span>\n       <span class=\"n\">foo</span> <span class=\"err\">←</span> <span class=\"n\">mfilter</span> <span class=\"n\">is_prop</span> <span class=\"n\">lst</span><span class=\"o\">,</span>\n       <span class=\"n\">g</span> <span class=\"err\">←</span> <span class=\"n\">mmap</span> <span class=\"n\">revert</span> <span class=\"n\">foo</span><span class=\"o\">,</span>\n       <span class=\"n\">skip</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">e</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">d</span> <span class=\"bp\">→</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₃</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">f</span> <span class=\"bp\">→</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"c1\">-- revert_props, -- causes a segfault</span>\n  <span class=\"n\">guard_target</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">f</span> <span class=\"bp\">→</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"bp\">→</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">true</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span><span class=\"o\">,</span>\n  <span class=\"n\">trivial</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>I am concerned if <code>mmap revert foo</code> is the right way to do what I had in mind.</p>",
        "id": 163675426,
        "sender_full_name": "Koundinya Vajjha",
        "timestamp": 1555610796
    },
    {
        "content": "<p>I recall <code>revert</code> having a bug in it that causes a segfault, although I thought it was fixed</p>",
        "id": 163675942,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1555611159
    },
    {
        "content": "<p>Does this mean I can skip Q1 for tomorrow's ITP homework?</p>",
        "id": 163676018,
        "sender_full_name": "Koundinya Vajjha",
        "timestamp": 1555611224
    },
    {
        "content": "<p>no, there is a bug in your code</p>",
        "id": 163676502,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1555611572
    },
    {
        "content": "<p>the bug in lean is that it segfaults instead of just failing the tactic, but you called <code>revert</code> wrong</p>",
        "id": 163676584,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1555611609
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> Here's a MWE:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">do</span> <span class=\"n\">to_expr</span> <span class=\"bp\">```</span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">revert</span>\n</pre></div>\n\n\n<p>It looks like <code>local_context::find_local_decl</code> asserts that the input is a local constant rather than returning none like you might expect</p>",
        "id": 163676971,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1555611852
    },
    {
        "content": "<p>I'll have a look</p>",
        "id": 163677143,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1555611962
    },
    {
        "content": "<p>maybe <code>revert()</code> in <code>revert_tactic.cpp</code> should have a check in the for loop</p>",
        "id": 163677201,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1555611972
    },
    {
        "content": "<p>I think I have a fix</p>",
        "id": 163688946,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1555620167
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> can you review and merge please?</p>",
        "id": 163693166,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1555623684
    },
    {
        "content": "<p>Just ran into this in Lean community edition nightly. A consistent repro - start with this in an empty file:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">segfault</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">a&#39;</span><span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a&#39;</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a&#39;</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n  <span class=\"n\">revert</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>then change <code>revert a,</code> to <code>revert a a'</code>,</p>",
        "id": 168061695,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1560443707
    },
    {
        "content": "<p>I can reproduce this with 3.4.2 . It seems that it occurs the instant the file reads <code>revert a a</code>. If I paste <code>a'</code> instead of typing it then no crash occurs.  Similarly, I can easily type in <code>revert a' a</code> (though changing it to <code>revert a' a'</code> crashes).</p>\n<p>Curiously, I can't reproduce any of these crashes in the <a href=\"https://bryangingechen.github.io/lean/lean-web-editor/#code=universe%20u%0A%0Alemma%20segfault%20%7B%CE%B1%3A%20Type%20u%7D%20%7Ba%20a%27%3A%20%CE%B1%7D%20%28H%20%3A%20a%20%3D%20a%27%29%20%3A%20a%20%3D%20a%27%20%3A%3D%20begin%0A%20%20revert%20a%20a%2C%0Aend\" target=\"_blank\" title=\"https://bryangingechen.github.io/lean/lean-web-editor/#code=universe%20u%0A%0Alemma%20segfault%20%7B%CE%B1%3A%20Type%20u%7D%20%7Ba%20a%27%3A%20%CE%B1%7D%20%28H%20%3A%20a%20%3D%20a%27%29%20%3A%20a%20%3D%20a%27%20%3A%3D%20begin%0A%20%20revert%20a%20a%2C%0Aend\">web editor</a>. (This version uses community Lean).</p>",
        "id": 168065255,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1560446160
    },
    {
        "content": "<p>there is a bug in <code>revert_lst</code> in 3.4.2; this is fixed in community lean</p>",
        "id": 168072633,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1560450792
    },
    {
        "content": "<p>This happens in 3.5.0c too though.</p>",
        "id": 168072945,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1560451011
    },
    {
        "content": "<p>Yup, I can reproduce this on <code>nightly-2019-05-17</code>. Maybe it's fixed in newer nightlies?</p>",
        "id": 168073041,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1560451077
    },
    {
        "content": "<p>That's the most recent nightly.</p>",
        "id": 168073100,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1560451092
    },
    {
        "content": "<p>This has a separate instance where Lean segfaults.Is this fixed in community?<br>\n<a href=\"#narrow/stream/113488-general/topic/Lean.20crashing\" title=\"#narrow/stream/113488-general/topic/Lean.20crashing\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Lean.20crashing</a></p>",
        "id": 168076733,
        "sender_full_name": "Koundinya Vajjha",
        "timestamp": 1560453499
    },
    {
        "content": "<p>No, I don't think anyone has looked at it yet.</p>\n<p><strong>Edit</strong>: I opened <a href=\"https://github.com/leanprover-community/lean/issues/53\" target=\"_blank\" title=\"https://github.com/leanprover-community/lean/issues/53\">an issue for this</a>.</p>",
        "id": 168076756,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1560453527
    },
    {
        "content": "<p>In particular, the version of 3.5.0c I used in my last comment in that thread was also the most recent nightly.</p>",
        "id": 168076961,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1560453676
    }
]