[
    {
        "content": "<p>The following definition works as a <code>lemma</code> but not as a <code>def</code>. What's the problem?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">fintype</span> <span class=\"n\">group_theory</span><span class=\"bp\">.</span><span class=\"n\">order_of_element</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">enat</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">zmod</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"n\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n<span class=\"kn\">open</span> <span class=\"n\">equiv</span> <span class=\"n\">function</span> <span class=\"n\">fintype</span> <span class=\"n\">finset</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">perm</span>\n<span class=\"kn\">variable</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">list</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">list_to_cycle</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hl</span> <span class=\"o\">:</span> <span class=\"n\">l</span><span class=\"bp\">.</span><span class=\"n\">nodup</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">perm</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"k\">let</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">l</span> <span class=\"k\">then</span>\n      <span class=\"k\">let</span> <span class=\"n\">ll</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ+</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">l</span><span class=\"bp\">.</span><span class=\"n\">length</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">pos_of_ne_zero</span> <span class=\"err\">$</span> <span class=\"n\">mt</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">length_eq_zero</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n        <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">hl</span><span class=\"o\">,</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">not_mem_nil</span> <span class=\"n\">a</span> <span class=\"err\">$</span> <span class=\"n\">hl</span> <span class=\"bp\">▸</span> <span class=\"n\">h</span><span class=\"bp\">⟩</span> <span class=\"k\">in</span>\n      <span class=\"n\">l</span><span class=\"bp\">.</span><span class=\"n\">nth_le</span> <span class=\"o\">(</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">index_of</span> <span class=\"n\">a</span> <span class=\"n\">l</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"n\">ll</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">index_of</span> <span class=\"n\">a</span> <span class=\"n\">l</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"n\">ll</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span>\n    <span class=\"k\">else</span> <span class=\"n\">a</span> <span class=\"k\">in</span>\n<span class=\"k\">have</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">,</span> <span class=\"n\">left_inverse</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">n</span><span class=\"o\">)),</span>\n  <span class=\"k\">from</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">l</span>\n    <span class=\"k\">then</span>\n    <span class=\"k\">let</span> <span class=\"n\">ll</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ+</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">l</span><span class=\"bp\">.</span><span class=\"n\">length</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">pos_of_ne_zero</span> <span class=\"err\">$</span> <span class=\"n\">mt</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">length_eq_zero</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n        <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">hl</span><span class=\"o\">,</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">not_mem_nil</span> <span class=\"n\">a</span> <span class=\"err\">$</span> <span class=\"n\">hl</span> <span class=\"bp\">▸</span> <span class=\"n\">h</span><span class=\"bp\">⟩</span> <span class=\"k\">in</span>\n    <span class=\"k\">begin</span>\n      <span class=\"n\">suffices</span> <span class=\"o\">:</span> <span class=\"n\">nth_le</span> <span class=\"n\">l</span> <span class=\"o\">((</span><span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">index_of</span> <span class=\"n\">a</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"n\">ll</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">nth_le_mem</span><span class=\"o\">,</span> <span class=\"n\">nth_le_index_of</span> <span class=\"n\">hl</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">conv</span> <span class=\"o\">{</span> <span class=\"n\">to_rhs</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">index_of_nth_le</span> <span class=\"o\">(</span><span class=\"n\">index_of_lt_length</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">h</span><span class=\"o\">)},</span>\n        <span class=\"n\">congr</span><span class=\"o\">,</span>\n        <span class=\"n\">erw</span> <span class=\"o\">[</span><span class=\"n\">zmod</span><span class=\"bp\">.</span><span class=\"n\">val_cast_nat</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">mod_eq_of_lt</span> <span class=\"o\">(</span><span class=\"n\">index_of_lt_length</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">h</span><span class=\"o\">)]</span> <span class=\"o\">},</span>\n    <span class=\"kn\">end</span>\n    <span class=\"k\">else</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">],</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">),</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"n\">this</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">),</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"n\">this</span> <span class=\"mi\">1</span> <span class=\"o\">}</span>\n</pre></div>",
        "id": 157801945,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1549565322
    },
    {
        "content": "<p>What do you get as an error message?</p>",
        "id": 157802567,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1549565761
    },
    {
        "content": "<p><code>type mismatch at definition 'equiv.perm.list_to_cycle._proof_3', has type\n  ∀ {α : Type u} [_inst_1 : decidable_eq α] (l : list α),\n    (ℤ → α → α) →\n    (∀ (n : ℤ),\n       left_inverse\n         ((λ (n : ℤ) (a : α),\n             dite (a ∈ l)\n               (λ (h : a ∈ l),\n                  let ll : ℕ+ := ⟨length l, list_to_cycle._proof_1 α l a h⟩\n                  in nth_le l ((↑(index_of a l) + ↑n).val) (list_to_cycle._proof_2 α _inst_1 l n a h))\n               (λ (h : a ∉ l), a))\n            n)\n         ((λ (n : ℤ) (a : α),\n             dite (a ∈ l)\n               (λ (h : a ∈ l),\n                  let ll : ℕ+ := ⟨length l, list_to_cycle._proof_1 α l a h⟩\n                  in nth_le l ((↑(index_of a l) + ↑n).val) (list_to_cycle._proof_2 α _inst_1 l n a h))\n               (λ (h : a ∉ l), a))\n            (-n))) →\n    left_inverse\n      ((λ (n : ℤ) (a : α),\n          dite (a ∈ l)\n            (λ (h : a ∈ l),\n               let ll : ℕ+ := ⟨length l, list_to_cycle._proof_1 α l a h⟩\n               in nth_le l ((↑(index_of a l) + ↑n).val) (list_to_cycle._proof_2 α _inst_1 l n a h))\n            (λ (h : a ∉ l), a))\n         (-1))\n      ((λ (n : ℤ) (a : α),\n          dite (a ∈ l)\n            (λ (h : a ∈ l),\n               let ll : ℕ+ := ⟨length l, list_to_cycle._proof_1 α l a h⟩\n               in nth_le l ((↑(index_of a l) + ↑n).val) (list_to_cycle._proof_2 α _inst_1 l n a h))\n            (λ (h : a ∉ l), a))\n         (- -1))\nbut is expected to have type\n  ∀ {α : Type u} [_inst_1 : decidable_eq α] (l : list α) (f : ℤ → α → α),\n    (∀ (n : ℤ),\n       left_inverse\n         ((λ (n : ℤ) (a : α),\n             dite (a ∈ l)\n               (λ (h : a ∈ l),\n                  let ll : ℕ+ := ⟨length l, list_to_cycle._proof_1 α l a h⟩\n                  in nth_le l ((↑(index_of a l) + ↑n).val) (list_to_cycle._proof_2 α _inst_1 l n a h))\n               (λ (h : a ∉ l), a))\n            n)\n         ((λ (n : ℤ) (a : α),\n             dite (a ∈ l)\n               (λ (h : a ∈ l),\n                  let ll : ℕ+ := ⟨length l, list_to_cycle._proof_1 α l a h⟩\n                  in nth_le l ((↑(index_of a l) + ↑n).val) (list_to_cycle._proof_2 α _inst_1 l n a h))\n               (λ (h : a ∉ l), a))\n            (-n))) →\n    left_inverse (f (-1)) (f (- -1))</code></p>",
        "id": 157803795,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1549566619
    },
    {
        "content": "<p>That's probably a bug in the equation compiler. <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span>, what do you think?</p>",
        "id": 157806310,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1549568402
    },
    {
        "content": "<p>looks like a problem with the <code>let</code>, although <code>set_option eqn_compiler.zeta true</code> doesn't seem to help. I suggest making the function <code>f</code> an auxiliary definition</p>",
        "id": 157808258,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549569687
    }
]