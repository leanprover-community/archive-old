[
    {
        "content": "<p>I'm using VSCode on Windows and sometimes after I open the source code of some dependencies somehow Lean thinks I've changed the source code and has to recompile everything. I remember Mario explained it before, but I forgot the explanation.</p>",
        "id": 193068319,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586191262
    },
    {
        "content": "<p>Maybe can we set up an FAQ or something?</p>",
        "id": 193068336,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586191277
    },
    {
        "content": "<p>This also happens to me sometimes (also on windows). In this case, I quit Vscode and restart it, and everything is back to normal.</p>",
        "id": 193069768,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1586191925
    },
    {
        "content": "<p>I feel like this is stopping me from peeking into definitions and printing definitions</p>",
        "id": 198577489,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590317057
    },
    {
        "content": "<p>Every time I have to do one of those, I need to <del>sell my soul to the devil</del> restart the Lean server</p>",
        "id": 198577493,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590317080
    },
    {
        "content": "<p>This is very annoying.</p>",
        "id": 198577505,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590317146
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128280\">@Wojciech Nawrocki</span> <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> any idea what might be going on or how to debug this?</p>",
        "id": 198578382,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1590318707
    },
    {
        "content": "<p>I'm trying to reproduce this now but I'm on Linux and it doesn't seem to happen. I was hoping that we'd handled the Windows differences by stripping the CR from CRLF line endings but there might be something else. Could you give me an example mathlib file that causes the recompilation when opened?</p>",
        "id": 198583130,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1590326403
    },
    {
        "content": "<p>Okay, I think I can see the problem. Steps to reproduce:</p>\n<ol>\n<li>Restart Lean</li>\n<li>Open a file <code>foo.lean</code> which imports <code>bar.lean</code></li>\n<li>Make a change to <code>foo.lean</code>. Lean only recompiles the changed function</li>\n<li>Now open <code>bar.lean</code> via Vscode goto definition</li>\n<li>Make the same change to <code>foo.lean</code>. Lean recompiles the whole file now?!</li>\n</ol>\n<p>I can see this on Linux, and I checked that the Windows CRLF clearing works fine, so most likely it's not Windows-specific</p>",
        "id": 198590972,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1590339301
    },
    {
        "content": "<p>I get this sometimes on Linux and you're describing my usual workflow</p>",
        "id": 198591119,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590339534
    },
    {
        "content": "<p>I'm forever hopping to other files to read definitions of things, I find mathlib easier to read than hovering over a definition when doing algebra, because the hover gives you ten definitions of things which are rings and modules and algebras and implicit</p>",
        "id": 198591177,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590339610
    },
    {
        "content": "<p>Maybe it's a bug in the VSCode extension or VSCode is updating silently the times/contents of the file :/</p>",
        "id": 198591204,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590339693
    },
    {
        "content": "<p>I think it's more likely a bug in the server's invalidation logic. There's some code to explicitly prevent rebuilding reverse dependencies of newly opened files if the on-disk contents are the same but it doesn't seem to always work</p>",
        "id": 198591341,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1590339901
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"128280\">Wojciech Nawrocki</span> <a href=\"#narrow/stream/113488-general/topic/random.20recompiling/near/198591341\">said</a>:</p>\n<blockquote>\n<p>I think it's more likely a bug in the server's invalidation logic. There's some code to explicitly prevent rebuilding reverse dependencies of newly opened files if the on-disk contents are the same but it doesn't seem to always work</p>\n</blockquote>\n<p>In that case, can you reproduce it <em>without</em> VSCode?</p>",
        "id": 198591645,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590340337
    },
    {
        "content": "<p>It should be possible but really annoying, since you'd have to manually start a Lean server and send a bunch of JSON sync commands to it</p>",
        "id": 198591745,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1590340518
    },
    {
        "content": "<p>There is the new python library for doing that</p>",
        "id": 198591807,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590340626
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"128280\">Wojciech Nawrocki</span> <a href=\"#narrow/stream/113488-general/topic/random.20recompiling/near/198591745\">said</a>:</p>\n<blockquote>\n<p>It should be possible but really annoying, since you'd have to manually start a Lean server and send a bunch of JSON sync commands to it</p>\n</blockquote>\n<p>Isn't a simple way to just do monitor of <em>one</em> file and recompile smartly so that we can see if it's indeed the Lean server which is doing some improper cache invalidation, or VSCode</p>",
        "id": 198591811,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1590340648
    },
    {
        "content": "<p>Maybe trying to reproduce it in emacs is easier.</p>",
        "id": 198591962,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1590340837
    },
    {
        "content": "<p>I haven't been able to reproduce this yet, but I'm on macOS and maybe I'm not doing it right. </p>\n<p>Here are the contents of my <code>bar.lean</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">blah</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"n\">trivial</span>\n</code></pre></div>\n\n\n<p>Here are the contents of my <code>foo.lean</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">system</span><span class=\"bp\">.</span><span class=\"n\">io</span>\n<span class=\"kn\">import</span> <span class=\"n\">bar</span>\n\n<span class=\"n\">run_cmd</span> <span class=\"n\">do</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">unsafe_run_io</span> <span class=\"o\">(</span><span class=\"n\">io</span><span class=\"bp\">.</span><span class=\"n\">proc</span><span class=\"bp\">.</span><span class=\"n\">sleep</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span>\n\n<span class=\"n\">run_cmd</span> <span class=\"n\">do</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">unsafe_run_io</span> <span class=\"o\">(</span><span class=\"n\">io</span><span class=\"bp\">.</span><span class=\"n\">proc</span><span class=\"bp\">.</span><span class=\"n\">sleep</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span>\n\n<span class=\"n\">run_cmd</span> <span class=\"n\">do</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">unsafe_run_io</span> <span class=\"o\">(</span><span class=\"n\">io</span><span class=\"bp\">.</span><span class=\"n\">proc</span><span class=\"bp\">.</span><span class=\"n\">sleep</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span>\n\n<span class=\"n\">run_cmd</span> <span class=\"n\">do</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">unsafe_run_io</span> <span class=\"o\">(</span><span class=\"n\">io</span><span class=\"bp\">.</span><span class=\"n\">proc</span><span class=\"bp\">.</span><span class=\"n\">sleep</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span>\n\n<span class=\"n\">run_cmd</span> <span class=\"n\">do</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">unsafe_run_io</span> <span class=\"o\">(</span><span class=\"n\">io</span><span class=\"bp\">.</span><span class=\"n\">proc</span><span class=\"bp\">.</span><span class=\"n\">sleep</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span>\n\n<span class=\"n\">run_cmd</span> <span class=\"n\">do</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">unsafe_run_io</span> <span class=\"o\">(</span><span class=\"n\">io</span><span class=\"bp\">.</span><span class=\"n\">proc</span><span class=\"bp\">.</span><span class=\"n\">sleep</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span>\n\n<span class=\"n\">run_cmd</span> <span class=\"n\">do</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">unsafe_run_io</span> <span class=\"o\">(</span><span class=\"n\">io</span><span class=\"bp\">.</span><span class=\"n\">proc</span><span class=\"bp\">.</span><span class=\"n\">sleep</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span>\n\n<span class=\"n\">run_cmd</span> <span class=\"n\">do</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">unsafe_run_io</span> <span class=\"o\">(</span><span class=\"n\">io</span><span class=\"bp\">.</span><span class=\"n\">proc</span><span class=\"bp\">.</span><span class=\"n\">sleep</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span>\n\n<span class=\"n\">run_cmd</span> <span class=\"n\">do</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">unsafe_run_io</span> <span class=\"o\">(</span><span class=\"n\">io</span><span class=\"bp\">.</span><span class=\"n\">proc</span><span class=\"bp\">.</span><span class=\"n\">sleep</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> comment to prevent crash from https://github.com/leanprover-community/lean/issues/85 -/</span>\n</code></pre></div>\n\n\n<p>All of the following is done with VS Code and Lean 3.14.0.</p>\n<p>First, I restart Lean and open <code>foo.lean</code>. The whole file recompiles, which takes 10 seconds or so. Then I add a comment near the 3rd to last <code>run_cmd</code>. The entire file recompiles when I make my first edit, but if I make more edits, the orange bars only appear below where I edit.</p>\n<p>Next, I right click on <code>import bar</code> and go to definition so that <code>bar.lean</code> appears. Without making any changes to <code>bar.lean</code>, I return to <code>foo.lean</code>. Then I add a comment again near the bottom of the file. I haven't been seeing the entirety of <code>foo.lean</code> recompiling here -- the orange bars still only appear below where I edit. Same behavior if I keep making more edits.</p>",
        "id": 198593264,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1590343227
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span> I <em>can</em> reproduce it with just these two files (in vscode, on linux). On the other hand, this part</p>\n<blockquote>\n<p>The entire file recompiles when I make my first edit</p>\n</blockquote>\n<p>is not true for me</p>",
        "id": 198593795,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1590344239
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128280\">@Wojciech Nawrocki</span> I just tested the pair of files on Windows and while <code>foo.lean</code> doesn't fully recompile when I make my first edit, I also don't see it fully recompile after I switch back and forth from <code>bar.lean</code>. Very puzzling...</p>",
        "id": 198595910,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1590347839
    },
    {
        "content": "<p>Just skimming over this issue and the PR.  This seems kind of expected.  We only store one copy of a module, either from olean or from source.  (This is pretty important to keep memory usage down.)  So when you open a dependency, lean will load the file from source.  The problem should begin when you get back to the original file and make a change there, then it will wait for the olean of the dependency to be ready.</p>",
        "id": 198662976,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1590409745
    },
    {
        "content": "<p>Suppose I open A and B in my editor (emacs if it matters) where B imports A. I edit the buffer of A, but don't save it. If I now switch to B, will lean use my modifications to A (and therefore recompile possibly a lot of things)?</p>",
        "id": 198664815,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590410897
    },
    {
        "content": "<p>I imagined I could avoid this by not saving A, but maybe this was a bad assumption.</p>",
        "id": 198664839,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590410914
    },
    {
        "content": "<p>Yes, you don't even need to save A!</p>",
        "id": 198664925,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1590410980
    },
    {
        "content": "<p>Good to know. I should try out this <code>--old</code> flag then.</p>",
        "id": 198664951,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590410995
    },
    {
        "content": "<p>However, because of the switch to using hashes for recompilation detection, I should be able to undo my changes to A and then lean will switch back to using the oleans, right?</p>",
        "id": 198665063,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590411048
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> Afaik in this scenario, if you want to have A open and things like tactic/goal states visible, Lean has to compile A from source. This is because the .oleans do not store this information. If you then make a change to the A buffer (even without saving), Lean will recompile the file and overwrite the environment stored in-memory. Undoing the change cannot just pull the old information from the olean since it's not there, so Lean has to recompile again.</p>",
        "id": 198668808,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1590413313
    },
    {
        "content": "<p>The above behaviour is fine in my view. What's not fine is that the act of simply opening the source corresponding to an already-loaded .olean forces a recompilation of the environment for that module and also all its reverse dependencies.</p>",
        "id": 198668919,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1590413391
    },
    {
        "content": "<p>have we fixed this yet?</p>",
        "id": 198895091,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590588356
    },
    {
        "content": "<p>\"Works as expected.\"  The behavior hasn't changed in the meantime.</p>",
        "id": 198895875,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1590588669
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> if I open a file in NotePad++ would the same problem occur?</p>",
        "id": 198940585,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590607819
    },
    {
        "content": "<p>No, there is no lean server integration in notepad++.</p>",
        "id": 198941063,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1590607984
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> then is it possible to have a new button that says \"peek this definition in notepad++ mode\"?</p>",
        "id": 198945232,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590609785
    },
    {
        "content": "<p>also why does <code>#print</code> trigger recompilation as well?</p>",
        "id": 198945419,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590609857
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> Does the <code>--old</code> option help?</p>",
        "id": 198945477,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590609885
    },
    {
        "content": "<p>how does that work?</p>",
        "id": 198945562,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590609918
    },
    {
        "content": "<p>I haven't used it yet, but it should use old oleans, even if files \"changed\"</p>",
        "id": 198945606,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590609936
    },
    {
        "content": "<p>how do I use it?</p>",
        "id": 198945684,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590609962
    },
    {
        "content": "<p><a href=\"#narrow/stream/113488-general/topic/Using.20out-of-date.20oleans.20without.20recompiling/near/197963331\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Using.20out-of-date.20oleans.20without.20recompiling/near/197963331</a></p>",
        "id": 198945730,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590609986
    },
    {
        "content": "<p>Unfortunately <code>--old</code> doesn't fix the issue in this thread though.</p>",
        "id": 198945737,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1590609993
    }
]