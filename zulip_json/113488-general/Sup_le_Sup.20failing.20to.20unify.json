[
    {
        "content": "<p>When I type</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">set_theory.ordinal.topology</span>\n<span class=\"kn\">import</span> <span class=\"n\">set_theory.cardinal.cofinality</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ordinal.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">⊆</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Sup</span> <span class=\"n\">A</span> <span class=\"bp\">≤</span> <span class=\"n\">Sup</span> <span class=\"n\">B</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Sup_le_Sup</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Lean complains to me with the error message</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"n\">apply</span> <span class=\"n\">tactic</span><span class=\"o\">,</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">unify</span>\n  <span class=\"n\">Sup</span> <span class=\"n\">A</span> <span class=\"bp\">≤</span> <span class=\"n\">Sup</span> <span class=\"n\">B</span>\n<span class=\"k\">with</span>\n  <span class=\"n\">Sup</span> <span class=\"bp\">?</span><span class=\"n\">m_3</span> <span class=\"bp\">≤</span> <span class=\"n\">Sup</span> <span class=\"bp\">?</span><span class=\"n\">m_4</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ordinal</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">⊆</span> <span class=\"n\">B</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">Sup</span> <span class=\"n\">A</span> <span class=\"bp\">≤</span> <span class=\"n\">Sup</span> <span class=\"n\">B</span>\n</code></pre></div>\n<p>which really seems like it <em>should</em> be fine. Anyone have any idea what's going on?</p>",
        "id": 312413672,
        "sender_full_name": "Connor Gordon",
        "timestamp": 1669512265
    },
    {
        "content": "<p>When this happens a good debug strategy is to pass the arguments explicitly, as <code>@Sup_le_Sup _ _ A B</code></p>",
        "id": 312419070,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1669518060
    },
    {
        "content": "<p>Doing that gives me this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"kd\">class</span> <span class=\"kd\">instance</span> <span class=\"n\">for</span>\n<span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ordinal</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">⊆</span> <span class=\"n\">B</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">complete_semilattice_Sup</span> <span class=\"n\">ordinal</span>\n</code></pre></div>\n<p>Unfortunately, not really sure what this means, either. Any ideas?</p>",
        "id": 312420984,
        "sender_full_name": "Connor Gordon",
        "timestamp": 1669520219
    },
    {
        "content": "<p>I don't think <code>ordinal</code> has (or even <em>can</em> have) an instance of this type class because there is no <code>\\top</code> element for ordinals. So it seems like it's impossible to apply this particular lemma.</p>",
        "id": 312423320,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1669522888
    },
    {
        "content": "<p>However, there is this: <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ordinal.conditionally_complete_linear_order_bot\">docs#ordinal.conditionally_complete_linear_order_bot</a>, so you should be able to apply lemmas about conditionally complete lattices (or linear orders)</p>",
        "id": 312423407,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1669522987
    },
    {
        "content": "<p>E.g. <a href=\"https://leanprover-community.github.io/mathlib_docs/find/cSup_le_cSup\">docs#cSup_le_cSup</a></p>",
        "id": 312423439,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1669523037
    },
    {
        "content": "<p>Ah, that would do it! All that remains now is to verify that my sets are bounded above (which they are, because they're sets of ordinals). Does anyone know if there's a simple way to show that (ideally something already in the library?)</p>",
        "id": 312425644,
        "sender_full_name": "Connor Gordon",
        "timestamp": 1669525339
    },
    {
        "content": "<p>My point is <code>set.univ : set ordinal.{u}</code> is <em>not</em> bounded above. So not all sets of ordinals are bounded above.</p>",
        "id": 312425815,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1669525456
    },
    {
        "content": "<p>But that's not a set; it's a proper class. Unless Lean does not mean what I think it does when it says set.</p>",
        "id": 312426036,
        "sender_full_name": "Connor Gordon",
        "timestamp": 1669525606
    },
    {
        "content": "<p>oh wait, that's the difference between <code>set</code> and a ZFC <code>Set</code>, isn't it? Any <code>Set</code> of ordinals is bounded above, but a <code>set</code> of ordinals is not necessarily?</p>",
        "id": 312426291,
        "sender_full_name": "Connor Gordon",
        "timestamp": 1669525825
    },
    {
        "content": "<p>It's not too important for my purposes; I just wanted to take the easy way out rather than actually prove something is bounded above. I can do it, though.</p>",
        "id": 312426306,
        "sender_full_name": "Connor Gordon",
        "timestamp": 1669525854
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/Set\">docs#Set</a> is for building a model of ZFC in Lean's type theory to show (one direction) of their equiconsistency (caveat: needs inaccessible cardinals for the other direction). It's not designed for doing normal mathematics.</p>",
        "id": 312426522,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1669526144
    },
    {
        "content": "<p>Notice that <code>ordinal.{u}</code> is in the universe <code>Type (u+1)</code> so <code>set ordinal.{u}</code> is also in that universe, whereas if you have a type <code>T : Type u</code> then <code>set T : Type u</code> as well.</p>",
        "id": 312426601,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1669526257
    },
    {
        "content": "<p>Notice also that a set is definitionally the same as a predicate, so yes it may specify what you would consider proper classes, as well as sets.</p>",
        "id": 312426749,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1669526380
    },
    {
        "content": "<p>If your <code>set ordinal.{u}</code> is indexed by some type in <code>Type u</code>, then you may use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ordinal.sup\">docs#ordinal.sup</a> to get well-behaved supremum.</p>",
        "id": 312427117,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1669526719
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/ordinal.sup\">docs#ordinal.sup</a> is just an alias for <a href=\"https://leanprover-community.github.io/mathlib_docs/find/supr\">docs#supr</a></p>",
        "id": 312440951,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1669539793
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/113488-general/topic/Sup_le_Sup.20failing.20to.20unify/near/312425815\">said</a>:</p>\n<blockquote>\n<p>My point is <code>set.univ : set ordinal.{u}</code> is <em>not</em> bounded above. So not all sets of ordinals are bounded above.</p>\n</blockquote>\n<p>Well, it's not <code>bdd_above</code>, but whether it's bounded above in mathematical sense is debatable. Lean's definition of upper bound is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">upper_bounds</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">a</span><span class=\"o\">⦄,</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>If we regard types as sets and Sort universes as Grothendieck universes, then <code>set.univ : set ordinal.{u}</code> is bounded above, because there are bigger ordinals that are not in <code>Type (u+1)</code> and the definition of <code>upper_bounds</code> is constrained just to type <code>ordinal.{u}</code> and hence incomplete. Type theory cannot accurately represent that a set is \"bounded above\".</p>",
        "id": 312469724,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1669555731
    },
    {
        "content": "<p>Sure, I was explaining why these lemmas can't be used.</p>",
        "id": 312473219,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1669557365
    }
]