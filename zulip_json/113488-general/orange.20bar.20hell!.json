[
    {
        "content": "<p>why on earth does this take an eternity to typecheck <span aria-label=\"cry\" class=\"emoji emoji-1f622\" role=\"img\" title=\"cry\">:cry:</span></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">word_size_t</span>\n<span class=\"bp\">|</span> <span class=\"n\">char</span>\n<span class=\"bp\">|</span> <span class=\"n\">i32</span>\n<span class=\"bp\">|</span> <span class=\"n\">i64</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">get_left_bound</span> <span class=\"o\">:</span> <span class=\"n\">word_size_t</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span>\n<span class=\"bp\">|</span> <span class=\"n\">word_size_t.char</span> <span class=\"o\">:=</span> <span class=\"bp\">-</span><span class=\"mi\">128</span>\n<span class=\"bp\">|</span> <span class=\"n\">word_size_t.i32</span> <span class=\"o\">:=</span> <span class=\"bp\">-</span><span class=\"mi\">2147483648</span>\n<span class=\"bp\">|</span> <span class=\"n\">word_size_t.i64</span> <span class=\"o\">:=</span> <span class=\"bp\">-</span><span class=\"mi\">9223372036854775808</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">get_right_bound</span> <span class=\"o\">:</span> <span class=\"n\">word_size_t</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span>\n<span class=\"bp\">|</span> <span class=\"n\">word_size_t.char</span> <span class=\"o\">:=</span> <span class=\"mi\">128</span>\n<span class=\"bp\">|</span> <span class=\"n\">word_size_t.i32</span> <span class=\"o\">:=</span> <span class=\"mi\">2147483648</span>\n<span class=\"bp\">|</span> <span class=\"n\">word_size_t.i64</span> <span class=\"o\">:=</span> <span class=\"mi\">9223372036854775808</span>\n\n<span class=\"kd\">@[derive decidable_pred]</span> <span class=\"kd\">def</span> <span class=\"n\">within_bounds</span> <span class=\"o\">(</span><span class=\"n\">word_size</span> <span class=\"o\">:</span> <span class=\"n\">word_size_t</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">get_left_bound</span> <span class=\"n\">word_size</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">get_right_bound</span> <span class=\"n\">word_size</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">x_le_sum</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">lb</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span> <span class=\"bp\">→</span> <span class=\"n\">lb</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">l.length</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">lb</span> <span class=\"bp\">≤</span> <span class=\"n\">l.sum</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">l</span><span class=\"o\">,</span>\n  <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n  <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">add_mul</span><span class=\"o\">,</span>\n  <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">l_ih</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">h'</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">this</span> <span class=\"o\">(</span><span class=\"n\">list.mem_cons_of_mem</span> <span class=\"n\">l_hd</span> <span class=\"n\">y</span><span class=\"o\">),</span>\n    <span class=\"n\">assumption</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">int.add_le_add</span> <span class=\"n\">this</span> <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"n\">l_hd</span> <span class=\"o\">(</span><span class=\"n\">list.mem_cons_self</span> <span class=\"n\">l_hd</span> <span class=\"n\">l_tl</span><span class=\"o\">)),</span>\n  <span class=\"n\">clear_except</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">conv</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">to_rhs</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">add_comm</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">assumption</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">sum_le_x</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ub</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">ub</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">l.sum</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">l.length</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">ub</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">l</span><span class=\"o\">,</span>\n  <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n  <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">add_mul</span><span class=\"o\">,</span>\n  <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">l_ih</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">h'</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">this</span> <span class=\"o\">(</span><span class=\"n\">list.mem_cons_of_mem</span> <span class=\"n\">l_hd</span> <span class=\"n\">y</span><span class=\"o\">),</span>\n    <span class=\"n\">assumption</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">int.add_le_add</span> <span class=\"n\">this</span> <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"n\">l_hd</span> <span class=\"o\">(</span><span class=\"n\">list.mem_cons_self</span> <span class=\"n\">l_hd</span> <span class=\"n\">l_tl</span><span class=\"o\">)),</span>\n  <span class=\"n\">clear_except</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">conv</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">to_lhs</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">add_comm</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">assumption</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">split2</span> <span class=\"o\">(</span><span class=\"n\">input</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">output</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">input</span> <span class=\"bp\">→</span> <span class=\"bp\">-</span><span class=\"mi\">20</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"mi\">20</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">input.length</span> <span class=\"bp\">≤</span> <span class=\"mi\">30</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">),</span>\n    <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"o\">[</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">input.length</span><span class=\"o\">),</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">input.length</span><span class=\"o\">),</span> <span class=\"n\">input.sum</span><span class=\"o\">]</span> <span class=\"bp\">++</span> <span class=\"n\">input</span> <span class=\"bp\">→</span>\n    <span class=\"n\">within_bounds</span> <span class=\"n\">word_size_t.i32</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">list.mem_append.mp</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">clear_except</span> <span class=\"n\">this</span> <span class=\"n\">h</span> <span class=\"n\">h'</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">clear_except</span> <span class=\"n\">h'</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">get_right_bound</span><span class=\"o\">,</span> <span class=\"n\">get_left_bound</span><span class=\"o\">,</span> <span class=\"n\">within_bounds</span><span class=\"o\">],</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">clear_except</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">int.coe_zero_le</span> <span class=\"n\">input.length</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">a'</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">2147483648</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">le_trans</span> <span class=\"n\">a'</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">int.coe_nat_le.mpr</span> <span class=\"n\">h'</span><span class=\"o\">,</span>\n    <span class=\"n\">clear_except</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"n\">norm_num</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">a'</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">30</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2147483648</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">gt_of_gt_of_ge</span> <span class=\"n\">a'</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"n\">cases</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">clear_except</span> <span class=\"n\">h'</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">get_right_bound</span><span class=\"o\">,</span> <span class=\"n\">get_left_bound</span><span class=\"o\">,</span> <span class=\"n\">within_bounds</span><span class=\"o\">],</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">clear_except</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">int.coe_zero_le</span> <span class=\"n\">input.length</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">a'</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">2147483648</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">le_trans</span> <span class=\"n\">a'</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">int.coe_nat_le.mpr</span> <span class=\"n\">h'</span><span class=\"o\">,</span>\n    <span class=\"n\">clear_except</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"n\">norm_num</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">a'</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">30</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2147483648</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">gt_of_gt_of_ge</span> <span class=\"n\">a'</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"n\">cases</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">clear_except</span> <span class=\"n\">h</span> <span class=\"n\">h'</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">get_right_bound</span><span class=\"o\">,</span> <span class=\"n\">get_left_bound</span><span class=\"o\">,</span> <span class=\"n\">within_bounds</span><span class=\"o\">],</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">a1</span> <span class=\"o\">:=</span> <span class=\"n\">x_le_sum</span> <span class=\"n\">input</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">20</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">left</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">a2</span> <span class=\"o\">:</span> <span class=\"bp\">-</span><span class=\"mi\">600</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">input.length</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">20</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">clear_except</span> <span class=\"n\">h'</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">mul_le_mul_left_of_neg</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">20</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">),</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">clear_except</span><span class=\"o\">,</span> <span class=\"n\">norm_num</span><span class=\"o\">,</span> <span class=\"o\">}))</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"o\">(</span><span class=\"n\">int.coe_nat_le.mpr</span> <span class=\"n\">h'</span><span class=\"o\">),</span>\n    <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">20</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"mi\">30</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"mi\">600</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">mul_comm</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">a3</span> <span class=\"o\">:</span> <span class=\"bp\">-</span><span class=\"mi\">600</span> <span class=\"bp\">≤</span> <span class=\"n\">input.sum</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">clear_except</span> <span class=\"n\">a1</span> <span class=\"n\">a2</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">le_trans</span> <span class=\"n\">a2</span> <span class=\"n\">a1</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">clear_except</span> <span class=\"n\">a3</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"k\">have</span> <span class=\"n\">a'</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">2147483648</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"bp\">-</span><span class=\"mi\">600</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">le_trans</span> <span class=\"n\">a'</span> <span class=\"n\">a3</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">a1</span> <span class=\"o\">:=</span> <span class=\"n\">sum_le_x</span> <span class=\"n\">input</span> <span class=\"mi\">20</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">right</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">a2</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">input.length</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">20</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"mi\">600</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">clear_except</span> <span class=\"n\">h'</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">mul_le_mul</span> <span class=\"n\">ℤ</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">input.length</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"mi\">20</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"mi\">30</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"mi\">20</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"kd\">begin</span>\n      <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">int.coe_nat_le.mpr</span> <span class=\"n\">h'</span><span class=\"o\">,</span>\n      <span class=\"n\">assumption</span><span class=\"o\">,</span>\n    <span class=\"kd\">end</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">),</span>\n    <span class=\"n\">norm_num</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"n\">assumption</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">input.sum</span> <span class=\"bp\">≤</span> <span class=\"mi\">600</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">clear_except</span> <span class=\"n\">a1</span> <span class=\"n\">a2</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">le_trans</span> <span class=\"n\">a1</span> <span class=\"n\">a2</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">clear_except</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"k\">have</span> <span class=\"n\">a'</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">600</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2147483648</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">clear_except</span><span class=\"o\">,</span> <span class=\"n\">norm_num</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"n\">exact</span> <span class=\"n\">gt_of_gt_of_ge</span> <span class=\"n\">a'</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"n\">clear_except</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">exfalso</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">list.not_mem_nil</span> <span class=\"n\">x</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">assumption</span><span class=\"o\">,</span>\n  <span class=\"n\">clear_except</span> <span class=\"n\">h</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"n\">x</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">clear_except</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">get_right_bound</span><span class=\"o\">,</span> <span class=\"n\">get_left_bound</span><span class=\"o\">,</span> <span class=\"n\">within_bounds</span><span class=\"o\">],</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">this.left</span><span class=\"o\">,</span>\n  <span class=\"n\">clear_except</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"k\">have</span> <span class=\"n\">a'</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">2147483648</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"bp\">-</span><span class=\"mi\">20</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">clear_except</span><span class=\"o\">,</span> <span class=\"n\">norm_num</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"n\">exact</span> <span class=\"n\">le_trans</span> <span class=\"n\">a'</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">this.right</span><span class=\"o\">,</span>\n  <span class=\"n\">clear_except</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">a'</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">20</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2147483648</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">clear_except</span><span class=\"o\">,</span> <span class=\"n\">norm_num</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"n\">exact</span> <span class=\"n\">gt_of_gt_of_ge</span> <span class=\"n\">a'</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 262929724,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1638107255
    },
    {
        "content": "<p>what might be causing this issue? this time i didn't use linarith... and i'm pretty sure that i'm not using slow tactics... so why on earth is this proof so slow lol</p>",
        "id": 262929785,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1638107332
    },
    {
        "content": "<p>Do you know exactly where the bottleneck is?</p>",
        "id": 262929861,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1638107407
    },
    {
        "content": "<p>You can add <code>set_option profiler true</code> and then use <code>sorry; { blah }</code> to comment out parts of the proof and see where the slow point is</p>",
        "id": 262929871,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1638107429
    },
    {
        "content": "<p>oh... this is so bizarre... i commented out most of the proof and it still takes forever to typecheck...</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">split2</span> <span class=\"o\">(</span><span class=\"n\">input</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">output</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">input</span> <span class=\"bp\">→</span> <span class=\"bp\">-</span><span class=\"mi\">20</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"mi\">20</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">input.length</span> <span class=\"bp\">≤</span> <span class=\"mi\">30</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">),</span>\n    <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"o\">[</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">input.length</span><span class=\"o\">),</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">input.length</span><span class=\"o\">),</span> <span class=\"n\">input.sum</span><span class=\"o\">]</span> <span class=\"bp\">++</span> <span class=\"n\">input</span> <span class=\"bp\">→</span>\n    <span class=\"n\">within_bounds</span> <span class=\"n\">word_size_t.i32</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">list.mem_append.mp</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">clear_except</span> <span class=\"n\">this</span> <span class=\"n\">h</span> <span class=\"n\">h'</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">clear_except</span> <span class=\"n\">h'</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">get_right_bound</span><span class=\"o\">,</span> <span class=\"n\">get_left_bound</span><span class=\"o\">,</span> <span class=\"n\">within_bounds</span><span class=\"o\">],</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">clear_except</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">int.coe_zero_le</span> <span class=\"n\">input.length</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">a'</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">2147483648</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">le_trans</span> <span class=\"n\">a'</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">int.coe_nat_le.mpr</span> <span class=\"n\">h'</span><span class=\"o\">,</span>\n    <span class=\"n\">clear_except</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"n\">norm_num</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">a'</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">30</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2147483648</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">gt_of_gt_of_ge</span> <span class=\"n\">a'</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- cases this,</span>\n  <span class=\"c1\">-- rw this,</span>\n  <span class=\"c1\">-- clear_except h',</span>\n  <span class=\"c1\">-- simp only [get_right_bound, get_left_bound, within_bounds],</span>\n  <span class=\"c1\">-- split,</span>\n  <span class=\"c1\">-- {</span>\n  <span class=\"c1\">--   clear_except,</span>\n  <span class=\"c1\">--   have := int.coe_zero_le input.length,</span>\n  <span class=\"c1\">--   have a' : (-2147483648 : ℤ) ≤ 0 := by norm_num,</span>\n  <span class=\"c1\">--   exact le_trans a' this,</span>\n  <span class=\"c1\">-- },</span>\n  <span class=\"c1\">-- {</span>\n  <span class=\"c1\">--   have := int.coe_nat_le.mpr h',</span>\n  <span class=\"c1\">--   clear_except this,</span>\n  <span class=\"c1\">--   norm_num at this,</span>\n  <span class=\"c1\">--   have a' : (30 : ℤ) &lt; 2147483648 := by norm_num,</span>\n  <span class=\"c1\">--   exact gt_of_gt_of_ge a' this,</span>\n  <span class=\"c1\">-- },</span>\n  <span class=\"c1\">-- cases this,</span>\n  <span class=\"c1\">-- rw this,</span>\n  <span class=\"c1\">-- clear_except h h',</span>\n  <span class=\"c1\">-- simp only [get_right_bound, get_left_bound, within_bounds],</span>\n  <span class=\"c1\">-- split,</span>\n  <span class=\"c1\">-- have a1 := x_le_sum input (-20 : ℤ) begin</span>\n  <span class=\"c1\">--   intros x y,</span>\n  <span class=\"c1\">--   exact (h x y).left,</span>\n  <span class=\"c1\">-- end,</span>\n  <span class=\"c1\">-- have a2 : -600 ≤ (↑input.length) * (-20 : ℤ) := begin</span>\n  <span class=\"c1\">--   clear_except h',</span>\n  <span class=\"c1\">--   have := (mul_le_mul_left_of_neg (show (-20 : ℤ) &lt; (0 : ℤ), by { clear_except, norm_num, })).mpr (int.coe_nat_le.mpr h'),</span>\n  <span class=\"c1\">--   rw (show (-20 : ℤ) * (↑30 : ℤ) = -600, by norm_num) at this,</span>\n  <span class=\"c1\">--   rw mul_comm at this,</span>\n  <span class=\"c1\">--   exact this,</span>\n  <span class=\"c1\">-- end,</span>\n  <span class=\"c1\">-- have a3 : -600 ≤ input.sum := begin</span>\n  <span class=\"c1\">--   clear_except a1 a2,</span>\n  <span class=\"c1\">--   exact le_trans a2 a1,</span>\n  <span class=\"c1\">-- end,</span>\n  <span class=\"c1\">-- clear_except a3,</span>\n  <span class=\"c1\">-- {</span>\n  <span class=\"c1\">--   have a' : (-2147483648 : ℤ) ≤ -600 := by norm_num,</span>\n  <span class=\"c1\">--   exact le_trans a' a3,</span>\n  <span class=\"c1\">-- },</span>\n  <span class=\"c1\">-- have a1 := sum_le_x input 20 begin</span>\n  <span class=\"c1\">--   intros x y,</span>\n  <span class=\"c1\">--   exact (h x y).right,</span>\n  <span class=\"c1\">-- end,</span>\n  <span class=\"c1\">-- have a2 : (↑input.length) * (20 : ℤ) ≤ 600 := begin</span>\n  <span class=\"c1\">--   clear_except h',</span>\n  <span class=\"c1\">--   have := @mul_le_mul ℤ _ (↑input.length : ℤ) (20 : ℤ) (30 : ℤ) (20 : ℤ) begin</span>\n  <span class=\"c1\">--     have := int.coe_nat_le.mpr h',</span>\n  <span class=\"c1\">--     assumption,</span>\n  <span class=\"c1\">--   end (by norm_num) (by norm_num) (by norm_num),</span>\n  <span class=\"c1\">--   norm_num at this,</span>\n  <span class=\"c1\">--   assumption,</span>\n  <span class=\"c1\">-- end,</span>\n  <span class=\"c1\">-- have : input.sum ≤ 600 := begin</span>\n  <span class=\"c1\">--   clear_except a1 a2,</span>\n  <span class=\"c1\">--   exact le_trans a1 a2,</span>\n  <span class=\"c1\">-- end,</span>\n  <span class=\"c1\">-- clear_except this,</span>\n  <span class=\"c1\">-- {</span>\n  <span class=\"c1\">--   have a' : (600 : ℤ) &lt; 2147483648 := by { clear_except, norm_num, },</span>\n  <span class=\"c1\">--   exact gt_of_gt_of_ge a' this,</span>\n  <span class=\"c1\">-- },</span>\n  <span class=\"c1\">-- clear_except this,</span>\n  <span class=\"c1\">-- exfalso,</span>\n  <span class=\"c1\">-- have := list.not_mem_nil x this,</span>\n  <span class=\"c1\">-- assumption,</span>\n  <span class=\"c1\">-- clear_except h this,</span>\n  <span class=\"c1\">-- have := h x this,</span>\n  <span class=\"c1\">-- clear_except this,</span>\n  <span class=\"c1\">-- simp only [get_right_bound, get_left_bound, within_bounds],</span>\n  <span class=\"c1\">-- split,</span>\n  <span class=\"c1\">-- have := this.left,</span>\n  <span class=\"c1\">-- clear_except this,</span>\n  <span class=\"c1\">-- {</span>\n  <span class=\"c1\">--   have a' : (-2147483648 : ℤ) ≤ -20 := by { clear_except, norm_num, },</span>\n  <span class=\"c1\">--   exact le_trans a' this,</span>\n  <span class=\"c1\">-- },</span>\n  <span class=\"c1\">-- have := this.right,</span>\n  <span class=\"c1\">-- clear_except this,</span>\n  <span class=\"c1\">-- have a' : (20 : ℤ) &lt; 2147483648 := by { clear_except, norm_num, },</span>\n  <span class=\"c1\">-- exact gt_of_gt_of_ge a' this,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 262930835,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1638108571
    },
    {
        "content": "<p>How fast are the <code>norm_num</code>s?</p>",
        "id": 262930898,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638108631
    },
    {
        "content": "<p>Try extracting those haves to their own lemmas</p>",
        "id": 262930907,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638108649
    },
    {
        "content": "<p>the norm nums are very fast apparently, most norm nums take less than 5ms to complete...</p>",
        "id": 262931217,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1638108994
    },
    {
        "content": "<p>The moment you accidentally trigger something which attempts to unfold 2147483648 you're dead, I guess.</p>",
        "id": 262931223,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1638109006
    },
    {
        "content": "<p>I think you are correct. because lean has finished elaborating the proof <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 262931415,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1638109259
    },
    {
        "content": "<p>next time I'll probably find a roundabout way to represent large constants because lean has a hard time dealing with them <span aria-label=\"cry\" class=\"emoji emoji-1f622\" role=\"img\" title=\"cry\">:cry:</span></p>",
        "id": 262931479,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1638109329
    },
    {
        "content": "<p>Lean 3 does...</p>",
        "id": 262931666,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1638109632
    }
]