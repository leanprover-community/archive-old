[
    {
        "content": "<p>I always forget about the difference between extending and not extending when defining structures, so I asked a question on stackoverflow because search will then work better for me in the future: <a href=\"https://stackoverflow.com/questions/60130605/extending-or-inferring-pid-ufd-in-a-lean-class-definition\" target=\"_blank\" title=\"https://stackoverflow.com/questions/60130605/extending-or-inferring-pid-ufd-in-a-lean-class-definition\">https://stackoverflow.com/questions/60130605/extending-or-inferring-pid-ufd-in-a-lean-class-definition</a></p>",
        "id": 187730560,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1581194248
    },
    {
        "content": "<p>My guess is that the definition <code>unique_factorization_domain</code> is sub-optimal: it's generally better to extend the structure.<br>\nUnique factorization domains were defined <a href=\"https://github.com/leanprover-community/mathlib/commit/dd0c0aeefcaf6a438ab4273d7a1f42e1b8225847\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/commit/dd0c0aeefcaf6a438ab4273d7a1f42e1b8225847\">in 2018</a> by <span class=\"user-mention\" data-user-id=\"110294\">@Johannes HÃ¶lzl</span>, so  my guess is that back then we knew less well what the best way was to set up classes.</p>\n<p>There is a small downside in using <code>extends</code>: it will increase the type-class search for unrelated type-class problems, because there is now an instance <code>unique_factorization_domain -&gt; integral_domain</code>.</p>",
        "id": 187784360,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1581301567
    },
    {
        "content": "<p>Why is it better to extend the class?</p>\n<p>UFD is a rarely used class, so does that make the downside more significant relative to the upside?</p>",
        "id": 187785164,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1581303289
    },
    {
        "content": "<blockquote>\n<p>Why is it better to extend the class?</p>\n</blockquote>\n<p>I think we've noticed almost all type-class instance bottlenecks with modules/algebras/vector spaces where we have classes with other classes as arguments. Of course, those hierarchies are much larger, but I think part of the problem is the instances that are arguments to classes (which, in those cases are necessary).<br>\nThere is a performance problems with a instance <code>instance [integral_domain \\a] [unique_factorization_domain \\a] : ...</code>. If there are multiple instance paths to <code>integral_domain \\a</code> and none to <code>unique_factorization_domain \\a</code> then type-class inference will go through all possibilities of the <code>integral_domain \\a</code> search.</p>\n<blockquote>\n<p>UFD is a rarely used class, so does that make the downside more significant relative to the upside?</p>\n</blockquote>\n<p>Perhaps that is a good enough reason, as a workaround until we have the type-class inference of Lean 4.</p>",
        "id": 187836083,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1581355045
    }
]