[
    {
        "content": "<p>Am I the only one who uses the following lemmata?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">length_append_append</span> <span class=\"o\">:</span>\n  <span class=\"n\">list.length</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">++</span> <span class=\"n\">y</span> <span class=\"bp\">++</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x.length</span> <span class=\"bp\">+</span> <span class=\"n\">y.length</span> <span class=\"bp\">+</span> <span class=\"n\">z.length</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">list.length_append</span><span class=\"o\">,</span> <span class=\"n\">list.length_append</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">map_append_append</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">list.map</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">++</span> <span class=\"n\">y</span> <span class=\"bp\">++</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">list.map</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">++</span> <span class=\"n\">list.map</span> <span class=\"n\">f</span> <span class=\"n\">y</span> <span class=\"bp\">++</span> <span class=\"n\">list.map</span> <span class=\"n\">f</span> <span class=\"n\">z</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">list.map_append</span><span class=\"o\">,</span> <span class=\"n\">list.map_append</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">filter_map_append_append</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">list.filter_map</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">++</span> <span class=\"n\">y</span> <span class=\"bp\">++</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">list.filter_map</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">++</span> <span class=\"n\">list.filter_map</span> <span class=\"n\">f</span> <span class=\"n\">y</span> <span class=\"bp\">++</span> <span class=\"n\">list.filter_map</span> <span class=\"n\">f</span> <span class=\"n\">z</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">list.filter_map_append</span><span class=\"o\">,</span> <span class=\"n\">list.filter_map_append</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">reverse_append_append</span> <span class=\"o\">:</span>\n  <span class=\"n\">list.reverse</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">++</span> <span class=\"n\">y</span> <span class=\"bp\">++</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">z.reverse</span> <span class=\"bp\">++</span> <span class=\"n\">y.reverse</span> <span class=\"bp\">++</span> <span class=\"n\">x.reverse</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">list.reverse_append</span><span class=\"o\">,</span> <span class=\"n\">list.reverse_append</span><span class=\"o\">,</span> <span class=\"n\">list.append_assoc</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">forall_mem_append_append</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">x</span> <span class=\"bp\">++</span> <span class=\"n\">y</span> <span class=\"bp\">++</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">a</span><span class=\"o\">)</span>  <span class=\"bp\">↔</span>  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">a</span><span class=\"o\">)</span>  <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">list.forall_mem_append</span><span class=\"o\">,</span> <span class=\"n\">list.forall_mem_append</span><span class=\"o\">,</span> <span class=\"n\">and_assoc</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">join_append_append</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)}</span> <span class=\"o\">:</span>\n  <span class=\"n\">list.join</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">++</span> <span class=\"n\">Y</span> <span class=\"bp\">++</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">X.join</span> <span class=\"bp\">++</span> <span class=\"n\">Y.join</span> <span class=\"bp\">++</span> <span class=\"n\">Z.join</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">list.join_append</span><span class=\"o\">,</span> <span class=\"n\">list.join_append</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>They look like a pointless exercise, but they declutter my code.</p>",
        "id": 310774436,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1668762368
    },
    {
        "content": "<p><code>simp_rw [list.length_append]</code> rewrites with <code>list.length_append</code> any number of times, and can probably be used instead of proving this new lemma.</p>",
        "id": 310774987,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1668762577
    },
    {
        "content": "<p>Sometimes I specifically want to rewrite \"that triplet\" and not just all places <code>list.length_append</code> matches.<br>\nOf course <code>list.length_append_append</code> is not the only solution, but it is the easiest solution for me.</p>",
        "id": 310775472,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1668762737
    },
    {
        "content": "<p>That said, I don't want to convert you to my faith. I am just curious whether other lean users have tiny lemmata of this kind in their code.</p>",
        "id": 310775657,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1668762799
    },
    {
        "content": "<p>We regularly add small lemmas like this in various places of mathlib. I can see that they can be useful sometimes.</p>",
        "id": 310777514,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1668763492
    },
    {
        "content": "<p>I would say mathlib does not want these lemmas unless you also contribute a proof where they're used</p>",
        "id": 310809966,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1668774570
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/113488-general/topic/list.20append.20append/near/310775472\">said</a>:</p>\n<blockquote>\n<p>Sometimes I specifically want to rewrite \"that triplet\" and not just all places <code>list.length_append</code> matches.<br>\nOf course <code>list.length_append_append</code> is not the only solution, but it is the easiest solution for me.</p>\n</blockquote>\n<p>This is usually a good excuse to use a <code>have</code> statement</p>",
        "id": 310810137,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1668774609
    }
]