[
    {
        "content": "<p>Hey all, a post about the liquid tensor experiment in #general. I'm looking for some help with CI thingies. We have CI that builds the project, but I would like to have two other things:</p>\n<ol>\n<li>Setup CI to check that thm95 stays sorry-free <a href=\"https://github.com/leanprover-community/lean-liquid/issues/37\">lean-liquid#37</a></li>\n<li>Setup olean caches <a href=\"https://github.com/leanprover-community/lean-liquid/issues/38\">lean-liquid#38</a></li>\n</ol>\n<p>Regarding (1). I think Mario at some point posted some meta code that checks which axioms are used by some decl. We would want to use something like that.<br>\nIf you want to help out with one of these, that would be great!</p>",
        "id": 241739788,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1623051692
    },
    {
        "content": "<p>We clearly also need to enable the <code>unused_arguments</code> linter.</p>",
        "id": 241831612,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1623095761
    },
    {
        "content": "<p>I'm still looking for some help here. Especially (1) would be great to get working. Because if we start working on the second part of the project, we'll want to add <code>sorry</code> again, and it's great if we can easily certify that this doesn't affect the first milestone.</p>",
        "id": 243665087,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1624460607
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> I'm happy to help with this. Some questions:</p>\n<ol>\n<li>Is it okay to use the same Azure account for olean storage that mathlib uses? If so, can a maintainer (who is the right person to ping?) please create a <code>lean-liquid</code> container and add the SAS URL as the <code>AZURE_SAS_TOKEN</code> secret to the lean-liquid repository.</li>\n<li>The Azure clean up script may need modification. Again, who is the right person to ping?</li>\n<li>I need to record the olean cache location in the repository somewhere so that <code>leanproject</code> will know where to look for oleans. I was thinking the URL could go in a <code>.mathlibtools</code> or <code>.leanproject</code> config file in the root of the repository, but open to wherever you or others think would be preferable.</li>\n<li>Do you just want the <code>unused_arguments</code> linter or do you want all the linters?</li>\n</ol>",
        "id": 243998896,
        "sender_full_name": "Ben Toner",
        "timestamp": 1624690197
    },
    {
        "content": "<p>The CI part of this is now (mostly) done, subject to changes based on the questions above and anything that comes up in additional testing or review. I also still need to update leanproject.</p>\n<p>This is what the build will look like if the proof of Theorem 9.5 depends on something with a sorry: <a href=\"https://github.com/bentoner/lean-liquid/runs/2920399967?check_suite_focus=true\">https://github.com/bentoner/lean-liquid/runs/2920399967?check_suite_focus=true</a></p>\n<p>I was thinking that the new CI could run alongside the existing CI for a while, until we're confident that it's robust. If you're okay with temporarily storing oleans in a separate Azure account I made today, I could prepare a pull request for review soon. Switching to the official Azure account later would be easy: you would just need to replace the <code>AZURE_SAS_TOKEN</code> secret, and update the URL in <code>.mathlibtools</code> (or wherever you decide to put it per question 3 above).</p>",
        "id": 244005487,
        "sender_full_name": "Ben Toner",
        "timestamp": 1624700129
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"392126\">@Ben Toner</span> Thank you so much for helping out!</p>\n<p>For (1) and (2), I hope that <span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span> or <span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span> can help with the Azure token.<br>\nFor (3), <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> what do you think is the best strategy?</p>\n<p>For (4), I think <code>unused_arguments</code> would be good to start with. There are lots of missing docstrings, but once we have those, we can add another linter, and gradually move to enabling all linters.</p>",
        "id": 244005633,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1624700335
    },
    {
        "content": "<p>Which oleans are we talking about?</p>",
        "id": 244005679,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1624700403
    },
    {
        "content": "<p>LTE oleans</p>",
        "id": 244005720,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1624700449
    },
    {
        "content": "<p>So you would want <code>leanproject get-cache</code> to also look for remote oleans?</p>",
        "id": 244005741,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1624700496
    },
    {
        "content": "<p>I think LTE is large enough to justify it, and in the next half a year, it might double in size.</p>",
        "id": 244005790,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1624700535
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> oleans for the lean-liquid project. I want to enable leanproject to download cached oleans for projects other than mathlib, without hard coding the URL in the leanproject repository as is done for mathlib.</p>",
        "id": 244005925,
        "sender_full_name": "Ben Toner",
        "timestamp": 1624700751
    },
    {
        "content": "<p>For the record only a default value of the url is hardcoded in leanproject, you can set it by running <code>leanproject set-url</code> (which simply writes the url in some configuration file)</p>",
        "id": 244005979,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1624700817
    },
    {
        "content": "<p>Modifying leanproject to fetch non-mathlib oleans remotely is trivial, I can do that very soon</p>",
        "id": 244005994,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1624700850
    },
    {
        "content": "<p>Ideally <code>leanproject get-cache</code> would fetch caches for the project and all dependencies (whenever they are configured to have remote cache stores)</p>",
        "id": 244006055,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1624700911
    },
    {
        "content": "<p>And what about the proposed setup of Sebastian? I mean the idea that you wouldn't have to download all the oleans every time because it would manage them better. Is it relevant?</p>",
        "id": 244006162,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1624701104
    },
    {
        "content": "<p>Yael, I don't know what you are referring to</p>",
        "id": 244006288,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1624701246
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> that's for Lean 4, right?</p>",
        "id": 244006445,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1624701512
    },
    {
        "content": "<p>Sebastian talked about it in the context on Lean 4, but can't we have it for Lean 3? Or does it use something that changed?</p>",
        "id": 244006464,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1624701570
    },
    {
        "content": "<p>I think that requires changes to <code>lean</code>, and setting up a whole nix build system. It doesn't seem to be completely settled down for lean 4 either. So even though it is probably better in the long run, I think it still takes work to get there.</p>",
        "id": 244006567,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1624701687
    },
    {
        "content": "<p>The <code>leanproject</code> approach will probably take Patrick &lt; 30 minutes to implement.</p>",
        "id": 244006576,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1624701704
    },
    {
        "content": "<p>Yeah okay!</p>",
        "id": 244006969,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1624702226
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"392126\">Ben Toner</span> <a href=\"#narrow/stream/113488-general/topic/CI.20for.20liquid.20tensor.20experiment/near/244005487\">said</a>:</p>\n<blockquote>\n<p>The CI part of this is now (mostly) done, subject to changes based on the questions above and anything that comes up in additional testing or review. I also still need to update leanproject.</p>\n<p>This is what the build will look like if the proof of Theorem 9.5 depends on something with a sorry: <a href=\"https://github.com/bentoner/lean-liquid/runs/2920399967?check_suite_focus=true\">https://github.com/bentoner/lean-liquid/runs/2920399967?check_suite_focus=true</a></p>\n<p>I was thinking that the new CI could run alongside the existing CI for a while, until we're confident that it's robust.</p>\n</blockquote>\n<p>Thanks again for doing this! I would be happy to integrate it into current CI.</p>",
        "id": 244007259,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1624702715
    },
    {
        "content": "<p>Would you mind creating a PR for that?</p>",
        "id": 244007274,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1624702748
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"392126\">Ben Toner</span> <a href=\"#narrow/stream/113488-general/topic/CI.20for.20liquid.20tensor.20experiment/near/244005487\">said</a>:</p>\n<blockquote>\n<p>If you're okay with temporarily storing oleans in a separate Azure account I made today, I could prepare a pull request for review soon. Switching to the official Azure account later would be easy: you would just need to replace the <code>AZURE_SAS_TOKEN</code> secret, and update the URL in <code>.mathlibtools</code> (or wherever you decide to put it per question 3 above).</p>\n</blockquote>\n<p>This still requires modifications to <code>leanproject</code>, right? Or am I misunderstanding something? If it does, I suggest we wait till Patrick updates <code>leanproject</code>.</p>",
        "id": 244007341,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1624702810
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/CI.20for.20liquid.20tensor.20experiment/near/244007341\">said</a>:</p>\n<blockquote>\n<p>This still requires modifications to <code>leanproject</code>, right? Or am I misunderstanding something? If it does, I suggest we wait till Patrick updates <code>leanproject</code>.</p>\n</blockquote>\n<p>We need modifications to <code>leanproject</code> for users to download the oleans, but the CI can start generating and consuming oleans itself before that happens, provided you're okay with using a temporary account.</p>\n<p>I'll make a pull request.</p>",
        "id": 244007946,
        "sender_full_name": "Ben Toner",
        "timestamp": 1624703545
    },
    {
        "content": "<p>The cleanest way to go would be to allow something like the following leanpkg.toml:</p>\n<div class=\"codehilite\" data-code-language=\"TOML\"><pre><span></span><code><span class=\"k\">[package]</span>\n<span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s\">\"lean-liquid\"</span>\n<span class=\"n\">version</span> <span class=\"o\">=</span> <span class=\"s\">\"0.1\"</span>\n<span class=\"n\">lean_version</span> <span class=\"o\">=</span> <span class=\"s\">\"leanprover-community/lean:3.30.0\"</span>\n<span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"s\">\"src\"</span>\n<span class=\"n\">olean_url</span> <span class=\"o\">=</span> <span class=\"s\">\"https://foo.com/liquid_oleans/\"</span>\n\n<span class=\"k\">[dependencies]</span>\n<span class=\"n\">mathlib</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"n\">git</span> <span class=\"o\">=</span> <span class=\"s\">\"https://github.com/leanprover-community/mathlib\"</span><span class=\"p\">,</span> <span class=\"n\">rev</span> <span class=\"o\">=</span> <span class=\"s\">\"ee4fe7432b1f88e857e4b568f01a6435276a1b96\"</span><span class=\"p\">,</span> <span class=\"n\">olean_url</span> <span class=\"o\">=</span> <span class=\"s\">\"https://bar.com/fancy_mathlib_oleans/\"</span><span class=\"p\">}</span>\n<span class=\"n\">lean-gptf</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"n\">git</span> <span class=\"o\">=</span> <span class=\"s\">\"https://github.com/jesse-michael-han/lean-gptf\"</span><span class=\"p\">,</span> <span class=\"n\">rev</span> <span class=\"o\">=</span> <span class=\"s\">\"3e20785d65604744e9e2dc9d710a695a7355fd2c\"</span><span class=\"p\">}</span>\n</code></pre></div>\n<p>adding optional <code>olean_url</code> field both in the package section and in each dependency. The bad side of this is that <em>current</em> <code>leanproject</code> will wipe up this information, at least while upgrading mathlib. So anyone interested in using a project that uses this new feature would need to upgrade <code>leanproject</code>. That seems ok to me, but I'd like confirmation before coding.</p>",
        "id": 244008489,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1624704033
    },
    {
        "content": "<p>Sounds good to me.</p>",
        "id": 244008599,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1624704184
    },
    {
        "content": "<p>I don't know how much arbitrary code an olean can run, but maybe a warning to check \"do you trust such and such\" would be nice for security</p>",
        "id": 244008674,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1624704323
    },
    {
        "content": "<p>Just the first time you install a project maybe</p>",
        "id": 244008680,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1624704337
    },
    {
        "content": "<p>Eric, each time you open a Lean file in VSCode you need to trust it. The Lean extension starts running it immediately and can wipe out your hard drive on line one.</p>",
        "id": 244009065,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1624704958
    },
    {
        "content": "<p>New versions of VSCode seem to ask first now though right?</p>",
        "id": 244009507,
        "sender_full_name": "Julian Berman",
        "timestamp": 1624705489
    },
    {
        "content": "<p>Mine always asks if I trust the Lean file's author</p>",
        "id": 244009515,
        "sender_full_name": "Julian Berman",
        "timestamp": 1624705505
    },
    {
        "content": "<p>Yeah that's a new VSCode thing though, separate from Lean</p>",
        "id": 244009537,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1624705544
    },
    {
        "content": "<p>Returning to the actual topic of this discussion, the situation is more complicated than what I described. Actually <code>leanpkg</code> will also interfere. It probably means it's time to finally get rid of any dependency of <code>leanproject</code> on <code>leanpkg</code>. But it means more work so don't hold you breath.</p>",
        "id": 244009657,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1624705691
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> Would it be possible to have a short shell-script specifically for LTE that does</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">set</span> <span class=\"n\">the</span> <span class=\"n\">leanproject</span> <span class=\"n\">remote</span> <span class=\"n\">cache</span> <span class=\"n\">location</span> <span class=\"n\">to</span> <span class=\"n\">the</span> <span class=\"n\">LTE</span> <span class=\"n\">store</span>\n<span class=\"n\">leanproject</span> <span class=\"n\">get</span><span class=\"bp\">-</span><span class=\"n\">cache</span>\n<span class=\"n\">set</span> <span class=\"n\">the</span> <span class=\"n\">leanproject</span> <span class=\"n\">remote</span> <span class=\"n\">cache</span> <span class=\"n\">back</span> <span class=\"n\">to</span> <span class=\"n\">the</span> <span class=\"n\">mathlib</span> <span class=\"n\">default</span>\n</code></pre></div>",
        "id": 244009746,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1624705884
    },
    {
        "content": "<p>I think that would be good enough for LTE.</p>",
        "id": 244009748,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1624705893
    },
    {
        "content": "<p>That won't work, remote olean are fetched only for mathlib</p>",
        "id": 244009821,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1624706015
    },
    {
        "content": "<p>I've made a pull request for a part that could be broken off, the script to check that Theorem 9.5 remains sorry free <a href=\"https://github.com/leanprover-community/lean-liquid/pull/44\">https://github.com/leanprover-community/lean-liquid/pull/44</a> .</p>\n<p>I've updated the CI code to look for the <code>olean_url</code> field in <code>package.toml</code> per <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span>'s proposal, but need to test further before making the (bigger) pull request for that.</p>\n<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> I'm happy to help with changes to <code>leanpkg</code> and <code>leanproject</code> if you would like.</p>",
        "id": 244010581,
        "sender_full_name": "Ben Toner",
        "timestamp": 1624707129
    },
    {
        "content": "<p>Ben, if you have time to work on removing every call to <code>leanpkg</code> from <code>leanproject</code> that would be great! The game is to search for <code>'leanpkg'</code> in <a href=\"https://github.com/leanprover-community/mathlib-tools/blob/master/mathlibtools/lib.py\">lib.py</a>, figure out what we are asking it to do, maybe reading the <a href=\"https://github.com/leanprover-community/lean/tree/master/leanpkg/leanpkg\">leanpkg source code</a>, and redo it in python. Globally that would make the whole thing a lot more predictable.</p>",
        "id": 244011235,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1624708241
    },
    {
        "content": "<p>Okay cool, I'll take a look at <code>leanproject</code> tomorrow.</p>\n<p>I made a pull request for the CI changes here: <a href=\"https://github.com/leanprover-community/lean-liquid/pull/45\">https://github.com/leanprover-community/lean-liquid/pull/45</a> . Do note that I'm on Australian time, so it might be better to not merge today as I won't be around much longer if there's any breakage.</p>",
        "id": 244011512,
        "sender_full_name": "Ben Toner",
        "timestamp": 1624708790
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"392126\">@Ben Toner</span> Thanks a lot!</p>",
        "id": 244011945,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1624709322
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/CI.20for.20liquid.20tensor.20experiment/near/244005633\">said</a>:</p>\n<blockquote>\n<p>For (1) and (2), I hope that <span class=\"user-mention silent\" data-user-id=\"110596\">Rob Lewis</span> or <span class=\"user-mention silent\" data-user-id=\"123965\">Bryan Gin-ge Chen</span> can help with the Azure token.</p>\n</blockquote>\n<p>(I don't have access to the Azure token; I think Rob has to do this.)</p>",
        "id": 244014690,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1624713486
    },
    {
        "content": "<p>Status: have linting working. Need to clean up and finish testing then will add to pull request. Haven't looked at <code>leanproject</code> yet.</p>",
        "id": 244051380,
        "sender_full_name": "Ben Toner",
        "timestamp": 1624773019
    },
    {
        "content": "<p>Pull request for Theorem 9.5 sorry-free check: <a href=\"https://github.com/leanprover-community/lean-liquid/pull/44\">https://github.com/leanprover-community/lean-liquid/pull/44</a></p>\n<p>Main pull request: <a href=\"https://github.com/leanprover-community/lean-liquid/pull/45\">https://github.com/leanprover-community/lean-liquid/pull/45</a></p>\n<ul>\n<li>Can be merged before Azure secret is set and everything except Azure upload should still work</li>\n<li>Incorporates previous pull request</li>\n</ul>\n<p>Pull request for associated changes to <code>leanpkg</code>: <a href=\"https://github.com/leanprover-community/lean/pull/586\">https://github.com/leanprover-community/lean/pull/586</a></p>\n<ul>\n<li>The CI changes can land before this does -- like the required <code>leanproject</code> changes, this is needed to make it easy for users to fetch the LTE oleans but doesn't block the CI changes.</li>\n</ul>\n<p>I had a quick look at <code>leanproject</code> but I didn't do anything yet -- happy to take care of this but it'll need to be a project for say next weekend.</p>",
        "id": 244067978,
        "sender_full_name": "Ben Toner",
        "timestamp": 1624801788
    },
    {
        "content": "<p>Thank you very much!</p>",
        "id": 244068574,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1624802694
    },
    {
        "content": "<p>My suggestion was not to modify <code>leanpkg</code>, it was to stop using it in <code>leanproject</code>. If you want to modify <code>leanpkg</code>, it would be much nicer to teach it to ignore every unexpected key, simply copying it over.</p>",
        "id": 244070408,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1624805806
    },
    {
        "content": "<p>Let me ping <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> to make sure he sees this before looking at this PR.</p>",
        "id": 244070421,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1624805842
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> Apologies that I mischaracterised what you suggested. I will change leanproject to stop using leanpkg but it also seemed important to make leanpkg not delete the new key in case some users use leanpkg directly instead of leanproject. (I originally suggested putting the URL in a new <code>.leanproject</code> file to avoid needing to make changes to leanpkg.)</p>\n<p>I agree it would be nicer to teach leanpkg to ignore every unexpected key, but on the flip side there is a benefit to having a schema, so I thought that I’d start with the more minimal change. Happy to proceed either way though.</p>\n<p>Maybe we get the best of both worlds if we add a <code>[leanproject]</code> section and make leanpkg preserve everything in that.</p>",
        "id": 244071622,
        "sender_full_name": "Ben Toner",
        "timestamp": 1624807632
    },
    {
        "content": "<p>With regard to the leanpkg pull request, I also realise that I’ve failed to allow for the optional <code>olean_url</code> field in each dependency. I’ll hold off fixing this though until there is consensus about how to proceed.</p>",
        "id": 244072767,
        "sender_full_name": "Ben Toner",
        "timestamp": 1624809469
    },
    {
        "content": "<p>I only wanted to avoid a proliferation of configuration files. It's already confusing to have three commands (<code>lean</code>, <code>leanpkg</code> and <code>leanproject</code>). But I don't deeply care.</p>",
        "id": 244082435,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1624824343
    },
    {
        "content": "<p>Okay great, it worked!</p>",
        "id": 244163979,
        "sender_full_name": "Ben Toner",
        "timestamp": 1624894896
    },
    {
        "content": "<p>One gotcha with the current state to be aware of: each time you or the bot updates mathlib, <code>leanproject</code>/<code>leanpkg</code> will delete the <code>olean_url</code> field in <code>leanpkg.toml</code> (until I/we fix it). After you have an official olean URL, we should record it on this line <a href=\"https://github.com/leanprover-community/lean-liquid/blob/20a63c58546989e62bae1c87ea71f984746ff3a0/scripts/fetch_olean_cache.sh#L9\">https://github.com/leanprover-community/lean-liquid/blob/20a63c58546989e62bae1c87ea71f984746ff3a0/scripts/fetch_olean_cache.sh#L9</a> -- then it won't matter that the field in <code>leanpkg.toml</code> gets deleted.</p>",
        "id": 244164474,
        "sender_full_name": "Ben Toner",
        "timestamp": 1624895105
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"392126\">@Ben Toner</span> do you think we can get <code>nolints.txt</code> working for this repository?</p>",
        "id": 244165916,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1624895685
    },
    {
        "content": "<p>so that we can gradually fix all the linting errors?</p>",
        "id": 244165946,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1624895698
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>  Is the idea that that would let you turn on all the linters or is it that you need to permanently suppress certain linting errors that you can't do with <code>nolint</code> attributes?</p>",
        "id": 244166365,
        "sender_full_name": "Ben Toner",
        "timestamp": 1624895876
    },
    {
        "content": "<p>Well, there's still about 50 (or so) unused arguments that need to be fixed. So either we disable the linter till we've fixed all of them, or we have a week full of <span aria-label=\"cross mark\" class=\"emoji emoji-274c\" role=\"img\" title=\"cross mark\">:cross_mark:</span>'s, or we try to do some <code>nolints.txt</code> thingy.</p>",
        "id": 244167741,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1624896335
    },
    {
        "content": "<p>And indeed, with the <code>nolints</code> thing, we could even enable a bunch of other linters as well.</p>",
        "id": 244167772,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1624896359
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>  I can do a <code>nolints.txt</code> thing but it's not trivial (at least at my current level of lean ability). Would it work instead to just make the linting always be green in CI? That would be a one-line change.</p>",
        "id": 244168202,
        "sender_full_name": "Ben Toner",
        "timestamp": 1624896568
    },
    {
        "content": "<p>Let's do that for now.</p>",
        "id": 244168261,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1624896596
    },
    {
        "content": "<p>Then someone else can chime in and create the <code>nolints.txt</code> at a later point.</p>",
        "id": 244168344,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1624896618
    },
    {
        "content": "<p>I can do the <code>nolints.txt</code> change, just not on a weekday. The thing that makes it nontrivial (for me, at least) is that I think some linters might need to run on the combination of lean-liquid and mathlib(?) and the respective <code>nolints.txt</code> files need to be merged.</p>",
        "id": 244170120,
        "sender_full_name": "Ben Toner",
        "timestamp": 1624897486
    },
    {
        "content": "<p>Hmm, good point. I guess this is things like the simp normal form linter?</p>",
        "id": 244171123,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1624897940
    },
    {
        "content": "<p>Actually, I think I would rather not run linters that need to run on all of mathlib as well.</p>",
        "id": 244171166,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1624897969
    },
    {
        "content": "<p>Anyway, this isn't very urgent.</p>",
        "id": 244171190,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1624897981
    },
    {
        "content": "<p>So take your time</p>",
        "id": 244171204,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1624897986
    },
    {
        "content": "<p>Hmm, the auto-update bot already removed the <code>olean_url</code> field from the <code>.toml</code>....</p>",
        "id": 244238851,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1624948820
    },
    {
        "content": "<p>That's okay - just leave it deleted next time. It's there so users can download the oleans, but they won't be able to do that until <code>leanproject</code> is updated, and <code>leanproject</code> will keep deleting this field anyway until it's updated. Moreover the CI can get the oleans without that field being present (see <a href=\"https://github.com/leanprover-community/lean-liquid/commit/664ddddbd178bc8ce7960103fa728899dedc9691\">https://github.com/leanprover-community/lean-liquid/commit/664ddddbd178bc8ce7960103fa728899dedc9691</a> ).</p>",
        "id": 244240961,
        "sender_full_name": "Ben Toner",
        "timestamp": 1624950521
    },
    {
        "content": "<p>Sorry for taking so long to look at the Azure side of this. I have a minor concern: the Azure cleanup script periodically deletes caches unless they come from mathlib master or the head commit of a mathlib branch</p>",
        "id": 244321277,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1624989402
    },
    {
        "content": "<p>I could whitelist the LTE too, but maybe it would be better to put them in a subdirectory of the Azure blob</p>",
        "id": 244321374,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1624989445
    },
    {
        "content": "<p>If it can save LTE cache that is less than 3 days old, that would be good enough, I think.</p>",
        "id": 244321381,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1624989448
    },
    {
        "content": "<p>Do you want only master caches saved, or branches too?</p>",
        "id": 244321522,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1624989495
    },
    {
        "content": "<p>If it works with whatever leanpkg changes might be planned, using a <code>lean-liquid</code> subdirectory seems cleaner</p>",
        "id": 244321690,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1624989573
    },
    {
        "content": "<p>Then there's a uniform pattern for any leanprover-community projects that we want to add caches to</p>",
        "id": 244321742,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1624989593
    },
    {
        "content": "<p>And the cleanup script can detect which repo the caches come from by the directory name</p>",
        "id": 244321823,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1624989611
    },
    {
        "content": "<p><code>master</code> is sufficient</p>",
        "id": 244322122,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1624989726
    },
    {
        "content": "<p>It's just, if you wake up in the morning and the auto-mathlib-bumper or some other person has bumped mathlib, it would be really nice to have oleans within 5s instead of 20 minutes.</p>",
        "id": 244322213,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1624989767
    },
    {
        "content": "<p>That's probably going to be the main use case.</p>",
        "id": 244322238,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1624989775
    },
    {
        "content": "<p>The script at <a href=\"https://github.com/leanprover-community/lean-liquid/blob/master/.github/workflows/build.yml\">https://github.com/leanprover-community/lean-liquid/blob/master/.github/workflows/build.yml</a> is going to upload oleans for every branch</p>",
        "id": 244323054,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1624990058
    },
    {
        "content": "<p>The cleanup script only has access to the commit hash. So there's no way for it to tell where a cache comes from without looking for its hash in all the possible sources</p>",
        "id": 244323418,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1624990204
    },
    {
        "content": "<p>Putting these caches in a <code>lean-liquid</code> subdirectory will make it easier to clean them up according to whatever rules we want</p>",
        "id": 244323655,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1624990297
    },
    {
        "content": "<p>But also if you don't want to store branch caches at all we shouldn't upload them in the first place</p>",
        "id": 244323709,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1624990320
    },
    {
        "content": "<p>I don't care too much about branches. Frankly they aren't used too much.</p>",
        "id": 244324894,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1624990827
    },
    {
        "content": "<p>So I guess there is no harm in uploading caches for branches as well.</p>",
        "id": 244324914,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1624990842
    },
    {
        "content": "<p>If that makes things easier for you (-;</p>",
        "id": 244324940,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1624990849
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span> Thanks for doing this. Using a subdirectory is a good idea.</p>\n<p>For projects other than <code>mathlib</code> it seems less necessary to keep old versions around, so instead of a script, you could use lifecycle rules to auto-delete everything after X days. (On the other hand, for projects like <code>lean-gptf</code> that are intended to be used as dependencies, the current clean-up script's logic is more correct, but this is still something of a theoretical issue as <code>lean-gptf</code> is fast to build.)</p>",
        "id": 244373509,
        "sender_full_name": "Ben Toner",
        "timestamp": 1625023404
    },
    {
        "content": "<p>Another question: can we configure LTE so that it cancels a build if a new commit has been pushed to the same branch?</p>",
        "id": 244380837,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1625033114
    },
    {
        "content": "<p>Because LTE might end up eating precious CI time otherwise. (I just understood that it shares CI time with all other repos in the leanprover-community organization.)</p>",
        "id": 244380899,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1625033174
    },
    {
        "content": "<p>We might even consider only running CI for master. People can test build their branches locally when needed.</p>",
        "id": 244380921,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1625033213
    },
    {
        "content": "<p>If I'm reading this right, it looks like runs are canceled on branches other than <code>master</code>: <a href=\"https://github.com/leanprover-community/lean-liquid/blob/master/.github/workflows/build.yml#L21\">https://github.com/leanprover-community/lean-liquid/blob/master/.github/workflows/build.yml#L21</a></p>",
        "id": 244381044,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1625033341
    },
    {
        "content": "<p>Ok, so by removing L25, we get the same behaviour on master. I think that's worth doing. A push to master on LTE happens quite often.</p>",
        "id": 244381160,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1625033453
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span> !</p>",
        "id": 244381263,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1625033543
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/CI.20for.20liquid.20tensor.20experiment/near/244381160\">said</a>:</p>\n<blockquote>\n<p>Ok, so by removing L25, we get the same behaviour on master. I think that's worth doing. A push to master on LTE happens quite often.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>  Okay, sorry, I guessed wrong on that choice. I figured that you would want a build for each push to master so we know which push to blame for e.g. linting regressions, so I disabled cancelling there. Note that build times will go down from 25 min to ~2.5 min once the olean cache is in place.</p>",
        "id": 244382126,
        "sender_full_name": "Ben Toner",
        "timestamp": 1625034445
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"392126\">@Ben Toner</span> no worries!</p>",
        "id": 244382151,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1625034475
    },
    {
        "content": "<p>I don't care too much about the occasional regression. We'll probably find out soon enough.</p>",
        "id": 244382218,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1625034544
    },
    {
        "content": "<p>I agree that maybe we can re-enable it when the olean cache is working.</p>",
        "id": 244382233,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1625034571
    },
    {
        "content": "<p>But for now, I want to make sure that mathlib PRs get the CI time that they deserve (-;</p>",
        "id": 244382245,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1625034586
    },
    {
        "content": "<p>I wasn't properly accounting for this constraint. I'll make a pull request to disable the \"old\" CI then so we're not building everything twice. I was thinking you could run them both in parallel, but maybe you'd prefer to turn off the \"old\" one, if I make it easy to revert to it if the new one breaks for some reason.</p>",
        "id": 244382721,
        "sender_full_name": "Ben Toner",
        "timestamp": 1625035057
    },
    {
        "content": "<p>I just commented out L25. Wouldn't that be enough?</p>",
        "id": 244382785,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1625035094
    },
    {
        "content": "<p>\"old\" CI as in the CI that was in place before last weekend</p>",
        "id": 244382813,
        "sender_full_name": "Ben Toner",
        "timestamp": 1625035148
    },
    {
        "content": "<p>aah, yes, that is a good idea</p>",
        "id": 244382823,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1625035169
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"392126\">@Ben Toner</span> <a href=\"https://github.com/leanprover-community/azure-scripts/issues/9\">azure-scripts#9</a> and <a href=\"https://github.com/leanprover-community/lean-liquid/issues/48\">lean-liquid#48</a> together should do most of this. Archives will get uploaded only from master to a lean-liquid subdirectory, and cleaned when they're 3 days old. The cleanup conditions are easy to change.</p>",
        "id": 244453022,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1625071456
    },
    {
        "content": "<p>I haven't added the Azure token to lean-liquid yet. Worth having more eyes look over the scripts before they accidentally make a mess.</p>",
        "id": 244453059,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1625071475
    },
    {
        "content": "<p>I also don't know it/what changes are required for retrieving the caches, since the url now has a <code>lean-liquid</code> in it.</p>",
        "id": 244453099,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1625071503
    },
    {
        "content": "<p>Will the <code>HEAD</code> commit of <code>lean-liquid</code> <code>master</code> get deleted if there are no commits within 3 days?</p>",
        "id": 244453655,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1625071780
    },
    {
        "content": "<p>Not anymore!</p>",
        "id": 244457466,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1625073197
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span>, thanks, that's great! I didn't realize the script was public or I would have done something for you to review. I'll fix retrieving the cache in <code>lean-liquid</code>.</p>\n<p>I know my timing is off, but can I suggest a period longer than 3 days, e.g., 30 days and saving branch HEADs too? I think the storage cost would remain under a dollar per month -- looks like you fixed this in a different way though while I was typing this...</p>",
        "id": 244457590,
        "sender_full_name": "Ben Toner",
        "timestamp": 1625073244
    },
    {
        "content": "<p>I based that choice off of this:<br>\n<span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/CI.20for.20liquid.20tensor.20experiment/near/244321381\">said</a>:</p>\n<blockquote>\n<p>If it can save LTE cache that is less than 3 days old, that would be good enough, I think.</p>\n</blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/CI.20for.20liquid.20tensor.20experiment/near/244322122\">said</a>:</p>\n<blockquote>\n<p><code>master</code> is sufficient</p>\n</blockquote>\n<p>So right now it always has the latest master commit, and any others less than 3 days old.</p>",
        "id": 244457907,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1625073359
    },
    {
        "content": "<p>The storage costs for this will be negligible compared to mathlib</p>",
        "id": 244457972,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1625073369
    },
    {
        "content": "<p>And it's effectively free anyway</p>",
        "id": 244458033,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1625073394
    },
    {
        "content": "<p>The only reason not to store more is aesthetic, if Johan says it'll never be used there's no point keeping it around.</p>",
        "id": 244458086,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1625073418
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span> Thanks again for making all this happen.</p>\n<p>I updated the URL for retrieving the cache - not entirely sure that the new one's correct but the existing one was already wrong, so I can't have made things worse.</p>",
        "id": 244463763,
        "sender_full_name": "Ben Toner",
        "timestamp": 1625075886
    },
    {
        "content": "<p>That URL looks right</p>",
        "id": 244464778,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1625076360
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> if you're happy with these changes, let's merge the two relevant PRs and I'll add the token as a secret</p>",
        "id": 244465131,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1625076488
    },
    {
        "content": "<p>What's the story with retrieving these caches? Is it only for CI? Or is there a leanproject hook already?</p>",
        "id": 244465290,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1625076575
    },
    {
        "content": "<p>I guess you could <code>leanproject set-url</code> to the <code>lean-liquid</code> subdirectory on Azure and then <code>leanproject get-cache</code> would work, right?</p>",
        "id": 244465450,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1625076645
    },
    {
        "content": "<p>Or <code>--from-url</code> or whatever</p>",
        "id": 244465515,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1625076686
    },
    {
        "content": "<p>I think Ben and/or Patrick are planning to update/extend <code>leanproject</code> so that this will be easy</p>",
        "id": 244465575,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1625076723
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span> Please go ahead and merge the PRs! Thanks a lot for helping out</p>",
        "id": 244465648,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1625076746
    },
    {
        "content": "<p>So here's a 26 second build: <a href=\"https://github.com/leanprover-community/lean-liquid/runs/2955504763\">https://github.com/leanprover-community/lean-liquid/runs/2955504763</a></p>",
        "id": 244470644,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1625078948
    },
    {
        "content": "<p>I couldn't get it to work with <code>leanproject --from-url</code> or <code>leanproject set-url</code></p>",
        "id": 244470677,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1625078971
    },
    {
        "content": "<p>Not sure what the trouble is</p>",
        "id": 244470781,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1625079012
    },
    {
        "content": "<p>For the time being, something like this should replicate it.</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>wget https://oleanstorage.azureedge.net/mathlib/lean-liquid/<span class=\"s2\">\"</span><span class=\"k\">$(</span>git rev-parse HEAD<span class=\"k\">)</span><span class=\"s2\">\"</span>.tar.xz <span class=\"o\">&amp;&amp;</span> tar -xf <span class=\"s2\">\"</span><span class=\"k\">$(</span>git rev-parse HEAD<span class=\"k\">)</span><span class=\"s2\">\"</span>.tar.xz\n</code></pre></div>",
        "id": 244471610,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1625079411
    },
    {
        "content": "<p>I just tried that <code>wget ...</code> but I got a 404 not found error</p>",
        "id": 244518380,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1625115236
    },
    {
        "content": "<p>It's because the <code>upgrade_lean</code> workflow was the last thing commit to master and it doesn't store oleans... will fix within a couple of days.</p>",
        "id": 244526526,
        "sender_full_name": "Ben Toner",
        "timestamp": 1625123206
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span> the <code>leanproject</code> commands you're trying are not supposed to be working yet.</p>\n<p>Here's what remains, according to my understanding:</p>\n<ol>\n<li>Enable <code>nolints.txt</code> for <code>lean-liquid</code>. We only want to lint <code>lean-liquid</code> code. Turn on more linters. Enable the <code>nolints.txt</code> unnecessary-line-removing workflow.</li>\n<li>Make it so oleans are generated after the <code>upgrade-lean</code> workflow runs.</li>\n<li>Update <code>leanproject</code>.<br>\na. Make it so <code>leanproject</code> doesn't depend on <code>leanpkg</code>.<br>\nb. Make it so <code>leanproject</code> can do everything <code>leanpkg</code> does.<br>\nc. Update <code>leanproject</code> to <code>get-cache</code> from the URL stored in <code>leanpkg.toml</code></li>\n</ol>\n<p>We decided not to update <code>leanpkg</code>.</p>\n<p>My plan is to do 1 and 2 this weekend; the <code>leanproject</code> changes I'm also happy to do, hopefully this weekend, but no guarantees, and also allow time for some back-and-forth with the <code>leanproject</code> maintainers, as necessary.</p>",
        "id": 244528619,
        "sender_full_name": "Ben Toner",
        "timestamp": 1625124843
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"392126\">Ben Toner</span> <a href=\"#narrow/stream/113488-general/topic/CI.20for.20liquid.20tensor.20experiment/near/244526526\">said</a>:</p>\n<blockquote>\n<p>It's because the <code>upgrade_lean</code> workflow was the last thing commit to master and it doesn't store oleans... will fix within a couple of days.</p>\n</blockquote>\n<p>You mean the latest commit at the time came from CI and Github doesn't run actions on commits made by other actions?</p>",
        "id": 244575724,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1625149966
    },
    {
        "content": "<p>I think that's what happened anyway</p>",
        "id": 244575779,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1625149990
    },
    {
        "content": "<p>A general question about lean CI: mathlib uses <code>lean</code> directly in the action, but <a href=\"https://github.com/leanprover-contrib/lean-build-action\">https://github.com/leanprover-contrib/lean-build-action</a> uses a docker container. Is there a reason that the latter uses a container?</p>",
        "id": 244575844,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625150017
    },
    {
        "content": "<p>Probably because I was new to writing actions at that point and was just copying something else that did things like that, I don't really remember</p>",
        "id": 244576301,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1625150166
    },
    {
        "content": "<p>I ask only because I was looking at moving the problem matcher to that repo, but it looks quite different to the one used by mathlib and presumably the stuff being done to lean-liquid</p>",
        "id": 244576386,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625150197
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110596\">Rob Lewis</span> <a href=\"#narrow/stream/113488-general/topic/CI.20for.20liquid.20tensor.20experiment/near/244575724\">said</a>:</p>\n<blockquote>\n<p>You mean the latest commit at the time came from CI and Github doesn't run actions on commits made by other actions?</p>\n</blockquote>\n<p>I think it's that currently the \"continuous integration\" workflow that uploads to Azure triggers on push events, and the \"upgrade lean\" workflow doesn't generate a push event. Will be easy to fix... I was just wanting to think about the best way to do it a bit first.</p>",
        "id": 244576897,
        "sender_full_name": "Ben Toner",
        "timestamp": 1625150408
    },
    {
        "content": "<p>The build action is supposed to be just a drop in thing, mathlib and lean-liquid do more complicated stuff so I guess it makes sense they call lean manually. Also mathlib's CI way predates the build action</p>",
        "id": 244576921,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1625150417
    },
    {
        "content": "<p>But I'm also very sure that the build action isn't optimal</p>",
        "id": 244576946,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1625150433
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span>, can you please help me with another thing? Not urgent.</p>\n<p>The reason the \"bump mathlib\" action doesn't trigger the CI build is as described by you here: <a href=\"https://github.com/leanprover-contrib/lean-upgrade-action/blame/master/README.md#L76\">https://github.com/leanprover-contrib/lean-upgrade-action/blame/master/README.md#L76</a>.</p>\n<p>The best way to fix this is to use a personal access token. Can you please create one, say from the <code>leanprover-community-bot</code> account or some other suitable account?</p>\n<p>Steps (not so much for you but to document):</p>\n<ol>\n<li>Go to <a href=\"https://github.com/settings/tokens\">https://github.com/settings/tokens</a> and generate a new token with the <code>public_repo</code> scope.</li>\n<li>Add token as the <code>PA_TOKEN</code> secret in the <code>lean-liquid</code> repo.</li>\n<li>The account also needs permission to push to <code>lean-liquid</code> master.</li>\n</ol>\n<p>After that is in place one of us can add this to master: <a href=\"https://github.com/leanprover-community/lean-liquid/commit/c8608fc9e40c2d487be54657e7280d6fd31c351f\">https://github.com/leanprover-community/lean-liquid/commit/c8608fc9e40c2d487be54657e7280d6fd31c351f</a> . (I also need the token for the <code>nolints.txt</code> workflow.) Thanks!</p>",
        "id": 244867184,
        "sender_full_name": "Ben Toner",
        "timestamp": 1625416712
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"392126\">@Ben Toner</span> I think I've set things up the way you asked. Let me know if you need anything else!</p>",
        "id": 244868401,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1625418562
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110596\">Rob Lewis</span> <a href=\"#narrow/stream/113488-general/topic/CI.20for.20liquid.20tensor.20experiment/near/244471610\">said</a>:</p>\n<blockquote>\n<p>For the time being, something like this should replicate it.</p>\n<p><div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>wget https://oleanstorage.azureedge.net/mathlib/lean-liquid/<span class=\"s2\">\"</span><span class=\"k\">$(</span>git rev-parse HEAD<span class=\"k\">)</span><span class=\"s2\">\"</span>.tar.xz <span class=\"o\">&amp;&amp;</span> tar -xf <span class=\"s2\">\"</span><span class=\"k\">$(</span>git rev-parse HEAD<span class=\"k\">)</span><span class=\"s2\">\"</span>.tar.xz\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>I just tried this <code>wget</code> line again, and it works great! Only thing I needed to compile was the gptf dependency.</p>",
        "id": 244897519,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1625465194
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"392126\">@Ben Toner</span> <span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span> Thank you so much for making this possible!</p>",
        "id": 244897530,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1625465209
    },
    {
        "content": "<p>Linting:</p>\n<ul>\n<li>More linters are now enabled. You can change which linters are enabled by editing <a href=\"https://github.com/leanprover-community/lean-liquid/blob/5a4512db1e8538c48d5636ede98cc15188aa5af7/scripts/lint_project.lean#L94\">this</a> list.</li>\n<li>There is now a <code>nolints.txt</code> file. It is kept updated each night.</li>\n<li>Commits that cause new linting errors will now cause the build to fail. You can change this behaviour <a href=\"https://github.com/leanprover-community/lean-liquid/blob/5a4512db1e8538c48d5636ede98cc15188aa5af7/.github/workflows/build.yml#L126\">here</a>.</li>\n<li>If a commit results in a new linting error, as an alternative to fixing it you can manually trigger the <a href=\"https://github.com/leanprover-community/lean-liquid/actions/workflows/nolints.yml\">workflow</a> that updates <code>nolints.txt</code>.</li>\n</ul>\n<p>The <code>olean</code> cache:</p>\n<ul>\n<li>I've added a script <code>scripts/get-cache.sh</code> which does what it is intended that <code>leanproject get-cache</code> will do, in order to make the <code>leanproject</code> work less pressing:</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code> ./scripts/get-cache.sh\nLooking for local mathlib oleans\nFound local mathlib oleans\nTrying to download project cache\nFound oleans at https://oleanstorage.azureedge.net/mathlib/lean-liquid/\nExtracted oleans into src and deleted archive\n</code></pre></div>",
        "id": 245026576,
        "sender_full_name": "Ben Toner",
        "timestamp": 1625571900
    },
    {
        "content": "<p>Note that with recent changes to <code>mathlibtools/master</code> there's now a clear spot to fill in for other olean cache servers:</p>\n<p><a href=\"https://github.com/leanprover-community/mathlib-tools/blob/111e0dc7b0be85d418326cb002b0c0c473803cd3/mathlibtools/lib.py#L627-L633\">https://github.com/leanprover-community/mathlib-tools/blob/111e0dc7b0be85d418326cb002b0c0c473803cd3/mathlibtools/lib.py#L627-L633</a></p>\n<p>I think there's probably also some cleanup to do regarding whether <code>self.cache</code> refers to the mathlib cache url (when mathlib is a dependency) or the cache url of the active lean project.</p>\n<p>Regarding <code>leanpkg</code>; can we just create a separate <code>leanpkg-cache.toml</code> file that contains the cache URLs, then we don't have to worry about the current toml being overwritten?</p>",
        "id": 253743877,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631886255
    },
    {
        "content": "<p>I admit I didn't read the whole conversation, so the answer can very well be already here: is there a way to fetch the olean for the LTE using <code>leanproject</code> or something else? On my machine it doesn't seem to do it automatically.</p>",
        "id": 257179481,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1634033852
    },
    {
        "content": "<p><code>./scripts/get-cache.sh</code> in the LTE directory will get you some caches.</p>",
        "id": 257179690,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634033969
    },
    {
        "content": "<p>I think this uses <code>leanproject</code> under the hood, and at some point <code>leanproject</code> will do everything.</p>",
        "id": 257179785,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634034012
    },
    {
        "content": "<p>It doesn't use leanproject under the hood</p>",
        "id": 257180001,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1634034129
    },
    {
        "content": "<p>(which means it doesn't backtrack to find older caches)</p>",
        "id": 257180095,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1634034180
    },
    {
        "content": "<p>Aah, it only uses <code>leanproject</code> to get caches for mathlib, and does something custom for LTE</p>",
        "id": 257180859,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634034590
    },
    {
        "content": "<p>there is also <code>./scripts/fetch_olean_cache.sh</code> which is a longer script.</p>",
        "id": 257180990,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634034645
    },
    {
        "content": "<p>It would be good if this functionality gets integrated into LP at some point</p>",
        "id": 257181022,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634034668
    },
    {
        "content": "<p>We can maybe add this script to the readme file in LTE?</p>",
        "id": 257181560,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1634034990
    },
    {
        "content": "<p>Sure, go ahead!</p>",
        "id": 257181576,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634035001
    },
    {
        "content": "<p>Lunch first of all <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 257181604,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1634035018
    }
]