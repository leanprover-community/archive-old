[
    {
        "content": "<p>What are the available functions to unfold definitions inside of an expression? Currently I'm using <code>tactic.whnf</code> but sometimes it unfolds too much. An example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">uncurry</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">xy</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"bp\">×</span><span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"n\">xy.1</span> <span class=\"n\">xy.2</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">swap</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"n\">uncurry</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Y</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- Case 1: uncurry does not get unfolded</span>\n<span class=\"kd\">run_cmd</span> <span class=\"k\">do</span>\n  <span class=\"n\">tactic.to_expr</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">swap</span><span class=\"o\">)</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">tactic.whnf</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">tactic.trace</span>\n<span class=\"c1\">-- λ {X Y : Type}, uncurry (λ (x : X) (y : Y), (y, x))</span>\n\n<span class=\"c1\">-- Case 2: uncurry gets unfolded</span>\n<span class=\"kd\">run_cmd</span> <span class=\"k\">do</span>\n  <span class=\"n\">tactic.to_expr</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">swap</span> <span class=\"n\">ℕ</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">tactic.whnf</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">tactic.trace</span>\n<span class=\"c1\">-- λ (xy : ℕ × ℤ), (λ (x : ℕ) (y : ℤ), (y, x)) xy.fst xy.snd</span>\n</code></pre></div>\n<p>In the second case, I would like to unfold only swap i.e. probably some kind of variant of <code>tactic.whnf</code> that does not unfold recursively.</p>",
        "id": 241362103,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1622709380
    },
    {
        "content": "<p>does <code>dunfold swap</code> do what you want?</p>",
        "id": 241362544,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1622709662
    },
    {
        "content": "<p>There's also <code>delta swap</code></p>",
        "id": 241363613,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622710373
    },
    {
        "content": "<p>Thank! <code>tactic.delta</code> did the trick for me. I do not know the <code>name</code> of the constant to unfold every time, so I have defined<code>head_delta</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">head_delta</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"n\">expr</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">expr.const</span> <span class=\"n\">name</span> <span class=\"n\">lvl</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">tactic.delta</span> <span class=\"o\">[</span><span class=\"n\">name</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">expr.const</span> <span class=\"n\">name</span> <span class=\"n\">lvl</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">expr.app</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">f</span> <span class=\"bp\">←</span> <span class=\"n\">head_delta</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">expr.app</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"n\">tactic.fail</span> <span class=\"o\">(</span><span class=\"s2\">\"Failed to expand head of \"</span> <span class=\"bp\">++</span> <span class=\"n\">to_string</span> <span class=\"n\">e</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>And this works great in my use case.</p>",
        "id": 241697177,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1622993912
    }
]