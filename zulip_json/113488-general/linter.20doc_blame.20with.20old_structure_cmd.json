[
    {
        "content": "<p>The following snippet triggers the \"missing doc string\" complaint from the linter:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">set_option</span> <span class=\"n\">old_structure_cmd</span> <span class=\"n\">true</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">- Foo structure -/</span>\n<span class=\"kn\">structure</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">- Bar structure -/</span>\n<span class=\"kn\">structure</span> <span class=\"n\">bar</span> <span class=\"kn\">extends</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"bp\">#</span><span class=\"n\">lint</span> <span class=\"c1\">-- #print bar.to_foo /- def missing doc string -/</span>\n</pre></div>",
        "id": 193763256,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1586777111
    },
    {
        "content": "<p>then don't use <code>old_structure_cmd</code></p>",
        "id": 193763345,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586777182
    },
    {
        "content": "<p>I note that even though Lean automatically created <code>bar.to_foo</code> regardless of whether I'm using the <code>old_structure_cmd</code>, it is only when this option is true (as above) that the linter complains.</p>",
        "id": 193763348,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1586777185
    },
    {
        "content": "<p>well it's not wrong</p>",
        "id": 193763359,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586777194
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> Oh really? It's much more convenient in some situations I think. I'd be happy to be corrected!</p>",
        "id": 193763383,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1586777216
    },
    {
        "content": "<p>I was referring to the old joke \"Doctor I feel painful when I breathe; doctor: then don't breathe\"</p>",
        "id": 193763418,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586777256
    },
    {
        "content": "<p>I would hate for this to be the reason you choose one method over the other</p>",
        "id": 193763420,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586777258
    },
    {
        "content": "<p>I had scanned some old threads here before deciding to use it and I <em>thought</em> the current wisdom was that it's fine to use it, and even that the name is a bit of a misnomer but really I'm far from sure.</p>",
        "id": 193763421,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1586777259
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> Ah I see. <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 193763432,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1586777281
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Noted, thanks. Perhaps I'll add an appropriate <code>nolint</code> statement and allow the advice to flow in the code review.</p>",
        "id": 193763481,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1586777312
    },
    {
        "content": "<p>Thank you both.</p>",
        "id": 193763491,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1586777323
    },
    {
        "content": "<p>you can also document it</p>",
        "id": 193763497,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586777327
    },
    {
        "content": "<p>there is a command like <code>add_doc_string</code> for adding doc strings to automatic definitions</p>",
        "id": 193763513,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586777352
    },
    {
        "content": "<p>The linter generally ignores auto-generated stuff but I guess this doesn't get flagged as auto-generated.</p>",
        "id": 193763523,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1586777366
    },
    {
        "content": "<p>It's called <code>add_decl_doc</code>.</p>",
        "id": 193763529,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1586777370
    },
    {
        "content": "<p>OK thanks. It feels a bit funny to have to add a doc string to an auto-generated function but I am still glad to learn about <code>add_decl_doc</code>.</p>",
        "id": 193763607,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1586777432
    },
    {
        "content": "<p>You're right that the name is terrible. It implies it's deprecated, whereas in fact for part of the structure heirarchy it's exactly what we want.</p>",
        "id": 193763895,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586777734
    },
    {
        "content": "<p>PR?</p>",
        "id": 193764064,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586777888
    },
    {
        "content": "<p>How about <code>flat_structure</code> instead</p>",
        "id": 193764072,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586777904
    },
    {
        "content": "<p>I literally just created one here: <a href=\"https://github.com/leanprover-community/mathlib/pull/2404\" title=\"https://github.com/leanprover-community/mathlib/pull/2404\">https://github.com/leanprover-community/mathlib/pull/2404</a></p>",
        "id": 193764075,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1586777906
    },
    {
        "content": "<p>(I'm currently scanning it to make sure I haven't done anything stupid before I request review.)</p>",
        "id": 193764083,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1586777921
    },
    {
        "content": "<p>I have not previously seen <code>flat_structure</code>. I'd love to learn about it. I just grepped the Mathlib source but didn't find it anywhere!</p>",
        "id": 193764108,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1586777968
    },
    {
        "content": "<p>I just made the name up</p>",
        "id": 193764114,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586777980
    },
    {
        "content": "<p>as an alternative to <code>old_structure_cmd</code> which has wrong connotations</p>",
        "id": 193764124,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586777996
    },
    {
        "content": "<p>Oh I see: my comment about the possible misnomer. Yeah, <code>flat_structure</code> is nice</p>",
        "id": 193764127,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1586777999
    },
    {
        "content": "<p>I'd vote for that over <code>old_structure_cmd</code> for sure.</p>",
        "id": 193764169,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1586778010
    }
]