[
    {
        "content": "<p>I would have naively expected that <code>exact rfl</code> and <code>apply rfl</code> always had identical behaviour. Curiously they don't:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">factorial</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">factorial</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">factorial</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">add_lt_add_of_lt_of_le</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">has_le.le.trans_lt</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">nat.le.intro</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- now there are 3 goals remaining</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>while</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">factorial</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">factorial</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">factorial</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">add_lt_add_of_lt_of_le</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">has_le.le.trans_lt</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">nat.le.intro</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- now there are 4 goals remaining</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>After the <code>exact rfl</code>, the first two goals are actually duplicates (i.e. solving either solves both).</p>",
        "id": 229964208,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1615515631
    },
    {
        "content": "<p>Does <code>skip</code> also collapse the two?</p>",
        "id": 229964663,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615515976
    },
    {
        "content": "<p>Or any other non-solving step</p>",
        "id": 229964692,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615516005
    },
    {
        "content": "<p>No, no effect.</p>",
        "id": 229965087,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1615516334
    },
    {
        "content": "<p>The two goals after the <code>exact rfl</code> are indeed duplicates: they are literally the same mvar, not just instantiated to a common mvar</p>",
        "id": 229966355,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615517372
    },
    {
        "content": "<p>This came up a month or two ago in some other tactic, didn't it?</p>",
        "id": 229966515,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615517484
    },
    {
        "content": "<p>I believe this is because the unification of <code>rfl : i + ?m_1 = ?m_2</code> results in assigning <code>?m_2</code> and elaborating <code>@rfl (i + ?m_1)</code>, which causes <code>?m_1</code> to be kicked back as a subgoal; since <code>exact</code> runs on a focused state it doesn't realize that <code>?m_1</code> is already a goal</p>",
        "id": 229966523,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615517489
    },
    {
        "content": "<p>I don't think I have seen this particular issue before, although I will remark that <code>apply</code> and <code>exact</code> often differ in the details, so I don't have the same \"naive expectation\" as Scott professes</p>",
        "id": 229966619,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615517548
    },
    {
        "content": "<p><code>convert</code> could also occasionally leave two copies of the same mvar as goals but probably for different reasons</p>",
        "id": 229983153,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1615530396
    }
]