[
    {
        "content": "<p>I just noticed a very clever trick that was used in a Coq development. We can define the following function:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"kn\">reducible</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">hidden</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"n\">a</span>\n</pre></div>\n\n\n<p>This obviously isn't a very ergonomic function to write directly, but it can be used in tactics that have to manipulate large proof states and display them to the user, without getting in the way of any automation. (I should investigate if this is an appropriate use of <code>abbreviation</code>.) For example, we could have a tactic <code>hide x</code> which <code>change</code>s the type of <code>x : T</code> to <code>x : @hidden _ T</code>. The zero arg version could just do this for all assumptions whose pp is above a certain length. The Coq example was using this when proving theorems about large programs, to hide the \"rest\" of the program when working one statement at a time.</p>",
        "id": 151838238,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1544882509
    },
    {
        "content": "<p>demo:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"kn\">reducible</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">hidden</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"n\">a</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">tactic</span>\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">repl</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"n\">expr</span>\n<span class=\"bp\">|</span> <span class=\"n\">e</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">do</span>\n  <span class=\"n\">t</span> <span class=\"err\">←</span> <span class=\"n\">infer_type</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n  <span class=\"n\">expr</span><span class=\"bp\">.</span><span class=\"n\">sort</span> <span class=\"n\">u</span> <span class=\"err\">←</span> <span class=\"n\">infer_type</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n  <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">expr</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"n\">expr</span><span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"bp\">``</span><span class=\"n\">hidden</span> <span class=\"o\">[</span><span class=\"n\">u</span><span class=\"o\">])</span> <span class=\"n\">t</span> <span class=\"n\">e</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">expr</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">do</span> <span class=\"n\">f&#39;</span> <span class=\"err\">←</span> <span class=\"n\">repl</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">x&#39;</span> <span class=\"err\">←</span> <span class=\"n\">repl</span> <span class=\"n\">x</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">f&#39;</span> <span class=\"n\">x&#39;</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">expr</span><span class=\"bp\">.</span><span class=\"n\">lam</span> <span class=\"n\">n</span> <span class=\"n\">b</span> <span class=\"n\">d</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">do</span>\n  <span class=\"n\">var</span> <span class=\"err\">←</span> <span class=\"n\">mk_local&#39;</span> <span class=\"n\">n</span> <span class=\"n\">b</span> <span class=\"n\">d</span><span class=\"o\">,</span>\n  <span class=\"n\">e&#39;</span> <span class=\"err\">←</span> <span class=\"n\">repl</span> <span class=\"o\">(</span><span class=\"n\">expr</span><span class=\"bp\">.</span><span class=\"n\">instantiate_var</span> <span class=\"n\">e</span> <span class=\"n\">var</span><span class=\"o\">)</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n  <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">expr</span><span class=\"bp\">.</span><span class=\"n\">lam</span> <span class=\"n\">n</span> <span class=\"n\">b</span> <span class=\"n\">d</span> <span class=\"o\">(</span><span class=\"n\">expr</span><span class=\"bp\">.</span><span class=\"n\">abstract_local</span> <span class=\"n\">e&#39;</span> <span class=\"n\">var</span><span class=\"bp\">.</span><span class=\"n\">local_uniq_name</span><span class=\"o\">))</span>\n<span class=\"bp\">|</span> <span class=\"n\">e</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">return</span> <span class=\"n\">e</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">elide</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"n\">t</span> <span class=\"err\">←</span> <span class=\"n\">target</span><span class=\"o\">,</span>\n  <span class=\"n\">t&#39;</span> <span class=\"err\">←</span> <span class=\"n\">repl</span> <span class=\"n\">t</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">change</span> <span class=\"n\">t&#39;</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">dunfold</span> <span class=\"n\">has_add</span><span class=\"bp\">.</span><span class=\"n\">add</span><span class=\"o\">,</span> <span class=\"n\">delta</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">add</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- ⊢ nat.brec_on 2</span>\n  <span class=\"c1\">--       (λ (a : ℕ) (_F : nat.below (λ (a : ℕ), ℕ → ℕ) a) (a_1 : ℕ),</span>\n  <span class=\"c1\">--         (λ (a a_1 : ℕ) (_F : nat.below (λ (a : ℕ), ℕ → ℕ) a_1),</span>\n  <span class=\"c1\">--             nat.cases_on a_1 (λ (_F : nat.below (λ (a : ℕ), ℕ → ℕ) 0), id_rhs ℕ a)</span>\n  <span class=\"c1\">--               (λ (a_1 : ℕ) (_F : nat.below (λ (a : ℕ), ℕ → ℕ) (nat.succ a_1)),</span>\n  <span class=\"c1\">--                 id_rhs ℕ (nat.succ ((_F.fst).fst a)))</span>\n  <span class=\"c1\">--               _F)</span>\n  <span class=\"c1\">--           a_1</span>\n  <span class=\"c1\">--           a</span>\n  <span class=\"c1\">--           _F)</span>\n  <span class=\"c1\">--       2 =</span>\n  <span class=\"c1\">--     4</span>\n  <span class=\"n\">elide</span> <span class=\"mi\">5</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- ⊢ nat.brec_on 2 (λ (a : ℕ) (_F : nat.below (λ (a : ℕ), ℕ → ℕ) a) (a_1 : ℕ), hidden) 2 = 4</span>\n  <span class=\"n\">refl</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 151838734,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1544883590
    },
    {
        "content": "<p>that's pretty cool :-)</p>",
        "id": 151839702,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1544885586
    },
    {
        "content": "<p>It looks pretty cool. What is the exact meaning of the numeric parameter?</p>",
        "id": 151841751,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1544889618
    },
    {
        "content": "<p>it's the depth at which to start replacing subterms by <code>hidden</code></p>",
        "id": 151841879,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1544889908
    },
    {
        "content": "<p>so higher means less hidden</p>",
        "id": 151841932,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1544889992
    },
    {
        "content": "<p>Would it be possible to have a version which replaces proofs by <code>proof_of P</code>, where <code>@[reducible] def proof_of (P : Prop) {p : P} := p</code></p>",
        "id": 154049336,
        "sender_full_name": "Reid Barton",
        "timestamp": 1546186232
    },
    {
        "content": "<p>and then maybe add some notation for <code>proof_of P</code> to match <code>\\f&lt;P\\f&gt;</code></p>",
        "id": 154049346,
        "sender_full_name": "Reid Barton",
        "timestamp": 1546186259
    },
    {
        "content": "<p>I thought that some combination of <code>pp</code> options was supposed to do this already, but I never figured out how</p>",
        "id": 154049362,
        "sender_full_name": "Reid Barton",
        "timestamp": 1546186287
    },
    {
        "content": "<p>well, just replacing that on its own won't work since it's still a prop so it gets displayed as <code>_</code> anyway</p>",
        "id": 154052011,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1546191196
    },
    {
        "content": "<p>Oh dang</p>",
        "id": 154052013,
        "sender_full_name": "Reid Barton",
        "timestamp": 1546191214
    },
    {
        "content": "<p>but if you turn off <code>pp.proofs</code> then you can see it</p>",
        "id": 154052015,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1546191227
    },
    {
        "content": "<p>Then again, I think tactics can change options so you could have a tactic like <code>elide</code> that turns of <code>pp.proofs</code> at the same time as the replacement</p>",
        "id": 154052068,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1546191313
    },
    {
        "content": "<p>Oh, turn <em>off</em>? Okay, that's one thing that confused me</p>",
        "id": 154052069,
        "sender_full_name": "Reid Barton",
        "timestamp": 1546191320
    },
    {
        "content": "<p>oh that's a good point, I forget the polarity</p>",
        "id": 154052072,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1546191343
    },
    {
        "content": "<p>and what difference does <code>reducible</code> make?</p>",
        "id": 154052111,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1546191364
    },
    {
        "content": "<p>actually now I'm doubly confused</p>",
        "id": 154052114,
        "sender_full_name": "Reid Barton",
        "timestamp": 1546191371
    },
    {
        "content": "<p>By experiment, I find that <code>set_option pp.proofs true</code> will display proofs</p>",
        "id": 154052117,
        "sender_full_name": "Reid Barton",
        "timestamp": 1546191398
    },
    {
        "content": "<p>but that's the default?</p>",
        "id": 154052118,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1546191410
    },
    {
        "content": "<p>Yes</p>",
        "id": 154052119,
        "sender_full_name": "Reid Barton",
        "timestamp": 1546191418
    },
    {
        "content": "<p>That is what is confusing me</p>",
        "id": 154052120,
        "sender_full_name": "Reid Barton",
        "timestamp": 1546191421
    },
    {
        "content": "<p>At least, that's what the autocompletion menu claims is the default. But setting it to <code>true</code> still causes proofs to be printed, and <code>false</code> causes them to be elided (which they are by default)</p>",
        "id": 154052126,
        "sender_full_name": "Reid Barton",
        "timestamp": 1546191471
    },
    {
        "content": "<p>reducible doesn't matter much, but it makes these identity functions not interfere with other tactics</p>",
        "id": 154052128,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1546191479
    },
    {
        "content": "<p>also the option description is a bit interesting -</p>\n<blockquote>\n<p>(pretty printer) if set to false, the type will be displayed instead of the value for every proof appearing as an argument to a function</p>\n</blockquote>",
        "id": 154052178,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1546191539
    },
    {
        "content": "<p>Okay, that's where I saw it. I knew I'd seen it claimed somewhere that this feature already existed</p>",
        "id": 154052187,
        "sender_full_name": "Reid Barton",
        "timestamp": 1546191569
    },
    {
        "content": "<p>Maybe there are like... two options with the same name or something</p>",
        "id": 154052246,
        "sender_full_name": "Reid Barton",
        "timestamp": 1546191663
    },
    {
        "content": "<p>I think the description is outdated... it used to do that and I recall lobbying for the <code>_</code> behavior</p>",
        "id": 154052297,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1546191741
    },
    {
        "content": "<p>I'm not sure if the type display thing was removed or replaced</p>",
        "id": 154052301,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1546191765
    },
    {
        "content": "<p>at least in the original version it just put the type instead of the proof and it was really confusing because it wasn't typecorrect</p>",
        "id": 154052308,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1546191802
    },
    {
        "content": "<p>looking at the code, I see no evidence that it does anything other than put <code>_</code> in places, and only when <code>pp.proofs = false</code></p>",
        "id": 154052357,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1546191878
    },
    {
        "content": "<p>I see. That does sound confusing, if there was nothing distinguishing the types of proofs from actual terms</p>",
        "id": 154052437,
        "sender_full_name": "Reid Barton",
        "timestamp": 1546192056
    },
    {
        "content": "<p>but I still can't figure out how the default turns out to be <code>false</code>, the code says it's <code>true</code></p>",
        "id": 154052486,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1546192159
    },
    {
        "content": "<p>truth is an illusion</p>",
        "id": 154052595,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1546192413
    },
    {
        "content": "<p>There is no constant default: <span class=\"emoji emoji-263a\" title=\"smile\">:smile:</span> <a href=\"https://github.com/leanprover/lean/blob/30d883efef422facab3bf351d9fcff90c943298f/src/frontends/lean/pp.cpp#L1911-L1917\" target=\"_blank\" title=\"https://github.com/leanprover/lean/blob/30d883efef422facab3bf351d9fcff90c943298f/src/frontends/lean/pp.cpp#L1911-L1917\">https://github.com/leanprover/lean/blob/30d883efef422facab3bf351d9fcff90c943298f/src/frontends/lean/pp.cpp#L1911-L1917</a></p>",
        "id": 154052597,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1546192414
    },
    {
        "content": "<p>wtf is that special case</p>",
        "id": 154052639,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1546192499
    },
    {
        "content": "<p>so sneaky</p>",
        "id": 154052649,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1546192523
    },
    {
        "content": "<p>I guess this is so that <code>#print theorem</code> doesn't show <code>theorem thm : T := _</code> which would not be nice</p>",
        "id": 154052693,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1546192587
    }
]