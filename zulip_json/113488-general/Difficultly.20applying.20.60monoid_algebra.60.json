[
    {
        "content": "<p>We have a lemma <a href=\"https://leanprover-community.github.io/mathlib_docs/find/monoid_algebra.mul_apply\">docs#monoid_algebra.mul_apply</a> that suggests there is a suitable <code>coe_to_fun</code> instance - yet I can't actually form a function expression using that type:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code> <span class=\"kn\">import</span> <span class=\"n\">data.monoid_algebra</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">grading_inv_fail1</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">monoid_algebra</span> <span class=\"n\">X</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">g.support</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">i</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">grading_inv_fail2</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">monoid_algebra</span> <span class=\"n\">X</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">g.support</span><span class=\"o\">,</span> <span class=\"o\">((</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">grading_inv_works</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">monoid_algebra</span> <span class=\"n\">X</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">g.support</span><span class=\"o\">,</span> <span class=\"n\">g.to_fun</span> <span class=\"n\">i</span>\n</code></pre></div>\n\n<p>Why is the linked lemma statement even legal? Do I just need to add a missing <code>has_coe_to_fun</code> instance?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_to_fun</span> <span class=\"o\">(</span><span class=\"n\">monoid_algebra</span> <span class=\"n\">X</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">finsupp.has_coe_to_fun</span>\n</code></pre></div>",
        "id": 211594391,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1601368891
    },
    {
        "content": "<p>I believe this might have to do with it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">local</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">reducible</span><span class=\"o\">]</span> <span class=\"n\">monoid_algebra</span>\n</code></pre></div>",
        "id": 211596019,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1601370003
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> for adding <del>a <code>has_coe</code> and</del> a <code>has_coe_to_fun</code> instance.</p>",
        "id": 211596114,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1601370023
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/blob/0bb5e5d/src/data/monoid_algebra.lean#L61\">https://github.com/leanprover-community/mathlib/blob/0bb5e5d/src/data/monoid_algebra.lean#L61</a></p>",
        "id": 211596133,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1601370047
    },
    {
        "content": "<p>Done in <a href=\"https://github.com/leanprover-community/mathlib/issues/4315\">#4315</a></p>",
        "id": 211603855,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1601375596
    }
]