[
    {
        "content": "<p>Why is <code>ordered_comm_monoid</code> additive? I thought <code>{x : real | x ≥ 1}</code> is a really nice ordered commutative monoid...</p>",
        "id": 134890643,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538243689
    },
    {
        "content": "<p>Because most ordered comm monoids are additive, like reals, ints, nats, rats, with_bot nat</p>",
        "id": 134890739,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1538243905
    },
    {
        "content": "<p>Sure, but we could still have the <code>add</code> in the name right? And I think there are enough examples where they aren't additive, like positive reals, nats, positive rats...</p>",
        "id": 134890797,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538244021
    },
    {
        "content": "<p>That makes sense. Btw, isn't <code>{x : real | x ≥ 1}</code> a commutative group?</p>",
        "id": 134894040,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538251048
    },
    {
        "content": "<p>inverse?</p>",
        "id": 134894089,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538251143
    },
    {
        "content": "<p>Is your group operation (x, y) -&gt; (x - 1)(y - 1) + 1 or something crazy like that?</p>",
        "id": 134894526,
        "sender_full_name": "Sebastian Zimmer",
        "timestamp": 1538252005
    },
    {
        "content": "<p>that would make 1 have no inverse</p>",
        "id": 134894577,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538252137
    },
    {
        "content": "<p>ah good point</p>",
        "id": 134894578,
        "sender_full_name": "Sebastian Zimmer",
        "timestamp": 1538252155
    },
    {
        "content": "<p>Right, somehow, the fact that the inverse is less than one escaped me. You'd need { x : real | x &gt; 0 } for a group.</p>",
        "id": 134894978,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538252798
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> How should I interpret the last line of this docstring?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\">- An ordered commutative monoid is a commutative monoid</span>\n<span class=\"cm\">  with a partial order such that multiplication is an order embedding, i.e.</span>\n<span class=\"cm\">  `a * b ≤ a * c ↔ b ≤ c`. These monoids are automatically cancellative. -/</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">ancestor</span> <span class=\"n\">comm_monoid</span> <span class=\"n\">partial_order</span><span class=\"o\">]</span>\n<span class=\"n\">class</span> <span class=\"n\">ordered_comm_monoid</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"n\">comm_monoid</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">partial_order</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">mul_le_mul_left</span>       <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">lt_of_mul_lt_mul_left</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>Does this mean that this class is supposed to replace <code>ordered_cancel_add_comm_monoid</code> which was recently liberated from core?</p>",
        "id": 198864416,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590569008
    },
    {
        "content": "<p>I think this is a bad doc string</p>",
        "id": 198864468,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590569041
    },
    {
        "content": "<p>it looks like it was copied from something else</p>",
        "id": 198864523,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590569050
    },
    {
        "content": "<p>Shall I just remove that sentence?</p>",
        "id": 198864592,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590569086
    },
    {
        "content": "<p>The first sentence also looks fishy</p>",
        "id": 198864609,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590569098
    },
    {
        "content": "<p>is the biconditional provable?</p>",
        "id": 198864626,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590569107
    },
    {
        "content": "<p>what is <code>ancestor</code>?</p>",
        "id": 198864813,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590569213
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/ordered_comm_monoid/near/198864626\">said</a>:</p>\n<blockquote>\n<p>is the biconditional provable?</p>\n</blockquote>\n<p>Je ne sais pas.</p>",
        "id": 198864830,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590569229
    },
    {
        "content": "<p>I haven't really thought about this.</p>",
        "id": 198864843,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590569235
    },
    {
        "content": "<p>it's not listed in the immediate theorems so I would guess no</p>",
        "id": 198864852,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590569241
    },
    {
        "content": "<p>yup</p>",
        "id": 198864858,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590569247
    },
    {
        "content": "<p><code>ancestor</code> is a workaround for the fact that an <code>old_structure_cmd</code> doesn't track what structures it is extended from</p>",
        "id": 198864949,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590569294
    },
    {
        "content": "<p>It's not provable, since the ordering could be <code>=</code>.</p>",
        "id": 198865001,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590569336
    },
    {
        "content": "<p>I think it has been pointed out before that this docstring was wrong</p>",
        "id": 198865056,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590569371
    },
    {
        "content": "<p>I'm fixing it</p>",
        "id": 198865067,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590569382
    },
    {
        "content": "<p>Are we sure it's not the definition that's wrong?</p>",
        "id": 198865077,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590569395
    },
    {
        "content": "<p>well, the word <code>cancel</code> is notably absent</p>",
        "id": 198865166,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590569436
    },
    {
        "content": "<p>so I'm pretty sure this is deliberate</p>",
        "id": 198865182,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590569447
    },
    {
        "content": "<p>I think it's supposed to be used as an additive-only version of ordered semirings that are not cancellative, like <code>with_top nat</code></p>",
        "id": 198865247,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590569499
    },
    {
        "content": "<p>or <code>fin 37</code> with saturating addition</p>",
        "id": 198865288,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590569517
    },
    {
        "content": "<p>How is this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\">- An ordered commutative monoid is a commutative monoid</span>\n<span class=\"cm\">with a partial order such that</span>\n<span class=\"cm\">  * `a ≤ b → c * a ≤ c * b` (multiplication is monotone)</span>\n<span class=\"cm\">  * `a * b &lt; a * c → b &lt; c`.</span>\n<span class=\"cm\">-/</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">ancestor</span> <span class=\"n\">comm_monoid</span> <span class=\"n\">partial_order</span><span class=\"o\">]</span>\n<span class=\"n\">class</span> <span class=\"n\">ordered_comm_monoid</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"n\">comm_monoid</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">partial_order</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">mul_le_mul_left</span>       <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">lt_of_mul_lt_mul_left</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 198865369,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590569550
    },
    {
        "content": "<p>You can read the second condition as saying that <code>not lt</code> is also monotone</p>",
        "id": 198865431,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590569592
    },
    {
        "content": "<p>Would you like me to add that?</p>",
        "id": 198865497,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590569628
    },
    {
        "content": "<p>it would make sense given the presentation</p>",
        "id": 198865533,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590569642
    },
    {
        "content": "<p>why can't I <a href=\"https://github.com/leanprover-community/mathlib/search?q=ordered_comm_monoid&amp;unscoped_q=ordered_comm_monoid\">find <code>ordered_comm_monoid</code></a>?</p>",
        "id": 198865561,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590569655
    },
    {
        "content": "<p>look for <code>ordered_add_comm_monoid</code></p>",
        "id": 198865580,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590569667
    },
    {
        "content": "<p>I assume Johan is in the middle of a refactor to make a multiplicative version</p>",
        "id": 198865617,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590569694
    },
    {
        "content": "<p>hence the questions about <code>one_le -&gt; nonneg</code></p>",
        "id": 198865650,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590569710
    },
    {
        "content": "<p>What's an example of something with the first condition but not the second?</p>",
        "id": 198865657,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590569715
    },
    {
        "content": "<p>that's why the second condition is there</p>",
        "id": 198865676,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590569726
    },
    {
        "content": "<p>it's basically always true, but it's only redundant if the order is total</p>",
        "id": 198865710,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590569751
    },
    {
        "content": "<p>I think an example is fin 2 x fin 2 with saturating pointwise addition and the product partial order. Let <code>a = (1,0)</code>, <code>b = (1,0)</code> and <code>c = (0,1)</code>. Then <code>a + b = (1,0) &lt; a + c = (1,1)</code>, but <code>¬ (b &lt; c)</code>.</p>",
        "id": 198866952,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590570536
    },
    {
        "content": "<p>That said, this property might be too strong, effectively saying that the order is total without saying it</p>",
        "id": 198867526,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590570933
    },
    {
        "content": "<p>It seems to me that the second condition doesn't belong there but it happens to be true for the instances we have, mostly because they are totally ordered</p>",
        "id": 198867613,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590570987
    },
    {
        "content": "<p>right, so it might be better to upgrade the class so that it assumes a total order</p>",
        "id": 198867652,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590571019
    },
    {
        "content": "<p>I'd claim <code>ordered_comm_monoid</code> is just <code>mul_le_mul_left</code> and the other one is <code>totally_ordered_comm_monoid</code>, but maybe that's too long</p>",
        "id": 198867857,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590571172
    },
    {
        "content": "<p><code>linear_comm_monoid</code>?</p>",
        "id": 198867895,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590571201
    },
    {
        "content": "<p>or we could also call this one <code>partially_ordered_comm_monoid</code> if it's less used</p>",
        "id": 198868009,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590571263
    },
    {
        "content": "<p>I think I recall some parent instance getting near the 100 character limit... you couldn't even type it with the usual indentation style</p>",
        "id": 198868022,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590571280
    },
    {
        "content": "<p>these names don't seem to be very common anyways, so it's hard to say what's standard</p>",
        "id": 198868028,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590571286
    },
    {
        "content": "<p>in Lean 4 we will have full Java style then</p>",
        "id": 198868051,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590571319
    },
    {
        "content": "<p>I don't think you can put newlines in a namespaced name, can you?</p>",
        "id": 198868119,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590571353
    },
    {
        "content": "<p><code>comm_pomonoid</code></p>",
        "id": 198868344,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590571519
    },
    {
        "content": "<p>What is that vowel <code>i</code> doing there?</p>",
        "id": 198868578,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590571713
    },
    {
        "content": "<p>pomonod?</p>",
        "id": 198868644,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590571768
    },
    {
        "content": "<p>I would much rather make up quirky names for things we can't find in the literature than have overly descriptive 40+ character names</p>",
        "id": 198868761,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590571821
    },
    {
        "content": "<p>Well, Wikipedia has <a href=\"https://en.wikipedia.org/wiki/Ordered_semigroup\">https://en.wikipedia.org/wiki/Ordered_semigroup</a> (which even contains the word \"pomonoid\")</p>",
        "id": 198869822,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590572619
    }
]