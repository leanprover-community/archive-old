[
    {
        "content": "<div class=\"codehilite\"><pre><span></span>rewrite tactic failed, did not find instance of the pattern in the target expression\n  @has_add.add.{?l_1} ?m_2\n    (@add_semigroup.to_has_add.{?l_1} ?m_2\n       (@add_monoid.to_add_semigroup.{?l_1} ?m_2 (@add_group.to_add_monoid.{?l_1} ?m_2 ?m_3)))\n    (@has_smul.smul.{0 ?l_1} int ?m_2 (@add_group.has_smul.{?l_1} ?m_2 ?m_3) ?m_4 ?m_5)\n    (@has_smul.smul.{0 ?l_1} int ?m_2 (@add_group.has_smul.{?l_1} ?m_2 ?m_3) ?m_6 ?m_5)\n\n\n⊢ [..]\n          (@has_add.add.{u₁} α₁\n             (@add_semigroup.to_has_add.{u₁} α₁\n                (@add_monoid.to_add_semigroup.{u₁} α₁\n                   (@add_comm_monoid.to_add_monoid.{u₁} α₁\n                      (@add_comm_group.to_add_comm_monoid.{u₁} α₁\n                         (@module.to_add_comm_group.{u u₁} α α₁ (@comm_ring.to_ring.{u} α _inst_1) _inst_4)))))\n             (@has_smul.smul.{0 u₁} int α₁\n                (@add_group.has_smul.{u₁} α₁\n                   (@add_comm_group.to_add_group.{u₁} α₁\n                      (@module.to_add_comm_group.{u u₁} α α₁ (@comm_ring.to_ring.{u} α _inst_1) _inst_4)))\n                n\n                (f (@prod.fst.{v w} β γ (@prod.mk.{v w} β γ x y₁))\n                   (@prod.snd.{v w} β γ (@prod.mk.{v w} β γ x y₁))))\n             (@has_smul.smul.{0 u₁} int α₁\n                (@add_group.has_smul.{u₁} α₁\n                   (@add_comm_group.to_add_group.{u₁} α₁\n                      (@module.to_add_comm_group.{u u₁} α α₁ (@comm_ring.to_ring.{u} α _inst_1) _inst_4)))\n                n\n                (f (@prod.fst.{v w} β γ (@prod.mk.{v w} β γ x y₂))\n                   (@prod.snd.{v w} β γ (@prod.mk.{v w} β γ x y₂)))))\n</pre></div>",
        "id": 124840698,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523287388
    },
    {
        "content": "<p>Lean, it's right there</p>",
        "id": 124840702,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523287400
    },
    {
        "content": "<p>I know you want <code> (@add_group.to_add_monoid.{?l_1} ?m_2 ?m_3) </code></p>",
        "id": 124840706,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523287412
    },
    {
        "content": "<p>but isn't <code> (@add_comm_monoid.to_add_monoid.{u₁} α₁\n                      (@add_comm_group.to_add_comm_monoid.{u₁} α₁\n                         (@module.to_add_comm_group.{u u₁} α α₁ (@comm_ring.to_ring.{u} α _inst_1) _inst_4)) </code> good enough for you</p>",
        "id": 124840714,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523287433
    },
    {
        "content": "<p>they don't look the same to me</p>",
        "id": 124840765,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523287463
    },
    {
        "content": "<p>they're both justifying why I have addition</p>",
        "id": 124840772,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523287474
    },
    {
        "content": "<p>specifically here they're justifying why I have an add_monoid</p>",
        "id": 124840785,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523287498
    },
    {
        "content": "<p>can you do some BS \"change\" or \"show\" beforehand?</p>",
        "id": 124840789,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523287502
    },
    {
        "content": "<p>Is this one of these dreaded diamond things?</p>",
        "id": 124840855,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523287577
    },
    {
        "content": "<p>yes</p>",
        "id": 124840877,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523287620
    },
    {
        "content": "<p>I think the main concern is the one in the <code>gsmul</code> thread</p>",
        "id": 124840945,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523287697
    },
    {
        "content": "<p>overloading is not good</p>",
        "id": 124840947,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523287702
    },
    {
        "content": "<p>This is Mario's doing, right?</p>",
        "id": 124840956,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523287720
    },
    {
        "content": "<p>So probably he will have some sensible solution</p>",
        "id": 124840967,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523287742
    },
    {
        "content": "<p>well but that bullet wasn't in the global namespace before Lean updated</p>",
        "id": 124840979,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523287755
    },
    {
        "content": "<p>oh so it's Leo's doing?</p>",
        "id": 124840988,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523287776
    },
    {
        "content": "<p>I would say so</p>",
        "id": 124840991,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523287782
    },
    {
        "content": "<p>So probably Mario will have some clever workaround.</p>",
        "id": 124840993,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523287787
    },
    {
        "content": "<p>I blame myself for all this</p>",
        "id": 124841050,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523287812
    },
    {
        "content": "<p>you?</p>",
        "id": 124841057,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523287823
    },
    {
        "content": "<p>I should never have mentioned that <code>^</code> had the wrong associativity</p>",
        "id": 124841059,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523287826
    },
    {
        "content": "<p>what happened</p>",
        "id": 124841066,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523287838
    },
    {
        "content": "<p>I got annoyed that <code>2^3^2</code> was 64 not 512</p>",
        "id": 124841075,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523287857
    },
    {
        "content": "<p>so I opened an issue</p>",
        "id": 124841079,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523287862
    },
    {
        "content": "<p>and all of a sudden there were lots of changes to <code>^</code></p>",
        "id": 124841091,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523287877
    },
    {
        "content": "<p>I see</p>",
        "id": 124841100,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523287893
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean/issues/1951\" target=\"_blank\" title=\"https://github.com/leanprover/lean/issues/1951\">https://github.com/leanprover/lean/issues/1951</a></p>",
        "id": 124841109,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523287908
    },
    {
        "content": "<p>led to <a href=\"https://github.com/leanprover/lean/commit/d387103aa2bebfc98220733d9607a16663ec1ef2\" target=\"_blank\" title=\"https://github.com/leanprover/lean/commit/d387103aa2bebfc98220733d9607a16663ec1ef2\">https://github.com/leanprover/lean/commit/d387103aa2bebfc98220733d9607a16663ec1ef2</a></p>",
        "id": 124841168,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523287954
    },
    {
        "content": "<p>and then to <a href=\"https://github.com/leanprover/lean/commit/8f55ec4c50379c612731ced2424fd3eda0cf69a6\" target=\"_blank\" title=\"https://github.com/leanprover/lean/commit/8f55ec4c50379c612731ced2424fd3eda0cf69a6\">https://github.com/leanprover/lean/commit/8f55ec4c50379c612731ced2424fd3eda0cf69a6</a></p>",
        "id": 124841186,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523287994
    },
    {
        "content": "<p>and hmm I don't see the bullet</p>",
        "id": 124841195,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523288016
    },
    {
        "content": "<p>maybe it's not my fault after all</p>",
        "id": 124841205,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523288022
    },
    {
        "content": "<p>nice to see presheaves being pulled into core lean though</p>",
        "id": 124841287,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523288115
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean/commit/6e0bf8473b1980e6692a61a924b4c6eae195619d\" target=\"_blank\" title=\"https://github.com/leanprover/lean/commit/6e0bf8473b1980e6692a61a924b4c6eae195619d\">https://github.com/leanprover/lean/commit/6e0bf8473b1980e6692a61a924b4c6eae195619d</a></p>",
        "id": 124841289,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523288116
    },
    {
        "content": "<p>oh</p>",
        "id": 124841295,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523288132
    },
    {
        "content": "<p>what a subversion</p>",
        "id": 124841296,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523288134
    },
    {
        "content": "<p>Talking of presheaves, thanks for trying to fix that tensor product file. Presumably that's where this issue arose.</p>",
        "id": 124841420,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523288328
    },
    {
        "content": "<p>I removed the <code>has_smul</code> typeclass from <code>group_power</code>, which should fix the notation overloading problem. This puts us back at square one <code>local infix</code> type solutions for using <code>gsmul</code>, but it shouldn't interfere with the module smul notation now. I'm not sure about registering every abelian group as a Z-module with an instance, since module still uses an <code>out_param</code> for the scalar ring which might get stuck on <code>int</code></p>",
        "id": 124849118,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523299407
    }
]