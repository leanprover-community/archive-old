[
    {
        "content": "<p>Lean failed to find instances for <code>functor finset</code> and <code>has_seq finset</code>... But both shouldn't really be a problem right?<br>\n(I have no clue at all what <code>has_seq</code> is... so therefore I think <code>finset</code> ought to have such an instance <span aria-label=\"see no evil\" class=\"emoji emoji-1f648\" role=\"img\" title=\"see no evil\">:see_no_evil:</span> <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span> <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span>)</p>",
        "id": 160208983,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1551973666
    },
    {
        "content": "<p>I want to take the pairwise product of all elements in two finsets. And a long time ago someone on Zulip suggested that ought to be written like this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"o\">((</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span><span class=\"err\">$</span><span class=\"bp\">&gt;</span> <span class=\"n\">T₁</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"n\">T₂</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>But that code doesn't typecheck for finsets...</p>",
        "id": 160209201,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1551973807
    },
    {
        "content": "<p><code>finset</code> has a monad instance, but it requires <code>decidable_eq</code> of the base type</p>",
        "id": 160209428,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551973957
    },
    {
        "content": "<p>Aah, I see. That's not an issue.</p>",
        "id": 160209484,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1551973990
    },
    {
        "content": "<p>wait, actually as a monad it would need decidable_eq on all base types</p>",
        "id": 160209514,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551974025
    },
    {
        "content": "<p>which might explain why it isn't defined</p>",
        "id": 160209531,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551974038
    },
    {
        "content": "<p>Hmm.. I already had</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">local</span> <span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">instance</span><span class=\"o\">,</span> <span class=\"n\">priority</span> <span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">prop_decidable</span>\n</pre></div>\n\n\n<p>at the top of my file...</p>",
        "id": 160209620,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1551974077
    },
    {
        "content": "<p>No, I mean the instance was probably not declared because it's classical</p>",
        "id": 160209648,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551974106
    },
    {
        "content": "<p><code>monad</code> doesn't let you define bind and return on only some types</p>",
        "id": 160209659,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551974123
    },
    {
        "content": "<p>I see... so I need to dig up the monad-def and locally make it an instance?</p>",
        "id": 160209758,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1551974185
    },
    {
        "content": "<p>Or is it not even defined as a regular definition?</p>",
        "id": 160209863,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1551974279
    },
    {
        "content": "<p>you probably have to define it yourself, it's not hard - <code>instance : monad finset := {pure := finset.singleton, bind := finset.bind}</code></p>",
        "id": 160209865,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551974279
    },
    {
        "content": "<p>Ok, so now I have the assumption <code>ht : t ∈ has_mul.mul &lt;$&gt; T₁ &lt;*&gt; T₂</code>. And <code>T₁</code> and <code>T₂</code> are two finsets. How do I turn <code>ht</code> into a <code>t₁ ∈ T₁</code> and <code>t₂ ∈ T₂</code> + hypotheses?</p>",
        "id": 160269709,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1552030477
    },
    {
        "content": "<p>I tried <code>rcases ht</code> but <code>rcases tactic failed: ht : quot.lift is not an inductive datatype</code>.</p>",
        "id": 160269730,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1552030523
    },
    {
        "content": "<p>Does this mean that I should not be using <code>finset</code>s?</p>",
        "id": 160269743,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1552030544
    },
    {
        "content": "<p>there are some lemmas to prove about what these mean</p>",
        "id": 160269822,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552030643
    },
    {
        "content": "<p>it might be easier to just <code>finset.image</code> and <code>finset.prod</code> instead of this</p>",
        "id": 160269830,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552030667
    },
    {
        "content": "<p>Ok, let me try that</p>",
        "id": 160269881,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1552030689
    },
    {
        "content": "<p>Hmmm, so what are the options I can use:</p>\n<ul>\n<li><code>T : finset A</code></li>\n<li><code>T : set A</code> + <code>[fintype T]</code></li>\n<li><code>T : set A</code> + <code>h : set.finite T</code></li>\n<li><code>[fintype T]</code> + <code>ι : T → A</code></li>\n<li>...<br>\nI guess it is not obvious which one should be chosen, right?</li>\n</ul>",
        "id": 160270118,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1552031088
    },
    {
        "content": "<p>In the end I need to talk about <code>{ t₁ * t₂ | t₁ ∈ T₁, t₂ ∈ T₂ }</code>. Which choice has the best API for that?</p>",
        "id": 160270204,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1552031182
    },
    {
        "content": "<p>I think <code>finset.prod.image</code> has the most lemmas, if you care about finiteness (you can also just use a set and forget about finite)</p>",
        "id": 160270526,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552031712
    },
    {
        "content": "<p>But <code>prod</code> is taking the product over the whole finset.</p>",
        "id": 160270595,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1552031819
    },
    {
        "content": "<p>I guess I'll just stick with <code>set</code>s</p>",
        "id": 160270607,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1552031835
    },
    {
        "content": "<p><code>finset.prod</code> is the cartesian product of two finsets</p>",
        "id": 160270749,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552032021
    },
    {
        "content": "<p>if you map <code>(*)</code> over that with <code>image</code> you get your desired finset</p>",
        "id": 160270755,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552032041
    },
    {
        "content": "<p>or is it <code>finset.product</code>?</p>",
        "id": 160270771,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552032065
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>finset.prod : Π {α : Type u} {β : Type v} [_inst_1 : comm_monoid β], finset α → (α → β) → β\nprod s f is the product of f x as x ranges over the elements of the finite set s.\n</pre></div>",
        "id": 160270772,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1552032067
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">local</span> <span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">instance</span><span class=\"o\">,</span> <span class=\"n\">priority</span> <span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">dec</span>\n<span class=\"n\">noncomputable</span> <span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">monad</span> <span class=\"n\">finset</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span><span class=\"n\">pure</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">singleton</span><span class=\"o\">,</span> <span class=\"n\">bind</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">bind</span><span class=\"o\">}</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">T₁</span> <span class=\"n\">T₂</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ht</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"err\">∈</span> <span class=\"o\">(</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span><span class=\"err\">$</span><span class=\"bp\">&gt;</span> <span class=\"n\">T₁</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"n\">T₂</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">t₁</span> <span class=\"err\">∈</span> <span class=\"n\">T₁</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">t₂</span> <span class=\"err\">∈</span> <span class=\"n\">T₂</span><span class=\"o\">,</span> <span class=\"n\">t₁</span> <span class=\"bp\">*</span> <span class=\"n\">t₂</span> <span class=\"bp\">=</span> <span class=\"n\">t</span> <span class=\"o\">:=</span>\n<span class=\"k\">let</span> <span class=\"bp\">⟨</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">hf</span><span class=\"o\">,</span> <span class=\"n\">hf2</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">mem_bind</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">ht</span><span class=\"o\">,</span>\n    <span class=\"bp\">⟨</span><span class=\"n\">t₁</span><span class=\"o\">,</span> <span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"n\">hf</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">mem_bind</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">hf</span><span class=\"o\">,</span>\n    <span class=\"bp\">⟨</span><span class=\"n\">t₂</span><span class=\"o\">,</span> <span class=\"n\">h₂</span><span class=\"o\">,</span> <span class=\"n\">hf3</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">mem_bind</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">hf2</span> <span class=\"k\">in</span>\n<span class=\"bp\">⟨</span><span class=\"n\">t₁</span><span class=\"o\">,</span> <span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"n\">t₂</span><span class=\"o\">,</span> <span class=\"n\">h₂</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">mem_singleton</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">hf3</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"bp\">▸</span> <span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">mem_singleton</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">hf</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"bp\">▸</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span>\n</pre></div>",
        "id": 160275462,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1552037640
    },
    {
        "content": "<p>Thanks Kenny!</p>",
        "id": 160275563,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1552037736
    }
]