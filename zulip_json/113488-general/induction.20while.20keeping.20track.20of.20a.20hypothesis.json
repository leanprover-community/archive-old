[
    {
        "content": "<p>Hey, I've run into the following problem. I can't seem to be able to find out how to induct over permutations satisfying a specific hypothesis. Here's an MWE :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span> <span class=\"n\">group_theory.perm.support</span> <span class=\"n\">group_theory.perm.sign</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">finset</span> <span class=\"n\">equiv</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">induction</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">perm</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hσ</span> <span class=\"o\">:</span> <span class=\"n\">σ.support</span> <span class=\"bp\">⊆</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"o\">(</span><span class=\"n\">perm.trunc_swap_factors</span> <span class=\"n\">σ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">out</span> <span class=\"k\">with</span> <span class=\"n\">l</span> <span class=\"n\">hl</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">l</span> <span class=\"k\">with</span> <span class=\"n\">g</span> <span class=\"n\">l</span> <span class=\"n\">generalizing</span> <span class=\"n\">σ</span> <span class=\"n\">hσ</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>The problem is that <code>hσ</code> as a hypothesis is true only for the current <code>σ</code> and I'd like to have it as a hypothesis also for the previous one. Initially, I wanted to use <code>swap_induction_on</code> but that turned out to be set up in a way, where this hypothesis tracking is not supported. Thanks!</p>",
        "id": 265078749,
        "sender_full_name": "Mantas Baksys",
        "timestamp": 1639604317
    },
    {
        "content": "<p>This was nonsense, sorry</p>",
        "id": 265080078,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1639604772
    },
    {
        "content": "<p>I don't think this is mathematically possible for an arbitrary hypothesis right? Like if the hypothesis is <code>sigma.support = s</code> there's no way to get there with only transpositions. So you are really doing something special to the situation that I don't think there are tools for. You'd have to write an induction principle saying that every perm with restricted support is attainable via compositing transpositions with that support, likely the existing proof already does this under the hood?<br>\nIn your case seeing as your condition is that the perm lies in a subgroup it might be more effective to pass to that subgroup (<code>perm s</code>) and use induction on that subgroup.</p>",
        "id": 265080210,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1639604841
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/113488-general/topic/induction.20while.20keeping.20track.20of.20a.20hypothesis/near/265080210\">said</a>:</p>\n<blockquote>\n<p>I don't think this is mathematically possible for an arbitrary hypothesis right? Like if the hypothesis is <code>sigma.support = s</code> there's no way to get there with only transpositions. So you are really doing something special to the situation that I don't think there are tools for. You'd have to write an induction principle saying that every perm with restricted support is attainable via compositing transpositions with that support, likely the existing proof already does this under the hood?<br>\nIn your case seeing as your condition is that the perm lies in a subgroup it might be more effective to pass to that subgroup (<code>perm s</code>) and use induction on that subgroup.</p>\n</blockquote>\n<p>You're right, I'll need to write something specific in that case.</p>",
        "id": 265080777,
        "sender_full_name": "Mantas Baksys",
        "timestamp": 1639605084
    },
    {
        "content": "<p>Does <code>cases h : (perm.trunc_swap_factors σ).out with l hl,</code> help, at least conceptually, with what you wanted?</p>",
        "id": 265109401,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1639626502
    }
]