[
    {
        "content": "<p>I was trying to define this lemma (in <code>group_theory/exponent</code>):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">--@[to_additive]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">exponent_eq_zero_iff</span> <span class=\"o\">:</span> <span class=\"n\">exponent</span> <span class=\"n\">G</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span> <span class=\"n\">exponent_exists</span> <span class=\"n\">G</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">monoid.exponent</span><span class=\"o\">],</span>\n  <span class=\"n\">split_ifs</span> <span class=\"k\">with</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>however, when I try uncomment <code>to_additive</code>, it has an absolute fit. if i make the lemma by hand and say <code>to_additive</code> afterwards, it still completely breaks. I tried the troubleshooting steps and still am no closer to understanding what's up</p>",
        "id": 263127774,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1638269696
    },
    {
        "content": "<p>Does it still fail if you replace the proof with <code>sorry</code>?</p>",
        "id": 263127919,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638269794
    },
    {
        "content": "<p>nope!</p>",
        "id": 263127949,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1638269829
    },
    {
        "content": "<p>I'm really not sure why my autopilot brain decided that <code>no</code> translated to <code>yes</code>...</p>",
        "id": 263127984,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1638269851
    },
    {
        "content": "<p>If it succeeds with <code>sorry</code>, that suggests one of the lemmas <code>simp</code> is finding is missing a <code>to_additive</code> or is tagged incorrectly</p>",
        "id": 263128213,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638269999
    },
    {
        "content": "<p>ok, this works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[to_additive]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">exponent_eq_zero_iff</span> <span class=\"o\">:</span> <span class=\"n\">exponent</span> <span class=\"n\">G</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span> <span class=\"n\">exponent_exists</span> <span class=\"n\">G</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">monoid.exponent</span><span class=\"o\">],</span>\n  <span class=\"n\">split_ifs</span> <span class=\"k\">with</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">nat.find_eq_zero</span><span class=\"o\">,</span> <span class=\"n\">not_true</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">not_lt_zero'</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">false_and</span><span class=\"o\">],</span><span class=\"c1\">--simp [h],</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">eq_self_iff_true</span><span class=\"o\">,</span> <span class=\"n\">not_false_iff</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 263128484,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1638270117
    },
    {
        "content": "<p>this works... for some reason it wants to turn that <code>not_lt_zero</code> into something to do with the monoid, even though it's only used on ℕ</p>",
        "id": 263128557,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1638270141
    },
    {
        "content": "<p>which I think may be because of its weird argument order; it's stated as <code>{α} {x : α} [linear_ordered_comm_monoid α]</code></p>",
        "id": 263128635,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1638270214
    },
    {
        "content": "<p>Is this the error you got in the original example? I'll try to debug</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"bp\">@</span><span class=\"n\">linear_ordered_add_comm_monoid.to_linear_order</span> <span class=\"n\">α</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">linear_ordered_comm_monoid_with_zero.to_linear_ordered_comm_monoid</span> <span class=\"n\">α</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span>\n<span class=\"n\">term</span>\n  <span class=\"bp\">@</span><span class=\"n\">linear_ordered_comm_monoid_with_zero.to_linear_ordered_comm_monoid</span> <span class=\"n\">α</span> <span class=\"n\">_inst_1</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">linear_ordered_comm_monoid</span> <span class=\"n\">α</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">linear_ordered_add_comm_monoid</span> <span class=\"n\">α</span>\n</code></pre></div>",
        "id": 263128668,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1638270241
    },
    {
        "content": "<p>Adding this line before fixes it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">to_additive</span><span class=\"o\">]</span> <span class=\"n\">linear_ordered_comm_monoid_with_zero.to_linear_ordered_comm_monoid</span>\n</code></pre></div>\n<p>I'll make a PR</p>",
        "id": 263128878,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1638270341
    },
    {
        "content": "<p>wait... but additivizing that declaration doesn't make sense...</p>",
        "id": 263129257,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1638270568
    },
    {
        "content": "<p>I think the problem is that the original proof works for the multiplicative case, but not for an additive one?</p>",
        "id": 263129281,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1638270585
    },
    {
        "content": "<p>that lemma is only used for ℕ, if you see an alternative version that works</p>",
        "id": 263129363,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1638270613
    },
    {
        "content": "<p>but I think the weird argument order means that <code>to_additive</code>'s heuristic tries to additivize it in the proof</p>",
        "id": 263129399,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1638270638
    },
    {
        "content": "<p>\"that lemma\" = <code>exponent_eq_zero_iff</code>?</p>",
        "id": 263129414,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1638270651
    },
    {
        "content": "<p><code>not_lt_zero'</code></p>",
        "id": 263129438,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1638270670
    },
    {
        "content": "<p>used by <code>simp</code> in the proof</p>",
        "id": 263129448,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1638270679
    },
    {
        "content": "<p>if I change the <code>simp</code> input to <code>@not_lt_zero' ℕ</code> it works fine</p>",
        "id": 263129470,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1638270701
    },
    {
        "content": "<p>I don't think <code>@not_lt_zero'</code> is the culprit. Also, the order of the arguments shouldn't matter, as long as <code>α</code> is the first argument.</p>",
        "id": 263129548,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1638270737
    },
    {
        "content": "<p>oh, maybe it does, the <code>α</code> threw me off...</p>",
        "id": 263129846,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1638270962
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/y33CM4lRuvvqmGBSSA0zUdOF/image.png\">image.png</a> it looks like this in the final proof, which I think is what's tripping things up</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/y33CM4lRuvvqmGBSSA0zUdOF/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/y33CM4lRuvvqmGBSSA0zUdOF/image.png\"></a></div>",
        "id": 263129953,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1638271030
    },
    {
        "content": "<p>Yeah, I'm also looking at that right now. The problem is that <code>simp</code> generates the subterm</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">linear_ordered_comm_monoid_with_zero</span> <span class=\"n\">α</span><span class=\"o\">],</span>\n                                  <span class=\"bp\">@</span><span class=\"n\">iff_false_intro</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">not_lt_zero'</span> <span class=\"n\">α</span> <span class=\"n\">a</span> <span class=\"n\">_inst_1</span><span class=\"o\">))</span>\n                                 <span class=\"n\">ℕ</span>\n                                 <span class=\"mi\">0</span>\n                                 <span class=\"n\">nat.linear_ordered_comm_monoid_with_zero</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>This cannot be <code>to_additive</code>-ized correctly, since <code>linear_ordered_comm_monoid_with_zero</code> has no additive version, but <code>linear_ordered_add_comm_monoid.to_linear_order</code> (used as implicit argument) does.<br>\nIf we would (beta) reduce the expression, we just get </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"n\">iff_false_intro</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">not_lt_zero'</span> <span class=\"n\">ℕ</span> <span class=\"mi\">0</span> <span class=\"n\">nat.linear_ordered_comm_monoid_with_zero</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>which will be additivized correctly. (that is, by changing nothing, since it is applied to <code>ℕ</code>)</p>",
        "id": 263130835,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1638271586
    },
    {
        "content": "<p>I'm not sure what the best solution is here, maybe just using the workaround by giving simp some extra information (<code>simp [h, nat.not_lt_zero]</code> and <code>simp [h, -not_lt_zero']</code> both work)</p>",
        "id": 263131041,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1638271734
    },
    {
        "content": "<p>(though using <code>@not_lt_zero' ℕ</code> is better, since we might get rid of <code>nat.not_lt_zero</code> at some point)</p>",
        "id": 263131211,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1638271821
    }
]