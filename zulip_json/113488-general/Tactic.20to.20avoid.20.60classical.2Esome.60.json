[
    {
        "content": "<p>My goal was this:</p>\n<div class=\"codehilite\"><pre><span></span>⊢ comm_ring.zero (ring_completion (valuation_field (out (⟨⟨v, _⟩, _⟩.val)))) =\n    domain.zero (ring_completion (valuation_field (out (⟨⟨v, _⟩, _⟩.val))))\n</pre></div>\n\n\n<p>and I tried <code>dunfold out</code>. This took me to the following slightly scary goal:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"err\">⊢</span> <span class=\"n\">comm_ring</span><span class=\"bp\">.</span><span class=\"n\">zero</span> <span class=\"o\">(</span><span class=\"n\">ring_completion</span> <span class=\"o\">(</span><span class=\"n\">valuation_field</span> <span class=\"o\">(</span><span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"bp\">_</span><span class=\"o\">)))</span> <span class=\"bp\">=</span>\n    <span class=\"n\">domain</span><span class=\"bp\">.</span><span class=\"n\">zero</span> <span class=\"o\">(</span><span class=\"n\">ring_completion</span> <span class=\"o\">(</span><span class=\"n\">valuation_field</span> <span class=\"o\">(</span><span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"bp\">_</span><span class=\"o\">)))</span>\n</pre></div>\n\n\n<p>I don't like <code>classical.some</code>s in my term. They come with a corresponding very helpful <code>classical.some_spec</code> which is hard to keep track of if you have proof terms turned off. Was <code>dunfold out</code> an incorrect move? How can I get the correct <code>some_spec</code>s into my context somehow?</p>",
        "id": 163835931,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555823786
    },
    {
        "content": "<p>what about <code>generalize : (out (⟨⟨v, _⟩, _⟩.val)) = k</code>?</p>",
        "id": 163836068,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1555824069
    },
    {
        "content": "<p>A tactic like <code>split_ifs</code> for <code>classical.some</code> would be nice</p>",
        "id": 163836130,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1555824168
    },
    {
        "content": "<p>I think you will find such a tactic here: <a href=\"https://github.com/unitb/lean-lib/blob/master/src/util/classical.lean\" target=\"_blank\" title=\"https://github.com/unitb/lean-lib/blob/master/src/util/classical.lean\">https://github.com/unitb/lean-lib/blob/master/src/util/classical.lean</a></p>",
        "id": 163836461,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1555824780
    },
    {
        "content": "<p>I can PR it tomorrow. Or if you need it urgently, feel free to take it</p>",
        "id": 163837020,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1555825854
    },
    {
        "content": "<p>I can't get it to work :-/</p>\n<div class=\"codehilite\"><pre><span></span>generalize tactic failed, result is not type correct\nnested exception message:\ncheck failed, application type mismatch (use &#39;set_option trace.check true&#39; for additional details)\nstate:\n4 goals\nA : Huber_pair,\nv : ↥A → ↥A → Prop,\nΓ : Type u_1,\n_inst_2 : linear_ordered_comm_group Γ,\nv₀ : valuation ↥A Γ,\nh : ∀ (r s : ↥A), ⇑v₀ r ≤ ⇑v₀ s ↔ v r s,\nh1 : is_continuous ⟨v, _⟩,\nh2 : ∀ (r : ↥A), r ∈ (λ (A : Huber_pair), A.Rplus) A → ⇑⟨v, _⟩ r ≤ 1\n⊢ comm_ring.zero (ring_completion (valuation_field (classical.some _))) =\n    domain.zero (ring_completion (valuation_field (classical.some _)))\n</pre></div>\n\n\n<p>Should I be applying the tactic before or after the state looks like this? I just dunfolded something and they all appeared.</p>",
        "id": 163839328,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555830344
    }
]