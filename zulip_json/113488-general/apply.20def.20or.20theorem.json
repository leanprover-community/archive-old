[
    {
        "content": "<p>I have the following definitions </p>\n<div class=\"codehilite\"><pre><span></span> def index  {s : set( set α)} (n:ℕ)  [fintype s] (H:∀i∈ s, finite i)\n    : set(set(set α )) :=  { t| t ⊆ s ∧   fintype.card t=n}\n</pre></div>\n\n\n<p>I get a following error</p>\n<div class=\"codehilite\"><pre><span></span>failed to synthesize type class instance for\nα : Type,\ns : set (set α),\nn : ℕ,\n_inst_1 : fintype ↥s,\nH : ∀ (i : set α), i ∈ s → finite i,\nt : set (set α)\n⊢ fintype ↥t\n</pre></div>\n\n\n<p>I see that the following definition in <code>data.set.finite</code></p>\n<div class=\"codehilite\"><pre><span></span>def fintype_subset (s : set α) {t : set α} [fintype s] [decidable_pred t] (h : t ⊆ s) : fintype t :=\nby rw ← inter_eq_self_of_subset_right h; apply_instance\n</pre></div>\n\n\n<p>How can I apply it to my definition?</p>",
        "id": 131070910,
        "sender_full_name": "Hoang Le Truong",
        "timestamp": 1533678108
    },
    {
        "content": "<p>So alpha is a random type, s is a set of subsets of alpha (so s could be empty), _inst_1 is a proof that s is finite (so s could still be empty), H says something about all elements of s (so if s is empty then H is true), but alpha could still be a random type, and now t is some set of subsets of alpha so there's no reason to expect that t is finite, unless I made a slip.</p>",
        "id": 131071337,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533678672
    },
    {
        "content": "<p><code>{ t| ∃ h : t ⊆ s, @fintype.card t (fintype_subset s h) =n}</code></p>",
        "id": 131071399,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1533678737
    },
    {
        "content": "<p>Oh, so that type class instance can't be synthesized because Lean hasn't got to the point where t is a subset of s yet.</p>",
        "id": 131071404,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533678749
    },
    {
        "content": "<p>So Chris' clever trick is to give a name to the fact that t is a subset of s, and then we can use it later.</p>",
        "id": 131071421,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533678809
    },
    {
        "content": "<p>The other set is finite too, since it's a subset of the powerset of s, which is finite.</p>",
        "id": 131071427,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1533678816
    },
    {
        "content": "<p>Right -- I was just looking at the error, where there were no assumptions on t at all. You managed to insert the subset assumption into the system so Lean could see it.</p>",
        "id": 131071519,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533678950
    },
    {
        "content": "<p>There is a case for a dependent and. The trouble with the exists trick is there's no <code>exists.left</code> and <code>exists</code> doesn't eliminate into data, but dependent and could.</p>",
        "id": 131071726,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1533679177
    },
    {
        "content": "<p>But I don't think it comes up that often.</p>",
        "id": 131071738,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1533679201
    },
    {
        "content": "<p>I try  <code>{ t| ∃ h : t ⊆ s, @fintype.card t (fintype_subset s h) =n}</code> but I get </p>\n<div class=\"codehilite\"><pre><span></span>failed to synthesize type class instance for\nα : Type,\ns : set (set α),\nn : ℕ,\n_inst_1 : fintype ↥s,\nH : ∀ (i : set α), i ∈ s → finite i,\nt : set (set α),\nh : t ⊆ s\n⊢ decidable_pred t\n</pre></div>",
        "id": 131071810,
        "sender_full_name": "Hoang Le Truong",
        "timestamp": 1533679252
    },
    {
        "content": "<p>You can use <code>local attribute [instance] classical.prop_decidable</code> before the statement of the theorem.</p>",
        "id": 131072001,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1533679520
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span>  Since <code>s</code> is finite and <code>t ⊆ s</code> then <code>t </code> is finite by def <code> fintype_subset</code></p>\n<div class=\"codehilite\"><pre><span></span>def index   {s : set( set α)} (n:ℕ)  [fintype s] (H:∀i∈ s, finite i)\n    : set(set(set α )) :=  { t| ∃ h : t ⊆ s, @fintype.card t (fintype_subset s h) =n}\n</pre></div>\n\n\n<p>where am I use <code>local attribute [instance] classical.prop_decidable</code></p>",
        "id": 131072181,
        "sender_full_name": "Hoang Le Truong",
        "timestamp": 1533679770
    },
    {
        "content": "<p>On its own line before the definition.</p>",
        "id": 131072280,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1533679878
    },
    {
        "content": "<p>You might be better off using <code>finsets</code> for this actually.</p>",
        "id": 131072342,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1533679956
    },
    {
        "content": "<p>Then you don't have to worry about proving things are finite.</p>",
        "id": 131072354,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1533679988
    },
    {
        "content": "<p>Ok I will try it</p>",
        "id": 131072422,
        "sender_full_name": "Hoang Le Truong",
        "timestamp": 1533680078
    }
]