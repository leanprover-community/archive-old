[
    {
        "content": "<p>A \"recursive type\" is a type defined as the smallest solution (smallest in the sense of universal property) of some type equation, e.g. <code>nat</code> is the solution of <code>T = 1+T</code> and <code>list A</code> is the smallest solution of <code>T=1+AxT</code>.</p>\n<p>The free magma generated by a type <code>A</code>, can be defined as the smallest solution of <code>T=A+TxT</code>.</p>\n<p>The free semigroup generated by a type <code>A</code> can be defined as the smallest solution of <code>T=A+AxT</code> (sidenote: <code>1+T</code> satisfies <code>1+T = 1+A+AxT = 1+Ax(1+T)</code>, i.e. <code>1+T</code> is <code>list A</code>).</p>\n<p>The free monoid generated by a type can be defined as <code>list A</code>, which is mentioned above.</p>\n<p>Is the free group generated by a type also a recursive type? I believe not, but I don't have a proof.</p>\n<p>(Also, this question would need to be phrased properly, in terms of what the allowed operations can be, because by cardinality argument <code>list A</code> would work as the free group over a type)</p>",
        "id": 158761579,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550442192
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> you might have a quick answer / reference</p>",
        "id": 158761580,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550442199
    },
    {
        "content": "<p>I believe the proper notation is <code>nat = μT.1+T</code></p>",
        "id": 158761691,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550442393
    },
    {
        "content": "<p><code>list A = μT.1+AxT</code>, <code>free_magma A = μT.A+TxT</code>, <code>free_semigroup A = μT.A+AxT</code></p>",
        "id": 158761711,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550442467
    },
    {
        "content": "<p>The most natural presentation of free semigroups and such is not as a recursive type, but as a quotient of a recursive type</p>",
        "id": 158761818,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550442652
    },
    {
        "content": "<p>Any free algebraic variety is a quotient of a recursive type</p>",
        "id": 158761827,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550442672
    },
    {
        "content": "<p>yeah but it works; whereas I don't think there's one that works for free groups</p>",
        "id": 158761831,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550442693
    },
    {
        "content": "<p>you take all the expressions in the language and quotient by all the equalities and congruences defined for the variety</p>",
        "id": 158761832,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550442702
    },
    {
        "content": "<p>In some cases, it turns out to be equivalent to a recursive type, like the free monoid and list</p>",
        "id": 158761881,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550442751
    },
    {
        "content": "<p>I believe free groups are also such things, but you have to get tricky with a definition of reduced word</p>",
        "id": 158761892,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550442801
    },
    {
        "content": "<p>Looks strangely like a QPF</p>",
        "id": 158761894,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1550442807
    },
    {
        "content": "<p>yep</p>",
        "id": 158761895,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550442812
    },
    {
        "content": "<p>Or rather the fixed point of a QPF</p>",
        "id": 158761898,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1550442826
    },
    {
        "content": "<p>all free algebraic varieties are QPFs</p>",
        "id": 158761900,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550442835
    },
    {
        "content": "<p>Did Jeremy think of that when he came up with QPFs?</p>",
        "id": 158761949,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1550442865
    },
    {
        "content": "<p>Can someone loop me in as to what on earth QPF stands for?</p>",
        "id": 158761958,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550442880
    },
    {
        "content": "<p>quotient of a polynomial functor</p>",
        "id": 158761971,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550442907
    },
    {
        "content": "<p>I'm not very convinced that free group is equivalent to a polynomial</p>",
        "id": 158761975,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550442914
    },
    {
        "content": "<p>Quotient of Polynomial Functors. It's a way of generating arbitrary inductive and coinductive type that we're about to publish</p>",
        "id": 158761976,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1550442914
    },
    {
        "content": "<p>now I'm not convinced and Mario is convinced, and there is no way to go on because how would I have a proof :P</p>",
        "id": 158762027,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550442987
    },
    {
        "content": "<p>In this case you are asking when we can drop the \"quotient\" part, and I say in groups you can do it</p>",
        "id": 158762032,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550443001
    },
    {
        "content": "<p>right, and I'm not convinced</p>",
        "id": 158762045,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550443028
    },
    {
        "content": "<p>You already know that the set of reduced words is isomorphic with a free group</p>",
        "id": 158762048,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550443039
    },
    {
        "content": "<p>but perhaps you doubt this can be defined as an inductive type</p>",
        "id": 158762051,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550443061
    },
    {
        "content": "<p>I hope your solution won't be doing funny things like including a Prop in the inductive type</p>",
        "id": 158762053,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550443071
    },
    {
        "content": "<p>of course it will</p>",
        "id": 158762096,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550443084
    },
    {
        "content": "<p>is that a polynomial?</p>",
        "id": 158762099,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550443091
    },
    {
        "content": "<p>can I restrict your language to <code>μAT1+x.</code>?</p>",
        "id": 158762102,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550443128
    },
    {
        "content": "<p>is that even going to be a functor?</p>",
        "id": 158762103,
        "sender_full_name": "Reid Barton",
        "timestamp": 1550443139
    },
    {
        "content": "<p>the functor here is that the whole construction is functorial in the base type A</p>",
        "id": 158762111,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550443165
    },
    {
        "content": "<p>I think the free group functor is probably not polynomial but I'm not sure how to prove it</p>",
        "id": 158762178,
        "sender_full_name": "Reid Barton",
        "timestamp": 1550443246
    },
    {
        "content": "<p>There is a way to do it with an indexed inductive too</p>",
        "id": 158762180,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550443256
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> well <code>free_group</code> would definitely be a functor, and I think it is independent of construction?</p>",
        "id": 158762189,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550443277
    },
    {
        "content": "<p>you just need to track which words end in what letter so that you prevent constructing non-reduced words</p>",
        "id": 158762190,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550443278
    },
    {
        "content": "<p>what is an indexed inductive?</p>",
        "id": 158762192,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550443288
    },
    {
        "content": "<p>inductive foo : X -&gt; Type</p>",
        "id": 158762196,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550443301
    },
    {
        "content": "<p>actually you don't even need to keep track if you are just going for abstractly isomorphic</p>",
        "id": 158762261,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550443412
    },
    {
        "content": "<p>it's just a tree with 2A branches at the root and 2A-1 branches everywhere else</p>",
        "id": 158762314,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550443459
    },
    {
        "content": "<p>on an unrelated note I've proved 2 instances of lawful traversable and 1 instance of lawful bitraversable, and I still have no idea what it is</p>",
        "id": 158762333,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550443527
    },
    {
        "content": "<p>I'm not sure I'm very comfortable with 2A-1</p>",
        "id": 158762340,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550443553
    },
    {
        "content": "<p>my first thought is, it can't be a polynomial; and my second thought is, what if A=0</p>",
        "id": 158762385,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550443580
    },
    {
        "content": "<p>if A=0 then the 2A branches at the root end it right then</p>",
        "id": 158762404,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550443642
    },
    {
        "content": "<p>the point is it's a tree</p>",
        "id": 158762465,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550443739
    },
    {
        "content": "<p>also I'm not very sure that you can define multiplication on that type</p>",
        "id": 158762467,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550443740
    },
    {
        "content": "<p>what is <code>a * a^-1</code>?</p>",
        "id": 158762474,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550443749
    },
    {
        "content": "<p>1</p>",
        "id": 158762477,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550443774
    },
    {
        "content": "<p>yeah but will it be computable?</p>",
        "id": 158762479,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550443782
    },
    {
        "content": "<p>I didn't say anything about computability</p>",
        "id": 158762483,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550443796
    },
    {
        "content": "<p>but in this case yes you can do it</p>",
        "id": 158762527,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550443805
    },
    {
        "content": "<p>if A has decidable eq</p>",
        "id": 158762532,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550443811
    },
    {
        "content": "<p>yeah that's the problem</p>",
        "id": 158762534,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550443818
    },
    {
        "content": "<p>what if I wanted to define the free group on <code>nat -&gt; bool</code></p>",
        "id": 158762537,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550443832
    },
    {
        "content": "<p>It's easy to prove that it's necessary</p>",
        "id": 158762540,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550443836
    },
    {
        "content": "<p>it's easy to prove that it's necessary if you use that construction?</p>",
        "id": 158762544,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550443853
    },
    {
        "content": "<p>No, with any construction</p>",
        "id": 158762546,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550443861
    },
    {
        "content": "<p>the construction in mathlib doesn't need decidable equality</p>",
        "id": 158762555,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550443876
    },
    {
        "content": "<p>If it's not a quotient</p>",
        "id": 158762560,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550443895
    },
    {
        "content": "<p>define \"not a quotient\"</p>",
        "id": 158762561,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550443904
    },
    {
        "content": "<p>using only inductive types</p>",
        "id": 158762562,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550443913
    },
    {
        "content": "<p>like the sort you've been talking about</p>",
        "id": 158762605,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550443937
    },
    {
        "content": "<p>could you prove it?</p>",
        "id": 158762607,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550443948
    },
    {
        "content": "<p>First, you have to show that in the construction w = 1 is decidable</p>",
        "id": 158762621,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550444021
    },
    {
        "content": "<p>seems very fishy to me</p>",
        "id": 158762673,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550444062
    },
    {
        "content": "<p>(because once w=1 is decidable, the whole type has decidable equality)</p>",
        "id": 158762676,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550444077
    },
    {
        "content": "<p>1 has to be obtained by applying some constructors</p>",
        "id": 158762694,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550444116
    },
    {
        "content": "<p>interesting</p>",
        "id": 158762748,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550444186
    },
    {
        "content": "<p>and they can't be the same constructors as for constructing w of positive length</p>",
        "id": 158762749,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550444199
    },
    {
        "content": "<p>That's certainly enough for your restricted grammar. For lean inductives there are several other effects you have to eliminate</p>",
        "id": 158762807,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550444291
    },
    {
        "content": "<p>thanks</p>",
        "id": 158762808,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550444293
    },
    {
        "content": "<p>I figured out how to prove the free group functor is not a polynomial--it's kind of the same as what Mario just wrote.<br>\nAny polynomial functor is the coproduct, as a functor, of the \"constant term\" and the \"nonconstant terms\".<br>\nIf the free group functor was a polynomial, it would have to be the disjoint union of the constant functor on a singleton (representing the identity element) and the functor of nonidentity elements. But the nonidentity elements don't actually form a functor, because substituting for the symbols in a word of a free group can cause cancellation to the identity.</p>",
        "id": 158763142,
        "sender_full_name": "Reid Barton",
        "timestamp": 1550444976
    },
    {
        "content": "<p>nice</p>",
        "id": 158763202,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550445054
    },
    {
        "content": "<p>But there should be other nonexamples like the free commutative monoid, and I'm not sure how to handle those</p>",
        "id": 158763257,
        "sender_full_name": "Reid Barton",
        "timestamp": 1550445130
    },
    {
        "content": "<p>on another note, if a magma has decidable equality, does its quotient by the associator (i.e. the free semigroup) also have decidable equality?</p>",
        "id": 158763328,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550445249
    },
    {
        "content": "<p>Let me just remark that mathematicians claimed the phrase \"algebraic variety\" about 100 years ago</p>",
        "id": 158763527,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550445640
    },
    {
        "content": "<p>I'm using the mathematician's terminology, or so I thought</p>",
        "id": 158763581,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550445765
    },
    {
        "content": "<p>that thing from universal algebra where you have a set and a bunch of universal equations on it</p>",
        "id": 158763594,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550445793
    },
    {
        "content": "<p>it's a generalization of ring, group, monoid and so on</p>",
        "id": 158763599,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550445815
    },
    {
        "content": "<p>but not field, because there is a disequality</p>",
        "id": 158763601,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550445828
    },
    {
        "content": "<p>that's why there is no free field</p>",
        "id": 158763603,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550445834
    },
    {
        "content": "<p>\"variety of algebras\" but related terms will inevitably collide</p>",
        "id": 158763616,
        "sender_full_name": "Reid Barton",
        "timestamp": 1550445842
    },
    {
        "content": "<p>However, it's not like you have to ask things to be distinct in a free construction. You can just drop that axiom and the free object for that thing will be the free field if it exists</p>",
        "id": 158763654,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550445897
    },
    {
        "content": "<p>Algebraic variety is some algebraic geometry thing, the zeros of finitely many polynomials in affine or projective space. One interesting thing about learning CS is the new language and new ways of thinking about old things</p>",
        "id": 158763798,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550446161
    },
    {
        "content": "<p>I guess the notions are related, although the universal algebra version seems to be some vast generalization of that</p>",
        "id": 158763850,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550446231
    },
    {
        "content": "<p>(note that asking for a polynomial to be zero is a universal equational constraint of the same sort as in universal algebra)</p>",
        "id": 158763873,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550446294
    },
    {
        "content": "<p>i've always found the terminology confusing (i think of a universal algebraic variety as a collection of many models, while an algebraic variety is a single model)</p>",
        "id": 158802960,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1550499501
    },
    {
        "content": "<blockquote>\n<p>Can someone loop me in as to what on earth QPF stands for?</p>\n</blockquote>\n<p>So young, and he already sleeps during talks...</p>",
        "id": 158804820,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1550501326
    },
    {
        "content": "<blockquote>\n<p>@Patrick Massot:<br>\nSo young, and he already sleeps during talks...</p>\n</blockquote>\n<p>Are those tears of pride?</p>",
        "id": 158810805,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1550506599
    },
    {
        "content": "<p>It's an obscure abbreviation! It's \"quotients of polynomial functors\" as in Jeremy's talk in Amsterdam. Didn't you guys only just invent it??</p>",
        "id": 158812037,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550507659
    },
    {
        "content": "<blockquote>\n<p>But there should be other nonexamples like the free commutative monoid, and I'm not sure how to handle those</p>\n</blockquote>\n<p>I happened to come across <a href=\"https://mathoverflow.net/questions/302631/what-is-the-polynomial-functor-for-the-bag-monad\" target=\"_blank\" title=\"https://mathoverflow.net/questions/302631/what-is-the-polynomial-functor-for-the-bag-monad\">https://mathoverflow.net/questions/302631/what-is-the-polynomial-functor-for-the-bag-monad</a></p>",
        "id": 159476500,
        "sender_full_name": "Reid Barton",
        "timestamp": 1551233903
    }
]