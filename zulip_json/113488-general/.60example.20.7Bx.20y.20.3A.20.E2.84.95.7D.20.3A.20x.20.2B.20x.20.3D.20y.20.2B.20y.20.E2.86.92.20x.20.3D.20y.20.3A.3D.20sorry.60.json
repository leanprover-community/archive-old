[
    {
        "content": "<p>How about this one? <code>example {x y : ℕ} : x + x = y + y → x = y := sorry</code>.  I ended up proving another lemma <code>x + x = x * 2</code> and then rewrote twice and used <code>nat.mul_div_cancel</code>.  I thought <code>x + x = x * 2</code><br>\nwas a lemma but I can't find it. There is a lemma <code> add_self_div_two : ∀ {α : Type u_1} [_inst_1 : linear_ordered_field α] (a : α), (a + a) / 2 = a</code> (note: linearly ordered field ensures 2 isn't zero). Is there an argument for adding <code>nat.add_self_div_two</code> and <code>int.add_self_div_two</code>?</p>",
        "id": 124685151,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522955534
    },
    {
        "content": "<p>I'd be interested in seeing any slicker arguments for my original question; <code>rw nat.add_self_div_two</code> would do it in one line.</p>",
        "id": 124685240,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522955693
    },
    {
        "content": "<p>But there is an underlying issue that I have, which is that both this question and the not (2+x=0) question are things which mathematicians are going to claim are obvious. Is there some general tactic in Coq, say, which would do both of these immediately?</p>",
        "id": 124685269,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522955741
    },
    {
        "content": "<p><code>mul_two</code> and <code>two_mul</code> should exist</p>",
        "id": 124685322,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522955790
    },
    {
        "content": "<p>mmh, I don't like it when you start complaining that things are obvious or trivial</p>",
        "id": 124685323,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522955820
    },
    {
        "content": "<p>This stuff falls under the purview of <code>omega</code>, but that might be overkill</p>",
        "id": 124685335,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522955866
    },
    {
        "content": "<p>I am arguing that if I am trying to sell Lean to mathematicians and they say \"OK so how do we prove x + x = y + y -&gt; x = y\" and I say \"oh that's a fascinating question\", that's not a good answer.</p>",
        "id": 124685379,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522955893
    },
    {
        "content": "<p>I would be aiming for having more theorems that say things like this rather than some big bloated tactic to kill them all</p>",
        "id": 124685416,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522955976
    },
    {
        "content": "<p><code>two_mul</code> is there by default, <code>mul_two</code> needs <code>import algebra.ring</code> but it is proved for semirings.</p>",
        "id": 124685434,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522956000
    },
    {
        "content": "<p><code>algebra.ring</code> is the mathlib file for ring-like structures (things with addition and multiplication)</p>",
        "id": 124685487,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522956031
    },
    {
        "content": "<p>theorems v tactics -- in the past this has been my instinct too; the theorems are mostly named well and are mostly there.</p>",
        "id": 124685493,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522956038
    },
    {
        "content": "<p>But I couldn't find mul_two because I was looking for add_self</p>",
        "id": 124685505,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522956070
    },
    {
        "content": "<p>You don't want to call this result mul_two_eq_add_self?</p>",
        "id": 124685519,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522956106
    },
    {
        "content": "<p>so because I failed I started wishing there was one big bloated tactic which kills them all.</p>",
        "id": 124685572,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522956149
    }
]