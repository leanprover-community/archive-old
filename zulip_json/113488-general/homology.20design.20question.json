[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260921\">@Markus Himmel</span>, <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>, I'm a bit stuck on a design decision regarding homology, and wanted some input.</p>\n<p>My current draft uses the <code>subobject</code> API extensively. To understand the key benefit, I need to recall that a Johan-complex is a gadget with a <code>d i j : X i ⟶ X j</code> for all possible <code>i j</code> (but with an axiom that says this is often zero). The reason we do this is essentially to avoid DTT hell in the indices: it's perfectly possible to map from <code>X (i - 1 + 1)</code> to <code>X (i + 1)</code> if that's what you need to do. The cost of this is that we have many \"different\" differentials out of a given <code>X i</code> (i.e. <code>d i j</code> for every <code>j</code> which equals, possibly up to a theorem, <code>i+1</code>). These different target <code>X j</code> are all isomorphic of course. This is where we get the first payoff from using subobjects: if we define <code>def cycles (i : ι) : subobject (C.X i) := ...</code> we get an invariant object that doesn't depend on which <code>j</code> we used. We then construct an explicit isomorphism <code>(C.cycles i : V) ≅ kernel (C.d i j)</code> for every appropriate <code>j</code>.</p>\n<p>However there's a cost, and this cost is feeling increasingly painful to me. Unfortunately it's impossible (right??) to make <code>(kernel_subobject f : C)</code> actually definitionally equal to <code>kernel f</code>; we only get an isomorphism. This means that if we continue down this route, I think we're going to have to rewrite Markus' existing work on exactness, so that it is all written in terms of <code>kernel_subobject</code> rather than <code>kernel</code>, <code>subobject.arrow</code> instead of <code>kernel.ι</code>, and so on. Now this is perfectly doable (indeed I've done about half of it), but it adds to the grunge, and particularly makes it feel like many results need to be stated twice (once for the limits API version, once for the subobjects API version). I'm afraid that if I do this work Markus or others are reasonably going to say that it looks like a regression.</p>\n<p>Can anyone see how I can have my cake and eat it too? Or convince me that it's just okay to go one way or the other?</p>\n<p>I think the options are:</p>\n<ol>\n<li>just don't use the subobjects API here</li>\n<li>use it, and deal with having to write a bulkier API</li>\n</ol>",
        "id": 234627527,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1618470395
    },
    {
        "content": "<p>I'm sorely tempted to try out 1., and see how it goes, but it's a fair bit of work. :-(</p>",
        "id": 234627550,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1618470413
    },
    {
        "content": "<blockquote>\n<p>However there's a cost, and this cost is feeling increasingly painful to me. Unfortunately it's impossible (right??) to make (kernel_subobject f : C) actually definitionally equal to kernel f; we only get an isomorphism.</p>\n</blockquote>\n<p>One way to try to work around this issue is to state every lemma about subobjects twice, once for <code>P : subobject X</code> in terms of <code>P.arrow</code> and once for <code>subobject.mk f</code> in terms of <code>f</code>. Is the situation you're describing one where this approach does not help?</p>",
        "id": 234636164,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1618474944
    },
    {
        "content": "<p>I think that's option (2) that Scott is describing, right?</p>",
        "id": 234637024,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618475351
    },
    {
        "content": "<p>The way I understood it, option (2) would be to more or less literally duplicate the relevant parts of <code>category_theory/limits/shapes/*</code> to <code>category_theory/subobject/limits.lean</code>, while I'm suggesting that it <em>may</em> be sufficient to expand the generic subobject API instead</p>",
        "id": 234637408,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1618475568
    },
    {
        "content": "<p>But of course, sticking with subobjects will most likely entail a lot of both</p>",
        "id": 234637503,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1618475608
    },
    {
        "content": "<p>Personally, I'd love to see subobjects used for homology. I'm probably a bit too optimistic here, but I think that a very complete subobject API can make many things in category theory that were previously a bit annoying a lot more easy to work with, and I even think that restating many things about limits in terms of subobjects will be worth the effort down the line because at some point the API will complete enough that things start \"just working\".</p>\n<p>By the way, <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span>, I'd be very happy to help with the <code>homology2</code> branch (regardless of which option you choose to explore) if you're interested.</p>",
        "id": 234639481,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1618476733
    },
    {
        "content": "<p>No, I think you may be right, Markus, that lemmas about <code>subobject.mk</code> may be helpful. I have trouble getting my head around this.</p>",
        "id": 234639578,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1618476786
    },
    {
        "content": "<p>Yes -- while I was off making dinner here I had much the same thought as what Markus says above. When I look at his code on exactness, and feel bad about polluting it with the subobject API, I realise now that actually what is written about exactness was what was possible before we had subobjects! In fact, many of the next steps in homological algebra will require lots of our subobject machinery (subquotients by sups of subobjects, oh my!).</p>",
        "id": 234639758,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1618476878
    },
    {
        "content": "<p>So I think we'll just have a go at it, using subobjects, and hopefully we can use <code>subobject.mk</code> lemmas productively in places I'm missing them so far.</p>",
        "id": 234639798,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1618476909
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260921\">@Markus Himmel</span> -- I'd love to find a time soon to go over the homology2 branch with you. I'd both love help, and I think its substantial enough that the PR review process might best be started away from github.</p>",
        "id": 234639929,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1618476966
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260921\">@Markus Himmel</span>, I think I'm about to jump in and try this: in particular I'm going to refactor everything from <code>image_to_kernel_map</code> onwards through the two different <code>exact</code> files, to always work in terms of subobjects, rather than directly with the limits API.</p>",
        "id": 234644983,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1618479373
    },
    {
        "content": "<p>(In particular, I'm <em>changing</em> this stuff, not duplicating it, thereby forcing people who want to interact with <code>*/exact.lean</code> to use subobjects.)</p>",
        "id": 234645030,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1618479400
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260921\">@Markus Himmel</span>, I'm finally returning to this after a week or so away from it, and not very happy. Would you mind having a look at <a href=\"https://github.com/leanprover-community/mathlib/tree/homology2\">branch#homology2</a>, at the file <code>src/algebra/homology2/exact.lean</code>. Here I've just copied across your file from <code>homology/exact.lean</code>, and changed it to use <code>image_to_kernel</code> which is in terms of subobjects rather then <code>image_to_kernel_map</code> (which was in terms of the limits API). </p>\n<p>When faced with the rest of the file, however, I don't really know what I should be doing.</p>",
        "id": 235485873,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1619000517
    },
    {
        "content": "<p>(Besides that file, the branch compiles and is up-to-date with mathlib.)</p>",
        "id": 235485943,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1619000540
    },
    {
        "content": "<p>Do we keep the existing statements (in terms of the limits API), and then prove new versions of them (in terms of the subobject API)? Or just discard the old ones?</p>",
        "id": 235486005,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1619000594
    },
    {
        "content": "<p>I've been avoiding working on this file for several days, and would love someone to get past this hump. :-)</p>",
        "id": 235486056,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1619000640
    },
    {
        "content": "<p>My first instinct would be to throw everything away and start over with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">exact</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">⟶</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">⟶</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">image_eq_kernel</span> <span class=\"o\">:</span> <span class=\"n\">image_subobject</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">kernel_subobject</span> <span class=\"n\">g</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 235486880,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1619001055
    },
    {
        "content": "<p>Okay,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/--</span>\n<span class=\"sd\">Two morphisms `f : A ⟶ B`, `g : B ⟶ C` are called exact if</span>\n<span class=\"sd\">the image of `f` is the same as the kernel of `g`,</span>\n<span class=\"sd\">as subobjects of `B`.</span>\n<span class=\"sd\">-/</span>\n<span class=\"kd\">class</span> <span class=\"n\">exact</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">⟶</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">⟶</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">image_eq_kernel</span> <span class=\"o\">[]</span> <span class=\"o\">:</span> <span class=\"n\">image_subobject</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">kernel_subobject</span> <span class=\"n\">g</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[simp, reassoc]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">exact.w</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">⟶</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">⟶</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">exact</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">≫</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">image_subobject_arrow_comp</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">category.assoc</span><span class=\"o\">],</span>\n  <span class=\"n\">convert</span> <span class=\"n\">comp_zero</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">exact.image_eq_kernel</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">exact.is_iso</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">⟶</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">⟶</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">exact</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">is_iso</span> <span class=\"o\">(</span><span class=\"n\">image_to_kernel</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">exact.w</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨⟨</span><span class=\"n\">subobject.of_le</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">exact.image_eq_kernel</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">ge</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩⟩,</span>\n  <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">image_to_kernel</span><span class=\"o\">],</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">subobject.of_le_comp</span><span class=\"o\">,</span> <span class=\"n\">subobject.of_le_refl</span><span class=\"o\">],</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">exact_of_image_to_kernel_is_iso</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">⟶</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">⟶</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">≫</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">is_iso</span> <span class=\"o\">(</span><span class=\"n\">image_to_kernel</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">w</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">exact</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">image_eq_kernel</span> <span class=\"o\">:=</span> <span class=\"n\">subobject.eq_of_comm</span> <span class=\"o\">(</span><span class=\"n\">as_iso</span> <span class=\"o\">(</span><span class=\"n\">image_to_kernel</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">w</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>seems like off to a good start.</p>",
        "id": 235491686,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1619003687
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260921\">@Markus Himmel</span>, I do find some things that I don't know how to prove now without assuming e.g. abelian. With this definition, is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">exact_epi_comp</span> <span class=\"o\">[</span><span class=\"n\">exact</span> <span class=\"n\">g</span> <span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">epi</span> <span class=\"n\">f</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">≫</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"n\">h</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>still true in general?</p>",
        "id": 235492695,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1619004233
    },
    {
        "content": "<p>(It's fine if we have to assume abelian earlier, of course.)</p>",
        "id": 235492774,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1619004259
    },
    {
        "content": "<p>The new definition is definitely more restrictive than the old one</p>",
        "id": 235492818,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1619004286
    },
    {
        "content": "<p>Ok, in any case I'm stopping on <code>homology2</code> for the night.</p>",
        "id": 235493102,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1619004452
    },
    {
        "content": "<p>Regarding your proof of <code>exact.w</code> above: it should probably be a lemma that says <code>image_subobject f ≤ kernel_subobject g ↔ f ≫ g = 0</code> (cf. <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_map.range_le_ker_iff\">docs#linear_map.range_le_ker_iff</a>). Also, there is (as there always should be) an <code>arrow</code>-free proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">image.fac</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">category.assoc</span><span class=\"o\">],</span>\n  <span class=\"n\">convert</span> <span class=\"n\">comp_zero</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">limits.mk_le_kernel_subobject_iff</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">image.ι</span> <span class=\"n\">f</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">exact.image_eq_kernel.le</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>provided that we add</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">mk_le_kernel_subobject_iff</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Z</span> <span class=\"bp\">⟶</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">mono</span> <span class=\"n\">g</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">mk</span> <span class=\"n\">g</span> <span class=\"bp\">≤</span> <span class=\"n\">kernel_subobject</span> <span class=\"n\">f</span> <span class=\"bp\">↔</span> <span class=\"n\">g</span> <span class=\"bp\">≫</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>in <code>limits.lean</code>.</p>",
        "id": 235493572,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1619004674
    }
]