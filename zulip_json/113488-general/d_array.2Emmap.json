[
    {
        "content": "<p>This code is (unc)lean. Can someone please tell me how to make it (c)lean?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">namespace</span> <span class=\"n\">d_array</span>\n<span class=\"kn\">universe</span> <span class=\"kn\">variables</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">push_back_idx</span> <span class=\"o\">{</span><span class=\"n\">j</span> <span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">≠</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">lt_of_le_and_ne</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">le_of_lt_succ</span> <span class=\"n\">h₁</span><span class=\"o\">)</span> <span class=\"n\">h₂</span>\n\n<span class=\"n\">def</span> <span class=\"n\">mmap_core</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">monad</span> <span class=\"n\">m</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">d_array</span> <span class=\"n\">n</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">α</span> <span class=\"n\">i</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">d_array</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"err\">∘</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">j</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">lt_of_lt_of_le</span> <span class=\"n\">j</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">h</span><span class=\"bp\">⟩</span><span class=\"o\">)))</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"n\">pure</span> <span class=\"n\">d_array</span><span class=\"bp\">.</span><span class=\"n\">nil</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">do</span>\n    <span class=\"n\">bs</span> <span class=\"err\">←</span> <span class=\"n\">mmap_core</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">le_of_lt</span> <span class=\"n\">h</span><span class=\"o\">),</span>\n    <span class=\"n\">b</span> <span class=\"err\">←</span> <span class=\"n\">f</span> <span class=\"bp\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"bp\">⟩</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">read</span> <span class=\"bp\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"bp\">⟩</span><span class=\"o\">),</span>\n    <span class=\"n\">pure</span> <span class=\"err\">$</span> <span class=\"o\">{</span> <span class=\"n\">data</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">hj</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">hj&#39;</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"n\">i</span>\n    <span class=\"k\">then</span> <span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">hj&#39;</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">b</span> <span class=\"o\">}</span>\n    <span class=\"k\">else</span> <span class=\"n\">bs</span><span class=\"bp\">.</span><span class=\"n\">read</span> <span class=\"bp\">⟨</span><span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">push_back_idx</span> <span class=\"n\">hj</span> <span class=\"n\">hj&#39;</span><span class=\"bp\">⟩</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">- Monadically map a function over the array. -/</span>\n<span class=\"n\">def</span> <span class=\"n\">mmap</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">m</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">d_array</span> <span class=\"n\">n</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">α</span> <span class=\"n\">i</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">d_array</span> <span class=\"n\">n</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">have</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"err\">∘</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">j</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">j</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">⟩</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">funext</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n<span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">mmap_core</span> <span class=\"n\">f</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">le_refl</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">d_array</span>\n</pre></div>",
        "id": 193871125,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1586856662
    },
    {
        "content": "<p>Hm, <code>mmap_core</code> doesn't look good, it's requilding the whole array on every iteration</p>",
        "id": 193871356,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586856796
    },
    {
        "content": "<p>can't something <code>transverse</code> solve this?</p>",
        "id": 193871390,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586856824
    },
    {
        "content": "<p>Johan why are you currently interested in stuff like this? Is there some underlying mathematical reason behind it?</p>",
        "id": 193871509,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586856874
    },
    {
        "content": "<p>No... I'm trying to get <code>rewrite_search</code> into mathlib. This is part of cleaning up the code. And we want the tactic to be fast.</p>",
        "id": 193871568,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1586856909
    },
    {
        "content": "<p>This looks like a hard function to implement efficiently without type-changing write</p>",
        "id": 193871689,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586856964
    },
    {
        "content": "<p>I'm maybe not the right person for the job right now... but maybe I can learn to become a reasonably good person for the job <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 193871704,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1586856974
    },
    {
        "content": "<p>maybe kick it down to C++?</p>",
        "id": 193871707,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586856975
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/d_array.2Emmap/near/193871707\" title=\"#narrow/stream/113488-general/topic/d_array.2Emmap/near/193871707\">said</a>:</p>\n<blockquote>\n<p>maybe kick it down to C++?</p>\n</blockquote>\n<p>Maybe not me?</p>",
        "id": 193871739,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1586856985
    },
    {
        "content": "<p>Seems like the best case scenario for lean code is you construct a case splitty function by iterating <code>nat.cases_on</code>, and pass it to <code>array.mk</code></p>",
        "id": 193871901,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586857094
    },
    {
        "content": "<p>If you want to turn Lean into hello-world spaghetti, then you should ask me to start touching the C++</p>",
        "id": 193871918,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1586857114
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/d_array.2Emmap/near/193871568\" title=\"#narrow/stream/113488-general/topic/d_array.2Emmap/near/193871568\">said</a>:</p>\n<blockquote>\n<p>I'm trying to get <code>rewrite_search</code> into mathlib. </p>\n</blockquote>\n<p>That's a mathematical reason in some sense.</p>",
        "id": 193872187,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586857248
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/d_array.2Emmap/near/193871901\" title=\"#narrow/stream/113488-general/topic/d_array.2Emmap/near/193871901\">said</a>:</p>\n<blockquote>\n<p>Seems like the best case scenario for lean code is you construct a case splitty function by iterating <code>nat.cases_on</code>, and pass it to <code>array.mk</code></p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I'm not sure if I know how to do this in an acceptable way, because I really don't know what is fast/allowed and what is slow/bad code...</p>",
        "id": 193873097,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1586857747
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/d_array.2Emmap/near/193871901\" title=\"#narrow/stream/113488-general/topic/d_array.2Emmap/near/193871901\">said</a>:</p>\n<blockquote>\n<p>case splitty function by iterating <code>nat.cases_on</code>, and pass it to <code>array.mk</code></p>\n</blockquote>\n<p>That has quadratic runtime.  I see two other options:</p>\n<ol>\n<li>Define <code>array.mmap</code> (which is easy because we have <code>array.push_back</code>).  Then define <code>d_array.mmap</code> by converting <code>d_array n α</code> to <code>array n (sigma α)</code> and back.  (Or just don't bother with <code>d_array.mmap</code> at all.)</li>\n<li>Define <code>d_array.push_back</code> (and add two characters to <code>vm_array.cpp</code> for a fast VM implementation).  Then defne <code>d_array.mmap</code> using <code>d_array.push_back</code>.</li>\n</ol>",
        "id": 193873766,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1586858078
    },
    {
        "content": "<p>If the consensus is that <code>d_array.mmap</code> is not important, I'll try to focus on <code>array.mmap</code> instead (-;</p>",
        "id": 193873871,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1586858147
    },
    {
        "content": "<p>Unless you absolutely love working on <code>d_array.mmap</code> I would say go for <code>array.mmap</code> instead.</p>",
        "id": 193873957,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1586858187
    },
    {
        "content": "<p>It would also be great if there was a way to create an uninitialized array</p>",
        "id": 193874510,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586858486
    },
    {
        "content": "<p>Maybe there are tricks that can be done with unchecked cast</p>",
        "id": 193874650,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586858549
    },
    {
        "content": "<p>Alternatively, there could be another d_array constructor that uses a state transition function (like A -&gt; B x A) rather than a nat indexed function</p>",
        "id": 193874890,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586858683
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">constant</span> <span class=\"n\">d_array</span><span class=\"bp\">.</span><span class=\"n\">mmk</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">d_array</span> <span class=\"n\">n</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 193875389,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586858978
    },
    {
        "content": "<p>which makes <code>mmap</code> easy to define:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">mmap</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">m</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">d_array</span> <span class=\"n\">n</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">α</span> <span class=\"n\">i</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">d_array</span> <span class=\"n\">n</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">d_array</span><span class=\"bp\">.</span><span class=\"n\">mmk</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">read</span> <span class=\"n\">i</span><span class=\"o\">))</span>\n</pre></div>",
        "id": 193875592,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586859083
    },
    {
        "content": "<p>If you could explain what it is you are trying to achieve in non-Lean terminology, I could probably tell you how it is done in GHC. I don't know the difference between <code>d_array</code> and <code>array</code> though.</p>",
        "id": 193883414,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586864041
    },
    {
        "content": "<p><code>d_array</code> is dependent <code>array</code></p>",
        "id": 193883514,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1586864105
    },
    {
        "content": "<p>Okay, well obviously those don't exist in GHC.</p>",
        "id": 193883539,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586864128
    },
    {
        "content": "<p>I don't think it makes much difference. The main annoying thing is that you can't write a clean <code>push_back</code> on <code>d_array</code></p>",
        "id": 193884562,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586864831
    },
    {
        "content": "<p>My proposal above should have some haskell equivalent: a monadic constructor for <code>array</code></p>",
        "id": 193884701,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586864913
    },
    {
        "content": "<p>the haskell equivalent should have a type like <code>nat -&gt; (nat -&gt; m A) -&gt; m (array A)</code></p>",
        "id": 193884757,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586864958
    },
    {
        "content": "<p>I've pushed a commit that ditches <code>d_array.(m)map</code>.</p>",
        "id": 193884882,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1586865036
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/d_array.2Emmap/near/193884757\" title=\"#narrow/stream/113488-general/topic/d_array.2Emmap/near/193884757\">said</a>:</p>\n<blockquote>\n<p>the haskell equivalent should have a type like <code>nat -&gt; (nat -&gt; m A) -&gt; m (array A)</code></p>\n</blockquote>\n<p>This is actually kind of unreasonable in general, since <code>m</code> might be, like, the list monad</p>",
        "id": 193885452,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586865393
    },
    {
        "content": "<p>so I think it's not possible to write a general implementation which specializes to good code for the identity or state monads</p>",
        "id": 193885508,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586865442
    },
    {
        "content": "<p>I don't follow. It's just <code>traverse</code>, right?</p>",
        "id": 193885824,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586865650
    },
    {
        "content": "<p>If you did this in the list monad you would get a whole bunch of arrays</p>",
        "id": 193885848,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586865667
    },
    {
        "content": "<p>Right, and so you can't implement this by working in-place with a single array. You'd have to copy.</p>",
        "id": 193885982,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586865734
    },
    {
        "content": "<p>I don't really know how GHC works its magic here, but I guess I was imagining it would just inline the definitions until it looked linear</p>",
        "id": 193886100,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586865815
    },
    {
        "content": "<p>hmm <a href=\"https://hackage.haskell.org/package/vector-0.12.1.2/docs/Data-Vector.html#v:generateM\" title=\"https://hackage.haskell.org/package/vector-0.12.1.2/docs/Data-Vector.html#v:generateM\">https://hackage.haskell.org/package/vector-0.12.1.2/docs/Data-Vector.html#v:generateM</a></p>",
        "id": 193886242,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586865897
    },
    {
        "content": "<p>but the vector package is quite complicated and mysterious</p>",
        "id": 193886264,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586865913
    },
    {
        "content": "<p>Oh, it looks like it relies on rewrite rules to swap in a good implementation when <code>m = IO</code> (or <code>m = ST s</code>)</p>",
        "id": 193886435,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586866026
    },
    {
        "content": "<p>You are probably right that this approach is doomed in lean 3 though</p>",
        "id": 193886473,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586866064
    },
    {
        "content": "<p>we probably have to hardcode the state monad</p>",
        "id": 193886485,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586866078
    },
    {
        "content": "<p>Oh, also I think the actual Haskell answer to how do you do this when <code>m</code> is the state monad is that you just use <code>listArray</code> (construct an array from a list of elements) and build the list lazily</p>",
        "id": 193887144,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586866466
    },
    {
        "content": "<p>GHC may or may not avoid the allocation of the individual list cells and thunks but it's still fairly cheap if it doesn't</p>",
        "id": 193887206,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586866510
    },
    {
        "content": "<p>anyways, this is also not an option in Lean (3 or otherwise)</p>",
        "id": 193887226,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586866517
    },
    {
        "content": "<p>yeah, a lazy list would also be a pretty optimal solution here</p>",
        "id": 193887300,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586866560
    },
    {
        "content": "<p>although typing a dependent lazy list sounds like a pain</p>",
        "id": 193887384,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586866595
    },
    {
        "content": "<p>actually now that I come to think about it that could be used as a replacement for the case splitty function I mentioned above without any problems</p>",
        "id": 193887546,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586866688
    },
    {
        "content": "<p>it doesn't even need to be lazy</p>",
        "id": 193887561,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586866696
    }
]