[
    {
        "content": "<p>Can something like this be made to work?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">namespace</span> <span class=\"n\">modp</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">prime</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">rel</span> <span class=\"o\">:</span> <span class=\"n\">setoid</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">quotient_rel</span> <span class=\"o\">(</span><span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">span</span> <span class=\"o\">({</span><span class=\"n\">p</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">))</span>\n\n<span class=\"n\">local</span> <span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">instance</span><span class=\"o\">]</span> <span class=\"n\">rel</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">p</span><span class=\"o\">}</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">pow_add</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"err\">^</span><span class=\"n\">p</span> <span class=\"bp\">≈</span> <span class=\"n\">a</span><span class=\"err\">^</span><span class=\"n\">p</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"err\">^</span><span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"bp\">_</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">modp</span>\n</pre></div>",
        "id": 167442920,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1559782724
    },
    {
        "content": "<p>Look at <code>add_pow_char</code> in <code>algebra.char_p</code></p>",
        "id": 167443153,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1559783090
    },
    {
        "content": "<p>and use <code>quotient_ring.quotient</code> instead of <code>submodule.quotient</code></p>",
        "id": 167443181,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1559783152
    },
    {
        "content": "<p>Or <code>ideal.quotient</code>. I forget the name.</p>",
        "id": 167443229,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1559783168
    },
    {
        "content": "<p>I guess I should clarify (-;</p>",
        "id": 167443232,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1559783174
    },
    {
        "content": "<p>I want to use the relation.</p>",
        "id": 167443236,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1559783180
    },
    {
        "content": "<p>Point is that I want to do some computations with <code>mv_polynomial</code>s over the integers, modulo <code>p</code>.</p>",
        "id": 167443242,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1559783202
    },
    {
        "content": "<p>And using this relation would make for readable <code>calc</code> proofs</p>",
        "id": 167443247,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1559783219
    },
    {
        "content": "<p>Can you use <code>mv_polynomial</code>s over the integers modulo <code>p</code>?</p>",
        "id": 167443264,
        "sender_full_name": "Reid Barton",
        "timestamp": 1559783247
    },
    {
        "content": "<p>But isn't it easier to map everything into the quotient and use <code>equality</code>?</p>",
        "id": 167443265,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1559783248
    },
    {
        "content": "<p>Otherwise you'll have <code>ideal.quotient.mk (ideal.span ({p} : set (mv_polynomial int _))</code> all over the place...</p>",
        "id": 167443268,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1559783255
    },
    {
        "content": "<p>use notation</p>",
        "id": 167443272,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1559783278
    },
    {
        "content": "<p>I guess I could define a local notation for that... but then the proof state is still ugly</p>",
        "id": 167443313,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1559783285
    },
    {
        "content": "<p>I don't like the fact that we can't quotient mod p without things being ugly.</p>",
        "id": 167443321,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1559783313
    },
    {
        "content": "<p>I was hoping you could use <code>parameter</code> but it doesn't seem to help</p>",
        "id": 167443493,
        "sender_full_name": "Reid Barton",
        "timestamp": 1559783530
    },
    {
        "content": "<p>I would like to write</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">calc</span> <span class=\"o\">[</span><span class=\"n\">mod</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"n\">foo</span> <span class=\"bp\">=</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">blah</span>\n  <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">xyzzy</span> <span class=\"o\">:</span> <span class=\"n\">etc</span>\n</pre></div>",
        "id": 167443494,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1559783539
    },
    {
        "content": "<p>And then coercions should take care of the rest</p>",
        "id": 167443496,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1559783553
    },
    {
        "content": "<p>You should at least be able to write <code>calc foo =[p]= bar : blah ... = xyzzy : etc</code> using notation</p>",
        "id": 167443517,
        "sender_full_name": "Reid Barton",
        "timestamp": 1559783634
    },
    {
        "content": "<p>though at that point I guess you should just define notation which depends on <code>p</code></p>",
        "id": 167443568,
        "sender_full_name": "Reid Barton",
        "timestamp": 1559783660
    },
    {
        "content": "<p>Isn't that what you are doing in your example?</p>",
        "id": 167443653,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1559783795
    },
    {
        "content": "<p>Is interactive <code>calc</code> in core or in mathlib? I couldn't find it easily</p>",
        "id": 167455992,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1559802802
    },
    {
        "content": "<p>Must be in core because it's in TPIL</p>",
        "id": 167456077,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1559802911
    },
    {
        "content": "<p>Is that interactive <code>calc</code> or term-mode <code>calc</code>?</p>",
        "id": 167456297,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1559803211
    },
    {
        "content": "<p>I mean in a section you can define local notation which depends on a <code>variable</code>, so you don't need to write this funny <code>=[p]=</code> stuff.</p>",
        "id": 167458573,
        "sender_full_name": "Reid Barton",
        "timestamp": 1559806145
    },
    {
        "content": "<p>I am currently experimenting with</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">notation</span> <span class=\"n\">x</span> <span class=\"bp\">`</span> <span class=\"n\">mod</span><span class=\"err\">ᵢ</span> <span class=\"bp\">`</span> <span class=\"n\">I</span> <span class=\"o\">:=</span> <span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">I</span> <span class=\"n\">x</span>\n<span class=\"kn\">notation</span> <span class=\"n\">x</span> <span class=\"bp\">`</span> <span class=\"n\">modₛ</span> <span class=\"bp\">`</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">span</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">x</span>\n<span class=\"kn\">notation</span> <span class=\"n\">x</span> <span class=\"bp\">`</span> <span class=\"n\">modₑ</span> <span class=\"bp\">`</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">span</span> <span class=\"o\">({</span><span class=\"n\">a</span><span class=\"o\">}))</span> <span class=\"n\">x</span>\n</pre></div>",
        "id": 167458813,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1559806424
    },
    {
        "content": "<p>This can probably be improved quite a bit, using priorities etc... but I've no idea what would be sensible.</p>",
        "id": 167458868,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1559806453
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">namespace</span> <span class=\"n\">modp</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">prime</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n\n<span class=\"kn\">notation</span> <span class=\"n\">x</span> <span class=\"bp\">`</span> <span class=\"n\">mod</span><span class=\"err\">ᵢ</span> <span class=\"bp\">`</span> <span class=\"n\">I</span> <span class=\"o\">:=</span> <span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">I</span> <span class=\"n\">x</span>\n<span class=\"kn\">notation</span> <span class=\"n\">x</span> <span class=\"bp\">`</span> <span class=\"n\">modₛ</span> <span class=\"bp\">`</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">span</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">x</span>\n<span class=\"kn\">notation</span> <span class=\"n\">x</span> <span class=\"bp\">`</span> <span class=\"n\">modₑ</span> <span class=\"bp\">`</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">span</span> <span class=\"o\">({</span><span class=\"n\">a</span><span class=\"o\">}))</span> <span class=\"n\">x</span>\n\n<span class=\"n\">include</span> <span class=\"n\">hp</span>\n<span class=\"kn\">instance</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">is_unit</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">char_p</span> <span class=\"o\">(</span><span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">span</span> <span class=\"o\">({</span><span class=\"n\">p</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">quotient</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨</span><span class=\"k\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">helper</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">span</span> <span class=\"o\">({</span><span class=\"n\">p</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">quotient</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n    <span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">span</span> <span class=\"o\">({</span><span class=\"n\">p</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">induction</span> <span class=\"n\">m</span> <span class=\"k\">with</span> <span class=\"n\">m</span> <span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">refl</span><span class=\"o\">},</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">ih</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">helper</span><span class=\"o\">,</span> <span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">eq_zero_iff_mem</span><span class=\"o\">,</span> <span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">mem_span_singleton</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">H</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">hc</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">coprime_or_dvd_of_prime</span> <span class=\"n\">hp</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">hn</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n    <span class=\"n\">swap</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">exact</span> <span class=\"n\">hn</span><span class=\"o\">},</span>\n    <span class=\"k\">have</span> <span class=\"n\">key</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">gcd_eq_gcd_ab</span> <span class=\"n\">p</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"n\">delta</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">coprime</span> <span class=\"n\">at</span> <span class=\"n\">hn</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">hn</span> <span class=\"n\">at</span> <span class=\"n\">key</span><span class=\"o\">,</span>\n    <span class=\"n\">replace</span> <span class=\"n\">key</span> <span class=\"o\">:=</span> <span class=\"n\">congr_arg</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"n\">key</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">cast_coe_nat</span><span class=\"o\">,</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">cast_add</span><span class=\"o\">,</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">coe_nat_zero</span><span class=\"o\">,</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">cast_mul</span><span class=\"o\">,</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">cast_one</span><span class=\"o\">,</span>\n      <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">coe_nat_succ</span><span class=\"o\">,</span> <span class=\"n\">zero_add</span><span class=\"o\">,</span> <span class=\"n\">hc</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">key</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">mul_add</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">key</span><span class=\"o\">,</span>\n    <span class=\"n\">exfalso</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">is_unit_iff_exists_inv</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"n\">key</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"bp\">⟩</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"bp\">⟨</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">eq_zero_of_zero_dvd</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">zero_mul</span><span class=\"o\">,</span> <span class=\"n\">helper</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"bp\">*</span><span class=\"n\">c</span><span class=\"o\">),</span> <span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">eq_zero_iff_mem</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cast_mul</span><span class=\"o\">],</span>\n    <span class=\"n\">exact</span> <span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">mul_mem_right</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">subset_span</span> <span class=\"err\">$</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem_singleton</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span><span class=\"bp\">⟩</span>\n<span class=\"bp\">.</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"err\">^</span><span class=\"n\">p</span> <span class=\"n\">modₑ</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"err\">^</span><span class=\"n\">p</span> <span class=\"n\">modₑ</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"err\">^</span><span class=\"n\">p</span> <span class=\"n\">modₑ</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">modp</span>\n</pre></div>",
        "id": 167459173,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1559806818
    },
    {
        "content": "<p>Does <code>simp</code> see through notation?</p>",
        "id": 167459280,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1559806961
    },
    {
        "content": "<p>Everything sees through notation</p>",
        "id": 167459509,
        "sender_full_name": "Reid Barton",
        "timestamp": 1559807268
    }
]