[
    {
        "content": "<p>I was getting annoyed that working with definitions such as <code>irreducible</code>, <code>prime</code> and <code>associated</code>, I had to write quite verbose terms like <code>dvd_symm_of_irreducible (irreducible_of_prime (prime_of_factor _ hp)) (irreducible_of_prime (prime_of_factor _ hq)) hdvd</code>, where a lot of redundancy can be eliminated with dot notation: <code>(prime_of_factor _ hp).irreducible.dvd_symm (prime_of_factor _ hq).irreducible hdvd</code>. So I made PR <a href=\"https://github.com/leanprover-community/mathlib/issues/8556\">#8556</a>, which changes the spelling of many of the lemmas in <code>algebra/associated.lean</code> to make usage of dot notation easier.</p>\n<p>Since this would affect a lot of files, I want to see what everyone thinks before fully putting my efforts behind the PR.</p>",
        "id": 248467148,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1628164779
    },
    {
        "content": "<p>Did you consider using <code>alias</code> to make aliases similar to eg <code>lt_of_le_of_lt</code> and <code>has_le.le.trans_lt</code>?</p>",
        "id": 248467351,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1628164873
    },
    {
        "content": "<p>That would certainly be a way to reduce your workload, but I think in this case having the dot notations alone is fine if you're willing to purge all uses of the old spellings.</p>",
        "id": 248467457,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1628164937
    },
    {
        "content": "<p>I did, but I feel like the new names are strictly better, since they are shorter (turning <code>_</code> or <code>_of_</code> into <code>.</code>) but otherwise the same.</p>",
        "id": 248467482,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1628164959
    },
    {
        "content": "<p>(OK, <code>dvd_iff_dvd_of_rel_right</code> did become <code>associated.dvd_iff_dvd_right</code> which is slightly longer, but I believe the <code>rel</code> in the original name was a mistake.)</p>",
        "id": 248467634,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1628165062
    },
    {
        "content": "<p>Okay well then as a dot notation partisan I back up that change!</p>",
        "id": 248467655,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1628165086
    },
    {
        "content": "<p>But do not forget to make some of them <code>protected</code> <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 248467693,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1628165108
    },
    {
        "content": "<p>BTW: Is there a comprehensive guide to the use of dot notation? Given its ubiquity, isn't it something which would deserve to appear in the left column of <a href=\"https://leanprover-community.github.io/mathlib_docs/\">https://leanprover-community.github.io/mathlib_docs/</a> ?</p>",
        "id": 248472884,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1628168238
    },
    {
        "content": "<p>Or perhaps in <a href=\"https://leanprover-community.github.io/contribute/naming.html\">#naming</a></p>",
        "id": 248473892,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1628168734
    },
    {
        "content": "<p>I totally agree. in general, there are many things I could see added to the website, like a glossary, a sortable list of files (similar to the contributors page)...</p>",
        "id": 248474181,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1628168872
    },
    {
        "content": "<p>But isn't the dot notation somewhat deeper than just a naming convention? The fact that I can write <code>P.irreducible</code> to apply <code>prime.irreducible</code> to a prime <code>P</code> is not (well?) documented, right?</p>",
        "id": 248474254,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1628168896
    },
    {
        "content": "<p>The things in the left column of mathlib_docs tend to be related to library design choices. What you're describing are language features, which probably belong in the parts of the lean reference manual that were never written.</p>",
        "id": 248474490,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1628169024
    },
    {
        "content": "<p>Ah I thought Filippo was more talking about what kind of things mathlib uses dot notation for.</p>",
        "id": 248474780,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1628169180
    },
    {
        "content": "<p>Right, that's the viewpoint that suggests <a href=\"https://leanprover-community.github.io/contribute/naming.html\">#naming</a> is a good place to me</p>",
        "id": 248475161,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1628169365
    },
    {
        "content": "<p>Well, indeed what I had in mind was more the \"language feature\" as Eric calls it, and if this has never been documented then my point is not very sound.  If it is a matter of what should/should not have dot notation, I agree that <a href=\"https://leanprover-community.github.io/contribute/naming.html\">#naming</a> is the right place.</p>",
        "id": 248475474,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1628169548
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/RFC.3A.20adding.20dot.20notations.20.238556/near/248475161\">said</a>:</p>\n<blockquote>\n<p>Right, that's the viewpoint that suggests <a href=\"https://leanprover-community.github.io/contribute/naming.html\">#naming</a> is a good place to me</p>\n</blockquote>\n<p>I think we should indeed expand this section of <a href=\"https://leanprover-community.github.io/contribute/naming.html\">#naming</a>:</p>\n<blockquote>\n<p>It is useful to use dot notation even for types which are not inductive types. For instance, we use:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"n\">le.trans</span>\n    <span class=\"n\">lt.trans_le</span>\n    <span class=\"n\">le.trans_lt</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 248476557,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1628170135
    },
    {
        "content": "<p>Eh! This is a lie. These lemmas have a prepended <code>has_le</code> or <code>has_lt</code> namespace.</p>",
        "id": 248476614,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1628170186
    },
    {
        "content": "<p>Perhaps:</p>\n<blockquote>\n<p>Introduce dot notation when it is practical to do so, namely when a parameter has a name as its head symbol. Following this convention, <code>∀ {x}, foo x → bar x ∨ baz x</code> should be called <code>foo.bar_or_baz</code> rather than <code>bar_or_baz_of_foo</code>. Examples in mathlib:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">has_le.le.trans</span> <span class=\"c1\">-- in addition to `le_trans`</span>\n<span class=\"n\">has_lt.lt.trans_le</span> <span class=\"c1\">-- in addition to `lt_of_lt_of_le`</span>\n<span class=\"n\">has_le.le.trans_lt</span> <span class=\"c1\">-- in addition to `lt_of_le_of_lt`</span>\n<span class=\"n\">prime.irreducible</span> <span class=\"c1\">-- instead of `irreducible_of_prime`</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 248477327,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1628170555
    },
    {
        "content": "<p>You can even talk about cases where the head symbol <strong>isn't</strong> the one that's dot notated. I'm still very unclear about when it works.</p>",
        "id": 248477467,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1628170621
    },
    {
        "content": "<p>Right, if <code>(x : foo y z)</code> (which has <code>foo</code> as the head symbol) but <code>foo y z</code> unfolds to <code>bar z y</code>, then <code>x.baz</code> will still find <code>bar.foo</code></p>",
        "id": 248477543,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1628170669
    },
    {
        "content": "<p>It seems to work so long as you totally apply the function (not leaving any <code>→</code>). If you partially apply it, sometimes it works, sometimes it doesn't.</p>",
        "id": 248477618,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1628170687
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span>, don't confuse head symbol with first argument</p>",
        "id": 248477679,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1628170720
    },
    {
        "content": "<p>Ah, uh, yeah that's probably the problem.</p>",
        "id": 248477704,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1628170739
    },
    {
        "content": "<p>Mind adding an explanation of that too? <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 248477723,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1628170755
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.whnf\">docs#tactic.whnf</a> <del>I think might</del> <em>does not</em> mention what head symbols are, but is relevant nonetheless.</p>",
        "id": 248477746,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1628170774
    },
    {
        "content": "<p>Thinking about it a bit more, it's not really the most accurate description that \"a parameter has a name as its head\". I want to definitely include things like <code>associated x y</code>, definitely excluding things like <code>associated x y ∨ associated y z</code> (sincee the head symbol is <code>or</code>, which is not descriptive enough), and potentially allowing <code>associated x (2 * y)</code> (where the head symbol does not fully describe the situation, but is recognizable enough).</p>",
        "id": 248480979,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1628172113
    },
    {
        "content": "<p>\"a parameter has a name as its head\" is a reasonably accurate description of when dot notation works, but perhaps not of when it is a good choice</p>",
        "id": 248481219,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1628172222
    },
    {
        "content": "<p>I understand dot notation as just accessing into the term's namespace. So if you have something called <code>my_term.my_lemma</code> and a term <code>h : my_term</code>, then <code>h.my_lemma</code> will work. This is why <code>l : list R</code> and then <code>l.foldr</code> works, even though <code>list.foldr (f : α → β → β)  (b : β) : list α → β</code>.</p>",
        "id": 248481596,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1628172377
    },
    {
        "content": "<p>Indeed! So coming at it from a namespace-based viewpoint sounds like it would be clearer:</p>\n<blockquote>\n<p>Prefer namespacing over longer un-namespaced names, when we can use dot notation. Following this convention, ∀ {x}, foo x → bar x ∨ baz x should be called foo.bar_or_baz rather than bar_or_baz_of_foo. Examples in mathlib:</p>\n</blockquote>",
        "id": 248482232,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1628172642
    },
    {
        "content": "<p>s/so that/when/</p>",
        "id": 248482319,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1628172691
    }
]