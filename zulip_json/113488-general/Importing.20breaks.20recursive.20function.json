[
    {
        "content": "<p>This question is more for my curiosity rather than practical need, but if I have this recursive function</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">myfun</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"mi\">3</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">myfun</span> <span class=\"o\">((</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>As soon as I add <code>import data.nat.basic</code> at the top it fails to prove termination</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.basic</span>\n<span class=\"kd\">def</span> <span class=\"n\">myfun</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"mi\">3</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">myfun</span> <span class=\"o\">((</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"c1\">-- failed to prove recursive application is decreasing</span>\n</code></pre></div>\n<p>However, I can prove termination after importing <code>data.nat.basic</code> by providing a proof that <code>(n / 2).succ &lt; n + 2</code><br>\nI assume is has to do with some definition in mathlib taking priority over the core definition, but is there a reason that before importing <code>data.nat.basic</code> the goal is prove <code>(n + 2) / 2 &lt; n + 2</code> and afterwards the goal is to prove <code>(n / 2).succ &lt; n + 2</code>?</p>",
        "id": 316494248,
        "sender_full_name": "Niels Voss",
        "timestamp": 1671300648
    },
    {
        "content": "<p>Maybe the equation compiler uses <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#simp\">tactic#simp</a> somewhere, since</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n</code></pre></div>\n<p>works if data.nat.basic is imported and doesn't work if it's not.</p>",
        "id": 316548396,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1671346228
    },
    {
        "content": "<p>So, in other words, importing <code>data.nat.basic</code> adds extra <code>simp</code> lemmas, changing the goal generated by the equation compiler? That would explain the difference in goals. Does this mean that proving well-founded recursion essentially relies on a non-terminal simp?</p>",
        "id": 316548812,
        "sender_full_name": "Niels Voss",
        "timestamp": 1671346683
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/well_founded_tactics.default_dec_tac\">docs#well_founded_tactics.default_dec_tac</a></p>",
        "id": 316578245,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671365582
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean/blob/53e8520d8964c7632989880372d91ba0cecbaf00/library/init/meta/well_founded_tactics.lean#L110\">Yes</a></p>",
        "id": 316578464,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671365670
    }
]