[
    {
        "content": "<p>Sorry for the stupid question, but I am struggling to get <code>char_p</code> to work. I want to define some structure over a ring and some instance is only defined for <code>ring_char R ≠ 2</code>. So my code looks like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">no_zero_divisors</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">nontrivial</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">hR</span> <span class=\"o\">:</span> <span class=\"n\">ring_char</span> <span class=\"n\">R</span> <span class=\"bp\">≠</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n\n<span class=\"kn\">include</span> <span class=\"n\">hR</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_inv</span> <span class=\"o\">(</span><span class=\"n\">complicated_structure</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">inv</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"o\">}</span>\n\n<span class=\"c1\">-- What to do here?</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">coe_inv</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">complicated_strucuter</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">A</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">...</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">...</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>The <code>coe_inv</code> lemma fails of course because it does not know that we have instance. So I guess one needs some fancy commands to tell lean that it can the deduce the instance from <code>hR</code>. On the other hand I feel like this is imitating typeclasses in a stupid way, so I would hope that there is a more sensible way of doing this.</p>",
        "id": 289898622,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1658083751
    },
    {
        "content": "<p>the error is: failed to synthesize type class instance for <code>has_inv ..</code></p>",
        "id": 289898721,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1658083843
    },
    {
        "content": "<p>A possible solution is to use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fact\">docs#fact</a> such as <code>[fact (ring_char R ≠ 2)]</code>.</p>",
        "id": 289898748,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1658083896
    },
    {
        "content": "<p>The alternative is to make <code>hp</code> a parameter to your <code>complicated_structure</code></p>",
        "id": 289898805,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658083948
    },
    {
        "content": "<p>I guess the <code>fact</code> is more sensible, since the main applications are the reals and the complex numbers and carrying around the characteristic is a bit annoying there</p>",
        "id": 289898909,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1658084101
    },
    {
        "content": "<p>Now everything works perfectly. Thanks.</p>",
        "id": 289899149,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1658084446
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"412682\">Moritz Doll</span> has marked this topic as resolved.</p>",
        "id": 289899152,
        "sender_full_name": "Notification Bot",
        "timestamp": 1658084450
    },
    {
        "content": "<p>I think the way this is usually done is <code>[invertible (2 : R)]</code></p>",
        "id": 289901607,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1658087994
    },
    {
        "content": "<p>oh, this is not a field, nvm</p>",
        "id": 289901672,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1658088029
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/invertible\">docs#invertible</a> only needs a monoid</p>",
        "id": 289906285,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658094376
    },
    {
        "content": "<p>yeah but you can have the char not be two and also 2 not invertible, e.g. ℤ</p>",
        "id": 289907080,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1658095627
    }
]