[
    {
        "content": "<p>Yoohoo, I'm done.<br>\n<a href=\"https://gist.github.com/jcommelin/9ea76f7a1356ed8dd9499e765f580ef8\" target=\"_blank\" title=\"https://gist.github.com/jcommelin/9ea76f7a1356ed8dd9499e765f580ef8\">https://gist.github.com/jcommelin/9ea76f7a1356ed8dd9499e765f580ef8</a><br>\nIt's pretty long and ugly.</p>",
        "id": 125618074,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524573058
    },
    {
        "content": "<p>Feel free to start golfing on this one (-;</p>",
        "id": 125618084,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524573069
    },
    {
        "content": "<p>I feel that a computer should almost be able to find the proof alone</p>",
        "id": 125618094,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524573105
    },
    {
        "content": "<p>But my tactic-fu is small and my tactic-writing-fu is nonexistent</p>",
        "id": 125618132,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524573123
    },
    {
        "content": "<p>But how would the computer know how many times to <code>apply_assumption</code>? <span class=\"emoji emoji-1f635\" title=\"dizzy face\">:dizzy_face:</span> <span class=\"emoji emoji-1f606\" title=\"laughing\">:laughing:</span></p>",
        "id": 125618139,
        "sender_full_name": "Sean Leather",
        "timestamp": 1524573149
    },
    {
        "content": "<p>Yeah, agreed... but still... every line I really just follow my nose...</p>",
        "id": 125618157,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524573203
    },
    {
        "content": "<p>The nice thing about your proof is that it is clearly step-by-step.</p>",
        "id": 125618160,
        "sender_full_name": "Sean Leather",
        "timestamp": 1524573212
    },
    {
        "content": "<p>And I guess already with the existing tactics I think it can be reasonably shortened</p>",
        "id": 125618162,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524573227
    },
    {
        "content": "<p>Because using commutativity or computations in a group takes pretty long atm</p>",
        "id": 125618203,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524573257
    },
    {
        "content": "<p>I feel like the lines with <code>\\ex bla : Group, condition</code> are the only place that Lean should get my help.</p>",
        "id": 125618223,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524573317
    },
    {
        "content": "<p>The rest it should figure out alone...</p>",
        "id": 125618224,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524573330
    },
    {
        "content": "<p>/me updated the proof of the five lemma: <a href=\"https://gist.github.com/jcommelin/9ea76f7a1356ed8dd9499e765f580ef8\" target=\"_blank\" title=\"https://gist.github.com/jcommelin/9ea76f7a1356ed8dd9499e765f580ef8\">https://gist.github.com/jcommelin/9ea76f7a1356ed8dd9499e765f580ef8</a></p>",
        "id": 125622862,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524580447
    },
    {
        "content": "<p>It is now refactored to first prove two four-lemmas</p>",
        "id": 125622867,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524580460
    },
    {
        "content": "<p>These then combine to prove the five lemma</p>",
        "id": 125622871,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524580467
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">begin</span>\n <span class=\"n\">split</span><span class=\"o\">,</span>\n <span class=\"n\">apply</span> <span class=\"n\">four_lemma₁</span> <span class=\"n\">com₁</span> <span class=\"n\">com₂</span> <span class=\"n\">com₃</span> <span class=\"n\">eB₁</span> <span class=\"n\">eC₁</span> <span class=\"n\">eB₂</span> <span class=\"n\">eC₂</span> <span class=\"n\">hj</span> <span class=\"n\">hk</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">hm</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span>\n <span class=\"n\">apply</span> <span class=\"n\">four_lemma₂</span> <span class=\"n\">com₂</span> <span class=\"n\">com₃</span> <span class=\"n\">com₄</span> <span class=\"n\">eC₁</span> <span class=\"n\">eD₁</span> <span class=\"n\">eC₂</span> <span class=\"n\">eD₂</span> <span class=\"n\">hk</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">hm</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 125622956,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524580598
    },
    {
        "content": "<p>now I would write this in term mode lol</p>",
        "id": 125622957,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524580602
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"bp\">⟨</span><span class=\"n\">four_lemma₁</span> <span class=\"n\">com₁</span> <span class=\"n\">com₂</span> <span class=\"n\">com₃</span> <span class=\"n\">eB₁</span> <span class=\"n\">eC₁</span> <span class=\"n\">eB₂</span> <span class=\"n\">eC₂</span> <span class=\"n\">hj</span> <span class=\"n\">hk</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">hm</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">four_lemma₂</span> <span class=\"n\">com₂</span> <span class=\"n\">com₃</span> <span class=\"n\">com₄</span> <span class=\"n\">eC₁</span> <span class=\"n\">eD₁</span> <span class=\"n\">eC₂</span> <span class=\"n\">eD₂</span> <span class=\"n\">hk</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">hm</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">hn</span><span class=\"bp\">⟩</span>\n</pre></div>",
        "id": 125622973,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524580652
    },
    {
        "content": "<p>Aah, yes. I should have done that</p>",
        "id": 125622974,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524580663
    },
    {
        "content": "<p>Also, can I use some <code>_</code> business to let it figure out the hypotheses itself?</p>",
        "id": 125623014,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524580684
    },
    {
        "content": "<p>yes</p>",
        "id": 125623020,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524580695
    },
    {
        "content": "<p>I tried... and failed <span class=\"emoji emoji-1f61e\" title=\"disappointed\">:disappointed:</span></p>",
        "id": 125623026,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524580709
    },
    {
        "content": "<p>you removed the wrong things :P</p>",
        "id": 125623032,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524580720
    },
    {
        "content": "<p><code>_</code> does not find the value from assumptions</p>",
        "id": 125623035,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524580735
    },
    {
        "content": "<p><code>_</code> only does unification</p>",
        "id": 125623036,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524580738
    },
    {
        "content": "<p>and only first order (and zeroth order) unification</p>",
        "id": 125623044,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524580749
    },
    {
        "content": "<p>Hmm, ok... But it should be able to figure out everything alone</p>",
        "id": 125623109,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524580811
    },
    {
        "content": "<p>I will need to learn at some point how to do that</p>",
        "id": 125623111,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524580822
    },
    {
        "content": "<p>it does <strong>not</strong> find the appropriate proofs from the asumptions</p>",
        "id": 125623112,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524580826
    },
    {
        "content": "<p>No, but I mean the <code>com₁ com₂ com₃ eB₁ eC₁ eB₂ eC₂ hj hk.1 hm.1</code> stuff</p>",
        "id": 125623116,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524580853
    },
    {
        "content": "<p>why would it be able to figure them out?</p>",
        "id": 125623127,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524580868
    },
    {
        "content": "<p>the goal is <code>bijective l</code></p>",
        "id": 125623130,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524580876
    },
    {
        "content": "<p>it does not contain any of those things you mentioned</p>",
        "id": 125623131,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524580884
    },
    {
        "content": "<p>they have to be found from the assumption list</p>",
        "id": 125623137,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524580890
    },
    {
        "content": "<p>which <code>_</code> does not do</p>",
        "id": 125623139,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524580892
    },
    {
        "content": "<p><code>_</code> only unifies types</p>",
        "id": 125623142,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524580900
    },
    {
        "content": "<p>Yes, and the type of <code>l</code> is <code>C_1 \\to C_2</code></p>",
        "id": 125623144,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524580903
    },
    {
        "content": "<p>and those are mentioned in the statement, and there are requirements (e.g. a group <code>B_1</code> with a map to <code>C_1</code></p>",
        "id": 125623187,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524580934
    },
    {
        "content": "<p>but if you replace <code>com₁</code> with <code>_</code>, the compiler would have to find <code>com₁</code> from the assumptions</p>",
        "id": 125623188,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524580934
    },
    {
        "content": "<p>...), and those are also in the context, etcc...</p>",
        "id": 125623197,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524580952
    },
    {
        "content": "<p>it is not in the type of the goal</p>",
        "id": 125623204,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524580962
    },
    {
        "content": "<p>it is not in the type of any component of the goal</p>",
        "id": 125623205,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524580969
    },
    {
        "content": "<p><code>_</code> does not find things from the local context</p>",
        "id": 125623209,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524580977
    },
    {
        "content": "<p>(that is what I meant by assumption)</p>",
        "id": 125623211,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524580980
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">H1</span> <span class=\"o\">:</span> <span class=\"n\">something</span>\n<span class=\"n\">H2</span> <span class=\"o\">:</span> <span class=\"n\">something</span>\n<span class=\"bp\">|-</span> <span class=\"n\">goal</span>\n</pre></div>",
        "id": 125623221,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524580989
    },
    {
        "content": "<p><code>_</code> does not match against <code>H1</code> and <code>H2</code></p>",
        "id": 125623222,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524580997
    },
    {
        "content": "<p>unless the <code>goal</code> contains them</p>",
        "id": 125623223,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524581001
    },
    {
        "content": "<p>I see</p>",
        "id": 125623228,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524581011
    },
    {
        "content": "<p>So, maybe I should not have done <code>apply ...</code>, but <code>simp [four_lemma_1]</code></p>",
        "id": 125623235,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524581037
    },
    {
        "content": "<p>or something like that?</p>",
        "id": 125623238,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524581041
    },
    {
        "content": "<p>does that work?</p>",
        "id": 125623278,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524581050
    },
    {
        "content": "<p>I doubt that works</p>",
        "id": 125623282,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524581057
    },
    {
        "content": "<p>try <code>apply four_lemma₁, repeat { assumption }</code></p>",
        "id": 125623284,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524581064
    },
    {
        "content": "<p>alternatively <code>apply four_lemma₁; try { assumption }</code></p>",
        "id": 125623306,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524581121
    },
    {
        "content": "<p>hmm, doesn't make it shorter... because it can't figure out <code>hk.1</code> on it's own...</p>",
        "id": 125623366,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524581193
    },
    {
        "content": "<p>right</p>",
        "id": 125623369,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524581200
    },
    {
        "content": "<p>never mind, I learned something (-;</p>",
        "id": 125623373,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524581212
    },
    {
        "content": "<p>:)</p>",
        "id": 125623377,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524581220
    },
    {
        "content": "<p>Next up: the snake lemma ???</p>",
        "id": 125623394,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524581266
    },
    {
        "content": "<p>I heard one of them follows from the other</p>",
        "id": 125623399,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524581280
    },
    {
        "content": "<p>I guess the snake lemma is stronger</p>",
        "id": 125623443,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524581299
    },
    {
        "content": "<p>maybe we should have proved the snake lemma first :P</p>",
        "id": 125623451,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524581312
    },
    {
        "content": "<p>lol</p>",
        "id": 125623455,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524581318
    },
    {
        "content": "<p>There is also the salamander lemma</p>",
        "id": 125623461,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524581336
    },
    {
        "content": "<p>And you can apply it 4 times to get the snake lemma</p>",
        "id": 125623470,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524581346
    },
    {
        "content": "<p>then perhaps we should prove that first</p>",
        "id": 125623475,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524581360
    },
    {
        "content": "<p><a href=\"https://ncatlab.org/nlab/show/salamander+lemma\" target=\"_blank\" title=\"https://ncatlab.org/nlab/show/salamander+lemma\">https://ncatlab.org/nlab/show/salamander+lemma</a></p>",
        "id": 125623485,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524581386
    },
    {
        "content": "<p>My eyes always glaze over when I read that page</p>",
        "id": 125623491,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524581399
    },
    {
        "content": "<p>:P</p>",
        "id": 125623536,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524581408
    },
    {
        "content": "<p>really, prove the strongest theorem, and your work will be minimized</p>",
        "id": 125623572,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524581514
    },
    {
        "content": "<p>I need the three lemma</p>",
        "id": 125762769,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524814634
    },
    {
        "content": "<p>I need that if A,B,C,A',B',C' are abelian groups</p>",
        "id": 125762772,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524814645
    },
    {
        "content": "<p>and A -&gt; B -&gt; C is exact</p>",
        "id": 125762773,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524814652
    },
    {
        "content": "<p>and A is isomorphic to A'</p>",
        "id": 125762776,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524814659
    },
    {
        "content": "<p>and B to B'</p>",
        "id": 125762777,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524814660
    },
    {
        "content": "<p>and C to C'</p>",
        "id": 125762778,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524814662
    },
    {
        "content": "<p>and we have maps A' -&gt; B' -&gt; C'</p>",
        "id": 125762780,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524814675
    },
    {
        "content": "<p>with both squares commuting</p>",
        "id": 125762782,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524814681
    },
    {
        "content": "<p>then A' -&gt; B' -&gt; C' is exact</p>",
        "id": 125762821,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524814687
    },
    {
        "content": "<p>As a mathematician my instinct is to do surgery on the first sequence</p>",
        "id": 125762824,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524814722
    },
    {
        "content": "<p>i.e. simply replace A with A', B with B' and C with C' and then say we're done</p>",
        "id": 125762825,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524814736
    },
    {
        "content": "<p>I am trying to work out if there is a general principle here</p>",
        "id": 125762832,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524814782
    },
    {
        "content": "<p>but if there is, I don't think I can formulate it well in Lean yet.</p>",
        "id": 125762873,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524814803
    },
    {
        "content": "<p>It says something like \"if there is a commutative diagram, and you do some computation like image of this over kernel of this\"</p>",
        "id": 125762884,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524814830
    },
    {
        "content": "<p>\"and then you take a term in the commutative diagram and replace it with an isomorphic term such that all the diagrams commute\"</p>",
        "id": 125762891,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524814852
    },
    {
        "content": "<p>\"then the computation changes in the same way\"</p>",
        "id": 125762893,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524814862
    },
    {
        "content": "<p>but I fear that I am going to have to use three lemmas to prove the three lemma</p>",
        "id": 125762899,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524814886
    },
    {
        "content": "<p>one for replacing A</p>",
        "id": 125762900,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524814890
    },
    {
        "content": "<p>one for B</p>",
        "id": 125762901,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524814891
    },
    {
        "content": "<p>and one for C</p>",
        "id": 125762902,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524814893
    },
    {
        "content": "<p>or just prove it by brute force in one go</p>",
        "id": 125762955,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524814990
    },
    {
        "content": "<p>and then deal with the fact that I'll need another trivial lemma of this form tomorrow, tomorrow</p>",
        "id": 125762956,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524815007
    },
    {
        "content": "<p>I want more of this abstract nonsense in Lean</p>",
        "id": 125762958,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524815032
    },
    {
        "content": "<p>either for abelian groups</p>",
        "id": 125762959,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524815040
    },
    {
        "content": "<p>or for abelian categories</p>",
        "id": 125762999,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524815047
    },
    {
        "content": "<p>Hmm, I'm sorry that my five lemma doesn't help <span class=\"emoji emoji-1f641\" title=\"slightly frowning face\">:slightly_frowning_face:</span></p>",
        "id": 125763020,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524815130
    },
    {
        "content": "<p>yes, it's too strong :-)</p>",
        "id": 125763021,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524815139
    },
    {
        "content": "<p>it proves something non-trivial</p>",
        "id": 125763023,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524815149
    },
    {
        "content": "<p>Haha</p>",
        "id": 125763028,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524815156
    },
    {
        "content": "<p>We need a very good way of substituting isomorphic things</p>",
        "id": 125763070,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524815171
    },
    {
        "content": "<p><code>rw</code> :-)</p>",
        "id": 125763071,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524815176
    },
    {
        "content": "<p>I don't know much about HoTT, but I think this is what Voevodsky was after as well</p>",
        "id": 125763072,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524815189
    },
    {
        "content": "<p>yes</p>",
        "id": 125763073,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524815193
    },
    {
        "content": "<p>I wrote some vague mumblings about that in some other thread a week or so ago</p>",
        "id": 125763074,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524815214
    },
    {
        "content": "<p>after reading some of his work</p>",
        "id": 125763075,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524815219
    },
    {
        "content": "<p>but he redefined =</p>",
        "id": 125763081,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524815229
    },
    {
        "content": "<p>Well, if you're changing from ZFC to type theory, might as well change '='</p>",
        "id": 125763085,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524815260
    },
    {
        "content": "<p>Anyway, I guess that you are not saved by 5 <code>rw</code>s</p>",
        "id": 125763124,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524815286
    },
    {
        "content": "<p>So we need <span class=\"user-mention\" data-user-id=\"110524\">@Scott Morrison</span> 's category theory, and then some strong tactics that know about commutative diagrams</p>",
        "id": 125763137,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524815332
    },
    {
        "content": "<p>Or are you just going for a temporary brute force approach?</p>",
        "id": 125763339,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524815831
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">group</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">equiv</span>\n\n<span class=\"n\">def</span> <span class=\"n\">is_add_group_hom</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_group</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_group</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">@</span><span class=\"n\">is_group_hom</span> <span class=\"o\">(</span><span class=\"n\">multiplicative</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">multiplicative</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">f</span>\n\n<span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"n\">class</span><span class=\"o\">]</span> <span class=\"n\">is_add_group_hom</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">is_add_group_hom</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_group</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_group</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">is_add_group_hom</span> <span class=\"n\">f</span><span class=\"o\">]</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_add_group_hom</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨</span><span class=\"n\">H</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">add</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"bp\">@</span><span class=\"n\">is_group_hom</span><span class=\"bp\">.</span><span class=\"n\">mul</span> <span class=\"o\">(</span><span class=\"n\">multiplicative</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">multiplicative</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">f</span> <span class=\"n\">hf</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"bp\">@</span><span class=\"n\">is_group_hom</span><span class=\"bp\">.</span><span class=\"n\">one</span> <span class=\"o\">(</span><span class=\"n\">multiplicative</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">multiplicative</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">f</span> <span class=\"n\">hf</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">neg</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"bp\">@</span><span class=\"n\">is_group_hom</span><span class=\"bp\">.</span><span class=\"n\">inv</span> <span class=\"o\">(</span><span class=\"n\">multiplicative</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">multiplicative</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">f</span> <span class=\"n\">hf</span> <span class=\"n\">x</span>\n\n<span class=\"n\">def</span> <span class=\"n\">ker</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">is_add_group_hom</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">three</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"n\">A&#39;</span> <span class=\"n\">B&#39;</span> <span class=\"n\">C&#39;</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">A&#39;</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">B&#39;</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">C&#39;</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">ab</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">is_add_group_hom</span> <span class=\"n\">ab</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">bc</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">is_add_group_hom</span> <span class=\"n\">bc</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">Habc</span> <span class=\"o\">:</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"n\">ab</span> <span class=\"bp\">=</span> <span class=\"n\">is_add_group_hom</span><span class=\"bp\">.</span><span class=\"n\">ker</span> <span class=\"n\">bc</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">fa</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"err\">≃</span> <span class=\"n\">A&#39;</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">is_add_group_hom</span> <span class=\"n\">fa</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">fb</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"err\">≃</span> <span class=\"n\">B&#39;</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">is_add_group_hom</span> <span class=\"n\">fb</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">fc</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"err\">≃</span> <span class=\"n\">C&#39;</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">is_add_group_hom</span> <span class=\"n\">fc</span><span class=\"o\">]</span>\n\n  <span class=\"o\">(</span><span class=\"n\">ab&#39;</span> <span class=\"o\">:</span> <span class=\"n\">A&#39;</span> <span class=\"bp\">→</span> <span class=\"n\">B&#39;</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">is_add_group_hom</span> <span class=\"n\">ab&#39;</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">bc&#39;</span> <span class=\"o\">:</span> <span class=\"n\">B&#39;</span> <span class=\"bp\">→</span> <span class=\"n\">C&#39;</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">is_add_group_hom</span> <span class=\"n\">bc&#39;</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">H1</span> <span class=\"o\">:</span> <span class=\"n\">fb</span> <span class=\"err\">∘</span> <span class=\"n\">ab</span> <span class=\"bp\">=</span> <span class=\"n\">ab&#39;</span> <span class=\"err\">∘</span> <span class=\"n\">fa</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">H2</span> <span class=\"o\">:</span> <span class=\"n\">fc</span> <span class=\"err\">∘</span> <span class=\"n\">bc</span> <span class=\"bp\">=</span> <span class=\"n\">bc&#39;</span> <span class=\"err\">∘</span> <span class=\"n\">fb</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n\n  <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"n\">ab&#39;</span> <span class=\"bp\">=</span> <span class=\"n\">is_add_group_hom</span><span class=\"bp\">.</span><span class=\"n\">ker</span> <span class=\"n\">bc&#39;</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">ext</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">b&#39;</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">hb&#39;</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">hb&#39;</span> <span class=\"k\">with</span> <span class=\"n\">a&#39;</span> <span class=\"n\">ha&#39;</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">is_add_group_hom</span><span class=\"bp\">.</span><span class=\"n\">ker</span><span class=\"o\">],</span>\n    <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">fa</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"n\">a&#39;</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">fa</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a&#39;</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">ha&#39;</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">ha</span><span class=\"o\">],</span>\n    <span class=\"n\">change</span> <span class=\"n\">bc&#39;</span> <span class=\"o\">((</span><span class=\"n\">ab&#39;</span> <span class=\"err\">∘</span> <span class=\"n\">fa</span><span class=\"o\">)</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">H1</span><span class=\"o\">,</span>\n    <span class=\"n\">change</span> <span class=\"o\">(</span><span class=\"n\">bc&#39;</span> <span class=\"err\">∘</span> <span class=\"n\">fb</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ab</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">H2</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">H3</span> <span class=\"o\">:</span> <span class=\"n\">ab</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">is_add_group_hom</span><span class=\"bp\">.</span><span class=\"n\">ker</span> <span class=\"n\">bc</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">Habc</span><span class=\"o\">,</span> <span class=\"n\">existsi</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">is_add_group_hom</span><span class=\"bp\">.</span><span class=\"n\">ker</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">H3</span> <span class=\"err\">⊢</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">H3</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">is_add_group_hom</span><span class=\"bp\">.</span><span class=\"n\">zero</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">hb&#39;</span><span class=\"o\">,</span>\n    <span class=\"k\">let</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">fb</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"n\">b&#39;</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">fb</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b&#39;</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">b</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">is_add_group_hom</span><span class=\"bp\">.</span><span class=\"n\">ker</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hb&#39;</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">hb</span> <span class=\"n\">at</span> <span class=\"n\">hb&#39;</span><span class=\"o\">,</span>\n    <span class=\"n\">change</span> <span class=\"o\">(</span><span class=\"n\">bc&#39;</span> <span class=\"err\">∘</span> <span class=\"n\">fb</span><span class=\"o\">)</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"n\">at</span> <span class=\"n\">hb&#39;</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">H2</span> <span class=\"n\">at</span> <span class=\"n\">hb&#39;</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">is_add_group_hom</span><span class=\"bp\">.</span><span class=\"n\">zero</span> <span class=\"n\">fc</span> <span class=\"n\">at</span> <span class=\"n\">hb&#39;</span><span class=\"o\">,</span>\n    <span class=\"n\">replace</span> <span class=\"n\">hb&#39;</span> <span class=\"o\">:=</span> <span class=\"n\">congr_arg</span> <span class=\"n\">fc</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"n\">hb&#39;</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">hb&#39;</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">H3</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"err\">∈</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"n\">ab</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">rwa</span> <span class=\"n\">Habc</span> <span class=\"o\">},</span>\n    <span class=\"n\">cases</span> <span class=\"n\">H3</span> <span class=\"k\">with</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n    <span class=\"n\">existsi</span> <span class=\"n\">fa</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n    <span class=\"n\">change</span> <span class=\"o\">(</span><span class=\"n\">ab&#39;</span> <span class=\"err\">∘</span> <span class=\"n\">fa</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b&#39;</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">H1</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">ha</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 125767661,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524824036
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span></p>",
        "id": 125767698,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524824045
    },
    {
        "content": "<p>that's why I don't like stating equality with function composition</p>",
        "id": 125768067,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524824750
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">group</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">equiv</span>\n\n<span class=\"n\">def</span> <span class=\"n\">is_add_group_hom</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_group</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_group</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">@</span><span class=\"n\">is_group_hom</span> <span class=\"o\">(</span><span class=\"n\">multiplicative</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">multiplicative</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">f</span>\n\n<span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"n\">class</span><span class=\"o\">]</span> <span class=\"n\">is_add_group_hom</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">is_add_group_hom</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_group</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_group</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">is_add_group_hom</span> <span class=\"n\">f</span><span class=\"o\">]</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_add_group_hom</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨</span><span class=\"n\">H</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">add</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"bp\">@</span><span class=\"n\">is_group_hom</span><span class=\"bp\">.</span><span class=\"n\">mul</span> <span class=\"o\">(</span><span class=\"n\">multiplicative</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">multiplicative</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">f</span> <span class=\"n\">hf</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"bp\">@</span><span class=\"n\">is_group_hom</span><span class=\"bp\">.</span><span class=\"n\">one</span> <span class=\"o\">(</span><span class=\"n\">multiplicative</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">multiplicative</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">f</span> <span class=\"n\">hf</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">neg</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"bp\">@</span><span class=\"n\">is_group_hom</span><span class=\"bp\">.</span><span class=\"n\">inv</span> <span class=\"o\">(</span><span class=\"n\">multiplicative</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">multiplicative</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">f</span> <span class=\"n\">hf</span> <span class=\"n\">x</span>\n\n<span class=\"n\">def</span> <span class=\"n\">ker</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">is_add_group_hom</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">three</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"n\">A&#39;</span> <span class=\"n\">B&#39;</span> <span class=\"n\">C&#39;</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">A&#39;</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">B&#39;</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">C&#39;</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">ab</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">is_add_group_hom</span> <span class=\"n\">ab</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">bc</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">is_add_group_hom</span> <span class=\"n\">bc</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">Habc</span> <span class=\"o\">:</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"n\">ab</span> <span class=\"bp\">=</span> <span class=\"n\">is_add_group_hom</span><span class=\"bp\">.</span><span class=\"n\">ker</span> <span class=\"n\">bc</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">fa</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"err\">≃</span> <span class=\"n\">A&#39;</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">is_add_group_hom</span> <span class=\"n\">fa</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">fb</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"err\">≃</span> <span class=\"n\">B&#39;</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">is_add_group_hom</span> <span class=\"n\">fb</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">fc</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"err\">≃</span> <span class=\"n\">C&#39;</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">is_add_group_hom</span> <span class=\"n\">fc</span><span class=\"o\">]</span>\n\n  <span class=\"o\">(</span><span class=\"n\">ab&#39;</span> <span class=\"o\">:</span> <span class=\"n\">A&#39;</span> <span class=\"bp\">→</span> <span class=\"n\">B&#39;</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">is_add_group_hom</span> <span class=\"n\">ab&#39;</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">bc&#39;</span> <span class=\"o\">:</span> <span class=\"n\">B&#39;</span> <span class=\"bp\">→</span> <span class=\"n\">C&#39;</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">is_add_group_hom</span> <span class=\"n\">bc&#39;</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">H1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">fb</span> <span class=\"o\">(</span><span class=\"n\">ab</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">ab&#39;</span> <span class=\"o\">(</span><span class=\"n\">fa</span> <span class=\"n\">a</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">H2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">fc</span> <span class=\"o\">(</span><span class=\"n\">bc</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">bc&#39;</span> <span class=\"o\">(</span><span class=\"n\">fb</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n\n  <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"n\">ab&#39;</span> <span class=\"bp\">=</span> <span class=\"n\">is_add_group_hom</span><span class=\"bp\">.</span><span class=\"n\">ker</span> <span class=\"n\">bc&#39;</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">ext</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">b&#39;</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">hb&#39;</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">hb&#39;</span> <span class=\"k\">with</span> <span class=\"n\">a&#39;</span> <span class=\"n\">ha&#39;</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">is_add_group_hom</span><span class=\"bp\">.</span><span class=\"n\">ker</span><span class=\"o\">],</span>\n    <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">fa</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"n\">a&#39;</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">fa</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a&#39;</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">ha&#39;</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">H1</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">H2</span><span class=\"o\">],</span>\n    <span class=\"k\">have</span> <span class=\"n\">H3</span> <span class=\"o\">:</span> <span class=\"n\">ab</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">is_add_group_hom</span><span class=\"bp\">.</span><span class=\"n\">ker</span> <span class=\"n\">bc</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">Habc</span><span class=\"o\">,</span> <span class=\"n\">existsi</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">is_add_group_hom</span><span class=\"bp\">.</span><span class=\"n\">ker</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">H3</span> <span class=\"err\">⊢</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">H3</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">is_add_group_hom</span><span class=\"bp\">.</span><span class=\"n\">zero</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">hb&#39;</span><span class=\"o\">,</span>\n    <span class=\"k\">let</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">fb</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"n\">b&#39;</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">fb</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b&#39;</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">b</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">is_add_group_hom</span><span class=\"bp\">.</span><span class=\"n\">ker</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hb&#39;</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">H2</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">is_add_group_hom</span><span class=\"bp\">.</span><span class=\"n\">zero</span> <span class=\"n\">fc</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hb&#39;</span><span class=\"o\">,</span>\n    <span class=\"n\">replace</span> <span class=\"n\">hb&#39;</span> <span class=\"o\">:=</span> <span class=\"n\">congr_arg</span> <span class=\"n\">fc</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"n\">hb&#39;</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">hb&#39;</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">H3</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"err\">∈</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"n\">ab</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">rwa</span> <span class=\"n\">Habc</span> <span class=\"o\">},</span>\n    <span class=\"n\">cases</span> <span class=\"n\">H3</span> <span class=\"k\">with</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n    <span class=\"n\">existsi</span> <span class=\"n\">fa</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">H1</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">ha</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 125768238,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524824998
    },
    {
        "content": "<p>this is much better</p>",
        "id": 125768242,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524825002
    },
    {
        "content": "<p>How about proving some lemmas like this one, and combining them into what you want.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">equiv</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">equiv_range</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">α&#39;</span> <span class=\"n\">β&#39;</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f&#39;</span> <span class=\"o\">:</span> <span class=\"n\">α&#39;</span> <span class=\"bp\">→</span> <span class=\"n\">β&#39;</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">eα</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"err\">≃</span> <span class=\"n\">α&#39;</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">eβ</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"err\">≃</span> <span class=\"n\">β&#39;</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">f&#39;</span> <span class=\"err\">∘</span> <span class=\"n\">eα</span> <span class=\"bp\">=</span> <span class=\"n\">eβ</span> <span class=\"err\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">range</span> <span class=\"n\">f&#39;</span> <span class=\"bp\">=</span> <span class=\"n\">eβ</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">range</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"k\">calc</span> <span class=\"n\">range</span> <span class=\"n\">f&#39;</span> <span class=\"bp\">=</span> <span class=\"n\">f&#39;</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">univ</span>         <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">image_univ</span>\n     <span class=\"bp\">...</span>      <span class=\"bp\">=</span> <span class=\"n\">f&#39;</span> <span class=\"err\">&#39;&#39;</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"n\">eα</span><span class=\"o\">)</span>   <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">range_iff_surjective</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"n\">eα</span><span class=\"bp\">.</span><span class=\"n\">bijective</span><span class=\"bp\">.</span><span class=\"mi\">2</span>\n     <span class=\"bp\">...</span>      <span class=\"bp\">=</span> <span class=\"n\">f&#39;</span> <span class=\"err\">&#39;&#39;</span> <span class=\"o\">(</span><span class=\"n\">eα</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">univ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">image_univ</span>\n     <span class=\"bp\">...</span>      <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">f&#39;</span> <span class=\"err\">∘</span> <span class=\"n\">eα</span><span class=\"o\">)</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">univ</span>  <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">image_comp</span>\n     <span class=\"bp\">...</span>      <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">eβ</span> <span class=\"err\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">univ</span>   <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">h</span>\n     <span class=\"bp\">...</span>      <span class=\"bp\">=</span> <span class=\"n\">eβ</span> <span class=\"err\">&#39;&#39;</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">univ</span><span class=\"o\">)</span>  <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">image_comp</span>\n     <span class=\"bp\">...</span>      <span class=\"bp\">=</span> <span class=\"n\">eβ</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">range</span> <span class=\"n\">f</span>      <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">image_univ</span>\n</pre></div>",
        "id": 125785178,
        "sender_full_name": "Reid Barton",
        "timestamp": 1524851793
    },
    {
        "content": "<p>(Now I see that Patrick said much the same thing about a half hour earlier.)</p>",
        "id": 125786306,
        "sender_full_name": "Reid Barton",
        "timestamp": 1524853432
    },
    {
        "content": "<p>I should have used <code>calc</code> in my proof of the five lemma...</p>",
        "id": 125788582,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1524856820
    },
    {
        "content": "<p>You live and learn in this game</p>",
        "id": 125791112,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524860563
    },
    {
        "content": "<p>Your levels were really helpful for me today. Do you know some abstract type theory?</p>",
        "id": 125791117,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524860581
    },
    {
        "content": "<p>You understood what Scott was saying</p>",
        "id": 125791127,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524860608
    }
]