[
    {
        "content": "<p>This is probably asking too much, but I want to check if this is possible.  Is it possible (in a tactic monad) to automatically check if a tactic like <code>norm_num</code> is in the environment, and if so use it, otherwise don't.  My idea is a tactic which applies certain other tactics, but only if they are already imported.  In most compiled programming languages this would be a silly request (and in python everything is possible if you are willing to live with crazy hacks).  However, in Lean it might be doable since I can already inspect the environment for declarations.</p>",
        "id": 199023049,
        "sender_full_name": "Jason Rute",
        "timestamp": 1590672998
    },
    {
        "content": "<p>Yes, certainly. I don't think there's an example currently in mathlib. I'll try to dig one up, or hopefully one of the tactic programming experts can tell you.</p>",
        "id": 199025792,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1590674427
    },
    {
        "content": "<p>Maybe just <code>resolve_name</code>?</p>",
        "id": 199025919,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1590674483
    },
    {
        "content": "<p>You can get what you want from a slight tweak to <code>name_to_tactic</code> in <code>tactics/core.lean</code>.</p>",
        "id": 199026212,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1590674604
    },
    {
        "content": "<p>Something like:</p>",
        "id": 199026256,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1590674624
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">run_tactic</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"n\">d</span> <span class=\"err\">←</span> <span class=\"n\">get_decl</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n   <span class=\"n\">e</span> <span class=\"err\">←</span> <span class=\"n\">mk_const</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n   <span class=\"k\">let</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"n\">d</span><span class=\"bp\">.</span><span class=\"n\">type</span><span class=\"o\">,</span>\n   <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"bp\">=</span><span class=\"err\">ₐ</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span> <span class=\"n\">unit</span><span class=\"o\">))</span> <span class=\"k\">then</span>\n     <span class=\"o\">(</span><span class=\"n\">eval_expr</span> <span class=\"o\">(</span><span class=\"n\">tactic</span> <span class=\"n\">unit</span><span class=\"o\">)</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n   <span class=\"k\">else</span> <span class=\"n\">fail</span>\n</code></pre></div>",
        "id": 199026462,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1590674708
    },
    {
        "content": "<p>That isn't ideal, as you won't be able to distinguish easily between the tactic not being in the environment, and the tactic failing.</p>",
        "id": 199026510,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1590674728
    },
    {
        "content": "<p>But that should be easy to fix.</p>",
        "id": 199026525,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1590674735
    },
    {
        "content": "<p>Thanks so much!</p>",
        "id": 199099941,
        "sender_full_name": "Jason Rute",
        "timestamp": 1590710212
    },
    {
        "content": "<p>But to be clear, it's not hard to distinguish that either:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"c1\">-- Returns whether the tactic was found.</span>\n<span class=\"c1\">-- Fails only if the tactic fails, or a declaration with the</span>\n<span class=\"c1\">-- given name exists but it is not a tactic program.</span>\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">run_tactic_if_present</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">bool</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"n\">d</span> <span class=\"err\">←</span> <span class=\"n\">get_decl</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n   <span class=\"n\">e</span> <span class=\"err\">←</span> <span class=\"n\">mk_const</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n   <span class=\"k\">let</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"n\">d</span><span class=\"bp\">.</span><span class=\"n\">type</span><span class=\"o\">,</span>\n   <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"bp\">=</span><span class=\"err\">ₐ</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span> <span class=\"n\">unit</span><span class=\"o\">))</span> <span class=\"k\">then</span> <span class=\"n\">do</span> <span class=\"o\">{</span>\n     <span class=\"n\">tac</span> <span class=\"err\">←</span> <span class=\"n\">some</span> <span class=\"bp\">&lt;</span><span class=\"err\">$</span><span class=\"bp\">&gt;</span> <span class=\"n\">eval_expr</span> <span class=\"o\">(</span><span class=\"n\">tactic</span> <span class=\"n\">unit</span><span class=\"o\">)</span> <span class=\"n\">e</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">pure</span> <span class=\"n\">none</span><span class=\"o\">,</span>\n     <span class=\"k\">match</span> <span class=\"n\">tac</span> <span class=\"k\">with</span> <span class=\"c1\">-- or use `option.mmap` if you want to import it</span>\n     <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">tac</span> <span class=\"o\">:=</span> <span class=\"n\">tac</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">return</span> <span class=\"n\">true</span>\n     <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"o\">:=</span> <span class=\"n\">return</span> <span class=\"n\">false</span>\n     <span class=\"kn\">end</span>\n   <span class=\"o\">}</span>\n   <span class=\"k\">else</span> <span class=\"n\">failed</span>\n</code></pre></div>",
        "id": 199111831,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1590724893
    }
]