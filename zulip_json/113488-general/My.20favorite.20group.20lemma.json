[
    {
        "content": "<p>Hello I'm a beginner </p>\n<p>I don't understand i how to prove my favorite group lemma  :D Can anyone help me ? </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span><span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:((</span><span class=\"bp\">∀</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span>  <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">c</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span>  <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">a</span><span class=\"o\">)):=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n    <span class=\"k\">calc</span>\n        <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span>  <span class=\"o\">:</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"o\">)</span>\n        <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span><span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:</span> <span class=\"k\">by</span>  <span class=\"n\">rw</span> <span class=\"n\">mul_inv_rev</span>\n        <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">a</span><span class=\"bp\">⁻¹</span>    <span class=\"o\">:</span> <span class=\"n\">sorry</span>\n        <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">a</span>      <span class=\"o\">:</span> <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n<span class=\"n\">Edit</span> <span class=\"o\">:</span> <span class=\"n\">thx</span> <span class=\"n\">Donald</span>\n</pre></div>",
        "id": 190013996,
        "sender_full_name": "orlando cau",
        "timestamp": 1583674335
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"269635\">orlando cau</span> <a href=\"#narrow/stream/113488-general/topic/3.2E7.20and.20maths/near/190013996\" title=\"#narrow/stream/113488-general/topic/3.2E7.20and.20maths/near/190013996\">said</a>:</p>\n<blockquote>\n<p>Hello I'm a beginner </p>\n<p>I don't understand i how to prove my favorite group lemma  :D Can anyone help me ? <br>\nexample(G : Type)[group G] :((∀ c : G,  c = c⁻¹)  → (∀ a b : G, a<em>b = b</em>a)):= <br>\nbegin<br>\n    intro h,<br>\n    intros a b,<br>\n    calc<br>\n        a<em>b = (a</em>b)⁻¹  : h (a*b) <br>\n        ... = b⁻¹ *a⁻¹ : by  rw mul_inv_rev<br>\n        ... = b*a⁻¹    : sorry<br>\n        ... = b*a      : sorry<br>\nend</p>\n</blockquote>\n<p>You probably want to rewrite in the reverse direction, which can be accomplished by, e.g. <code>rw ← h</code> (where <code>h</code> is your equality hypothesis)</p>",
        "id": 190014340,
        "sender_full_name": "Donald Sebastian Leung",
        "timestamp": 1583675045
    },
    {
        "content": "<p>Also, you'd probably want to <a href=\"https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet#code\" target=\"_blank\" title=\"https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet#code\">format your code</a> next time, just so that it's a bit easier on the eyes of the person trying to help you</p>",
        "id": 190014364,
        "sender_full_name": "Donald Sebastian Leung",
        "timestamp": 1583675156
    },
    {
        "content": "<p>I was able to solve it this way</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">suffices</span> <span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">z</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"bp\">⁻¹</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">z</span><span class=\"o\">)],</span> <span class=\"n\">apply</span> <span class=\"n\">mul_inv_rev</span><span class=\"o\">,</span>\n  <span class=\"n\">conv</span> <span class=\"o\">{</span><span class=\"n\">to_lhs</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"n\">y</span><span class=\"o\">]}</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 190014656,
        "sender_full_name": "Jason KY.",
        "timestamp": 1583675682
    },
    {
        "content": "<p>Thx, i'm verry beginner, i try to understand your code !</p>",
        "id": 190014738,
        "sender_full_name": "orlando cau",
        "timestamp": 1583675858
    },
    {
        "content": "<p>By the way, did you try out the <a href=\"https://wwwf.imperial.ac.uk/~buzzard/xena/natural_number_game/\" target=\"_blank\" title=\"https://wwwf.imperial.ac.uk/~buzzard/xena/natural_number_game/\">natural number game</a>?</p>",
        "id": 190014786,
        "sender_full_name": "Donald Sebastian Leung",
        "timestamp": 1583675915
    },
    {
        "content": "<p>No i don't try natural number game  ! I just see <a href=\"https://gist.github.com/PatrickMassot/79d7f53b3777c48e0910e131aedff7ea#file-proof_tutorial-lean-L57\" target=\"_blank\" title=\"https://gist.github.com/PatrickMassot/79d7f53b3777c48e0910e131aedff7ea#file-proof_tutorial-lean-L57\">this tutorial</a> and i try to understand the language  ! thx</p>",
        "id": 190014982,
        "sender_full_name": "orlando cau",
        "timestamp": 1583676276
    },
    {
        "content": "<p>Nice <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> Are you stepping through the tutorial in a web editor / VSCode, or are you just reading through the file on GitHub?</p>",
        "id": 190015053,
        "sender_full_name": "Donald Sebastian Leung",
        "timestamp": 1583676465
    },
    {
        "content": "<p>Ohhh it's Ok ! It's My first proof <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>\n<p>I install vs Code and lean yesterday ! </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"k\">calc</span>\n        <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span>  <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span>  <span class=\"err\">←</span> <span class=\"n\">h</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"o\">)</span>\n        <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span><span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">mul_inv_rev</span>\n        <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">a</span><span class=\"bp\">⁻¹</span>    <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">h</span><span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">)</span>\n        <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">a</span>      <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">h</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 190015375,
        "sender_full_name": "orlando cau",
        "timestamp": 1583677078
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"k\">calc</span>\n        <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span>  <span class=\"err\">←</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n        <span class=\"bp\">...</span>   <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">mul_inv_rev</span>\n        <span class=\"bp\">...</span>   <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span>   <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">h</span> <span class=\"n\">b</span>\n        <span class=\"bp\">...</span>   <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">a</span>     <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">h</span> <span class=\"n\">a</span>\n</pre></div>\n\n\n<p>You don't need the brackets for <code>h(a)</code> etc -- in functional programming we know that <code>h</code> is a function so the next thing will be the input, we don't need brackets to tell us this. On the other hand the computer scientists like their spaces before and after <code>*</code></p>",
        "id": 190015884,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583678119
    },
    {
        "content": "<p>Thanks Kevin, i try to do other little proof ! This is very fun !</p>",
        "id": 190016054,
        "sender_full_name": "orlando cau",
        "timestamp": 1583678477
    },
    {
        "content": "<p>But of course this is cheating, because you didn't prove <code>mul_inv_rev</code> :-)</p>",
        "id": 190016057,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583678492
    },
    {
        "content": "<p>Give me 1 minute and I will make you ten more questions like this.</p>",
        "id": 190016060,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583678505
    },
    {
        "content": "<p>Here -- <a href=\"https://leanprover-community.github.io/lean-web-editor/#code=import%20tactic%0A%2F-!%0ABasic%20definitions%20in%20group%20theory.%0AThe%20beginner%20mathematician%20should%20ignore%20this%20part%3B%20definitions%20are%0Acan%20be%20intimidating.%20Skip%20down%20to%20line%2050%2C%20this%20part%20is%20technical.%0A-%2F%0A%0Aset_option%20old_structure_cmd%20true%20--%20it's%20better%20for%20this%20kind%20of%20stuff%0A%0A--%20We're%20overwriting%20inbuilt%20group%20theory%20here%20so%20we%20always%20work%20in%0A--%20a%20namespace%0A%0Anamespace%20mygroup%0A%0A--%20definitions%20of%20the%20group%20classes%0A%0Asection%20groupdefs%20%0A%0A--%20Set%20up%20notation%20typeclass%20using%20%60extends%60.%0Aclass%20has_group_notation%20%28G%20%3A%20Type%29%20extends%20has_mul%20G%2C%20has_one%20G%2C%20has_inv%20G%0A%0A--%20definition%20of%20the%20group%20structure%0Aclass%20group%20%28G%20%3A%20Type%29%20extends%20has_group_notation%20G%20%3A%3D%0A%28mul_assoc%20%3A%20%E2%88%80%20%28a%20b%20c%20%3A%20G%29%2C%20a%20*%20b%20*%20c%20%3D%20a%20*%20%28b%20*%20c%29%29%0A%28one_mul%20%3A%20%E2%88%80%20%28a%20%3A%20G%29%2C%201%20*%20a%20%3D%20a%29%0A%28mul_left_inv%20%3A%20%E2%88%80%20%28a%20%3A%20G%29%2C%20a%E2%81%BB%C2%B9%20*%20a%20%3D%201%29%0A%0Aclass%20comm_group%20%28G%20%3A%20Type%29%20extends%20group%20G%20%3A%3D%0A%28mul_comm%20%3A%20%E2%88%80%20a%20b%20%3A%20G%2C%20a%20*%20b%20%3D%20b%20*%20a%29%0A%0A--%20definition%20of%20powers%0A%40%5Bsimp%5D%20def%20group_pow_nat%20%7BG%20%3A%20Type%7D%20%5Bgroup%20G%5D%20%3A%20G%20%E2%86%92%20%E2%84%95%20%E2%86%92%20G%0A%7C%20g%200%20%3A%3D%201%0A%7C%20g%20%28n%20%2B%201%29%20%3A%3D%20group_pow_nat%20g%20n%20*%20g%0A%0Ainstance%20group_has_pow_nat%20%7BG%20%3A%20Type%7D%20%5Bgroup%20G%5D%20%3A%20has_pow%20G%20%E2%84%95%20%3A%3D%20%E2%9F%A8group_pow_nat%E2%9F%A9%0A%0A%40%5Bsimp%5D%20def%20group_pow%20%7BG%20%3A%20Type%7D%20%5Bgroup%20G%5D%20%3A%20G%20%E2%86%92%20%E2%84%A4%20%E2%86%92%20G%0A%7C%20g%20%28int.of_nat%20n%29%20%3A%3D%20group_pow_nat%20g%20n%0A%7C%20g%20-%5B1%2B%20n%5D%20%3A%3D%20%28group_pow_nat%20g%20%28n%20%2B%201%29%29%E2%81%BB%C2%B9%0A%0Ainstance%20group_has_pow%20%7BG%20%3A%20Type%7D%20%5Bgroup%20G%5D%20%3A%20has_pow%20G%20%E2%84%A4%20%3A%3D%20%E2%9F%A8group_pow%E2%9F%A9%0A%0A--%20Center%20of%20a%20group%0Adef%20center%20%28G%20%3A%20Type%29%20%5Bgroup%20G%5D%20%3A%3D%20%7Bg%20%3A%20G%20%7C%20%E2%88%80%20k%20%3A%20G%2C%20k%20*%20g%20%3D%20g%20*%20k%7D%0Aattribute%20%5Breducible%5D%20center%0A%0Aend%20groupdefs%0A%0A--%20START%20HERE%0A%0A%2F-%0A%0AFor%20a%20group%20G%2C%20you%20start%20with%20the%20following%20axioms%3A%0A%0Amul_assoc%20%3A%20%E2%88%80%20%28a%20b%20c%20%3A%20G%29%2C%20a%20*%20b%20*%20c%20%3D%20a%20*%20%28b%20*%20c%29%0Aone_mul%20%3A%20%E2%88%80%20%28a%20%3A%20G%29%2C%201%20*%20a%20%3D%20a%0Amul_left_inv%20%3A%20%E2%88%80%20%28a%20%3A%20G%29%2C%20a%E2%81%BB%C2%B9%20*%20a%20%3D%201%0A%0AThe%20goal%20is%20to%20prove%20the%20following%20theorems%20%28in%20the%20order%20listed%29%20%3A%0A%0A%60mul_left_cancel%20%3A%20%E2%88%80%20%28a%20b%20c%20%3A%20G%29%2C%20a%20*%20b%20%3D%20a%20*%20c%20%E2%86%92%20b%20%3D%20c%60%0A%60mul_eq_of_eq_inv_mul%20%7Ba%20x%20y%20%3A%20G%7D%20%3A%20x%20%3D%20a%E2%81%BB%C2%B9%20*%20y%20%E2%86%92%20a%20*%20x%20%3D%20y%60%0A%60mul_one%20%28a%20%3A%20G%29%20%3A%20a%20*%201%20%3D%20a%60%0A%60mul_right_inv%20%28a%20%3A%20G%29%20%3A%20a%20*%20a%E2%81%BB%C2%B9%20%3D%201%60%0A%60eq_mul_inv_of_mul_eq%20%7Ba%20b%20c%20%3A%20G%7D%20%28h%20%3A%20a%20*%20c%20%3D%20b%29%20%3A%20a%20%3D%20b%20*%20c%E2%81%BB%C2%B9%60%0A%60mul_left_eq_self%20%7Ba%20b%20%3A%20G%7D%20%3A%20a%20*%20b%20%3D%20b%20%E2%86%94%20a%20%3D%201%60%0A%60eq_inv_of_mul_eq_one%20%7Ba%20b%20%3A%20G%7D%20%28h%20%3A%20a%20*%20b%20%3D%201%29%20%3A%20a%20%3D%20b%E2%81%BB%C2%B9%60%0A%60inv_inv%20%28a%20%3A%20G%29%20%3A%20a%20%E2%81%BB%C2%B9%20%E2%81%BB%C2%B9%20%3D%20a%60%0A%60inv_eq_of_mul_eq_one%20%7Ba%20b%20%3A%20G%7D%20%28h%20%3A%20a%20*%20b%20%3D%201%29%20%3A%20a%E2%81%BB%C2%B9%20%3D%20b%60%0A%60mul_inv_rev%20%7Ba%20b%20%3A%20G%7D%20%3A%20%28a%20*%20b%29%E2%81%BB%C2%B9%20%3D%20b%E2%81%BB%C2%B9%20*%20a%E2%81%BB%C2%B9%60%0A%0A-%2F%0A%0Avariables%20%7BG%20%3A%20Type%7D%20%5Bgroup%20G%5D%20%20%0A%0Alemma%20mul_left_cancel%20%28a%20x%20y%20%3A%20G%29%20%28Habac%20%3A%20a%20*%20x%20%3D%20a%20*%20y%29%20%3A%20x%20%3D%20y%20%3A%3D%20%0Abegin%0A%20%20sorry%0Aend%0A%0Alemma%20mul_eq_of_eq_inv_mul%20%7Ba%20x%20y%20%3A%20G%7D%20%28h%20%3A%20x%20%3D%20a%E2%81%BB%C2%B9%20*%20y%29%20%3A%20a%20*%20x%20%3D%20y%20%3A%3D%0Abegin%0A%20%20sorry%0Aend%0A%0Atheorem%20mul_one%20%28a%20%3A%20G%29%20%3A%20a%20*%201%20%3D%20a%20%3A%3D%0Abegin%0A%20%20sorry%0Aend%0A%0Atheorem%20mul_right_inv%20%28a%20%3A%20G%29%20%3A%20a%20*%20a%E2%81%BB%C2%B9%20%3D%201%20%3A%3D%0Abegin%0A%20%20sorry%0Aend%0A%0Alemma%20eq_mul_inv_of_mul_eq%20%7Ba%20b%20c%20%3A%20G%7D%20%28h%20%3A%20a%20*%20c%20%3D%20b%29%20%3A%20a%20%3D%20b%20*%20c%E2%81%BB%C2%B9%20%3A%3D%0Abegin%0A%20%20sorry%0Aend%0A%0Alemma%20mul_left_eq_self%20%7Ba%20b%20%3A%20G%7D%20%3A%20a%20*%20b%20%3D%20b%20%E2%86%94%20a%20%3D%201%20%3A%3D%0Abegin%0A%20%20sorry%0Aend%0A%0Alemma%20eq_inv_of_mul_eq_one%20%7Ba%20b%20%3A%20G%7D%20%28h%20%3A%20a%20*%20b%20%3D%201%29%20%3A%20a%20%3D%20b%E2%81%BB%C2%B9%20%3A%3D%0Abegin%0A%20%20sorry%0Aend%0A%0Alemma%20inv_inv%20%28a%20%3A%20G%29%20%3A%20a%20%E2%81%BB%C2%B9%20%E2%81%BB%C2%B9%20%3D%20a%20%3A%3D%0Abegin%0A%20%20sorry%0Aend%0A%0Alemma%20inv_eq_of_mul_eq_one%20%7Ba%20b%20%3A%20G%7D%20%28h%20%3A%20a%20*%20b%20%3D%201%29%20%3A%20a%E2%81%BB%C2%B9%20%3D%20b%20%3A%3D%0Abegin%0A%20%20sorry%0Aend%0A%0A--%20for%20orlando%20cao%0Alemma%20mul_inv_rev%20%7Ba%20b%20%3A%20G%7D%20%3A%20%28a%20*%20b%29%E2%81%BB%C2%B9%20%3D%20b%E2%81%BB%C2%B9%20*%20a%E2%81%BB%C2%B9%20%3A%3D%0Abegin%0A%20%20sorry%0Aend%0A%0Aend%20mygroup\" target=\"_blank\" title=\"https://leanprover-community.github.io/lean-web-editor/#code=import%20tactic%0A%2F-!%0ABasic%20definitions%20in%20group%20theory.%0AThe%20beginner%20mathematician%20should%20ignore%20this%20part%3B%20definitions%20are%0Acan%20be%20intimidating.%20Skip%20down%20to%20line%2050%2C%20this%20part%20is%20technical.%0A-%2F%0A%0Aset_option%20old_structure_cmd%20true%20--%20it's%20better%20for%20this%20kind%20of%20stuff%0A%0A--%20We're%20overwriting%20inbuilt%20group%20theory%20here%20so%20we%20always%20work%20in%0A--%20a%20namespace%0A%0Anamespace%20mygroup%0A%0A--%20definitions%20of%20the%20group%20classes%0A%0Asection%20groupdefs%20%0A%0A--%20Set%20up%20notation%20typeclass%20using%20%60extends%60.%0Aclass%20has_group_notation%20%28G%20%3A%20Type%29%20extends%20has_mul%20G%2C%20has_one%20G%2C%20has_inv%20G%0A%0A--%20definition%20of%20the%20group%20structure%0Aclass%20group%20%28G%20%3A%20Type%29%20extends%20has_group_notation%20G%20%3A%3D%0A%28mul_assoc%20%3A%20%E2%88%80%20%28a%20b%20c%20%3A%20G%29%2C%20a%20*%20b%20*%20c%20%3D%20a%20*%20%28b%20*%20c%29%29%0A%28one_mul%20%3A%20%E2%88%80%20%28a%20%3A%20G%29%2C%201%20*%20a%20%3D%20a%29%0A%28mul_left_inv%20%3A%20%E2%88%80%20%28a%20%3A%20G%29%2C%20a%E2%81%BB%C2%B9%20*%20a%20%3D%201%29%0A%0Aclass%20comm_group%20%28G%20%3A%20Type%29%20extends%20group%20G%20%3A%3D%0A%28mul_comm%20%3A%20%E2%88%80%20a%20b%20%3A%20G%2C%20a%20*%20b%20%3D%20b%20*%20a%29%0A%0A--%20definition%20of%20powers%0A%40%5Bsimp%5D%20def%20group_pow_nat%20%7BG%20%3A%20Type%7D%20%5Bgroup%20G%5D%20%3A%20G%20%E2%86%92%20%E2%84%95%20%E2%86%92%20G%0A%7C%20g%200%20%3A%3D%201%0A%7C%20g%20%28n%20%2B%201%29%20%3A%3D%20group_pow_nat%20g%20n%20*%20g%0A%0Ainstance%20group_has_pow_nat%20%7BG%20%3A%20Type%7D%20%5Bgroup%20G%5D%20%3A%20has_pow%20G%20%E2%84%95%20%3A%3D%20%E2%9F%A8group_pow_nat%E2%9F%A9%0A%0A%40%5Bsimp%5D%20def%20group_pow%20%7BG%20%3A%20Type%7D%20%5Bgroup%20G%5D%20%3A%20G%20%E2%86%92%20%E2%84%A4%20%E2%86%92%20G%0A%7C%20g%20%28int.of_nat%20n%29%20%3A%3D%20group_pow_nat%20g%20n%0A%7C%20g%20-%5B1%2B%20n%5D%20%3A%3D%20%28group_pow_nat%20g%20%28n%20%2B%201%29%29%E2%81%BB%C2%B9%0A%0Ainstance%20group_has_pow%20%7BG%20%3A%20Type%7D%20%5Bgroup%20G%5D%20%3A%20has_pow%20G%20%E2%84%A4%20%3A%3D%20%E2%9F%A8group_pow%E2%9F%A9%0A%0A--%20Center%20of%20a%20group%0Adef%20center%20%28G%20%3A%20Type%29%20%5Bgroup%20G%5D%20%3A%3D%20%7Bg%20%3A%20G%20%7C%20%E2%88%80%20k%20%3A%20G%2C%20k%20*%20g%20%3D%20g%20*%20k%7D%0Aattribute%20%5Breducible%5D%20center%0A%0Aend%20groupdefs%0A%0A--%20START%20HERE%0A%0A%2F-%0A%0AFor%20a%20group%20G%2C%20you%20start%20with%20the%20following%20axioms%3A%0A%0Amul_assoc%20%3A%20%E2%88%80%20%28a%20b%20c%20%3A%20G%29%2C%20a%20*%20b%20*%20c%20%3D%20a%20*%20%28b%20*%20c%29%0Aone_mul%20%3A%20%E2%88%80%20%28a%20%3A%20G%29%2C%201%20*%20a%20%3D%20a%0Amul_left_inv%20%3A%20%E2%88%80%20%28a%20%3A%20G%29%2C%20a%E2%81%BB%C2%B9%20*%20a%20%3D%201%0A%0AThe%20goal%20is%20to%20prove%20the%20following%20theorems%20%28in%20the%20order%20listed%29%20%3A%0A%0A%60mul_left_cancel%20%3A%20%E2%88%80%20%28a%20b%20c%20%3A%20G%29%2C%20a%20*%20b%20%3D%20a%20*%20c%20%E2%86%92%20b%20%3D%20c%60%0A%60mul_eq_of_eq_inv_mul%20%7Ba%20x%20y%20%3A%20G%7D%20%3A%20x%20%3D%20a%E2%81%BB%C2%B9%20*%20y%20%E2%86%92%20a%20*%20x%20%3D%20y%60%0A%60mul_one%20%28a%20%3A%20G%29%20%3A%20a%20*%201%20%3D%20a%60%0A%60mul_right_inv%20%28a%20%3A%20G%29%20%3A%20a%20*%20a%E2%81%BB%C2%B9%20%3D%201%60%0A%60eq_mul_inv_of_mul_eq%20%7Ba%20b%20c%20%3A%20G%7D%20%28h%20%3A%20a%20*%20c%20%3D%20b%29%20%3A%20a%20%3D%20b%20*%20c%E2%81%BB%C2%B9%60%0A%60mul_left_eq_self%20%7Ba%20b%20%3A%20G%7D%20%3A%20a%20*%20b%20%3D%20b%20%E2%86%94%20a%20%3D%201%60%0A%60eq_inv_of_mul_eq_one%20%7Ba%20b%20%3A%20G%7D%20%28h%20%3A%20a%20*%20b%20%3D%201%29%20%3A%20a%20%3D%20b%E2%81%BB%C2%B9%60%0A%60inv_inv%20%28a%20%3A%20G%29%20%3A%20a%20%E2%81%BB%C2%B9%20%E2%81%BB%C2%B9%20%3D%20a%60%0A%60inv_eq_of_mul_eq_one%20%7Ba%20b%20%3A%20G%7D%20%28h%20%3A%20a%20*%20b%20%3D%201%29%20%3A%20a%E2%81%BB%C2%B9%20%3D%20b%60%0A%60mul_inv_rev%20%7Ba%20b%20%3A%20G%7D%20%3A%20%28a%20*%20b%29%E2%81%BB%C2%B9%20%3D%20b%E2%81%BB%C2%B9%20*%20a%E2%81%BB%C2%B9%60%0A%0A-%2F%0A%0Avariables%20%7BG%20%3A%20Type%7D%20%5Bgroup%20G%5D%20%20%0A%0Alemma%20mul_left_cancel%20%28a%20x%20y%20%3A%20G%29%20%28Habac%20%3A%20a%20*%20x%20%3D%20a%20*%20y%29%20%3A%20x%20%3D%20y%20%3A%3D%20%0Abegin%0A%20%20sorry%0Aend%0A%0Alemma%20mul_eq_of_eq_inv_mul%20%7Ba%20x%20y%20%3A%20G%7D%20%28h%20%3A%20x%20%3D%20a%E2%81%BB%C2%B9%20*%20y%29%20%3A%20a%20*%20x%20%3D%20y%20%3A%3D%0Abegin%0A%20%20sorry%0Aend%0A%0Atheorem%20mul_one%20%28a%20%3A%20G%29%20%3A%20a%20*%201%20%3D%20a%20%3A%3D%0Abegin%0A%20%20sorry%0Aend%0A%0Atheorem%20mul_right_inv%20%28a%20%3A%20G%29%20%3A%20a%20*%20a%E2%81%BB%C2%B9%20%3D%201%20%3A%3D%0Abegin%0A%20%20sorry%0Aend%0A%0Alemma%20eq_mul_inv_of_mul_eq%20%7Ba%20b%20c%20%3A%20G%7D%20%28h%20%3A%20a%20*%20c%20%3D%20b%29%20%3A%20a%20%3D%20b%20*%20c%E2%81%BB%C2%B9%20%3A%3D%0Abegin%0A%20%20sorry%0Aend%0A%0Alemma%20mul_left_eq_self%20%7Ba%20b%20%3A%20G%7D%20%3A%20a%20*%20b%20%3D%20b%20%E2%86%94%20a%20%3D%201%20%3A%3D%0Abegin%0A%20%20sorry%0Aend%0A%0Alemma%20eq_inv_of_mul_eq_one%20%7Ba%20b%20%3A%20G%7D%20%28h%20%3A%20a%20*%20b%20%3D%201%29%20%3A%20a%20%3D%20b%E2%81%BB%C2%B9%20%3A%3D%0Abegin%0A%20%20sorry%0Aend%0A%0Alemma%20inv_inv%20%28a%20%3A%20G%29%20%3A%20a%20%E2%81%BB%C2%B9%20%E2%81%BB%C2%B9%20%3D%20a%20%3A%3D%0Abegin%0A%20%20sorry%0Aend%0A%0Alemma%20inv_eq_of_mul_eq_one%20%7Ba%20b%20%3A%20G%7D%20%28h%20%3A%20a%20*%20b%20%3D%201%29%20%3A%20a%E2%81%BB%C2%B9%20%3D%20b%20%3A%3D%0Abegin%0A%20%20sorry%0Aend%0A%0A--%20for%20orlando%20cao%0Alemma%20mul_inv_rev%20%7Ba%20b%20%3A%20G%7D%20%3A%20%28a%20*%20b%29%E2%81%BB%C2%B9%20%3D%20b%E2%81%BB%C2%B9%20*%20a%E2%81%BB%C2%B9%20%3A%3D%0Abegin%0A%20%20sorry%0Aend%0A%0Aend%20mygroup\">you can build group theory from the axioms at this link</a></p>",
        "id": 190016125,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583678627
    },
    {
        "content": "<p>Start reading at line 50</p>",
        "id": 190016165,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583678644
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"269635\">@orlando cau</span></p>",
        "id": 190016550,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583679496
    },
    {
        "content": "<p>ok thank you i try this game :)</p>",
        "id": 190016566,
        "sender_full_name": "orlando cau",
        "timestamp": 1583679596
    },
    {
        "content": "<p>Hello Sorry, i got a problem with my computer :-(  I don't do my homework !</p>",
        "id": 190269076,
        "sender_full_name": "orlando",
        "timestamp": 1583924038
    },
    {
        "content": "<p>Hello, </p>\n<p>I read some tutorial and i do some exercice : but i have  basic problem ! </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n<span class=\"n\">def</span> <span class=\"n\">multiplication</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span>\n<span class=\"n\">def</span> <span class=\"n\">left_mul_by</span> <span class=\"o\">(</span><span class=\"n\">a</span>  <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">multiplication</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">c</span><span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>   <span class=\"c1\">---- i try a first lemma because i don&#39;t understand the logic of the language</span>\n<span class=\"k\">begin</span>\n    <span class=\"k\">let</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">left_mul_by</span> <span class=\"n\">c</span><span class=\"o\">,</span>\n    <span class=\"k\">show</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">subst</span> <span class=\"n\">h</span> <span class=\"n\">f</span><span class=\"o\">,</span>          <span class=\"c1\">---- don&#39;t work  :(</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 190274786,
        "sender_full_name": "orlando",
        "timestamp": 1583929156
    },
    {
        "content": "<p>You don't need those definitions, and the proof is <code>rw h</code>.</p>",
        "id": 190275339,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583929659
    },
    {
        "content": "<p>What have you read so far?</p>",
        "id": 190275393,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583929687
    },
    {
        "content": "<p>You can spend years playing with Lean without ever writing <code>eq.subst</code>, which is a very low-level thing not intended for end-users.</p>",
        "id": 190275494,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583929794
    },
    {
        "content": "<p>ohhh, it's work ... thank you  ! I read (a little) [this course]  (<a href=\"https://leanprover.github.io/logic_and_proof/\" target=\"_blank\" title=\"https://leanprover.github.io/logic_and_proof/\">https://leanprover.github.io/logic_and_proof/</a>) and do some exercice !</p>",
        "id": 190275739,
        "sender_full_name": "orlando",
        "timestamp": 1583929990
    },
    {
        "content": "<p>How did you install lean+mathlib?</p>",
        "id": 190275855,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583930072
    },
    {
        "content": "<p>Do you have a working python+pip setup?</p>",
        "id": 190275869,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583930090
    },
    {
        "content": "<p>Yes i install lean + mathlib !  All it's ok !</p>",
        "id": 190275890,
        "sender_full_name": "orlando",
        "timestamp": 1583930119
    },
    {
        "content": "<p>Can you run <code>pip install --upgrade mathlib-tools</code> (maybe prefixed with <code>sudo</code>, and maybe replacing <code>pip</code> by <code>pip3</code> depending on your python setup)?</p>",
        "id": 190275976,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583930176
    },
    {
        "content": "<p>If this work you can run </p>\n<div class=\"codehilite\"><pre><span></span>leanproject get tutorials\ncode tutorials\n</pre></div>\n\n\n<p>and read the file <code>src/first_proofs.lean</code>.</p>",
        "id": 190276064,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583930264
    },
    {
        "content": "<p>You can also play the <a href=\"http://wwwf.imperial.ac.uk/~buzzard/xena/natural_number_game/\" target=\"_blank\" title=\"http://wwwf.imperial.ac.uk/~buzzard/xena/natural_number_game/\">natural numbers game</a> online.</p>",
        "id": 190276158,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583930318
    },
    {
        "content": "<p>Hum it's does'nt work : but i'm on windows 10 ! Thx for the tutorial with real number it's very insteresting !  </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"err\">$</span> <span class=\"n\">pip</span> <span class=\"n\">install</span> <span class=\"c1\">--upgrade mathlib-tools</span>\n<span class=\"n\">ERROR</span><span class=\"p\">:</span> <span class=\"n\">Could</span> <span class=\"ow\">not</span> <span class=\"n\">find</span> <span class=\"n\">a</span> <span class=\"n\">version</span> <span class=\"n\">that</span> <span class=\"n\">satisfies</span> <span class=\"n\">the</span> <span class=\"n\">requirement</span> <span class=\"n\">mathlib</span><span class=\"o\">-</span><span class=\"n\">tools</span> <span class=\"p\">(</span><span class=\"n\">from</span> <span class=\"n\">versions</span><span class=\"p\">:</span> <span class=\"n\">none</span><span class=\"p\">)</span>\n<span class=\"n\">ERROR</span><span class=\"p\">:</span> <span class=\"n\">No</span> <span class=\"n\">matching</span> <span class=\"n\">distribution</span> <span class=\"n\">found</span> <span class=\"kr\">for</span> <span class=\"n\">mathlib</span><span class=\"o\">-</span><span class=\"n\">tools</span>\n\n<span class=\"n\">orlando</span><span class=\"err\">@</span><span class=\"n\">LAPTOP</span><span class=\"o\">-</span><span class=\"mi\">487</span><span class=\"n\">KLHV8</span> <span class=\"n\">MINGW64</span> <span class=\"o\">~/</span><span class=\"n\">my_project</span> <span class=\"p\">(</span><span class=\"n\">lean</span><span class=\"o\">-</span><span class=\"mf\">3.6.1</span><span class=\"p\">)</span>\n<span class=\"err\">$</span> <span class=\"n\">pip3</span> <span class=\"n\">install</span> <span class=\"c1\">--upgrade mathlib-tools</span>\n<span class=\"n\">ERROR</span><span class=\"p\">:</span> <span class=\"n\">Could</span> <span class=\"ow\">not</span> <span class=\"n\">find</span> <span class=\"n\">a</span> <span class=\"n\">version</span> <span class=\"n\">that</span> <span class=\"n\">satisfies</span> <span class=\"n\">the</span> <span class=\"n\">requirement</span> <span class=\"n\">mathlib</span><span class=\"o\">-</span><span class=\"n\">tools</span> <span class=\"p\">(</span><span class=\"n\">from</span> <span class=\"n\">versions</span><span class=\"p\">:</span> <span class=\"n\">none</span><span class=\"p\">)</span>\n<span class=\"n\">ERROR</span><span class=\"p\">:</span> <span class=\"n\">No</span> <span class=\"n\">matching</span> <span class=\"n\">distribution</span> <span class=\"n\">found</span> <span class=\"kr\">for</span> <span class=\"n\">mathlib</span><span class=\"o\">-</span><span class=\"n\">tools</span>\n</pre></div>",
        "id": 190276724,
        "sender_full_name": "orlando",
        "timestamp": 1583930767
    },
    {
        "content": "<p>What is your python3 version ?</p>",
        "id": 190277365,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583931298
    },
    {
        "content": "<p>Run python3 --version</p>",
        "id": 190277414,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583931350
    },
    {
        "content": "<p>And also \"pip3 --version\" for good measure</p>",
        "id": 190277490,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583931389
    },
    {
        "content": "<p>-- &gt; Python 3.8.2<br>\nand <br>\n---&gt;  pip 20.0.2</p>",
        "id": 190278255,
        "sender_full_name": "orlando",
        "timestamp": 1583931923
    },
    {
        "content": "<p>Oops, it's my fault. I should have written: <code>pip3 install mathlibtools</code> (without the hyphen)</p>",
        "id": 190279268,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583932582
    },
    {
        "content": "<p>ok, no problem Patrick</p>",
        "id": 190279448,
        "sender_full_name": "orlando",
        "timestamp": 1583932693
    },
    {
        "content": "<p>I wish the <code>pip</code> error message could be more explicit. The current message makes it very hard to distinguish actual version issues with stupid typos.</p>",
        "id": 190279636,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583932821
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"270476\">@orlando</span> does it work now?</p>",
        "id": 190280432,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583933315
    },
    {
        "content": "<p>it's ok i have the tuto !</p>",
        "id": 190280738,
        "sender_full_name": "orlando",
        "timestamp": 1583933486
    },
    {
        "content": "<p>Good, I hope you'll learn a couple of things by reading it.</p>",
        "id": 190281429,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583933886
    },
    {
        "content": "<p>thx you Patrick !</p>",
        "id": 190281759,
        "sender_full_name": "orlando",
        "timestamp": 1583934090
    },
    {
        "content": "<p>Hello <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>  i do your group game, but i have some problem : <br>\n1/ it's complicated ! <br>\n2/ i don't finish ! (2 goals) ! <br>\n3/ can i simplify ??? <br>\nBut : this is cooooooooool <span aria-label=\"sunglasses\" class=\"emoji emoji-1f60e\" role=\"img\" title=\"sunglasses\">:sunglasses:</span> thank you for this exercice ! <br>\n<a href=\"/user_uploads/3121/1EvhJYC5-y59sonDI1Fvdhw0/groupe.lean\" target=\"_blank\" title=\"groupe.lean\">groupe.lean</a></p>",
        "id": 190324364,
        "sender_full_name": "orlando",
        "timestamp": 1583956580
    },
    {
        "content": "<p>It's easier to read if you post the file directly like this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"c\">/-</span><span class=\"cm\">!</span>\n<span class=\"cm\">Basic definitions in group theory.</span>\n<span class=\"cm\">The beginner mathematician should ignore this part; definitions are</span>\n<span class=\"cm\">can be intimidating. Skip down to line 50, this part is technical.</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"kn\">set_option</span> <span class=\"n\">old_structure_cmd</span> <span class=\"n\">true</span> <span class=\"c1\">-- it&#39;s better for this kind of stuff</span>\n\n<span class=\"c1\">-- We&#39;re overwriting inbuilt group theory here so we always work in</span>\n<span class=\"c1\">-- a namespace</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">mygroup</span>\n\n<span class=\"c1\">-- definitions of the group classes</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">groupdefs</span>\n\n<span class=\"c1\">-- Set up notation typeclass using `extends`.</span>\n<span class=\"n\">class</span> <span class=\"n\">has_group_notation</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"n\">has_mul</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">has_one</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">has_inv</span> <span class=\"n\">G</span>\n\n<span class=\"c1\">-- definition of the group structure</span>\n<span class=\"n\">class</span> <span class=\"n\">group</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"n\">has_group_notation</span> <span class=\"n\">G</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">mul_assoc</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">one_mul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">mul_left_inv</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"n\">class</span> <span class=\"n\">comm_group</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"n\">group</span> <span class=\"n\">G</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">mul_comm</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- definition of powers</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">group_pow_nat</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">G</span>\n<span class=\"bp\">|</span> <span class=\"n\">g</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">group_pow_nat</span> <span class=\"n\">g</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">g</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">group_has_pow_nat</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_pow</span> <span class=\"n\">G</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">group_pow_nat</span><span class=\"bp\">⟩</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">group_pow</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"bp\">ℤ</span> <span class=\"bp\">→</span> <span class=\"n\">G</span>\n<span class=\"bp\">|</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">group_pow_nat</span> <span class=\"n\">g</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"n\">g</span> <span class=\"bp\">-</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">group_pow_nat</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">⁻¹</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">group_has_pow</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_pow</span> <span class=\"n\">G</span> <span class=\"bp\">ℤ</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">group_pow</span><span class=\"bp\">⟩</span>\n\n<span class=\"c1\">-- Center of a group</span>\n<span class=\"n\">def</span> <span class=\"n\">center</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">|</span> <span class=\"bp\">∀</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"bp\">*</span> <span class=\"n\">k</span><span class=\"o\">}</span>\n<span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">reducible</span><span class=\"o\">]</span> <span class=\"n\">center</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">mul_left_inv_simp</span><span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">](</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">exact</span> <span class=\"n\">group</span><span class=\"bp\">.</span><span class=\"n\">mul_left_inv</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">rev_o</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">](</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">a</span>  <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">exact</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">(</span> <span class=\"n\">group</span><span class=\"bp\">.</span><span class=\"n\">mul_left_inv</span> <span class=\"n\">a</span><span class=\"o\">),</span>\n<span class=\"kn\">end</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">mul_assoc_simp</span><span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">](</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">exact</span> <span class=\"n\">group</span><span class=\"bp\">.</span><span class=\"n\">mul_assoc</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">rev_mul_assoc_simp</span><span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">](</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span>   <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">exact</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"o\">(</span><span class=\"n\">group</span><span class=\"bp\">.</span><span class=\"n\">mul_assoc</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">),</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">groupdefs</span>\n\n<span class=\"c1\">-- START HERE</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n\n<span class=\"cm\">For a group G, you start with the following axioms:</span>\n\n<span class=\"cm\">mul_assoc : ∀ (a b c : G), (a * b) * c = a * (b * c)</span>\n<span class=\"cm\">one_mul : ∀ (a : G), 1 * a = a</span>\n<span class=\"cm\">mul_left_inv : ∀ (a : G), a⁻¹ * a = 1</span>\n\n<span class=\"cm\">The goal is to prove the following theorems (in the order listed) :</span>\n\n<span class=\"cm\">`mul_left_cancel : ∀ (a b c : G), a * b = a * c → b = c`</span>\n<span class=\"cm\">`mul_eq_of_eq_inv_mul {a x y : G} : x = a⁻¹ * y → a * x = y`</span>\n<span class=\"cm\">`mul_one (a : G) : a * 1 = a`</span>\n<span class=\"cm\">`mul_right_inv (a : G) : a * a⁻¹ = 1`</span>\n<span class=\"cm\">`eq_mul_inv_of_mul_eq {a b c : G} (h : a * c = b) : a = b * c⁻¹`</span>\n<span class=\"cm\">`mul_left_eq_self {a b : G} : a * b = b ↔ a = 1`</span>\n<span class=\"cm\">`eq_inv_of_mul_eq_one {a b : G} (h : a * b = 1) : a = b⁻¹`</span>\n<span class=\"cm\">`inv_inv (a : G) : a ⁻¹ ⁻¹ = a`</span>\n<span class=\"cm\">`inv_eq_of_mul_eq_one {a b : G} (h : a * b = 1) : a⁻¹ = b`</span>\n<span class=\"cm\">`mul_inv_rev {a b : G} : (a * b)⁻¹ = b⁻¹ * a⁻¹`</span>\n\n<span class=\"cm\">-/</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">trans_appl</span><span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">congr_arg</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">h</span>\n<span class=\"kn\">end</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">mul_left_cancel</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span>  <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">y</span>  <span class=\"bp\">→</span>  <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"k\">let</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"k\">let</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">y</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">from</span>  <span class=\"n\">trans_appl</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">t</span> <span class=\"bp\">*</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">mul_left_inv_simp</span> <span class=\"n\">a</span><span class=\"o\">),</span>\n    <span class=\"k\">have</span> <span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"k\">from</span>  <span class=\"n\">trans_appl</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">t</span> <span class=\"bp\">*</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">mul_left_inv_simp</span> <span class=\"n\">a</span><span class=\"o\">),</span>\n    <span class=\"k\">have</span> <span class=\"n\">Hpq</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">y</span><span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"n\">trans_appl</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span><span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span><span class=\"n\">x</span><span class=\"o\">)</span>  <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"k\">calc</span>\n        <span class=\"n\">x</span>   <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">x</span>            <span class=\"o\">:</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"o\">(</span><span class=\"n\">group</span><span class=\"bp\">.</span><span class=\"n\">one_mul</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n        <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">x</span>      <span class=\"o\">:</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"o\">(</span><span class=\"n\">hp</span><span class=\"o\">)</span>\n        <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span><span class=\"n\">x</span> <span class=\"o\">)</span>    <span class=\"o\">:</span> <span class=\"n\">group</span><span class=\"bp\">.</span><span class=\"n\">mul_assoc</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span>  <span class=\"n\">a</span> <span class=\"n\">x</span>\n        <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">y</span><span class=\"o\">)</span>      <span class=\"o\">:</span> <span class=\"n\">Hpq</span>\n        <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">y</span>        <span class=\"o\">:</span> <span class=\"n\">rev_mul_assoc_simp</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span>  <span class=\"n\">a</span> <span class=\"n\">y</span>\n        <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">y</span>            <span class=\"o\">:</span> <span class=\"n\">hq</span>\n        <span class=\"bp\">...</span> <span class=\"bp\">=</span>  <span class=\"n\">y</span>               <span class=\"o\">:</span> <span class=\"n\">group</span><span class=\"bp\">.</span><span class=\"n\">one_mul</span> <span class=\"n\">y</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">mul_eq_of_eq_inv_mul</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"c1\">---  Strategie :</span>\n<span class=\"c1\">---                  x = a⁻¹ y  =&gt;  a^⁻¹ a x = a⁻¹ y  and use lemma mul_left_cancel a^⁻¹ ax y to get ax = y</span>\n<span class=\"c1\">---</span>\n    <span class=\"k\">have</span> <span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span><span class=\"mi\">1</span> <span class=\"bp\">*</span>  <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">trans_appl</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">t</span> <span class=\"bp\">*</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">mul_left_inv_simp</span> <span class=\"n\">a</span><span class=\"o\">),</span>\n    <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">x</span>   <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">group</span><span class=\"bp\">.</span><span class=\"n\">one_mul</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"k\">calc</span>\n        <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">hx</span>\n        <span class=\"bp\">...</span>           <span class=\"bp\">=</span> <span class=\"n\">x</span>     <span class=\"o\">:</span> <span class=\"n\">h1</span>\n        <span class=\"bp\">...</span>           <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"k\">calc</span>\n        <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">rev_mul_assoc_simp</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span>  <span class=\"n\">a</span> <span class=\"n\">x</span>\n        <span class=\"bp\">...</span>          <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span><span class=\"n\">y</span>        <span class=\"o\">:</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n    <span class=\"k\">show</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">mul_left_cancel</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">G</span><span class=\"o\">),</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">mul_one</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"k\">show</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">mul_eq_of_eq_inv_mul</span> <span class=\"o\">(</span><span class=\"n\">H</span><span class=\"o\">),</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">mul_right_inv</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"o\">(</span><span class=\"n\">mul_one</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span><span class=\"o\">),</span>\n  <span class=\"k\">show</span> <span class=\"n\">a</span> <span class=\"bp\">*</span><span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">mul_eq_of_eq_inv_mul</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">),</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">eq_mul_inv_of_mul_eq</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"k\">have</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"o\">(</span> <span class=\"n\">a</span> <span class=\"bp\">*</span>  <span class=\"n\">c</span> <span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"bp\">⁻¹</span>  <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">⁻¹</span><span class=\"o\">,</span>\n        <span class=\"k\">from</span>  <span class=\"n\">trans_appl</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">t</span> <span class=\"bp\">*</span><span class=\"n\">c</span><span class=\"bp\">⁻¹</span> <span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">),</span>\n    <span class=\"k\">show</span>  <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"bp\">⁻¹</span> <span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"k\">calc</span>\n        <span class=\"n\">a</span>       <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span>             <span class=\"o\">:</span>  <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"o\">(</span><span class=\"n\">mul_one</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">))</span>\n        <span class=\"bp\">...</span>     <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"bp\">⁻¹</span> <span class=\"o\">)</span>    <span class=\"o\">:</span>  <span class=\"n\">trans_appl</span><span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"o\">(</span><span class=\"n\">mul_right_inv</span> <span class=\"n\">c</span><span class=\"o\">))</span>\n        <span class=\"bp\">...</span>     <span class=\"bp\">=</span> <span class=\"o\">(</span> <span class=\"n\">a</span> <span class=\"bp\">*</span>  <span class=\"n\">c</span> <span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"bp\">⁻¹</span>  <span class=\"o\">:</span>  <span class=\"n\">rev_mul_assoc_simp</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span>\n        <span class=\"bp\">...</span>     <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"bp\">⁻¹</span>           <span class=\"o\">:</span> <span class=\"n\">H</span>\n<span class=\"kn\">end</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">mul_left_eq_self</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">sorry</span> <span class=\"c1\">--- i dont know iff.intro ? ? ? or Split ??? i don&#39;t understand !</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">eq_inv_of_mul_eq_one</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"bp\">⁻¹</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">eq_mul_inv_of_mul_eq</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">),</span>\n  <span class=\"k\">show</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"bp\">⁻¹</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"k\">calc</span>\n    <span class=\"n\">a</span>   <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"bp\">⁻¹</span>  <span class=\"o\">:</span> <span class=\"n\">H</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"bp\">⁻¹</span>      <span class=\"o\">:</span> <span class=\"n\">group</span><span class=\"bp\">.</span><span class=\"n\">one_mul</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"bp\">⁻¹</span><span class=\"o\">),</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">inv_inv</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">⁻¹</span> <span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">mul_right_inv</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"k\">show</span> <span class=\"n\">b</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"o\">(</span><span class=\"n\">eq_inv_of_mul_eq_one</span> <span class=\"n\">h</span><span class=\"o\">),</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">inv_eq_of_mul_eq_one</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"bp\">⁻¹</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">eq_inv_of_mul_eq_one</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">He</span><span class=\"o\">:</span>  <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"k\">calc</span>\n        <span class=\"n\">b</span>       <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">⁻¹</span>  <span class=\"o\">:</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">(</span><span class=\"n\">inv_inv</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n        <span class=\"bp\">...</span>     <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span>     <span class=\"o\">:</span> <span class=\"n\">trans_appl</span><span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">t</span><span class=\"bp\">⁻¹</span> <span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"bp\">⁻¹</span> <span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"n\">H</span><span class=\"o\">),</span>\n    <span class=\"k\">show</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"n\">He</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"c1\">-- for orlando cau</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">mul_inv_rev</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n<span class=\"kn\">end</span> <span class=\"n\">mygroup</span>\n</pre></div>",
        "id": 190324494,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583956667
    },
    {
        "content": "<p>For the <code>iff</code> you can start like this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n     <span class=\"bp\">...</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n     <span class=\"bp\">...</span>\n  <span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 190324631,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583956730
    },
    {
        "content": "<p>the other goal is the one you need for your favourite lemma :-) Why not start with <code>apply inv_eq_of_mul_eq_one</code>?</p>\n<p>I am just racing out the office, certainly your proofs can be simplified but it's pretty cool that you did so many :-)</p>",
        "id": 190324915,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583956895
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>  thx for the split  iff !  For my favorite lemma, yes  is the one  <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span> i have the maths proof but it's complicated to do ! <br>\nI will make it : Probably tomorrow !</p>",
        "id": 190325283,
        "sender_full_name": "orlando",
        "timestamp": 1583957115
    },
    {
        "content": "<p>What's the maths proof?</p>",
        "id": 190325316,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583957132
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"n\">so</span> <span class=\"k\">by</span>  <span class=\"n\">inv_eq_of_mul_eq_one</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">⁻¹</span>\n</pre></div>",
        "id": 190325600,
        "sender_full_name": "orlando",
        "timestamp": 1583957287
    },
    {
        "content": "<p>So why not <code>apply inv_eq_of_mul_eq_one</code>?</p>",
        "id": 190333017,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583961683
    },
    {
        "content": "<p>Computer scientists like to write proofs backwards</p>",
        "id": 190333143,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583961736
    },
    {
        "content": "<p>You don't have to go backwards, nothing prevents you to write:</p>\n<div class=\"codehilite\"><pre><span></span> <span class=\"k\">have</span> <span class=\"n\">key</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">b</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">sorry</span><span class=\"o\">,</span>\n <span class=\"n\">exact</span>  <span class=\"n\">inv_eq_of_mul_eq_one</span> <span class=\"n\">key</span><span class=\"o\">,</span>\n</pre></div>",
        "id": 190333602,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583962066
    },
    {
        "content": "<p>and replace sorry by a proof of course.</p>",
        "id": 190333666,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583962086
    },
    {
        "content": "<p>Yes i do that ! But the proof is a little complicated  <span aria-label=\"rolling on the floor laughing\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rolling on the floor laughing\">:rolling_on_the_floor_laughing:</span></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">mul_inv_rev</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"k\">have</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span><span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span><span class=\"n\">a</span><span class=\"bp\">⁻¹</span><span class=\"o\">,</span>\n            <span class=\"k\">from</span> <span class=\"n\">trans_appl</span><span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">t</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">mul_right_inv</span> <span class=\"n\">b</span><span class=\"o\">),</span>\n    <span class=\"k\">have</span> <span class=\"n\">Ha</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span><span class=\"n\">a</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"k\">calc</span>\n        <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span><span class=\"n\">a</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span><span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:</span> <span class=\"n\">rev_mul_assoc_simp</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span>\n        <span class=\"bp\">...</span>          <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span><span class=\"n\">a</span><span class=\"bp\">⁻¹</span>    <span class=\"o\">:</span> <span class=\"n\">H</span>\n        <span class=\"bp\">...</span>          <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span>       <span class=\"o\">:</span> <span class=\"n\">group</span><span class=\"bp\">.</span><span class=\"n\">one_mul</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span><span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"k\">calc</span>\n        <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span>  <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">mul_assoc_simp</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span>\n        <span class=\"bp\">...</span>                    <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span>             <span class=\"o\">:</span> <span class=\"n\">trans_appl</span><span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">t</span> <span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Ha</span><span class=\"o\">)</span>\n        <span class=\"bp\">...</span>                    <span class=\"bp\">=</span> <span class=\"mi\">1</span>                   <span class=\"o\">:</span> <span class=\"n\">mul_right_inv</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">inv_eq_of_mul_eq_one</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">),</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 190336039,
        "sender_full_name": "orlando",
        "timestamp": 1583963591
    },
    {
        "content": "<p>Why not just apply and then rewrite a couple of times?</p>",
        "id": 190336814,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583964119
    },
    {
        "content": "<p>These systems are designed to go backwards</p>",
        "id": 190336869,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583964141
    },
    {
        "content": "<p>i don't know, how can i do that :D</p>",
        "id": 190336957,
        "sender_full_name": "orlando",
        "timestamp": 1583964222
    },
    {
        "content": "<p>Did you do the apply line yet?</p>",
        "id": 190337122,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583964352
    },
    {
        "content": "<p>what is the apply line ? (sorry i'm not english, i'm French and don't speack very well)</p>",
        "id": 190337563,
        "sender_full_name": "orlando",
        "timestamp": 1583964704
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/My.20favorite.20group.20lemma/near/190333017\" title=\"#narrow/stream/113488-general/topic/My.20favorite.20group.20lemma/near/190333017\">said</a>:</p>\n<blockquote>\n<p>So why not <code>apply inv_eq_of_mul_eq_one</code>?</p>\n</blockquote>\n<p>add this to your proof</p>",
        "id": 190338091,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583965136
    },
    {
        "content": "<p>and then start rewriting, e.g. <code>rw mul_assoc</code></p>",
        "id": 190338871,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583965656
    },
    {
        "content": "<p>actually the rewrites are problematic because they clash with the real definitions in the root namespace. Change the end of your file to this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">namespace</span> <span class=\"n\">group</span>\n\n<span class=\"c1\">-- for orlando cau</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">mul_inv_rev</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">inv_eq_of_mul_eq_one</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">group</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">mygroup</span>\n</pre></div>",
        "id": 190339264,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583965975
    },
    {
        "content": "<p>That <code>namespace group</code> line could really do with being on the line before <code>-- START HERE</code></p>",
        "id": 190339375,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583966069
    },
    {
        "content": "<p>okay !!!! </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">mul_inv_rev&#39;</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">inv_eq_of_mul_eq_one</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">mul_assoc_simp</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">mul_left_cancel</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">rev_mul_assoc_simp</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">mul_left_inv</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">one_mul</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">rev_mul_assoc_simp</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">mul_one</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">mul_right_inv</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">one_mul</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 190343037,
        "sender_full_name": "orlando",
        "timestamp": 1583969067
    },
    {
        "content": "<p>You don't have to use <code>apply</code> if you don't want it, and you don't have to make it complicated. You can write:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">mul_inv_rev</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n <span class=\"k\">have</span> <span class=\"n\">key</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">b</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">group</span><span class=\"bp\">.</span><span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">group</span><span class=\"bp\">.</span><span class=\"n\">mul_assoc</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">mul_right_inv</span><span class=\"o\">,</span> <span class=\"n\">group</span><span class=\"bp\">.</span><span class=\"n\">one_mul</span><span class=\"o\">,</span> <span class=\"n\">mul_right_inv</span><span class=\"o\">],</span>\n <span class=\"n\">exact</span>  <span class=\"n\">inv_eq_of_mul_eq_one</span> <span class=\"n\">key</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 190369164,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1584004554
    },
    {
        "content": "<p>If you want the proof script to be readable, you can use a <code>calc</code> to do the exact same proof:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n <span class=\"k\">have</span> <span class=\"n\">key</span> <span class=\"o\">:=</span>\n <span class=\"k\">calc</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">b</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span>\n        <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">b</span><span class=\"bp\">⁻¹*</span><span class=\"n\">a</span><span class=\"bp\">⁻¹</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">group</span><span class=\"bp\">.</span><span class=\"n\">mul_assoc</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"bp\">⁻¹*</span><span class=\"n\">a</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span>   <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">group</span><span class=\"bp\">.</span><span class=\"n\">mul_assoc</span> <span class=\"n\">b</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">*</span><span class=\"n\">a</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span>       <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">mul_right_inv</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">a</span><span class=\"bp\">⁻¹</span>           <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">group</span><span class=\"bp\">.</span><span class=\"n\">one_mul</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>               <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">mul_right_inv</span><span class=\"o\">,</span>\n <span class=\"n\">exact</span>  <span class=\"n\">inv_eq_of_mul_eq_one</span> <span class=\"n\">key</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 190369247,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1584004614
    },
    {
        "content": "<p>But really the last three lines (at least) shouldn't be there. The problem is that your file completely messes up <code>simp</code> attribute (that are tricky to use right). You need to remove them from the associativity lemmas, and add them to <code>mul_left_inv</code>, <code>mul_right_inv</code>, <code>one_mul</code> and <code>mul_one</code>. Then you can write:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n <span class=\"k\">have</span> <span class=\"n\">key</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">b</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">group</span><span class=\"bp\">.</span><span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">group</span><span class=\"bp\">.</span><span class=\"n\">mul_assoc</span> <span class=\"n\">b</span><span class=\"o\">],</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n <span class=\"n\">exact</span>  <span class=\"n\">inv_eq_of_mul_eq_one</span> <span class=\"n\">key</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 190369402,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1584004741
    },
    {
        "content": "<p>The actual nice proof would of course be entirely automatic. Currently I think even mathlib cannot do it fully automatically, but this is only a matter of finding someone who knows a bit of tactic writing and has time for it...</p>",
        "id": 190369519,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1584004817
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"270476\">orlando</span> <a href=\"#narrow/stream/113488-general/topic/My.20favorite.20group.20lemma/near/190337563\" title=\"#narrow/stream/113488-general/topic/My.20favorite.20group.20lemma/near/190337563\">said</a>:</p>\n<blockquote>\n<p>what is the apply line ? (sorry i'm not english, i'm French and don't speack very well)</p>\n</blockquote>\n<p>I guessed that from your Lean file name <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span> Where are you? (sorry if you already answered that question, there too many new users for me to remember everyone).</p>",
        "id": 190369692,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1584004941
    },
    {
        "content": "<p>I guessed it from the space before the question mark</p>",
        "id": 190369707,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584004966
    },
    {
        "content": "<p>In my case you even get more information from that: I have spaces before question marks when I'm typing on my phone, because I'm too lazy to switch to English keyboard or go back and erase spaces introduced automatically.</p>",
        "id": 190369840,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1584005061
    },
    {
        "content": "<p>Il y a beaucoup de Français ici. <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 190369904,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584005124
    },
    {
        "content": "<p>(But I'm not one of them... although I live 8km from the border...)</p>",
        "id": 190369924,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584005147
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span>  thank you, for the comment ! It's nice, i will try to simplify my proof with rw, it's a good exercice for me, i want to understand <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>\n<p>Bonjour de la France (Grenoble Alpes)    <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span></p>",
        "id": 190372603,
        "sender_full_name": "orlando",
        "timestamp": 1584007340
    },
    {
        "content": "<p>Hello, </p>\n<p>I have a problem  <span aria-label=\"innocent\" class=\"emoji emoji-1f607\" role=\"img\" title=\"innocent\">:innocent:</span> </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n<span class=\"n\">def</span> <span class=\"n\">Gm</span>  <span class=\"o\">:=</span>  <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">}</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"err\">∈</span>  <span class=\"n\">Gm</span><span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"err\">∈</span> <span class=\"n\">Gm</span><span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">))</span> <span class=\"bp\">→</span>  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"err\">∈</span>  <span class=\"n\">Gm</span><span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">intros</span> <span class=\"n\">ha</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">Gm</span> <span class=\"n\">at</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n    <span class=\"n\">sorry</span>  <span class=\"c1\">-- a ∈ Gm(R) so exist y_a s.t a * y_a = 1, how to have y_a</span>\n           <span class=\"c1\">-- ellim.exist  doesn&#39;t work directly ?</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 190447412,
        "sender_full_name": "orlando",
        "timestamp": 1584048446
    },
    {
        "content": "<p><code>cases ha with y hy</code></p>",
        "id": 190447576,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584048571
    },
    {
        "content": "<p>Alternatively, replace your <code>intros</code> with <code>rintros?</code>, and see what it tells you.</p>",
        "id": 190447602,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584048594
    },
    {
        "content": "<p>Cases is ok ...  thank you <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span> <br>\nI will try to make Gm a group <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 190447910,
        "sender_full_name": "orlando",
        "timestamp": 1584048796
    },
    {
        "content": "<p>Then you could make <code>Gm</code> a group functor</p>",
        "id": 190449042,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584049549
    },
    {
        "content": "<p>Orlando, you can still pick up the efficient way from the beginning: the first line of this proof should be <code>rintros ⟨a', ha⟩ ⟨b', hb⟩,</code></p>",
        "id": 190449276,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1584049710
    },
    {
        "content": "<p>Ok, verry nice Patrick !!! </p>\n<p>Kevin, yes it's my goal, but slowly, i have to study the language before !</p>",
        "id": 190449467,
        "sender_full_name": "orlando",
        "timestamp": 1584049838
    },
    {
        "content": "<p>I guess it's worth saying that <code>Gm</code> is already defined in lean and it's called <code>units</code>. But feel free to define it yourself for practice</p>",
        "id": 190450841,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584050687
    },
    {
        "content": "<p>You can look at how it was done in mathlib after</p>",
        "id": 190450855,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584050701
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>  </p>\n<p>I learn a little about units and i make my favorite commutative algebra  lemma, it's fun but complicated !  it's killing me <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">---</span>\n<span class=\"c1\">---   Goal : 0. Understand with a little example :D</span>\n<span class=\"c1\">---             create  Gm : R → Ab has a group fonctor from category of ring → Abelian group</span>\n<span class=\"c1\">---           -----------------------  &gt; &gt; &gt; &gt; &gt;   difficult !    I have to make a group first :D</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">ring</span>\n<span class=\"kn\">universe</span> <span class=\"n\">u</span>\n<span class=\"kn\">variable</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n<span class=\"kn\">structure</span> <span class=\"n\">Gm</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:=</span>   <span class=\"c1\">--- Object ?</span>\n<span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">inv</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">val_inv</span> <span class=\"o\">:</span> <span class=\"n\">val</span> <span class=\"bp\">*</span> <span class=\"n\">inv</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">inv_val</span> <span class=\"o\">:</span> <span class=\"n\">inv</span> <span class=\"bp\">*</span> <span class=\"n\">val</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">Gm</span>\n<span class=\"kn\">variables</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n<span class=\"c1\">------    My universe</span>\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_coe</span> <span class=\"o\">(</span><span class=\"n\">Gm</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">val</span><span class=\"bp\">⟩</span>    <span class=\"c1\">---- ici c&#39;est la valeur de l&#39;unité dans R instance ???</span>\n<span class=\"c1\">--- Exemple of Gm element !</span>\n<span class=\"n\">def</span> <span class=\"n\">Nil_lemma_for_fun___D</span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">Gm</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n    <span class=\"k\">begin</span>\n        <span class=\"c1\">--- My favorite commutative lemma : η^2 =0 → (1+η) × (1-η) = 1 so 1+η ∈ Gm(R) :D</span>\n        <span class=\"c1\">---                               :</span>\n        <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n        <span class=\"k\">let</span> <span class=\"n\">val_inv</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">+</span><span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">-</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"k\">from</span>\n            <span class=\"k\">calc</span>\n                <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">+</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">-</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"bp\">*</span><span class=\"mi\">1</span>  <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">a</span>        <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"o\">(</span><span class=\"n\">mul_self_sub_mul_self_eq</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">))]</span>\n                <span class=\"bp\">...</span>           <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"bp\">*</span><span class=\"mi\">1</span>  <span class=\"bp\">-</span> <span class=\"mi\">0</span>          <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">exact</span> <span class=\"n\">congr_arg</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"bp\">*</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">l</span><span class=\"o\">)</span>  <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">)</span>\n                <span class=\"bp\">...</span>           <span class=\"bp\">=</span> <span class=\"mi\">1</span>                 <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n        <span class=\"k\">let</span> <span class=\"n\">inv_val</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">-</span><span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">+</span><span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"k\">from</span>\n            <span class=\"k\">calc</span>\n                <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">-</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">+</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">+</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">-</span><span class=\"n\">a</span><span class=\"o\">)</span>    <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">mul_comm</span>\n                <span class=\"bp\">...</span>          <span class=\"bp\">=</span> <span class=\"mi\">1</span>                 <span class=\"o\">:</span> <span class=\"n\">val_inv</span><span class=\"o\">,</span>\n        <span class=\"n\">exact</span> <span class=\"bp\">⟨</span><span class=\"mi\">1</span><span class=\"bp\">+</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"bp\">-</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">val_inv</span><span class=\"o\">,</span><span class=\"n\">inv_val</span><span class=\"bp\">⟩</span>\n    <span class=\"kn\">end</span>\n\n<span class=\"kn\">protected</span> <span class=\"n\">def</span>  <span class=\"n\">linv</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Gm</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Gm</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">inv</span><span class=\"o\">,</span><span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">,</span><span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">inv_val</span><span class=\"o\">,</span><span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">val_inv</span><span class=\"bp\">⟩</span>\n<span class=\"c1\">--- Perhaps i can drop inv_val cause commutativity (all Ring are commutative :D)</span>\n<span class=\"c\">/-</span><span class=\"cm\">- Gm herite de la structure de la multiplication de R -/</span>\n<span class=\"kn\">protected</span> <span class=\"n\">def</span> <span class=\"n\">mul</span> <span class=\"o\">(</span><span class=\"n\">u₁</span> <span class=\"n\">u₂</span> <span class=\"o\">:</span> <span class=\"n\">Gm</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Gm</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨</span><span class=\"n\">u₁</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">*</span> <span class=\"n\">u₂</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">,</span>\n<span class=\"n\">u₂</span><span class=\"bp\">.</span><span class=\"n\">inv</span> <span class=\"bp\">*</span> <span class=\"n\">u₁</span><span class=\"bp\">.</span><span class=\"n\">inv</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">u₁</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">u₂</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">*</span> <span class=\"n\">u₂</span><span class=\"bp\">.</span><span class=\"n\">inv</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">u₁</span><span class=\"bp\">.</span><span class=\"n\">inv</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"k\">by</span>\n<span class=\"k\">begin</span>\n    <span class=\"k\">let</span> <span class=\"n\">a</span>  <span class=\"o\">:=</span> <span class=\"n\">u₁</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">,</span>\n    <span class=\"k\">let</span> <span class=\"n\">b</span>  <span class=\"o\">:=</span> <span class=\"n\">u₂</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">,</span>\n    <span class=\"k\">let</span> <span class=\"n\">b&#39;</span> <span class=\"o\">:=</span> <span class=\"n\">u₂</span><span class=\"bp\">.</span><span class=\"n\">inv</span><span class=\"o\">,</span>\n    <span class=\"k\">let</span> <span class=\"n\">a&#39;</span> <span class=\"o\">:=</span> <span class=\"n\">u₁</span><span class=\"bp\">.</span><span class=\"n\">inv</span><span class=\"o\">,</span>\n    <span class=\"k\">show</span>  <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">b&#39;</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">a&#39;</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"k\">from</span>\n        <span class=\"k\">calc</span>\n            <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">b&#39;</span> <span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">a&#39;</span> <span class=\"bp\">=</span>  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">a&#39;</span>     <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">exact</span> <span class=\"n\">congr_arg</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">l</span>  <span class=\"bp\">*</span> <span class=\"n\">a&#39;</span><span class=\"o\">)</span>  <span class=\"o\">(</span><span class=\"n\">u₂</span><span class=\"bp\">.</span><span class=\"n\">val_inv</span><span class=\"o\">)</span>\n            <span class=\"bp\">...</span>                 <span class=\"bp\">=</span>   <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">a&#39;</span>          <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">mul_one</span> <span class=\"n\">a</span>\n            <span class=\"bp\">...</span>                 <span class=\"bp\">=</span>   <span class=\"mi\">1</span>               <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">u₁</span><span class=\"bp\">.</span><span class=\"n\">val_inv</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span><span class=\"o\">,</span>\n<span class=\"k\">by</span> <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mul_assoc</span><span class=\"o\">],</span>\n<span class=\"k\">have</span> <span class=\"n\">u₂</span><span class=\"bp\">.</span><span class=\"n\">inv</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">u₁</span><span class=\"bp\">.</span><span class=\"n\">inv</span> <span class=\"bp\">*</span><span class=\"n\">u₁</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">u₂</span><span class=\"bp\">.</span><span class=\"n\">val</span>  <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"k\">by</span>\n<span class=\"k\">begin</span>\n    <span class=\"k\">let</span> <span class=\"n\">b&#39;</span>  <span class=\"o\">:=</span> <span class=\"n\">u₁</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">,</span>\n    <span class=\"k\">let</span> <span class=\"n\">a&#39;</span>  <span class=\"o\">:=</span> <span class=\"n\">u₂</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">,</span>\n    <span class=\"k\">let</span> <span class=\"n\">a</span>   <span class=\"o\">:=</span> <span class=\"n\">u₂</span><span class=\"bp\">.</span><span class=\"n\">inv</span><span class=\"o\">,</span>\n    <span class=\"k\">let</span> <span class=\"n\">b</span>   <span class=\"o\">:=</span> <span class=\"n\">u₁</span><span class=\"bp\">.</span><span class=\"n\">inv</span><span class=\"o\">,</span>\n    <span class=\"k\">show</span>  <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">b&#39;</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">a&#39;</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"k\">from</span>\n        <span class=\"k\">calc</span>\n            <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">b&#39;</span> <span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">a&#39;</span> <span class=\"bp\">=</span>  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">a&#39;</span>     <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">exact</span> <span class=\"n\">congr_arg</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">l</span>  <span class=\"bp\">*</span> <span class=\"n\">a&#39;</span><span class=\"o\">)</span>  <span class=\"o\">(</span><span class=\"n\">u₁</span><span class=\"bp\">.</span><span class=\"n\">inv_val</span><span class=\"o\">)</span>\n            <span class=\"bp\">...</span>                 <span class=\"bp\">=</span>   <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">a&#39;</span>          <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">mul_one</span> <span class=\"n\">a</span>\n            <span class=\"bp\">...</span>                 <span class=\"bp\">=</span>   <span class=\"mi\">1</span>               <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">u₂</span><span class=\"bp\">.</span><span class=\"n\">inv_val</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span><span class=\"o\">,</span>\n<span class=\"k\">by</span> <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mul_assoc</span><span class=\"o\">],</span>  <span class=\"c1\">-- what is simpa  = Sympathique ???</span>\n<span class=\"bp\">⟩</span>\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_mul</span> <span class=\"o\">(</span><span class=\"n\">Gm</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">Gm</span><span class=\"bp\">.</span><span class=\"n\">mul</span><span class=\"bp\">⟩</span>\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_one</span> <span class=\"o\">(</span><span class=\"n\">Gm</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">one_mul</span> <span class=\"mi\">1</span><span class=\"bp\">⟩⟩</span>\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_inv</span> <span class=\"o\">(</span><span class=\"n\">Gm</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">Gm</span><span class=\"bp\">.</span><span class=\"n\">linv</span><span class=\"bp\">⟩</span>\n<span class=\"kn\">end</span> <span class=\"n\">Gm</span>\n</pre></div>",
        "id": 190527504,
        "sender_full_name": "orlando",
        "timestamp": 1584118545
    },
    {
        "content": "<p>There are many facts about units in <code>algebra/group/units</code>.</p>",
        "id": 190527671,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1584118618
    },
    {
        "content": "<p>They're defined in any (incl. non-commutative) monoid, but you can think about a ring, if you want.</p>",
        "id": 190527747,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1584118655
    },
    {
        "content": "<p>Hello <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> </p>\n<p>Okay, but i want learn how to use, so i redo some stuff <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span>  it's difficult for a beginner to learn !</p>",
        "id": 190527964,
        "sender_full_name": "orlando",
        "timestamp": 1584118756
    },
    {
        "content": "<p><code>simpa</code> is more or less <code>simp; assumption</code>, and <code>simpa using lalala</code> is something like <code>have this := lalala; simp at this |-; assumption</code></p>",
        "id": 190528002,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1584118779
    },
    {
        "content": "<p>Hello, </p>\n<p>I have i little problem with the existential quantifier  <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">ring</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">ring_exp</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">ring</span>\n<span class=\"n\">universes</span> <span class=\"n\">u</span>           <span class=\"c1\">---- ???</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">R_1</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}{</span><span class=\"n\">R_2</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R_1</span><span class=\"o\">][</span><span class=\"n\">comm_ring</span> <span class=\"n\">R_2</span><span class=\"o\">]</span>\n<span class=\"kn\">structure</span> <span class=\"n\">Idem</span><span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)(</span><span class=\"n\">idem</span> <span class=\"o\">:</span> <span class=\"n\">e</span><span class=\"bp\">*</span><span class=\"n\">e</span>  <span class=\"bp\">=</span> <span class=\"n\">e</span><span class=\"o\">)</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">Idem</span>\n<span class=\"n\">def</span> <span class=\"n\">map</span><span class=\"o\">(</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ring_hom</span> <span class=\"n\">R_1</span> <span class=\"n\">R_2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Idem</span> <span class=\"o\">(</span><span class=\"n\">R_1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Idem</span> <span class=\"n\">R_2</span>  <span class=\"o\">:=</span>\n <span class=\"bp\">λ</span> <span class=\"n\">E</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span> <span class=\"n\">f</span> <span class=\"n\">E</span><span class=\"bp\">.</span><span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">rw</span>  <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">map_mul</span><span class=\"o\">,</span> <span class=\"n\">E</span><span class=\"bp\">.</span><span class=\"n\">idem</span><span class=\"o\">]</span><span class=\"bp\">⟩</span>\n<span class=\"kn\">end</span> <span class=\"n\">Idem</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">Uni_2</span><span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>  <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">certificat</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">))</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">Uni_2</span>\n<span class=\"n\">def</span> <span class=\"n\">map</span><span class=\"o\">(</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ring_hom</span> <span class=\"n\">R_1</span> <span class=\"n\">R_2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Uni_2</span> <span class=\"n\">R_1</span> <span class=\"bp\">→</span> <span class=\"n\">Uni_2</span> <span class=\"n\">R_2</span>  <span class=\"o\">:=</span>\n <span class=\"bp\">λ</span> <span class=\"n\">ob</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span> <span class=\"n\">f</span> <span class=\"n\">ob</span><span class=\"bp\">.</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">f</span> <span class=\"n\">ob</span><span class=\"bp\">.</span><span class=\"n\">b</span><span class=\"o\">,</span>  <span class=\"k\">begin</span>\n        <span class=\"n\">cases</span> <span class=\"n\">ob</span><span class=\"bp\">.</span><span class=\"n\">certificat</span> <span class=\"k\">with</span> <span class=\"n\">xob</span> <span class=\"n\">h</span><span class=\"o\">,</span>      <span class=\"c1\">-- how to get directly xob and yob ? with one cases ?</span>\n        <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">yob</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n        <span class=\"k\">have</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">ob</span><span class=\"bp\">.</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">xob</span><span class=\"o\">)</span> <span class=\"bp\">+</span>  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">ob</span><span class=\"bp\">.</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">yob</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"k\">by</span>\n        <span class=\"n\">rw</span>  <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">map_mul</span><span class=\"o\">,</span><span class=\"err\">←</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">map_mul</span><span class=\"o\">,</span><span class=\"err\">←</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">map_add</span><span class=\"o\">,</span><span class=\"n\">n</span><span class=\"o\">,</span><span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">map_one</span><span class=\"o\">]</span>\n        <span class=\"o\">,</span><span class=\"n\">sorry</span><span class=\"o\">,</span>\n        <span class=\"kn\">end</span><span class=\"o\">,</span>\n        <span class=\"c1\">---          I dont understand how to use (f xob) (f yo),  i have the certicate H   :(</span>\n        <span class=\"bp\">⟩</span>\n<span class=\"kn\">end</span> <span class=\"n\">Uni_2</span>\n</pre></div>",
        "id": 190614246,
        "sender_full_name": "orlando",
        "timestamp": 1584219665
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>        <span class=\"n\">use</span> <span class=\"n\">f</span> <span class=\"n\">xob</span><span class=\"o\">,</span>\n        <span class=\"n\">use</span> <span class=\"n\">f</span> <span class=\"n\">yob</span><span class=\"o\">,</span>\n        <span class=\"n\">assumption</span><span class=\"o\">,</span>\n</pre></div>",
        "id": 190614321,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584219787
    },
    {
        "content": "<p>hey, you've come a long way recently :-)</p>",
        "id": 190614328,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584219829
    },
    {
        "content": "<p>The <code>universes u</code> thing is because this is not ZFC, they are assuming the existence of infinitely many inaccessible cardinals <em>shrug</em>. It means that category theory is easier because you don't have to keep fussing about the difference between sets and classes, but I have never really seen the point of it. You are supposed to be even more universe polymorphic and write <code>universes u v</code> and <code>{R_1 : Type u}{R_2 : Type v}</code>. But if you don't put the line at all and just write <code>{R_1 : Type}{R_2 : Type}</code> it works fine.</p>",
        "id": 190614505,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584220071
    },
    {
        "content": "<p><code>rcases ob.certificat with ⟨xob, yob, n⟩,</code> is how to get everything directly.</p>",
        "id": 190614575,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584220197
    },
    {
        "content": "<p>you're a magician <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>  !!! </p>\n<p>Ps : i will try to contruct some action of Gm on Uni_2 :-D</p>",
        "id": 190614628,
        "sender_full_name": "orlando",
        "timestamp": 1584220258
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>  : okay for universes,  an other question  : what is the difference betwen $a \\in R$ and a : R ?</p>",
        "id": 190614835,
        "sender_full_name": "orlando",
        "timestamp": 1584220615
    },
    {
        "content": "<p>Nothing really.</p>",
        "id": 190614901,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584220742
    },
    {
        "content": "<p>In set theory we say that a ring is a set R plus addition, multiplication, axioms. In type theory they say a ring is a type R plus addition, multiplication, axioms.</p>",
        "id": 190614915,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584220787
    },
    {
        "content": "<p>One difference is that in set theory, the elements of R are also sets, even though we have to remember never to ask about their elements because the elements are irrelevant. In type theory, the terms of type R are just terms, they are not types, and in particular we can't ask for their elements. If <code>r : R</code> then <code>a : r</code> doesn't make sense.</p>",
        "id": 190614958,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584220851
    },
    {
        "content": "<p>This the good part of type theory -- we think of R as a set and then we just forget that its elements are also sets, we treat them as \"atoms\". In type theory they really are atoms, so it is closer to how we think about things.</p>",
        "id": 190614969,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584220908
    },
    {
        "content": "<p>The bad part of type theory is that every term has exactly one type, so this means that the natural number 3, the integer 3, the real number 3 etc are all different 3's. The function <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">N</mi><mo>→</mo><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{N}\\to\\mathbb{Z}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">N</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">Z</span></span></span></span></span> is not the inclusion, it's the \"coercion\", and these functions are a bit annoying at first because mathematicians don't ever explicitly think about them and it takes a while to learn how to deal with them.</p>",
        "id": 190615019,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584220990
    },
    {
        "content": "<p>Ok, if a and b satisfy a b : R , you can form new type (a = b), in my example * Idem ,  'Idem'  is an example  of this type !</p>",
        "id": 190615028,
        "sender_full_name": "orlando",
        "timestamp": 1584221042
    },
    {
        "content": "<p>Oh yeah that's the other use of types. There are two universes of types: <code>Type</code> and <code>Prop</code>. The terms of type <code>Type</code> are what mathematicians think of as sets -- e.g. the reals, the p-adic numbers, a group, a manifold, whatever. The terms of type <code>Prop</code> are true-false statements e.g. the Riemann Hypothesis, the statement <code>2+2=4</code> or the statement <code>2+2=5</code>. If <code>R : Type</code> then <code>x : R</code> is what we call an element of R. If <code>P : Prop</code> then <code>h : P</code> is what we call a proof of P. So type theory can be used to unify these two ideas of sets and functions, and of true/false statements and implications. <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>P</mi><mtext>  </mtext><mo>⟹</mo><mtext>  </mtext><mi>Q</mi></mrow><annotation encoding=\"application/x-tex\">P\\implies Q</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.70733em;vertical-align:-0.024em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">P</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⟹</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\">Q</span></span></span></span> is written <code>P → Q</code> in Lean and is thought of as a function from proofs of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>P</mi></mrow><annotation encoding=\"application/x-tex\">P</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">P</span></span></span></span> to proofs of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>Q</mi></mrow><annotation encoding=\"application/x-tex\">Q</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\">Q</span></span></span></span>, which is exactly what <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>P</mi><mtext>  </mtext><mo>⟹</mo><mtext>  </mtext><mi>Q</mi></mrow><annotation encoding=\"application/x-tex\">P\\implies Q</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.70733em;vertical-align:-0.024em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">P</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⟹</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\">Q</span></span></span></span> gives you.</p>",
        "id": 190615285,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584221510
    },
    {
        "content": "<p>It's a crazy way to think about mathematics but now this is the way I think about it, and it is no different to the usual way really, it's just a different point of view.</p>",
        "id": 190615341,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584221588
    },
    {
        "content": "<p>A proof of <code>∀ n, 2 * n = n + n</code> is a function which takes as input a number <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">n</span></span></span></span>, and then as output gives a proof of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2</mn><mi>n</mi><mo>=</mo><mi>n</mi><mo>+</mo><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">2n=n+n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">n</span></span></span></span>.</p>",
        "id": 190615396,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584221646
    },
    {
        "content": "<p>Everything is a function in this world.</p>",
        "id": 190615404,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584221679
    },
    {
        "content": "<p>1/ it's really an interesting point of view. In fact (i learn this in a video), a=b is the type of proof  that a b, but if you have two proofs: p q: [a= b], you can form a new type [p=q] ect !   I have to think more about this  but I have met several times examples where it is important to pay attention to the proof of equality (to the different proof)! (i use google traductor my english is bad!)</p>\n<p>2/ the work you did on lean and mathlib is really execptional! Congratulations! It's a great project, I hope to understand a little more !</p>",
        "id": 190615699,
        "sender_full_name": "orlando",
        "timestamp": 1584222264
    },
    {
        "content": "<p>I did nothing on Lean and essentially nothing on mathlib. I absolutely agree it's exceptional. </p>\n<p>That stuff about different proofs of <code>a = b</code> is <em>not true in Lean</em>. It is true in some other systems. In Lean there is at most one proof of <code>a = b</code>. This is a very big subject, but as a mathematician I find the whole thing ridiculous.</p>",
        "id": 190615851,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584222595
    },
    {
        "content": "<p>I use Lean because it seems that this design decision makes a system which is much better for the kind of mathematics which I do.</p>",
        "id": 190615904,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584222641
    },
    {
        "content": "<p>What is your background?</p>",
        "id": 190615912,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584222675
    },
    {
        "content": "<p>I'm an algebraic number theorist in London.</p>",
        "id": 190615916,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584222689
    },
    {
        "content": "<p>Orlando, you can also have a look at <a href=\"https://leanprover-community.github.io/lean-perfectoid-spaces/type_theory.html\" target=\"_blank\" title=\"https://leanprover-community.github.io/lean-perfectoid-spaces/type_theory.html\">https://leanprover-community.github.io/lean-perfectoid-spaces/type_theory.html</a> about foundations</p>",
        "id": 190616123,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1584223076
    },
    {
        "content": "<p>I'm not an 'academic mathematician', I just wrote a thesis in the inverse  Galois problem' in 2011. Now I study mathematics for my pleasure, I do not have a great theoretical background! But I know a bit of number theory and algebraic geometry (but really little, it's complicated).</p>",
        "id": 190616163,
        "sender_full_name": "orlando",
        "timestamp": 1584223103
    },
    {
        "content": "<p>thx <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span></p>",
        "id": 190616220,
        "sender_full_name": "orlando",
        "timestamp": 1584223206
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>  : I little arithmetic joke, i have no proof …  key : Artin conductor, Serre-Deligne  … too complicated for me   <span aria-label=\"yum\" class=\"emoji emoji-1f60b\" role=\"img\" title=\"yum\">:yum:</span></p>\n<p>Let <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo>=</mo><menclose notation=\"box\"><mstyle displaystyle=\"false\" scriptlevel=\"0\"><mstyle displaystyle=\"false\" scriptlevel=\"0\"><mstyle displaystyle=\"true\" scriptlevel=\"0\"><mfrac><mrow><msubsup><mi>E</mi><mn>6</mn><mn>5</mn></msubsup><mo>+</mo><mn>7</mn><msubsup><mi>E</mi><mn>4</mn><mn>3</mn></msubsup><msubsup><mi>E</mi><mn>6</mn><mn>3</mn></msubsup><mo>−</mo><mn>8</mn><msub><mi>E</mi><mn>6</mn></msub><msubsup><mi>E</mi><mn>4</mn><mn>6</mn></msubsup></mrow><mn>15552</mn></mfrac></mstyle></mstyle></mstyle></menclose></mrow><annotation encoding=\"application/x-tex\">f = \\boxed{ \\frac{E_6^5 +7 E_4^3 E_6^3-8 E_6E_4^6}{15552}}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.857108em;vertical-align:-1.0259999999999998em;\"></span><span class=\"mord\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.8311080000000004em;\"><span style=\"top:-4.857108em;\"><span class=\"pstrut\" style=\"height:4.857108em;\"></span><span class=\"boxpad\"><span class=\"mord\"><span class=\"mord\"><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.4911079999999999em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"mord\">5</span><span class=\"mord\">5</span><span class=\"mord\">5</span><span class=\"mord\">2</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">E</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-2.4518920000000004em;margin-left:-0.05764em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">6</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">5</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.24810799999999997em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\">7</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">E</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-2.4518920000000004em;margin-left:-0.05764em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">4</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.24810799999999997em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">E</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-2.4518920000000004em;margin-left:-0.05764em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">6</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.24810799999999997em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\">8</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">E</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">6</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">E</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-2.4518920000000004em;margin-left:-0.05764em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">4</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">6</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.24810799999999997em;\"><span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span><span style=\"top:-3.8311080000000004em;\"><span class=\"pstrut\" style=\"height:4.857108em;\"></span><span class=\"stretchy fbox\" style=\"height:2.857108em;border-style:solid;border-width:0.04em;\"></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.0259999999999998em;\"><span></span></span></span></span></span></span></span></span> where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>E</mi><mn>6</mn></msub></mrow><annotation encoding=\"application/x-tex\">E_6</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">E</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">6</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>E</mi><mn>4</mn></msub></mrow><annotation encoding=\"application/x-tex\">E_4</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">E</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">4</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> are Eisenstein series :</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">sage</span><span class=\"p\">:</span> <span class=\"n\">E4</span>\n<span class=\"mi\">1</span> <span class=\"o\">+</span> <span class=\"mi\">240</span><span class=\"o\">*</span><span class=\"n\">q</span> <span class=\"o\">+</span> <span class=\"mi\">2160</span><span class=\"o\">*</span><span class=\"n\">q</span><span class=\"o\">^</span><span class=\"mi\">2</span> <span class=\"o\">+</span> <span class=\"mi\">6720</span><span class=\"o\">*</span><span class=\"n\">q</span><span class=\"o\">^</span><span class=\"mi\">3</span><span class=\"o\">+...</span>\n</pre></div>\n\n\n<p>I give you <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span></span></span></span> :</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">q</span> <span class=\"o\">-</span> <span class=\"mi\">99180</span><span class=\"o\">*</span><span class=\"n\">q</span><span class=\"o\">^</span><span class=\"mi\">3</span> <span class=\"o\">-</span> <span class=\"mi\">82300928</span><span class=\"o\">*</span><span class=\"n\">q</span><span class=\"o\">^</span><span class=\"mi\">4</span> <span class=\"o\">-</span> <span class=\"mi\">9240014250</span><span class=\"o\">*</span><span class=\"n\">q</span><span class=\"o\">^</span><span class=\"mi\">5</span> <span class=\"o\">-</span> <span class=\"mi\">250922631168</span><span class=\"o\">*</span><span class=\"n\">q</span><span class=\"o\">^</span><span class=\"mi\">6</span> <span class=\"o\">-</span> <span class=\"mi\">1803292256920</span><span class=\"o\">*</span><span class=\"n\">q</span><span class=\"o\">^</span><span class=\"mi\">7</span> <span class=\"o\">+</span> <span class=\"mi\">3927484661760</span><span class=\"o\">*</span><span class=\"n\">q</span><span class=\"o\">^</span><span class=\"mi\">8</span> <span class=\"o\">+</span> <span class=\"mi\">69888751712253</span><span class=\"o\">*</span><span class=\"n\">q</span><span class=\"o\">^</span><span class=\"mi\">9</span> <span class=\"o\">+</span> <span class=\"mi\">52730118144000</span><span class=\"o\">*</span><span class=\"n\">q</span><span class=\"o\">^</span><span class=\"mi\">10</span> <span class=\"o\">-</span> <span class=\"mi\">1073448094642308</span><span class=\"o\">*</span><span class=\"n\">q</span><span class=\"o\">^</span><span class=\"mi\">11</span> <span class=\"o\">-</span> <span class=\"mi\">2159808927252480</span><span class=\"o\">*</span><span class=\"n\">q</span><span class=\"o\">^</span><span class=\"mi\">12</span> <span class=\"o\">+</span> <span class=\"mi\">8077328528018750</span><span class=\"o\">*</span><span class=\"n\">q</span><span class=\"o\">^</span><span class=\"mi\">13</span> <span class=\"o\">+</span> <span class=\"mi\">30845089913831424</span><span class=\"o\">*</span><span class=\"n\">q</span><span class=\"o\">^</span><span class=\"mi\">14</span> <span class=\"o\">-</span> <span class=\"mi\">28190600602173000</span><span class=\"o\">*</span><span class=\"n\">q</span><span class=\"o\">^</span><span class=\"mi\">15</span> <span class=\"o\">-</span> <span class=\"mi\">203338491650637824</span><span class=\"o\">*</span><span class=\"n\">q</span><span class=\"o\">^</span><span class=\"mi\">16</span> <span class=\"o\">-</span> <span class=\"mi\">249926961314852910</span><span class=\"o\">*</span><span class=\"n\">q</span><span class=\"o\">^</span><span class=\"mi\">17</span>\n</pre></div>\n\n\n<p>Denote by <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>a</mi><mi>n</mi></msub></mrow><annotation encoding=\"application/x-tex\">a_n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> the coefficient of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span></span></span></span> and  let <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>P</mi><mo>=</mo><msup><mi>x</mi><mn>3</mn></msup><mo>−</mo><mn>3</mn><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><mn>11</mn><mi>x</mi><mo>−</mo><mn>17</mn><mo>∈</mo><mi mathvariant=\"double-struck\">Z</mi><mo stretchy=\"false\">[</mo><mi>x</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">P = x^3 - 3x^2 + 11x - 17 \\in \\mathbb{\\Z}[x]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">P</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.897438em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.897438em;vertical-align:-0.08333em;\"></span><span class=\"mord\">3</span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">1</span><span class=\"mord\">1</span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68354em;vertical-align:-0.0391em;\"></span><span class=\"mord\">1</span><span class=\"mord\">7</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbb\">Z</span></span></span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">]</span></span></span></span>. </p>\n<p>We have : forall prime <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">p</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\">p</span></span></span></span> :  <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><menclose notation=\"box\"><mstyle displaystyle=\"false\" scriptlevel=\"0\"><mstyle displaystyle=\"false\" scriptlevel=\"0\"><mstyle displaystyle=\"true\" scriptlevel=\"0\"><mrow><msub><mi>a</mi><mi>p</mi></msub><mo>=</mo><msub><mi>N</mi><mi>p</mi></msub><mo>−</mo><mn>1</mn><mspace></mspace><mspace width=\"1em\"></mspace><mo stretchy=\"false\">(</mo><mrow><mi mathvariant=\"normal\">m</mi><mi mathvariant=\"normal\">o</mi><mi mathvariant=\"normal\">d</mi></mrow><mspace width=\"0.3333333333333333em\"></mspace><mn>59</mn><mo stretchy=\"false\">)</mo></mrow></mstyle></mstyle></mstyle></menclose></mrow><annotation encoding=\"application/x-tex\"> \\boxed{ a_p = N_p-1 \\pmod{59} }</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.716108em;vertical-align:-0.6261079999999999em;\"></span><span class=\"mord\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.09em;\"><span style=\"top:-3.716108em;\"><span class=\"pstrut\" style=\"height:3.716108em;\"></span><span class=\"boxpad\"><span class=\"mord\"><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139200000000003em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">p</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">N</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139200000000003em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">p</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\">1</span><span class=\"mspace allowbreak\"></span><span class=\"mspace\" style=\"margin-right:1em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathrm\">m</span><span class=\"mord mathrm\">o</span><span class=\"mord mathrm\">d</span></span></span><span class=\"mspace\" style=\"margin-right:0.3333333333333333em;\"></span><span class=\"mord\">5</span><span class=\"mord\">9</span><span class=\"mclose\">)</span></span></span></span></span><span style=\"top:-3.0900000000000003em;\"><span class=\"pstrut\" style=\"height:3.716108em;\"></span><span class=\"stretchy fbox\" style=\"height:1.716108em;border-style:solid;border-width:0.04em;\"></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6261079999999999em;\"><span></span></span></span></span></span></span></span></span> where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>N</mi><mi>p</mi></msub></mrow><annotation encoding=\"application/x-tex\">N_p</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.969438em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">N</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139200000000003em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">p</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span></span></span></span> is the Numbers of roots of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>P</mi></mrow><annotation encoding=\"application/x-tex\">P</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">P</span></span></span></span> in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"double-struck\">F</mi><mi>p</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\mathbb{F}_p</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.974998em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbb\">F</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139200000000003em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">p</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span></span></span></span> ! </p>\n<p>Exemple :  we have <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>a</mi><mn>17</mn></msub><mo>=</mo><mo>−</mo><mn>249926961314852910</mn><mo>=</mo><mn>2</mn><mspace></mspace><mspace width=\"0.4444444444444444em\"></mspace><mo stretchy=\"false\">(</mo><mrow><mi mathvariant=\"normal\">m</mi><mi mathvariant=\"normal\">o</mi><mi mathvariant=\"normal\">d</mi></mrow><mspace width=\"0.3333333333333333em\"></mspace><mn>59</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">a_{17} =  - 249926961314852910 = 2 \\pmod{59}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"mord mtight\">7</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">−</span><span class=\"mord\">2</span><span class=\"mord\">4</span><span class=\"mord\">9</span><span class=\"mord\">9</span><span class=\"mord\">2</span><span class=\"mord\">6</span><span class=\"mord\">9</span><span class=\"mord\">6</span><span class=\"mord\">1</span><span class=\"mord\">3</span><span class=\"mord\">1</span><span class=\"mord\">4</span><span class=\"mord\">8</span><span class=\"mord\">5</span><span class=\"mord\">2</span><span class=\"mord\">9</span><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span><span class=\"mspace allowbreak\"></span><span class=\"mspace\" style=\"margin-right:0.4444444444444444em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathrm\">m</span><span class=\"mord mathrm\">o</span><span class=\"mord mathrm\">d</span></span></span><span class=\"mspace\" style=\"margin-right:0.3333333333333333em;\"></span><span class=\"mord\">5</span><span class=\"mord\">9</span><span class=\"mclose\">)</span></span></span></span>  so three root for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>P</mi><mspace></mspace><mspace width=\"0.4444444444444444em\"></mspace><mo stretchy=\"false\">(</mo><mrow><mi mathvariant=\"normal\">m</mi><mi mathvariant=\"normal\">o</mi><mi mathvariant=\"normal\">d</mi></mrow><mspace width=\"0.3333333333333333em\"></mspace><mn>17</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">P \\pmod{17}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">P</span><span class=\"mspace allowbreak\"></span><span class=\"mspace\" style=\"margin-right:0.4444444444444444em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathrm\">m</span><span class=\"mord mathrm\">o</span><span class=\"mord mathrm\">d</span></span></span><span class=\"mspace\" style=\"margin-right:0.3333333333333333em;\"></span><span class=\"mord\">1</span><span class=\"mord\">7</span><span class=\"mclose\">)</span></span></span></span> ! </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">sage</span><span class=\"p\">:</span> <span class=\"n\">g</span>\n<span class=\"n\">x</span><span class=\"o\">^</span><span class=\"mi\">3</span> <span class=\"o\">-</span> <span class=\"mi\">3</span><span class=\"o\">*</span><span class=\"n\">x</span><span class=\"o\">^</span><span class=\"mi\">2</span> <span class=\"o\">+</span> <span class=\"mi\">11</span><span class=\"o\">*</span><span class=\"n\">x</span> <span class=\"o\">-</span> <span class=\"mi\">17</span>\n<span class=\"n\">sage</span><span class=\"p\">:</span> <span class=\"n\">p</span>\n<span class=\"mi\">17</span>\n<span class=\"n\">sage</span><span class=\"p\">:</span> <span class=\"n\">g</span><span class=\"o\">.</span><span class=\"n\">factor_mod</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">)</span>\n<span class=\"n\">x</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"mi\">5</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"mi\">9</span><span class=\"p\">)</span>\n</pre></div>\n\n\n<p>Good night !</p>",
        "id": 190620161,
        "sender_full_name": "orlando",
        "timestamp": 1584228835
    },
    {
        "content": "<p>What you say isn't true for p=2 (the discriminant of the polynomial is a multiple of 2, even though the discriminant of the field it generates is not) and it may or may not be true for p=59 (one would have to do an explicit check). For all other primes <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">p</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\">p</span></span></span></span> one can argue as follows: the space of level 1 weight 30 cusp forms is 2-dimensional and <a href=\"https://www.lmfdb.org/ModularForm/GL2/Q/holomorphic/1/30/a/a/\" target=\"_blank\" title=\"https://www.lmfdb.org/ModularForm/GL2/Q/holomorphic/1/30/a/a/\">the basis of eigenforms</a> is a pair of Galois conjugate forms defined over <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Q</mi><mo stretchy=\"false\">(</mo><msqrt><mn>51349</mn></msqrt><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Q}(\\sqrt{51349})</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1572200000000001em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">Q</span></span><span class=\"mopen\">(</span><span class=\"mord sqrt\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.90722em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\" style=\"padding-left:0.833em;\"><span class=\"mord\">5</span><span class=\"mord\">1</span><span class=\"mord\">3</span><span class=\"mord\">4</span><span class=\"mord\">9</span></span></span><span style=\"top:-2.86722em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg height=\"1.08em\" preserveAspectRatio=\"xMinYMin slice\" viewBox=\"0 0 400000 1080\" width=\"400em\"><path d=\"M95,702 c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14 c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54 c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10 s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429 c69,-144,104.5,-217.7,106.5,-221 l0 -0 c5.3,-9.3,12,-14,20,-14 H400000v40H845.2724 s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7 c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z M834 80h400000v40h-400000z\"></path></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.13278em;\"><span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>. One checks that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>59</mn></mrow><annotation encoding=\"application/x-tex\">59</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">5</span><span class=\"mord\">9</span></span></span></span> splits in this field (<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><msup><mn>4</mn><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">14^2</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">4</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span> is congruent to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>51349</mn></mrow><annotation encoding=\"application/x-tex\">51349</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">5</span><span class=\"mord\">1</span><span class=\"mord\">3</span><span class=\"mord\">4</span><span class=\"mord\">9</span></span></span></span> mod <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>59</mn></mrow><annotation encoding=\"application/x-tex\">59</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">5</span><span class=\"mord\">9</span></span></span></span>), so there are two mod 59 Galois representations attached to this form. With notation as in the LMFDB link, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>β</mi></mrow><annotation encoding=\"application/x-tex\">\\beta</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05278em;\">β</span></span></span></span> is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>96</mn><msqrt><mn>51349</mn></msqrt></mrow><annotation encoding=\"application/x-tex\">96\\sqrt{51349}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.04em;vertical-align:-0.13278em;\"></span><span class=\"mord\">9</span><span class=\"mord\">6</span><span class=\"mord sqrt\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.90722em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\" style=\"padding-left:0.833em;\"><span class=\"mord\">5</span><span class=\"mord\">1</span><span class=\"mord\">3</span><span class=\"mord\">4</span><span class=\"mord\">9</span></span></span><span style=\"top:-2.86722em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg height=\"1.08em\" preserveAspectRatio=\"xMinYMin slice\" viewBox=\"0 0 400000 1080\" width=\"400em\"><path d=\"M95,702 c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14 c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54 c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10 s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429 c69,-144,104.5,-217.7,106.5,-221 l0 -0 c5.3,-9.3,12,-14,20,-14 H400000v40H845.2724 s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7 c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z M834 80h400000v40h-400000z\"></path></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.13278em;\"><span></span></span></span></span></span></span></span></span> is congruent to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>±</mo><mn>46</mn></mrow><annotation encoding=\"application/x-tex\">\\pm46</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">±</span><span class=\"mord\">4</span><span class=\"mord\">6</span></span></span></span> and setting <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>β</mi><mo>=</mo><mo>−</mo><mn>46</mn></mrow><annotation encoding=\"application/x-tex\">\\beta=-46</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05278em;\">β</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">−</span><span class=\"mord\">4</span><span class=\"mord\">6</span></span></span></span> mod 59 shows that one 59 specialisation of the eigenform is precisely mod 59 reduction of the form you write down (the coefficients agree for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>q</mi><mi>i</mi></msup></mrow><annotation encoding=\"application/x-tex\">q^i</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.019104em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.824664em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span></span></span></span></span></span></span></span>  for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi><mo>≤</mo><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">i\\leq2</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.79549em;vertical-align:-0.13597em;\"></span><span class=\"mord mathdefault\">i</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span></span></span></span> and this is enough). The splitting field of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>P</mi></mrow><annotation encoding=\"application/x-tex\">P</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">P</span></span></span></span> is unramified outside of 59 and has Galois group <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>S</mi><mn>3</mn></msub></mrow><annotation encoding=\"application/x-tex\">S_3</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>, and your claim (for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi><mo>≠</mo><mn>2</mn><mo separator=\"true\">,</mo><mn>59</mn></mrow><annotation encoding=\"application/x-tex\">p\\not=2,59</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\">p</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\"><span class=\"mord\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.69444em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"rlap\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"inner\"><span class=\"mrel\"></span></span><span class=\"fix\"></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.19444em;\"><span></span></span></span></span></span></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8388800000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord\">2</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">5</span><span class=\"mord\">9</span></span></span></span>) follows from the claim that the mod 59 Galois representation attached to the eigenform (corresponding to the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"fraktur\">p</mi></mrow><annotation encoding=\"application/x-tex\">\\mathfrak{p}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.71302em;vertical-align:-0.18906em;\"></span><span class=\"mord\"><span class=\"mord mathfrak\">p</span></span></span></span></span>-adic place above <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Q</mi><mo stretchy=\"false\">(</mo><msqrt><mn>51349</mn></msqrt><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Q}(\\sqrt{51349})</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1572200000000001em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">Q</span></span><span class=\"mopen\">(</span><span class=\"mord sqrt\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.90722em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\" style=\"padding-left:0.833em;\"><span class=\"mord\">5</span><span class=\"mord\">1</span><span class=\"mord\">3</span><span class=\"mord\">4</span><span class=\"mord\">9</span></span></span><span style=\"top:-2.86722em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg height=\"1.08em\" preserveAspectRatio=\"xMinYMin slice\" viewBox=\"0 0 400000 1080\" width=\"400em\"><path d=\"M95,702 c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14 c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54 c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10 s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429 c69,-144,104.5,-217.7,106.5,-221 l0 -0 c5.3,-9.3,12,-14,20,-14 H400000v40H845.2724 s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7 c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z M834 80h400000v40h-400000z\"></path></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.13278em;\"><span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>β</mi><mo>≡</mo><mo>−</mo><mn>46</mn></mrow><annotation encoding=\"application/x-tex\">\\beta\\equiv-46</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05278em;\">β</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≡</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">−</span><span class=\"mord\">4</span><span class=\"mord\">6</span></span></span></span>) has image precisely <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>S</mi><mn>3</mn></msub></mrow><annotation encoding=\"application/x-tex\">S_3</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>. Note that the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi><mo>−</mo><mn>1</mn><mo>=</mo><mn>29</mn></mrow><annotation encoding=\"application/x-tex\">k-1=29</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.77777em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span><span class=\"mord\">9</span></span></span></span>'th power of the mod 59 cyclotomic character is the quadratic character corresponding to the quadratic subfield of the splitting field of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>P</mi></mrow><annotation encoding=\"application/x-tex\">P</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">P</span></span></span></span> so all the numerics check out. The <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>S</mi><mn>3</mn></msub></mrow><annotation encoding=\"application/x-tex\">S_3</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> representation is modular, coming from a weight 1 cusp form, and some standard level and weight optimisation shows that there is a mod 59 representation of level 1 and weight 30 corresponding to the representation; it suffices to prove that this is our mod 59 eigenform, but it must be one of the two eigenforms so again you can check which one it is by writing down the power series to enough terms, and indeed you already did that. So done :-)</p>",
        "id": 190636196,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584259646
    },
    {
        "content": "<p>Ok, thx Kevin , for the prime <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">2</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span></span></span></span> (my bad), This is really  crazy arithmetic <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span>  Yes i write down the series and do computation and also the trick <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>30</mn><mo>−</mo><mn>1</mn><mo>=</mo><mfrac><mrow><mn>59</mn><mo>−</mo><mn>1</mn></mrow><mn>2</mn></mfrac></mrow><annotation encoding=\"application/x-tex\">30 -1= \\frac{59-1}{2}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">3</span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.190108em;vertical-align:-0.345em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.845108em;\"><span style=\"top:-2.6550000000000002em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">5</span><span class=\"mord mtight\">9</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span> <span aria-label=\"innocent\" class=\"emoji emoji-1f607\" role=\"img\" title=\"innocent\">:innocent:</span>   But this is really deep mathematics !!!  My example is just a baby-instance and i can't go further !</p>",
        "id": 190642441,
        "sender_full_name": "orlando",
        "timestamp": 1584271184
    },
    {
        "content": "<p>Hello, </p>\n<p>i have 2 little question : </p>\n<ol>\n<li>\n<p>it's possible to create a functor from Ring to Ring ! that send  <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi><mo stretchy=\"false\">[</mo><mi>X</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">R[X]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose\">]</span></span></span></span> ?  </p>\n</li>\n<li>\n<p>Is there a structure of commutative ring for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi><mo stretchy=\"false\">[</mo><mi>X</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\"> R[X] </annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose\">]</span></span></span></span> (in lean)  Where $R$ is a commutative Ring ? </p>\n</li>\n</ol>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">ring</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">polynomial</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">category</span><span class=\"bp\">.</span><span class=\"n\">CommRing</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span>\n<span class=\"kn\">open</span> <span class=\"n\">functor</span>\n<span class=\"kn\">open</span> <span class=\"n\">CommRing</span>\n<span class=\"kn\">open</span> <span class=\"n\">polynomial</span>\n<span class=\"n\">universes</span>  <span class=\"n\">v</span> <span class=\"n\">u</span>\n<span class=\"n\">local</span> <span class=\"kn\">notation</span> <span class=\"bp\">`</span><span class=\"n\">Ring</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">CommRing</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span>\n<span class=\"n\">local</span> <span class=\"kn\">notation</span> <span class=\"bp\">`</span><span class=\"n\">Set</span><span class=\"bp\">`</span> <span class=\"o\">:=</span>  <span class=\"kt\">Type</span> <span class=\"n\">u</span>               <span class=\"bp\">-</span>\n\n\n<span class=\"n\">def</span> <span class=\"n\">poly</span> <span class=\"o\">:</span>  <span class=\"n\">Ring</span>  <span class=\"err\">⥤</span>  <span class=\"n\">Set</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span>   <span class=\"bp\">λ</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">Ring</span><span class=\"o\">,</span> <span class=\"n\">polynomial</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n  <span class=\"n\">map</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span><span class=\"o\">(</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">Ring</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"err\">⟶</span> <span class=\"n\">β</span><span class=\"o\">),</span>   <span class=\"n\">polynomial</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n<span class=\"o\">}</span>\n\n<span class=\"o\">(</span><span class=\"n\">deterministic</span><span class=\"o\">)</span> <span class=\"n\">timeout</span>\n</pre></div>",
        "id": 190664946,
        "sender_full_name": "orlando",
        "timestamp": 1584303353
    },
    {
        "content": "<p>Lean does a lot of stuff without using the category theory language. The construction is called <code>polynomial</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">polynomial</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">comm_ring</span> <span class=\"o\">(</span><span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span>\n</pre></div>\n\n\n<p>The import gives you a function <code>polynomial</code> which eats a type and returns a new type. The example shows that if the type it eats is known by the typeclass system to have a ring structure, then the output type also gets a ring structure.</p>",
        "id": 190665976,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584304849
    },
    {
        "content": "<p>Thx Kevin, </p>\n<p>i have to stop a couple a day, i will go back next week, have fun and thx again for all !</p>",
        "id": 190712990,
        "sender_full_name": "orlando",
        "timestamp": 1584360636
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>  <br>\nI can't move cause @corona bidule !!!</p>\n<p>So I try to explain my goal in the middle of the file ! (Hard computation for the moment, but i want to simplify all) ! </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">ring</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">ring_exp</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">category</span><span class=\"bp\">.</span><span class=\"n\">CommRing</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">CommRing</span>\n\n<span class=\"n\">universes</span> <span class=\"n\">v</span> <span class=\"n\">u</span>\n<span class=\"n\">local</span> <span class=\"kn\">notation</span> <span class=\"bp\">`</span> <span class=\"n\">Ring</span> <span class=\"bp\">`</span>     <span class=\"o\">:=</span>    <span class=\"n\">CommRing</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span>\n<span class=\"n\">local</span> <span class=\"kn\">notation</span> <span class=\"bp\">`</span> <span class=\"n\">Set</span>  <span class=\"bp\">`</span>     <span class=\"o\">:=</span>    <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n\n<span class=\"c1\">---          study of co-maximal familly ! I do the job why two elements for the moment  !</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">co_maxi</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"o\">]</span>\n\n<span class=\"n\">def</span> <span class=\"n\">co_max</span>  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>   <span class=\"o\">:=</span>\n             <span class=\"bp\">∃</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"o\">:</span>  <span class=\"n\">R</span><span class=\"o\">,</span>    <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">v</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n\n<span class=\"n\">local</span> <span class=\"kn\">infix</span>     <span class=\"err\">⊥</span>  <span class=\"o\">:=</span>  <span class=\"n\">co_max</span> <span class=\"n\">R</span>   <span class=\"c1\">--- notation</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">one_perp</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span>    <span class=\"o\">:</span>  <span class=\"mi\">1</span> <span class=\"err\">⊥</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>   <span class=\"c1\">--- with 1 * 1 + a * 0 = 1</span>\n<span class=\"k\">begin</span>\n    <span class=\"k\">have</span> <span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">one_mul</span><span class=\"o\">,</span><span class=\"n\">mul_zero</span><span class=\"o\">,</span><span class=\"n\">add_zero</span><span class=\"o\">],</span>\n    <span class=\"n\">use</span> <span class=\"bp\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"n\">h</span><span class=\"bp\">⟩</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">symm</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"err\">⊥</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">→</span>  <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"err\">⊥</span> <span class=\"n\">a</span><span class=\"o\">)</span>  <span class=\"o\">:=</span>   <span class=\"c1\">--- a u + b v = 1 → b v + a u = 1</span>\n    <span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">u</span><span class=\"o\">,</span><span class=\"n\">v</span><span class=\"o\">,</span><span class=\"n\">k</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n        <span class=\"k\">begin</span>\n            <span class=\"k\">have</span>  <span class=\"n\">t</span> <span class=\"o\">:</span>  <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">v</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">u</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n                <span class=\"n\">rw</span> <span class=\"n\">add_comm</span><span class=\"o\">,</span>  <span class=\"n\">assumption</span><span class=\"o\">,</span>\n            <span class=\"n\">use</span> <span class=\"bp\">⟨</span><span class=\"n\">v</span><span class=\"o\">,</span><span class=\"n\">u</span><span class=\"o\">,</span><span class=\"n\">t</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n        <span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">abab_trick</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"err\">⊥</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"err\">⊥</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"err\">⊥</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>    <span class=\"c1\">---  Trick to simplify proof !  if a ⊥ c and b ⊥ c then ab ⊥ c  from calculus !</span>\n    <span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">ua</span><span class=\"o\">,</span><span class=\"n\">va</span><span class=\"o\">,</span><span class=\"n\">ka</span><span class=\"bp\">⟩</span>  <span class=\"bp\">⟨</span><span class=\"n\">ub</span><span class=\"o\">,</span><span class=\"n\">vb</span><span class=\"o\">,</span><span class=\"n\">kb</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n        <span class=\"k\">begin</span>\n            <span class=\"k\">have</span> <span class=\"n\">J</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span> <span class=\"n\">ua</span> <span class=\"bp\">*</span> <span class=\"n\">ub</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"o\">(</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">ua</span> <span class=\"bp\">*</span> <span class=\"n\">vb</span> <span class=\"bp\">+</span> <span class=\"n\">va</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">ub</span> <span class=\"bp\">+</span> <span class=\"n\">va</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">vb</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n                 <span class=\"k\">by</span> <span class=\"k\">calc</span>\n                    <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span> <span class=\"n\">ua</span> <span class=\"bp\">*</span> <span class=\"n\">ub</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"o\">(</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">ua</span> <span class=\"bp\">*</span> <span class=\"n\">vb</span> <span class=\"bp\">+</span> <span class=\"n\">va</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">ub</span> <span class=\"bp\">+</span> <span class=\"n\">va</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">vb</span><span class=\"o\">)</span>  <span class=\"bp\">=</span>  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">ua</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">va</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">ub</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">vb</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">ring_exp</span>\n                    <span class=\"bp\">...</span>                                                                    <span class=\"bp\">=</span>   <span class=\"mi\">1</span>                                    <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ka</span><span class=\"o\">,</span><span class=\"n\">kb</span><span class=\"o\">,</span> <span class=\"n\">one_mul</span><span class=\"o\">],</span>\n        <span class=\"n\">use</span> <span class=\"bp\">⟨</span> <span class=\"n\">ua</span> <span class=\"bp\">*</span> <span class=\"n\">ub</span><span class=\"o\">,</span>  <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">ua</span> <span class=\"bp\">*</span> <span class=\"n\">vb</span> <span class=\"bp\">+</span> <span class=\"n\">va</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">ub</span> <span class=\"bp\">+</span> <span class=\"n\">va</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">vb</span> <span class=\"o\">,</span> <span class=\"n\">J</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n        <span class=\"kn\">end</span>\n<span class=\"c1\">---- We do the big calculus, now is trivial induction !</span>\n<span class=\"c1\">---- for exemple a ⊥ c →  a^2 ⊥ c  using abab_trick a a c !  induction ...</span>\n<span class=\"kn\">open</span> <span class=\"n\">nat</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">star</span> <span class=\"o\">(</span><span class=\"n\">a</span>  <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">):</span>   <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"err\">⊥</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">((</span><span class=\"n\">a</span><span class=\"err\">^</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"err\">⊥</span> <span class=\"n\">b</span><span class=\"o\">)</span>  <span class=\"o\">:=</span>\n    <span class=\"bp\">λ</span> <span class=\"n\">u</span><span class=\"o\">,</span>\n        <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">n</span>\n                <span class=\"o\">(</span><span class=\"k\">show</span>  <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"err\">^</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"err\">⊥</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">pow_zero</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">one_perp</span><span class=\"o\">,</span> <span class=\"o\">})</span>\n                <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"k\">assume</span> <span class=\"n\">re</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">a</span><span class=\"err\">^</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"err\">⊥</span> <span class=\"n\">b</span><span class=\"o\">),</span> <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"err\">^</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"err\">⊥</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n                       <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">pow_succ</span> <span class=\"n\">a</span> <span class=\"n\">n</span><span class=\"o\">,</span><span class=\"n\">apply</span> <span class=\"n\">abab_trick</span><span class=\"o\">,</span> <span class=\"n\">assumption</span><span class=\"o\">,</span><span class=\"n\">assumption</span><span class=\"o\">})</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">My_favorite_localisation_lemma</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"err\">⊥</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"err\">^</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"err\">⊥</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"err\">^</span><span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:=</span>                 <span class=\"c1\">--- the goals</span>\n    <span class=\"bp\">λ</span> <span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"k\">begin</span>\n        <span class=\"n\">apply</span> <span class=\"n\">star</span><span class=\"o\">,</span>\n        <span class=\"n\">apply</span> <span class=\"n\">symm</span><span class=\"o\">,</span>    <span class=\"c1\">-- is there a repeat method ? How to programme such method ?</span>\n        <span class=\"n\">apply</span> <span class=\"n\">star</span><span class=\"o\">,</span>\n        <span class=\"n\">apply</span> <span class=\"n\">symm</span><span class=\"o\">,</span>\n        <span class=\"n\">assumption</span><span class=\"o\">,</span>\n    <span class=\"kn\">end</span>\n<span class=\"c1\">----</span>\n<span class=\"c1\">---     We want to proof 𝔸 is a local functor : a scheaf for global Zariski for Affᵒᵖ.</span>\n<span class=\"c1\">----   ( Note 𝔸 is structural for Ring so if you do the job for 𝔸 you do the job for all ring i.e Spec R := Hom(R,•) is a scheme (in sense of functorial geometry)</span>\n<span class=\"c1\">---    (ref Jantzen : &#39;algebraic group and representation&#39; the first chapter) for all ring R : i can explain) !</span>\n<span class=\"c1\">---                 for the moment only with 2-covering famillies</span>\n<span class=\"c1\">---     There is two axioms :</span>\n<span class=\"c1\">---             1/ Separation : (for two elements ONLY)</span>\n<span class=\"c1\">---                      let R : comm_ring</span>\n<span class=\"c1\">---                      Let f,g ∈ R :  f ⊥ g.</span>\n<span class=\"c1\">---                      Let a ∈ R :</span>\n<span class=\"c1\">---                             ∃ m n : ℕ,  f^m a = 0 ∧  g^n a = 0   --- i.e a = 0 in localisation  {f^k k ∈ N⋆} and   {g^k k ∈ N⋆}</span>\n<span class=\"c1\">---                      Since f ⊥ g , we have f^m ⊥ b^n</span>\n<span class=\"c1\">---                      Have (u,v) s.t   f^m u + g^n v = 1</span>\n<span class=\"c1\">---                      multipliying by a give f^m au  + g^n a v = a  so 0 = a !</span>\n<span class=\"c1\">---    Note : i don&#39;t use Localisation library for the moment (i have to study) !</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">Separation_axiom</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"err\">⊥</span> <span class=\"n\">g</span> <span class=\"bp\">→</span> <span class=\"o\">(</span> <span class=\"bp\">∃</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"err\">^</span><span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">g</span><span class=\"err\">^</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">)</span>   <span class=\"bp\">→</span>   <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>  <span class=\"o\">:=</span>  <span class=\"bp\">λ</span> <span class=\"n\">certif</span>  <span class=\"bp\">⟨</span><span class=\"n\">m</span><span class=\"o\">,</span><span class=\"n\">n</span><span class=\"o\">,</span><span class=\"k\">proof</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n<span class=\"k\">begin</span>\n    <span class=\"k\">have</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"err\">^</span><span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"err\">⊥</span> <span class=\"o\">(</span><span class=\"n\">g</span><span class=\"err\">^</span><span class=\"n\">n</span><span class=\"o\">),</span>\n        <span class=\"n\">apply</span> <span class=\"n\">My_favorite_localisation_lemma</span><span class=\"o\">,</span>\n        <span class=\"n\">assumption</span><span class=\"o\">,</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">H</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span><span class=\"n\">ua</span><span class=\"o\">,</span><span class=\"n\">va</span><span class=\"o\">,</span><span class=\"n\">ka</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n        <span class=\"n\">apply</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span>\n        <span class=\"k\">have</span> <span class=\"n\">H</span> <span class=\"o\">:</span>  <span class=\"mi\">0</span>  <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"err\">^</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"bp\">*</span> <span class=\"n\">ua</span>  <span class=\"bp\">+</span>  <span class=\"n\">g</span> <span class=\"err\">^</span> <span class=\"n\">n</span> <span class=\"bp\">*</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">va</span><span class=\"o\">),</span>\n            <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"k\">proof</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"k\">proof</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">],</span>\n            <span class=\"n\">apply</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span>\n            <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">zero_mul</span><span class=\"o\">,</span><span class=\"n\">zero_mul</span><span class=\"o\">,</span><span class=\"n\">add_zero</span><span class=\"o\">],</span>\n        <span class=\"k\">have</span> <span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"err\">^</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"bp\">*</span> <span class=\"n\">ua</span>  <span class=\"bp\">+</span>  <span class=\"n\">g</span> <span class=\"err\">^</span> <span class=\"n\">n</span> <span class=\"bp\">*</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">va</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"err\">^</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">ua</span>  <span class=\"bp\">+</span>  <span class=\"n\">g</span> <span class=\"err\">^</span> <span class=\"n\">n</span>  <span class=\"bp\">*</span> <span class=\"n\">va</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n        <span class=\"n\">ring</span><span class=\"o\">,</span>\n        <span class=\"n\">rewrite</span> <span class=\"o\">[</span><span class=\"n\">H</span><span class=\"o\">,</span><span class=\"n\">G</span><span class=\"o\">,</span><span class=\"n\">ka</span><span class=\"o\">,</span><span class=\"n\">one_mul</span> <span class=\"n\">a</span><span class=\"o\">],</span>\n<span class=\"kn\">end</span>\n<span class=\"c1\">---   Gluing_axiome :</span>\n<span class=\"c1\">---</span>\n<span class=\"kn\">set_option</span> <span class=\"n\">class</span><span class=\"bp\">.</span><span class=\"n\">instance_max_depth</span> <span class=\"mi\">20</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">gluing_data</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)(</span><span class=\"n\">s_f</span> <span class=\"n\">s_g</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n         <span class=\"n\">f</span> <span class=\"err\">⊥</span> <span class=\"n\">g</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"err\">^</span><span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">g</span><span class=\"err\">^</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">s_f</span> <span class=\"bp\">=</span> <span class=\"n\">g</span><span class=\"err\">^</span><span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">f</span><span class=\"err\">^</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">s_g</span><span class=\"o\">)</span> <span class=\"bp\">→</span>  <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">N_f</span> <span class=\"n\">N_g</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"err\">^</span><span class=\"o\">(</span><span class=\"n\">N_f</span><span class=\"bp\">+</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">f</span><span class=\"err\">^</span><span class=\"n\">N_f</span> <span class=\"bp\">*</span> <span class=\"n\">s_f</span> <span class=\"bp\">∧</span>  <span class=\"n\">g</span><span class=\"err\">^</span><span class=\"o\">(</span><span class=\"n\">N_g</span><span class=\"bp\">+</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">g</span><span class=\"err\">^</span><span class=\"n\">N_g</span> <span class=\"bp\">*</span> <span class=\"n\">s_g</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n         <span class=\"bp\">λ</span> <span class=\"n\">certif</span> <span class=\"bp\">⟨</span><span class=\"n\">m</span><span class=\"o\">,</span><span class=\"n\">proof_m</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"k\">begin</span>\n            <span class=\"k\">have</span> <span class=\"n\">H</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"err\">^</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"n\">m</span><span class=\"o\">))</span> <span class=\"err\">⊥</span> <span class=\"o\">(</span><span class=\"n\">g</span><span class=\"err\">^</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"n\">m</span><span class=\"o\">)),</span>\n                <span class=\"n\">apply</span> <span class=\"n\">My_favorite_localisation_lemma</span><span class=\"o\">,</span>\n                <span class=\"n\">assumption</span><span class=\"o\">,</span>\n            <span class=\"n\">rcases</span> <span class=\"n\">H</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span><span class=\"n\">vf</span><span class=\"o\">,</span><span class=\"n\">vg</span><span class=\"o\">,</span><span class=\"n\">proof_n_plus_m_f_g</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n            <span class=\"n\">existsi</span> <span class=\"o\">[</span><span class=\"n\">vf</span> <span class=\"bp\">*</span><span class=\"n\">s_f</span> <span class=\"bp\">*</span> <span class=\"n\">f</span><span class=\"err\">^</span><span class=\"n\">m</span><span class=\"bp\">+</span> <span class=\"n\">vg</span><span class=\"bp\">*</span><span class=\"n\">s_g</span><span class=\"bp\">*</span><span class=\"n\">g</span><span class=\"err\">^</span><span class=\"n\">m</span><span class=\"o\">,</span><span class=\"n\">m</span><span class=\"o\">,</span><span class=\"n\">m</span><span class=\"o\">],</span>\n                <span class=\"n\">split</span><span class=\"o\">,</span>\n                    <span class=\"k\">have</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"err\">^</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">vf</span> <span class=\"bp\">*</span> <span class=\"n\">s_f</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"err\">^</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">vg</span> <span class=\"bp\">*</span> <span class=\"n\">s_g</span> <span class=\"bp\">*</span> <span class=\"n\">g</span> <span class=\"err\">^</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">=</span>   <span class=\"o\">(</span> <span class=\"n\">f</span> <span class=\"err\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">)</span><span class=\"bp\">*</span> <span class=\"n\">vf</span> <span class=\"bp\">*</span> <span class=\"n\">s_f</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"err\">^</span> <span class=\"n\">m</span> <span class=\"bp\">+</span>  <span class=\"n\">g</span> <span class=\"err\">^</span> <span class=\"n\">m</span> <span class=\"bp\">*</span><span class=\"n\">f</span> <span class=\"err\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">*</span><span class=\"n\">s_g</span> <span class=\"bp\">*</span> <span class=\"n\">vg</span><span class=\"o\">),</span>\n                        <span class=\"n\">ring_exp</span><span class=\"o\">,</span>\n                        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">H</span><span class=\"o\">,</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"n\">proof_m</span><span class=\"o\">],</span>\n                            <span class=\"k\">have</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"err\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">vf</span> <span class=\"bp\">*</span> <span class=\"n\">s_f</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"err\">^</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"err\">^</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">g</span> <span class=\"err\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">s_f</span> <span class=\"bp\">*</span> <span class=\"n\">vg</span> <span class=\"bp\">=</span> <span class=\"n\">f</span><span class=\"err\">^</span><span class=\"n\">m</span> <span class=\"bp\">*</span><span class=\"n\">s_f</span> <span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"err\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">vf</span> <span class=\"bp\">+</span> <span class=\"n\">g</span> <span class=\"err\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">vg</span><span class=\"o\">),</span>\n                            <span class=\"n\">ring</span><span class=\"o\">,</span>\n                            <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">B</span><span class=\"o\">,</span><span class=\"n\">proof_n_plus_m_f_g</span><span class=\"o\">,</span><span class=\"n\">mul_one</span><span class=\"o\">],</span>\n                    <span class=\"k\">have</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"err\">^</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">vf</span> <span class=\"bp\">*</span> <span class=\"n\">s_f</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"err\">^</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">vg</span> <span class=\"bp\">*</span> <span class=\"n\">s_g</span> <span class=\"bp\">*</span> <span class=\"n\">g</span> <span class=\"err\">^</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">=</span>      <span class=\"n\">f</span> <span class=\"err\">^</span> <span class=\"n\">m</span> <span class=\"bp\">*</span><span class=\"n\">g</span> <span class=\"err\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">*</span><span class=\"n\">s_f</span> <span class=\"bp\">*</span><span class=\"n\">vf</span> <span class=\"bp\">+</span> <span class=\"n\">g</span> <span class=\"err\">^</span> <span class=\"n\">m</span><span class=\"bp\">*</span> <span class=\"n\">g</span> <span class=\"err\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">vg</span> <span class=\"bp\">*</span> <span class=\"n\">s_g</span><span class=\"o\">,</span>\n                        <span class=\"n\">ring_exp</span><span class=\"o\">,</span>\n                    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">H</span><span class=\"o\">,</span><span class=\"n\">proof_m</span><span class=\"o\">],</span>\n                        <span class=\"k\">have</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"err\">^</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"err\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">s_g</span> <span class=\"bp\">*</span> <span class=\"n\">vf</span> <span class=\"bp\">+</span> <span class=\"n\">g</span> <span class=\"err\">^</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">g</span> <span class=\"err\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">vg</span> <span class=\"bp\">*</span> <span class=\"n\">s_g</span> <span class=\"bp\">=</span> <span class=\"n\">g</span><span class=\"err\">^</span><span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">s_g</span> <span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"err\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">vf</span> <span class=\"bp\">+</span> <span class=\"n\">g</span> <span class=\"err\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">vg</span> <span class=\"o\">),</span>\n                        <span class=\"n\">ring</span><span class=\"o\">,</span>\n                        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">B</span><span class=\"o\">,</span><span class=\"n\">proof_n_plus_m_f_g</span><span class=\"o\">,</span><span class=\"n\">mul_one</span><span class=\"o\">],</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 190860868,
        "sender_full_name": "orlando",
        "timestamp": 1584457620
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>        <span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">apply</span> <span class=\"n\">star</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">symm</span><span class=\"o\">},</span>    <span class=\"c1\">-- is there a repeat method ? How to programme such method ?</span>\n        <span class=\"n\">assumption</span><span class=\"o\">,</span>\n</pre></div>",
        "id": 190876640,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584463366
    },
    {
        "content": "<p>and end with <code>end co_maxi</code> and you're done. I don't understand what your question is.</p>",
        "id": 190876988,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584463469
    },
    {
        "content": "<p>Hello, </p>\n<p>My question is, do you have an idea to simplify calculus, i have to do the same thing for a familly <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><msub><mi>f</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><mo>…</mo><mo separator=\"true\">,</mo><msub><mi>f</mi><mi>n</mi></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(f_1,\\dots,f_n)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> of comaximal element of a ring. It's complicate  computation ! For the moment,  i have no idea how to do that ! Perhaps the library \"localization \" can help  !</p>",
        "id": 190878761,
        "sender_full_name": "orlando",
        "timestamp": 1584464205
    },
    {
        "content": "<p>My MSc student Ramon Fernandez Mir did this <a href=\"https://github.com/ramonfmir/lean-scheme/blob/6d3ec18fecfd174b79d0ce5c85a783f326dd50f6/src/spectrum_of_a_ring/structure_sheaf.lean#L30\" target=\"_blank\" title=\"https://github.com/ramonfmir/lean-scheme/blob/6d3ec18fecfd174b79d0ce5c85a783f326dd50f6/src/spectrum_of_a_ring/structure_sheaf.lean#L30\">here</a>.</p>",
        "id": 190880563,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584464889
    },
    {
        "content": "<p>There is an interesting story behind it all, but nobody wrote the paper yet. <a href=\"https://www.imperial.ac.uk/media/imperial-college/faculty-of-engineering/computing/public/1819-ug-projects/Fernandez-I-MirR-Schemes-in-Lean.pdf\" target=\"_blank\" title=\"https://www.imperial.ac.uk/media/imperial-college/faculty-of-engineering/computing/public/1819-ug-projects/Fernandez-I-MirR-Schemes-in-Lean.pdf\">Here</a> is Ramon's write-up.</p>",
        "id": 190880851,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584465005
    },
    {
        "content": "<p>You can compress stuff a bit when it's trivial, for instance the beginning could be:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">one_perp</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span>    <span class=\"o\">:</span>  <span class=\"mi\">1</span> <span class=\"err\">⊥</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>   <span class=\"c1\">--- with 1 * 1 + a * 0 = 1</span>\n<span class=\"bp\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">ring</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">symm</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"err\">⊥</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">→</span>  <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"err\">⊥</span> <span class=\"n\">a</span><span class=\"o\">)</span>  <span class=\"o\">:=</span>   <span class=\"c1\">--- a u + b v = 1 → b v + a u = 1</span>\n<span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">u</span><span class=\"o\">,</span><span class=\"n\">v</span><span class=\"o\">,</span><span class=\"n\">k</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">v</span><span class=\"o\">,</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">rwa</span> <span class=\"n\">add_comm</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">abab_trick</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"err\">⊥</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"err\">⊥</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"err\">⊥</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>    <span class=\"c1\">---  Trick to simplify proof !  if a ⊥ c and b ⊥ c then ab ⊥ c  from calculus !</span>\n    <span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">ua</span><span class=\"o\">,</span><span class=\"n\">va</span><span class=\"o\">,</span><span class=\"n\">ka</span><span class=\"bp\">⟩</span>  <span class=\"bp\">⟨</span><span class=\"n\">ub</span><span class=\"o\">,</span><span class=\"n\">vb</span><span class=\"o\">,</span><span class=\"n\">kb</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n        <span class=\"k\">begin</span>\n            <span class=\"k\">have</span> <span class=\"n\">J</span> <span class=\"o\">:=</span> <span class=\"k\">calc</span>\n                    <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span> <span class=\"n\">ua</span> <span class=\"bp\">*</span> <span class=\"n\">ub</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"o\">(</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">ua</span> <span class=\"bp\">*</span> <span class=\"n\">vb</span> <span class=\"bp\">+</span> <span class=\"n\">va</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">ub</span> <span class=\"bp\">+</span> <span class=\"n\">va</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">vb</span><span class=\"o\">)</span>  <span class=\"bp\">=</span>  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">ua</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">va</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">ub</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">vb</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">ring</span>\n                    <span class=\"bp\">...</span>                                                                    <span class=\"bp\">=</span>   <span class=\"mi\">1</span>                                    <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ka</span><span class=\"o\">,</span><span class=\"n\">kb</span><span class=\"o\">,</span> <span class=\"n\">one_mul</span><span class=\"o\">],</span>\n        <span class=\"n\">use</span> <span class=\"bp\">⟨</span> <span class=\"n\">ua</span> <span class=\"bp\">*</span> <span class=\"n\">ub</span><span class=\"o\">,</span>  <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">ua</span> <span class=\"bp\">*</span> <span class=\"n\">vb</span> <span class=\"bp\">+</span> <span class=\"n\">va</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">ub</span> <span class=\"bp\">+</span> <span class=\"n\">va</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">vb</span> <span class=\"o\">,</span> <span class=\"n\">J</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n        <span class=\"kn\">end</span>\n</pre></div>",
        "id": 190888474,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1584468148
    },
    {
        "content": "<p>I remember Mario once saying that it didn't matter if the proof looked incomprehensible if the statement was mathematically trivial, because then nobody wants to read the proof anyway.</p>",
        "id": 190888746,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584468293
    },
    {
        "content": "<p>I don't even think those proofs are less readable than the original ones.</p>",
        "id": 190889515,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1584468660
    },
    {
        "content": "<p>Hum i try to read (to understand the language) some proof and it's very difficult  !  Patrick thx you !  </p>\n<p>Perhaps a stupid question (sorry) : i thinck i don't understand something  ? </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">algebra</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">polynomial</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">finsupp</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">zmod</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">ring</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">category</span><span class=\"bp\">.</span><span class=\"n\">CommRing</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">foncteur</span><span class=\"bp\">.</span><span class=\"n\">comax</span>\n<span class=\"kn\">open</span> <span class=\"n\">zmod</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"kn\">reducible</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">zmod</span><span class=\"o\">(</span><span class=\"mi\">15</span><span class=\"o\">)</span>\n<span class=\"n\">def</span>  <span class=\"kn\">eval</span>  <span class=\"o\">:</span> <span class=\"bp\">ℤ</span>  <span class=\"bp\">→</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n    <span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">n</span>\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"kn\">eval</span><span class=\"o\">(</span><span class=\"mi\">19</span><span class=\"o\">)</span>\n<span class=\"kn\">open</span> <span class=\"n\">co_maxi</span>\n<span class=\"n\">def</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>   <span class=\"n\">co_maxi</span><span class=\"bp\">.</span><span class=\"n\">gluing_data</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"mi\">6</span><span class=\"o\">)(</span><span class=\"bp\">-</span><span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"mi\">1</span> <span class=\"bp\">⟨</span> <span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">ring</span><span class=\"bp\">⟩</span>  <span class=\"bp\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"k\">by</span> <span class=\"n\">ring</span> <span class=\"bp\">⟩</span>  <span class=\"c1\">---  6 * 1 + (-5) *1 = 1,  ,m = 1 cause  6 × 5 = 0</span>\n<span class=\"c1\">--- The gluing point is 4 because 4 mod 3 = 1 and 4 mod 5 = -1,</span>\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">A</span> <span class=\"c1\">--- where is 4 ???</span>\n<span class=\"c1\">-- Can I execute my proof ?? or it&#39;s a stupid idea ? -- i give Lean all the calculus so he have the answer ! ! ! But where ???</span>\n</pre></div>",
        "id": 190894683,
        "sender_full_name": "orlando",
        "timestamp": 1584471132
    },
    {
        "content": "<p>import fonctor.comax is my previous file !</p>",
        "id": 190894943,
        "sender_full_name": "orlando",
        "timestamp": 1584471254
    },
    {
        "content": "<p>Try <code>#eval A</code> or <code>#reduce A</code>?</p>",
        "id": 190895220,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584471384
    },
    {
        "content": "<p>reduce : give me indeterminate time out ! <br>\nFor #eval A</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">new</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"mi\">17</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"o\">:</span> <span class=\"n\">warning</span>\n<span class=\"n\">result</span> <span class=\"n\">type</span> <span class=\"n\">does</span> <span class=\"n\">not</span> <span class=\"k\">have</span> <span class=\"n\">an</span> <span class=\"kn\">instance</span> <span class=\"n\">of</span> <span class=\"n\">type</span> <span class=\"n\">class</span> <span class=\"err\">&#39;</span><span class=\"n\">has_repr&#39;</span><span class=\"o\">,</span> <span class=\"n\">dumping</span> <span class=\"n\">internal</span> <span class=\"n\">representation</span>\n<span class=\"n\">new</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"mi\">17</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"o\">:</span> <span class=\"n\">information</span> <span class=\"kn\">eval</span> <span class=\"n\">result</span>\n<span class=\"bp\">#</span><span class=\"mi\">0</span>\n</pre></div>",
        "id": 190895359,
        "sender_full_name": "orlando",
        "timestamp": 1584471470
    },
    {
        "content": "<p><code>#eval A</code> won't work because <code>A</code> has type <code>∃ s : R, ∃ N_f N_g : ℕ, f^(N_f+n) * s = f^N_f * s_f ∧  g^(N_g+n) * s = g^N_g * s_g</code> (with some specific values substituted for the variables) and this is an <code>∃</code>, so it's a prop. That means there is no data at \"runtime\".</p>",
        "id": 190895758,
        "sender_full_name": "Reid Barton",
        "timestamp": 1584471615
    },
    {
        "content": "<p><code>#reduce A</code> might work in principle I guess, but I'm not surprised it doesn't work in practice.</p>",
        "id": 190895794,
        "sender_full_name": "Reid Barton",
        "timestamp": 1584471629
    },
    {
        "content": "<p>If you want to be able to use your proofs to compute directly with <code>#eval</code>, then you would need to change some or all of your <code>∃</code> into subtypes or sigma types or custom structures that contain the data you need to eventually arrive at the result <code>4</code>.</p>",
        "id": 190896249,
        "sender_full_name": "Reid Barton",
        "timestamp": 1584471870
    },
    {
        "content": "<p>For example, rather than the prop <code>∃ u v :  R,    a * u + b * v = 1</code>, you would want to work with a structure that contains <code>u</code>, <code>v</code> and the proof of <code>a * u + b * v = 1</code></p>",
        "id": 190896325,
        "sender_full_name": "Reid Barton",
        "timestamp": 1584471912
    },
    {
        "content": "<p>Ok, i try !   Thx !</p>",
        "id": 190896721,
        "sender_full_name": "orlando",
        "timestamp": 1584472099
    },
    {
        "content": "<p>You'll also have to switch to <code>def</code> when the result is data (rather than a prop), and you may need to rearrange your definitions to put <code>use</code> earlier, and other changes. (Does <code>use</code> work to construct general structures?) Don't hesitate to ask questions if this way of using Lean is new to you.</p>",
        "id": 190897833,
        "sender_full_name": "Reid Barton",
        "timestamp": 1584472631
    },
    {
        "content": "<p>hum for the moment i don't know if i start with : </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">structure</span> <span class=\"n\">Uni_2</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}(</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">certificat</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">v</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">))</span>\n</pre></div>\n\n\n<p>or with</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">structure</span> <span class=\"n\">Uni_2</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">certificat</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">v</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">))</span>\n</pre></div>",
        "id": 190916387,
        "sender_full_name": "orlando",
        "timestamp": 1584482370
    },
    {
        "content": "<p>The first one. Think of it as a replacement for <code>co_max</code>, which is data instead of merely a proposition.</p>",
        "id": 190918007,
        "sender_full_name": "Reid Barton",
        "timestamp": 1584483434
    },
    {
        "content": "<p>Okay, i thinck i understand ! I have to create other structure, for exemple : a structure for the condition : </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"err\">^</span><span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">g</span><span class=\"err\">^</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">s_f</span> <span class=\"bp\">=</span> <span class=\"n\">g</span><span class=\"err\">^</span><span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">f</span><span class=\"err\">^</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">s_g</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 190920775,
        "sender_full_name": "orlando",
        "timestamp": 1584485251
    },
    {
        "content": "<p>thx Reid !!!</p>",
        "id": 190920807,
        "sender_full_name": "orlando",
        "timestamp": 1584485277
    },
    {
        "content": "<p>In  fact, it's mathematicaly coherent ! Tomorow :D</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">parameters</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n<span class=\"kn\">structure</span> <span class=\"n\">localy_zero</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"kn\">extends</span>  <span class=\"n\">comax</span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">)(</span><span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"k\">proof</span><span class=\"o\">:</span> <span class=\"n\">f</span><span class=\"err\">^</span><span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">g</span><span class=\"err\">^</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 190921064,
        "sender_full_name": "orlando",
        "timestamp": 1584485416
    }
]