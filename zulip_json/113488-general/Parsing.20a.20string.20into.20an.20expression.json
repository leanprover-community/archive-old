[
    {
        "content": "<p>I recently discovered that Lean can read from <code>stdin</code>.  So now I'm curious if it is possible to do the following in Lean:</p>\n<ol>\n<li>read in a string (representing a Lean term)</li>\n<li>parse that string into an expression</li>\n<li>evaluate (the term given by) that expression</li>\n<li>print the output</li>\n</ol>\n<p>(1) and (4) are easy, but what about (2) and (3)?  I assume (3) is possible with the meta stuff, but (2), I have no idea.</p>",
        "id": 186852595,
        "sender_full_name": "Jason Rute",
        "timestamp": 1580267731
    },
    {
        "content": "<p>I'm actually more interested in this scenario so feel free to comment on that one also:</p>\n<ol>\n<li>read in a string (representing a Lean Prop)</li>\n<li>parse that string into an expression</li>\n<li>set that expression as a goal</li>\n<li>apply a tactic to that goal</li>\n<li>print the result</li>\n</ol>",
        "id": 186852672,
        "sender_full_name": "Jason Rute",
        "timestamp": 1580267856
    },
    {
        "content": "<p>To be clear, I'm thinking about parsing Lean's syntax.  (Of course, since expressions are algebraic data structures, one can could pass in say an s-expression for that expression and write a custom parser for those s-expressions.)</p>",
        "id": 186852857,
        "sender_full_name": "Jason Rute",
        "timestamp": 1580268090
    },
    {
        "content": "<p>Actually, as I think about it, even if there was no Lean syntax parser, I'd still be interested in the other steps (evaluating an expression and setting an expression as a goal).</p>",
        "id": 186853158,
        "sender_full_name": "Jason Rute",
        "timestamp": 1580268593
    },
    {
        "content": "<p>For  parsing an expression: <code>lean.parser.with_input interactive.types.texpr my_string</code></p>",
        "id": 186853824,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1580269526
    },
    {
        "content": "<p>it will give you a <code>pexpr</code> (plus a string) which you can feed into <code>to_expr</code> to elaborate the term into something that you can evaluate or create a goal from</p>",
        "id": 186853881,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1580269592
    },
    {
        "content": "<p>To evaluate it, you have to write a routine by hand creating a value of type you're interested in from an <code>expr</code>. It can probably be automated with some meta programming</p>",
        "id": 186854030,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1580269843
    },
    {
        "content": "<p>To set a goal with your expression:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">v</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">mk_meta_var</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n<span class=\"n\">gs</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">get_goals</span><span class=\"o\">,</span>\n<span class=\"n\">set_goals</span> <span class=\"err\">$</span> <span class=\"n\">v</span> <span class=\"bp\">::</span> <span class=\"n\">gs</span>\n</pre></div>",
        "id": 186854043,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1580269881
    },
    {
        "content": "<p>Thanks!  I will have to try this out.</p>",
        "id": 186854191,
        "sender_full_name": "Jason Rute",
        "timestamp": 1580270159
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"115715\">@Jason Rute</span> I'm very interested in any code you write for this (obviously). Please make it available either publicly or email me.</p>",
        "id": 186855279,
        "sender_full_name": "Tim Daly",
        "timestamp": 1580271750
    },
    {
        "content": "<p>Sure, but I will warn you <span class=\"user-mention\" data-user-id=\"223495\">@Tim Daly</span> that I am a hobbist, so I might not get around to it too quickly (or I might wake up tomorrow and want to give it a try :) ).</p>",
        "id": 186855612,
        "sender_full_name": "Jason Rute",
        "timestamp": 1580272334
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> I got this far, but I think I am mixing the <code>parser</code> and <code>tactic</code> monads.  Do you know what I need to do here?</p>\n<div class=\"codehilite\"><pre><span></span>def experiment (s : string) : lean.parser unit :=\ndo\n   pe &lt;- lean.parser.with_input interactive.types.texpr s,  -- parser monad\n   e &lt;- to_expr pe.1,  -- tactic monad\n   v &lt;- mk_meta_var e,\n   gs &lt;- get_goals,\n   set_goals $ v :: gs,\n   t &lt;- target,\n   trace t,  -- should output the goal given by the string s\n   return ()\n</pre></div>",
        "id": 186858153,
        "sender_full_name": "Jason Rute",
        "timestamp": 1580276937
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"223495\">@Tim Daly</span> You might be interested also in <a href=\"#narrow/stream/219941-Machine-Learning.20for.20Theorem.20Proving/topic/ML.20for.20Lean.3A.20How.20to.20do.20it.3F\" title=\"#narrow/stream/219941-Machine-Learning.20for.20Theorem.20Proving/topic/ML.20for.20Lean.3A.20How.20to.20do.20it.3F\">this thread</a>.  For example, I made <a href=\"https://github.com/jasonrute/communicating-with-lean/blob/master/communicate_with_lean.ipynb\" target=\"_blank\" title=\"https://github.com/jasonrute/communicating-with-lean/blob/master/communicate_with_lean.ipynb\">a python prototype</a> of communicating with Lean using the Lean server.</p>",
        "id": 186858223,
        "sender_full_name": "Jason Rute",
        "timestamp": 1580277087
    },
    {
        "content": "<p>Yes, that's a very annoying separation when you need to invoke the parser. You can invoke tactic from parser but not the other way around. Figuring out how to get the user to call your automation can be tricky. If you only want to call tactic from parser, you can use <code>lean.parser.of_tactic</code></p>",
        "id": 186858352,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1580277303
    },
    {
        "content": "<p>For the other way around, it depends on how you want to invoke the script. If you want to call it from a normal proof script (in a <code>begin</code> <code>end</code> block), then we use the <code>parse</code> syntax. Otherwise, you can define a <code>user_command</code> using the attribute <code>user_command</code> and then you just write <code>my_command .</code> at the top level and it will call your script</p>",
        "id": 186858516,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1580277604
    },
    {
        "content": "<p>I don't think it is possible to use <code>with_input</code> when using <code>lean --run</code></p>",
        "id": 186860041,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1580280065
    },
    {
        "content": "<p>So this:</p>\n<div class=\"codehilite\"><pre><span></span>meta def experiment (s : string) : lean.parser unit :=\ndo\n   pe &lt;- lean.parser.with_input interactive.types.texpr s,\n   e &lt;- lean.parser.of_tactic (tactic.to_expr pe.1),\n   v &lt;- lean.parser.of_tactic (tactic.mk_meta_var e),\n   gs &lt;- lean.parser.of_tactic (tactic.get_goals),\n   lean.parser.of_tactic (tactic.set_goals $ v :: gs),\n   t &lt;- lean.parser.of_tactic tactic.target,\n   lean.parser.of_tactic (tactic.trace t),\n   return ()\n\nrun_cmd experiment &quot;true&quot;\n</pre></div>\n\n\n<p>is giving me an error at <code>run_cmd</code>: \"vm check failed: dynamic_cast&lt;vm_State*&gt;(to_external(o)) (possibly due to incorrect axioms, or sorry)\".  Maybe this is related to what Mario was talking about about not being able to use <code>lean.parser.with_input</code> with <code>lean --run</code>.</p>",
        "id": 186885285,
        "sender_full_name": "Jason Rute",
        "timestamp": 1580304691
    },
    {
        "content": "<p>That's a bug, <code>run_cmd</code> should only accept <code>tactic</code>s. <code>lean.parser</code> cannot be used outside of user-defined parser extensions (notations/commands/tactic params).</p>",
        "id": 186885835,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1580305099
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> Can you point me to examples of what you mean by \"the <code>parse</code> syntax\" or using <code>user_command</code>?  (Or does Mario's comment mean what I want to do is ultimately doomed to fail?)</p>",
        "id": 186886175,
        "sender_full_name": "Jason Rute",
        "timestamp": 1580305332
    },
    {
        "content": "<p>While it is fresh, can you file this <code>run_cmd</code> issue? I'd like to make the error message better.</p>",
        "id": 186905676,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1580317188
    },
    {
        "content": "<p>I wouldn't say your project is doomed. I would only say that you'll have to run your experiment while parsing / elaborating Lean files, not as a Lean program (with a main, etc)</p>",
        "id": 186905863,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1580317272
    },
    {
        "content": "<p>Now about the <code>user_command</code> idea (which I think is what you need):</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">setup_tactic_parser</span> <span class=\"c1\">-- this is actually a user command too</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">user_command</span><span class=\"o\">]</span>\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">my_command</span> <span class=\"o\">(</span><span class=\"n\">meta_info</span> <span class=\"o\">:</span> <span class=\"n\">decl_meta_info</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">_</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"o\">(</span><span class=\"n\">tk</span> <span class=\"s2\">&quot;my_command&quot;</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">lean</span><span class=\"bp\">.</span><span class=\"n\">parser</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"n\">parser</span><span class=\"bp\">.</span><span class=\"n\">of_tactic</span> <span class=\"err\">$</span> <span class=\"n\">trace</span> <span class=\"s2\">&quot;hello world&quot;</span>\n<span class=\"bp\">.</span>\n\n<span class=\"n\">my_command</span> <span class=\"bp\">.</span> <span class=\"c1\">-- prints &quot;hello world&quot;</span>\n</pre></div>",
        "id": 186906842,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1580317879
    },
    {
        "content": "<p>Then if you want to user to write in an expression, you can do:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">user_command</span><span class=\"o\">]</span>\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">my_command</span> <span class=\"o\">(</span><span class=\"n\">meta_info</span> <span class=\"o\">:</span> <span class=\"n\">decl_meta_info</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">_</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"o\">(</span><span class=\"n\">tk</span> <span class=\"s2\">&quot;my_command&quot;</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">lean</span><span class=\"bp\">.</span><span class=\"n\">parser</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"n\">e</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">texpr</span><span class=\"o\">,</span>\n   <span class=\"n\">parser</span><span class=\"bp\">.</span><span class=\"n\">of_tactic</span> <span class=\"err\">$</span> <span class=\"n\">trace</span> <span class=\"n\">e</span>\n<span class=\"bp\">.</span>\n\n<span class=\"n\">my_command</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">.</span> <span class=\"c1\">-- prints &quot;1 + 1&quot;</span>\n</pre></div>\n\n\n<p>(be sure not to forget the <code>.</code>)</p>",
        "id": 186906944,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1580317934
    },
    {
        "content": "<p>Then you can skip the part where you parse from a string. If you read the string from a file, this is where I would use the <code>with_input</code> trick</p>",
        "id": 186907328,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1580318164
    },
    {
        "content": "<blockquote>\n<p>While it is fresh, can you file this <code>run_cmd</code> issue? I'd like to make the error message better.</p>\n</blockquote>\n<p><a href=\"https://github.com/leanprover-community/mathlib/issues/1928\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/1928\">https://github.com/leanprover-community/mathlib/issues/1928</a></p>",
        "id": 186938412,
        "sender_full_name": "Jason Rute",
        "timestamp": 1580339418
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span>  Thanks for all the help!  I am wondering if I need to take a step back however.  Maybe I don't want/need parsing of Lean code in the first place.</p>",
        "id": 186938453,
        "sender_full_name": "Jason Rute",
        "timestamp": 1580339474
    },
    {
        "content": "<p>Can you explain a bit more how you'd like the user to call your program?</p>",
        "id": 186938616,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1580339635
    },
    {
        "content": "<p>The issue should probably be on <code>leanprover-community/lean</code> instead. I bet <span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> can transfer it over though.</p>",
        "id": 186938620,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1580339639
    },
    {
        "content": "<p>Done</p>",
        "id": 186938752,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1580339750
    },
    {
        "content": "<p>Good call <span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span></p>",
        "id": 186938761,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1580339760
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> The user will be a machine and it will call <code>lean --run my_program</code> and communicate via stdin and stdout. Specifically the user will send some string representing a theorem to be proved (more on that in a second) via stdin.  The program will read that string in, convert it to an expression, make a goal of that type, apply a tactic (this may also be specified by the user, but for now I'm worried about the goal itself), and print (to stdout) whether the tactic succeeded and the resulting goal (in some serialization).  This will be a loop.  So the program waits for the next input.  I'm starting to realize that it is better to directly serialize the expression than to directly parse Lean code.  I was just about to ask on a new topic if there is a standard serialization of Lean expressions or if I should make my own?</p>",
        "id": 186939261,
        "sender_full_name": "Jason Rute",
        "timestamp": 1580340143
    },
    {
        "content": "<p>For motivation, I'm trying to make a better and more reliable version of what I made <a href=\"https://github.com/jasonrute/communicating-with-lean/blob/master/communicate_with_lean.ipynb\" target=\"_blank\" title=\"https://github.com/jasonrute/communicating-with-lean/blob/master/communicate_with_lean.ipynb\">here</a>.</p>",
        "id": 186939356,
        "sender_full_name": "Jason Rute",
        "timestamp": 1580340239
    },
    {
        "content": "<p>There I used the Lean server, but I think stdin and stdout of a running Lean program is better, faster, and more reliable.</p>",
        "id": 186939459,
        "sender_full_name": "Jason Rute",
        "timestamp": 1580340302
    },
    {
        "content": "<p>I see. For serialization, have a look here: <a href=\"https://github.com/leanprover-community/lean/blob/ec1613aef1eee72e601f192b16740629c6d49690/library/system/io.lean\" target=\"_blank\" title=\"https://github.com/leanprover-community/lean/blob/ec1613aef1eee72e601f192b16740629c6d49690/library/system/io.lean\">https://github.com/leanprover-community/lean/blob/ec1613aef1eee72e601f192b16740629c6d49690/library/system/io.lean</a></p>",
        "id": 186939595,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1580340391
    },
    {
        "content": "<p>What imports will your lean program use? If it's a large environment, e.g. all of mathlib, you might still be better off with the server interface. There's overhead to building the environment even if the dependencies are precompiled. Keeping a single server instance going will avoid this.</p>",
        "id": 186940139,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1580340874
    },
    {
        "content": "<p>It would be nice to try both.  To be clear, I intend to keep either instance \"going\".  If I use stdin/stdout, it will be in a loop.</p>",
        "id": 186940665,
        "sender_full_name": "Jason Rute",
        "timestamp": 1580341318
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> That looks really promising!  I need to upgrade Lean apparently to get that...  Do you by chance know what the serialization looks like?</p>",
        "id": 186940752,
        "sender_full_name": "Jason Rute",
        "timestamp": 1580341368
    },
    {
        "content": "<p>I don't remember what it looks like. I'll have a look</p>",
        "id": 186941281,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1580341836
    },
    {
        "content": "<p>The serialization is not really legible. It's binary serialization format</p>",
        "id": 186948344,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1580348977
    },
    {
        "content": "<p>Thanks Simon!</p>",
        "id": 186984918,
        "sender_full_name": "Jason Rute",
        "timestamp": 1580390431
    },
    {
        "content": "<p>Ignoring the details of serialization for now (which have and could be solved in a number of ways), here is what I have in mind.  I tested it (with dummy serializations). This code works (and is very fast to call from say Python).</p>\n<div class=\"codehilite\"><pre><span></span>import system.io\nopen io\n\nmeta def serialize_expr (e : expr) : string := sorry\nmeta def deserialize_expr(s : string) : expr := sorry\n\nmeta def apply_tactic_to_goal (t : tactic unit) (goal : expr) : tactic (list expr) :=\ndo\n  -- set expression as goal\n  v &lt;- tactic.mk_meta_var goal,\n  tactic.set_goals $ [v],\n  -- run tactic on goal\n  t,\n  -- return results\n  gs &lt;- tactic.get_goals,\n  return gs\n\nmeta def read_eval_print (_ : unit) : io_core error (option unit) :=\ndo\n  do\n    -- get serialized expression from stdin\n    expr_str ← get_line,\n    let e := deserialize_expr expr_str,\n    -- run tactic (skip tactic in this case) on goal\n    gs ← io.run_tactic (apply_tactic_to_goal tactic.skip e),\n    -- print serialized goals to stdout\n    let goal_strs := gs.map serialize_expr,\n    put_str (to_string goal_strs),\n    return ()\n\nmeta def main : io unit :=\n  -- loop forever\n  do iterate () read_eval_print,\n  return ()\n</pre></div>",
        "id": 186985892,
        "sender_full_name": "Jason Rute",
        "timestamp": 1580391188
    },
    {
        "content": "<p>When I say fast, I mean that the first call is slow, but after that it is really fast compared to the lean server.</p>",
        "id": 186986005,
        "sender_full_name": "Jason Rute",
        "timestamp": 1580391279
    },
    {
        "content": "<p>Of course this is a prototype.  A better version needs error handling (and more features around selecting which tactics to apply).</p>",
        "id": 186986141,
        "sender_full_name": "Jason Rute",
        "timestamp": 1580391383
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span> I just discovered <code>expr.to_raw_fmt</code> from your other post.  <a href=\"#narrow/stream/113488-general/topic/.3F.3F.3F/near/187757930\" title=\"#narrow/stream/113488-general/topic/.3F.3F.3F/near/187757930\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/.3F.3F.3F/near/187757930</a>  I don't suppose that hidden somewhere in Lean is a parser for this format (which takes a string of this format and converts it to an <code>expr</code>)?</p>",
        "id": 187760092,
        "sender_full_name": "Jason Rute",
        "timestamp": 1581257074
    },
    {
        "content": "<p>no</p>",
        "id": 187760113,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1581257158
    },
    {
        "content": "<p>It's almost good enough that you can use it as lean surface syntax for an object of type <code>expr</code> though (i.e. using the constructors directly)</p>",
        "id": 187760154,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1581257202
    },
    {
        "content": "<p><code>expr.to_raw_fmt</code> is defined in lean though and it's a relatively short definition so you can modify it to suit your needs</p>",
        "id": 187760165,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1581257261
    },
    {
        "content": "<p>Thanks Mario!  I actually already have made my own <code>expr</code> to <code>string</code> function before I discovered this and made a parser too (although I haven't finished covering all the cases, like macros).  I just thought it was better to use built-in tools when possible.  Thanks!</p>",
        "id": 187760263,
        "sender_full_name": "Jason Rute",
        "timestamp": 1581257503
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/Parsing.20a.20string.20into.20an.20expression/near/186860041\">said</a>:</p>\n<blockquote>\n<p>I don't think it is possible to use <code>with_input</code> when using <code>lean --run</code></p>\n</blockquote>\n<p>I'm reviving this thread.  It is not possible to run the parser monad inside the tactic monad or the io monad.*  I'm curious if this is by necessity (i.e. the parser monad requires information that shouldn't be available in the tactic monad or the io monad) or by omission (no one has bothered to implement <code>io.run_parser</code>).  I know the io monad in particular has access to the tactic environment (so one can run <code>io.run_tactic</code>), but I don't know if it also has (or could have) access to the parser state.  I'm getting by with the user command trick, but I'm curious nonetheless.</p>",
        "id": 198389643,
        "sender_full_name": "Jason Rute",
        "timestamp": 1590102595
    },
    {
        "content": "<p>*It isn't entirely true that you can't run a parser in a tactic monad.  You could start in the parser monad, grab the parser state, run a tactic inside the parser, and in that tactic, invoke the parser_state, but I think we can agree I'm being pedantic now. <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 198389811,
        "sender_full_name": "Jason Rute",
        "timestamp": 1590102686
    }
]