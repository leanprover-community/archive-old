[
    {
        "content": "<p>Hello everyone, I am an intern at VU Amsterdam, working under the supervision of Johannes (who is abroad now).<br>\nI would like to know more about the status of the rsimp (?)/congruence closure implementation in Lean. Everything is not totally clear in my mind.<br>\nI read the paper published by Leonardo de Moura and Daniel Selsam about cc from 2016 - the examples given don't work anymore due to syntax changes in the Lean language. The inst_simp tactic doesn't exist anymore and I guess rsimp/simp may be a new version of it.<br>\nDo people actually use the rsimp tactic ? I tried it on a few examples and it does indeed some simplifications (eg in groups, although it seems it doesn't handle commutativity). It is however VERY slow and makes my Lean lag a lot, and sometimes eventually overflow the allocated memory. <br>\nI know and used the ac_refl tactic which works really well. I am aware that AC rewriting coupled with another theory (for instance, the existence of an inverse in a group) is a complex topic. There are some papers out there about successful attempts though.  Are there any plans in implementing something similar / a better working version of (r)simp for specific theories ? I can imagine something targeted at some precise algebraic structures, with a small set of lemmas and good performances. I am asking the question after reading about the Knuth-Bendix completion which would maybe provide nice automation for some proofs (?). I already implemented a cancellation tactic for (comm_)groups, but I feel that there should be something more general.</p>\n<p>Simp only won't simplify</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_group</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹*</span><span class=\"n\">y</span><span class=\"bp\">*</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"c1\">-- fails</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>Also, I don't know how to provide my own lemmas to the cc tactic / add lemmas to the cc_state / how the cc tactic can be tweaked to work with groups for instance.<br>\nThanks !</p>",
        "id": 127657772,
        "sender_full_name": "Pablo Le Hénaff",
        "timestamp": 1528294000
    },
    {
        "content": "<blockquote>\n<p>inst_simp</p>\n</blockquote>\n<p>I didn't read the paper, but I think that is just congruence closure with E-matching in a saturation loop.  The current syntax should be <code>begin[smt] eblast end</code>.</p>",
        "id": 127657858,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1528294099
    },
    {
        "content": "<blockquote>\n<p>Do people actually use the rsimp tactic ?</p>\n</blockquote>\n<p>I am not aware of anybody who uses it.</p>",
        "id": 127657894,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1528294171
    },
    {
        "content": "<blockquote>\n<p>of (r)simp for specific theories</p>\n</blockquote>\n<p>I think simp with AC-matching is on the roadmap.</p>",
        "id": 127657978,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1528294240
    },
    {
        "content": "<p>This is the <code>rsimp</code> usage in the mathlib repository:</p>\n<div class=\"codehilite\"><pre><span></span>$ git grep -n rsimp\ndata/list/basic.lean:342:  by intros l₁; induction l₁; intros; rsimp,\ndata/list/basic.lean:394:  induction l with hd tl ih; rsimp,\norder/boolean_algebra.lean:44:  by rsimp,\norder/boolean_algebra.lean:47:by rsimp\norder/boolean_algebra.lean:67:neg_unique -- TODO: try rsimp if it supports custom lemmas\n</pre></div>",
        "id": 127658009,
        "sender_full_name": "Sean Leather",
        "timestamp": 1528294297
    },
    {
        "content": "<p>Re: inst_simp.  Where did you see inst_simp?  I can't remember it from the IJCAR presentation, and now I can't find it in the paper either.</p>",
        "id": 127658012,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1528294300
    },
    {
        "content": "<p><a href=\"http://leanprover.github.io/ijcar16/examples/\" target=\"_blank\" title=\"http://leanprover.github.io/ijcar16/examples/\">http://leanprover.github.io/ijcar16/examples/</a><br>\nin those examples</p>",
        "id": 127658090,
        "sender_full_name": "Pablo Le Hénaff",
        "timestamp": 1528294389
    },
    {
        "content": "<blockquote>\n<p>Also, I don't know how to provide my own lemmas to the cc tactic</p>\n</blockquote>\n<p>The cc tactic doesn't use lemmas in any meaningful way, it just solves a goal if it can (essentially) be solved using just equational reasoning.</p>",
        "id": 127658095,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1528294395
    },
    {
        "content": "<blockquote>\n<p>The tactic inst_simp uses E-matching to heuristically instantiate lemmas tagged as simplification rules (i.e., <code>[simp]</code> tag in Lean).</p>\n</blockquote>\n<p>So <code>begin[smt] eblast end</code></p>",
        "id": 127658107,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1528294432
    },
    {
        "content": "<p>For lemmas, use E-matching.  That is, tag lemmas as <code>@[ematch]</code> and then use <code>begin[smt] eblast end</code>; also check out <code>eblast_using [...]</code>.</p>",
        "id": 127658205,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1528294550
    },
    {
        "content": "<p>i'll give it a try and tell you, thanks</p>",
        "id": 127658300,
        "sender_full_name": "Pablo Le Hénaff",
        "timestamp": 1528294664
    }
]