[
    {
        "content": "<p>Can I interest anyone to do a mathlib refactor for <a href=\"https://github.com/leanprover-community/mathlib/pull/16617\">#16617</a>? I would like to change the behavior of <code>rcases</code> such that it matches only the explicit arguments of the constructor, with the ability to name all of the arguments behind the <code>@pat</code> syntax.</p>\n<p>This involves a change in many uses of <code>rcases</code> though, so to facilitate the refactor I added a backward compatibility behavior to be removed before the PR is done, which will act like the old <code>rcases</code> but will print a trace message if the new <code>rcases</code> would have matched the patterns differently, and tell you which arguments to remove. To acknowledge the message, you put a <code>&gt;</code> after the tactic as in <code>rcases&gt;</code>, and this version supports the <code>@</code> syntax with the new behavior. Once the refactor is done we can find/replace <code>rcases&gt;</code> to <code>rcases</code> and similarly for the other <code>rcases</code>-based tactics.</p>\n<p>For example, <a href=\"https://github.com/leanprover-community/mathlib/blob/27b903865678b50ed17a8c783487a0871c220875/src/data/list/lex.lean#L109\">this</a> gives a message:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rcases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">_</span><span class=\"bp\">|</span><span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span><span class=\"n\">_</span><span class=\"o\">,</span><span class=\"n\">_</span><span class=\"o\">,</span><span class=\"n\">h</span><span class=\"o\">⟩</span><span class=\"bp\">|</span><span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span><span class=\"n\">_</span><span class=\"o\">,</span><span class=\"n\">_</span><span class=\"o\">,</span><span class=\"n\">_</span><span class=\"o\">,</span><span class=\"n\">h</span><span class=\"o\">⟩,</span>\n</code></pre></div>\n<p>telling you to remove the <code>_</code> arguments. This can be fixed by either</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rcases</span><span class=\"bp\">&gt;</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">_</span><span class=\"bp\">|@</span><span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span><span class=\"n\">_</span><span class=\"o\">,</span><span class=\"n\">_</span><span class=\"o\">,</span><span class=\"n\">h</span><span class=\"o\">⟩</span><span class=\"bp\">|@</span><span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span><span class=\"n\">_</span><span class=\"o\">,</span><span class=\"n\">_</span><span class=\"o\">,</span><span class=\"n\">_</span><span class=\"o\">,</span><span class=\"n\">h</span><span class=\"o\">⟩,</span>\n</code></pre></div>\n<p>or </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rcases</span><span class=\"bp\">&gt;</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">_</span> <span class=\"bp\">|</span> <span class=\"n\">h</span> <span class=\"bp\">|</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 300461731,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663972976
    },
    {
        "content": "<p>It looks like you made a few more commits to the PR since this message. Am I right in understanding that to do this refactor one just has to recompile that branch and watch for trace messages? I can probably do this later today if no one jumps on it.</p>",
        "id": 300477808,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1663987838
    },
    {
        "content": "<p>yes</p>",
        "id": 300478718,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663988805
    },
    {
        "content": "<p>I pushed a big batch a few minutes ago and now I'm waiting for the compilation to come back again. There was one error but it's a bug in the backcompat extension so it doesn't really matter since it will get removed shortly anyway</p>",
        "id": 300478845,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663988951
    },
    {
        "content": "<p>I added a test case for it for the real version though</p>",
        "id": 300478875,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663988987
    }
]