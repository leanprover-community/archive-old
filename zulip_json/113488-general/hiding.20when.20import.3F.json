[
    {
        "content": "<p>Hi, is there some way to hiding a name when importing a module?</p>",
        "id": 128737287,
        "sender_full_name": "Zesen Qian",
        "timestamp": 1530132312
    },
    {
        "content": "<p>You can do that on a namespace scale: <code>open my_namespace hiding (clashing_def)</code></p>",
        "id": 128737350,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1530132391
    },
    {
        "content": "<p>You can also do selective opening of namespaces</p>",
        "id": 128737357,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1530132414
    },
    {
        "content": "<p>thank you, I'm still new to the name space space. But what if a name is at the top level of a module?</p>",
        "id": 128737377,
        "sender_full_name": "Zesen Qian",
        "timestamp": 1530132447
    },
    {
        "content": "<p>or module itself is a namespace?</p>",
        "id": 128737390,
        "sender_full_name": "Zesen Qian",
        "timestamp": 1530132466
    },
    {
        "content": "<p>The top most namespace is called <code>_root_</code>. Anything in that namespace can be hard to deal with. I'm not sure what the best approach is for dealing with name clashes in the root namespace. The best advice I have is: avoid</p>",
        "id": 128737479,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1530132582
    },
    {
        "content": "<p>A module itself is not a namespace. It would be interesting if it was though. Maybe we can request that feature</p>",
        "id": 128737536,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1530132618
    },
    {
        "content": "<p>OK, maybe I'm wrong, but it seems that parser in  data.buffer.parser is at top level.</p>",
        "id": 128737637,
        "sender_full_name": "Zesen Qian",
        "timestamp": 1530132745
    },
    {
        "content": "<p>I guess that means this name will be there for all modules recursively importing it,</p>",
        "id": 128737654,
        "sender_full_name": "Zesen Qian",
        "timestamp": 1530132776
    },
    {
        "content": "<p>and there is no way to hide it?</p>",
        "id": 128737665,
        "sender_full_name": "Zesen Qian",
        "timestamp": 1530132785
    },
    {
        "content": "<p>hide in what sense?</p>",
        "id": 128737681,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1530132819
    },
    {
        "content": "<p>do you want to name something else <code>parser</code> at the top level?</p>",
        "id": 128737689,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1530132832
    },
    {
        "content": "<p>A import B, B has a top level name which clashes with a name A wants to use.</p>",
        "id": 128737736,
        "sender_full_name": "Zesen Qian",
        "timestamp": 1530132851
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> exactly.</p>",
        "id": 128737750,
        "sender_full_name": "Zesen Qian",
        "timestamp": 1530132872
    },
    {
        "content": "<p>that's bad, avoid it</p>",
        "id": 128737759,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1530132883
    },
    {
        "content": "<p><code>hide</code> does not change actual names, this will cause a name conflict</p>",
        "id": 128737772,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1530132908
    },
    {
        "content": "<p>maybe we should ask the author of standard library to avoid it first.</p>",
        "id": 128737795,
        "sender_full_name": "Zesen Qian",
        "timestamp": 1530132943
    },
    {
        "content": "<p>then we can ask the users to avoid it too.</p>",
        "id": 128737797,
        "sender_full_name": "Zesen Qian",
        "timestamp": 1530132949
    },
    {
        "content": "<p>sadly the core lib is frozen</p>",
        "id": 128737804,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1530132958
    },
    {
        "content": "<p>so you will have to work around it</p>",
        "id": 128737829,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1530132964
    },
    {
        "content": "<p>but it's a global coordination problem, it's not a problem until someone else wants the name</p>",
        "id": 128737888,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1530133006
    },
    {
        "content": "<p>If you define your own <code>parser</code> in your local namespace, doesn't that make it the default definition that will be used as <code>parser</code>?</p>",
        "id": 128737890,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1530133008
    },
    {
        "content": "<p>yes, that will work fine</p>",
        "id": 128737901,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1530133023
    },
    {
        "content": "<p>but it means you can never define <code>_root_.parser</code></p>",
        "id": 128737918,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1530133041
    },
    {
        "content": "<p>since it's been defined already</p>",
        "id": 128737922,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1530133049
    },
    {
        "content": "<p>Right</p>",
        "id": 128737931,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1530133059
    },
    {
        "content": "<p>to solve it once and for all, we need qualified import, like in haskell.</p>",
        "id": 128737985,
        "sender_full_name": "Zesen Qian",
        "timestamp": 1530133091
    },
    {
        "content": "<p>The moral of the story is that you should define most of your stuff in your own namespace</p>",
        "id": 128737988,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1530133097
    },
    {
        "content": "<p>so you can rename a namespace/module</p>",
        "id": 128737989,
        "sender_full_name": "Zesen Qian",
        "timestamp": 1530133098
    },
    {
        "content": "<p>that way core or mathlib can't get in your way</p>",
        "id": 128737998,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1530133119
    },
    {
        "content": "<p>well again, I don't see the std lib doing it,  so I don't feel obligated to do it either.</p>",
        "id": 128737999,
        "sender_full_name": "Zesen Qian",
        "timestamp": 1530133124
    },
    {
        "content": "<p>you aren't stdlib</p>",
        "id": 128738004,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1530133133
    },
    {
        "content": "<p>why his parser is more fundenmental than mine?</p>",
        "id": 128738009,
        "sender_full_name": "Zesen Qian",
        "timestamp": 1530133142
    },
    {
        "content": "<p>I think if we could have a qualification to a module like <code>import data.buffer.parser within buffer</code> as a way of putting all the definitions directly in the <code>parser</code> module in a new <code>buffer</code> namespace, that might help manage this situation</p>",
        "id": 128738014,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1530133143
    },
    {
        "content": "<p>To be fair, I agree that that parser definition should be in the <code>buffer</code> namespace, but in general corelib will take lots of top level names</p>",
        "id": 128738031,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1530133191
    },
    {
        "content": "<p>Unlike in Haskell, though, modules and namespaces are orthogonal in Lean. A module might define names in many namespaces and many modules might define names in the same namespace. So renaming a module doesn't make a lot of sense, in general.</p>",
        "id": 128738032,
        "sender_full_name": "Reid Barton",
        "timestamp": 1530133191
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> that's the \"qualified import\" I was talking about.</p>",
        "id": 128738034,
        "sender_full_name": "Zesen Qian",
        "timestamp": 1530133195
    },
    {
        "content": "<p>That would be a bit different from Haskell though. In Haskell, <code>qualified</code> is a form of renaming</p>",
        "id": 128738102,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1530133240
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> how about this: import A as B. then the top-level def. foo in A becomes B.foo, ns.foo becomes B.ns.foo.</p>",
        "id": 128738107,
        "sender_full_name": "Zesen Qian",
        "timestamp": 1530133261
    },
    {
        "content": "<p>and then you define a top level def?</p>",
        "id": 128738137,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1530133293
    },
    {
        "content": "<p>because then what happens to files C importing A?</p>",
        "id": 128738150,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1530133309
    },
    {
        "content": "<p>yes, I'm the king.</p>",
        "id": 128738152,
        "sender_full_name": "Zesen Qian",
        "timestamp": 1530133310
    },
    {
        "content": "<p>Or worse, a file C that imports A and B?</p>",
        "id": 128738204,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1530133338
    },
    {
        "content": "<p>it might conflict with the current semantics of import in lean.</p>",
        "id": 128738238,
        "sender_full_name": "Zesen Qian",
        "timestamp": 1530133374
    },
    {
        "content": "<p>it sure does</p>",
        "id": 128738244,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1530133382
    },
    {
        "content": "<p>but since lean always break old stuffs, I see that as a good thing.</p>",
        "id": 128738261,
        "sender_full_name": "Zesen Qian",
        "timestamp": 1530133401
    },
    {
        "content": "<p>I mean, what's your solution?</p>",
        "id": 128738271,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1530133416
    },
    {
        "content": "<p>if A has foo, B imports A as A and also defines foo, and C imports A and B, what happens?</p>",
        "id": 128738319,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1530133447
    },
    {
        "content": "<p>there's also the type-directed <code>.</code> notation to worry about</p>",
        "id": 128738321,
        "sender_full_name": "Reid Barton",
        "timestamp": 1530133449
    },
    {
        "content": "<p>I think like in Haskell, the qualification must only be local</p>",
        "id": 128738386,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1530133556
    },
    {
        "content": "<p>a practical solution would need thorough consideration of all factors, esp. the ability of .olean format.</p>",
        "id": 128738389,
        "sender_full_name": "Zesen Qian",
        "timestamp": 1530133561
    },
    {
        "content": "<p>but I would naively believe there must be a better way.</p>",
        "id": 128738439,
        "sender_full_name": "Zesen Qian",
        "timestamp": 1530133586
    },
    {
        "content": "<p>A bigger annoyance IMO is that after you have given up and put your own <code>parser</code> name inside your own namespace, Lean will still consider <code>_root_.parser</code> to be a possible overload for <code>parser</code> (as far as I know?)</p>",
        "id": 128738534,
        "sender_full_name": "Reid Barton",
        "timestamp": 1530133707
    },
    {
        "content": "<p>Not inside your namespace</p>",
        "id": 128738576,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1530133796
    },
    {
        "content": "<p>and if it gives you trouble you can always make <code>parser</code> a local notation</p>",
        "id": 128738629,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1530133825
    },
    {
        "content": "<p>that will clobber any overloads</p>",
        "id": 128738639,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1530133840
    },
    {
        "content": "<p>hmm I feel like I've had trouble with this before... but can't recall the details. Maybe inside tactic mode?</p>",
        "id": 128738643,
        "sender_full_name": "Reid Barton",
        "timestamp": 1530133846
    },
    {
        "content": "<p>And yeah, I used local notation to work around it</p>",
        "id": 128738650,
        "sender_full_name": "Reid Barton",
        "timestamp": 1530133859
    }
]