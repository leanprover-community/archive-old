[
    {
        "content": "<p>In tactic mode, we can introduce a typeclass instance using <code>letI</code>. Is there an analogue that does something similar in term mode? One can, of course, add many <code>@</code>'s and manually put in a named instance when needed, but this gets annoying.</p>\n<p>Here is an example of something I would like to be able to do. The first definition fails because lean can't find a monoid instance for N.<br>\nThe other two definitions work, but are more cumbersome.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"n\">def</span> <span class=\"n\">foo0</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">N</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→*</span> <span class=\"n\">N</span><span class=\"o\">),</span> <span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"c1\">-- fails to find the monoid instance for N.</span>\n\n<span class=\"n\">def</span> <span class=\"n\">foo1</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">monoid</span> <span class=\"n\">N</span><span class=\"o\">),</span>\n  <span class=\"k\">begin</span>\n    <span class=\"n\">letI</span> <span class=\"o\">:=</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→*</span> <span class=\"n\">N</span><span class=\"o\">),</span> <span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n  <span class=\"kn\">end</span> <span class=\"c1\">-- this works</span>\n\n<span class=\"n\">def</span> <span class=\"n\">foo2</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">monoid</span> <span class=\"n\">N</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">monoid_hom</span> <span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"bp\">_</span> <span class=\"n\">h</span><span class=\"o\">),</span> <span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">monoid</span><span class=\"bp\">.</span><span class=\"n\">to_has_one</span> <span class=\"bp\">_</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">one</span> <span class=\"c1\">-- this works</span>\n</code></pre></div>",
        "id": 204460539,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1595271098
    },
    {
        "content": "<p>Nope, the idiom is <code>by letI := h; exact _</code></p>",
        "id": 204460650,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595271149
    },
    {
        "content": "<p>Will/shall/can/must be fixed in <span aria-label=\"four leaf clover\" class=\"emoji emoji-1f340\" role=\"img\" title=\"four leaf clover\">:four_leaf_clover:</span></p>",
        "id": 204460684,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595271171
    },
    {
        "content": "<p>I see. Thanks.</p>",
        "id": 204460813,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1595271229
    },
    {
        "content": "<p>Yeah, so I can make foo1 a bit shorted like this, but it still just tactic mode :(</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">foo1</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">monoid</span> <span class=\"n\">N</span><span class=\"o\">),</span> <span class=\"k\">by</span> <span class=\"n\">letI</span> <span class=\"o\">:=</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→*</span> <span class=\"n\">N</span><span class=\"o\">),</span> <span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n</code></pre></div>",
        "id": 204461054,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1595271312
    },
    {
        "content": "<p>Is there a trick to define <code>notation</code> to achieve this?</p>",
        "id": 205282692,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1595966099
    }
]