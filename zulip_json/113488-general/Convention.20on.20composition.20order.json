[
    {
        "content": "<p>When one composes two functions <code>f</code> and <code>g</code>, the notation <code>g ∘ f</code> means: apply <code>f</code> first, and then <code>g</code>. However, since <code>g</code> is written first, one may want to replicate this in the definitions. For instance, the composition of linear maps takes <code>g</code> first and then <code>f</code>, and can be written as <code>linear_map.comp g f</code>, or as <code>g.comp f</code>. As far as I can tell, this is the convention that is mostly followed in mathlib. Let me call it (1).</p>\n<p>However, there are examples in the other direction. For instance, the fact that the composition of two continuous functions <code>g</code> and <code>f</code> (I mean, <code>g ∘ f</code>) is continuous, is written as <code>continuous.comp hf hg</code> (where <code>hf</code> is the assumption that <code>f</code> is continuous, and similarly for <code>hg</code>). This can also be written as <code>hf.comp hg</code>. Let me call this (2).</p>\n<p>I think this should be made coherent all over mathlib. I started to work on this, with the idea to convert everything to (1). However,  it turns out that category theory follows convention (2), in</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">structure</span> <span class=\"n\">concrete_category</span> <span class=\"o\">(</span><span class=\"n\">hom</span> <span class=\"o\">:</span> <span class=\"n\">out_param</span> <span class=\"err\">$</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">},</span> <span class=\"n\">c</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">c</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">hom_id</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ia</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">hom</span> <span class=\"n\">ia</span> <span class=\"n\">ia</span> <span class=\"n\">id</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">hom_comp</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ia</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ib</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ic</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">},</span> <span class=\"n\">hom</span> <span class=\"n\">ia</span> <span class=\"n\">ib</span> <span class=\"n\">f</span> <span class=\"bp\">→</span> <span class=\"n\">hom</span> <span class=\"n\">ib</span> <span class=\"n\">ic</span> <span class=\"n\">g</span> <span class=\"bp\">→</span> <span class=\"n\">hom</span> <span class=\"n\">ia</span> <span class=\"n\">ic</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"err\">∘</span> <span class=\"n\">f</span><span class=\"o\">))</span>\n</pre></div>\n\n\n<p>And I definitely don't want to mess with category theory without asking first here. Any opinion on this?</p>",
        "id": 165699204,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1557912482
    },
    {
        "content": "<p>Big fights have been fought... epic stories can be told...</p>",
        "id": 165699491,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557912772
    },
    {
        "content": "<p>I find it really hard to care about this sort of question. I'm very happy indeed with the idea of being consistent. I don't care which convention we choose.</p>",
        "id": 165702344,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1557915805
    },
    {
        "content": "<p>While I appreciate Kevin's commitment to not caring about silly issues like this, I want to argue that in certain flavours of higher category theory, writing things in \"the right order \" (i.e. (2)!) actually matters (because there might not even be a 'symmetry' allowing you to change the linear order of inputs!). I'm certainly not going to argue that this consideration says anything about the design of mathlib.</p>",
        "id": 165702869,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1557916353
    },
    {
        "content": "<p>I recognise that I am sufficiently partisan/crackpot about this issue that I don't want my opinion taken too seriously in any of this. :-)</p>",
        "id": 165702876,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1557916378
    },
    {
        "content": "<p>But my suggestion would be: in mathlib outside the category theory library, feel free to uniformise everything in the (1) convention, and in the category theory library, don't bother going to the enormous effort of moving away from (2). :-)</p>",
        "id": 165702907,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1557916415
    },
    {
        "content": "<p>I don't really care about the convention we choose. The basic problem is that the math notation is bad :) Let me go for (1) now just to see how it goes, while leaving category theory untouched as much as possible.</p>",
        "id": 165704264,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1557917915
    },
    {
        "content": "<p>Philosophically speaking, I've always been ambivalent about this sort of thing because I have always been aware that in a parallel universe we could write maps on the right (i.e. write <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>(</mo><mi>x</mi><mo>)</mo><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">(x)f</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mopen\">(</span><span class=\"mord mathit\">x</span><span class=\"mclose\">)</span><span class=\"mord mathit\" style=\"margin-right:0.10764em;\">f</span></span></span></span> for what mathematicians in this universe write as <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>f</mi><mo>(</mo><mi>x</mi><mo>)</mo></mrow><annotation encoding=\"application/x-tex\">f(x)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathit\">x</span><span class=\"mclose\">)</span></span></span></span>) and then composition conventions get turned on their head whilst the underlying ideas don't change. However in functional programming <em>we write maps on the left</em> and because this convention is baked in, perhaps this extends to some other conventions that we should adhere to.</p>",
        "id": 165704775,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1557918535
    },
    {
        "content": "<p>I like how the unix shell got this right: <code>cat foobar | grep something | tr 'abcde' 'ABCDE' | head</code></p>",
        "id": 165704856,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557918608
    },
    {
        "content": "<p>And don't get me started on \"useless use of cat\". There is no such thing as useless use of cat... <span aria-label=\"cat\" class=\"emoji emoji-1f408\" role=\"img\" title=\"cat\">:cat:</span></p>",
        "id": 165704872,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557918650
    },
    {
        "content": "<p>I don't think I've seen (2) used in category theory except in an old paper of Barr which also write application in the other order (<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>X</mi><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">XF</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.07847em;\">X</span><span class=\"mord mathit\" style=\"margin-right:0.13889em;\">F</span></span></span></span> for <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>F</mi><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">FX</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.13889em;\">F</span><span class=\"mord mathit\" style=\"margin-right:0.07847em;\">X</span></span></span></span>). Here is an Australian writing about enriched category theory using (1) in a place where it does make a difference.<br>\n<a href=\"/user_uploads/3121/OhOuPs38hApbrke9JP-4r6GU/Screenshot-from-2019-05-15-07-19-46.png\" target=\"_blank\" title=\"Screenshot-from-2019-05-15-07-19-46.png\">Screenshot-from-2019-05-15-07-19-46.png</a> <br>\n(Kelly, Basic concepts of enriched category theory, p. 8)</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/OhOuPs38hApbrke9JP-4r6GU/Screenshot-from-2019-05-15-07-19-46.png\" target=\"_blank\" title=\"Screenshot-from-2019-05-15-07-19-46.png\"><img src=\"/user_uploads/3121/OhOuPs38hApbrke9JP-4r6GU/Screenshot-from-2019-05-15-07-19-46.png\"></a></div>",
        "id": 165705425,
        "sender_full_name": "Reid Barton",
        "timestamp": 1557919260
    },
    {
        "content": "<p>(2) makes larger formulas hard to read when dealing with sets or presheaves of sets and their elements, or functors acting on objects, because of the reorderings in <code>(f ≫ g) x = g (f x)</code> and <code>(F ⋙ G).obj x = G.obj (F.obj x)</code></p>",
        "id": 165705515,
        "sender_full_name": "Reid Barton",
        "timestamp": 1557919345
    },
    {
        "content": "<p>Can we ask for function application to be written on the right in <span aria-label=\"four leaf clover\" class=\"emoji emoji-1f340\" role=\"img\" title=\"four leaf clover\">:four_leaf_clover:</span>? :-)</p>",
        "id": 165708737,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1557922436
    },
    {
        "content": "<p>They already have camelCase<br>\nStoke the fires of the revolution</p>",
        "id": 165708814,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1557922487
    },
    {
        "content": "<p>Done in <a href=\"https://github.com/leanprover-community/mathlib/issues/1035\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/1035\">#1035</a>. I am sure I missed some instances, but I fixed notably continuous functions, measurable functions and derivatives. I only took care of <code>comp</code> stuff, which means that the order is not changed for <code>trans</code> stuff (in particular for equivs). Still looks much more coherent to me. Everything went smoothly (and tediously), except for some derivatives statements where Lean could not figure out the types I wanted when I changed the order, so I had to help it a little bit (see <a href=\"https://github.com/sgouezel/mathlib/blob/8cfe412cbb88d6a2d4f7a06f8a3f0600460b222c/src/analysis/normed_space/deriv.lean#L1139\" target=\"_blank\" title=\"https://github.com/sgouezel/mathlib/blob/8cfe412cbb88d6a2d4f7a06f8a3f0600460b222c/src/analysis/normed_space/deriv.lean#L1139\">https://github.com/sgouezel/mathlib/blob/8cfe412cbb88d6a2d4f7a06f8a3f0600460b222c/src/analysis/normed_space/deriv.lean#L1139</a>)</p>",
        "id": 165719556,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1557930861
    },
    {
        "content": "<p>Working on the category library a bit, it is confusing that <code>(F ⋙ G).obj X</code> is not definitionally equal to <code>F.obj (G.obj X)</code> but to <code>G.obj (F.obj X)</code>. In other places, where you compose a bunch of morphisms or functors, it is more natural to think \"from left to right\", and have composition follow convention (2). So I agree with Kevin here in not really caring.</p>",
        "id": 165723194,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1557933525
    },
    {
        "content": "<blockquote>\n<p>except for some derivatives statements where Lean could not figure out the types I wanted when I changed the order, so I had to help it a little bit (see <a href=\"https://github.com/sgouezel/mathlib/blob/8cfe412cbb88d6a2d4f7a06f8a3f0600460b222c/src/analysis/normed_space/deriv.lean#L1139\" target=\"_blank\" title=\"https://github.com/sgouezel/mathlib/blob/8cfe412cbb88d6a2d4f7a06f8a3f0600460b222c/src/analysis/normed_space/deriv.lean#L1139\">https://github.com/sgouezel/mathlib/blob/8cfe412cbb88d6a2d4f7a06f8a3f0600460b222c/src/analysis/normed_space/deriv.lean#L1139</a>)</p>\n</blockquote>\n<p>That line is not pretty at all. Are you sure it does not reveal a deeper problem with the interface?</p>",
        "id": 165723548,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1557933761
    },
    {
        "content": "<p>That's a good question. I don't have a good answer here, as I don't know enough about how Lean tries to infer types (there are some heuristics at play, but here Lean gets it wrong).</p>",
        "id": 165724413,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1557934286
    },
    {
        "content": "<p>I'm a little more worried that, after monoidal categories, we'll get enriched categories with the opposite definition from the rest of the world.<br>\nOf course, from a math perspective it's just a matter of convention--like left modules vs right modules.</p>",
        "id": 165732063,
        "sender_full_name": "Reid Barton",
        "timestamp": 1557939558
    },
    {
        "content": "<p>Coherence with the rest of the world when it is possible looks like an important goal (to avoid increasing even more the entrance barrier). Unless the rest of the world is obviously wrong, of course.</p>",
        "id": 165734296,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1557941094
    },
    {
        "content": "<p>I would like to know if people are interested in <a href=\"https://github.com/leanprover-community/mathlib/issues/1035\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/1035\">#1035</a> (making sure that most <code>comp</code> lemmas use the same convention all over mathlib): as it touches many files, it will bitrot very quickly, and I don't know if my work in progress should be based on it or not. It would help me a lot if it could be either closed quickly, or merged quickly :)</p>",
        "id": 165901220,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1558100591
    },
    {
        "content": "<p>I am in favour of merging this.</p>",
        "id": 165904540,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1558103223
    },
    {
        "content": "<p>I've approved it for merge</p>",
        "id": 165904709,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558103364
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 165904827,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1558103433
    }
]