[
    {
        "content": "<p>I see the same behavior with 3.4.2.</p>",
        "id": 201803008,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1592960986
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">trivial</span>\n<span class=\"bp\">.</span>\n<span class=\"bp\">#</span><span class=\"n\">che</span>\n</code></pre></div>\n\n\n<p>works fine, and</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">sorry</span>\n<span class=\"bp\">#</span><span class=\"n\">che</span>\n</code></pre></div>\n\n\n<p>is broken, while</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n<span class=\"bp\">#</span><span class=\"n\">che</span>\n</code></pre></div>\n\n\n<p>is okay!</p>",
        "id": 201803176,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1592961143
    },
    {
        "content": "<p>So maybe something in the tactic parser?</p>",
        "id": 201803223,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1592961232
    },
    {
        "content": "<p>Yeah looks like it:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"n\">sorry</span><span class=\"o\">}</span>\n<span class=\"bp\">#</span><span class=\"n\">che</span>\n</code></pre></div>\n\n\n<p>is okay also.</p>",
        "id": 201803279,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1592961277
    },
    {
        "content": "<p>It doesn't need to be <code>#che</code>,  <code>#</code> is also broken</p>",
        "id": 201803284,
        "sender_full_name": "Lucas Viana",
        "timestamp": 1592961281
    },
    {
        "content": "<p>But it must be incomplete (<code>#check</code> is okay)</p>",
        "id": 201803316,
        "sender_full_name": "Lucas Viana",
        "timestamp": 1592961333
    },
    {
        "content": "<p>How is <code>#che</code> lexed? I don't think <code>#</code> is a valid identifier character, but then I'm not sure how commands containing <code>#</code> work</p>",
        "id": 201803777,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592961933
    },
    {
        "content": "<p>More examples:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">sorry</span> <span class=\"bp\">#</span> <span class=\"o\">}</span> <span class=\"c1\">-- broken</span>\n</code></pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span> <span class=\"o\">{</span> <span class=\"n\">sorry</span> <span class=\"bp\">#</span> <span class=\"o\">}</span> <span class=\"kn\">end</span> <span class=\"c1\">-- broken</span>\n</code></pre></div>",
        "id": 201804675,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1592963311
    },
    {
        "content": "<p>Is it still broken if <code>#</code> is a notation, say an infix or prefix operator?</p>",
        "id": 201807374,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592967298
    },
    {
        "content": "<p>I think in core <code>#</code> doesn't mean anything</p>",
        "id": 201807385,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592967324
    },
    {
        "content": "<p>Ah, you're onto something:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">sorry</span> <span class=\"bp\">#</span><span class=\"o\">,</span> <span class=\"c1\">-- broken</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">notation</span> <span class=\"bp\">#</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">sorry</span> <span class=\"bp\">#</span><span class=\"o\">,</span> <span class=\"c1\">-- errors as expected</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 201810902,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1592973405
    },
    {
        "content": "<p>My guess is that <code>#</code> doesn't fall in any lexical class, and lean bugs out</p>",
        "id": 201812589,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592975980
    },
    {
        "content": "<p>if you declare it as a notation then it becomes a token</p>",
        "id": 201812640,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592976017
    },
    {
        "content": "<p>I was staring at <a href=\"https://github.com/leanprover-community/lean/blob/a1bf3fd63336d28697a1e0a69f5753b913f3b39a/src/frontends/lean/tactic_notation.cpp#L169\"><code>parse_interactive_tactic</code></a> and the stuff it calls a little earlier, but I wasn't able to make any progress without access to a debugger. Presumably Gabriel will be able to figure out what's going on instantaneously.</p>",
        "id": 201812666,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1592976084
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean/issues/356\">lean#356</a></p>",
        "id": 201821431,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1592986323
    },
    {
        "content": "<p>Bryan was right :-)</p>",
        "id": 201821839,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592986665
    }
]