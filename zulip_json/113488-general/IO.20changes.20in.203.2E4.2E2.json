[
    {
        "content": "<p>In lean 3.4.2 the mode for subprocess pipes was changed ---  in 3.4.1 pipes are binary, but in 3.4.2 they are utf-8.  Is there some way to change the mode of these pipes (either before or after they are created?)  I looked and couldn't see anything obvious.</p>",
        "id": 159400352,
        "sender_full_name": "Simon Winwood",
        "timestamp": 1551159832
    },
    {
        "content": "<p>are you talking about this commit: <a href=\"https://github.com/leanprover/lean/commit/4e16bc7192f9f32b03222142e659fa3dae4b8025#diff-6915aa5b8efa0a177a7155df746d3a21\" target=\"_blank\" title=\"https://github.com/leanprover/lean/commit/4e16bc7192f9f32b03222142e659fa3dae4b8025#diff-6915aa5b8efa0a177a7155df746d3a21\">https://github.com/leanprover/lean/commit/4e16bc7192f9f32b03222142e659fa3dae4b8025#diff-6915aa5b8efa0a177a7155df746d3a21</a>?</p>",
        "id": 159400663,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1551160261
    },
    {
        "content": "<p>Probably want to ask <span class=\"user-mention\" data-user-id=\"110111\">@Keeley Hoek</span></p>",
        "id": 159400734,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1551160342
    },
    {
        "content": "<p>Possibly?  I noticed it when my lean program started behaving really oddly, and I tracked it down to a change in the release notes.</p>",
        "id": 159404379,
        "sender_full_name": "Simon Winwood",
        "timestamp": 1551165839
    },
    {
        "content": "<p>(Looks like the zulip app tricked me I to posting twice, sorry)</p>",
        "id": 159404424,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1551165852
    },
    {
        "content": "<p>Hey!</p>\n<p>By default pipes weren't binary, they were text mode. The commit referenced instead changes the behaviour of text mode pipes to properly decode utf-8 characters when writing them (and encode when reading), instead of just butchering the internal representation of each character by truncating it to the lowest 8 bits. </p>\n<p>This behaviour is only enabled in text mode, and the function in the io namespace which opens a file descriptor handle takes an optional boolean true or false argument which specifies whether to open the handle in text (ff) or binary (tt) mode.</p>",
        "id": 159404446,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1551165925
    },
    {
        "content": "<p>This isn't enabled for process pipes though --- I can't change the mode of a pipe as far as I can tell.<br>\n\\</p>",
        "id": 159404492,
        "sender_full_name": "Simon Winwood",
        "timestamp": 1551165985
    },
    {
        "content": "<p>This might be more due to me abusing lean's char type, but there doesn't seem to be any byte buffer support</p>",
        "id": 159404509,
        "sender_full_name": "Simon Winwood",
        "timestamp": 1551166060
    },
    {
        "content": "<p>Ooooh, yep that sound bad. A problem will arise when lean reads a byte from a process handle with the highest bit set (i.e. non ASCII). I'm less certain about what would happen if an invalid unicode character is written...</p>",
        "id": 159404706,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1551166327
    },
    {
        "content": "<p>Is that consistent with what you're seeing?</p>",
        "id": 159404736,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1551166409
    },
    {
        "content": "<p>I am reading from a file and writing to a pipe, and getting unexpected results on the other end of the pipe.  The text coming back is all ascii, so I am fine there</p>",
        "id": 159405853,
        "sender_full_name": "Simon Winwood",
        "timestamp": 1551167733
    },
    {
        "content": "<p>I need to head off.  This isn't blocking anything, but it would be nice to figure out a workaround, esp. for future releases.  Maybe something like byte-buffers (instead of just char buffers)?  I don't know what the plan for lean 4 looks like either</p>",
        "id": 159406135,
        "sender_full_name": "Simon Winwood",
        "timestamp": 1551168024
    },
    {
        "content": "<p>thanks for replying so quickly btw</p>",
        "id": 159406144,
        "sender_full_name": "Simon Winwood",
        "timestamp": 1551168035
    },
    {
        "content": "<p>I work with Simon.  It sounds like we're definitely not able to upgrade to Lean 3.4.2 until we find a way to send binary data from another process into Lean.  We could do tricks like base64 encode the data, but for now I think we'll just stay with Lean 3.4.1 until Lean 4 is out with a C FFI.</p>",
        "id": 160035030,
        "sender_full_name": "Joe Hendrix",
        "timestamp": 1551816004
    },
    {
        "content": "<p>What's the issue? I have written a lean program that reads binary data, so I think it's at least possible to get the behavior you want</p>",
        "id": 160035763,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551816487
    },
    {
        "content": "<p>here's a small demo:</p>\n<div class=\"codehilite\"><pre><span></span>$ printf &quot;%b&quot; &#39;\\xca\\xfe\\xba\\xbe&#39; &gt; test.bin\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">system</span><span class=\"bp\">.</span><span class=\"n\">io</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">do</span>\n  <span class=\"n\">h</span> <span class=\"err\">←</span> <span class=\"n\">io</span><span class=\"bp\">.</span><span class=\"n\">mk_file_handle</span> <span class=\"s2\">&quot;test.bin&quot;</span> <span class=\"n\">io</span><span class=\"bp\">.</span><span class=\"n\">mode</span><span class=\"bp\">.</span><span class=\"n\">read</span> <span class=\"n\">tt</span><span class=\"o\">,</span>\n  <span class=\"bp\">⟨</span><span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"bp\">⟩</span> <span class=\"err\">←</span> <span class=\"n\">io</span><span class=\"bp\">.</span><span class=\"n\">fs</span><span class=\"bp\">.</span><span class=\"n\">read</span> <span class=\"n\">h</span> <span class=\"mi\">4</span><span class=\"o\">,</span>\n  <span class=\"n\">trace</span> <span class=\"o\">(</span><span class=\"n\">to_string</span> <span class=\"err\">$</span> <span class=\"n\">char</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">&lt;</span><span class=\"err\">$</span><span class=\"bp\">&gt;</span> <span class=\"n\">array</span><span class=\"bp\">.</span><span class=\"n\">to_list</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">return</span> <span class=\"o\">())</span>\n  <span class=\"c1\">-- [202, 254, 186, 190]</span>\n</pre></div>",
        "id": 160037086,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551817573
    },
    {
        "content": "<p>We want to read binary data from stdout on a process created by <code>io.proc.spawn</code>.</p>",
        "id": 160039764,
        "sender_full_name": "Joe Hendrix",
        "timestamp": 1551819732
    }
]