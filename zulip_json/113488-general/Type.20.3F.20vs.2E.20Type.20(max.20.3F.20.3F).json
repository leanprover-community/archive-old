[
    {
        "content": "<p>Can someone explain why the first two of these typecheck, but the last one doesn't. It has something to do with universes, but I don't understand. Is there a way I can make this work?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.normed.group.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.star.basic</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">star_ring_aut.to_add_monoid_hom</span>\n<span class=\"c1\">-- ring_equiv.to_add_monoid_hom star_ring_aut : ?M_1 →+ ?M_1</span>\n<span class=\"k\">#check</span> <span class=\"n\">add_monoid_hom.isometry_of_norm</span>\n<span class=\"c1\">-- add_monoid_hom.isometry_of_norm : ∀ (f : ?M_1 →+ ?M_2),</span>\n<span class=\"c1\">-- (∀ (x : ?M_1), ∥⇑f x∥ = ∥x∥) → isometry ⇑f</span>\n<span class=\"k\">#check</span> <span class=\"n\">star_ring_aut.to_add_monoid_hom.isometry_of_norm</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">type mismatch at application</span>\n<span class=\"cm\">  (ring_equiv.to_add_monoid_hom star_ring_aut).isometry_of_norm</span>\n<span class=\"cm\">term</span>\n<span class=\"cm\">  ring_equiv.to_add_monoid_hom star_ring_aut</span>\n<span class=\"cm\">has type</span>\n<span class=\"cm\">  ?m_1 →+ ?m_1 : Type ?</span>\n<span class=\"cm\">but is expected to have type</span>\n<span class=\"cm\">  ?m_1 →+ ?m_2 : Type (max ? ?)</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 263241675,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1638331069
    },
    {
        "content": "<p>Not answering your question, but what are you using <code>isometry_of_norm</code> for?  In general I would expect <a href=\"https://github.com/leanprover-community/mathlib/blob/49f8b6b87321fb5672a4d8db01f27cc4776f191c/src/analysis/normed_space/star.lean#L84\"><code>starₗᵢ</code></a> to provide facts about the isometry more efficiently.</p>",
        "id": 263241915,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1638331247
    },
    {
        "content": "<p>I don't think the error is actually about universes. Run it with <code>set_option pp.all true</code>?</p>",
        "id": 263242007,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1638331378
    },
    {
        "content": "<p>with <code>set_option pp.all true</code> ...</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"bp\">@</span><span class=\"n\">add_monoid_hom.isometry_of_norm.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">l_1</span> <span class=\"bp\">?</span><span class=\"n\">l_2</span><span class=\"o\">}</span> <span class=\"bp\">?</span><span class=\"n\">m_3</span> <span class=\"bp\">?</span><span class=\"n\">m_4</span> <span class=\"bp\">?</span><span class=\"n\">m_5</span> <span class=\"bp\">?</span><span class=\"n\">m_6</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring_equiv.to_add_monoid_hom.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">l_7</span> <span class=\"bp\">?</span><span class=\"n\">l_7</span><span class=\"o\">}</span> <span class=\"bp\">?</span><span class=\"n\">m_8</span> <span class=\"bp\">?</span><span class=\"n\">m_8</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">semiring.to_non_assoc_semiring.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">l_7</span><span class=\"o\">}</span> <span class=\"bp\">?</span><span class=\"n\">m_8</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_semiring.to_semiring.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">l_7</span><span class=\"o\">}</span> <span class=\"bp\">?</span><span class=\"n\">m_8</span> <span class=\"bp\">?</span><span class=\"n\">m_9</span><span class=\"o\">))</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">semiring.to_non_assoc_semiring.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">l_7</span><span class=\"o\">}</span> <span class=\"bp\">?</span><span class=\"n\">m_8</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_semiring.to_semiring.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">l_7</span><span class=\"o\">}</span> <span class=\"bp\">?</span><span class=\"n\">m_8</span> <span class=\"bp\">?</span><span class=\"n\">m_9</span><span class=\"o\">))</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">star_ring_aut.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">l_7</span><span class=\"o\">}</span> <span class=\"bp\">?</span><span class=\"n\">m_8</span> <span class=\"bp\">?</span><span class=\"n\">m_9</span> <span class=\"bp\">?</span><span class=\"n\">m_10</span><span class=\"o\">))</span>\n<span class=\"n\">term</span>\n  <span class=\"bp\">@</span><span class=\"n\">ring_equiv.to_add_monoid_hom.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">l_1</span> <span class=\"bp\">?</span><span class=\"n\">l_1</span><span class=\"o\">}</span> <span class=\"bp\">?</span><span class=\"n\">m_2</span> <span class=\"bp\">?</span><span class=\"n\">m_2</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">semiring.to_non_assoc_semiring.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">l_1</span><span class=\"o\">}</span> <span class=\"bp\">?</span><span class=\"n\">m_2</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_semiring.to_semiring.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">l_1</span><span class=\"o\">}</span> <span class=\"bp\">?</span><span class=\"n\">m_2</span> <span class=\"bp\">?</span><span class=\"n\">m_3</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">semiring.to_non_assoc_semiring.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">l_1</span><span class=\"o\">}</span> <span class=\"bp\">?</span><span class=\"n\">m_2</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_semiring.to_semiring.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">l_1</span><span class=\"o\">}</span> <span class=\"bp\">?</span><span class=\"n\">m_2</span> <span class=\"bp\">?</span><span class=\"n\">m_3</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">star_ring_aut.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">l_1</span><span class=\"o\">}</span> <span class=\"bp\">?</span><span class=\"n\">m_2</span> <span class=\"bp\">?</span><span class=\"n\">m_3</span> <span class=\"bp\">?</span><span class=\"n\">m_4</span><span class=\"o\">)</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">@</span><span class=\"n\">add_monoid_hom.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">l_1</span> <span class=\"bp\">?</span><span class=\"n\">l_1</span><span class=\"o\">}</span> <span class=\"bp\">?</span><span class=\"n\">m_2</span> <span class=\"bp\">?</span><span class=\"n\">m_2</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_monoid.to_add_zero_class.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">l_1</span><span class=\"o\">}</span> <span class=\"bp\">?</span><span class=\"n\">m_2</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_monoid.to_add_monoid.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">l_1</span><span class=\"o\">}</span> <span class=\"bp\">?</span><span class=\"n\">m_2</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">non_unital_non_assoc_semiring.to_add_comm_monoid.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">l_1</span><span class=\"o\">}</span> <span class=\"bp\">?</span><span class=\"n\">m_2</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">non_assoc_semiring.to_non_unital_non_assoc_semiring.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">l_1</span><span class=\"o\">}</span> <span class=\"bp\">?</span><span class=\"n\">m_2</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">semiring.to_non_assoc_semiring.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">l_1</span><span class=\"o\">}</span> <span class=\"bp\">?</span><span class=\"n\">m_2</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_semiring.to_semiring.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">l_1</span><span class=\"o\">}</span> <span class=\"bp\">?</span><span class=\"n\">m_2</span> <span class=\"bp\">?</span><span class=\"n\">m_3</span><span class=\"o\">))))))</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_monoid.to_add_zero_class.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">l_1</span><span class=\"o\">}</span> <span class=\"bp\">?</span><span class=\"n\">m_2</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_monoid.to_add_monoid.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">l_1</span><span class=\"o\">}</span> <span class=\"bp\">?</span><span class=\"n\">m_2</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">non_unital_non_assoc_semiring.to_add_comm_monoid.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">l_1</span><span class=\"o\">}</span> <span class=\"bp\">?</span><span class=\"n\">m_2</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">non_assoc_semiring.to_non_unital_non_assoc_semiring.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">l_1</span><span class=\"o\">}</span> <span class=\"bp\">?</span><span class=\"n\">m_2</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">semiring.to_non_assoc_semiring.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">l_1</span><span class=\"o\">}</span> <span class=\"bp\">?</span><span class=\"n\">m_2</span>\n                   <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_semiring.to_semiring.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">l_1</span><span class=\"o\">}</span> <span class=\"bp\">?</span><span class=\"n\">m_2</span> <span class=\"bp\">?</span><span class=\"n\">m_3</span><span class=\"o\">))))))</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"n\">l_1</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">@</span><span class=\"n\">add_monoid_hom.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">l_1</span> <span class=\"bp\">?</span><span class=\"n\">l_2</span><span class=\"o\">}</span> <span class=\"bp\">?</span><span class=\"n\">m_3</span> <span class=\"bp\">?</span><span class=\"n\">m_4</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_monoid.to_add_zero_class.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">l_1</span><span class=\"o\">}</span> <span class=\"bp\">?</span><span class=\"n\">m_3</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">sub_neg_monoid.to_add_monoid.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">l_1</span><span class=\"o\">}</span> <span class=\"bp\">?</span><span class=\"n\">m_3</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_group.to_sub_neg_monoid.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">l_1</span><span class=\"o\">}</span> <span class=\"bp\">?</span><span class=\"n\">m_3</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_group.to_add_group.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">l_1</span><span class=\"o\">}</span> <span class=\"bp\">?</span><span class=\"n\">m_3</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">semi_normed_group.to_add_comm_group.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">l_1</span><span class=\"o\">}</span> <span class=\"bp\">?</span><span class=\"n\">m_3</span> <span class=\"bp\">?</span><span class=\"n\">m_5</span><span class=\"o\">)))))</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_monoid.to_add_zero_class.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">l_2</span><span class=\"o\">}</span> <span class=\"bp\">?</span><span class=\"n\">m_4</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">sub_neg_monoid.to_add_monoid.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">l_2</span><span class=\"o\">}</span> <span class=\"bp\">?</span><span class=\"n\">m_4</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_group.to_sub_neg_monoid.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">l_2</span><span class=\"o\">}</span> <span class=\"bp\">?</span><span class=\"n\">m_4</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_group.to_add_group.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">l_2</span><span class=\"o\">}</span> <span class=\"bp\">?</span><span class=\"n\">m_4</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">semi_normed_group.to_add_comm_group.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">l_2</span><span class=\"o\">}</span> <span class=\"bp\">?</span><span class=\"n\">m_4</span> <span class=\"bp\">?</span><span class=\"n\">m_6</span><span class=\"o\">)))))</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"bp\">?</span><span class=\"n\">l_1</span> <span class=\"bp\">?</span><span class=\"n\">l_2</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 263242074,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1638331481
    },
    {
        "content": "<p>The given object is talking about a <code>comm_semiring</code>, but it seems to want a <code>semi_normed_group</code></p>",
        "id": 263242095,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1638331531
    },
    {
        "content": "<p>the <code>R</code> argument of <code>star_ring_aut</code> should probably be explicit</p>",
        "id": 263242210,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1638331594
    },
    {
        "content": "<p>ah, I see, yes that makes sense.</p>",
        "id": 263242253,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1638331660
    },
    {
        "content": "<p>I think this will work if you use some <code>R</code> which is both a <code>comm_semiring</code> and a <code>semi_normed_group</code>, although I don't know what the appropriate class is</p>",
        "id": 263242349,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1638331799
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.normed_space.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.star.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">normed_comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">star_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">star_ring_aut</span> <span class=\"o\">:</span> <span class=\"n\">ring_aut</span> <span class=\"n\">R</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_add_monoid_hom.isometry_of_norm</span>\n</code></pre></div>",
        "id": 263242393,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1638331813
    },
    {
        "content": "<p>... I guess <code>normed_comm_ring</code></p>",
        "id": 263242403,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1638331836
    },
    {
        "content": "<p>But, like I said, it's likely better to use <a href=\"https://github.com/leanprover-community/mathlib/blob/49f8b6b87321fb5672a4d8db01f27cc4776f191c/src/analysis/normed_space/star.lean#L84\"><code>starₗᵢ</code></a></p>",
        "id": 263242428,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1638331879
    },
    {
        "content": "<p>Heather, I'm instantiating the bounded continuous functions (with appropriate hypotheses on the codomain) as a C^*-algebra. As part of this, I need to show that the <code>star</code> operation is a bounded continuous function, and I thought the best way to go would be to get an isometry to show that it's Lipschitz and then the composition of a bounded continuous function and lipschitz function is bounded continuous.</p>",
        "id": 263242490,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1638331925
    },
    {
        "content": "<p>I'll have a look at <a href=\"https://github.com/leanprover-community/mathlib/blob/49f8b6b87321fb5672a4d8db01f27cc4776f191c/src/analysis/normed_space/star.lean#L84\"><code>starₗᵢ</code></a></p>",
        "id": 263242518,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1638331983
    },
    {
        "content": "<p>Ah!  Check out <a href=\"https://leanprover-community.github.io/mathlib_docs/find/continuous_linear_map.comp_left_continuous\">docs#continuous_linear_map.comp_left_continuous</a> maybe.</p>",
        "id": 263242710,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1638332219
    },
    {
        "content": "<p>Or <a href=\"https://leanprover-community.github.io/mathlib_docs/find/continuous_linear_map.comp_left_continuous_bounded\">docs#continuous_linear_map.comp_left_continuous_bounded</a></p>",
        "id": 263242732,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1638332254
    },
    {
        "content": "<p>I had to do something like this in the lemma <a href=\"https://leanprover-community.github.io/mathlib_docs/find/subalgebra.separates_points.complex_to_real\">docs#subalgebra.separates_points.complex_to_real</a> to refer to (secretly) the star operation on bounded continuous functions.</p>",
        "id": 263242795,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1638332332
    },
    {
        "content": "<p>Those are nice, but they seem to have too many hypotheses, like a <code>nondiscrete_normed_field</code>. In particular, it should be possible to show that if</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_ring</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">star_ring</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">cstar_ring</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>then <code>α →ᵇ β</code> is a <code>cstar_ring</code>.</p>",
        "id": 263243012,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1638332665
    },
    {
        "content": "<p>I already have a 5 line tactic proof of boundedness, but I was just trying to get better at golfing and using the library.</p>",
        "id": 263243119,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1638332824
    },
    {
        "content": "<p>Perhaps you can do the <code>ring_hom</code> analogue of those in the bounded continuous category.  I added all the different algebraic structure variants in the continuous category before I got bored, including <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ring_hom.comp_left_continuous\">docs#ring_hom.comp_left_continuous</a></p>",
        "id": 263243187,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1638332906
    },
    {
        "content": "<p>If you think that <code>starₗᵢ</code> still holds in greater generality, by all means make a PR for it</p>",
        "id": 263243189,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1638332911
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 263243467,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1638333317
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 263243473,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1638333334
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> if <code>[normed_group E] [star_add_monoid E] [normed_star_monoid E]</code>, then <code>star</code> should be an isometric <code>add_equiv</code>, but I don't think we have a bundle for such things. I don't know of a case when something like that ever comes up.</p>",
        "id": 263245033,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1638335103
    },
    {
        "content": "<p>Heather, I can work on those at some point soon.</p>",
        "id": 263245106,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1638335172
    },
    {
        "content": "<p>Feel free to do it the low-tech way (without building up these new algebraic constructions) if it's easier.</p>",
        "id": 263245390,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1638335562
    },
    {
        "content": "<p>well, one reason it's a bit tricky to apply here is that <code>star</code> is an anti-automorphism.</p>",
        "id": 263245625,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1638335849
    },
    {
        "content": "<p>Yes, I am realizing now why you were using <code>normed_add_hom</code> at the start of the thread.</p>",
        "id": 263246508,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1638336688
    },
    {
        "content": "<p>well, I wasn't because I was being silly. I think I should have been using <code>star_add_equiv</code>.</p>",
        "id": 263246752,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1638336929
    }
]