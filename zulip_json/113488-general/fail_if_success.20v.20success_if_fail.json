[
    {
        "content": "<p>OK so what's the difference between <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#fail_if_success\">fail_if_success</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#success_if_fail\">success_if_fail</a>?</p>\n<p>Source code is I think this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">fail_if_success</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">result</span><span class=\"bp\">.</span><span class=\"n\">cases_on</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">mk_exception</span> <span class=\"s2\">&quot;fail_if_success combinator failed, given tactic succeeded&quot;</span> <span class=\"n\">none</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">e</span> <span class=\"n\">ref</span> <span class=\"n\">s&#39;</span><span class=\"o\">,</span> <span class=\"n\">success</span> <span class=\"o\">()</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">success_if_fail</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"k\">match</span> <span class=\"n\">t</span> <span class=\"n\">s</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">interaction_monad</span><span class=\"bp\">.</span><span class=\"n\">result</span><span class=\"bp\">.</span><span class=\"n\">exception</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">s&#39;</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">success</span> <span class=\"o\">()</span> <span class=\"n\">s</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">interaction_monad</span><span class=\"bp\">.</span><span class=\"n\">result</span><span class=\"bp\">.</span><span class=\"n\">success</span> <span class=\"n\">a</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n   <span class=\"n\">mk_exception</span> <span class=\"s2\">&quot;success_if_fail combinator failed, given tactic succeeded&quot;</span> <span class=\"n\">none</span> <span class=\"n\">s</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 197855617,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589731125
    },
    {
        "content": "<p>these are identical. Not the best naming convention</p>",
        "id": 197860478,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589737500
    },
    {
        "content": "<p>I believe the Coq naming convention would suit best in this case. In Coq you just have <code>Fail some_command</code>. Note, however, that this is different from the <code>fail</code> tactic, which is a tactic that always fail. Does Lean also have such tactic?</p>",
        "id": 197957358,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1589818238
    },
    {
        "content": "<p>Overloading this name shouldn't cause any confusion tho, <code>fail some_tactic</code> could behave like <code>fail_if_success some_tactic</code> and just <code>fail</code> could always fail if such tactic is deemed necessary.</p>",
        "id": 197957535,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1589818315
    },
    {
        "content": "<p>Is <code>Fail</code> a top-level command then?</p>",
        "id": 197958348,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589818649
    },
    {
        "content": "<p>Yes, <code>Fail</code> is a vernacular command and <code>fail</code> is a tactic.</p>",
        "id": 197959268,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1589818989
    },
    {
        "content": "<p>Trivial question: does Lean also have this distinction? It appears to be the case with say tactics vs <code>#</code>-commands.</p>",
        "id": 197959467,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1589819070
    },
    {
        "content": "<p>It does. Commands are created with the <code>@[user_command]</code>attribute and have to have the type <code>parser unit</code> while tactics have type <code>tactic unit</code> and have to be located in the <code>interactive</code> namespace for the parser to pick them up</p>",
        "id": 197959829,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1589819214
    },
    {
        "content": "<p>Do user commands force the preceding declaration to end (like <code>lemma</code> does for example)?</p>",
        "id": 197960037,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589819293
    },
    {
        "content": "<p>Mostly, yes. I think there is an issue with putting one right after the <code>import</code> section though (unless <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> fixed it in the recent releases)</p>",
        "id": 197960610,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1589819504
    },
    {
        "content": "<p>It was fixed a few releases ago.  Just write the command in the first column and you're fine.</p>",
        "id": 197960741,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1589819548
    },
    {
        "content": "<p>So, effectively they do not live in a separate namespace</p>",
        "id": 197961033,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589819680
    }
]