[
    {
        "content": "<p>I wrote presheaves of types twice in my life and I see now that my definitions differ.</p>",
        "id": 123268484,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520183756
    },
    {
        "content": "<p>First is</p>",
        "id": 123268485,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520183758
    },
    {
        "content": "<p><code>(F : Π U : set α, T.is_open U → Type*) </code></p>",
        "id": 123268528,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520183793
    },
    {
        "content": "<p>Second is</p>",
        "id": 123268536,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520183826
    },
    {
        "content": "<p><code>(F : {U // topological_space.is_open T U} → Type*)</code></p>",
        "id": 123268537,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520183834
    },
    {
        "content": "<p>Which is \"better\"?</p>",
        "id": 123268539,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520183838
    },
    {
        "content": "<p>I seem to be able to work with either</p>",
        "id": 123268544,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520183854
    },
    {
        "content": "<p>Is the only difference that with the first I have two different names U and HU, and with the second I have V.val and V.property?</p>",
        "id": 123268647,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520184063
    },
    {
        "content": "<p>Yes, it is analogous to the difference between <code>A → B → C</code> and <code>A ∧ B → C</code>.</p>",
        "id": 123268652,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1520184100
    },
    {
        "content": "<p>But with those two choices, functional program people prefer the first, right?</p>",
        "id": 123268694,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520184131
    },
    {
        "content": "<p>Proof assistant people seem to always prefer <code>A → B → C</code>, so which is better for presheaves?</p>",
        "id": 123268696,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1520184146
    },
    {
        "content": "<p>which is which ;-)</p>",
        "id": 123268697,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520184156
    },
    {
        "content": "<p>Presumably H.1 and H.2 is V.val and V.property so this is the one I should perhaps avoid</p>",
        "id": 123268698,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520184178
    },
    {
        "content": "<p>The second one also gives you the name \"V\", which for doing abstract sheaf theory things (that don't care about the particular site) seems like it would be more convenient.</p>",
        "id": 123268699,
        "sender_full_name": "Reid Barton",
        "timestamp": 1520184179
    },
    {
        "content": "<p>oh but here's a difference: A and B is a type</p>",
        "id": 123268704,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520184198
    },
    {
        "content": "<p>so it can be used more easily as a target</p>",
        "id": 123268705,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520184217
    },
    {
        "content": "<p>This doesn't seem to matter in practice. I am going for set because it seems to be analogous to the \"more functional\" <code>A -&gt; B -&gt; C</code></p>",
        "id": 123268797,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1520184429
    },
    {
        "content": "<p>If you imagine defining a sheaf of sets on a general site, then the first way seems really unnatural (what would be the analogue of <code>is_open</code>?) So from a \"math\" perspective, the second way looks better.<br>\nI don't know what the practical implications are, though.</p>",
        "id": 123269074,
        "sender_full_name": "Reid Barton",
        "timestamp": 1520184990
    },
    {
        "content": "<p>(I would also set it up so that I can write <code>U : T.open_set</code>, and use <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>∩</mo></mrow><annotation encoding=\"application/x-tex\">\\cap</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.55556em;\"></span><span class=\"strut bottom\" style=\"height:0.55556em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord\">∩</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>∪</mo></mrow><annotation encoding=\"application/x-tex\">\\cup</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.55556em;\"></span><span class=\"strut bottom\" style=\"height:0.55556em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord\">∪</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>⊂</mo></mrow><annotation encoding=\"application/x-tex\">\\subset</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.5391em;\"></span><span class=\"strut bottom\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"base\"><span class=\"mrel\">⊂</span></span></span></span> directly on open sets, etc.)</p>",
        "id": 123269187,
        "sender_full_name": "Reid Barton",
        "timestamp": 1520185247
    }
]