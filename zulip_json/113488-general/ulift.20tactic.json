[
    {
        "content": "<p>How hard would it be to have a ulift tactic+attribute, that takes a goal state and uses everything it knows about ulift to turn it into a goal state where all types live in the same universe?<br>\nI'm currently trying to write a small API for flat modules, and whenever I want to use category theory (say, tensoring preserves (co)limits), then I need everything to be in the same universe.<br>\nIt would be cool if we could just start a proof with <code>ulift (max u v w)</code> and from then on all types have been replaced by types that live in one big universe.</p>",
        "id": 213385537,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1602744696
    },
    {
        "content": "<p>Do you have a real use case where more than one universe is necessary? I spent 30 years doing homological algebra in one universe.</p>",
        "id": 213386143,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1602745296
    },
    {
        "content": "<p>But you used a really wonky definition of etale cohomology, just to stay inside that universe.</p>",
        "id": 213386223,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1602745349
    },
    {
        "content": "<p>And then you deduced all sorts of nice results about it using topos machinery that doesn't actually work without a bigger universe.</p>",
        "id": 213386257,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1602745378
    },
    {
        "content": "<p>Isn't the idea that you define the cohomology theory and it bumps the universe, and then you prove a theorem that it lives in the smaller universe because it can be calculated using some small limit?</p>",
        "id": 213386606,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1602745638
    },
    {
        "content": "<p>Right... there is your <code>ulift</code></p>",
        "id": 213386630,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1602745660
    },
    {
        "content": "<p>Aha</p>",
        "id": 213386656,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1602745672
    },
    {
        "content": "<p>Every time you want to prove something about etale cohomology, you need to use that ulift.</p>",
        "id": 213386673,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1602745679
    },
    {
        "content": "<p>Or just deal with it, and let it live in the bigger universe to begin with.</p>",
        "id": 213386732,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1602745698
    },
    {
        "content": "<p>Right</p>",
        "id": 213386743,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1602745706
    },
    {
        "content": "<p>I guess this whole story might be easier with cumulative universes...</p>",
        "id": 213386760,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1602745724
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> what is the downside of cumulative universes? Apart from ugly foundations?</p>",
        "id": 213386803,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1602745751
    },
    {
        "content": "<p>You'd better get onto Leo quick, it's almost the end of summer</p>",
        "id": 213386807,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1602745758
    },
    {
        "content": "<p>Well, the foundations thing is actually an open question</p>",
        "id": 213386847,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602745790
    },
    {
        "content": "<p>I don't currently know how to extend the proof that lean is consistent to the cumulative case</p>",
        "id": 213386913,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602745809
    },
    {
        "content": "<p>It's probably possible, Coq has some literature on similar stuff, but the devil is in the details</p>",
        "id": 213386966,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602745846
    },
    {
        "content": "<p>So one would end up with two etale cohomology functions, one of which bumps universe and one of which doesn't</p>",
        "id": 213386974,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1602745855
    },
    {
        "content": "<p>Right, and the one which doesn't is the one you can prove things about.</p>",
        "id": 213386997,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1602745880
    },
    {
        "content": "<p>But it means that you now will have a module in <code>Type 1</code> living over a ring in <code>Type 0</code>.</p>",
        "id": 213387012,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1602745904
    },
    {
        "content": "<p>But people would instinctively use the non bumping one I guess, if available</p>",
        "id": 213387013,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1602745904
    },
    {
        "content": "<p>It sounds like kevin just wants to work in ZFC :P</p>",
        "id": 213387023,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602745915
    },
    {
        "content": "<p>Why does that solve the issue?</p>",
        "id": 213387070,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1602745926
    },
    {
        "content": "<p>Because you don't have types to begin with, I guess</p>",
        "id": 213387086,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1602745943
    },
    {
        "content": "<p>well if you don't have universes that's essentially what you get</p>",
        "id": 213387087,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602745943
    },
    {
        "content": "<p>If you don't have universes, then proving things about etale cohomology becomes a lot more painful.</p>",
        "id": 213387113,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1602745965
    },
    {
        "content": "<p>Brian Conrad can do that. But he doesn't formalise it.</p>",
        "id": 213387121,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1602745979
    },
    {
        "content": "<p>Right, you get de Jong's section in stacks where he explains how set theoretic foundations can be used to make sure etale cohomology groups are sets despite them being not obviously sets in ZFC</p>",
        "id": 213387170,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1602746027
    },
    {
        "content": "<p>But also all the topos machinery goes bad</p>",
        "id": 213387235,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1602746056
    },
    {
        "content": "<p>So I think I would rather have a <code>ulift</code> tactic</p>",
        "id": 213387251,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1602746069
    },
    {
        "content": "<p>What is the problem with just developing the API with the bumping definition and then deducing everything for the non bumping one after? Is this why you think we need the tactic?</p>",
        "id": 213387312,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1602746136
    },
    {
        "content": "<p>One would need things like \" if A and B are in universe u+1 and there's a map between them, and if A and B descend to u then so does the map\"</p>",
        "id": 213387408,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1602746201
    },
    {
        "content": "<p>Is this true in DTT? it's certainly true in ZFC although one probably uses replacement</p>",
        "id": 213387437,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1602746233
    },
    {
        "content": "<p>It depends on what you mean by descend</p>",
        "id": 213387476,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602746262
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> In lean that \"descend\" is going to look ugly.</p>",
        "id": 213387491,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1602746278
    },
    {
        "content": "<p>if you mean you have an equiv then yes, since you can just compose with the equiv</p>",
        "id": 213387497,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602746281
    },
    {
        "content": "<p>Well, every finite-dimensional vector space over <code>K : Type</code> will descend from <code>Type u</code> to <code>Type</code></p>",
        "id": 213387578,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1602746333
    },
    {
        "content": "<p>But it will be using choice.</p>",
        "id": 213387589,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1602746344
    },
    {
        "content": "<p>The equiv would be between Abig and ulift Asmall</p>",
        "id": 213387609,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1602746363
    },
    {
        "content": "<p>And if you have a map from Abig to Bbig can you get a map from Asmall to Bsmall?</p>",
        "id": 213387649,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1602746395
    },
    {
        "content": "<p>Sure, like Mario said, just compose with the equivs</p>",
        "id": 213387708,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1602746413
    },
    {
        "content": "<p>I don't get it</p>",
        "id": 213387739,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1602746439
    },
    {
        "content": "<p><code>equiv</code> (and the linear variants) are universe polymorphic</p>",
        "id": 213387748,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1602746447
    },
    {
        "content": "<p>But <code>iso</code> (in category_theory) is not</p>",
        "id": 213387757,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1602746456
    },
    {
        "content": "<p>What universe do the equivs live in?</p>",
        "id": 213387763,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1602746460
    },
    {
        "content": "<p>Oh I see</p>",
        "id": 213387777,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1602746468
    },
    {
        "content": "<p><code>max (small big)</code></p>",
        "id": 213387781,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1602746470
    },
    {
        "content": "<p>So the maps will be in the wrong universe?</p>",
        "id": 213387798,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1602746494
    },
    {
        "content": "<p>I'm trying to descend the maps</p>",
        "id": 213387799,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1602746499
    },
    {
        "content": "<p>I can't use equiv if the equiv is in the wrong universe</p>",
        "id": 213387814,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1602746514
    },
    {
        "content": "<p>Can I?</p>",
        "id": 213387818,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1602746518
    },
    {
        "content": "<p><code>Asmall -&gt; Abig -&gt; Bbig -&gt; Bsmall</code></p>",
        "id": 213387823,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1602746521
    },
    {
        "content": "<p>that composition will be small, right?</p>",
        "id": 213387864,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1602746530
    },
    {
        "content": "<p>I see!</p>",
        "id": 213387869,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1602746535
    },
    {
        "content": "<p>It uses bigger universes in its definition, but not in the type.</p>",
        "id": 213387897,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1602746564
    },
    {
        "content": "<p>And you won't get around using bigger universes in its definition, because that's what it's meant to do.</p>",
        "id": 213387915,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1602746585
    },
    {
        "content": "<p>which is why lean restricted to the first universe is still stronger than ZFC</p>",
        "id": 213387948,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602746614
    },
    {
        "content": "<p>The descent of eg fdvs involves choice but this sounds right to me because a cohomology theory is a universal object so only defined up to isomorphism anyway</p>",
        "id": 213387965,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1602746633
    },
    {
        "content": "<p>doesn't mean that it will be nice to work with</p>",
        "id": 213388032,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1602746668
    },
    {
        "content": "<p>De Jong's treatment in ZFC involves some random choice of a sufficiently large cardinal</p>",
        "id": 213388053,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1602746691
    },
    {
        "content": "<p>So there's the choice there</p>",
        "id": 213388077,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1602746710
    },
    {
        "content": "<p>Sure, but afterwards, he never has to mention it again</p>",
        "id": 213388095,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1602746733
    },
    {
        "content": "<p>It's like localisation isn't it?</p>",
        "id": 213388110,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1602746742
    },
    {
        "content": "<p>One should use choice to prove the existence of the universal delta functor in the right universe</p>",
        "id": 213388206,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1602746793
    },
    {
        "content": "<p>But one should prove theorems about all universal delta functors</p>",
        "id": 213388226,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1602746808
    },
    {
        "content": "<p>Let H be a cohomology theory which satisfies the axioms of etale cohomology. Then...</p>",
        "id": 213388425,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1602746932
    },
    {
        "content": "<p>No choice involved there</p>",
        "id": 213388435,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1602746941
    },
    {
        "content": "<p>Will this run into issues though? We can only find out by trying, I should imagine</p>",
        "id": 213388465,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1602746970
    },
    {
        "content": "<p>Can the theory be developed in the generality where the cohomology groups live in a possibly different universe to the schemes?</p>",
        "id": 213388572,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1602747025
    },
    {
        "content": "<p>I'm giving a lean graduate course next term and was going to spend some time discussing algebraic geometry but I'm not sure we'll get as far as etale cohomology</p>",
        "id": 213388736,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1602747138
    },
    {
        "content": "<p>In fact I'm sure we'll not</p>",
        "id": 213388748,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1602747147
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/ulift.20tactic/near/213385537\">said</a>:</p>\n<blockquote>\n<p>It would be cool if we could just start a proof with <code>ulift (max u v w)</code> and from then on all types have been replaced by types that live in one big universe.</p>\n</blockquote>\n<p>How far do you get with <code>equiv_rw</code>?  Is this just a matter of UI, or are we missing some more fundamental tools?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">equiv_rw</span> <span class=\"o\">(</span><span class=\"n\">semimodule_equiv.symm</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">≃ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">ulift.</span><span class=\"o\">{(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span><span class=\"o\">)}</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">M</span><span class=\"o\">,</span>\n</code></pre></div>\n\n<p>(Note: I've never used <code>equiv_rw</code> in practice, but this seems to be exactly what it's meant for.)</p>",
        "id": 213392138,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1602749566
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> Oooh sweet. I guess that gets me pretty close!</p>",
        "id": 213395601,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1602751682
    },
    {
        "content": "<p>For now that should be good enough</p>",
        "id": 213395649,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1602751691
    }
]