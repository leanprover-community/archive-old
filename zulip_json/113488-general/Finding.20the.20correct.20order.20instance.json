[
    {
        "content": "<p>Here's a goal I'm encountering.</p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"nf\">α</span><span class=\"kt\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span>\n<span class=\"nf\">_inst_1</span><span class=\"kt\">:</span> <span class=\"n\">decidable_eq</span> <span class=\"n\">α</span>\n<span class=\"nf\">_inst_2</span><span class=\"kt\">:</span> <span class=\"n\">some_order_instance</span> <span class=\"n\">α</span>\n<span class=\"nf\">a</span> <span class=\"n\">c</span> <span class=\"n\">x</span><span class=\"kt\">:</span> <span class=\"n\">α</span>\n<span class=\"nf\">hx</span><span class=\"kt\">:</span> <span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"n\">c</span> <span class=\"err\">≤</span> <span class=\"n\">x</span>\n<span class=\"err\">⊢</span> <span class=\"err\">∃</span> <span class=\"p\">(</span><span class=\"n\">y</span> <span class=\"kt\">:</span> <span class=\"n\">α</span><span class=\"p\">),</span> <span class=\"n\">c</span> <span class=\"o\">+</span> <span class=\"n\">y</span> <span class=\"ow\">=</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>What should be <code>some_order_instance</code>? The rest of the proof requires at least <code>ordered_cancel_add_comm_monoid α</code>.</p>",
        "id": 243581095,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1624397142
    },
    {
        "content": "<p>Maybe <a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_exists_add_of_le\">docs#has_exists_add_of_le</a>?</p>",
        "id": 243581511,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1624397395
    },
    {
        "content": "<p>But then how do I prove <code>c ≤ x</code>? I don't know that <code>a + c ≤ c</code>.</p>",
        "id": 243581698,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1624397506
    },
    {
        "content": "<p>I think that + <code>add_comm_group</code> is enough</p>",
        "id": 243581798,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1624397546
    },
    {
        "content": "<p>Yeah but then it doesn't apply to ℕ... This is related to my <code>locally_finite_order</code> PR btw</p>",
        "id": 243581868,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1624397602
    },
    {
        "content": "<p>I guess <span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> will either know the instance or tell me it doesn't exist.</p>",
        "id": 243582083,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1624397736
    },
    {
        "content": "<p>Ahah, isn't it related to the monus that I was talking about with Scott?</p>",
        "id": 243582165,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1624397783
    },
    {
        "content": "<p><code>exists_add_of_le</code> gives <code> ∃ z, a + c + z = x</code>, and a suitable obtain and add_comm makes your goal <code>∃ y, c + y = c + z + a</code>?</p>",
        "id": 243582172,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1624397792
    },
    {
        "content": "<p>Oh, of course <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 243582214,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1624397838
    },
    {
        "content": "<p>This is me after 12h of ECM talks.</p>",
        "id": 243582225,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1624397851
    },
    {
        "content": "<p>And indeed the next lemma on my list requires the <code>monus</code>...<br>\n<code>lemma image_sub (a b c : α) (h : a ≤ c) : (Ico a b).image (λ x, x - c) = Ico (a - c) (b - c) :=</code></p>",
        "id": 243582706,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1624398206
    },
    {
        "content": "<p>aka <code>x ≤ y → y - x + x = y</code></p>",
        "id": 243582793,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1624398264
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span>, have you seen the series of lemmas about intervals which inspired <span class=\"user-mention\" data-user-id=\"329425\">@Peter Nelson</span> to define <a href=\"https://leanprover-community.github.io/mathlib_docs/find/exists_add_of_le\">docs#exists_add_of_le</a>?  See <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.Icc_add_bij\">docs#set.Icc_add_bij</a> and following.</p>",
        "id": 243583894,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1624399049
    },
    {
        "content": "<p>Yaël, I am late to this, but reduing the assumptions on <code>has_exists_mul/add_of_le</code> is on my <code>todo</code> list.  For this to be effective, it might also be useful to have a typeclass asserting that the unit of a binary operation is the bottom of an order relation.   Below is what I have in mind: the first part works with the current typeclasses, the second one is an attempt with the new ones.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.ordered_monoid</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">  What is in this section should be available after the `ordered` refactor. -/</span>\n<span class=\"kn\">section</span>\n\n<span class=\"kd\">@[to_additive]</span> <span class=\"kd\">lemma</span> <span class=\"n\">le_mul_self'</span> <span class=\"o\">[</span><span class=\"n\">mul_one_class</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">covariant_class</span> <span class=\"n\">α</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">function.swap</span> <span class=\"o\">(</span><span class=\"bp\">*</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">≤</span><span class=\"o\">)]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">b1</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"k\">calc</span>  <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">one_mul</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">mul_le_mul_right'</span> <span class=\"n\">b1</span> <span class=\"n\">_</span>\n\n<span class=\"kd\">@[to_additive]</span> <span class=\"kd\">lemma</span> <span class=\"n\">yael_mul</span> <span class=\"o\">[</span><span class=\"n\">ordered_comm_monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_exists_mul_of_le</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">a1</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"k\">suffices</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">simp_rw</span> <span class=\"n\">eq_comm</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"o\">},</span>\n<span class=\"n\">exists_mul_of_le</span> <span class=\"o\">(</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">le_mul_self'</span> <span class=\"n\">a1</span><span class=\"o\">)</span> <span class=\"n\">hx</span><span class=\"o\">)</span>\n\n<span class=\"kd\">end</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">  In the `new` namespace is something that I am thinking about for `has_exists_mul_of_le`. -/</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">new</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"sd\">/--  `0` is a bottom element. -/</span>\n<span class=\"kd\">class</span> <span class=\"n\">has_zero_le</span> <span class=\"o\">[</span><span class=\"n\">has_add</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_le</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">zero_le</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n\n<span class=\"sd\">/--  `1` is a bottom element. -/</span>\n<span class=\"kd\">class</span> <span class=\"n\">has_one_le</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_one</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_le</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">one_le</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">to_additive</span> <span class=\"n\">has_zero_le</span><span class=\"o\">]</span> <span class=\"n\">has_one_le</span>\n\n<span class=\"sd\">/--  The `has_exists_add_of_le` typeclass with fewer assumptions. -/</span>\n<span class=\"kd\">class</span> <span class=\"n\">has_exists_add_of_le'</span> <span class=\"o\">[</span><span class=\"n\">has_add</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_le</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">exists_add_of_le</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">},</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n\n<span class=\"sd\">/--  The `has_exists_mul_of_le` typeclass with fewer assumptions. -/</span>\n<span class=\"kd\">class</span> <span class=\"n\">has_exists_mul_of_le'</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_le</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">exists_mul_of_le</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">},</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">to_additive</span><span class=\"o\">]</span> <span class=\"n\">has_exists_mul_of_le'</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span>\n\n<span class=\"kd\">@[to_additive]</span> <span class=\"kd\">lemma</span> <span class=\"n\">le_mul_self'</span> <span class=\"o\">[</span><span class=\"n\">mul_one_class</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_one_le</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">covariant_class</span> <span class=\"n\">α</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">function.swap</span> <span class=\"o\">(</span><span class=\"bp\">*</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">≤</span><span class=\"o\">)]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"k\">calc</span>  <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">one_mul</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">mul_le_mul_right'</span> <span class=\"o\">(</span><span class=\"n\">has_one_le.one_le</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">_</span>\n\n<span class=\"kd\">@[to_additive]</span> <span class=\"kd\">lemma</span> <span class=\"n\">yael_mul</span> <span class=\"o\">[</span><span class=\"n\">mul_one_class</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_one_le</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">covariant_class</span> <span class=\"n\">α</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">function.swap</span> <span class=\"o\">(</span><span class=\"bp\">*</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">≤</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">has_exists_mul_of_le'</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"k\">suffices</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">simp_rw</span> <span class=\"n\">eq_comm</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"o\">},</span>\n<span class=\"n\">has_exists_mul_of_le'.exists_mul_of_le</span> <span class=\"o\">(</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">le_mul_self'</span> <span class=\"n\">c</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">hx</span><span class=\"o\">)</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">new</span>\n</code></pre></div>",
        "id": 243601162,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1624415288
    },
    {
        "content": "<p>I can't help but feel relaxing these to <code>has_le</code> is asking for trouble</p>",
        "id": 243614195,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1624432298
    },
    {
        "content": "<p>The obvious phrasing to me for <code>has_zero_le</code> uses <a href=\"https://leanprover-community.github.io/mathlib_docs/find/order_bot\">docs#order_bot</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">zero_eq_bot</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">order_bot</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">eq</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">⊥</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 243614439,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1624432489
    },
    {
        "content": "<p>Fair enough and, admittedly, I do not really have applications for this in the case in which the relation isn't, say, transitive.  Thus, the extra assumptions are always satisfied in my use cases.  In any case, I am not planning on doing this any time soon: I am already busy enough with the <code>order</code> refactor and I consider this as a plan for after it is done</p>\n<p>If someone else wants to think about this, feel free to do so!</p>",
        "id": 243634100,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1624445387
    },
    {
        "content": "<p>Damiano, do you think there's a way to have an order class that would state <code>a &lt; b ↔ a + 1 ≤ b</code>? That would allow me to generalise this lemma (and the <code>Icc</code>, <code>Ioc</code>, <code>Ioo</code> variants).<br>\n<code>lemma card_Ico (n m : ℕ) : (Ico n m).card = m - n :=</code> to <code>ℤ</code>, <code>ℕ+</code> and <code>fin n</code>.</p>",
        "id": 243636985,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1624447327
    },
    {
        "content": "<p>The <code>ℤ</code> lemma for it is called <a href=\"https://leanprover-\ncommunity.github.io/mathlib_docs/data/int/basic.html#int.lt_add_one_iff\"><code>int.lt_add_one_iff</code></a></p>",
        "id": 243637109,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1624447432
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span> had a <code>has_enum</code> refactor or similar to handle that</p>",
        "id": 243640291,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1624449436
    },
    {
        "content": "<p>Ah yeah. What I need is <code>has_enum</code> + <code>archimedean</code>.</p>",
        "id": 243643512,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1624451254
    },
    {
        "content": "<p>How is that going, Anne?</p>",
        "id": 243644546,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1624451789
    },
    {
        "content": "<p>I have an old version in <a href=\"https://github.com/leanprover-community/mathlib/tree/fin_range\">branch#fin_range</a>, but I gave up my original attempt because it was too much work to replace the built-in <code>list.range</code>/<code>multiset.range</code>/<code>finset.range</code> outright (and I found another way to do what I \"really\" wanted without <code>has_enum</code>). The main action is in this file, containing a syntactic <code>has_enum</code> class (with only the definition of <code>list.Ico</code>) and a <code>lawful_enum</code> class with the specification: <a href=\"https://github.com/leanprover-community/mathlib/blob/fin_range/src/data/list/enum.lean\">https://github.com/leanprover-community/mathlib/blob/fin_range/src/data/list/enum.lean</a></p>",
        "id": 243653535,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1624455953
    },
    {
        "content": "<p>I did not include a lemma on  <code>+ 1</code> or require the existence of a successor function, since <code>fin 0</code> does not have a <code>1</code> but it can still be enumerated (namely, with the empty list), and the successor function cannot be injective and strictly larger on finite types.</p>",
        "id": 243654188,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1624456239
    },
    {
        "content": "<p>Oh but this is very much what I'm doing now. I thought <code>has_enum</code> would mean that every element is either top or covered by another one, and that's a strictly weaker property than <code>locally_finite_order</code>.</p>",
        "id": 243654285,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1624456282
    },
    {
        "content": "<p>What was it that you \"really\" wanted when you did that?</p>",
        "id": 243654444,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1624456330
    },
    {
        "content": "<p>Please re-use as much as you need!</p>",
        "id": 243654462,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1624456338
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/Finding.20the.20correct.20order.20instance/near/243654444\">said</a>:</p>\n<blockquote>\n<p>What was it that you \"really\" wanted when you did that?</p>\n</blockquote>\n<p>How to do the row manipulations in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/det_vandermonde/src\">src#det_vandermonde</a> (which in the end were easier to do with <code>finset.range</code> of natural numbers)</p>",
        "id": 243654971,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1624456545
    },
    {
        "content": "<p>What I now want here is to say that no element is in between the coercion from <code>ℕ</code> (or <code>ℤ</code>) to <code>α</code>. That's again something different and I think something like</p>\n<div class=\"codehilite\" data-code-language=\"Haskell\"><pre><span></span><code><span class=\"o\">@</span><span class=\"p\">[</span><span class=\"kr\">class</span><span class=\"p\">]</span> <span class=\"n\">structure</span> <span class=\"n\">has_lt_iff_add_one_le</span> <span class=\"p\">(</span><span class=\"n\">α</span> <span class=\"kt\">:</span> <span class=\"kt\">Type</span><span class=\"o\">*</span><span class=\"p\">)</span> <span class=\"p\">[</span><span class=\"n\">ordered_semiring</span> <span class=\"n\">α</span><span class=\"p\">]</span> <span class=\"kt\">:</span> <span class=\"kt\">Prop</span> <span class=\"kt\">:=</span>\n<span class=\"p\">(</span><span class=\"n\">lt_iff_add_one_le</span> <span class=\"kt\">:</span> <span class=\"err\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"kt\">:</span> <span class=\"n\">α</span><span class=\"p\">,</span> <span class=\"n\">a</span> <span class=\"o\">&lt;</span> <span class=\"n\">b</span> <span class=\"err\">↔</span> <span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"mi\">1</span> <span class=\"err\">≤</span> <span class=\"n\">b</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>would be worth having.</p>",
        "id": 243655795,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1624456877
    },
    {
        "content": "<p>(this isn't Discord, you don't need to mark your lean as haskell!)</p>",
        "id": 243656672,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1624457243
    },
    {
        "content": "<p>Whoops! Yeah</p>",
        "id": 243658872,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1624458135
    }
]