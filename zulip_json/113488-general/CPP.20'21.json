[
    {
        "content": "<p>The call for papers for CPP '21 (Certified Programs and Proofs) is out! <a href=\"https://popl21.sigplan.org/home/CPP-2021#Call-for-Papers\" title=\"https://popl21.sigplan.org/home/CPP-2021#Call-for-Papers\">https://popl21.sigplan.org/home/CPP-2021#Call-for-Papers</a><br>\nWe hope some of the Lean Zulip crowd will consider submitting.</p>",
        "id": 194451829,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1587135071
    },
    {
        "content": "<p>Note that the abstract deadline is September 16, earlier than in past years.</p>",
        "id": 194451876,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1587135088
    },
    {
        "content": "<p>Would they consider a paper about schemes?</p>",
        "id": 194455606,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587136369
    },
    {
        "content": "<p>Does it contain programs and/or proofs? <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 194456413,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587136635
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113488-general/topic/CPP.20'21/near/194456413\" title=\"#narrow/stream/113488-general/topic/CPP.20'21/near/194456413\">said</a>:</p>\n<blockquote>\n<p>Does it contain programs and/or proofs? <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>\n</blockquote>\n<p>And are they certified? If so, submit!</p>",
        "id": 194456486,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1587136663
    },
    {
        "content": "<p>Three Lean papers at <a href=\"https://popl21.sigplan.org/home/CPP-2021#event-overview\">CPP '21</a> in January! Congrats</p>\n<ul>\n<li><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> (<a href=\"https://arxiv.org/abs/2010.02595\">https://arxiv.org/abs/2010.02595</a>)</li>\n<li><span class=\"user-mention\" data-user-id=\"256311\">@Jannis Limperg</span> (<a href=\"https://limperg.de/paper/cpp2021-induction/draft.pdf\">https://limperg.de/paper/cpp2021-induction/draft.pdf</a>)</li>\n<li><span class=\"user-mention\" data-user-id=\"116448\">@Koundinya Vajjha</span> (<a href=\"https://arxiv.org/abs/1911.00385\">https://arxiv.org/abs/1911.00385</a>)</li>\n</ul>\n<p>And <span class=\"user-mention\" data-user-id=\"121058\">@Jasmin Blanchette</span> (<a href=\"https://matryoshka-project.github.io/pubs/satur_isa_paper.pdf\">https://matryoshka-project.github.io/pubs/satur_isa_paper.pdf</a>) and <span class=\"user-mention\" data-user-id=\"326322\">@Jacques Carette</span> (<a href=\"https://arxiv.org/abs/2005.07059\">https://arxiv.org/abs/2005.07059</a>), not using Lean but still part of the crowd here <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 217899059,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1606318213
    },
    {
        "content": "<p>The overview of the niceties and difficulties of metaprogramming in the induction tactic paper is extremely informative!</p>",
        "id": 217907484,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1606321785
    },
    {
        "content": "<p>Another one accepted is <a href=\"https://arxiv.org/abs/2009.11403\">https://arxiv.org/abs/2009.11403</a> <br>\nThis is in Coq. It should be possible to port this to Lean if mathlib has the Banach Fixed Point theorem. I haven't looked at mathlib in a while, but how far away are we from Fixed point theorems?</p>",
        "id": 217912913,
        "sender_full_name": "Koundinya Vajjha",
        "timestamp": 1606324185
    },
    {
        "content": "<p>Is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/contracting_with.exists_fixed_point\">docs#contracting_with.exists_fixed_point</a> what you need?</p>",
        "id": 217913150,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606324302
    },
    {
        "content": "<p>Oh wow, that's great!</p>",
        "id": 217913277,
        "sender_full_name": "Koundinya Vajjha",
        "timestamp": 1606324350
    },
    {
        "content": "<p>there's also a <code>'</code> version</p>",
        "id": 217913288,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606324357
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"256311\">@Jannis Limperg</span> Your paper is really nice to read! Thanks for writing it. One remark (that I've made earlier this week in an unrelated context):</p>\n<blockquote>\n<p>They are turned into regular expressions</p>\n</blockquote>\n<p>I think you mean \"ordinary expressions\", and not regexes.</p>",
        "id": 217916605,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1606325899
    },
    {
        "content": "<p>I just found some time to read <span class=\"user-mention\" data-user-id=\"256311\">@Jannis Limperg</span> 's introduction. I'm surprised because the difficulties mentioned with <code>induction</code>are not at all what I expected. To me the issue with induction is failing to infer the motive. A very long time ago I tried to port <a href=\"https://github.com/math-comp/math-comp/blob/master/mathcomp/ssreflect/bigop.v\">math-comp bigop library</a>. It was impossible for me to replicate the nice proofs there because we donn't have <a href=\"https://coq.inria.fr/refman/proof-engine/ssreflect-proof-language.html#the-elim-tactic\">SSReflect elim tactic</a> which does induction that actually infer the motive. The introduction to Jannis's paper doesn't seem to refer to this issue, and search the paper for SSReflect doesn't return any hit whereas Coq is mentioned a lot. To me it sounds like assessing Lean using only the core library without looking at what is in mathlib. What's the story here?</p>",
        "id": 218111829,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1606496298
    },
    {
        "content": "<p>The intro makes it clear what the story is here: The tactic was motivated by the (C.S.) course at the VU, where we'd run into a number of issues in previous years. The current intro doesn't mention all issues (e.g. <code>induction</code> treats curried predicates much better than uncurried, but there are good reasons for (semi-)uncurried). A lot of the focus is on inductive predicates, which is more a C.S. preoccupation than a mathematical one.</p>\n<p>I'd be curious to know what <code>elim</code> (which I've used a little bit) does that the Lean <code>induction</code> doesn't do in terms of motive inferrence.</p>",
        "id": 218117294,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1606500349
    },
    {
        "content": "<p>For me, the difficulties with induction are that it insists on using the constructors of the type and even avoids notation. Induction was one reason the natural number game didn't exist in 2018 but instead appeared in 2019. Students had problems even doing basic natural number stuff with induction because you make notation <code>has_zero nat</code> and then apply induction on <code>n</code> and you're looking at <code>nat.zero</code> instead of 0 and all the rewrites fail and all the beginners gets lost. It wasn't until I understood more about type theory and notation that I was capable of hacking the induction command to fix these issues.</p>",
        "id": 218117405,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606500420
    },
    {
        "content": "<p>Wouldn't applying induction with an explicit rule solve that problem (apart from the problem that you have to specify the rule every time)?</p>",
        "id": 218117473,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1606500467
    },
    {
        "content": "<p>Probably. I found a solution (tagging various refl lemmas as being important and trying to rewrite them after induction had taken place, behind the user's back) and got it to work. I'm not claiming that I know what I'm doing now, let along what I was doing in mid-2019 when I was half my current Lean age :-)</p>",
        "id": 218118550,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606501375
    },
    {
        "content": "<p>Thank you Johan for the correction and Yakov for the kind words! I'm very happy that the paper was useful to more than zero people.</p>\n<p>Patrick: as Jasmin says, nu-induction deals mostly with the issues we ran into with the course, which are more typical of programming language or logic formalisations. I wasn't even aware that there are issues with <code>induction</code> in the context of the mathy parts of mathlib (except for the ugly names). If motive inference is a problem, it might not be too hard to clone the heuristic that SSReflect uses, but I don't know what that heuristic is. As it stands, nu-induction uses Lean's builtin heuristic, so it's no better or worse than standard induction in this regard.</p>\n<p>Kevin: a general solution to your problem might be to decouple the default induction scheme for a type from the definition of that type. One could use a meta type class that associates a type with an induction scheme, falling back to the auto-generated induction scheme if no instance is found. That's surely overkill for just the natural number game, but it might be interesting if there are more such situations in mathlib.</p>",
        "id": 218120711,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1606503370
    },
    {
        "content": "<p>I could try to find example from that bigop library if you are willing to work on this.</p>",
        "id": 218127247,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1606509128
    },
    {
        "content": "<p>It could be useful also as \"future work\" in the final version of the paper, if nothing else. That might inspire others. :) E.g. future MSc students at the VU.</p>",
        "id": 218127433,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1606509326
    },
    {
        "content": "<p>CPP starts on Sunday, and prerecorded talks are posted for most of the papers: <a href=\"https://popl21.sigplan.org/home/CPP-2021#program\">https://popl21.sigplan.org/home/CPP-2021?#program</a></p>",
        "id": 222402821,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1610440107
    },
    {
        "content": "<p>The organization is ... complicated, so there are going to be short talks too. My short talk about Witt vectors is <a href=\"https://www.youtube.com/watch?v=k-YncL7Cd4Q\">here</a>. (Johan's long talk is linked on the schedule, also <a href=\"https://www.youtube.com/watch?v=0SdV0gY55aU\">here</a>)</p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"0SdV0gY55aU\" href=\"https://www.youtube.com/watch?v=0SdV0gY55aU\"><img src=\"https://i.ytimg.com/vi/0SdV0gY55aU/default.jpg\"></a></div><div class=\"youtube-video message_inline_image\"><a data-id=\"k-YncL7Cd4Q\" href=\"https://www.youtube.com/watch?v=k-YncL7Cd4Q\"><img src=\"https://i.ytimg.com/vi/k-YncL7Cd4Q/default.jpg\"></a></div>",
        "id": 222402904,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1610440183
    },
    {
        "content": "<p>CPP is starting in a few min, with a talk by Tobias Nipkow on teaching with proof assistants. <a href=\"https://www.youtube.com/watch?v=PAxUO84tUE8&amp;ab_channel=CertifiedProgramsandProofs\">https://www.youtube.com/watch?v=PAxUO84tUE8&amp;ab_channel=CertifiedProgramsandProofs</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"PAxUO84tUE8\" href=\"https://www.youtube.com/watch?v=PAxUO84tUE8&amp;ab_channel=CertifiedProgramsandProofs\"><img src=\"https://i.ytimg.com/vi/PAxUO84tUE8/default.jpg\"></a></div>",
        "id": 223046497,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1610895444
    },
    {
        "content": "<p>Schedule: <a href=\"https://popl21.sigplan.org/home/CPP-2021#program\">https://popl21.sigplan.org/home/CPP-2021?#program</a></p>",
        "id": 223046499,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1610895454
    },
    {
        "content": "<p>Jannis' talk was very nice!</p>",
        "id": 223062986,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1610917487
    },
    {
        "content": "<p>Thanks! Glad you liked it. Links in case anyone else is interested (this is about the design and implementation of the <code>induction'</code> tactic): <a href=\"https://youtu.be/PAxUO84tUE8?t=3783\">short presentation</a>, <a href=\"https://www.youtube.com/watch?v=S4xl0CtJIb4\">long presentation</a>, <a href=\"https://arxiv.org/abs/2012.08990\">paper</a>.</p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"S4xl0CtJIb4\" href=\"https://www.youtube.com/watch?v=S4xl0CtJIb4\"><img src=\"https://i.ytimg.com/vi/S4xl0CtJIb4/default.jpg\"></a></div><div class=\"youtube-video message_inline_image\"><a data-id=\"PAxUO84tUE8\" href=\"https://youtu.be/PAxUO84tUE8?t=3783\"><img src=\"https://i.ytimg.com/vi/PAxUO84tUE8/default.jpg\"></a></div>",
        "id": 223128743,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1610981430
    }
]