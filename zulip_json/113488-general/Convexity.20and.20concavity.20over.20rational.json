[
    {
        "content": "<p>In <code>analysis.convex.basic</code>, we define <a href=\"https://leanprover-community.github.io/mathlib_docs/find/convex\">docs#convex</a> and related things as properties for some <code>E : Type*</code> with <code>[module ℝ E]</code>. Is there a reason why it isn't defined more generally for an <code>R</code>-module where <code>[linear_ordered_semiring R]</code>?</p>",
        "id": 251225849,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1630328734
    },
    {
        "content": "<p>I guess intuitively we want to apply this to things that are complete. But I agree that it makes sense in a more general setting. Do you have a particular application in mind?</p>",
        "id": 251226534,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1630329076
    },
    {
        "content": "<p>I'm formalizing some texts around tropical algebra/geometry. The evaluation of a tropical polynomial (as seen as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">def</span> <span class=\"n\">_root_.polynomial.eval_tropical</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"o\">(</span><span class=\"n\">tropical</span> <span class=\"o\">(</span><span class=\"n\">with_top</span> <span class=\"n\">R</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">tropical</span> <span class=\"o\">(</span><span class=\"n\">with_top</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">eval</span> <span class=\"o\">(</span><span class=\"n\">trop</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">with_top</span> <span class=\"n\">R</span><span class=\"o\">))</span> <span class=\"n\">p</span>\n</code></pre></div>\n<p>), is concave. It's defined over a <code>[linear_ordered_semiring R]</code>, so it works over the naturals and rationals too, for example. In fact, this concavity leads to the tropical fundamental theorem of algebra showing that tropical polynomials, when seen as functions from R to R, are not unique, but admit a unique \"reduced\" polynomial. I think that's named <code>minpoly</code> in mathlib?</p>",
        "id": 251227125,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1630329352
    },
    {
        "content": "<p>At least a vector space over an ordered field makes sense</p>",
        "id": 251227193,
        "sender_full_name": "Reid Barton",
        "timestamp": 1630329370
    },
    {
        "content": "<p>I guess a reason is that when it's only defined over the reals you don't need to specify the ring. Having the ring defined as an out_param sounds like a bad idea (a module over the reals is also a module over nnreals, so Lean wouldn't know which one to choose), but I guess we can have the general definition specifying the <code>R</code>, and a notation specific to the real case hiding the field, which should be by far the most common situation.</p>",
        "id": 251227506,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1630329504
    },
    {
        "content": "<p>I'd suggest that convexity over the naturals is not a very useful notion (if you just make the obvious change to the definition).</p>",
        "id": 251228436,
        "sender_full_name": "Reid Barton",
        "timestamp": 1630329906
    },
    {
        "content": "<p>I agree about the naturals. Only with the rationals does it start to become useful =)</p>",
        "id": 251229168,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1630330233
    },
    {
        "content": "<p>This is something that's been on many people's minds.</p>",
        "id": 251233508,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1630332010
    },
    {
        "content": "<p>See <a href=\"https://github.com/leanprover-community/mathlib/issues/2910\">#2910</a> and <a href=\"https://github.com/leanprover-community/mathlib/issues/4787\">#4787</a></p>",
        "id": 251233596,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1630332039
    },
    {
        "content": "<p>Thanks for those PR pointers. The affine space is an interesting way to express it. Currently, I'm testing loosening the <code>module</code> restriction on the definition to just <code>has_scalar</code>, since the definition requires no laws. I know that the property isn't useful (or even really provable) without the laws. But I'm having issues trying to define concavity on functions of type <code>R -&gt; with_top R</code>, since they can't have <code>module</code>. And if I loosen slightly to <code>distrib_mul_action</code>, then I hit a diamond. I'll make a new thread about that.</p>",
        "id": 251235848,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1630332917
    },
    {
        "content": "<p>Ah, concavity on <code>with_top R</code> sounds dope. Is it like concave stuff, infinity, more concave stuff?</p>",
        "id": 251239593,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1630334407
    }
]