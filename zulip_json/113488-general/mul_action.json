[
    {
        "content": "<p>If a group action is a <code>mul_action</code>, then what is a field action?</p>",
        "id": 195712416,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588168608
    },
    {
        "content": "<p>A vector space?</p>",
        "id": 195712570,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588168656
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> shouldn't you think about <code>group_with_zero</code> actions first? And what about ring actions?</p>",
        "id": 195712698,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588168686
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/mul_action/near/195712698\" title=\"#narrow/stream/113488-general/topic/mul_action/near/195712698\">said</a>:</p>\n<blockquote>\n<p><del>ring actions</del>?</p>\n</blockquote>\n<p>distrib actions</p>",
        "id": 195712782,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588168713
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"> Group action on fields. -/</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">group_theory</span><span class=\"bp\">.</span><span class=\"n\">group_action</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">ring</span>\n\n<span class=\"n\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n\n<span class=\"n\">class</span> <span class=\"n\">group_field_action</span> <span class=\"kn\">extends</span> <span class=\"n\">mul_action</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">((</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">smul_add</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"n\">g</span> <span class=\"err\">•</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"err\">•</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">g</span> <span class=\"err\">•</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">smul_one</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"err\">•</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">smul_mul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"n\">g</span> <span class=\"err\">•</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"err\">•</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"err\">•</span> <span class=\"n\">y</span><span class=\"o\">))</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">[</span><span class=\"n\">group_field_action</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">group_field_action</span><span class=\"bp\">.</span><span class=\"n\">is_ring_hom</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_ring_hom</span> <span class=\"o\">(</span><span class=\"n\">mul_action</span><span class=\"bp\">.</span><span class=\"n\">to_perm</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">map_one</span> <span class=\"o\">:=</span> <span class=\"n\">group_field_action</span><span class=\"bp\">.</span><span class=\"n\">smul_one</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n  <span class=\"n\">map_mul</span> <span class=\"o\">:=</span> <span class=\"n\">group_field_action</span><span class=\"bp\">.</span><span class=\"n\">smul_mul</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n  <span class=\"n\">map_add</span> <span class=\"o\">:=</span> <span class=\"n\">group_field_action</span><span class=\"bp\">.</span><span class=\"n\">smul_add</span> <span class=\"n\">g</span> <span class=\"o\">}</span>\n\n<span class=\"n\">def</span> <span class=\"n\">group_field_action</span><span class=\"bp\">.</span><span class=\"n\">ring_equiv</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"err\">≃</span><span class=\"bp\">+*</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"n\">ring_equiv</span><span class=\"bp\">.</span><span class=\"n\">of</span> <span class=\"o\">(</span><span class=\"n\">mul_action</span><span class=\"bp\">.</span><span class=\"n\">to_perm</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">g</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 195713389,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588168926
    },
    {
        "content": "<p>this is my current code</p>",
        "id": 195713407,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588168932
    },
    {
        "content": "<p>how general can I make this?</p>",
        "id": 195713419,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588168935
    },
    {
        "content": "<p>monoid on semiring?</p>",
        "id": 195713442,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588168941
    },
    {
        "content": "<p>based on monoid on add_monoid and monoid on monoid?</p>",
        "id": 195713474,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588168953
    },
    {
        "content": "<p>what will I call those, mul_add_action and mul_mul_action?</p>",
        "id": 195713541,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588168972
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110064\">Kenny Lau</span> <a href=\"#narrow/stream/113488-general/topic/mul_action/near/195713419\" title=\"#narrow/stream/113488-general/topic/mul_action/near/195713419\">said</a>:</p>\n<blockquote>\n<p>how general can I make this?</p>\n</blockquote>\n<p>A functor between categories</p>",
        "id": 195713555,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588168976
    },
    {
        "content": "<p>you know what I mean</p>",
        "id": 195713573,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588168982
    },
    {
        "content": "<p><a href=\"https://github.com/anca797/group-cohomology/blob/f896dfa5057bd70c6fbb09ee6fdc26a7ffab5e5d/src/h0.lean#L5-L9\" title=\"https://github.com/anca797/group-cohomology/blob/f896dfa5057bd70c6fbb09ee6fdc26a7ffab5e5d/src/h0.lean#L5-L9\">https://github.com/anca797/group-cohomology/blob/f896dfa5057bd70c6fbb09ee6fdc26a7ffab5e5d/src/h0.lean#L5-L9</a></p>",
        "id": 195719180,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588171101
    },
    {
        "content": "<p>Hello perhaps, a generalization is action of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>G</mi></mrow><annotation encoding=\"application/x-tex\">G</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">G</span></span></span></span> on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi><mo>−</mo><mi>a</mi><mi>l</mi><mi>g</mi><mi>e</mi><mi>b</mi><mi>r</mi><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">k-algebra</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.77777em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\">b</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">a</span></span></span></span> ?</p>",
        "id": 195741424,
        "sender_full_name": "orlando",
        "timestamp": 1588180249
    },
    {
        "content": "<p>See <a href=\"https://github.com/leanprover-community/mathlib/issues/2566\" title=\"https://github.com/leanprover-community/mathlib/issues/2566\">#2566</a></p>",
        "id": 195741465,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588180275
    }
]