[
    {
        "content": "<p>Do we want any of these instances?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- this might need `add_monoid_with_one` to extend `has_vadd` to avoid diamonds</span>\n<span class=\"kd\">instance</span> <span class=\"n\">add_monoid_with_one.to_nat_add_action</span> <span class=\"o\">{</span><span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_monoid_with_one</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">add_action</span> <span class=\"n\">ℕ</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">vadd</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">zero_vadd</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">add_vadd</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">n₁</span> <span class=\"n\">n₂</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">add_assoc</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">add_group_with_one.to_int_add_action</span> <span class=\"o\">{</span><span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_group_with_one</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">add_action</span> <span class=\"n\">ℤ</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">vadd</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">z</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">z</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">zero_vadd</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">add_vadd</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">z₁</span> <span class=\"n\">z₂</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">add_assoc</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_monoid</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_action</span> <span class=\"n\">R</span> <span class=\"n\">ℝ</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">add_action</span> <span class=\"n\">R</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">vadd</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">r</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">r</span> <span class=\"bp\">+ᵥ</span> <span class=\"n\">z.re</span><span class=\"o\">,</span> <span class=\"n\">z.im</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">zero_vadd</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">add_vadd</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">r₁</span> <span class=\"n\">r₂</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">complex.ext</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">add_vadd</span><span class=\"o\">])</span> <span class=\"n\">rfl</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_monoid</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_action</span> <span class=\"n\">R</span> <span class=\"n\">ℝ</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">add_action</span> <span class=\"n\">R</span> <span class=\"n\">ℍ</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">vadd</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">r</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">r</span> <span class=\"bp\">+ᵥ</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"o\">[(</span><span class=\"bp\">+ᵥ</span><span class=\"o\">)]</span> <span class=\"n\">using</span> <span class=\"n\">z.prop</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">zero_vadd</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">add_vadd</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">r₁</span> <span class=\"n\">r₂</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">subtype.ext</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">add_vadd</span><span class=\"o\">])</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 289667832,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657844822
    },
    {
        "content": "<p>Perhaps more ambitiously; we could make<code>algebra R A</code> forgetfully decay to a <code>add_action R A</code> instance satisfying<code>r +ᵥ a = algebra_map R A r + a</code>.</p>",
        "id": 289667845,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657844847
    },
    {
        "content": "<p>The motivation here was to be able to state <a href=\"https://leanprover-community.github.io/mathlib_docs/find/modular_group.coe_T_zpow_smul_eq\">docs#modular_group.coe_T_zpow_smul_eq</a> without the coercion, as <code>(T^n) • z = n +ᵥ z</code></p>",
        "id": 289668192,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657845139
    }
]