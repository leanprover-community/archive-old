[
    {
        "content": "<p>I'm really surprised by the following behavior of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/expr.instantiate_nth_var\">docs#expr.instantiate_nth_var</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">run_cmd</span> <span class=\"o\">(</span><span class=\"k\">do</span> <span class=\"n\">l</span> <span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">l</span> <span class=\"n\">m</span> <span class=\"n\">t</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"bp\">&lt;</span> <span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">t</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">match_pi</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">body</span> <span class=\"o\">:=</span> <span class=\"n\">l.2.2.2</span><span class=\"o\">,</span>\n  <span class=\"n\">trace</span> <span class=\"n\">body</span><span class=\"o\">,</span>\n  <span class=\"n\">trace</span> <span class=\"bp\">$</span> <span class=\"n\">body.instantiate_nth_var</span> <span class=\"mi\">2</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"mi\">7</span><span class=\"o\">),</span>\n  <span class=\"n\">trace</span> <span class=\"bp\">$</span> <span class=\"n\">body.instantiate_nth_var</span> <span class=\"mi\">0</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"mi\">7</span><span class=\"o\">),</span>\n  <span class=\"n\">return</span> <span class=\"o\">()</span> <span class=\"o\">)</span>\n</code></pre></div>\n<p>is this a bug, or am I just confused by the doc string \"instantiate_nth_var n a b takes the nth de-Bruijn variable in a and replaces each occurrence with b.\", I would have thought that nth de-Bruijn variable means the variable of index n, but does it instead mean nth starting from the minimal index in the expr?</p>",
        "id": 223702532,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1611350726
    },
    {
        "content": "<p>Actually I'm confused why the variable prints as <a href=\"https://github.com/leanprover-community/mathlib/issues/2\">#2</a> at all, maybe that is the bug here?</p>",
        "id": 223703055,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1611351001
    },
    {
        "content": "<p>This is normal behavior for de Bruijn variables. <br>\nWith de Bruijn variables, <code>#n</code> refers to the <code>n</code>-th quantification encapsulating it (counting from inside-out). So <code>#0</code> refers to the innermost quantifier, etc.<br>\nAn example can be illuminating here. The formula</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">z</span>\n</code></pre></div>\n<p>could be written using de Bruijn variables as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">∀</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">#</span><span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"bp\">#</span><span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">#</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"bp\">#</span><span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"bp\">#</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"bp\">#</span><span class=\"mi\">0</span>\n</code></pre></div>\n<p>Note that the first <code>x</code> represented as <code>#1</code> and the second <code>x</code> as <code>#2</code>, since there's an extra quantifier around it.</p>",
        "id": 223704153,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1611351509
    },
    {
        "content": "<p>So <code>body.instantiate_nth_var 0</code> replaces the first (zeroth?) de Bruijn variable that is not captured by any quantifiers. Since the <code>#2</code> is inside the scope of two quantifiers, it is considered to be the first free variable, and so is replaced by <code>body.instantiate_nth_var 0</code>.</p>",
        "id": 223704329,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1611351598
    },
    {
        "content": "<p>Thanks Floris!</p>",
        "id": 223704986,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1611351891
    },
    {
        "content": "<p>I think I already understood de Bruijn indices before, but this example is definitely the clearest explanation I've ever seen!</p>",
        "id": 223705254,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1611352007
    },
    {
        "content": "<p>I'm sure that guy even knows how to pronounce de Bruijn for real!</p>",
        "id": 223705756,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1611352232
    },
    {
        "content": "<p>Ok, my original bug was something else actually which still confuses me, if I replace de Bruijn variables with other de Bruijn variables I see different behavior:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">run_cmd</span> <span class=\"o\">(</span><span class=\"k\">do</span> <span class=\"n\">l</span> <span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">l</span> <span class=\"n\">m</span> <span class=\"n\">t</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"bp\">&lt;</span> <span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">t</span><span class=\"o\">)):</span><span class=\"n\">expr</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">match_pi</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">body</span> <span class=\"o\">:=</span> <span class=\"n\">l.2.2.2</span><span class=\"o\">,</span>\n  <span class=\"n\">trace</span> <span class=\"n\">body</span><span class=\"o\">,</span> <span class=\"c1\">-- ℕ → ∀ (t : ℕ), #2 &lt; t → 0 &lt; t</span>\n  <span class=\"n\">trace</span> <span class=\"bp\">$</span> <span class=\"n\">body.instantiate_vars</span> <span class=\"o\">(</span><span class=\"n\">list.repeat</span> <span class=\"o\">(</span><span class=\"n\">expr.var</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"mi\">3</span><span class=\"o\">),</span> <span class=\"c1\">-- ℕ → ∀ (t : ℕ), #2 &lt; t → 0 &lt; t</span>\n  <span class=\"n\">trace</span> <span class=\"bp\">$</span> <span class=\"n\">body.instantiate_nth_var</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">expr.var</span> <span class=\"mi\">0</span><span class=\"o\">),</span> <span class=\"c1\">--ℕ → ∀ (t : ℕ), #2 &lt; t → 0 &lt; t</span>\n  <span class=\"n\">return</span> <span class=\"o\">()</span> <span class=\"o\">)</span>\n</code></pre></div>\n<p>is the lesson here that I just shouldn't do such a weird thing? Or is there a mechanic here I can still understand to do what I'm trying.</p>",
        "id": 223705898,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1611352304
    },
    {
        "content": "<p>Probably these operations increase the free de Bruijn variables in the expression you're substituting in (i.e. <code>expr.var 0</code>) as well whenever you enter a quantifier (so that the free de Bruijn variables stay free in the substituted expression).<br>\nThis is usually what you want. If it didn't do that, let's consider my above example formula, with one fewer quantifier:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">∀</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">#</span><span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"bp\">#</span><span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">#</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"bp\">#</span><span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"bp\">#</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"bp\">#</span><span class=\"mi\">2</span>\n</code></pre></div>\n<p>Now there is one free variable (occurring twice), and suppose I syntactically replaced both those occurrences by <code>#1</code>. Then in the first occurrence this <code>#1</code> would stay a free variable, but in the second occurrence it would become a bound variable. This is usually not what you want.</p>\n<p>This smells like there is some <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a> going on here.<br>\nHowever, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/expr.replace\">docs#expr.replace</a> might be able to help you here, since there <code>nat</code> argument supplies in how many quantifiers you are (so I suspect that function will not automatically increase free de Bruijn variables).</p>",
        "id": 223707180,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1611352956
    },
    {
        "content": "<p>Yes this makes sense, and you are right there is definitely some <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a> here, I can work around this to do what I want (thanks for reminding me about replace though, that might be a better way). I just wanted to try and understand this behavior, what you've said makes a lot of sense though, thanks <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 223707727,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1611353247
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span> are you sure you want to be manipulating free variables? For anything that isn't performance critical, <a href=\"https://leanprover-community.github.io/mathlib_docs/tactic/binder_matching.html\">https://leanprover-community.github.io/mathlib_docs/tactic/binder_matching.html</a> is usually way easier to use.</p>",
        "id": 223707735,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1611353251
    },
    {
        "content": "<p>Well for what I wanted to do I didn't mind so much which order the binders came in, so I was just trying to replace them all with the same thing, so I could see if they were equal up to reordering of binders, I couldn't find a name for this concept, I'm also not sure its particularly sensible! But it would be fairly performance critical I think</p>",
        "id": 223708413,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1611353554
    }
]