[
    {
        "content": "<p>Lean4 devs aren't currently taking community feedback, but this tiny typo has been annoying me for a long while so I hope some of the Lean4 devs notice this post and fix it!</p>\n<p>In  the file <code>src/Init/Data/Int/Basic.lean</code> the definition of integer addition is:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">extern</span> <span class=\"s2\">&quot;lean_int_add&quot;</span><span class=\"o\">]</span>\n<span class=\"kn\">protected</span> <span class=\"n\">def</span> <span class=\"n\">add</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">@&amp;</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Int</span> <span class=\"o\">:=</span>\n<span class=\"k\">match</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"n\">ofNat</span> <span class=\"n\">m</span><span class=\"o\">,</span>   <span class=\"n\">ofNat</span> <span class=\"n\">n</span>   <span class=\"bp\">=&gt;</span> <span class=\"n\">ofNat</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">ofNat</span> <span class=\"n\">m</span><span class=\"o\">,</span>   <span class=\"n\">negSucc</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">subNatNat</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">negSucc</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">ofNat</span> <span class=\"n\">n</span>   <span class=\"bp\">=&gt;</span> <span class=\"n\">subNatNat</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">negSucc</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">negSucc</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">negSucc</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>The last case should be:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">|</span> <span class=\"n\">negSucc</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">negSucc</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">negSucc</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">))</span>\n</code></pre></div>\n\n\n<p>In other words: <code>-[1+m]+-[1+n] = -[1+((m+n)+1)]</code></p>\n<p>The external <code>lean_int_add</code> seems okay but the official spec makes for really confusing bugs when using integers.</p>",
        "id": 207820974,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1598259653
    },
    {
        "content": "<p>heh, I guess they aren't unit testing these definitions yet</p>",
        "id": 207824952,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598262582
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> <span aria-label=\"up\" class=\"emoji emoji-2b06\" role=\"img\" title=\"up\">:up:</span></p>",
        "id": 207826185,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598263498
    },
    {
        "content": "<p>Yes, apparently the test we have in Lean 3 for exactly this issue didn't make it into Lean 4: <a href=\"https://github.com/leanprover-community/lean/blob/523dc8ac17b6d825eebb3b5f0df846dac3d6e695/tests/lean/run/exhaustive_vm_impl_test.lean\">https://github.com/leanprover-community/lean/blob/523dc8ac17b6d825eebb3b5f0df846dac3d6e695/tests/lean/run/exhaustive_vm_impl_test.lean</a></p>",
        "id": 207827501,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1598264603
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119741\">@François G. Dorais</span> Now I'm curious what you're doing with Lean 4 that this has been annoying you for a long time!</p>",
        "id": 207834867,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1598270750
    },
    {
        "content": "<p>This thing is pretty scary, how do we know such a mismatch between the Lean spec and VM code won't allow us to prove false (I'm not worried, I only try to understand how things will be setup).</p>",
        "id": 207834984,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1598270842
    },
    {
        "content": "<p>Since you cannot reason about the native implementation, the best you can do is to set up partial tests as above</p>",
        "id": 207835328,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1598271107
    },
    {
        "content": "<p>Is the native implementation in Lean 4 more trusted than in Lean 3?</p>",
        "id": 207836282,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1598271765
    },
    {
        "content": "<p>what does this concretely affect? Would <code>rfl</code> be able to prove <code>(-3) + (-4) = -6</code>?</p>",
        "id": 207836384,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1598271830
    },
    {
        "content": "<p>yes, but because that was the way addition was defined</p>",
        "id": 207836476,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598271868
    },
    {
        "content": "<p>AFAIK, as far as proving is concerned, the compiler is not any more trusted than the VM of Lean 3, unless you opt in to trusting it</p>",
        "id": 207836557,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598271912
    },
    {
        "content": "<p>(not sure if opting in is possible yet/ever)</p>",
        "id": 207836580,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598271929
    },
    {
        "content": "<p>It might be the case that you can prove something about a program that is not true when you actually go and run it--you can view this as either a bug in the specification (like here) or a bug in the compiler/runtime; in any case it won't lead to a proof of <code>false</code>.</p>",
        "id": 207836738,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598272034
    },
    {
        "content": "<p>but then OP also mentioned \"external <code>lean_int_add</code>\". How would that affect someone like me contributing to mathlib?</p>",
        "id": 207837548,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1598272562
    },
    {
        "content": "<p>would <code>#eval (-3) + (-4)</code> become <code>-7</code>?</p>",
        "id": 207837617,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1598272584
    },
    {
        "content": "<p>probably, and tactics like <code>norm_num</code> would also get mighty confused</p>",
        "id": 207837660,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598272632
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113488-general/topic/Typo.20in.20Lean4's.20Int.2Eadd/near/207836580\">said</a>:</p>\n<blockquote>\n<p>(not sure if opting in is possible yet/ever)</p>\n</blockquote>\n<p>See <a href=\"https://github.com/leanprover/lean4/blob/8630d78b3fcaaa6dd6bd387e5f3d7d0983d1ca90/src/Init/Core.lean#L1721-L1743\">https://github.com/leanprover/lean4/blob/8630d78b3fcaaa6dd6bd387e5f3d7d0983d1ca90/src/Init/Core.lean#L1721-L1743</a></p>",
        "id": 207838230,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1598273049
    },
    {
        "content": "<p>Is there/will there be a way to test whether a declaration opts in to this?</p>",
        "id": 207838405,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1598273173
    },
    {
        "content": "<p>Or a compiler flag to turn off this reflection, or something like that? Any way to avoid accidentally depending on evaluation.</p>",
        "id": 207838469,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1598273234
    },
    {
        "content": "<p>It would make sense to me to integrate it into the <code>#print axioms</code> check</p>",
        "id": 207840022,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1598274302
    },
    {
        "content": "<p>don't know if this would break the setup, but <code>reduceBool</code> could be a constant and a propositional <code>reduceBool b = b</code> an axiom</p>",
        "id": 207840713,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598274663
    },
    {
        "content": "<p>I guess you probably really want a defeq, though. So then I suppose you need separate logic to track usage of this reduction rule.</p>",
        "id": 207842478,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598275612
    },
    {
        "content": "<p>Actually now I don't think my suggestion made any sense in the first place--never mind.</p>",
        "id": 207842634,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598275686
    },
    {
        "content": "<p>Now I'm wondering what the intended guarantees are here. Is it supposed to be the case that this feature only gives you faster access to definitional equalities that the kernel could have proved anyways (under the assumption that the compiler and any untrusted code are correct)?</p>",
        "id": 207846025,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598277498
    },
    {
        "content": "<p>and is the argument supposed to be by canonicity for <code>bool</code> and <code>nat</code>?</p>",
        "id": 207846311,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598277627
    },
    {
        "content": "<p>Is canonicity true for all those terms which the compiler can generate for, even in the presence of axioms?</p>",
        "id": 207846554,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598277745
    },
    {
        "content": "<p>I'm wondering whether it is possible to leak in some extensionality <code>x = y</code> implies <code>x defeq y</code></p>",
        "id": 207846580,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598277767
    },
    {
        "content": "<p>to be clear, the two possibilities here are: Assuming correctness of the compiler (whatever that means),</p>\n<ul>\n<li>no new defeqs are available when this feature is used,</li>\n<li>some new defeqs are available, but only ones which are propositionally correct</li>\n</ul>",
        "id": 207846904,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598277932
    },
    {
        "content": "<p>(obviously if new defeqs are available that aren't even propositionally valid, the compiler can't be considered correct)</p>",
        "id": 207847110,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598278041
    },
    {
        "content": "<p>Here I'm including use of unsafe features under the umbrella of the compiler, so this might be relevant to whether certain usages of unsafe features are considered to be correct or not</p>",
        "id": 207847912,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598278474
    },
    {
        "content": "<blockquote>\n<p>Is canonicity true for all those terms which the compiler can generate for, even in the presence of axioms?</p>\n</blockquote>\n<p>Certainly not for lean 3</p>",
        "id": 207885938,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598297342
    },
    {
        "content": "<p>At least, there are closed terms of type <code>nat</code> or <code>bool</code> that will block via <code>#reduce</code> and evaluate via <code>#eval</code></p>",
        "id": 207886075,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598297406
    },
    {
        "content": "<p>so any use of the VM in this way is going to entail some new defeqs</p>",
        "id": 207886167,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598297459
    },
    {
        "content": "<p>I feel like we've discussed this before; can you remind me of an example?</p>",
        "id": 207886418,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598297587
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"o\">:=</span>\n<span class=\"bp\">@</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">propext</span> <span class=\"o\">(</span><span class=\"n\">and_self</span> <span class=\"n\">true</span><span class=\"o\">))</span> <span class=\"mi\">42</span>\n\n<span class=\"bp\">#</span><span class=\"n\">reduce</span> <span class=\"n\">foo</span>\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">foo</span>\n</code></pre></div>",
        "id": 207886683,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598297758
    },
    {
        "content": "<p>I believe it is possible to leak extensionality, although because it is limited to closed terms I don't know how extensive the leakage is</p>",
        "id": 207886976,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598297909
    },
    {
        "content": "<p>Even propositional equality of VM validated equalities in lean is currently an open question, meaning that the consistency of the overall system becomes open</p>",
        "id": 207887946,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598298397
    },
    {
        "content": "<p>there is a proof of correctness of an erasure map similar to the lean VM in <a href=\"https://dl.acm.org/doi/10.1145/3371076\">Coq Coq Correct!</a>, which might be possible to adapt</p>",
        "id": 207888302,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598298595
    }
]