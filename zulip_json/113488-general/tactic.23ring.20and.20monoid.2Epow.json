[
    {
        "content": "<p>It looks like right now <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#ring\">tactic#ring</a> <a href=\"https://github.com/leanprover-community/mathlib/blob/36e1cdf8eaf740026150edfab2c27d226eb4809d/src/tactic/ring.lean#L493\">only works with <code>monoid.has_pow</code></a>, which means it doesn't work for things like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ulift.has_npow\">docs#ulift.has_npow</a>. How hard is this to fix?</p>",
        "id": 277654945,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649012054
    },
    {
        "content": "<p>Hmm, I can't make a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>, perhaps my problem in <a href=\"https://github.com/leanprover-community/mathlib/pull/13139\">#13139</a> is to do with irreducibility</p>",
        "id": 277655432,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649012635
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.ring.ulift</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic.ring</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span>       <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">4</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span>  <span class=\"c1\">-- ok</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ulift</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">4</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span>  <span class=\"c1\">-- fails</span>\n</code></pre></div>",
        "id": 277657397,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649015066
    },
    {
        "content": "<p>Ah, there we go, i forgot that <code>a^2*a = a*a^2</code> was solvable by commutativity alone</p>",
        "id": 277657407,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649015094
    },
    {
        "content": "<p>There's also a monoid instance on <code>ulift</code> compatible with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ulift.has_pow\">docs#ulift.has_pow</a> right? Then the <code>match P with `(monoid.has_pow)</code> line can safely become <code>is_def_eq P `(monoid.has_pow)</code>.</p>",
        "id": 277696041,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1649060006
    },
    {
        "content": "<p>BTW, I believe the Coq community calls this design pattern \"keyed matching\": the key <code>has_pow.pow</code> should match literally while the <code>has_pow</code> instance should match by defeq.</p>",
        "id": 277699189,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1649061602
    }
]