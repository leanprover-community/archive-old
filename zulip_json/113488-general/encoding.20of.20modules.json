[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Assia asked me why we now use [ring R] [add_comm_group M] [module R M] instead of bunding everything into the module structure. As I recall, this decision had to do with type class problems e.g. with expressions <code>x + y</code> where there is no trace of the ring structure, making it hard to find the right module, though not hard to find the relative group. Do you have a better explanation?</p>",
        "id": 178499080,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1571423038
    },
    {
        "content": "<p>Just to remark that we also use <code>[comm_ring R] [topological_space R] [topological_ring R]</code> instead of bundling everything into the topological ring structure. But is this a different issue?</p>",
        "id": 178500069,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1571423939
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110865\">@Jeremy Avigad</span> I think it is to support the possibility that <code>M</code>is a module over several different rings. In such cases you wouldn't want the additive group structure to change, but only the scalar multiplication. Hence the two step process.</p>",
        "id": 178501771,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571425394
    },
    {
        "content": "<p>Before this refactor, we had a setup where <code>R</code> was an <code>out_param</code>. (And it still didn't really support having two scalar rings on the same <code>M</code>, IIRC.) But this out_param caused lots of headaches and issues with type-class search. At the time I was even more of a newbie then I am nowadays, so I really didn't understand what was going on. All I knew was that it was impossible to use modules in any non-trivial way. Then Mario and Kenny refactored it, and nowadays they are quite pleasant to use.</p>",
        "id": 178501916,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571425520
    },
    {
        "content": "<p>Of course want could define <code>Module R</code> (and in fact this has recently been done by <span class=\"user-mention\" data-user-id=\"201572\">@Robert Spencer</span>), and write <code>M : Module R</code>. This has the benefit that you can (and we have) a category structure on <code>Module R</code>. But the problem is that it makes it harder to talk about <code>\\C</code> as an <code>\\R</code>-module, etc... Also changing the scalar ring is not so transparent anymore.</p>",
        "id": 178502008,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571425616
    },
    {
        "content": "<p>Thanks, Johan. I'll pass that along.</p>",
        "id": 178552930,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1571502227
    },
    {
        "content": "<p>I think I remember another issue: when <code>R</code> was marked as an <code>out_param</code>, it led to looping, maybe because every ring is an instance of a module or because some modules give rise to rings. Anyhow, it would be good if the reasons for the decision were documented in <code>algebra/module</code>.</p>",
        "id": 178603714,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1571594931
    },
    {
        "content": "<p>Yes every ring is a module over itself and also over every subring of itself</p>",
        "id": 178605216,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1571597591
    },
    {
        "content": "<p>I found this all very interesting. We did all this very inefficiently because of poor communication. I can quite believe that the definition of a module over a ring was there even in 2017 when I started on Lean, but there was nothing nontrivial proved about them. Then when I started pushing for things like noetherian modules, and <span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> and <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> and I started actually trying to do MSc level algebra we were instantly hit by outparam problems which we didn't understand because we're mathematicians. Some initial hacks were tried but somehow the set-up just couldn't be made to work. I was trying to prove things like the  Hilbert Basis theorem and other mathematicians were doing other things and it was only then that it became clear what we actually <em>wanted</em>. Mario acted as interpreter between us and Sebastian and it was eventually decided to do a huge module refactor, which took Mario a long time and I imagine was a huge effort. There is some sort of moral there. Maybe it's just that if a mathematician wants a structure they had better be very clear as early as possible about what they want to do with it. This is hard though because \"we just want to do maths with it\", and this isn't a good enough answer</p>",
        "id": 178605472,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1571598027
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Do you remember what the problems were and how the refactor solved them? If there are lessons here to be learned, we shouldn't squander the opportunity.</p>",
        "id": 178614532,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1571612797
    },
    {
        "content": "<p>The problem was the out_param. I think we've gotten better at it, but you have to be careful when you use these classes because it's easy to get the binders wrong in theorems. Once we figured that out it mostly worked, except for the inherent limitation that a module could only have one base ring</p>",
        "id": 178614587,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1571612908
    },
    {
        "content": "<p>What do you mean, \"get the binders wrong in theorems\"? What did we get better at?</p>",
        "id": 178614709,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1571613123
    },
    {
        "content": "<p>In short, you can give module the type <code>module (R : out_param Type) {_: out_param (ring R)} (M : Type) : Type extends add_comm_group M</code>, and then in theorems you use the binders <code>{R : Type} {_ : ring R} {M : Type} [module R M]</code></p>",
        "id": 178614728,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1571613189
    },
    {
        "content": "<p>people want to put <code>ring R</code> in an instance binder and that causes <code>ring ?</code> typeclass searches which causes looping</p>",
        "id": 178614738,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1571613238
    },
    {
        "content": "<p>It took a while after the definition of module for this to hit us because there weren't any ring constructions yet, but when they got introduced this caused lots of unrelated typeclass problems to fail</p>",
        "id": 178614797,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1571613312
    },
    {
        "content": "<p>Oh, I get it. But actually we use <code>class module (α : Type u) (β : Type v) [ring α] [add_comm_group β] extends semimodule α β</code> where <code>add_comm_group</code> is on the outside. And what goes wrong if we put everything but the two types on the inside?</p>",
        "id": 178614917,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1571613592
    },
    {
        "content": "<p>with the non-out_param version, the add_comm_group has to come outside</p>",
        "id": 178615246,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1571614252
    },
    {
        "content": "<p>Otherwise, if you have a parent coercion from <code>module</code> to <code>add_comm_group</code>, you get a search like <code>add_comm_group G &lt;- module ? G &lt;- ring ?</code></p>",
        "id": 178615295,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1571614334
    },
    {
        "content": "<p>O.k., so if I understand correctly, in hindsight, we could have kept the original encoding of module (with everything but the types on the inside), as long as we were careful not to mark <code>R</code> for type class inference in the instances. Alternatively, we can do what is in the library now.</p>\n<p>As far as you can tell, are both equally good? It would be more consistent with everything else we are doing to put it all on the inside.</p>",
        "id": 178615763,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1571615325
    },
    {
        "content": "<p>They are equally good, but they make some different assertions about mathematical practice and the original approach turned out not to be a reasonable assumption</p>",
        "id": 178615824,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1571615418
    },
    {
        "content": "<p>that is, a module has only one base ring</p>",
        "id": 178615827,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1571615446
    },
    {
        "content": "<p>That's the real reason we switched. Kevin had some examples of module structures he wanted that didn't fit the mold, and finsupp already had some module constructions that didn't work and had to be defs</p>",
        "id": 178615837,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1571615501
    },
    {
        "content": "<p>This is basically the fundamental assumption that licenses using typeclasses. If it's not true, then you have to do things some other way - you have to be more explicit about what you want because it matters which one you get</p>",
        "id": 178615887,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1571615619
    },
    {
        "content": "<p>Thanks! That's really helpful.</p>",
        "id": 178616343,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1571616371
    },
    {
        "content": "<p>If the hours of work which Mario put in just so we could have <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>R</mi><mo stretchy=\"false\">[</mo><mi>X</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">R[X]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose\">]</span></span></span></span> simultaneously being a module over both <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>R</mi><mo stretchy=\"false\">[</mo><mi>X</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">R[X]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose\">]</span></span></span></span> ultimately taught us something then it would be good to somehow record this</p>",
        "id": 178629963,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1571640272
    },
    {
        "content": "<p>Mario, one last question. You wrote \"In short, you can give module the type module (R : out_param Type) {_: out_param (ring R)} (M : Type) : Type extends add_comm_group M, and then in theorems you use the binders {R : Type} {_ : ring R} {M : Type} [module R M]\". What does marking an ordinary implicit argument as <code>out_param</code> do? I thought <code>out_param</code> only has an effect on variables marked for class inference.</p>",
        "id": 178647184,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1571658302
    },
    {
        "content": "<p>More general question: is there any documentation on the current behavior of <code>out_param</code> anywhere?</p>",
        "id": 178648003,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1571659132
    },
    {
        "content": "<p>Of course there is! You can start with <a href=\"https://github.com/leanprover/lean/search?q=is_class_out_param&amp;unscoped_q=is_class_out_param\" target=\"_blank\" title=\"https://github.com/leanprover/lean/search?q=is_class_out_param&amp;unscoped_q=is_class_out_param\">https://github.com/leanprover/lean/search?q=is_class_out_param&amp;unscoped_q=is_class_out_param</a></p>",
        "id": 178648330,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1571659386
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110865\">@Jeremy Avigad</span> I might be misremembering, as I haven't had occasion to use it in a while, but I believe it starts out the search with a metavariable even if you give it a value (i.e. it searches for <code>module ? ? M inst_M</code> instead of <code>module R ? M inst_M</code>)</p>",
        "id": 178649579,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1571660528
    },
    {
        "content": "<p>Yes, it allows typeclass inference to start even when the corresponding argument still contains metavariables, then replaces that argument with a temporary metavariable for the search (so that it really is only an <em>output</em> of the search), and finally unifies inferred and given argument values. It does not influence the actual search.</p>",
        "id": 178680160,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1571680357
    }
]