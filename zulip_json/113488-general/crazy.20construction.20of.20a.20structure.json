[
    {
        "content": "<p>I never knew one could do this: <a href=\"https://github.com/leanprover/mathlib/blob/38d553694351f4c23a8a8216038c7c8abcb7cd32/ring_theory/localization.lean#L80\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/blob/38d553694351f4c23a8a8216038c7c8abcb7cd32/ring_theory/localization.lean#L80\">https://github.com/leanprover/mathlib/blob/38d553694351f4c23a8a8216038c7c8abcb7cd32/ring_theory/localization.lean#L80</a> (definition of ring structure on a localization).</p>",
        "id": 126805454,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526758785
    },
    {
        "content": "<p>Here are the two ways I knew of building instances of a structure:</p>",
        "id": 126805506,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526758816
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">structure</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">baz</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n\n<span class=\"kn\">definition</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">bar</span> <span class=\"o\">:=</span> <span class=\"mi\">34</span><span class=\"o\">,</span>\n  <span class=\"n\">baz</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">5</span>\n<span class=\"o\">}</span>\n\n<span class=\"kn\">definition</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"mi\">3</span><span class=\"o\">,</span><span class=\"n\">true</span><span class=\"bp\">⟩</span>\n</pre></div>",
        "id": 126805508,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526758830
    },
    {
        "content": "<p>The second one I always think of as \"pointy brackets are a generic way of building something which needs two (say) \"inputs\", like a proof of <code>P and Q</code>\"</p>",
        "id": 126805518,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526758907
    },
    {
        "content": "<p>The first one I always just assumed was custom notation that only made sense for structures</p>",
        "id": 126805558,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526758929
    },
    {
        "content": "<p>I don't really know what the link is doing, but I do know that <code>by {blah,blah,blah}</code> is pretty much the same as <code>(begin blah,blah,blah, end)</code>, which is surely a different usage of the squiggly brackets</p>",
        "id": 126805567,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526759037
    },
    {
        "content": "<p><code>by</code> takes a tactic. The tactic is <code>refine ...</code>.<br>\n<code>refine</code> takes an expression with some holes. The expression is <code>{ ... }</code>. Here the <code>{</code>...<code>}</code> are building a structure, like you already know.</p>",
        "id": 126805607,
        "sender_full_name": "Reid Barton",
        "timestamp": 1526759095
    },
    {
        "content": "<p>This pattern has been discussed many times here</p>",
        "id": 126805614,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526759116
    },
    {
        "content": "<p>Put every definition in the refine and then proofs</p>",
        "id": 126805616,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526759131
    },
    {
        "content": "<p>The <code>..</code> at the end is important</p>",
        "id": 126805656,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526759173
    },
    {
        "content": "<p>Well, really the tactic is <code>refine ...; { ... }</code> and these other <code>{}</code>s are <code>solve_one begin ... end</code> or whatever</p>",
        "id": 126805659,
        "sender_full_name": "Reid Barton",
        "timestamp": 1526759187
    },
    {
        "content": "<blockquote>\n<p>The <code>..</code> at the end is important</p>\n</blockquote>\n<p>I don't see any <code>..</code> at the end in my link</p>",
        "id": 126807008,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526762203
    },
    {
        "content": "<p>That's because there are underscores around. If you do what I wrote (define operations, leave out proofs), you need <code>..</code></p>",
        "id": 126807096,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526762386
    },
    {
        "content": "<p>I think</p>",
        "id": 126807101,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526762401
    }
]