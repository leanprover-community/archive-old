[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110111\">@Keeley Hoek</span>, could you remind me what your <a href=\"https://github.com/khoek/libiconfig\" target=\"_blank\" title=\"https://github.com/khoek/libiconfig\"><code>libiconfig</code></a> repository is for? If we aspire to incorporating <code>rewrite_search</code> into mathlib, what are we going to do with this dependency? Remove it? Merge it first?</p>",
        "id": 167180777,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1559562452
    },
    {
        "content": "<p>I just had to modify it a little bit to compile against current mathlib, so I made a PR on your repository.</p>",
        "id": 167180785,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1559562473
    },
    {
        "content": "<p>I suppose the dream was to PR it. It's short for <code>LIBInteractiveCONFIG</code>.</p>\n<p>The point is to add a custom interactive monad which can parse config options. It makes mishmash syntax like <code>rewrite_search { visualiser, depth := 50, strategy.bfs, metric.svm { mode := float } }</code> and simultaneously also allow e.g. <code>rewrite_search { no visualiser, strategy := bfs, metric := svm }</code> and having sub-configs all work (without a host of <code>open</code>s to get the right name spaces of everything too), and having/resolving defaults, etc. (Okay, these are really long examples, but the point is the flexibility.) To be clear, we use a custom interaction monad to implement this, but this all works inside a normal tactic block.</p>\n<p>It can automatically do some pretty cool stuff; e.g. if you have a normal lean <code>structure</code>, then there is e.g. a command which lets you do <code>iconfig_add_struct[rewrite_search] tactic.rewrite_search.config</code> which automatically creates setters for all of the fields of the structure <code>tactic.rewrite_search.config</code> inside the custom monad, and then there is an API to automatically have an instance of the structure synthesised from this data without having to manually build it from the value of each field yourself. (It's literally like <code>mk_struct</code> and then the type.) This supports the usual <code>:= blah</code> default option syntax declared in normal structures, and gives a nice error if something can't be filled in, etc. You can also create arbitrary custom <code>def do_stuff : iconfig unit := ...</code> functions which can do arbitrary configuration logic when run as <code>rewrite_search { do_stuff }</code> for example.</p>\n<p>It definitely seems like a thing people could want to use.</p>",
        "id": 167187553,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1559567655
    },
    {
        "content": "<p>I could get it into canonical-style state on Friday, if you're not so keen. Of course, it's not absolutely required.</p>",
        "id": 167188058,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1559567996
    },
    {
        "content": "<p>It does seem a nice feature. On the other hand, it is an extra layer of complexity. (In the back of my mind, <span aria-label=\"four leaf clover\" class=\"emoji emoji-1f340\" role=\"img\" title=\"four leaf clover\">:four_leaf_clover:</span> lurks...)</p>",
        "id": 167199004,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1559574385
    },
    {
        "content": "<p>How much work is it going to be to remove this from rewrite_search for the PR, then possibly add it back later?</p>",
        "id": 167199032,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1559574416
    },
    {
        "content": "<p>Also: I apparently can't write:</p>\n<div class=\"codehilite\"><pre><span></span>meta def rws : tactic string := `[rewrite_search { explain := tt }] &gt;&gt; pure &quot;&quot;\n</pre></div>\n\n\n<p>anymore. I get an error</p>\n<div class=\"codehilite\"><pre><span></span>type mismatch at application\n  iconfig.rewrite_search.interactive.explain ‚Åá tt\nterm\n  tt\nhas type\n  bool\nbut is expected to have type\n  tactic_state\n</pre></div>\n\n\n<p>Do you know a work-around?</p>",
        "id": 167203953,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1559577164
    },
    {
        "content": "<p>Ugh, okay, I think I want this <code>libiconfig</code> stuff gone, sorry. I can't work out how to call <code>tactic.rewrite_search</code> by hand and just pass it configuration options I want...</p>",
        "id": 167204296,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1559577376
    },
    {
        "content": "<p>Ok, I'll get rid of it!</p>",
        "id": 167243764,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1559606605
    },
    {
        "content": "<p>Thank you. :-) Sorry, I know you were pleased to get all those config options working nicely!</p>",
        "id": 167244028,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1559606935
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110111\">@Keeley Hoek</span> Any chance you can tell me how to construct a <code>tactic unit</code> that calls <code>rewrite_search</code> with <code>explain := tt</code>? I just can't do it. :-( I would like to have this for my talk in a day or two...</p>",
        "id": 167285198,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1559649749
    },
    {
        "content": "<p>Ahhh, <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span>, super rushing right now, but pasting:</p>\n<div class=\"codehilite\"><pre><span></span>meta def rws : tactic string := `[rewrite_search {explain := tt}] &gt;&gt; pure &quot;&quot;\n</pre></div>\n\n\n<p>directly into <code>test/rewrite_search.lean</code> works just fine for me. Can you reproduce?</p>",
        "id": 167285460,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1559649957
    },
    {
        "content": "<p>Thank you. I'm absolutely sure I tried that earlier and got a mysterious error. :-) Sorry for the interruption!</p>",
        "id": 167285568,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1559650053
    },
    {
        "content": "<p>I copied it from what you wrote earlier! So yeah, no idea what's going on there</p>",
        "id": 167285578,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1559650072
    },
    {
        "content": "<p>Err... this is weird.</p>",
        "id": 167285692,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1559650172
    },
    {
        "content": "<p>That compiles, but all the trace messages are proofs for the wrong theorems...?</p>",
        "id": 167285705,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1559650182
    },
    {
        "content": "<p>For every single rewrite problem it is printing one of</p>\n<div class=\"codehilite\"><pre><span></span>/- `rewrite_search` says -/\nconv_lhs { congr, skip, erw [functor.image_preimage] },\nconv_lhs { erw [functor.image_preimage] },\nconv_lhs { congr, erw [functor.image_preimage] },\nconv_lhs { erw [functor.image_preimage] }\n</pre></div>\n\n\n<p>or </p>\n<div class=\"codehilite\"><pre><span></span>/- `rewrite_search` says -/\nconv_rhs { erw [functor.image_preimage] }\n</pre></div>",
        "id": 167285789,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1559650247
    },
    {
        "content": "<p>:O</p>",
        "id": 167285834,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1559650302
    },
    {
        "content": "<p>Okay, what must have happened is that the <code>congr</code>-mode tracked rewrite reporting got broken when it was extracted for the mathlib</p>",
        "id": 167286526,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1559650899
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> <br>\nI have to sleep now (exam :O), but I think the fastest solution is to put the old rewrite_all folder verbatim back in the lean-rewrite-search repo and then deleting it from the mathlib version</p>",
        "id": 167286605,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1559650955
    },
    {
        "content": "<p>I don't know your mathlib version exactly but I think that's why garbage is coming out<br>\nI dont think what you are seeing are poofs at all</p>",
        "id": 167286627,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1559650991
    },
    {
        "content": "<p>Got it. I think I've gone back to an old version successfully.</p>",
        "id": 167294538,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1559655855
    }
]