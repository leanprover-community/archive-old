[
    {
        "content": "<p>I've just defined the integers mod n, and since they are a <code>comm_ring</code> there is a default coercion from <code>int</code>. However rather than using the default coercion, it would be nicer to have <code>quotient.mk</code> as the coercion. Is there a way to change this?</p>",
        "id": 125456190,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1524241530
    },
    {
        "content": "<p>I think if you declare the <code>has_coe</code> instance, it will use your instance whenever applicable before even trying the coercion from <code>int</code> to arbitrary <code>comm_ring</code></p>",
        "id": 125456275,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524241657
    },
    {
        "content": "<p>Is there a risk of a diamond here though?</p>",
        "id": 125457130,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524243104
    },
    {
        "content": "<p>You mean like when you have multiple inheritance?</p>",
        "id": 125457174,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524243140
    },
    {
        "content": "<blockquote>\n<p>Is there a risk of a diamond here though?</p>\n</blockquote>\n<p>What's the diamond? I think that the same idea has been used for coercions from <code>nat</code> to <code>int</code>. The only risk is if I make a <code>coe</code> from <code>Zmod</code> to <code>int</code></p>",
        "id": 125459795,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1524246769
    },
    {
        "content": "<p>the diamond occurs in 5 years' time when someone else imports your code and then writes down some innocuous-looking coe and stuff doesn't work. My question is whether this is a possibility</p>",
        "id": 125460970,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524248186
    },
    {
        "content": "<p>Not for any notion of diamond that I've worked with</p>",
        "id": 125461446,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524248909
    },
    {
        "content": "<p>Somehow what I was concerned about is that if someone one day writes down a coercion from the integers mod n to another comm_ring then they will have to deal with the issue that they now have two coercions from int to the other comm_ring which may not be defeq.</p>",
        "id": 125463614,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524251922
    },
    {
        "content": "<p>You could define a local instance</p>",
        "id": 125463925,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524252581
    },
    {
        "content": "<p>That way only people editing your file would have to deal with this</p>",
        "id": 125463970,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524252605
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> I don't think coercions are transitive, so if something is coerced from integers to integers mod n to R, then it will appear as two up arrows. I think these issues happen anyway with int to rat to real etc, and there are a load of lemmas proving equivalence of different permutations of coercions. I don't want a local coercion, because the quotient coercion is the most useful for everyone.</p>",
        "id": 125466482,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1524256425
    },
    {
        "content": "<p>There is definitely a \"diamond risk\", but of an even more trivial variety than an actual diamond: you are talking about two arrows from A to B in the category of typeclass instances, which is only acceptable (by my rule of thumb) if they are defeq, which presumably defeats the purpose of having a second coercion.</p>\n<p>That said, in the specific case of replacing the default coercion, you can do it by similar methods to the ones used for <code>int.of_nat</code>, as Simon mentions, although you will have to prove lots of lemmas to replace the ones that <code>int.cast</code> gives you, and users will need to know that you are doing this since they have to refer to different lemmas.</p>\n<p>Coercions are transitive, in the sense that if there is <code>has_coe A B</code> and <code>has_coe B C</code> and a <code>C</code> is needed where <code>A</code> is given, Lean will insert a single <code>coe</code> up-arrow with a composite typeclass instance. However, mathlib has a simp lemma explicitly to break these composite arrows up, because they work poorly with other simp lemmas that are all keyed to single coercions.</p>",
        "id": 125477762,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524278280
    }
]