[
    {
        "content": "<p>do we have that?</p>",
        "id": 125905999,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525112575
    },
    {
        "content": "<p>So <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mfrac><mrow><mo>−</mo><mn>1</mn></mrow><mrow><mo>−</mo><mn>1</mn></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">\\frac{-1}{-1}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.845108em;\"></span><span class=\"strut bottom\" style=\"height:1.2484389999999999em;vertical-align:-0.403331em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.845108em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mathrm mtight\">1</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mathrm mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.403331em;\"></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span> is not a positive rational number?</p>",
        "id": 125906320,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525112977
    },
    {
        "content": "<p>in <code>rat</code> the denominator is always positive</p>",
        "id": 125906332,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525112994
    },
    {
        "content": "<p>So <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mfrac><mrow><mn>1</mn></mrow><mrow><mo>−</mo><mn>2</mn></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">\\frac{1}{-2}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.845108em;\"></span><span class=\"strut bottom\" style=\"height:1.2484389999999999em;vertical-align:-0.403331em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.845108em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mathrm mtight\">2</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathrm mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.403331em;\"></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span> is not a rational number...</p>",
        "id": 125906393,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525113028
    },
    {
        "content": "<p>denominator</p>",
        "id": 125906398,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525113034
    },
    {
        "content": "<p>I find this disturbing...</p>",
        "id": 125906409,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525113061
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">num_pos_of_pos</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">rat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"bp\">.</span><span class=\"n\">num</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">calc</span>  <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"bp\">.</span><span class=\"n\">num</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span>\n    <span class=\"bp\">=</span> <span class=\"n\">r</span><span class=\"bp\">.</span><span class=\"n\">num</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"bp\">.</span><span class=\"n\">denom</span><span class=\"o\">:</span><span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">r</span><span class=\"bp\">.</span><span class=\"n\">denom</span> <span class=\"o\">:</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"err\">$</span> <span class=\"n\">div_mul_cancel</span> <span class=\"bp\">_</span> <span class=\"err\">$</span> <span class=\"n\">ne_of_gt</span> <span class=\"err\">$</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cast_pos</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">r</span><span class=\"bp\">.</span><span class=\"n\">pos</span>\n<span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">r</span><span class=\"bp\">.</span><span class=\"n\">denom</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">mk_eq_div</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">num_denom</span> <span class=\"n\">r</span><span class=\"o\">]</span>\n<span class=\"bp\">...</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">mul_pos</span> <span class=\"n\">H</span> <span class=\"err\">$</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cast_pos</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">r</span><span class=\"bp\">.</span><span class=\"n\">pos</span>\n</pre></div>",
        "id": 125906582,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525113270
    },
    {
        "content": "<p>it's hard to prove anything about the rational numbers when I don't have enough lemmas...</p>",
        "id": 125906590,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525113280
    },
    {
        "content": "<p>Are you building an interface for \\Q ?</p>",
        "id": 125906724,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525113394
    },
    {
        "content": "<p>I'm using Q</p>",
        "id": 125906727,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525113402
    },
    {
        "content": "<p>and I'm finding everything hard to prove</p>",
        "id": 125906734,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525113408
    },
    {
        "content": "<p>Ok, then we need an interface... because end-users shouldn't use r.num and r.denom, in my opinion.</p>",
        "id": 125906760,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525113444
    },
    {
        "content": "<p>well don't rationals have denominators...</p>",
        "id": 125906768,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525113456
    },
    {
        "content": "<p>Not really well-defined... I think</p>",
        "id": 125906824,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525113486
    },
    {
        "content": "<p>they are</p>",
        "id": 125906831,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525113491
    },
    {
        "content": "<p>Of course you can make choices</p>",
        "id": 125906833,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525113493
    },
    {
        "content": "<p>no choices required</p>",
        "id": 125906836,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525113497
    },
    {
        "content": "<p>Well, not <em>morally</em> well-defined</p>",
        "id": 125906842,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525113505
    },
    {
        "content": "<p>in Lean a rational number consists of a numerator in Z, denominator in N, proof that the denominator is positive, and proof that they are coprime</p>",
        "id": 125906854,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525113537
    },
    {
        "content": "<p>and I find that to be morally well-defined also</p>",
        "id": 125906861,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525113546
    },
    {
        "content": "<p>every rational number has a simplified form</p>",
        "id": 125906869,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525113555
    },
    {
        "content": "<p>Yes, but that should be hidden away as much as possible</p>",
        "id": 125906931,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525113603
    },
    {
        "content": "<p>I think</p>",
        "id": 125906940,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525113606
    },
    {
        "content": "<p>I need its denominator to prove that every rational number is smaller than some power of 2</p>",
        "id": 125906952,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525113630
    },
    {
        "content": "<p>in particular, 1/2^r.denom &lt; r</p>",
        "id": 125906956,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525113640
    },
    {
        "content": "<p>Well, part of the interface could say that for every rational number <code>r</code> there exists an integer <code>n</code> with <code>r &lt; n</code></p>",
        "id": 125906988,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525113703
    },
    {
        "content": "<p>Or something like that.</p>",
        "id": 125906995,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525113712
    },
    {
        "content": "<p>aha that's existing</p>",
        "id": 125907033,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525113724
    },
    {
        "content": "<p>but I don't like it :P</p>",
        "id": 125907041,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525113728
    },
    {
        "content": "<p>there's even a class for that</p>",
        "id": 125907056,
        "sender_full_name": "Reid Barton",
        "timestamp": 1525113770
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">lt_two_pow</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span> <span class=\"err\">^</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">n</span> <span class=\"n\">dec_trivial</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n<span class=\"k\">calc</span>  <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n    <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span><span class=\"err\">^</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>   <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">add_lt_add_right</span> <span class=\"n\">ih</span> <span class=\"mi\">1</span>\n<span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span><span class=\"err\">^</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"err\">^</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">add_le_add_left</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">pow_le_pow_of_le_right</span> <span class=\"n\">dec_trivial</span> <span class=\"err\">$</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">zero_le</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"err\">^</span><span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"err\">^</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span>   <span class=\"o\">:</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"err\">$</span> <span class=\"n\">mul_two</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"err\">^</span><span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"err\">^</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>   <span class=\"o\">:</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"err\">$</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">pow_succ</span> <span class=\"mi\">2</span> <span class=\"n\">n</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">coe_pow</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"err\">^</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"err\">^</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">n</span> <span class=\"n\">rfl</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">pow_succ&#39;</span><span class=\"o\">,</span> <span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">pow_succ</span><span class=\"o\">]</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">num_pos_of_pos</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">rat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">r</span><span class=\"bp\">.</span><span class=\"n\">num</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">cast_lt</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"err\">$</span>\n<span class=\"k\">calc</span>  <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"bp\">.</span><span class=\"n\">num</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span>\n    <span class=\"bp\">=</span> <span class=\"n\">r</span><span class=\"bp\">.</span><span class=\"n\">num</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"bp\">.</span><span class=\"n\">denom</span><span class=\"o\">:</span><span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">r</span><span class=\"bp\">.</span><span class=\"n\">denom</span> <span class=\"o\">:</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"err\">$</span> <span class=\"n\">div_mul_cancel</span> <span class=\"bp\">_</span> <span class=\"err\">$</span> <span class=\"n\">ne_of_gt</span> <span class=\"err\">$</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cast_pos</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">r</span><span class=\"bp\">.</span><span class=\"n\">pos</span>\n<span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">r</span><span class=\"bp\">.</span><span class=\"n\">denom</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">mk_eq_div</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">num_denom</span> <span class=\"n\">r</span><span class=\"o\">]</span>\n<span class=\"bp\">...</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">mul_pos</span> <span class=\"n\">H</span> <span class=\"err\">$</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cast_pos</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">r</span><span class=\"bp\">.</span><span class=\"n\">pos</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">one_le_num_of_pos</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">rat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"bp\">.</span><span class=\"n\">num</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">have</span> <span class=\"n\">H1</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"mi\">0</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"bp\">ℤ</span><span class=\"o\">):</span><span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">ℚ</span><span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n<span class=\"n\">H1</span> <span class=\"bp\">▸</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">cast_le</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"err\">$</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">add_one_le_of_lt</span> <span class=\"err\">$</span> <span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">num_pos_of_pos</span> <span class=\"n\">r</span> <span class=\"n\">H</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">lt</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"err\">^</span><span class=\"n\">r</span><span class=\"bp\">.</span><span class=\"n\">denom</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">r</span> <span class=\"o\">:=</span>\n<span class=\"k\">calc</span>  <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"err\">^</span><span class=\"n\">r</span><span class=\"bp\">.</span><span class=\"n\">denom</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span>\n    <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">r</span><span class=\"bp\">.</span><span class=\"n\">denom</span> <span class=\"o\">:</span> <span class=\"n\">one_div_lt_one_div_of_lt</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cast_pos</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">r</span><span class=\"bp\">.</span><span class=\"n\">pos</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">trans_rel_left</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cast_lt</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"err\">$</span> <span class=\"n\">lt_two_pow</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">coe_pow</span> <span class=\"mi\">2</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">)</span>\n<span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"n\">r</span><span class=\"bp\">.</span><span class=\"n\">num</span> <span class=\"bp\">/</span> <span class=\"n\">r</span><span class=\"bp\">.</span><span class=\"n\">denom</span> <span class=\"o\">:</span> <span class=\"n\">div_le_div_of_le_of_pos</span> <span class=\"o\">(</span><span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">one_le_num_of_pos</span> <span class=\"n\">r</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cast_pos</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">r</span><span class=\"bp\">.</span><span class=\"n\">pos</span><span class=\"o\">)</span>\n<span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">r</span><span class=\"bp\">.</span><span class=\"n\">num</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"bp\">.</span><span class=\"n\">denom</span><span class=\"o\">:</span><span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">rfl</span>\n<span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">mk_eq_div</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">num_denom</span> <span class=\"n\">r</span><span class=\"o\">]</span>\n</pre></div>",
        "id": 125907215,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525113964
    },
    {
        "content": "<p>yay done</p>",
        "id": 125907217,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525113966
    },
    {
        "content": "<p>I just don't like the fact that if some computation spits out two integers, <code>a</code> and <code>b</code>, with <code>b \\ne 0</code>, and I want to consider the rational number <code>a/b</code>, then Lean decides it <em>also</em> wants to put them in lowest terms.</p>",
        "id": 125907246,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525114041
    },
    {
        "content": "<p>That might be an immense computation</p>",
        "id": 125907251,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525114054
    },
    {
        "content": "<p>Or can it formally divide away the gcd, without actually calculating it?</p>",
        "id": 125907264,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525114079
    },
    {
        "content": "<p>Johan you should take a look at <code>data/rat.lean</code> in mathlib</p>",
        "id": 125907336,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525114173
    },
    {
        "content": "<p>I found that file not too intimidating</p>",
        "id": 125907337,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525114183
    },
    {
        "content": "<p>Will do</p>",
        "id": 125907343,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525114197
    },
    {
        "content": "<p>I would tell my students \"of course a rational number is an equivalence class\"</p>",
        "id": 125907393,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525114211
    },
    {
        "content": "<p>(because it's Z localised away from 0)</p>",
        "id": 125907398,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525114227
    },
    {
        "content": "<p>but in Lean working with equivalence classes is sometimes hard work</p>",
        "id": 125907401,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525114237
    },
    {
        "content": "<p>so if they can get away with it, they work with an inductive type</p>",
        "id": 125907406,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525114248
    },
    {
        "content": "<p>So they go with this structure of a numerator n in Z, a denominator d in N, a proof that d &gt; 0 and a proof that n and d are coprime!</p>",
        "id": 125907482,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525114340
    },
    {
        "content": "<p>If you don't reduce to lowest terms, then <code>1/2 + 1/2 + 1/2 + ... + 1/2</code> becomes an unwieldy computation</p>",
        "id": 125907488,
        "sender_full_name": "Reid Barton",
        "timestamp": 1525114351
    },
    {
        "content": "<p>At this point you can't even make 6/8</p>",
        "id": 125907492,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525114362
    },
    {
        "content": "<p>but it's OK, they're only a few lines in</p>",
        "id": 125907495,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525114372
    },
    {
        "content": "<p>and then they go on to make other constructors</p>",
        "id": 125907501,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525114378
    },
    {
        "content": "<p>because they implemented Euclid already</p>",
        "id": 125907513,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525114389
    },
    {
        "content": "<p>so you finally get a definition of <code>mk</code></p>",
        "id": 125907535,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525114440
    },
    {
        "content": "<p>on line 61</p>",
        "id": 125907576,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525114454
    },
    {
        "content": "<p>and they define <code>/</code> to be mk</p>",
        "id": 125907581,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525114464
    },
    {
        "content": "<p>Well, Lean can decide to reduce to lowest terms when I force it to actually compute something. But if I want to define <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mfrac><mrow><mi>π</mi><mo>(</mo><mn>1</mn><msup><mn>0</mn><mn>9</mn></msup><mo>)</mo><mo>−</mo><mn>1</mn></mrow><mrow><mi>π</mi><mo>(</mo><mn>1</mn><msup><mn>0</mn><mn>9</mn></msup><mo>+</mo><mn>1</mn><mo>)</mo><mo>−</mo><mn>1</mn></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">\\frac{\\pi(10^9)-1}{\\pi(10^9+1)-1}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:1.10892em;\"></span><span class=\"strut bottom\" style=\"height:1.62892em;vertical-align:-0.52em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.10892em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathit mtight\" style=\"margin-right:0.03588em;\">π</span><span class=\"mopen mtight\">(</span><span class=\"mord mathrm mtight\">1</span><span class=\"mord mtight\"><span class=\"mord mathrm mtight\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7463142857142857em;\"><span style=\"top:-2.786em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathrm mtight\">9</span></span></span></span></span></span></span></span><span class=\"mbin mtight\">+</span><span class=\"mord mathrm mtight\">1</span><span class=\"mclose mtight\">)</span><span class=\"mbin mtight\">−</span><span class=\"mord mathrm mtight\">1</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.485em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathit mtight\" style=\"margin-right:0.03588em;\">π</span><span class=\"mopen mtight\">(</span><span class=\"mord mathrm mtight\">1</span><span class=\"mord mtight\"><span class=\"mord mathrm mtight\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8913142857142857em;\"><span style=\"top:-2.931em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathrm mtight\">9</span></span></span></span></span></span></span></span><span class=\"mclose mtight\">)</span><span class=\"mbin mtight\">−</span><span class=\"mord mathrm mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.52em;\"></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span> where <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>π</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding=\"application/x-tex\">\\pi(n)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">π</span><span class=\"mopen\">(</span><span class=\"mord mathit\">n</span><span class=\"mclose\">)</span></span></span></span> is the <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.43056em;\"></span><span class=\"strut bottom\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\">n</span></span></span></span>-th prime, that should be possible, right?</p>",
        "id": 125907592,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525114492
    },
    {
        "content": "<p>inductive structures with lots of things which are quite easy to carry around are very popular round here</p>",
        "id": 125907598,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525114502
    },
    {
        "content": "<p>It shouldn't actually start computing those primes.</p>",
        "id": 125907606,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525114507
    },
    {
        "content": "<p>If you want to actually work something complicated out then you should not be using Lean at this point</p>",
        "id": 125907624,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525114548
    },
    {
        "content": "<p>Also, I <em>would</em> want to have a proof that <code>d = 0</code>, <em>all the time</em></p>",
        "id": 125907626,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525114548
    },
    {
        "content": "<p>If you believe it won't start computing the primes, then why would it need to do the conversion to lowest terms?</p>",
        "id": 125907630,
        "sender_full_name": "Reid Barton",
        "timestamp": 1525114551
    },
    {
        "content": "<p>But there they choose to just put <code>n/0 = 0</code></p>",
        "id": 125907634,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525114560
    },
    {
        "content": "<p><code>n/0=0</code>.</p>",
        "id": 125907681,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525114592
    },
    {
        "content": "<p>Mathematicians can often get upset about that.</p>",
        "id": 125907684,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525114600
    },
    {
        "content": "<p>but the issue is just notation</p>",
        "id": 125907696,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525114624
    },
    {
        "content": "<p>Just imagine you went through all the Lean source code replacing the notation <code>/</code> with something that looked more like <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi mathvariant=\"normal\">/</mi><mo>∗</mo></msup></mrow><annotation encoding=\"application/x-tex\">/^*</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathrm\">/</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.688696em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">∗</span></span></span></span></span></span></span></span></span></span></span></p>",
        "id": 125907714,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525114667
    },
    {
        "content": "<p>and the asterisk indicates a footnote:</p>",
        "id": 125907754,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525114689
    },
    {
        "content": "<p>\"Note to mathematicians: this is not your divide. This is just notation for a different function which we invented because we find it more useful.\"</p>",
        "id": 125907763,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525114717
    },
    {
        "content": "<blockquote>\n<p>If you want to actually work something complicated out then you should not be using Lean at this point</p>\n</blockquote>\n<p>Says the person who is formalising schemes... <span class=\"emoji emoji-1f923\" title=\"rolling on the floor laughing\">:rolling_on_the_floor_laughing:</span></p>",
        "id": 125907766,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525114739
    },
    {
        "content": "<p>because whenever a mathematician writes the symbol <code>/</code></p>",
        "id": 125907767,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525114740
    },
    {
        "content": "<p>they are doing that thing that mathematicians love to do -- they are making a promise.</p>",
        "id": 125907780,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525114757
    },
    {
        "content": "<p>Lol</p>",
        "id": 125907785,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525114762
    },
    {
        "content": "<p>They are saying \"I promise that the denominator is not zero.\"</p>",
        "id": 125907790,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525114770
    },
    {
        "content": "<p>Yeah, ok... I'll try to forget some of my home culture.</p>",
        "id": 125907794,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525114782
    },
    {
        "content": "<p>but if you really make them keep their promises</p>",
        "id": 125907796,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525114784
    },
    {
        "content": "<p>then that means that they have to supply a proof.</p>",
        "id": 125907807,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525114793
    },
    {
        "content": "<p>And that is your input which you as a mathematician enter into /</p>",
        "id": 125907861,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525114810
    },
    {
        "content": "<p>and that's exactly the data needed to work out /*</p>",
        "id": 125907873,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525114825
    },
    {
        "content": "<p>with a guarantee that it's equal to /</p>",
        "id": 125907875,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525114836
    },
    {
        "content": "<p>Fair enough</p>",
        "id": 125907877,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525114841
    },
    {
        "content": "<p>Mathematicans are full of promises.</p>",
        "id": 125907879,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525114849
    },
    {
        "content": "<p>A is a hypergeometric schemeoid</p>",
        "id": 125907883,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525114860
    },
    {
        "content": "<p>and B is a set that bijects with A</p>",
        "id": 125907896,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525114873
    },
    {
        "content": "<p>therefore B is a hypergeometric schemeoid.</p>",
        "id": 125907902,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525114889
    },
    {
        "content": "<p>That statement comes with a promise. I had not realised this until very recently.</p>",
        "id": 125907909,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525114905
    },
    {
        "content": "<p>The promise is: \"I promise that the definition of a hypergeometric schemeoid structure on a set A does not involve actually looking at any of A's elements\"</p>",
        "id": 125907960,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525114942
    },
    {
        "content": "<p>\"it just involves things like structures of multiplication and addition on A</p>",
        "id": 125907965,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525114954
    },
    {
        "content": "<p>You don't have to rely on A having an element containing an element containing the empty set in the definition -- but such a condition is a <strong>completely valid thing to say in ZFC</strong>.</p>",
        "id": 125908006,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525115036
    },
    {
        "content": "<p>Yup...</p>",
        "id": 125908047,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525115048
    },
    {
        "content": "<p>So when you make that transport of structure you are making a promise</p>",
        "id": 125908052,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525115055
    },
    {
        "content": "<p>and mathematicians have kind of forgotten this, because it's just part of the culture.</p>",
        "id": 125908063,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525115083
    },
    {
        "content": "<p>And lately we have more or less been working under that promise all the time... to never actually look at the elements of our sets.</p>",
        "id": 125908072,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525115101
    },
    {
        "content": "<p>Our objects may have an element \"3\", but we don't actually care what that element \"3\" looks like. As long as it behaves like a \"3\"</p>",
        "id": 125908088,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525115136
    },
    {
        "content": "<p>There are certain things we _can_ do to sets, but we choose not to do. If G is a group, I don't care about the underlying set, I just care about one special element of G with the _name_ \"identity\" -- I don't care which set it is -- and the inversion and multiplication.</p>",
        "id": 125908089,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525115137
    },
    {
        "content": "<p><code>pow_unbounded_of_gt_one</code> in <code>algebra.archimedean</code> sounds like what you want.</p>",
        "id": 125908159,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1525115251
    },
    {
        "content": "<p>And I would be really interested in formalising the notion of what we as mathematicians consider decent things to do to types. Exactly what can mathematicians do to mathematical objects?</p>",
        "id": 125908160,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525115260
    },
    {
        "content": "<p>Agreed. (But we are stealing Kenny's thread...) Chris subtly reminded me of that (-;</p>",
        "id": 125908210,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525115311
    },
    {
        "content": "<blockquote>\n<p>I just don't like the fact that if some computation spits out two integers, a and b, with b \\ne 0, and I want to consider the rational number a/b, then Lean decides it also wants to put them in lowest terms. That might be an immense computation</p>\n</blockquote>\n<p>The runtime for doing this is not much more than multiplication of rationals to begin with, so I think it's a reasonable cost given you are doing a division. As Reid says, the alternative is much worse, unnormalized rationals have exponentially worse runtime in some situations.</p>\n<blockquote>\n<p>Well, Lean can decide to reduce to lowest terms when I force it to actually compute something. But if I want to define <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mfrac><mrow><mi>π</mi><mo>(</mo><mn>1</mn><msup><mn>0</mn><mn>9</mn></msup><mo>)</mo><mo>−</mo><mn>1</mn></mrow><mrow><mi>π</mi><mo>(</mo><mn>1</mn><msup><mn>0</mn><mn>9</mn></msup><mo>+</mo><mn>1</mn><mo>)</mo><mo>−</mo><mn>1</mn></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">\\frac{\\pi(10^9)-1}{\\pi(10^9+1)-1}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:1.10892em;\"></span><span class=\"strut bottom\" style=\"height:1.62892em;vertical-align:-0.52em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.10892em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathit mtight\" style=\"margin-right:0.03588em;\">π</span><span class=\"mopen mtight\">(</span><span class=\"mord mathrm mtight\">1</span><span class=\"mord mtight\"><span class=\"mord mathrm mtight\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7463142857142857em;\"><span style=\"top:-2.786em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathrm mtight\">9</span></span></span></span></span></span></span></span><span class=\"mbin mtight\">+</span><span class=\"mord mathrm mtight\">1</span><span class=\"mclose mtight\">)</span><span class=\"mbin mtight\">−</span><span class=\"mord mathrm mtight\">1</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.485em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathit mtight\" style=\"margin-right:0.03588em;\">π</span><span class=\"mopen mtight\">(</span><span class=\"mord mathrm mtight\">1</span><span class=\"mord mtight\"><span class=\"mord mathrm mtight\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8913142857142857em;\"><span style=\"top:-2.931em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathrm mtight\">9</span></span></span></span></span></span></span></span><span class=\"mclose mtight\">)</span><span class=\"mbin mtight\">−</span><span class=\"mord mathrm mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.52em;\"></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span> where <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>π</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding=\"application/x-tex\">\\pi(n)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">π</span><span class=\"mopen\">(</span><span class=\"mord mathit\">n</span><span class=\"mclose\">)</span></span></span></span> is the <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.43056em;\"></span><span class=\"strut bottom\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\">n</span></span></span></span>-th prime, that should be possible, right?</p>\n</blockquote>\n<p>If you say <code>def x : rat := pi bla bla...</code> then nothing is computed up front, but <code>x</code> is computed when you use it in a program which is <code>#eval</code>'d. In particular, Lean uses an eager evaluation semantics, so in fact <code>pi(10^9)</code> will be calculated <em>regardless</em> of whether rationals are defined as a quotient or as reduced fractions. (This isn't Haskell!) The only way to avoid the calculation at this stage is to have <code>/</code> be some sort of thunk-taking operation so as to defer evaluation of its arguments, but it is not at all obvious that these \"lazy rats\" are the intended usual use of rational numbers.</p>",
        "id": 125921367,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525133913
    },
    {
        "content": "<p>Ok, understood. Somehow laziness feels natural to me. But I don't have that much experience actually. If at some point I need it, then I'll bring it up again (-;</p>",
        "id": 125929510,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525150759
    },
    {
        "content": "<p>The point I was (too obliquely) trying to make before is that if Lean were lazy, then it would presumably have no reason to do the GCD computation, either</p>",
        "id": 125929676,
        "sender_full_name": "Reid Barton",
        "timestamp": 1525151079
    }
]