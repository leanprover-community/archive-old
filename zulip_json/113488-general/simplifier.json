[
    {
        "content": "<p>I'm realizing I don't understand how the simplifier works. I have a complicated goal involving product spaces, and in the middle of this goal there is the expression <code>(f, x).fst</code>. When I apply <code>simp</code> to my goal, it does not reduce to <code>f</code>. To help simp, I wrote down an auxiliary statement exactly with the good types and elements <code>f</code> and <code>x</code>, but still it does not help <code>simp</code>. Even when I turn on <code>set_option pp.all true</code> I can't see what is wrong.<br>\nMy helper lemma is <code>should_help : (prod.mk f x).fst = f</code>. Fully expanded, it reads</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">should_help</span> <span class=\"o\">:</span>\n  <span class=\"bp\">@</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"o\">{(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">bounded_continuous_function</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"bp\">_</span><span class=\"n\">inst_2</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">fst</span><span class=\"bp\">.</span><span class=\"o\">{(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">bounded_continuous_function</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"bp\">_</span><span class=\"n\">inst_2</span><span class=\"o\">)</span> <span class=\"n\">α</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">mk</span><span class=\"bp\">.</span><span class=\"o\">{(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">bounded_continuous_function</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"bp\">_</span><span class=\"n\">inst_2</span><span class=\"o\">)</span> <span class=\"n\">α</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n    <span class=\"n\">f</span>\n</pre></div>\n\n\n<p>And in my goal I have the lines</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">fst</span><span class=\"bp\">.</span><span class=\"o\">{(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">bounded_continuous_function</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"bp\">_</span><span class=\"n\">inst_2</span><span class=\"o\">)</span> <span class=\"n\">α</span>\n                         <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">mk</span><span class=\"bp\">.</span><span class=\"o\">{(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">bounded_continuous_function</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"bp\">_</span><span class=\"n\">inst_2</span><span class=\"o\">)</span> <span class=\"n\">α</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n</pre></div>\n\n\n<p>Can someone explain why <code>simp [should_help]</code> does not reduce this term to <code>f</code>? (I can certainly work it around, but still I would be very happy to understand what is going on here...)</p>",
        "id": 136326024,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1540286835
    },
    {
        "content": "<p>Does <code>dsimp</code> work?</p>",
        "id": 136326122,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1540286981
    },
    {
        "content": "<p>Yes it does.</p>",
        "id": 136326263,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1540287173
    },
    {
        "content": "<p>Then welcome to dependent type theory!  Basically <code>simp</code> can only rewrite at non-dependent arguments.  The automatically generated congruence lemmas only have hypotheses for the non-dependent arguments.  We could also rewrite at dependent arguments, but then you'd get casts all over the place.</p>",
        "id": 136326513,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1540287483
    },
    {
        "content": "<p>OK. Not sure I really understand: is the problem the fact that my type is <code>@bounded_continuous_function.{u v} α β _inst_1 _inst_2</code>, so depending on other types and instances? In any case, thanks a lot, I will add <code>dsimp</code> to my toolbox and try to apply it when <code>simp</code> does not work, even if I don't know why. (And this is a perfectly well-defined and efficient algorithm!)</p>",
        "id": 136326860,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1540287915
    },
    {
        "content": "<p>No, I think the problem is that <code>prod.fst ...</code> <em>occurs</em> as a subterm of some dependent argument, and hence simp cannot reach it.</p>",
        "id": 136327235,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1540288396
    },
    {
        "content": "<p>Consider the following example: suppose <code>h</code> has type <code>is_prime (1+n)</code> and somewhere in the goal I have <code>⟨1+n, h⟩</code> as a subterm. Suppose I want to rewrite <code>1+n</code> to <code>n+1</code> using (using <code>rw [add.comm 1 n]</code> or <code>simp</code>) then I get the subterm <code>⟨1+n, h⟩</code>, but this is not type correct: <code>h</code> has type <code>is_prime (1+n)</code>, not type <code>is_prime (n+1)</code>. Therefore, <code>rw</code> and <code>simp</code> will fail if you do this.</p>\n<p>Now we modify the example, and <code>h</code> has type <code>is_prime (1+4)</code>. <code>1+4</code> and <code>5</code> are definitionally equal, which implies that <code>h</code> <em>also</em> has type <code>is_prime 5</code>. Therefore, if your goal contains <code>⟨2+3, h⟩</code> you are allowed to rewrite this to <code>⟨5, h⟩</code>. However, <code>simp</code> and <code>rw</code> will not do this for you, but <code>dsimp</code> (which only rewrites with definitional equalities) happily will.</p>",
        "id": 136351767,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1540315400
    },
    {
        "content": "<p>simp should handle this</p>",
        "id": 136352123,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1540315681
    },
    {
        "content": "<p>simp will produce a term like <code>⟨1+n, cast (add_comm 1 n) h⟩</code></p>",
        "id": 136353224,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1540316530
    },
    {
        "content": "<p>Oh yeah, my example is wrong, <code>simp</code> does handly my case correctly.</p>",
        "id": 136356668,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1540319178
    },
    {
        "content": "<p>but only because <code>is_prime</code> is a proposition. If you replace <code>is_prime</code> by <code>vector bool</code> or anything else living in <code>Type*</code>, then what I described is correct.</p>",
        "id": 136356985,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1540319413
    },
    {
        "content": "<p>Actually it will work as long as the second argument is a subsingleton. This is because this cast thing is being inserted by the congr lemma, that automatically discharges subsingleton arguments (even if they are in Type)</p>",
        "id": 136357623,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1540319924
    },
    {
        "content": "<p>We found a strange behavior with the simplifier setup. The congruence rule <code>if_simp_congr</code> introduces an extra term <code>@decidable_of_decidable_of_iff</code> even though nothing is rewritten under the if-then-else, which then leads to subtle unification failures.</p>\n<p>Here is an example:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">local</span> <span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">instance</span><span class=\"o\">,</span> <span class=\"n\">priority</span> <span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">prop_decidable</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">tree</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">leaf</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">tree</span>\n<span class=\"bp\">|</span> <span class=\"n\">inner</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">tree</span> <span class=\"bp\">→</span> <span class=\"n\">tree</span> <span class=\"bp\">→</span> <span class=\"n\">tree</span>\n\n<span class=\"kn\">export</span> <span class=\"n\">tree</span> <span class=\"o\">(</span><span class=\"n\">leaf</span> <span class=\"n\">inner</span><span class=\"o\">)</span>\n\n<span class=\"kn\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">def</span> <span class=\"n\">depth</span> <span class=\"o\">:</span> <span class=\"n\">tree</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">leaf</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">inner</span> <span class=\"bp\">_</span> <span class=\"n\">l</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"k\">then</span> <span class=\"n\">depth</span> <span class=\"n\">l</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n  <span class=\"k\">else</span> <span class=\"mi\">0</span>\n\n<span class=\"kn\">set_option</span> <span class=\"n\">pp</span><span class=\"bp\">.</span><span class=\"n\">implicit</span> <span class=\"n\">true</span>\n<span class=\"kn\">set_option</span> <span class=\"n\">trace</span><span class=\"bp\">.</span><span class=\"n\">simplify</span><span class=\"bp\">.</span><span class=\"n\">perm</span> <span class=\"n\">true</span>\n<span class=\"kn\">set_option</span> <span class=\"n\">trace</span><span class=\"bp\">.</span><span class=\"n\">simplify</span><span class=\"bp\">.</span><span class=\"n\">congruence</span> <span class=\"n\">true</span>\n\n<span class=\"c1\">-- local attribute [-congr] if_simp_congr</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">tree</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">depth</span> <span class=\"o\">(</span><span class=\"n\">inner</span> <span class=\"n\">w</span> <span class=\"n\">l</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">depth</span><span class=\"o\">],</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 167384795,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1559739094
    },
    {
        "content": "<p>simp is rewriting under the if though; it changes <code>depth + 1</code> to <code>1 + depth</code></p>",
        "id": 167396220,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1559746163
    },
    {
        "content": "<p>you get the right answer with <code>dsimp [depth]</code> or <code>simp only [depth]</code></p>",
        "id": 167396349,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1559746219
    },
    {
        "content": "<blockquote>\n<p>Mario Carneiro: simp is rewriting under the if though; it changes <code>depth + 1</code> to <code>1 + depth</code></p>\n</blockquote>\n<p>Oh, right. I didn't notice that. The problem can also be avoided by using <code>1 + depth</code> in the definition, which would probably be a useful thing to do anyway.</p>",
        "id": 167425463,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1559765247
    },
    {
        "content": "<p>I think simp is just doing a silly thing here</p>",
        "id": 167426696,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1559765992
    },
    {
        "content": "<p>I prefer <code>depth + 1</code> since it's definitionally <code>succ depth</code></p>",
        "id": 167426774,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1559766015
    }
]