[
    {
        "content": "<p>After upgrading mathlib I'm getting a lot of deterministic timeouts, and I am not sure how to debug them (the profiler was uninformative).  Here's one self-contained file example.  I wouldn't call it a minimal example, but minimizing deterministic timeouts is hard since they are fragile.  I am on Lean (version 3.50.3, Release), Mathlib <a href=\"https://github.com/leanprover-community/mathlib/commit/44b58b42794e5abe2bf86397c38e26b587e07e59\">44b58b42794e5abe2bf86397c38e26b587e07e59</a>.</p>\n<p><a href=\"/user_uploads/3121/wLqruuEA68smLrl1mqythOf_/bug.lean\">bug.lean</a></p>",
        "id": 319668008,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1672950853
    },
    {
        "content": "<p>Hmm, unfortunately that deterministic timeout happens in VSCode but doesn't happen if I do <code>lean --make bug.lean</code>. :/</p>",
        "id": 319668922,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1672951233
    },
    {
        "content": "<p>Been there.</p>",
        "id": 319668948,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1672951248
    },
    {
        "content": "<p>In VSCode my \"Lean: Time Limit\" is 100000.  Is the command line default different?</p>",
        "id": 319669187,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1672951330
    },
    {
        "content": "<p>Pass <code>-T100000</code> as an argument to replicate the VSCode behavior. I don't know the default limit, though.</p>",
        "id": 319669364,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1672951422
    },
    {
        "content": "<p>Thanks, now command line agrees:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">%</span> <span class=\"n\">lean</span> <span class=\"c1\">--make bug.lean -T100000</span>\n<span class=\"bp\">/</span><span class=\"n\">Users</span><span class=\"bp\">/</span><span class=\"n\">geoffreyi</span><span class=\"bp\">/</span><span class=\"n\">ray</span><span class=\"bp\">/</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">bug.lean</span><span class=\"o\">:</span><span class=\"mi\">51</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">deterministic</span><span class=\"o\">)</span> <span class=\"n\">timeout</span>\n<span class=\"bp\">/</span><span class=\"n\">Users</span><span class=\"bp\">/</span><span class=\"n\">geoffreyi</span><span class=\"bp\">/</span><span class=\"n\">ray</span><span class=\"bp\">/</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">bug.lean</span><span class=\"o\">:</span><span class=\"mi\">27</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">deterministic</span><span class=\"o\">)</span> <span class=\"n\">timeout</span>\n</code></pre></div>",
        "id": 319669633,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1672951519
    },
    {
        "content": "<p>Here's a smaller timeout example.  Of course the circle_integral import is unnecessary, but importing just what I need fixes the timeout.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">measure_theory.integral.circle_integral</span>\n<span class=\"kn\">open</span> <span class=\"n\">complex</span> <span class=\"o\">(</span><span class=\"n\">abs</span><span class=\"o\">)</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">real</span>\n\n<span class=\"c1\">-- Given z ≠ 0, we can find a slightly smaller nearby w</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">slightly_smaller</span> <span class=\"o\">{</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">nz</span> <span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"bp\">-</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">r</span> <span class=\"bp\">∧</span> <span class=\"n\">abs</span> <span class=\"n\">w</span> <span class=\"bp\">&lt;</span> <span class=\"n\">abs</span> <span class=\"n\">z</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">rp</span><span class=\"o\">,</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">rz</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">&gt;</span> <span class=\"n\">abs</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"o\">{</span>\n    <span class=\"n\">use</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">finish</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">rz</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">azp</span> <span class=\"o\">:</span> <span class=\"n\">abs</span> <span class=\"n\">z</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">complex.abs.pos</span> <span class=\"n\">nz</span><span class=\"o\">,</span>\n  <span class=\"n\">generalize</span> <span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">r</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">/</span> <span class=\"n\">abs</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">a0</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"o\">{</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">refine</span> <span class=\"n\">sub_nonneg.mpr</span> <span class=\"o\">((</span><span class=\"n\">div_le_one</span> <span class=\"n\">azp</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n    <span class=\"n\">transitivity</span> <span class=\"n\">r</span><span class=\"o\">,</span>\n    <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n    <span class=\"n\">assumption</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">a1</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">positivity</span> <span class=\"o\">},</span>\n  <span class=\"n\">generalize</span> <span class=\"n\">hw</span> <span class=\"o\">:</span> <span class=\"bp\">↑</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">w</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"n\">constructor</span><span class=\"o\">,</span> <span class=\"o\">{</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">hw</span><span class=\"o\">,</span><span class=\"bp\">←</span><span class=\"n\">ha</span><span class=\"o\">],</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">mul_sub_right_distrib</span><span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">abs_of_pos</span> <span class=\"n\">rp</span><span class=\"o\">,</span> <span class=\"n\">field_simp</span> <span class=\"o\">[</span><span class=\"n\">ne_of_gt</span> <span class=\"n\">azp</span><span class=\"o\">],</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span> <span class=\"o\">{</span>\n    <span class=\"gr\">sorry</span>\n  <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 319670619,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1672951968
    },
    {
        "content": "<p>A bit smaller:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">measure_theory.integral.circle_integral</span>\n<span class=\"kn\">open</span> <span class=\"n\">complex</span> <span class=\"o\">(</span><span class=\"n\">abs</span><span class=\"o\">)</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">real</span>\n\n<span class=\"c1\">-- Given z ≠ 0, we can find a slightly smaller nearby w</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">slightly_smaller</span> <span class=\"o\">{</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">nz</span> <span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">rp</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"bp\">-</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">r</span> <span class=\"bp\">∧</span> <span class=\"n\">abs</span> <span class=\"n\">w</span> <span class=\"bp\">&lt;</span> <span class=\"n\">abs</span> <span class=\"n\">z</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">rz</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">&gt;</span> <span class=\"n\">abs</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"o\">{</span>\n    <span class=\"n\">use</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">finish</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">rz</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">azp</span> <span class=\"o\">:</span> <span class=\"n\">abs</span> <span class=\"n\">z</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">generalize</span> <span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">r</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">/</span> <span class=\"n\">abs</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"bp\">↑</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">constructor</span><span class=\"o\">,</span> <span class=\"o\">{</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">ha</span><span class=\"o\">],</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">mul_sub_right_distrib</span><span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">abs_of_pos</span> <span class=\"n\">rp</span><span class=\"o\">,</span> <span class=\"n\">field_simp</span> <span class=\"o\">[</span><span class=\"n\">ne_of_gt</span> <span class=\"n\">azp</span><span class=\"o\">],</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 319672277,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1672952659
    },
    {
        "content": "<p>Fix up your non-terminal simps. Lean is spending ages trying to close a goal with <code>simp</code> and the more you import the more ways there are to fail. Non-terminal simps are a code smell as you are discovering</p>",
        "id": 319676871,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1672954626
    },
    {
        "content": "<p>Squeeze them with <code>squeeze_simp</code>. Non-terminal <code>simp only</code>s are fine.</p>",
        "id": 319676957,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1672954669
    },
    {
        "content": "<p>When I try to fix up a file with lots of slow proofs such as in <a href=\"https://github.com/leanprover-community/mathlib/pull/18018\">#18018</a>, I'd put <code>set_option profiler true</code> at the top of the file, then as Lean compiles the file, elaboration time and other info will show up in the right panel (infoview). I'd copy that to a file and search for <code>elaboration of </code> and see which ones are particularly slow. </p>\n<p>The fix is usually just replace <code>simp</code> by <code>simp only</code>. If you're unsure which part is slow, try replacing <code>{ ... }</code> blocks by <code>sorry { ... }</code> and see which makes elaboration a lot faster. You can also insert <code>sorry</code> anywhere to check if the part above the <code>sorry</code> elaborates fast enough. (You may need multiple sorries if there are multiple goals, though.)</p>",
        "id": 319684452,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1672957876
    },
    {
        "content": "<p>You can also replace all <code>simp</code> by <code>squeeze_simp</code> and come back after a while, and the <code>simp only</code> suggestions will all show up in the infoview, and you can copy them elsewhere and apply them individually. (If you click on the suggestion to apply it, the other suggestions will go away, which isn't nice. Maybe you can click on the \"pause\" button to freeze the infoview, but I haven't tried.) Since <code>squeeze_simp</code> is even slower than <code>simp</code>, you may need to increase the timeout limit (search for setting \"Lean: Time Limit\" in VSCode). As I'm writing this, I realize you can probably just replace <code>simp</code> by <code>squeeze_simp</code>, save the file, and then <code>lean --make -T1000000</code>.</p>",
        "id": 319685798,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1672958466
    },
    {
        "content": "<p>Thank you!  The <code>squeeze_simp</code> → <code>simp only</code> route works very well!</p>",
        "id": 319686716,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1672958857
    },
    {
        "content": "<p><code>finish</code> is even worse than <code>simp</code>!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">measure_theory.integral.circle_integral</span>\n<span class=\"kn\">open</span> <span class=\"n\">complex</span> <span class=\"o\">(</span><span class=\"n\">abs</span><span class=\"o\">)</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">real</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">profiler</span> <span class=\"n\">true</span>\n<span class=\"c1\">-- Given z ≠ 0, we can find a slightly smaller nearby w</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">slightly_smaller</span> <span class=\"o\">{</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">nz</span> <span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">rp</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"bp\">-</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">r</span> <span class=\"bp\">∧</span> <span class=\"n\">abs</span> <span class=\"n\">w</span> <span class=\"bp\">&lt;</span> <span class=\"n\">abs</span> <span class=\"n\">z</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">rz</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">&gt;</span> <span class=\"n\">abs</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"o\">{</span>\n    <span class=\"n\">use</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">finish</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"gr\">sorry</span> <span class=\"kd\">end</span>\n\n<span class=\"c1\">-- elaboration of slightly_smaller took 4.13s</span>\n</code></pre></div>",
        "id": 319687747,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1672959271
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">measure_theory.integral.circle_integral</span>\n<span class=\"kn\">open</span> <span class=\"n\">complex</span> <span class=\"o\">(</span><span class=\"n\">abs</span><span class=\"o\">)</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">real</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">profiler</span> <span class=\"n\">true</span>\n<span class=\"c1\">-- I changed r &gt; 0 to 0 &lt; r and r &gt; abs z to abs z &lt; r; we prefer &lt; to &gt; in mathlib</span>\n<span class=\"c1\">-- Given z ≠ 0, we can find a slightly smaller nearby w</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">slightly_smaller</span> <span class=\"o\">{</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">nz</span> <span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">rp</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"bp\">-</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">r</span> <span class=\"bp\">∧</span> <span class=\"n\">abs</span> <span class=\"n\">w</span> <span class=\"bp\">&lt;</span> <span class=\"n\">abs</span> <span class=\"n\">z</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">rz</span> <span class=\"o\">:</span> <span class=\"n\">abs</span> <span class=\"n\">z</span> <span class=\"bp\">&lt;</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"o\">{</span>\n    <span class=\"n\">use</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n    <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">rz</span><span class=\"o\">,</span> <span class=\"n\">zero_sub</span><span class=\"o\">,</span> <span class=\"n\">absolute_value.map_neg</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">nz</span><span class=\"o\">,</span> <span class=\"n\">absolute_value.pos_iff</span><span class=\"o\">,</span> <span class=\"n\">ne.def</span><span class=\"o\">,</span> <span class=\"n\">not_false_iff</span><span class=\"o\">,</span> <span class=\"n\">absolute_value.map_zero</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n  <span class=\"o\">},</span>\n  <span class=\"gr\">sorry</span> <span class=\"kd\">end</span>\n\n<span class=\"c1\">-- 310ms = factor of &gt; ten speedup</span>\n</code></pre></div>",
        "id": 319741764,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1672995987
    }
]