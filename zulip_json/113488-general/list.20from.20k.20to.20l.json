[
    {
        "content": "<p>Is there a built-in way to generate the list of natural numbers from k to l? I can use <code>def myrange (k n : ℕ) := list.map (λ i, i + k) (list.range $ n-k+1)</code> but I'd like to know if this is already in</p>",
        "id": 125191252,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523960725
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">list</span>\n\n<span class=\"bp\">#</span><span class=\"n\">reduce</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">range&#39;</span> <span class=\"mi\">3</span> <span class=\"mi\">5</span> <span class=\"c1\">-- [3, 4, 5, 6, 7]</span>\n</pre></div>",
        "id": 125191309,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523960832
    },
    {
        "content": "<p>It's almost what I was asking for</p>",
        "id": 125191349,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523960912
    },
    {
        "content": "<p>my version would return <code>[3, 4, 5]</code></p>",
        "id": 125191352,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523960929
    },
    {
        "content": "<p>you will have to use <code>n-k+1</code> as the upper bound for that</p>",
        "id": 125191412,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523961050
    },
    {
        "content": "<p>Ok, so I still need to define a function. Is there any advantage of using <code>list.range' k (n+k-1)</code> instead of my implementation? I guess it's a bit faster, but I would be more interested if there are lemmas about range'</p>",
        "id": 125191465,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523961176
    },
    {
        "content": "<p>At least I was able to state the next lemma in my small experimentation:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">local</span> <span class=\"kn\">notation</span> <span class=\"bp\">`Π_</span><span class=\"o\">{</span><span class=\"n\">i</span><span class=\"bp\">=`</span> <span class=\"n\">k</span> <span class=\"bp\">`..`</span> <span class=\"n\">n</span> <span class=\"bp\">`</span><span class=\"o\">}</span><span class=\"bp\">`</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"o\">((</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">range&#39;</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">commutators_crunching</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">homeo</span> <span class=\"n\">X</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">wandering_hyp</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"bp\">≠</span> <span class=\"n\">j</span> <span class=\"bp\">→</span> <span class=\"err\">⇑</span><span class=\"o\">(</span><span class=\"n\">φ</span><span class=\"err\">^</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">U</span> <span class=\"err\">∩</span> <span class=\"err\">⇑</span><span class=\"o\">(</span><span class=\"n\">φ</span><span class=\"err\">^</span><span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">U</span> <span class=\"bp\">=</span> <span class=\"err\">∅</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">homeo</span> <span class=\"n\">X</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">homeo</span> <span class=\"n\">X</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">supp_hyp</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">supp</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"err\">⊆</span> <span class=\"n\">U</span> <span class=\"bp\">∧</span> <span class=\"n\">supp</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"err\">⊆</span> <span class=\"n\">U</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">comm_hyp</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"bp\">Π_</span><span class=\"o\">{</span><span class=\"n\">i</span><span class=\"bp\">=</span><span class=\"mi\">1</span><span class=\"bp\">..</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">[[</span><span class=\"n\">a</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"n\">i</span><span class=\"o\">]])</span> <span class=\"o\">:</span>\n<span class=\"bp\">∃</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"n\">homeo</span> <span class=\"n\">X</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"o\">[[</span><span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">B</span><span class=\"o\">]]</span><span class=\"bp\">*</span> <span class=\"o\">[[</span><span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"n\">D</span><span class=\"o\">]]</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span>\n</pre></div>\n\n\n<p><code>supp</code> is the (topological) support of a function, <code>[[. , .]]</code> is commutator. This will be a good test to see if I can manipulate products in any non-trivial way.</p>",
        "id": 125191962,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523962188
    },
    {
        "content": "<p>Stating it was already some fight because I was unsure whether to use <code>ℕ</code>, <code>fin n</code> or <code>finset</code> as the source of <code>a</code> and <code>b</code> (I use only <code>a i</code> and <code>b i</code> when <code>i</code> is between <code>1</code> and <code>n</code>)</p>",
        "id": 125192018,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523962300
    },
    {
        "content": "<p>Only <code>list</code> has support for non-commutative product. The above statement is the only combination I could get to work</p>",
        "id": 125192075,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523962374
    },
    {
        "content": "<p><a href=\"#narrow/stream/113488-general/topic/.60.5Ba.2Ca.2B1.2Ca.2B2.2C.2E.2E.2E.2Cb-1.5D.60.3F\" title=\"#narrow/stream/113488-general/topic/.60.5Ba.2Ca.2B1.2Ca.2B2.2C.2E.2E.2E.2Cb-1.5D.60.3F\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/.60.5Ba.2Ca.2B1.2Ca.2B2.2C.2E.2E.2E.2Cb-1.5D.60.3F</a></p>",
        "id": 125195523,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523969316
    }
]