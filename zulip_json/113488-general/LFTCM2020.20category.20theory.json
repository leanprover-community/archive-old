[
    {
        "content": "<p>I had fixed LFTCM2020 yesterday, but it is again broken today :-( But this is because of category theory, where a nonterminal simp is not doing anything anymore, in</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">functor.preadditive.preserves_biproducts</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">⥤</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">F.preadditive</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">F.obj</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">⊞</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"bp\">≅</span> <span class=\"n\">F.obj</span> <span class=\"n\">X</span> <span class=\"bp\">⊞</span> <span class=\"n\">F.obj</span> <span class=\"n\">Y</span> <span class=\"o\">:=</span>\n<span class=\"c1\">-- sorry</span>\n<span class=\"o\">{</span> <span class=\"n\">hom</span> <span class=\"o\">:=</span> <span class=\"n\">biprod.lift</span> <span class=\"o\">(</span><span class=\"n\">F.map</span> <span class=\"n\">biprod.fst</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F.map</span> <span class=\"n\">biprod.snd</span><span class=\"o\">),</span>\n  <span class=\"n\">inv</span> <span class=\"o\">:=</span> <span class=\"n\">biprod.desc</span> <span class=\"o\">(</span><span class=\"n\">F.map</span> <span class=\"n\">biprod.inl</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F.map</span> <span class=\"n\">biprod.inr</span><span class=\"o\">),</span>\n  <span class=\"n\">hom_inv_id'</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">F.map_comp</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">P.map_add'</span><span class=\"o\">],</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">inv_hom_id'</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span> <span class=\"n\">ext</span><span class=\"bp\">;</span> <span class=\"n\">simp</span><span class=\"bp\">;</span> <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">F.map_comp</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">P.map_zero'</span><span class=\"o\">],</span> <span class=\"kd\">end</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n<span class=\"c1\">-- This proof is not yet \"mathlib-ready\", because it uses \"nonterminal\" `simp`s.</span>\n<span class=\"c1\">-- Can you fix it?</span>\n<span class=\"c1\">-- sorry</span>\n</code></pre></div>\n<p>(the first <code>simp</code> in <code>hom_inv_id'</code> does not simplify). <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> , could you have a look?</p>",
        "id": 304018119,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1665749843
    },
    {
        "content": "<p>I think this is just evidence that non-terminal <code>simp</code>s are so evil they can't even be discussed in teaching materials. <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span></p>",
        "id": 304042047,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1665756940
    },
    {
        "content": "<p>And my answer to the question <code>can you fix it?</code> is clearly <code>no, I can't</code> <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 304042756,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1665757168
    },
    {
        "content": "<p>Sorry, I can't reproduce. In <code>lftcm2020</code>, that proof was sorried out in <code>master</code>, and when I restore the proof given above it compiles fine.</p>",
        "id": 304273438,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1665901751
    },
    {
        "content": "<p>I guess I can do the simps anyway.</p>",
        "id": 304273447,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1665901767
    },
    {
        "content": "<p>I restored the proof with the non-terminal simps expanded.</p>",
        "id": 304273824,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1665902155
    },
    {
        "content": "<p>Thanks. I guess you didn't reproduce because you didn't try to update mathlib: the proof used to build fine with mathlib from two days ago, but not with yesterday's.</p>",
        "id": 304279834,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1665908039
    },
    {
        "content": "<p>But with the explicit lemmas you provided and the amazing <a href=\"https://mathlib-changelog.org/\">https://mathlib-changelog.org/</a>, I was able to fix it myself.</p>",
        "id": 304281000,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1665908982
    }
]