[
    {
        "content": "<p>Out of interest, how does typeclass resolution happen in lean? For example, is it acceptable and/or sensible to write both of the following:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"n\">mono_prod_of_left</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"err\">⟶</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"err\">⟶</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">mono</span> <span class=\"n\">f</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">mono</span> <span class=\"o\">(</span><span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">lift</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kn\">instance</span> <span class=\"n\">mono_prod_of_right</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"err\">⟶</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"err\">⟶</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">mono</span> <span class=\"n\">g</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">mono</span> <span class=\"o\">(</span><span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">lift</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n</pre></div>\n\n\n<p>In Haskell for instance, I'd get complained at because of overlapping instances - do we get similar problems in lean?</p>",
        "id": 190788248,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1584397901
    },
    {
        "content": "<p>No, you have a different problem in lean, exponential blowup, because lean tries all the paths if you do this</p>",
        "id": 190788397,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584398007
    },
    {
        "content": "<p>it is sensible to do, it is like prolog</p>",
        "id": 190788413,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584398030
    },
    {
        "content": "<p>Okay great, thanks!</p>",
        "id": 190788578,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1584398130
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/typeclass.20resolution/near/190788397\" title=\"#narrow/stream/113488-general/topic/typeclass.20resolution/near/190788397\">said</a>:</p>\n<blockquote>\n<p>No, you have a different problem in lean, exponential blowup, because lean tries all the paths if you do this</p>\n</blockquote>\n<p>Where does exponential blow-up happen here?  Is there some other <code>mono</code> instance I'm missing?  With these two instances, Lean will only search <code>mono h</code> for all subterms <code>h</code>, so this should be linear.  Following me, Bhavik's instances are perfectly fine (or at least just as bad as every instance we have in mathlib).</p>",
        "id": 190823856,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1584437246
    },
    {
        "content": "<p>ah that's true, I shouldn't have suggested that that instance setup is exponential. I meant in general it can lead to exponential blowup, but with just those instances it is linear.</p>",
        "id": 190825443,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584438277
    }
]