[
    {
        "content": "<p>What does this error message mean and is there a workaround?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">universe</span> <span class=\"n\">v</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span>\n<span class=\"kn\">inductive</span> <span class=\"n\">closure</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">clos</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">},</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">t</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">closure</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">φ</span> <span class=\"n\">t</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">closure</span> <span class=\"n\">x</span>\n<span class=\"c1\">-- error: invalid occurrence of recursive arg#5 of &#39;closure.clos&#39;, the body of the functional type depends on it.</span>\n</pre></div>",
        "id": 155020104,
        "sender_full_name": "Reid Barton",
        "timestamp": 1547365369
    },
    {
        "content": "<p>I guess I can just use the impredicative definition</p>",
        "id": 155021253,
        "sender_full_name": "Reid Barton",
        "timestamp": 1547367684
    },
    {
        "content": "<p>what is the impredicative definition?</p>",
        "id": 155021376,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1547367907
    },
    {
        "content": "<p>The intersection of all the closed subsets of α</p>",
        "id": 155021674,
        "sender_full_name": "Reid Barton",
        "timestamp": 1547368521
    },
    {
        "content": "<p><code>def closure (φ : set α → set α) : set α := ⋂₀ {s | ∀ t, t ⊆ s → φ t ⊆ s}</code></p>",
        "id": 155021995,
        "sender_full_name": "Reid Barton",
        "timestamp": 1547369251
    },
    {
        "content": "<p>FTFY:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">closure</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">clos</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">},</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">t</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">closure</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">φ</span> <span class=\"n\">t</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">closure</span> <span class=\"n\">x</span>\n</pre></div>",
        "id": 155022395,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1547370023
    },
    {
        "content": "<p>Lean is a bit picky about the order of the arguments to constructors.  A long time ago, you couldn't even write <code>| node : tree → α → tree → tree</code> (you had to write <code>α</code> at the beginning and not in the middle).</p>",
        "id": 155022473,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1547370217
    },
    {
        "content": "<p>Interesting, thanks!</p>",
        "id": 155022542,
        "sender_full_name": "Reid Barton",
        "timestamp": 1547370329
    }
]