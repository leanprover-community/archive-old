[
    {
        "content": "<p>Looking at the recursion principle for the fixpoint operator <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fix_induction\">docs#fix_induction</a>, we have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">fix_induction</span>\n  <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→.</span> <span class=\"n\">β</span> <span class=\"bp\">⊕</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">f.fix</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a'</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">f.fix</span> <span class=\"n\">a'</span> <span class=\"bp\">→</span>\n    <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">a''</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">f.fix</span> <span class=\"n\">a''</span> <span class=\"bp\">→</span> <span class=\"n\">sum.inr</span> <span class=\"n\">a''</span> <span class=\"bp\">∈</span> <span class=\"n\">f</span> <span class=\"n\">a'</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"n\">a''</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"n\">a'</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"n\">a</span>\n</code></pre></div>\n<p>It seems like an easier to understand and more useful principle would be</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">inheriting_from_chains</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→.</span> <span class=\"n\">β</span> <span class=\"bp\">⊕</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">f.fix</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hbase</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">a_final</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">sum.inl</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">f</span> <span class=\"n\">a_final</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">C</span> <span class=\"n\">a_final</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">hind</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">a_0</span> <span class=\"n\">a_1</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">sum.inr</span> <span class=\"n\">a_1</span> <span class=\"bp\">∈</span> <span class=\"n\">f</span> <span class=\"n\">a_0</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">C</span> <span class=\"n\">a_1</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">C</span> <span class=\"n\">a_0</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"n\">a</span>\n</code></pre></div>\n<p>But I'm finding it hard to prove the latter from the former. Is there a particular reason why the latter isn't provided?</p>",
        "id": 272344730,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1645144551
    },
    {
        "content": "<p>This is a very <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> question.</p>",
        "id": 272344836,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1645144632
    },
    {
        "content": "<p>Yeah, I guess I'm thrown for a loop by this forall within an implication within a forall in a hypothesis. I have a hard time even getting it straight in my head what the first lemma is saying.</p>",
        "id": 272344973,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1645144736
    },
    {
        "content": "<p>Note that I've edited it to remove the reuse of the variable <code>a</code>.</p>",
        "id": 272345004,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1645144773
    },
    {
        "content": "<p>I remember writing the docstring for that recursor. Although I didn't end up saying much, I think I understood it at some point.</p>",
        "id": 272345012,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1645144782
    },
    {
        "content": "<p>Okay so the problem I see with your recursor is that it requires too strong of an hypothesis. It asks for stuff about branches that never fix.</p>",
        "id": 272345285,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1645144973
    },
    {
        "content": "<p>Ok, can you give me an example of something you can prove with the first one but not the second?</p>",
        "id": 272345357,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1645145042
    },
    {
        "content": "<p>No, the opposite.</p>",
        "id": 272345429,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1645145074
    },
    {
        "content": "<p>Or are you telling you managed to prove <code>inheriting_from_chains</code> from <code>fix_induction</code>? I think that's impossible.</p>",
        "id": 272345504,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1645145130
    },
    {
        "content": "<p>I haven't managed to prove the second one, but I think it's true and I want it</p>",
        "id": 272345573,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1645145174
    },
    {
        "content": "<p>At first I thought I would be able to prove it from <code>induction_fix</code> by just using a bunch of apply statements, but somehow I can't</p>",
        "id": 272345622,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1645145229
    },
    {
        "content": "<p>Argh sorry I am the one who is confused. <code>inheriting_from_chains</code> is certainly true, but you can't prove <code>fix_induction</code> from it.</p>",
        "id": 272345634,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1645145249
    },
    {
        "content": "<p>Ok, I believe you but I don't see why</p>",
        "id": 272345670,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1645145279
    },
    {
        "content": "<p>I think Bolton wants to go the other way round, Yael</p>",
        "id": 272345715,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1645145288
    },
    {
        "content": "<p>Yeah, and I think this is possible.</p>",
        "id": 272345736,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1645145307
    },
    {
        "content": "<p>Right, I would like to prove inheriting _from_chains using fix_induction</p>",
        "id": 272345767,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1645145333
    },
    {
        "content": "<p>Hmm, maybe I need to use <code>mem_fix_iff</code>?</p>",
        "id": 272345846,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1645145399
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">inheriting_predicates</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→.</span> <span class=\"n\">β</span> <span class=\"bp\">⊕</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">f.fix</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hbase</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">a_final</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">sum.inl</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">f</span> <span class=\"n\">a_final</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">C</span> <span class=\"n\">a_final</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">hind</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">a_0</span> <span class=\"n\">a_1</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">sum.inr</span> <span class=\"n\">a_1</span> <span class=\"bp\">∈</span> <span class=\"n\">f</span> <span class=\"n\">a_0</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">C</span> <span class=\"n\">a_1</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">C</span> <span class=\"n\">a_0</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">fix_induction</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">a'</span> <span class=\"n\">hba'</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"n\">clear</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">mem_fix_iff</span> <span class=\"n\">at</span> <span class=\"n\">hba'</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">hba'</span><span class=\"o\">,</span><span class=\"c1\">-- induction tactic failed, recursor 'or.dcases_on' can only eliminate into Prop</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 272346002,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1645145485
    },
    {
        "content": "<p>You have <code>lemma ... : C a</code> but <code>C : α → Sort*</code>--is that what you wanted?</p>",
        "id": 272346119,
        "sender_full_name": "Reid Barton",
        "timestamp": 1645145560
    },
    {
        "content": "<p>Well, I don't really care about proving it for Sorts, let me switch to Prop</p>",
        "id": 272346143,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1645145592
    },
    {
        "content": "<p>Probably <code>C : α → Prop</code>, because it won't be able to construct data anymore anyway.</p>",
        "id": 272346151,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1645145601
    },
    {
        "content": "<p><del>This is as far as I get</del> Got it.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">inheriting_predicates</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→.</span> <span class=\"n\">β</span> <span class=\"bp\">⊕</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">f.fix</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hbase</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">a_final</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">sum.inl</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">f</span> <span class=\"n\">a_final</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">C</span> <span class=\"n\">a_final</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">hind</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">a_0</span> <span class=\"n\">a_1</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">sum.inr</span> <span class=\"n\">a_1</span> <span class=\"bp\">∈</span> <span class=\"n\">f</span> <span class=\"n\">a_0</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">C</span> <span class=\"n\">a_1</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">C</span> <span class=\"n\">a_0</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">fix_induction</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">a'</span> <span class=\"n\">hba'</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- clear H,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">mem_fix_iff</span> <span class=\"n\">at</span> <span class=\"n\">hba'</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">hba'</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">hbase</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">hba'</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rcases</span> <span class=\"n\">hba'</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">hind</span> <span class=\"n\">a'</span> <span class=\"n\">hba'_w</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">hba'_h.left</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">hba'_h.right</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">hba'_h.left</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 272346545,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1645145884
    },
    {
        "content": "<p>(I'm dumb, you actually do need H)</p>",
        "id": 272347275,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1645146531
    },
    {
        "content": "<p>Now for my own edification: Why is it impossible to prove <code>fix_induction</code> from <code>inheriting_from_chains</code>?</p>",
        "id": 272347642,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1645146864
    },
    {
        "content": "<p>Or is it only that <code>inheriting</code> uses Prop?</p>",
        "id": 272347672,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1645146905
    },
    {
        "content": "<p>I think they are equivalent</p>",
        "id": 272348574,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645147752
    },
    {
        "content": "<p>Proving the reverse direction is annoying because you don't have the <code>b ∈ f.fix a'</code> assumption in the hypotheses</p>",
        "id": 272350094,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645149125
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.pfun</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">pfun</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kd\">@[elab_as_eliminator]</span>\n<span class=\"kd\">def</span> <span class=\"n\">inheriting_from_chains</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→.</span> <span class=\"n\">β</span> <span class=\"bp\">⊕</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">f.fix</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hbase</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">a_final</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">sum.inl</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">f</span> <span class=\"n\">a_final</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">C</span> <span class=\"n\">a_final</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">hind</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">a_0</span> <span class=\"n\">a_1</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">sum.inr</span> <span class=\"n\">a_1</span> <span class=\"bp\">∈</span> <span class=\"n\">f</span> <span class=\"n\">a_0</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">C</span> <span class=\"n\">a_1</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">C</span> <span class=\"n\">a_0</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"n\">fix_induction</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a'</span> <span class=\"n\">h</span> <span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">cases</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a'</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">get</span> <span class=\"o\">(</span><span class=\"n\">dom_of_mem_fix</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">b'</span> <span class=\"n\">a''</span><span class=\"bp\">;</span> <span class=\"n\">replace</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">_</span> <span class=\"bp\">∈</span> <span class=\"n\">f</span> <span class=\"n\">a'</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">e</span><span class=\"o\">⟩,</span>\n  <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">b'</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">obtain</span> <span class=\"n\">h''</span> <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">h''</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">mem_fix_iff.1</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">part.mem_unique</span> <span class=\"n\">e</span> <span class=\"n\">h''</span><span class=\"o\">,</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n    <span class=\"n\">subst</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">hbase</span> <span class=\"n\">_</span> <span class=\"n\">e</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">f.fix</span> <span class=\"n\">a''</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">obtain</span> <span class=\"n\">h''</span> <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">h''</span><span class=\"o\">,</span> <span class=\"n\">e'</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">mem_fix_iff.1</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">part.mem_unique</span> <span class=\"n\">e</span> <span class=\"n\">h''</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">e'</span> <span class=\"o\">},</span>\n    <span class=\"n\">refine</span> <span class=\"n\">hind</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">e</span> <span class=\"o\">(</span><span class=\"n\">ih</span> <span class=\"n\">_</span> <span class=\"n\">this</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">@[elab_as_eliminator]</span>\n<span class=\"kd\">def</span> <span class=\"n\">fix_induction'</span>\n  <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→.</span> <span class=\"n\">β</span> <span class=\"bp\">⊕</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">f.fix</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a'</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">f.fix</span> <span class=\"n\">a'</span> <span class=\"bp\">→</span>\n    <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">a''</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">f.fix</span> <span class=\"n\">a''</span> <span class=\"bp\">→</span> <span class=\"n\">sum.inr</span> <span class=\"n\">a''</span> <span class=\"bp\">∈</span> <span class=\"n\">f</span> <span class=\"n\">a'</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"n\">a''</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"n\">a'</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">revert</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"n\">inheriting_from_chains</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a'</span> <span class=\"n\">h</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a'</span> <span class=\"n\">a''</span> <span class=\"n\">h</span> <span class=\"n\">ih</span> <span class=\"n\">h'</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"n\">H</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">mem_fix_iff.2</span> <span class=\"o\">(</span><span class=\"n\">or.inl</span> <span class=\"n\">h</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a₂</span> <span class=\"n\">_</span> <span class=\"n\">h₂</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n    <span class=\"n\">cases</span> <span class=\"n\">part.mem_unique</span> <span class=\"n\">h</span> <span class=\"n\">h₂</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"n\">H</span> <span class=\"n\">_</span> <span class=\"n\">h'</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a₂</span> <span class=\"n\">h₂</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n    <span class=\"n\">cases</span> <span class=\"n\">part.mem_unique</span> <span class=\"n\">h</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n    <span class=\"n\">obtain</span> <span class=\"n\">h''</span> <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">h''</span><span class=\"o\">,</span> <span class=\"n\">e'</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">mem_fix_iff.1</span> <span class=\"n\">h'</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">part.mem_unique</span> <span class=\"n\">h</span> <span class=\"n\">h''</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">e'</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">pfun</span>\n</code></pre></div>",
        "id": 272350505,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645149500
    },
    {
        "content": "<p>There should probably be a simpler to use version of <code>mem_fix_iff</code> in the case where you know <code>f</code> has a next element</p>",
        "id": 272350565,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645149575
    },
    {
        "content": "<p>Here's a version that adds the fix assumption in <code>inheriting_from_chains</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.pfun</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">pfun</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kd\">@[elab_as_eliminator]</span>\n<span class=\"kd\">def</span> <span class=\"n\">inheriting_from_chains</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→.</span> <span class=\"n\">β</span> <span class=\"bp\">⊕</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">f.fix</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hbase</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">a_final</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">sum.inl</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">f</span> <span class=\"n\">a_final</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"n\">a_final</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">hind</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">a_0</span> <span class=\"n\">a_1</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">f.fix</span> <span class=\"n\">a_1</span> <span class=\"bp\">→</span> <span class=\"n\">sum.inr</span> <span class=\"n\">a_1</span> <span class=\"bp\">∈</span> <span class=\"n\">f</span> <span class=\"n\">a_0</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"n\">a_1</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"n\">a_0</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"n\">fix_induction</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a'</span> <span class=\"n\">h</span> <span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">cases</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a'</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">get</span> <span class=\"o\">(</span><span class=\"n\">dom_of_mem_fix</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">b'</span> <span class=\"n\">a''</span><span class=\"bp\">;</span> <span class=\"n\">replace</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">_</span> <span class=\"bp\">∈</span> <span class=\"n\">f</span> <span class=\"n\">a'</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">e</span><span class=\"o\">⟩,</span>\n  <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">b'</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">obtain</span> <span class=\"n\">h''</span> <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">h''</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">mem_fix_iff.1</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">part.mem_unique</span> <span class=\"n\">e</span> <span class=\"n\">h''</span><span class=\"o\">,</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n    <span class=\"n\">subst</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">hbase</span> <span class=\"n\">_</span> <span class=\"n\">e</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">f.fix</span> <span class=\"n\">a''</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">obtain</span> <span class=\"n\">h''</span> <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">h''</span><span class=\"o\">,</span> <span class=\"n\">e'</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">mem_fix_iff.1</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">part.mem_unique</span> <span class=\"n\">e</span> <span class=\"n\">h''</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">e'</span> <span class=\"o\">},</span>\n    <span class=\"n\">refine</span> <span class=\"n\">hind</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">this</span> <span class=\"n\">e</span> <span class=\"o\">(</span><span class=\"n\">ih</span> <span class=\"n\">_</span> <span class=\"n\">this</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">@[elab_as_eliminator]</span>\n<span class=\"kd\">def</span> <span class=\"n\">fix_induction'</span>\n  <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→.</span> <span class=\"n\">β</span> <span class=\"bp\">⊕</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">f.fix</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a'</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">f.fix</span> <span class=\"n\">a'</span> <span class=\"bp\">→</span>\n    <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">a''</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">f.fix</span> <span class=\"n\">a''</span> <span class=\"bp\">→</span> <span class=\"n\">sum.inr</span> <span class=\"n\">a''</span> <span class=\"bp\">∈</span> <span class=\"n\">f</span> <span class=\"n\">a'</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"n\">a''</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"n\">a'</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"n\">inheriting_from_chains</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a'</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a'</span> <span class=\"n\">a''</span> <span class=\"n\">h'</span> <span class=\"n\">h</span> <span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"n\">H</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">mem_fix_iff.2</span> <span class=\"o\">(</span><span class=\"n\">or.inl</span> <span class=\"n\">h</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a₂</span> <span class=\"n\">_</span> <span class=\"n\">h₂</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n    <span class=\"n\">cases</span> <span class=\"n\">part.mem_unique</span> <span class=\"n\">h</span> <span class=\"n\">h₂</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"n\">H</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">mem_fix_iff.2</span> <span class=\"o\">(</span><span class=\"n\">or.inr</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">h'</span><span class=\"o\">⟩))</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a₂</span> <span class=\"n\">h₂</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n    <span class=\"n\">cases</span> <span class=\"n\">part.mem_unique</span> <span class=\"n\">h</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">ih</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">pfun</span>\n</code></pre></div>",
        "id": 272351058,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645149941
    }
]