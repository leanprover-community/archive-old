[
    {
        "content": "<p>While on the flight home, I decided to actually write the wishlist tactic I've mentioned to a few people, which displays lean proofs in a line by line style heavily annotated with type ascriptions so it looks more like a Fitch style proof. I'm still tweaking the display options, but here's what it looks like right now:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">explode</span>\n<span class=\"kn\">section</span> <span class=\"kn\">end</span>\n<span class=\"bp\">#</span><span class=\"n\">explode</span> <span class=\"n\">iff_true</span>\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span>iff_true : ∀ (a : Prop), a ↔ true ↔ a\n0│   │ a              ├ Prop\n1│   │ h              │ ┌ a ↔ true\n2│   │ trivial        │ │ true\n3│1,2│ iff.mpr        │ │ a\n4│3  │ ∀I             │ (a ↔ true) → a\n5│   │ iff_true_intro │ a → (a ↔ true)\n6│4,5│ iff.intro      │ a ↔ true ↔ a\n</pre></div>",
        "id": 133093714,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1535673246
    },
    {
        "content": "<p>Ok, I can parse this, and it looks really helpful... but why is line <code>0</code> at the top, instead of the bottom?</p>",
        "id": 133103016,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1535690305
    },
    {
        "content": "<p>it's numbered like lines of proof</p>",
        "id": 133103024,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1535690336
    },
    {
        "content": "<p>It seems to me that <code>0</code> follows from <code>6</code>, but maybe I misunderstand <code>0</code></p>",
        "id": 133103025,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1535690340
    },
    {
        "content": "<p>Also, I'd rather read them upside down.</p>",
        "id": 133103034,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1535690370
    },
    {
        "content": "<p>lambdas are introduced with the intro variable on top of the bracket</p>",
        "id": 133103036,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1535690385
    },
    {
        "content": "<p>First split the goal, then you get two subtrees... etc..</p>",
        "id": 133103037,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1535690387
    },
    {
        "content": "<p>Yes, I usually read metamath proofs bottom up as well</p>",
        "id": 133103078,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1535690406
    },
    {
        "content": "<p>Aaah, that is what <code>0</code> is doing, of course!</p>",
        "id": 133103081,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1535690409
    },
    {
        "content": "<p>Well... there is a solution to that: have <code>#explode</code> reverse the order...</p>",
        "id": 133103084,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1535690433
    },
    {
        "content": "<p>But now I see that <code>0</code> should remain at the top.</p>",
        "id": 133103085,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1535690444
    },
    {
        "content": "<p>So it's not that easy...</p>",
        "id": 133103087,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1535690454
    },
    {
        "content": "<p>I suppose, but that will get confusing to explain to people</p>",
        "id": 133103088,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1535690462
    },
    {
        "content": "<p>I would prefer a forward proof ordering on the page</p>",
        "id": 133103099,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1535690482
    },
    {
        "content": "<p>even if your interest is drawn from the bottom up</p>",
        "id": 133103103,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1535690507
    },
    {
        "content": "<p>How far is this representation from writing a <code>begin end</code> proof?</p>",
        "id": 133103114,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1535690512
    },
    {
        "content": "<p>Could you generate that as well?</p>",
        "id": 133103115,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1535690521
    },
    {
        "content": "<p>what do you mean?</p>",
        "id": 133103152,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1535690524
    },
    {
        "content": "<p>like you want the lines to correspond to <code>apply</code> and <code>intro</code>?</p>",
        "id": 133103157,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1535690540
    },
    {
        "content": "<p>Right.</p>",
        "id": 133103162,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1535690546
    },
    {
        "content": "<p><code>#deobfuscate</code></p>",
        "id": 133103166,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1535690559
    },
    {
        "content": "<p>it's pretty close, there are some edge cases where you see explicit <code>∀E</code> and <code>∀I</code> steps</p>",
        "id": 133103181,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1535690597
    },
    {
        "content": "<p>Even if it isn't perfect, I'dd really like it.</p>",
        "id": 133103233,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1535690648
    },
    {
        "content": "<p>can you mockup?</p>",
        "id": 133103257,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1535690742
    },
    {
        "content": "<p>What do you mean? This example? Or more general?</p>",
        "id": 133103303,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1535690785
    },
    {
        "content": "<p>either, something that shows off what you would like to see</p>",
        "id": 133103369,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1535690901
    },
    {
        "content": "<p>Rob has this interface with mathematica... with certain terms corresponding to certain mathematica terms</p>",
        "id": 133103381,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1535690931
    },
    {
        "content": "<p>So we could also have a dictionary <code>\\lam &lt;-&gt; intros</code> etc...</p>",
        "id": 133103392,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1535690954
    },
    {
        "content": "<p>But I don't have a clear picture how to actually implement this</p>",
        "id": 133103394,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1535690966
    },
    {
        "content": "<p>oh, there is a potential problem with making a real runnable proof script, as opposed to just a display like this... it has to parse as valid lean, and sometimes <code>pp</code> doesn't give good results</p>",
        "id": 133103440,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1535691010
    },
    {
        "content": "<p>I am currently hiding non proof terms in <code>#explode</code>, but probably this won't work in a proof script</p>",
        "id": 133103451,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1535691050
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>iff_true : ∀ (a : Prop), a ↔ true ↔ a\n0│   │ a              ├ Prop            | intro (intros?)\n1│   │ h              │ ┌ a ↔ true      | intro (intros?)\n2│   │ trivial        │ │ true          | exact trivial\n3│1,2│ iff.mpr        │ │ a             | apply iff.mpr\n4│3  │ ∀I             │ (a ↔ true) → a  | ???\n5│   │ iff_true_intro │ a → (a ↔ true)  | exact iff_true_intro\n6│4,5│ iff.intro      │ a ↔ true ↔ a    | apply iff.intro (split?)\n</pre></div>",
        "id": 133103511,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1535691177
    },
    {
        "content": "<p>I just added an extra column, and it totally wouldn't run.</p>",
        "id": 133103558,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1535691244
    },
    {
        "content": "<p>I guess part of the problem with line for line translating this display into a proof script is that forward proving is less natural</p>",
        "id": 133103567,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1535691297
    },
    {
        "content": "<p>you have to use lots of <code>have</code></p>",
        "id": 133103572,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1535691306
    },
    {
        "content": "<p>Right</p>",
        "id": 133103577,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1535691317
    },
    {
        "content": "<p>and the positioning of the <code>intro</code> is weird</p>",
        "id": 133103584,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1535691350
    },
    {
        "content": "<p>The hard stuff is when dealing with <code>eq.rec</code> though</p>\n<div class=\"codehilite\"><pre><span></span>iff_not_comm : ∀ {a b : Prop} [_inst_1 : decidable a] [_inst_2 : decidable b], a ↔ ¬b ↔ (b ↔ ¬a)\n0 │     │ a            ├ Prop\n1 │     │ b            ├ Prop\n2 │     │ _inst_1      ├ decidable a\n3 │     │ _inst_2      ├ decidable b\n4 │     │ eq.refl      │ (a ↔ ¬b ↔ (b ↔ ¬a)) = (a ↔ ¬b ↔ (b ↔ ¬a))\n5 │     │ iff_def      │ a ↔ ¬b ↔ (a → ¬b) ∧ (¬b → a)\n6 │5    │ propext      │ (a ↔ ¬b) = ((a → ¬b) ∧ (¬b → a))\n7 │4,6  │ eq.rec       │ (a ↔ ¬b ↔ (b ↔ ¬a)) = ((a → ¬b) ∧ (¬b → a) ↔ (b ↔ ¬a))\n8 │7    │ id           │ (a ↔ ¬b ↔ (b ↔ ¬a)) = ((a → ¬b) ∧ (¬b → a) ↔ (b ↔ ¬a))\n9 │     │ eq.refl      │ ((a → ¬b) ∧ (¬b → a) ↔ (b ↔ ¬a)) = ((a → ¬b) ∧ (¬b → a) ↔ (b ↔ ¬a))\n10│     │ iff_def      │ b ↔ ¬a ↔ (b → ¬a) ∧ (¬a → b)\n11│10   │ propext      │ (b ↔ ¬a) = ((b → ¬a) ∧ (¬a → b))\n12│9,11 │ eq.rec       │ ((a → ¬b) ∧ (¬b → a) ↔ (b ↔ ¬a)) = ((a → ¬b) ∧ (¬b → a) ↔ (b → ¬a) ∧ (¬a → b))\n13│12   │ id           │ ((a → ¬b) ∧ (¬b → a) ↔ (b ↔ ¬a)) = ((a → ¬b) ∧ (¬b → a) ↔ (b → ¬a) ∧ (¬a → b))\n14│     │ imp_not_comm │ a → ¬b ↔ b → ¬a\n15│     │ not_imp_comm │ ¬b → a ↔ ¬a → b\n16│14,15│ and_congr    │ (a → ¬b) ∧ (¬b → a) ↔ (b → ¬a) ∧ (¬a → b)\n17│13,16│ eq.mpr       │ (a → ¬b) ∧ (¬b → a) ↔ (b ↔ ¬a)\n18│8,17 │ eq.mpr       │ a ↔ ¬b ↔ (b ↔ ¬a)\n</pre></div>",
        "id": 133103676,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1535691508
    },
    {
        "content": "<p>You should make a version which outputs those judgment tree things and outputs LaTeX</p>",
        "id": 133105985,
        "sender_full_name": "Reid Barton",
        "timestamp": 1535696196
    },
    {
        "content": "<p>Noooo! We triggered Mario's immune defenses. He spent three days with people who want Lean to prove everything by itself, he merged tidy and then, flying back, he wrote the Lean2metamath tactic!</p>",
        "id": 133108796,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1535700519
    },
    {
        "content": "<p>\"On the flight home, I wrote an explode command\" = \"I just risked getting the plane diverted because the guy next to me panicked\"</p>",
        "id": 133121291,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1535719010
    },
    {
        "content": "<p>I originally called it <code>mmshow</code> but I decided against metamath branding it</p>",
        "id": 133121314,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1535719047
    }
]