[
    {
        "content": "<p>Which is consistent with <code>haveI : semimodule ℕ (tensor_algebra R M) := infer_instance,</code> succeeding and <code>haveI : semimodule R (tensor_algebra R M) := infer_instance,</code> failing. I can only assume this failure is very related to <a href=\"https://github.com/leanprover-community/mathlib/issues/4289\">#4289</a>, which is unfortunate, because it means that we can't do subtraction in the tensor / free / clifford /... algebras</p>",
        "id": 212582179,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602087145
    },
    {
        "content": "<p>this is beyond my pay grade <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 212582547,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1602087318
    },
    {
        "content": "<p>Perhaps a better <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra.tensor_algebra</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semimodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">tensor_algebra</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">sorry</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"c1\">-- this poisons the instance cache somehow and makes the next line fail</span>\n  <span class=\"n\">haveI</span> <span class=\"o\">:</span> <span class=\"n\">ring</span> <span class=\"o\">(</span><span class=\"n\">tensor_algebra</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">algebra.semiring_to_ring</span> <span class=\"n\">R</span><span class=\"o\">,</span>\n  <span class=\"n\">haveI</span> <span class=\"o\">:</span> <span class=\"n\">semimodule</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">tensor_algebra</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">infer_instance</span><span class=\"o\">,</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 212582899,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602087457
    },
    {
        "content": "<p>Whose pay grade might this be within? It's certainly well beyond mine...</p>",
        "id": 212582947,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602087477
    },
    {
        "content": "<p><code>haveI : ring ...</code> is almost always wrong, should be <code>letI</code> at least</p>",
        "id": 212583106,
        "sender_full_name": "Reid Barton",
        "timestamp": 1602087525
    },
    {
        "content": "<p>without any other idea of what is happening here</p>",
        "id": 212583122,
        "sender_full_name": "Reid Barton",
        "timestamp": 1602087531
    },
    {
        "content": "<p>Behavior is the same either way</p>",
        "id": 212583313,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602087610
    },
    {
        "content": "<p>To take <code>tactics</code> out of the equation, this also fails:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra.tensor_algebra</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semimodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- this poisons the instance cache somehow and makes the next line fail</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">ring</span> <span class=\"o\">(</span><span class=\"n\">tensor_algebra</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">algebra.semiring_to_ring</span> <span class=\"n\">R</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">semimodule</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">tensor_algebra</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">infer_instance</span>\n</code></pre></div>\n\n<p>Unfortunately I can't ask the author of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/algebra.semiring_to_ring\">docs#algebra.semiring_to_ring</a> what the problem is, as that's me...</p>",
        "id": 212584556,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602088208
    },
    {
        "content": "<p>what's the error</p>",
        "id": 212584757,
        "sender_full_name": "Reid Barton",
        "timestamp": 1602088301
    },
    {
        "content": "<p>Unhelpful:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"kd\">class</span> <span class=\"kd\">instance</span> <span class=\"n\">for</span>\n<span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">,</span>\n<span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_2</span> <span class=\"o\">:</span> <span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_3</span> <span class=\"o\">:</span> <span class=\"n\">semimodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">semimodule</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">tensor_algebra</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 212584803,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602088321
    },
    {
        "content": "<p>The tactic state showed by vs-code is identical with and without the poisoned line, the only difference is whether it succeeds or fails</p>",
        "id": 212585024,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602088409
    },
    {
        "content": "<p>What happens if in <code>semiring_to_ring</code> you swap the two <code>..</code> lines?</p>",
        "id": 212585261,
        "sender_full_name": "Reid Barton",
        "timestamp": 1602088524
    },
    {
        "content": "<p>Will try that. FWIW, with verbose printing the difference between good and bad is</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gd\">--- bad</span>\n<span class=\"gi\">+++ good</span>\n<span class=\"gu\">@@ -7,10 +7,9 @@</span>\nR : Type u_1,\nM : Type u_2,\n_inst_1 : add_comm_group M,\n_inst_2 : comm_ring R,\n_inst_3 :\n  @semimodule R M (@ring.to_semiring R (@comm_ring.to_ring R _inst_2)) (@add_comm_group.to_add_comm_monoid M _inst_1)\n ⊢ @semimodule R\n     (@tensor_algebra R (@comm_ring.to_comm_semiring R _inst_2) M (@add_comm_group.to_add_comm_monoid M _inst_1) _inst_3)\n     (@ring.to_semiring R (@comm_ring.to_ring R _inst_2))\n<span class=\"gd\">-    (@add_comm_group.to_add_comm_monoid</span>\n<span class=\"gi\">+    (@semiring.to_add_comm_monoid</span>\n        (@tensor_algebra R (@comm_ring.to_comm_semiring R _inst_2) M (@add_comm_group.to_add_comm_monoid M _inst_1)\n           _inst_3)\n<span class=\"gd\">-       (@ring.to_add_comm_group</span>\n<span class=\"gd\">-          (@tensor_algebra R (@comm_ring.to_comm_semiring R _inst_2) M (@add_comm_group.to_add_comm_monoid M _inst_1)</span>\n<span class=\"gd\">-             _inst_3)</span>\n<span class=\"gd\">-          (@tensor_algebra.ring R M _inst_1 _inst_2 _inst_3)))</span>\n<span class=\"gi\">+       (@tensor_algebra.semiring R (@comm_ring.to_comm_semiring R _inst_2) M</span>\n<span class=\"gi\">+          (@add_comm_group.to_add_comm_monoid M _inst_1)</span>\n<span class=\"gi\">+          _inst_3))</span>\n</code></pre></div>",
        "id": 212585481,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602088656
    },
    {
        "content": "<p>Currently my theory, which may or may not be possible, is that finding the <code>semimodule R (tensor_algebra R M)</code> instance requires the entire <code>semiring (tensor_algebra R M)</code> instance to match (not just match fieldwise, because of a lack of eta expansion for structures) and that the way that <code>algebra.semiring_to_ring</code> is implemented causes the underlying <code>semiring</code> to be broken up and reassembled rather than preserved as a unit.</p>",
        "id": 212585726,
        "sender_full_name": "Reid Barton",
        "timestamp": 1602088769
    },
    {
        "content": "<p>Yeah, the idea seems sensible to me</p>",
        "id": 212585930,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602088899
    },
    {
        "content": "<p>actually, wait. These are <code>old_structure_cmd</code> structures, right? So the <code>semiring</code> instance is never preserved as a unit</p>",
        "id": 212586542,
        "sender_full_name": "Reid Barton",
        "timestamp": 1602089195
    },
    {
        "content": "<p>I'm confused how this doesn't cause more problems in general</p>",
        "id": 212586555,
        "sender_full_name": "Reid Barton",
        "timestamp": 1602089203
    },
    {
        "content": "<p>Yes, they are. I don't know what <code>this </code>refers to, but <code>semiring_to_ring</code> is currently used in only one place</p>",
        "id": 212586617,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602089239
    },
    {
        "content": "<p>Finallly tested your idea - it made no difference unfortunately</p>",
        "id": 212587122,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602089462
    },
    {
        "content": "<p>An even further reduced example without <code>infer_instance</code>, that gives a better error message:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra.tensor_algebra</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semimodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">working_instance</span> <span class=\"o\">:</span> <span class=\"n\">semimodule</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">tensor_algebra</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">infer_instance</span>\n\n<span class=\"c1\">-- this poisons the instance cache somehow and makes the next line fail</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">ring</span> <span class=\"o\">(</span><span class=\"n\">tensor_algebra</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">algebra.semiring_to_ring</span> <span class=\"n\">R</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">semimodule</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">tensor_algebra</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">working_instance</span> <span class=\"n\">R</span> <span class=\"n\">M</span>\n</code></pre></div>\n\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n\n<p>Error message</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span><span class=\"o\">,</span> <span class=\"n\">term</span>\n  <span class=\"n\">working_instance</span> <span class=\"n\">R</span> <span class=\"n\">M</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">@</span><span class=\"n\">semimodule</span> <span class=\"n\">R</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">tensor_algebra</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_ring.to_comm_semiring</span> <span class=\"n\">R</span> <span class=\"n\">_inst_2</span><span class=\"o\">)</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_group.to_add_comm_monoid</span> <span class=\"n\">M</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span> <span class=\"n\">_inst_3</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring.to_semiring</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_ring.to_ring</span> <span class=\"n\">R</span> <span class=\"n\">_inst_2</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">semiring.to_add_comm_monoid</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">tensor_algebra</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_ring.to_comm_semiring</span> <span class=\"n\">R</span> <span class=\"n\">_inst_2</span><span class=\"o\">)</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_group.to_add_comm_monoid</span> <span class=\"n\">M</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span>\n          <span class=\"n\">_inst_3</span><span class=\"o\">)</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">tensor_algebra.semiring</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_ring.to_comm_semiring</span> <span class=\"n\">R</span> <span class=\"n\">_inst_2</span><span class=\"o\">)</span> <span class=\"n\">M</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_group.to_add_comm_monoid</span> <span class=\"n\">M</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span>\n          <span class=\"n\">_inst_3</span><span class=\"o\">))</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">@</span><span class=\"n\">semimodule</span> <span class=\"n\">R</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">tensor_algebra</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_ring.to_comm_semiring</span> <span class=\"n\">R</span> <span class=\"n\">_inst_2</span><span class=\"o\">)</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_group.to_add_comm_monoid</span> <span class=\"n\">M</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span> <span class=\"n\">_inst_3</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring.to_semiring</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_ring.to_ring</span> <span class=\"n\">R</span> <span class=\"n\">_inst_2</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_group.to_add_comm_monoid</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">tensor_algebra</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_ring.to_comm_semiring</span> <span class=\"n\">R</span> <span class=\"n\">_inst_2</span><span class=\"o\">)</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_group.to_add_comm_monoid</span> <span class=\"n\">M</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span>\n          <span class=\"n\">_inst_3</span><span class=\"o\">)</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring.to_add_comm_group</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">tensor_algebra</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_ring.to_comm_semiring</span> <span class=\"n\">R</span> <span class=\"n\">_inst_2</span><span class=\"o\">)</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_group.to_add_comm_monoid</span> <span class=\"n\">M</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span>\n             <span class=\"n\">_inst_3</span><span class=\"o\">)</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">tensor_algebra.ring</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">_inst_1</span> <span class=\"n\">_inst_2</span> <span class=\"n\">_inst_3</span><span class=\"o\">)))</span>\n</code></pre></div>\n\n</div></div>",
        "id": 212587791,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602089773
    },
    {
        "content": "<p>OK, now I understand why what I was worried about before isn't a problem. Both <code>semiring.to_add_comm_monoid</code> and <code>add_comm_group.to_add_comm_monoid</code> are going to return constructors of the form <code>{ add := ..., zero := ..., ... }</code> so they will be defeq as soon as the <code>add</code> and <code>zero</code> fields are defeq.<br>\nSo, that suggests that the <code>add</code> and/or <code>zero</code> fields must not be defeq for some reason...</p>",
        "id": 212588660,
        "sender_full_name": "Reid Barton",
        "timestamp": 1602090162
    },
    {
        "content": "<p>I'll have a go at proving the types are equal...</p>",
        "id": 212589552,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602090565
    },
    {
        "content": "<p>I managed to reproduce the error in whatever version of mathlib I have lying around so I no longer have to pester you with things to try.</p>",
        "id": 212590192,
        "sender_full_name": "Reid Barton",
        "timestamp": 1602090855
    },
    {
        "content": "<p>Curiously Lean does seem to think both the <code>add</code> and <code>zero</code> fields of those instances are defeq even though the instances are not.<br>\nIt would be nice to have a <code>#whnf</code> user command...</p>",
        "id": 212590489,
        "sender_full_name": "Reid Barton",
        "timestamp": 1602090975
    },
    {
        "content": "<p>I was at least able to get to the point where the definitions looked almost equal:</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n\n<p>Long code...</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra.tensor_algebra</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semimodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">old_type</span> <span class=\"o\">:=</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">semiring.to_add_comm_monoid</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">tensor_algebra</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_ring.to_comm_semiring</span> <span class=\"n\">R</span> <span class=\"n\">_inst_2</span><span class=\"o\">)</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_group.to_add_comm_monoid</span> <span class=\"n\">M</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span>\n          <span class=\"n\">_inst_3</span><span class=\"o\">)</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">tensor_algebra.semiring</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_ring.to_comm_semiring</span> <span class=\"n\">R</span> <span class=\"n\">_inst_2</span><span class=\"o\">)</span> <span class=\"n\">M</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_group.to_add_comm_monoid</span> <span class=\"n\">M</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span>\n          <span class=\"n\">_inst_3</span><span class=\"o\">))</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">ring</span> <span class=\"o\">(</span><span class=\"n\">tensor_algebra</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">algebra.semiring_to_ring</span> <span class=\"n\">R</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">new_type</span> <span class=\"o\">:=</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_group.to_add_comm_monoid</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">tensor_algebra</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_ring.to_comm_semiring</span> <span class=\"n\">R</span> <span class=\"n\">_inst_2</span><span class=\"o\">)</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_group.to_add_comm_monoid</span> <span class=\"n\">M</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span>\n          <span class=\"n\">_inst_3</span><span class=\"o\">)</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring.to_add_comm_group</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">tensor_algebra</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_ring.to_comm_semiring</span> <span class=\"n\">R</span> <span class=\"n\">_inst_2</span><span class=\"o\">)</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_group.to_add_comm_monoid</span> <span class=\"n\">M</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span>\n             <span class=\"n\">_inst_3</span><span class=\"o\">)</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">tensor_algebra.ring</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">_inst_1</span> <span class=\"n\">_inst_2</span> <span class=\"n\">_inst_3</span><span class=\"o\">)))</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">new_type</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"bp\">=</span> <span class=\"n\">old_type</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">new_type</span> <span class=\"n\">old_type</span><span class=\"o\">,</span>\n  <span class=\"n\">dunfold</span> <span class=\"n\">add_comm_group.to_add_comm_monoid</span><span class=\"o\">,</span>\n  <span class=\"n\">dunfold</span> <span class=\"n\">semiring.to_add_comm_monoid</span><span class=\"o\">,</span>\n  <span class=\"n\">dunfold</span> <span class=\"n\">ring.to_add_comm_group</span><span class=\"o\">,</span>\n  <span class=\"n\">dunfold</span> <span class=\"n\">tensor_algebra.ring</span><span class=\"o\">,</span>\n  <span class=\"n\">dunfold</span> <span class=\"n\">algebra.semiring_to_ring</span><span class=\"o\">,</span>\n  <span class=\"n\">dunfold</span> <span class=\"n\">tensor_algebra.semiring</span><span class=\"o\">,</span>\n  <span class=\"n\">dunfold</span> <span class=\"n\">semimodule.add_comm_monoid_to_add_comm_group</span><span class=\"o\">,</span>\n  <span class=\"n\">dunfold</span> <span class=\"n\">infer_instance</span><span class=\"o\">,</span>\n  <span class=\"n\">dunfold</span> <span class=\"n\">semiring.to_add_comm_monoid</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span><span class=\"o\">,</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>  <span class=\"c1\">-- fails, but things look the same</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n\n</div></div>",
        "id": 212590562,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602091013
    },
    {
        "content": "<p>Curiously Lean also thinks both instances reduce to constructors--sorry for atrocious formatting:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">rfl</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">semiring.to_add_comm_monoid</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">tensor_algebra</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_ring.to_comm_semiring</span> <span class=\"n\">R</span> <span class=\"n\">_inst_2</span><span class=\"o\">)</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_group.to_add_comm_monoid</span> <span class=\"n\">M</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span>\n          <span class=\"n\">_inst_3</span><span class=\"o\">)</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">tensor_algebra.semiring</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_ring.to_comm_semiring</span> <span class=\"n\">R</span> <span class=\"n\">_inst_2</span><span class=\"o\">)</span> <span class=\"n\">M</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_group.to_add_comm_monoid</span> <span class=\"n\">M</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span>\n          <span class=\"n\">_inst_3</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">add_comm_monoid.mk</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">rfl</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_group.to_add_comm_monoid</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">tensor_algebra</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_ring.to_comm_semiring</span> <span class=\"n\">R</span> <span class=\"n\">_inst_2</span><span class=\"o\">)</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_group.to_add_comm_monoid</span> <span class=\"n\">M</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span>\n          <span class=\"n\">_inst_3</span><span class=\"o\">)</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring.to_add_comm_group</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">tensor_algebra</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_ring.to_comm_semiring</span> <span class=\"n\">R</span> <span class=\"n\">_inst_2</span><span class=\"o\">)</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_group.to_add_comm_monoid</span> <span class=\"n\">M</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span>\n             <span class=\"n\">_inst_3</span><span class=\"o\">)</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">tensor_algebra.ring</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">_inst_1</span> <span class=\"n\">_inst_2</span> <span class=\"n\">_inst_3</span><span class=\"o\">)))</span> <span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">add_comm_monoid.mk</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 212590965,
        "sender_full_name": "Reid Barton",
        "timestamp": 1602091206
    },
    {
        "content": "<p>Curiously <code>congr</code> closes your goal that <code>refl</code> can't, and looking at the term is not illuminating...</p>",
        "id": 212591487,
        "sender_full_name": "Reid Barton",
        "timestamp": 1602091458
    },
    {
        "content": "<p>Well this is something, Lean apparently doesn't think the <code>add_assoc</code> fields of these two instance are equal, even though they are proofs of the same proposition. Same for the other proof fields I tested.</p>",
        "id": 212593330,
        "sender_full_name": "Reid Barton",
        "timestamp": 1602092280
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra.tensor_algebra</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">_inst_2</span> <span class=\"o\">:</span> <span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">_inst_3</span> <span class=\"o\">:</span> <span class=\"n\">semimodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">working_instance</span> <span class=\"o\">:</span> <span class=\"n\">semimodule</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">tensor_algebra</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">infer_instance</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">ring</span> <span class=\"o\">(</span><span class=\"n\">tensor_algebra</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">algebra.semiring_to_ring</span> <span class=\"n\">R</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">x</span> <span class=\"o\">:</span>\n  <span class=\"bp\">@</span><span class=\"n\">add_comm_monoid.add_assoc</span> <span class=\"n\">_</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">semiring.to_add_comm_monoid</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">tensor_algebra</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_ring.to_comm_semiring</span> <span class=\"n\">R</span> <span class=\"n\">_inst_2</span><span class=\"o\">)</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_group.to_add_comm_monoid</span> <span class=\"n\">M</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span>\n          <span class=\"n\">_inst_3</span><span class=\"o\">)</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">tensor_algebra.semiring</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_ring.to_comm_semiring</span> <span class=\"n\">R</span> <span class=\"n\">_inst_2</span><span class=\"o\">)</span> <span class=\"n\">M</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_group.to_add_comm_monoid</span> <span class=\"n\">M</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span>\n          <span class=\"n\">_inst_3</span><span class=\"o\">))</span>\n  <span class=\"bp\">=</span>\n  <span class=\"bp\">@</span><span class=\"n\">add_comm_monoid.add_assoc</span> <span class=\"n\">_</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_group.to_add_comm_monoid</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">tensor_algebra</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_ring.to_comm_semiring</span> <span class=\"n\">R</span> <span class=\"n\">_inst_2</span><span class=\"o\">)</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_group.to_add_comm_monoid</span> <span class=\"n\">M</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span>\n          <span class=\"n\">_inst_3</span><span class=\"o\">)</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring.to_add_comm_group</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">tensor_algebra</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_ring.to_comm_semiring</span> <span class=\"n\">R</span> <span class=\"n\">_inst_2</span><span class=\"o\">)</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_group.to_add_comm_monoid</span> <span class=\"n\">M</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span>\n             <span class=\"n\">_inst_3</span><span class=\"o\">)</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">tensor_algebra.ring</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">_inst_1</span> <span class=\"n\">_inst_2</span> <span class=\"n\">_inst_3</span><span class=\"o\">)))</span> <span class=\"o\">:=</span>\n<span class=\"n\">rfl</span>                             <span class=\"c1\">-- doesn't work</span>\n<span class=\"c\">/-</span><span class=\"cm\">     -- works</span>\n<span class=\"cm\">begin</span>\n<span class=\"cm\">  have : ∀ (P : Prop) (p q : P), p = q := λ P p q, rfl,</span>\n<span class=\"cm\">  apply this,</span>\n<span class=\"cm\">end  -/</span>\n</code></pre></div>",
        "id": 212593885,
        "sender_full_name": "Reid Barton",
        "timestamp": 1602092534
    },
    {
        "content": "<p>Well that's bizarre</p>",
        "id": 212595043,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602093103
    },
    {
        "content": "<p><code>attribute [semireducible] tensor_algebra</code> fixes your example, and some but not all of the ones in this thread</p>",
        "id": 212595703,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602093451
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span>, who suggested that it should be irreducible (which without that line it currently is)</p>",
        "id": 212595739,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602093474
    },
    {
        "content": "<p>OK, well, that makes a tiny bit more sense I guess. The two sides really are defeq but the elaborator thinks they aren't?<br>\nIt's worth noting that you do have to do some work to see that the two proofs are proofs of the same proposition (because they are about syntactically different <code>+</code>s). I don't see what making the type <code>tensor_algebra</code> not irreducible would have to do with this, though.</p>",
        "id": 212596326,
        "sender_full_name": "Reid Barton",
        "timestamp": 1602093726
    },
    {
        "content": "<p>Even with this <code>irreducible</code> business it's still really weird. The elaborator knows the two sides have the same type because there is no type error if you put <code>_</code> as the definition (or indeed the <code>begin...end</code> block in the comment).</p>",
        "id": 212596759,
        "sender_full_name": "Reid Barton",
        "timestamp": 1602093959
    },
    {
        "content": "<p>It also makes me wonder how much work Lean does in general checking that proofs are defeq</p>",
        "id": 212597119,
        "sender_full_name": "Reid Barton",
        "timestamp": 1602094116
    },
    {
        "content": "<p>Oh, the conclusion of this thread is not good at all</p>",
        "id": 212611421,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602100719
    },
    {
        "content": "<p>Lean should definitely have an early out checking that proofs are defeq</p>",
        "id": 212611471,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602100742
    },
    {
        "content": "<p>I guess it would be good to create a self-contained reproducer.</p>",
        "id": 212614697,
        "sender_full_name": "Reid Barton",
        "timestamp": 1602102359
    },
    {
        "content": "<p>Without mathlib, you mean?</p>",
        "id": 212620699,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602105531
    },
    {
        "content": "<p>Yes.</p>",
        "id": 212620865,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1602105637
    },
    {
        "content": "<p>Fwiw I experimented with proof reduction a little back when it became known that it can loop in Lean's type theory. It's been a while so I'm very fuzzy on the details, but as far as I remember, there are checks to exit reduction early if the term is a proof since at least for typechecking, irrelevance applies. However life is not so simple, mainly due to unification. It turns out that things sometimes have to be reduced to infer some metas.</p>",
        "id": 212646832,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1602132374
    },
    {
        "content": "<p>I recall there being a recent crackdown on such unifications in 3.14 or so, it broke a bunch of proofs that were doing just that. Are you sure this is still the case?</p>",
        "id": 212653400,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602140754
    },
    {
        "content": "<p>We only removed support to unfold theorems (i.e. δ-reduction).  Nothing changed about the unification algorithm otherwise.  Though there is a big \"if both sides are proofs and the types are defeq, exit\" statement at the top.</p>",
        "id": 212656698,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1602143517
    },
    {
        "content": "<p>Indeed, there is a check, but it's more at the <em><a href=\"https://github.com/leanprover-community/lean/blob/4be962c167ca442a0ec5e84472d7ff9f5302788f/src/library/type_context.cpp#L3387\">bottom</a></em>.</p>",
        "id": 212696878,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1602166926
    },
    {
        "content": "<p>Do we think this can be fixed by just moving that check?</p>",
        "id": 213143116,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602590294
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/algebra.2Esemiring_to_ring.20breaks.20semimodule.20typeclass.20lookup/near/213143116\">said</a>:</p>\n<blockquote>\n<p>Do we think this can be fixed by just moving that check?</p>\n</blockquote>\n<p>I doubt it will be that easy (though I'd love to be corrected!). I think the way to make progress here is for us to produce a version of this apparent bug that is independent of Mathlib. I spent a little time on this yesterday evening but could not even eliminate <code>tensor_algebra</code>. I'll try again this evening.</p>",
        "id": 213287749,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1602682087
    },
    {
        "content": "<p>I assume you made no progress, <span class=\"user-mention\" data-user-id=\"240862\">@Oliver Nash</span>?</p>",
        "id": 213788443,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1603115685
    },
    {
        "content": "<p>Correct. About another hour spent on it last week but didn't really get anywhere.</p>",
        "id": 213788574,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1603115744
    },
    {
        "content": "<p>I think with a sufficiently-big block of time, I could do it.</p>",
        "id": 213788593,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1603115757
    },
    {
        "content": "<p>There was some related discussion at <a href=\"#narrow/stream/116395-maths/topic/Can't.20find.20algebra.20instance/near/213566642\">https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/Can't.20find.20algebra.20instance/near/213566642</a>, just to keep things connected together.</p>",
        "id": 213788891,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1603115869
    },
    {
        "content": "<p>I think I've made some progress here, we shouldn't be using <code>algebra.semiring_to_ring</code> for <code>tensor_algebra</code>, as that clashes with <code>ring_quot.ring</code></p>",
        "id": 213804296,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1603121804
    },
    {
        "content": "<p>I think that will at least solve my issues from <a href=\"https://github.com/leanprover-community/mathlib/tree/tensor_algebra_adjunction\">https://github.com/leanprover-community/mathlib/tree/tensor_algebra_adjunction</a></p>",
        "id": 213804547,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1603121917
    },
    {
        "content": "<p>I think adding</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semimodule</span> <span class=\"n\">S</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">ring</span> <span class=\"o\">(</span><span class=\"n\">tensor_algebra</span> <span class=\"n\">S</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">ring_quot.ring</span> <span class=\"o\">(</span><span class=\"n\">tensor_algebra.rel</span> <span class=\"n\">S</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n</code></pre></div>\n\n<p>is a good start. I'm still struggling to make <code>clifford_algebra</code> happy with a similar definition though.</p>",
        "id": 213804619,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1603121953
    },
    {
        "content": "<p>But ring_quot.ring is an instance, so why do we need to add it in the first place?</p>",
        "id": 213804686,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1603121981
    },
    {
        "content": "<p>Because <code>tensor_algebra = ring_quot</code> only while the former is reducible</p>",
        "id": 213804712,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1603122000
    },
    {
        "content": "<p>So we need to explictly re-export it</p>",
        "id": 213804761,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1603122007
    },
    {
        "content": "<p>Oh right.</p>",
        "id": 213804774,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1603122016
    },
    {
        "content": "<p>This would be a lot easier if <code>@derive</code> could handle instances with dependencies</p>",
        "id": 213804815,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1603122039
    },
    {
        "content": "<p>But essentially I think we need to copy across all the <code>ring_quot</code> instances (that we care about) in <code>tensor_algebra</code></p>",
        "id": 213804876,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1603122065
    },
    {
        "content": "<p>Is there a <code>ring</code> instance for <code>free_algebra</code>?</p>",
        "id": 213804895,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1603122080
    },
    {
        "content": "<p>Yes</p>",
        "id": 213804908,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1603122085
    },
    {
        "content": "<p>Oh, wait</p>",
        "id": 213804920,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1603122089
    },
    {
        "content": "<p>Yes, in the PR that this thread started with (<a href=\"https://github.com/leanprover-community/mathlib/issues/4289\">#4289</a>)</p>",
        "id": 213804935,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1603122099
    },
    {
        "content": "<p>Let's check: <a href=\"https://leanprover-community.github.io/mathlib_docs/find/free_algebra.ring\">docs#free_algebra.ring</a></p>",
        "id": 213804963,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1603122116
    },
    {
        "content": "<p>Oh ok, so not in mathlib then. I've used <code>algebra.semiring_to_ring</code> for the free_algebra ajunction.</p>",
        "id": 213805022,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1603122128
    },
    {
        "content": "<p>I'll update the PR shortly if I get this working</p>",
        "id": 213805302,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1603122268
    },
    {
        "content": "<p>(I did not get this working)</p>",
        "id": 213814069,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1603126274
    },
    {
        "content": "<p>I'm _delighted_ to see a possible resolution of this issue but are you sure this is the root cause? I was convinced that there was a serious bug in Lean based on <span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> 's example. Have you tried removing <code>ring_quot.ring</code> and seeing if the problems disappear?</p>",
        "id": 213814350,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1603126430
    },
    {
        "content": "<p>I don't think there is a serious bug in lean (in the sense of anything compromising soundness), just one more elaborator edge case</p>",
        "id": 213815010,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603126697
    },
    {
        "content": "<p>you can probably give that term straight to the kernel and it will work</p>",
        "id": 213815041,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603126715
    },
    {
        "content": "<p>but it should really be minimized to make it appropriate for study</p>",
        "id": 213815111,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603126749
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/algebra.2Esemiring_to_ring.20breaks.20semimodule.20typeclass.20lookup/near/213815010\">said</a>:</p>\n<blockquote>\n<p>I don't think there is a serious bug in lean (in the sense of anything compromising soundness), just one more elaborator edge case</p>\n</blockquote>\n<p>Right! Thanks for clearing up my sloppy use of the phrase \"serious bug\"; indeed I had not intended to suggest there was anything approaching a soundness bug.</p>",
        "id": 213815615,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1603126942
    },
    {
        "content": "<p>And minimizing that example is something I'd like to do. It's somewhat unglamorous work but I will try again.</p>",
        "id": 213815690,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1603126991
    },
    {
        "content": "<p>I've put up a PR that at least adds the ring instances for <code>free_algebra</code> and <code>tensor_algebra</code> in <a href=\"https://github.com/leanprover-community/mathlib/issues/4692\">#4692</a>. I run into problems trying to extend to <code>clifford_algebra</code> or <code>exterior_algebra</code>, so I've left those until we get a better understanding of what's going on. <span class=\"user-mention\" data-user-id=\"240862\">@Oliver Nash</span>'s <code>universal_enveloping_algebra</code> manages to survive because it isn't marked irreducible!</p>",
        "id": 213819074,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1603128651
    },
    {
        "content": "<p><code>exterior_algebra</code> I could get with some rewrites in an instance definition: <a href=\"https://github.com/leanprover-community/mathlib/issues/4714\">#4714</a></p>",
        "id": 213921158,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1603201751
    },
    {
        "content": "<p>... which upon rebasing, leaves me with a <code>0 = 0</code> goal that <code>refl</code> can't close</p>",
        "id": 213922971,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1603202468
    },
    {
        "content": "<p>I get the feeling that most of the difficulty here comes from the fact that <code>ring</code> does not extend <code>semiring</code></p>",
        "id": 213924895,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1603203235
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra.tensor_product</span>\n<span class=\"kn\">import</span> <span class=\"n\">deprecated.subring</span>\n\n<span class=\"c1\">-- swap these ↑ two imports, and then `foo` will be happy</span>\n<span class=\"c1\">-- otherwise, get a timeout</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">algebra.module.submodule</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">N</span><span class=\"o\">]</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">function</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">injective_iff</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">function.injective</span> <span class=\"n\">f</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"n\">add_monoid_hom.injective_iff</span> <span class=\"n\">f.to_add_monoid_hom</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">unit</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">injective</span> <span class=\"o\">(</span><span class=\"n\">tensor_product.map</span> <span class=\"n\">L.subtype</span> <span class=\"n\">L.subtype</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">injective_iff</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"o\">(</span><span class=\"n\">sorry</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 214112417,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603313132
    },
    {
        "content": "<p>(Thanks to Reid for helping me figure this out.)</p>",
        "id": 214112508,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603313175
    },
    {
        "content": "<p>which mathlib commit are you on, in case it matters?</p>",
        "id": 214112790,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603313336
    },
    {
        "content": "<p><code>src/foo.lean</code> on branch <code>crazy</code></p>",
        "id": 214113160,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603313554
    },
    {
        "content": "<p>Which has 1 commit on top of <code>commit df4500242eb6aa6ee20b315b185b0f97a9b359c</code></p>",
        "id": 214113198,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603313581
    },
    {
        "content": "<p>Is this related to the earlier <code>rfl</code> weirdness or is this some all-new weirdness?</p>",
        "id": 214113287,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1603313629
    },
    {
        "content": "<p>Good question!</p>",
        "id": 214115481,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603314694
    },
    {
        "content": "<p>I tried to unmathlibify the bad rfl but there was so much stuff which needed to be copy-pasted in :-/</p>",
        "id": 214115608,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1603314754
    },
    {
        "content": "<p>I don't immediately see the connection to the rest of this thread</p>",
        "id": 214129540,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1603324753
    },
    {
        "content": "<p>Neither do I, but note that the problem goes away if you remove any of the following three ingredients:</p>\n<ul>\n<li>change <code>unit -&gt; R</code> to a module like <code>M</code></li>\n<li>change <code>L.subtype</code> to some hom <code>f</code></li>\n<li>remove the <code>tensor_product.map L.subtype</code>, and just ask for injectivity of <code>L.subtype</code>.</li>\n</ul>",
        "id": 214140226,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603337286
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/4735\">#4735</a> fixes this particular problem. Once the oleans are there, I will test if it also solves it in the bigger context that I was working in.</p>",
        "id": 214162025,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603358556
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> It would be interesting to test if it also helps in your setting. (I don't expect so, but you never know.)</p>",
        "id": 214162058,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603358581
    },
    {
        "content": "<p>I can confirm that on the <code>flat-module</code> branch, the following snippet no longer times out:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">injective_rtensor_aux₁</span> <span class=\"o\">[</span><span class=\"n\">hM</span> <span class=\"o\">:</span> <span class=\"n\">flat</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">injective</span> <span class=\"o\">(</span><span class=\"n\">L.subtype.rtensor</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"c1\">-- refine (injective_iff _).mpr _,</span>\n  <span class=\"c1\">-- rw [show M = M, from rfl],</span>\n  <span class=\"n\">rw</span> <span class=\"n\">injective_iff</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- induction n with n IH,</span>\n  <span class=\"o\">{</span> <span class=\"n\">sorry</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 214163914,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603359744
    },
    {
        "content": "<p>However, if I change the <code>(fin n → R)</code> into <code>finsupp</code>s, then it still times out <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span> <span aria-label=\"cry\" class=\"emoji emoji-1f622\" role=\"img\" title=\"cry\">:cry:</span> <span aria-label=\"angry cat\" class=\"emoji emoji-1f63e\" role=\"img\" title=\"angry cat\">:angry_cat:</span></p>",
        "id": 214163957,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603359778
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> FYI, the PR <a href=\"https://github.com/leanprover-community/mathlib/issues/4735\">#4735</a> is quasi-related to this thread.</p>",
        "id": 214165049,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603360447
    },
    {
        "content": "<p>Ok, then my preferred solution is just to remove the suspicious group/monoid/etc. instances.  May I push to your branch?</p>",
        "id": 214166509,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1603361470
    },
    {
        "content": "<p>Yes, certainly</p>",
        "id": 214166630,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603361538
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> Feel free to play around with <code>flat-module</code> as well</p>",
        "id": 214166655,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603361560
    },
    {
        "content": "<p>Although there is quite a lot going on there</p>",
        "id": 214166667,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603361571
    },
    {
        "content": "<p>Do we have an explanation for why <a href=\"https://github.com/leanprover-community/mathlib/issues/4735\">#4735</a> affects the behavior here at all?</p>",
        "id": 214175735,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603367698
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/tensor_product.add_comm_group\">docs#tensor_product.add_comm_group</a> makes Lean construct a <code>add_comm_group ↥L</code> via <code>is_add_subgroup</code>, while we want <code>submodule.semimodule</code> instead.</p>",
        "id": 214176723,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1603368314
    },
    {
        "content": "<p>Oh right. I thought that when Johan and I were minimizing the example it didn't fail with <code>deprecated.subring</code> replaced by <code>deprecated.subgroup</code> though.</p>",
        "id": 214177220,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603368613
    },
    {
        "content": "<p>Does this example involve actually non-defeq instances then? The only place I could see there being a problem is with <code>neg</code></p>",
        "id": 214177534,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603368798
    },
    {
        "content": "<p>It definitely is about <code>subtype.add_comm_group</code> (you can check with <code>local attribute [-instance]</code>).  I'm also not sure what is going on exactly (the type of <code>linear_map</code> is several lines long....).<br>\nMy rationale for removing these instances is that we already want to get away from unbundled substructures, so when in doubt remove the already deprecated instances.</p>",
        "id": 214189753,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1603374761
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"2494\">@maintainers</span> anyone wants to look at <a href=\"https://github.com/leanprover-community/mathlib/issues/4735\">#4735</a>? Gabriel kindly fix some bad instances, but this is now touching 14 files, so it would be sad to let this bitrot.</p>",
        "id": 214283069,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603439691
    },
    {
        "content": "<p>I think my plan here is just to remove the <code>irreducible</code> attribute, unless something has changed in master to make this go away - having a nicely isolated \"black box\" definition seems less important than having a ring instance</p>",
        "id": 215739271,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1604594545
    },
    {
        "content": "<p>Done in <a href=\"https://github.com/leanprover-community/mathlib/issues/4916\">#4916</a> - I've err'd on the side of making all the involved types semireducible, to avoid running into any similar headaches later. I think it's fine to just make \"don't directly use the inductive construction of the algebra\" something that we check by eye in review, rather than trying to enforce it with <code>attribute</code> and creating unification problems.</p>",
        "id": 215752770,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1604600131
    },
    {
        "content": "<p>Did anyone ever figure out what was going on with this weird elaborator issue (<a href=\"#narrow/stream/113488-general/topic/algebra.2Esemiring_to_ring.20breaks.20semimodule.20typeclass.20lookup/near/212593885\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/algebra.2Esemiring_to_ring.20breaks.20semimodule.20typeclass.20lookup/near/212593885</a>)?</p>",
        "id": 218131618,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606513903
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra.tensor_algebra</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semimodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">working_instance</span> <span class=\"o\">:</span> <span class=\"n\">semimodule</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">tensor_algebra</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">infer_instance</span>\n\n<span class=\"c1\">-- this poisons the instance cache somehow and makes the next line fail</span>\n<span class=\"kd\">instance</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">ring</span> <span class=\"o\">(</span><span class=\"n\">tensor_algebra</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">algebra.semiring_to_ring</span> <span class=\"n\">R</span>\n\n<span class=\"c1\">-- ...except that the issue is that `tensor_algebra` is irreducible</span>\n<span class=\"kn\">local</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">semireducible</span><span class=\"o\">]</span> <span class=\"n\">tensor_algebra</span>\n\n<span class=\"c1\">-- now works</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">semimodule</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">tensor_algebra</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">working_instance</span> <span class=\"n\">R</span> <span class=\"n\">M</span>\n</code></pre></div>",
        "id": 218132988,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606515367
    },
    {
        "content": "<p>Amelia and I were talking about <code>tensor_algebra</code> on Thursday and she was having some crazy problems with things not unifying, and then we discovered that <code>tensor_algebra</code> was marked <code>irreducible</code> (or at least it was in the branch we were working on). Does this explain some stuff?</p>",
        "id": 218133116,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606515496
    },
    {
        "content": "<p>Oh no... more of this irreducible stuff <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span></p>",
        "id": 218133462,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1606515927
    },
    {
        "content": "<p>Now Yury is back with us I must get back to making <code>with_top</code> and <code>with_bot</code> irreducible...</p>",
        "id": 218133740,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606516214
    },
    {
        "content": "<p>I think we knew about it being <code>irreducible</code> but the behavior is still really weird</p>",
        "id": 218133786,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606516282
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra.tensor_algebra</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">_inst_2</span> <span class=\"o\">:</span> <span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">_inst_3</span> <span class=\"o\">:</span> <span class=\"n\">semimodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">working_instance</span> <span class=\"o\">:</span> <span class=\"n\">semimodule</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">tensor_algebra</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">infer_instance</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">ring</span> <span class=\"o\">(</span><span class=\"n\">tensor_algebra</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">algebra.semiring_to_ring</span> <span class=\"n\">R</span>\n\n<span class=\"c1\">-- this makes it work</span>\n<span class=\"kn\">local</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">semireducible</span><span class=\"o\">]</span> <span class=\"n\">tensor_algebra</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">x</span> <span class=\"o\">:</span>\n  <span class=\"bp\">@</span><span class=\"n\">add_comm_monoid.add_assoc</span> <span class=\"n\">_</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">semiring.to_add_comm_monoid</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">tensor_algebra</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_ring.to_comm_semiring</span> <span class=\"n\">R</span> <span class=\"n\">_inst_2</span><span class=\"o\">)</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_group.to_add_comm_monoid</span> <span class=\"n\">M</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span>\n          <span class=\"n\">_inst_3</span><span class=\"o\">)</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">tensor_algebra.semiring</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_ring.to_comm_semiring</span> <span class=\"n\">R</span> <span class=\"n\">_inst_2</span><span class=\"o\">)</span> <span class=\"n\">M</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_group.to_add_comm_monoid</span> <span class=\"n\">M</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span>\n          <span class=\"n\">_inst_3</span><span class=\"o\">))</span>\n  <span class=\"bp\">=</span>\n  <span class=\"bp\">@</span><span class=\"n\">add_comm_monoid.add_assoc</span> <span class=\"n\">_</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_group.to_add_comm_monoid</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">tensor_algebra</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_ring.to_comm_semiring</span> <span class=\"n\">R</span> <span class=\"n\">_inst_2</span><span class=\"o\">)</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_group.to_add_comm_monoid</span> <span class=\"n\">M</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span>\n          <span class=\"n\">_inst_3</span><span class=\"o\">)</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring.to_add_comm_group</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">tensor_algebra</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_ring.to_comm_semiring</span> <span class=\"n\">R</span> <span class=\"n\">_inst_2</span><span class=\"o\">)</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_group.to_add_comm_monoid</span> <span class=\"n\">M</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span>\n             <span class=\"n\">_inst_3</span><span class=\"o\">)</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">foo</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">_inst_1</span> <span class=\"n\">_inst_2</span> <span class=\"n\">_inst_3</span><span class=\"o\">)))</span> <span class=\"o\">:=</span>\n          <span class=\"n\">rfl</span> <span class=\"c1\">-- now works</span>\n</code></pre></div>",
        "id": 218133949,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606516499
    },
    {
        "content": "<p>(I had to change an instance name presumably because of some recent Lean changes).</p>",
        "id": 218133971,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606516540
    },
    {
        "content": "<p>Oh I see, Eric already spotted this. And this doesn't explain everything?</p>",
        "id": 218134019,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606516581
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra.tensor_algebra</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">_inst_2</span> <span class=\"o\">:</span> <span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">_inst_3</span> <span class=\"o\">:</span> <span class=\"n\">semimodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">working_instance</span> <span class=\"o\">:</span> <span class=\"n\">semimodule</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">tensor_algebra</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">infer_instance</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">ring</span> <span class=\"o\">(</span><span class=\"n\">tensor_algebra</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">algebra.semiring_to_ring</span> <span class=\"n\">R</span>\n\n<span class=\"c1\">--local attribute [semireducible] tensor_algebra</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">add_comm_monoid.ext</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_monoid</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">add_comm_monoid.add</span> <span class=\"n\">_</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">add_comm_monoid.add</span> <span class=\"n\">_</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">tactic.unfreeze_local_instances</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"n\">change</span> <span class=\"n\">a_add</span> <span class=\"bp\">=</span> <span class=\"n\">b_add</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">congr'</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- too lazy to prove zeros coincide</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kd\">end</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">x</span> <span class=\"o\">:</span>\n  <span class=\"bp\">@</span><span class=\"n\">add_comm_monoid.add_assoc</span> <span class=\"n\">_</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">semiring.to_add_comm_monoid</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">tensor_algebra</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_ring.to_comm_semiring</span> <span class=\"n\">R</span> <span class=\"n\">_inst_2</span><span class=\"o\">)</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_group.to_add_comm_monoid</span> <span class=\"n\">M</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span>\n          <span class=\"n\">_inst_3</span><span class=\"o\">)</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">tensor_algebra.semiring</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_ring.to_comm_semiring</span> <span class=\"n\">R</span> <span class=\"n\">_inst_2</span><span class=\"o\">)</span> <span class=\"n\">M</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_group.to_add_comm_monoid</span> <span class=\"n\">M</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span>\n          <span class=\"n\">_inst_3</span><span class=\"o\">))</span>\n  <span class=\"bp\">=</span>\n  <span class=\"bp\">@</span><span class=\"n\">add_comm_monoid.add_assoc</span> <span class=\"n\">_</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_group.to_add_comm_monoid</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">tensor_algebra</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_ring.to_comm_semiring</span> <span class=\"n\">R</span> <span class=\"n\">_inst_2</span><span class=\"o\">)</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_group.to_add_comm_monoid</span> <span class=\"n\">M</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span>\n          <span class=\"n\">_inst_3</span><span class=\"o\">)</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring.to_add_comm_group</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">tensor_algebra</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_ring.to_comm_semiring</span> <span class=\"n\">R</span> <span class=\"n\">_inst_2</span><span class=\"o\">)</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_group.to_add_comm_monoid</span> <span class=\"n\">M</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span>\n             <span class=\"n\">_inst_3</span><span class=\"o\">)</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">foo</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">_inst_1</span> <span class=\"n\">_inst_2</span> <span class=\"n\">_inst_3</span><span class=\"o\">)))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">congr'</span><span class=\"o\">,</span>\n  <span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">  ⊢ semiring.to_add_comm_monoid (tensor_algebra R M) =</span>\n<span class=\"cm\">    add_comm_group.to_add_comm_monoid (tensor_algebra R M)</span>\n<span class=\"cm\">  -/</span>\n  <span class=\"n\">apply</span> <span class=\"n\">add_comm_monoid.ext</span><span class=\"o\">,</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>There's a proof which keeps everything irreducible. Is the answer not just something like \"these things are not unfolding because tensor_algebra is irreducible\" or something? I don't really understand the problem properly.</p>",
        "id": 218134621,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606517379
    },
    {
        "content": "<p>Sorry-free:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra.tensor_algebra</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">_inst_2</span> <span class=\"o\">:</span> <span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">_inst_3</span> <span class=\"o\">:</span> <span class=\"n\">semimodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">working_instance</span> <span class=\"o\">:</span> <span class=\"n\">semimodule</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">tensor_algebra</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">infer_instance</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">ring</span> <span class=\"o\">(</span><span class=\"n\">tensor_algebra</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">algebra.semiring_to_ring</span> <span class=\"n\">R</span>\n\n<span class=\"c1\">--local attribute [semireducible] tensor_algebra</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">add_comm_monoid.ext</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_monoid</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h_add</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">add_comm_monoid.add</span> <span class=\"n\">_</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">add_comm_monoid.add</span> <span class=\"n\">_</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h_zero</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">add_comm_monoid.zero</span> <span class=\"n\">_</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">add_comm_monoid.zero</span> <span class=\"n\">_</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">tactic.unfreeze_local_instances</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"n\">congr'</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">x</span> <span class=\"o\">:</span>\n  <span class=\"bp\">@</span><span class=\"n\">add_comm_monoid.add_assoc</span> <span class=\"n\">_</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">semiring.to_add_comm_monoid</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">tensor_algebra</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_ring.to_comm_semiring</span> <span class=\"n\">R</span> <span class=\"n\">_inst_2</span><span class=\"o\">)</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_group.to_add_comm_monoid</span> <span class=\"n\">M</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span>\n          <span class=\"n\">_inst_3</span><span class=\"o\">)</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">tensor_algebra.semiring</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_ring.to_comm_semiring</span> <span class=\"n\">R</span> <span class=\"n\">_inst_2</span><span class=\"o\">)</span> <span class=\"n\">M</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_group.to_add_comm_monoid</span> <span class=\"n\">M</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span>\n          <span class=\"n\">_inst_3</span><span class=\"o\">))</span>\n  <span class=\"bp\">=</span>\n  <span class=\"bp\">@</span><span class=\"n\">add_comm_monoid.add_assoc</span> <span class=\"n\">_</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_group.to_add_comm_monoid</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">tensor_algebra</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_ring.to_comm_semiring</span> <span class=\"n\">R</span> <span class=\"n\">_inst_2</span><span class=\"o\">)</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_group.to_add_comm_monoid</span> <span class=\"n\">M</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span>\n          <span class=\"n\">_inst_3</span><span class=\"o\">)</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring.to_add_comm_group</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">tensor_algebra</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_ring.to_comm_semiring</span> <span class=\"n\">R</span> <span class=\"n\">_inst_2</span><span class=\"o\">)</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_group.to_add_comm_monoid</span> <span class=\"n\">M</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span>\n             <span class=\"n\">_inst_3</span><span class=\"o\">)</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">foo</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">_inst_1</span> <span class=\"n\">_inst_2</span> <span class=\"n\">_inst_3</span><span class=\"o\">)))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">congr'</span><span class=\"o\">,</span>\n  <span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">  ⊢ semiring.to_add_comm_monoid (tensor_algebra R M) =</span>\n<span class=\"cm\">    add_comm_group.to_add_comm_monoid (tensor_algebra R M)</span>\n<span class=\"cm\">  -/</span>\n  <span class=\"n\">apply</span> <span class=\"n\">add_comm_monoid.ext</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">refl</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 218134696,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606517491
    },
    {
        "content": "<p>This was exactly the sort of problem Amelia was having.</p>",
        "id": 218134701,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606517519
    },
    {
        "content": "<p>I see -- the point is that <code>rfl</code> is failing because some part of the system has convinced itself that the types of the proofs are equal, but some other part of the system cannot convince itself of this, because of irreducibility. Is that the issue?</p>",
        "id": 218134827,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606517674
    },
    {
        "content": "<p>I thought I removed all the offending <code>irreducibles</code> from mathlib</p>",
        "id": 218135674,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606518819
    },
    {
        "content": "<p>At least, the ones relating to free algebra</p>",
        "id": 218135731,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606518887
    },
    {
        "content": "<p>oh you're right, my mathlib was on some other branch which hadn't been merged with master for a while.</p>",
        "id": 218135750,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606518927
    },
    {
        "content": "<p>I made sure to add a test to prevent someone undoing this by accident</p>",
        "id": 218135818,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606518995
    },
    {
        "content": "<p>meh. You have to add <code>local attribute [irreducible] tensor_algebra</code> to get my code running.</p>",
        "id": 218135819,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606519000
    },
    {
        "content": "<p>Wait, for your code you have to make it _not_ reducible?</p>",
        "id": 218136067,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606519390
    },
    {
        "content": "<p>Otherwise the proof finishes sooner</p>",
        "id": 218153236,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606549656
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">old_structure_cmd</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">prop</span> <span class=\"o\">:</span> <span class=\"n\">bar</span> <span class=\"bp\">=</span> <span class=\"n\">bar</span><span class=\"o\">)</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">foo'</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">foo</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">prop'</span> <span class=\"o\">:</span> <span class=\"n\">bar</span> <span class=\"bp\">=</span> <span class=\"n\">bar</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">nat.foo</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">bar</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"n\">prop</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">nat.foo'</span> <span class=\"o\">:</span> <span class=\"n\">foo'</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">prop'</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span> <span class=\"n\">nat.foo</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">foo''</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">foo</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">bar''</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">nat.foo''</span> <span class=\"o\">:</span> <span class=\"n\">foo''</span> <span class=\"n\">ℕ</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">bar''</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo''.foo_to_foo'</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">foo</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">foo''</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">foo'</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">prop'</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span> <span class=\"o\">(</span><span class=\"n\">infer_instance</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">typealias</span> <span class=\"o\">:=</span> <span class=\"n\">ℕ</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">baz</span> <span class=\"o\">:</span> <span class=\"n\">foo'</span> <span class=\"n\">typealias</span> <span class=\"o\">:=</span> <span class=\"n\">nat.foo'</span>\n<span class=\"kd\">instance</span> <span class=\"n\">typealias.foo''</span> <span class=\"o\">:</span> <span class=\"n\">foo''</span> <span class=\"n\">ℕ</span> <span class=\"n\">typealias</span> <span class=\"o\">:=</span> <span class=\"n\">nat.foo''</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">baz'</span> <span class=\"o\">:</span> <span class=\"n\">foo'</span> <span class=\"n\">typealias</span> <span class=\"o\">:=</span> <span class=\"n\">foo''.foo_to_foo'</span> <span class=\"n\">ℕ</span>\n\n<span class=\"kn\">local</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">irreducible</span><span class=\"o\">]</span> <span class=\"n\">typealias</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">foo'.bar</span> <span class=\"n\">_</span> <span class=\"n\">baz</span> <span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">foo'.bar</span> <span class=\"n\">_</span> <span class=\"n\">baz'</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">run_cmd tactic.add_decl</span>\n<span class=\"cm\">  (declaration.thm `X []  `(@foo'.prop _ baz = @foo'.prop _ baz')</span>\n<span class=\"cm\">  (pure `(eq.refl (@foo'.prop _ baz))))</span>\n\n<span class=\"cm\">#print X</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"c1\">-- works if `typealias` is not made irreducible</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">foo'.prop</span> <span class=\"n\">_</span> <span class=\"n\">baz</span> <span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">foo'.prop</span> <span class=\"n\">_</span> <span class=\"n\">baz'</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>\n<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span></p>",
        "id": 218186572,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606606940
    },
    {
        "content": "<p>I feel like it's important to note that <code>proof_irrel _ _</code> works in place of <code>rfl</code></p>",
        "id": 218186579,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1606606978
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">they_are_equal</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">h1</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">h1</span> <span class=\"bp\">=</span> <span class=\"n\">h2</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">foo'.prop</span> <span class=\"n\">_</span> <span class=\"n\">baz</span> <span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">foo'.prop</span> <span class=\"n\">_</span> <span class=\"n\">baz'</span> <span class=\"o\">:=</span> <span class=\"n\">they_are_equal</span> <span class=\"c1\">-- works</span>\n</code></pre></div>",
        "id": 218186587,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606607008
    },
    {
        "content": "<p>The <code>run_cmd</code> (which Chris wrote) also works</p>",
        "id": 218186593,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606607029
    },
    {
        "content": "<p>(ps thanks to Shing, Chris, Kenny and Bhavik for being foolhardy enough to watch the discord livestream and between them helping a lot)</p>",
        "id": 218186657,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606607110
    },
    {
        "content": "<p>Title needs to be changed to <code>foo''.foo_to_foo' breaks foo' typeclass lookup</code></p>",
        "id": 218186842,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606607408
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">old_structure_cmd</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">prop</span> <span class=\"o\">:</span> <span class=\"n\">bar</span> <span class=\"bp\">=</span> <span class=\"n\">bar</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo_to_foo</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">foo</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"bp\">..</span> <span class=\"o\">(</span><span class=\"n\">infer_instance</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">nat.foo</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">bar</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"n\">prop</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">typealias</span> <span class=\"o\">:=</span> <span class=\"n\">ℕ</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">baz</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">typealias</span> <span class=\"o\">:=</span> <span class=\"n\">nat.foo</span>\n<span class=\"kd\">instance</span> <span class=\"n\">baz'</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">typealias</span> <span class=\"o\">:=</span> <span class=\"n\">foo_to_foo</span> <span class=\"n\">typealias</span>\n\n<span class=\"kn\">local</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">irreducible</span><span class=\"o\">]</span> <span class=\"n\">typealias</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">foo.bar</span> <span class=\"n\">_</span> <span class=\"n\">baz</span> <span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">foo.bar</span> <span class=\"n\">_</span> <span class=\"n\">baz'</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">foo.prop</span> <span class=\"n\">_</span> <span class=\"n\">baz</span> <span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">foo.prop</span> <span class=\"n\">_</span> <span class=\"n\">baz'</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 218215493,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1606660875
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span></p>",
        "id": 218215494,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1606660882
    },
    {
        "content": "<p>Nice!</p>",
        "id": 218215620,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606661085
    },
    {
        "content": "<p>who do we ping for this? <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span></p>",
        "id": 218227960,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1606680255
    },
    {
        "content": "<p>Maybe it's just worth restating what's going on: over the weekend we minimised (in the sense of removing mathlib imports) the issue discovered at the top of this thread. The last line of the code above is a proof that two proofs of a proposition are equal, but <code>rfl</code> fails. If Lean didn't think that it was two proofs of the same proposition, then the term <code>@foo.prop _ baz = @foo.prop _ baz'</code> itself wouldn't typecheck. The term does typecheck, but the proof fails anyway. The example can be proved with <code>they_are_equal</code>, or with the <code>tactic.add_decl</code> trick above.</p>",
        "id": 218232490,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606686683
    },
    {
        "content": "<p><code>they_are_equal</code> is in the library under the name <a href=\"https://leanprover-community.github.io/mathlib_docs/find/proof_irrel\">docs#proof_irrel</a>.</p>",
        "id": 218235279,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1606691282
    },
    {
        "content": "<p>Oh, Bhavik already mentioned that.</p>",
        "id": 218235329,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1606691327
    },
    {
        "content": "<p>Oh! I hadn't appreciated that this was what he was saying!</p>",
        "id": 218236443,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606693156
    },
    {
        "content": "<p>Now that we have the reproducer, presumably we can attempt to change the line of C++ code linked up-thread and see if it fixes it</p>",
        "id": 218236698,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606693495
    }
]