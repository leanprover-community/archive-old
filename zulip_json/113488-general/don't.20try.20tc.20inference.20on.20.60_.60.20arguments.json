[
    {
        "content": "<p>Sometimes Lean isn't being smart when you tell it <code>refine my_lemma x</code>, and so you say <code>refine @my_lemma _ _ _ _ x</code>. But then the 2nd <code>_</code> is some typeclass argument that Lean can't find, and so the <code>refine</code> fails. Instead, I would like it to turn that argument into a new goal.<br>\nOf course <code>_</code> is powerful the way it is, so we shouldn't change that.</p>\n<p>Can we make <code>…</code> mean roughly the same to Lean, except that it will just blindly turn that argument into a goal, without trying to infer it by elaboration or typeclass search?</p>",
        "id": 214745294,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603824145
    },
    {
        "content": "<p><span aria-label=\"four leaf clover\" class=\"emoji emoji-1f340\" role=\"img\" title=\"four leaf clover\">:four_leaf_clover:</span></p>",
        "id": 214745412,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603824201
    },
    {
        "content": "<p>Does <code>notation `…` := id _</code> work?</p>",
        "id": 214745432,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1603824215
    },
    {
        "content": "<p>That's <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>'s standard trick.</p>",
        "id": 214745453,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1603824226
    },
    {
        "content": "<p>I haven't tried yet.</p>",
        "id": 214745519,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603824248
    },
    {
        "content": "<p>I wish it was easier to experiment with Lean 4, since I think this exact feature already exists.</p>",
        "id": 214745567,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603824274
    },
    {
        "content": "<p>Well, not using the name <code>…</code></p>",
        "id": 214745612,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603824298
    },
    {
        "content": "<p>I think it's <code>refine @my_lemma ?inst_1 ?inst_2</code> etc.</p>",
        "id": 214745669,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1603824318
    },
    {
        "content": "<p>Errm, I mean <code>refine @myLemma ?inst1 ?inst2</code> of course.</p>",
        "id": 214745706,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1603824335
    },
    {
        "content": "<p>Yes, something with question marks</p>",
        "id": 214745732,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603824346
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/blob/8e16589f603f3425119df8533fda9204ff6b0599/tests/lean/namedHoles.lean\">https://github.com/leanprover/lean4/blob/8e16589f603f3425119df8533fda9204ff6b0599/tests/lean/namedHoles.lean</a></p>",
        "id": 214745870,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1603824384
    },
    {
        "content": "<p>I think maybe also a <code>?</code> without a name is a fresh hole. I didn't realize there were named holes, that seems neat though I'm not sure offhand where it would come up...</p>",
        "id": 214746049,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603824473
    },
    {
        "content": "<p>Unnamed holes are <code>?_</code> IIRC.</p>",
        "id": 214746287,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1603824549
    }
]