[
    {
        "content": "<p>Oops... oversimplified my example.</p>",
        "id": 134419058,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1537585421
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>def f (n : ℕ) : Type := { l : list ℕ // l.length = n }\n\ndef foo : Σ n ≥ 5, f n := sorry\ndef foo&#39; : Σ n : ℕ, Σ H : n ≥ 5, f n := sorry\n</pre></div>",
        "id": 134419121,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1537585560
    },
    {
        "content": "<p>both <code>foo</code> and <code>foo'</code>error with </p>\n<div class=\"codehilite\"><pre><span></span>type mismatch at application\n  Σ (H : n ≥ 5), f n\nterm\n  λ (H : n ≥ 5), f n\nhas type\n  n ≥ 5 → Type : Type 1\nbut is expected to have type\n  ?m_1 → Type : Type (max ? 1)\n</pre></div>",
        "id": 134419163,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1537585580
    },
    {
        "content": "<p>what am I doing wrong?</p>",
        "id": 134419164,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1537585583
    },
    {
        "content": "<p>Can you just not index sigma types by Props?!</p>",
        "id": 134419170,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1537585615
    },
    {
        "content": "<p>ugh.</p>",
        "id": 134419171,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1537585619
    },
    {
        "content": "<p>use <code>Σ'</code> or <code>subtype</code></p>",
        "id": 134419236,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537585791
    },
    {
        "content": "<p>Thanks.</p>",
        "id": 134419775,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1537586970
    },
    {
        "content": "<p>Does <code>subtype</code> do anything that <code>Σ'</code> doesn't do?</p>",
        "id": 134420363,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1537588312
    },
    {
        "content": "<p>no, except have easier universe constraints</p>",
        "id": 134420404,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537588332
    },
    {
        "content": "<p>Could it benefit from a <code>unit</code> / <code>punit</code> approach?</p>",
        "id": 134420439,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1537588442
    },
    {
        "content": "<p>Huh? It is a <code>unit</code>/<code>punit</code> approach. I mean it's even called <code>psigma</code></p>",
        "id": 134421471,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537590683
    },
    {
        "content": "<p>Right but what happened with <code>unit</code> is that it became a synonym for <code>punit.{0}</code></p>",
        "id": 134421513,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1537590743
    }
]