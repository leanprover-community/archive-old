[
    {
        "content": "<p>I have the impression to meet more and more surprising behavior of Lean lately, and also that I am not the only one on this chat. Maybe because we are pushing Lean further than the way it has really been used before, and this is bound to uncover some suprises.</p>\n<p>Anyway, I just wanted to share with you the following funny fact (no MWE, this is deep inside a non-finished theory). I am not asking for help or whatever, as I have a workaround.</p>\n<div class=\"codehilite\"><pre><span></span>      <span class=\"n\">apply</span> <span class=\"n\">mdifferentiable_at_atlas_to_fun</span> <span class=\"n\">e&#39;_atlas</span><span class=\"o\">,</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">local_homeomorph</span><span class=\"bp\">.</span><span class=\"n\">trans_source</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">hx</span><span class=\"bp\">.</span><span class=\"mi\">2</span>\n</pre></div>\n\n\n<p>works fine. But if I exchange the first two lines (which should commute because they don't touch the same objects),</p>\n<div class=\"codehilite\"><pre><span></span>      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">local_homeomorph</span><span class=\"bp\">.</span><span class=\"n\">trans_source</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n      <span class=\"n\">apply</span> <span class=\"n\">mdifferentiable_at_atlas_to_fun</span> <span class=\"n\">e&#39;_atlas</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">hx</span><span class=\"bp\">.</span><span class=\"mi\">2</span>\n</pre></div>\n\n\n<p>fails with a complain on <code>apply</code> saying</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">invalid</span> <span class=\"n\">apply</span> <span class=\"n\">tactic</span><span class=\"o\">,</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">unify</span>\n  <span class=\"n\">mdifferentiable_at</span> <span class=\"n\">k</span> <span class=\"o\">((</span><span class=\"n\">e&#39;</span><span class=\"bp\">.</span><span class=\"n\">to_local_equiv</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_fun</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">to_local_equiv</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">inv_fun</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"k\">with</span>\n  <span class=\"n\">mdifferentiable_at</span> <span class=\"err\">?</span><span class=\"n\">m_10</span> <span class=\"o\">((</span><span class=\"n\">e&#39;</span><span class=\"bp\">.</span><span class=\"n\">to_local_equiv</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_fun</span><span class=\"o\">)</span> <span class=\"err\">?</span><span class=\"n\">m_17</span>\n</pre></div>",
        "id": 168514210,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1560956319
    },
    {
        "content": "<p>We might need to formalize the implementation of Lean and its tactics...</p>",
        "id": 168514470,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1560956513
    },
    {
        "content": "<p>If I move the offending <code>simp</code> two lines before, it's OK :)</p>",
        "id": 168514551,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1560956549
    },
    {
        "content": "<p>And I was just hit again by a <code>simp</code> bug by which it produces an incorrect proof, for which a MWE had been crafted by Rob Lewis as follows.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">foo_rec</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">k</span><span class=\"o\">]</span>  <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"n\">n</span> <span class=\"n\">rec</span><span class=\"o\">,</span> <span class=\"n\">true</span><span class=\"o\">)</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">stupid</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">foo_rec</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"bp\">↔</span> <span class=\"n\">foo_rec</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">IH</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">nat_zero_eq_zero</span><span class=\"o\">],</span>\n  <span class=\"n\">admit</span><span class=\"o\">,</span>\n  <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">result</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">trace</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>I know I will also be able to work around it, by replacing some <code>simp</code> by a <code>rw</code> somewhere in the proof. Just have to find it, wish me luch :)</p>",
        "id": 168515506,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1560957010
    },
    {
        "content": "<p>This is beginning to become very amusing: the offending <code>simp</code> creating an incorrect proof (in a 100 line proof) is right at the place where I mentioned the first bug (where two orthogonal lines could not be swapped). So these are certainly two instances of the same problem.</p>",
        "id": 168516454,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1560957651
    }
]