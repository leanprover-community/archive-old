[
    {
        "content": "<p>Two related questions:<br>\n(1) Does the following lemma exist somewhere?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">property_coe</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">subtype</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">2</span>\n</code></pre></div>\n\n\n<p>It is important that this states <code>p x</code>, and not <code>p x.1</code>, so <code>subtype.property</code> doesn't work (I want to rewrite with this, and have <code>↑x</code> instead of <code>x.1</code> in my goal).</p>\n<p>(2) Can I tell <code>library_search</code> to not work up to definitional equality (of semireducible definitions)? I am often trying to look for rewrite lemmas which are proven by <code>rfl</code> and then <code>library_search</code> is \"too smart\" and just tells me I can prove it by <code>rfl</code> or <code>iff_refl _</code>.</p>",
        "id": 197627924,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1589496399
    },
    {
        "content": "<p>How could you rewrite with it though?</p>",
        "id": 197628407,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589496762
    },
    {
        "content": "<p>(2) also came up recently.</p>",
        "id": 197628439,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589496785
    },
    {
        "content": "<p><a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/List.20lemmas/near/197053059\">https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/List.20lemmas/near/197053059</a></p>",
        "id": 197628499,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589496816
    },
    {
        "content": "<p>For (1) something would need to beta-reduce <code>p x</code>, right? Does <code>rw</code> do that?</p>",
        "id": 197628633,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589496886
    },
    {
        "content": "<p>(1) If <code>p x = x ∈ s</code>, then we have <code>subtype.mem</code>.</p>",
        "id": 197628870,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589497043
    },
    {
        "content": "<p>If not, PR</p>",
        "id": 197628890,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589497055
    },
    {
        "content": "<p>There's also</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">val_prop&#39;</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"bp\">//</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">S</span><span class=\"o\">})</span> <span class=\"o\">:</span> <span class=\"err\">↑</span><span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">property</span>\n</code></pre></div>\n\n\n<p>in <code>data.subtype</code>; are these duplicates?</p>",
        "id": 197629277,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589497319
    },
    {
        "content": "<p>In my example I had something like this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">universe</span> <span class=\"kn\">variables</span> <span class=\"n\">v</span> <span class=\"n\">w</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">π</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span><span class=\"err\">ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">π</span><span class=\"bp\">.</span><span class=\"n\">ker</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">π</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">linear_map</span><span class=\"bp\">.</span><span class=\"n\">mem_ker</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"c1\">-- error: did not find ⇑π x.val</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 197629339,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1589497341
    },
    {
        "content": "<p>I realized I could have redefined something earlier to get the more convenient hypothesis <code>x ∈ π.ker</code>.</p>",
        "id": 197629422,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1589497400
    },
    {
        "content": "<p>Oh I see, there is something between <code>rw</code> and the property.</p>",
        "id": 197629432,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589497403
    },
    {
        "content": "<p>And yes, <code>rw</code> beta-reduces:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">prop</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">subtype</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">2</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">subtype</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">z</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">prop</span><span class=\"o\">]</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>(using <code>x.2</code> doesn't work)</p>",
        "id": 197629594,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1589497520
    },
    {
        "content": "<p>I guess otherwise nothing would ever have the right form.</p>",
        "id": 197629714,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589497587
    },
    {
        "content": "<p>I think that I wrote <code>subtype.mem</code> because I'd want it to have this name.</p>",
        "id": 197629896,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589497744
    },
    {
        "content": "<p>Sorry.</p>",
        "id": 197629902,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589497748
    },
    {
        "content": "<p>UPD: no, it is defined in <code>set/basic</code></p>",
        "id": 197629933,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589497774
    },
    {
        "content": "<p>Well that might be, but it really exists!</p>",
        "id": 197629944,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589497780
    },
    {
        "content": "<p>I think that it should be moved to <code>data.subtype</code>, <code>val_prop'</code> should be removed, and <code>coe_prop</code> should be added.</p>",
        "id": 197630066,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589497868
    },
    {
        "content": "<p>Who will volunteer to do this?</p>",
        "id": 197631417,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589498945
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span>  :</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">universe</span> <span class=\"kn\">variables</span> <span class=\"n\">v</span> <span class=\"n\">w</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">π</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span><span class=\"err\">ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">π</span><span class=\"bp\">.</span><span class=\"n\">ker</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">π</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">erw</span> <span class=\"o\">[</span><span class=\"n\">linear_map</span><span class=\"bp\">.</span><span class=\"n\">mem_ker</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"c1\">--  i think erw work in some case</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 197633261,
        "sender_full_name": "orlando",
        "timestamp": 1589500435
    },
    {
        "content": "<p>I tend to forget that <code>erewrite</code> is a thing. That is a good to remember as back-up plan.</p>",
        "id": 197716367,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1589559921
    },
    {
        "content": "<p>someday I will learn what it does</p>",
        "id": 197716407,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589559943
    }
]