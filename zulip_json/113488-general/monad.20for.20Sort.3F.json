[
    {
        "content": "<p>the <code>init.category</code> library has <code>Type u</code> instead of <code>Sort u</code> everywhere: I did some experiments and literally just changed <code>Type</code> to <code>Sort</code> and no problems were found:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">Copyright (c) Luke Nelson and Jared Roesch. All rights reserved.</span>\n<span class=\"cm\">Released under Apache 2.0 license as described in the file LICENSE.</span>\n<span class=\"cm\">Authors: Luke Nelson, Jared Roesch, Sebastian Ullrich, Leonardo de Moura</span>\n<span class=\"cm\">-/</span>\n<span class=\"n\">prelude</span>\n<span class=\"kn\">import</span> <span class=\"n\">init</span><span class=\"bp\">.</span><span class=\"n\">core</span> <span class=\"n\">init</span><span class=\"bp\">.</span><span class=\"n\">function</span> <span class=\"n\">init</span><span class=\"bp\">.</span><span class=\"n\">meta</span><span class=\"bp\">.</span><span class=\"n\">name</span>\n<span class=\"kn\">open</span> <span class=\"n\">function</span>\n<span class=\"n\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"n\">class</span> <span class=\"n\">functor</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"n\">Sort</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">u</span><span class=\"o\">},</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">map_const</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">u</span><span class=\"o\">},</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">map</span> <span class=\"err\">∘</span> <span class=\"n\">const</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n\n<span class=\"kn\">infixr</span> <span class=\"bp\">`</span> <span class=\"bp\">&lt;</span><span class=\"err\">$</span><span class=\"bp\">&gt;</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">100</span> <span class=\"o\">:=</span> <span class=\"n\">functor</span><span class=\"bp\">.</span><span class=\"n\">map</span>\n<span class=\"kn\">infixr</span> <span class=\"bp\">`</span> <span class=\"bp\">&lt;</span><span class=\"err\">$</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">100</span>  <span class=\"o\">:=</span> <span class=\"n\">functor</span><span class=\"bp\">.</span><span class=\"n\">map_const</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"kn\">reducible</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">functor</span><span class=\"bp\">.</span><span class=\"n\">map_const_rev</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"n\">Sort</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">functor</span> <span class=\"n\">f</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span><span class=\"err\">$</span> <span class=\"n\">a</span>\n<span class=\"kn\">infixr</span> <span class=\"bp\">`</span> <span class=\"err\">$</span><span class=\"bp\">&gt;</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">100</span>  <span class=\"o\">:=</span> <span class=\"n\">functor</span><span class=\"bp\">.</span><span class=\"n\">map_const_rev</span>\n\n<span class=\"n\">class</span> <span class=\"n\">has_pure</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"n\">Sort</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">pure</span> <span class=\"o\">{}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kn\">export</span> <span class=\"n\">has_pure</span> <span class=\"o\">(</span><span class=\"n\">pure</span><span class=\"o\">)</span>\n\n<span class=\"n\">class</span> <span class=\"n\">has_seq</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"n\">Sort</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">seq</span>  <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">u</span><span class=\"o\">},</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n\n<span class=\"kn\">infixl</span> <span class=\"bp\">`</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">60</span> <span class=\"o\">:=</span> <span class=\"n\">has_seq</span><span class=\"bp\">.</span><span class=\"n\">seq</span>\n\n<span class=\"n\">class</span> <span class=\"n\">has_seq_left</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"n\">Sort</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">seq_left</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">u</span><span class=\"o\">},</span> <span class=\"n\">f</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kn\">infixl</span> <span class=\"bp\">`</span> <span class=\"bp\">&lt;*</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">60</span>  <span class=\"o\">:=</span> <span class=\"n\">has_seq_left</span><span class=\"bp\">.</span><span class=\"n\">seq_left</span>\n\n<span class=\"n\">class</span> <span class=\"n\">has_seq_right</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"n\">Sort</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">seq_right</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">u</span><span class=\"o\">},</span> <span class=\"n\">f</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n\n<span class=\"kn\">infixl</span> <span class=\"bp\">`</span> <span class=\"bp\">*&gt;</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">60</span>  <span class=\"o\">:=</span> <span class=\"n\">has_seq_right</span><span class=\"bp\">.</span><span class=\"n\">seq_right</span>\n\n<span class=\"n\">class</span> <span class=\"n\">applicative</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"n\">Sort</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"n\">functor</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">has_pure</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">has_seq</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">has_seq_left</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">has_seq_right</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">map</span>       <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">pure</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">seq_left</span>  <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">const</span> <span class=\"n\">β</span> <span class=\"bp\">&lt;</span><span class=\"err\">$</span><span class=\"bp\">&gt;</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">seq_right</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">const</span> <span class=\"n\">α</span> <span class=\"n\">id</span> <span class=\"bp\">&lt;</span><span class=\"err\">$</span><span class=\"bp\">&gt;</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n\n<span class=\"n\">class</span> <span class=\"n\">has_bind</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"n\">Sort</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">bind</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">u</span><span class=\"o\">},</span> <span class=\"n\">m</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n\n<span class=\"kn\">export</span> <span class=\"n\">has_bind</span> <span class=\"o\">(</span><span class=\"n\">bind</span><span class=\"o\">)</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"kn\">inline</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">has_bind</span><span class=\"bp\">.</span><span class=\"n\">and_then</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"n\">Sort</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_bind</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span>\n\n<span class=\"kn\">infixl</span> <span class=\"bp\">`</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">55</span> <span class=\"o\">:=</span> <span class=\"n\">bind</span>\n<span class=\"kn\">infixl</span> <span class=\"bp\">`</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">55</span>  <span class=\"o\">:=</span> <span class=\"n\">has_bind</span><span class=\"bp\">.</span><span class=\"n\">and_then</span>\n\n<span class=\"n\">class</span> <span class=\"n\">monad</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"n\">Sort</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"n\">applicative</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">has_bind</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">pure</span> <span class=\"err\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">seq</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"o\">(</span><span class=\"bp\">&lt;</span><span class=\"err\">$</span><span class=\"bp\">&gt;</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"kn\">reducible</span><span class=\"o\">,</span> <span class=\"kn\">inline</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">return</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"n\">Sort</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"n\">pure</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> Identical to has_bind.and_then, but it is not inlined. -/</span>\n<span class=\"n\">def</span> <span class=\"n\">has_bind</span><span class=\"bp\">.</span><span class=\"n\">seq</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"n\">Sort</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_bind</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span>\n</pre></div>",
        "id": 158835464,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550531233
    },
    {
        "content": "<p>So why was everything defined only over <code>Type u</code>?</p>",
        "id": 158835478,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550531248
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> Maybe you'd be able to enlighten us. My guess is that <code>Sort*</code> can make things more complicated when eliminating into <code>Type*</code>. It might have been necessary at some point and the decision was never reverted.</p>",
        "id": 158836297,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1550532171
    },
    {
        "content": "<p>I think most types in <code>Sort*</code> started in <code>Type*</code> until someone was able to come up with an example usage in <code>Prop</code></p>",
        "id": 158836556,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1550532500
    },
    {
        "content": "<p>Also this file may be older than <code>Sort</code>. Not sure.</p>",
        "id": 158836584,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1550532563
    },
    {
        "content": "<p>what about <code>nonempty</code> being a monad?</p>",
        "id": 158836601,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550532594
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">monad</span> <span class=\"n\">nonempty</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">pure</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">nonempty</span><span class=\"bp\">.</span><span class=\"n\">intro</span><span class=\"o\">,</span>\n  <span class=\"n\">bind</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"bp\">⟩</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">}</span>\n</pre></div>",
        "id": 158836707,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550532714
    },
    {
        "content": "<p>it works under my code</p>",
        "id": 158836719,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550532723
    },
    {
        "content": "<p>yay, another PR to core</p>",
        "id": 158836754,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550532734
    }
]