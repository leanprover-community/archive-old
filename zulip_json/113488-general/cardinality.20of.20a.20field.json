[
    {
        "content": "<p>I've now finished the result in full generality! (I'm moving this away from the thread that I hijacked, sorry Jireh)</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>Field is p^k or any possible cardinality</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">field_theory.finite.galois_field</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.is_prime_pow</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.equiv.transfer_instance</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.mv_polynomial.cardinal</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.rat.denumerable</span>\n\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"bp\">`‖`</span> <span class=\"n\">x</span> <span class=\"bp\">`‖`</span> <span class=\"o\">:=</span> <span class=\"n\">fintype.card</span> <span class=\"n\">x</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">cardinal</span> <span class=\"n\">non_zero_divisors</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">nat.prime.is_prime_pow</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p.prime</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_prime_pow</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">is_prime_pow_nat_iff</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"o\">⟨</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"n\">one_pos</span><span class=\"o\">,</span> <span class=\"n\">pow_one</span> <span class=\"n\">p</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"o\">(</span><span class=\"n\">field</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">is_prime_pow</span> <span class=\"o\">(</span><span class=\"n\">fintype.card</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"n\">swap</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintros</span> <span class=\"o\">⟨</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"n\">hn</span><span class=\"o\">,</span> <span class=\"n\">hα</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">haveI</span> <span class=\"o\">:=</span> <span class=\"n\">fact.mk</span> <span class=\"o\">(</span><span class=\"n\">nat.prime_iff.mpr</span> <span class=\"n\">hp</span><span class=\"o\">),</span>\n    <span class=\"n\">exact</span> <span class=\"o\">⟨(</span><span class=\"n\">fintype.equiv_of_card_eq</span> <span class=\"o\">((</span><span class=\"n\">galois_field.card</span> <span class=\"n\">p</span> <span class=\"n\">n</span> <span class=\"n\">hn.ne'</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">hα</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">symm.field</span><span class=\"o\">⟩</span> <span class=\"o\">},</span>\n  <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">h</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">casesI</span> <span class=\"n\">char_p.exists</span> <span class=\"n\">α</span> <span class=\"k\">with</span> <span class=\"n\">p</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">haveI</span> <span class=\"n\">hp</span> <span class=\"o\">:=</span> <span class=\"n\">fact.mk</span> <span class=\"o\">(</span><span class=\"n\">char_p.char_is_prime</span> <span class=\"n\">α</span> <span class=\"n\">p</span><span class=\"o\">),</span>\n  <span class=\"k\">let</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">is_noetherian.finset_basis</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">module.card_fintype</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">zmod.card</span><span class=\"o\">,</span> <span class=\"n\">is_prime_pow_pow_iff</span><span class=\"o\">],</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hp.1.is_prime_pow</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">finite_dimensional.finrank_eq_card_basis</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">finite_dimensional.finrank_pos.ne'</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">monomial_ext_iff</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→₀</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">mv_polynomial.monomial</span> <span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">mv_polynomial.monomial</span> <span class=\"n\">b</span> <span class=\"n\">d</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">d</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span> <span class=\"n\">refl</span><span class=\"o\">}⟩,</span>\n  <span class=\"n\">replace</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">mv_polynomial.ext_iff</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">h</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">classical</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mv_polynomial.coeff_monomial</span><span class=\"o\">,</span> <span class=\"n\">eq_self_iff_true</span><span class=\"o\">,</span> <span class=\"n\">if_true</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">split_ifs</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">tauto</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">infinite</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"o\">(</span><span class=\"n\">field</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">letI</span> <span class=\"n\">K</span> <span class=\"o\">:=</span> <span class=\"n\">fraction_ring</span> <span class=\"o\">(</span><span class=\"n\">mv_polynomial</span> <span class=\"n\">α</span> <span class=\"n\">ℚ</span><span class=\"o\">),</span>\n  <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"bp\">#</span><span class=\"n\">K</span> <span class=\"bp\">≤</span> <span class=\"bp\">#</span><span class=\"n\">α</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"k\">let</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">algebra_map</span> <span class=\"n\">_</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"n\">mv_polynomial.monomial</span> <span class=\"o\">(</span><span class=\"n\">finsupp.single</span> <span class=\"n\">a</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)),</span>\n    <span class=\"k\">have</span> <span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">function.injective</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n      <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">f</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n      <span class=\"n\">replace</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">is_fraction_ring.injective</span> <span class=\"n\">_</span> <span class=\"n\">K</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">monomial_ext_iff</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">one_ne_zero</span> <span class=\"n\">ℚ</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">finsupp.single_left_injective</span> <span class=\"n\">one_ne_zero</span> <span class=\"n\">h.1</span> <span class=\"o\">},</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">e</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">cardinal.eq.mp</span> <span class=\"o\">(</span><span class=\"n\">le_antisymm</span> <span class=\"n\">this</span> <span class=\"bp\">$</span> <span class=\"n\">cardinal.mk_le_of_injective</span> <span class=\"n\">hf</span><span class=\"o\">),</span>\n    <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">e.symm.field</span><span class=\"o\">⟩</span> <span class=\"o\">},</span>\n  <span class=\"n\">classical</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">mv_polynomial</span> <span class=\"n\">α</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"n\">mv_polynomial</span> <span class=\"n\">α</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">K</span> <span class=\"o\">:=</span>\n    <span class=\"bp\">λ</span> <span class=\"n\">aa</span><span class=\"o\">,</span> <span class=\"n\">is_localization.mk'</span> <span class=\"n\">_</span> <span class=\"n\">aa.1</span> <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">aa.2</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">mv_polynomial</span> <span class=\"n\">α</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span><span class=\"bp\">⁰</span> <span class=\"k\">then</span> <span class=\"o\">⟨</span><span class=\"n\">aa.2</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"k\">else</span> <span class=\"mi\">1</span><span class=\"o\">),</span>\n  <span class=\"k\">have</span> <span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">function.surjective</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">is_localization.mk'_surjective</span> <span class=\"o\">(</span><span class=\"n\">mv_polynomial</span> <span class=\"n\">α</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span><span class=\"bp\">⁰</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">f</span><span class=\"o\">],</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">y.2</span><span class=\"o\">,</span> <span class=\"c1\">-- can I avoid this?</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">subtype.val_eq_coe</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">dif_pos</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">set_like.eta</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">cardinal.mk_le_of_surjective</span> <span class=\"n\">hf</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">cardinal.mul_def</span><span class=\"o\">,</span> <span class=\"n\">cardinal.mul_eq_self</span> <span class=\"bp\">$</span> <span class=\"n\">cardinal.omega_le_mk</span> <span class=\"bp\">$</span> <span class=\"n\">mv_polynomial</span> <span class=\"n\">α</span> <span class=\"n\">ℚ</span><span class=\"o\">],</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">mv_polynomial.cardinal_mk_le_max</span> <span class=\"n\">α</span> <span class=\"n\">ℚ</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">cardinal.mk_rat</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"o\">(</span><span class=\"n\">cardinal.omega_le_mk</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">eq_or_lt</span> <span class=\"k\">with</span> <span class=\"n\">h</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">this</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">max_eq_right_of_lt</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">max_eq_left_of_lt</span> <span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span> <span class=\"o\">}</span>\n  <span class=\"c1\">--why is there no `max_eq_right_of_le?!`</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n</div></div>\n<p>this needs cleaning up, but I have to run - I'm happy for anyone to fix things up! I left a couple comments about my frustrations...</p>\n<p>cc: <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>  <span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span>  who seemed interested</p>",
        "id": 272419477,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1645200073
    },
    {
        "content": "<p>Nice, the last 3 lines can just be <code>simpa</code> I think</p>",
        "id": 272421796,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1645201083
    },
    {
        "content": "<p>And <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finsupp.single_eq_single_iff\">docs#finsupp.single_eq_single_iff</a> exists so you can do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">monomial_ext_iff</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→₀</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">mv_polynomial.monomial</span> <span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">mv_polynomial.monomial</span> <span class=\"n\">b</span> <span class=\"n\">d</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">d</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">convert</span> <span class=\"n\">finsupp.single_eq_single_iff</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hc</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 272422153,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1645201252
    },
    {
        "content": "<p>Also, i just realised the general result can just be <code>is_prime_power #a</code> -  as all infinite cardinals are prime :) (probably too cute though)</p>",
        "id": 272425827,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1645203080
    },
    {
        "content": "<p>wait, if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>κ</mi></mrow><annotation encoding=\"application/x-tex\">\\kappa</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">κ</span></span></span></span> is an infinite cardinal then <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>κ</mi><mo>=</mo><mi>κ</mi><mo>×</mo><mi>κ</mi></mrow><annotation encoding=\"application/x-tex\">\\kappa=\\kappa\\times\\kappa</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">κ</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">κ</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">κ</span></span></span></span> right?</p>",
        "id": 272438582,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1645208784
    },
    {
        "content": "<p>the result (modulo cute cardinal stuff) is finally pr'd! <a href=\"https://github.com/leanprover-community/mathlib/pull/12285\">#12285</a> (I need <a href=\"https://github.com/leanprover-community/mathlib/pull/12197\">#12197</a> for the cute cardinal stuff)</p>",
        "id": 273215982,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1645787675
    },
    {
        "content": "<p>(and we have cute cardinal stuff on <a href=\"https://github.com/leanprover-community/mathlib/pull/12442\">#12442</a>)</p>",
        "id": 274062504,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1646354218
    }
]