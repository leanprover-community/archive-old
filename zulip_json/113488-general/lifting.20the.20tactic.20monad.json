[
    {
        "content": "<p>Several times I have wanted to use a lift of the tactic monad, in order to carry along some additional state. (As a simple example, I would like to carry along a ℕ that limits how much more computation is allowed, that several different subtactics need to respect.)</p>",
        "id": 132682369,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1535097003
    },
    {
        "content": "<p>I've successfully written some infrastructure to do this (essentially, some typeclasses and coercions that let you move up and down from standard <code>tactic α</code> to <code>stateful_tactic β α</code>), but it was gross and hackish.</p>",
        "id": 132682450,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1535097125
    },
    {
        "content": "<p>Is this something that others would find useful? If so, could we agree on a basic design that everyone would be happy with?</p>",
        "id": 132682468,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1535097160
    },
    {
        "content": "<p>I think <a href=\"https://github.com/EdAyers/lean-humanproof/blob/a3df90b4ccd1356283e47cf56b986701944f4100/src/robot.lean#L38\" target=\"_blank\" title=\"https://github.com/EdAyers/lean-humanproof/blob/a3df90b4ccd1356283e47cf56b986701944f4100/src/robot.lean#L38\">https://github.com/EdAyers/lean-humanproof/blob/a3df90b4ccd1356283e47cf56b986701944f4100/src/robot.lean#L38</a> might be an example of how to do that...</p>",
        "id": 132682484,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1535097189
    },
    {
        "content": "<p>So you need to use <code>state_t</code>...</p>",
        "id": 132682490,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1535097226
    },
    {
        "content": "<p>Yes --- that's exactly another example of what I have in mind.</p>",
        "id": 132682628,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1535097366
    },
    {
        "content": "<p>The problem is now writing metatactics that are \"monad polymorphic\".</p>",
        "id": 132682641,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1535097387
    },
    {
        "content": "<p>We need a typeclass that you can decorate your lift of <code>tactic</code> (e.g. <span class=\"user-mention\" data-user-id=\"121918\">@Edward Ayers</span>'s <code>robot</code>) with, that says that it really is a lift of <code>tactic</code>.</p>",
        "id": 132682671,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1535097449
    },
    {
        "content": "<p>Ah, there is more in <code>state_t</code> than I'd seen before.</p>",
        "id": 132682966,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1535097810
    },
    {
        "content": "<p>I think I'm still not understanding how I'm meant to use <code>state_t</code>. I want to be able to write something like</p>\n<div class=\"codehilite\"><pre><span></span>variables {m : Type → Type → Type} [stateful_tactic m]\n\nmeta def my_meta_tactic {α β} (f : α → β) (t : m σ α) : m σ β :=\ndo\n  get_state &gt;&gt;= trace, -- prints the current state, a term of type σ\n  r ← t,\n  trace r,             -- prints the result of t, a term of type α\n  get_state &gt;&gt;= trace, -- prints the new state, a term of type σ\n  done,\n  return (f r)\n</pre></div>\n\n\n<p>Here <code>trace</code> and <code>done</code> are meant to just be the standard ones from <code>tactic</code>, that are being automatically lifted to <code>stateful_tactic</code><br>\n(such that they just preserve the σ state).</p>",
        "id": 132684057,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1535099571
    },
    {
        "content": "<p>Clearly <code>state_t</code> isn't quite doing this: it doesn't even mention <code>tactic</code>.</p>",
        "id": 132684651,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1535100358
    },
    {
        "content": "<p>Your <code>m</code> is just <code>λ σ, state_t σ tactic</code>. I'm not sure if the coercions from <code>tactic</code> are in the library, but they're very easy to write.</p>",
        "id": 132685496,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1535101514
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">meta</span> <span class=\"kn\">structure</span> <span class=\"n\">my_state</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">my_bool</span> <span class=\"o\">:</span> <span class=\"n\">bool</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">my_nat</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"kn\">reducible</span><span class=\"o\">]</span> <span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">state_tactic</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">state_t</span> <span class=\"n\">my_state</span> <span class=\"n\">tactic</span>\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">of_tactic</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">state_tactic</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">state_t</span><span class=\"bp\">.</span><span class=\"n\">lift</span>\n<span class=\"n\">meta</span> <span class=\"kn\">instance</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">has_coe</span> <span class=\"o\">(</span><span class=\"n\">tactic</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">state_tactic</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">of_tactic</span><span class=\"bp\">⟩</span>\n<span class=\"kn\">open</span> <span class=\"n\">tactic</span>\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">my_meta_tactic</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">state_tactic</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">state_tactic</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span>\n    <span class=\"n\">state</span> <span class=\"err\">←</span> <span class=\"n\">get</span><span class=\"o\">,</span> <span class=\"c1\">--get the state</span>\n    <span class=\"n\">trace</span> <span class=\"n\">state</span><span class=\"bp\">.</span><span class=\"n\">my_nat</span><span class=\"o\">,</span>\n    <span class=\"n\">r</span> <span class=\"err\">←</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n    <span class=\"n\">put</span> <span class=\"o\">{</span><span class=\"n\">my_nat</span><span class=\"o\">:=</span> <span class=\"mi\">100</span><span class=\"o\">,</span> <span class=\"bp\">..</span><span class=\"n\">state</span><span class=\"o\">},</span> <span class=\"c1\">--set the state</span>\n    <span class=\"n\">done</span><span class=\"o\">,</span> <span class=\"c1\">-- done is a tactic but the coercion converts it to a state_tactic.</span>\n    <span class=\"n\">return</span> <span class=\"err\">$</span> <span class=\"n\">f</span> <span class=\"n\">r</span>\n</pre></div>",
        "id": 132690060,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1535108258
    },
    {
        "content": "<p>All of the <code>alternative</code> stuff works out of the box. <code>&lt;|&gt;</code>, <code>guard</code> and so on.</p>",
        "id": 132690204,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1535108446
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"121918\">@Edward Ayers</span>. This isn't quite there yet: I still want to abstract over <code>my_state</code>. That is, I want to be able to write <code>my_meta_tactic</code> so that it works with many different monads, as long as they come with a promise that they contain <code>my_state</code>, but possibly may carry additional state as well.</p>",
        "id": 132691315,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1535110151
    },
    {
        "content": "<p>That is, sometimes I will write tactics that refer to some specific notion of state.</p>",
        "id": 132691330,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1535110191
    },
    {
        "content": "<p>But other times I want to write a meta tactic that is merely sufficient polymorphic that is can pass through notions of state that other people might need.</p>",
        "id": 132691379,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1535110226
    },
    {
        "content": "<p>I guess if you are only storing bools nats and strings you can use <code>tactic.set_options</code> as a quick fix.</p>",
        "id": 132692605,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1535112157
    },
    {
        "content": "<p>I came up with a crazy idea that would solve this. The trouble is the type universes don't work and one would have to implement the <code>dependent_dict</code> object!</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">--I think that you can implement this as an rbtree but it&#39;s a lot of effort.</span>\n<span class=\"kn\">universe</span> <span class=\"n\">u</span>\n<span class=\"kn\">constant</span> <span class=\"n\">dependent_dict</span> <span class=\"o\">(</span><span class=\"n\">key</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">key</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">dependent_dict</span>\n    <span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">key</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">key</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n    <span class=\"kn\">constant</span> <span class=\"n\">get</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">key</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">dependent_dict</span> <span class=\"n\">key</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">k</span><span class=\"o\">)</span>\n    <span class=\"kn\">constant</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">key</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">value</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">dependent_dict</span> <span class=\"n\">key</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">dependent_dict</span> <span class=\"n\">key</span> <span class=\"n\">α</span>\n<span class=\"kn\">end</span> <span class=\"n\">dependent_dict</span>\n\n<span class=\"n\">meta</span> <span class=\"kn\">structure</span> <span class=\"n\">custom_state</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:</span> <span class=\"n\">string</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">type</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">default</span> <span class=\"o\">:</span> <span class=\"n\">type</span><span class=\"o\">)</span>\n<span class=\"c1\">-- [TODO] define an ordering according to `name`</span>\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">custom_state_tactic</span> <span class=\"o\">:=</span> <span class=\"n\">state_t</span> <span class=\"o\">(</span><span class=\"n\">dependent_dict</span> <span class=\"n\">custom_state</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">c</span><span class=\"o\">:</span><span class=\"n\">custom_state</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"bp\">.</span><span class=\"n\">type</span><span class=\"o\">))</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">custom_state_tactic</span>\n    <span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">get</span> <span class=\"o\">(</span><span class=\"n\">st</span> <span class=\"o\">:</span> <span class=\"n\">custom_state</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">custom_state_tactic</span> <span class=\"n\">st</span><span class=\"bp\">.</span><span class=\"n\">type</span> <span class=\"o\">:=</span> <span class=\"n\">do</span>\n        <span class=\"n\">d</span> <span class=\"err\">←</span> <span class=\"n\">state_t</span><span class=\"bp\">.</span><span class=\"n\">get</span><span class=\"o\">,</span>\n        <span class=\"n\">pure</span> <span class=\"err\">$</span> <span class=\"n\">option</span><span class=\"bp\">.</span><span class=\"n\">get_or_else</span> <span class=\"o\">(</span><span class=\"n\">dependent_dict</span><span class=\"bp\">.</span><span class=\"n\">get</span> <span class=\"n\">st</span><span class=\"bp\">.</span><span class=\"n\">name</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"n\">st</span><span class=\"bp\">.</span><span class=\"n\">default</span>\n    <span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">st</span> <span class=\"o\">:</span> <span class=\"n\">custom_state</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">value</span> <span class=\"o\">:</span> <span class=\"n\">st</span><span class=\"bp\">.</span><span class=\"n\">type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">custom_state_tactic</span> <span class=\"n\">unit</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">do</span>\n        <span class=\"n\">d</span> <span class=\"err\">←</span> <span class=\"n\">state_t</span><span class=\"bp\">.</span><span class=\"n\">get</span><span class=\"o\">,</span>\n        <span class=\"n\">state_t</span><span class=\"bp\">.</span><span class=\"n\">put</span> <span class=\"o\">(</span><span class=\"n\">dependent_dict</span><span class=\"bp\">.</span><span class=\"n\">set</span> <span class=\"n\">st</span> <span class=\"n\">value</span> <span class=\"n\">d</span><span class=\"o\">)</span>\n<span class=\"kn\">end</span> <span class=\"n\">custom_state_tactic</span>\n</pre></div>",
        "id": 132693624,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1535113714
    },
    {
        "content": "<p>So the idea is you would always use <code>custom_state_tactic</code> but define your own instance of <code>custom_state</code> to get the values that you care about.</p>",
        "id": 132693642,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1535113799
    },
    {
        "content": "<p>I don't think this will work but I thought I'd share.</p>",
        "id": 132693690,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1535113814
    },
    {
        "content": "<p>It also wouldn't work because you could give two <code>custom_state</code>s the same name but different types, and I don't think we have decidable equality for types</p>",
        "id": 132693809,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1535114040
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> are you familiar with the design of <a href=\"http://hackage.haskell.org/package/mtl\" target=\"_blank\" title=\"http://hackage.haskell.org/package/mtl\">mtl</a>?<br>\n<a href=\"http://hackage.haskell.org/package/mtl-2.2.2/docs/Control-Monad-State-Class.html\" target=\"_blank\" title=\"http://hackage.haskell.org/package/mtl-2.2.2/docs/Control-Monad-State-Class.html\">MonadState</a> is your \"monad that comes with a promise that it contains <code>my_state</code>\", I think.</p>",
        "id": 132701340,
        "sender_full_name": "Reid Barton",
        "timestamp": 1535123502
    },
    {
        "content": "<p>But I'm not sure if this encompasses everything you want</p>",
        "id": 132701413,
        "sender_full_name": "Reid Barton",
        "timestamp": 1535123557
    },
    {
        "content": "<p><code>monad_state</code> is already in Lean 3. A <code>monad_tactic</code> might be introduced in Lean 4.</p>",
        "id": 132702480,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1535124818
    },
    {
        "content": "<p>It would just be <code>has_monad_lift_t tactic</code>, right?</p>",
        "id": 132703270,
        "sender_full_name": "Reid Barton",
        "timestamp": 1535125824
    },
    {
        "content": "<p>Up to specializing names</p>",
        "id": 132703274,
        "sender_full_name": "Reid Barton",
        "timestamp": 1535125837
    },
    {
        "content": "<p>That is not sufficient for lifting <code>tactic _ -&gt; tactic _</code> functions or even more complex ones</p>",
        "id": 132703524,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1535126166
    },
    {
        "content": "<p>Oh, I've never actually wanted to do that with IO, and I'm not sure I trust any of the packages which claim to solve that problem anyways.</p>",
        "id": 132703985,
        "sender_full_name": "Reid Barton",
        "timestamp": 1535126844
    },
    {
        "content": "<p>Maybe <code>tactic</code> has more compelling use cases</p>",
        "id": 132703997,
        "sender_full_name": "Reid Barton",
        "timestamp": 1535126863
    },
    {
        "content": "<p>Yeah, it's way more important for <code>tactic</code> since it has a bunch of combinators like <code>try</code>, <code>focus</code>, <code>any_goals</code>, ...</p>",
        "id": 132704242,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1535127163
    },
    {
        "content": "<p>Using <code>monad_state</code>works really well for me.</p>",
        "id": 132912880,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1535457083
    }
]