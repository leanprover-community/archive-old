[
    {
        "content": "<p>Would it be convenient to have a mathlib branch that builds with Lean master? Concretely:</p>\n<ul>\n<li>Create a new long-lived branch <code>lean-master</code>.</li>\n<li>Whenever someone PRs to Lean, they also update mathlib as follows:<ul>\n<li>rebase <code>lean-master</code> onto <code>master</code></li>\n<li>build <code>lean-master</code> with the Lean from their PR</li>\n<li>fix any resulting breakage and push the fixes as soon as the PR is merged</li>\n</ul>\n</li>\n<li>When a new version of Lean is released, the mathlib update goes like this:<ul>\n<li>rebase <code>lean-master</code> onto <code>master</code></li>\n<li>'merge' <code>lean-master</code> into <code>master</code> (this is always a fast-forward merge due to the rebasing)</li>\n<li>update the Lean version in <code>leanpkg.toml</code></li>\n</ul>\n</li>\n</ul>\n<p>Advantages:</p>\n<ul>\n<li>We always have a version of mathlib that builds with Lean master. This is effectively a big integration test for Lean. I've found this very useful while developing my own PRs.</li>\n<li>Authors of Lean PRs fix their own breakage, which they are uniquely qualified to do because they already understand the changes. (This also serves as an incentive to avoid breakage. ;)) </li>\n</ul>\n<p>Disadvantages:</p>\n<ul>\n<li>The rebase steps may generate merge conflicts relating to any Lean PRs since the last release. I'm not sure how annoying this would be in practice.</li>\n</ul>",
        "id": 197136550,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1589199569
    },
    {
        "content": "<p>That sounds like <code>lean-master</code> is actually ahead of lean <code>master</code>, if it includes PRs</p>",
        "id": 197137147,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589199957
    },
    {
        "content": "<p>While working on a Lean PR, the PR author would have a local branch, derived from upstream <code>lean-master</code>, that incorporates the necessary mathlib changes. This can be used to locally test the Lean changes. When the PR is merged, these changes go into upstream <code>lean-master</code>.</p>",
        "id": 197139606,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1589201158
    },
    {
        "content": "<p>Can we go even further â€“ what's stopping us from putting lean and mathlib in the same repo?</p>",
        "id": 197139950,
        "sender_full_name": "Chris Wong",
        "timestamp": 1589201326
    },
    {
        "content": "<p>Correct me if I'm wrong, but the purpose of separate repositories is to allow two components to evolve independently.</p>\n<p>So I think the first question we should ask, before going into any details, is whether we want this independence.</p>",
        "id": 197142509,
        "sender_full_name": "Chris Wong",
        "timestamp": 1589202568
    },
    {
        "content": "<p>It's also separating concerns. Fooling around with mathlib is (in my eyes) a lot easier if there is no cpp code around</p>",
        "id": 197143255,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589202943
    },
    {
        "content": "<p>And there are certainly people using Lean that have no desire to use the maths library</p>",
        "id": 197143395,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589202987
    }
]