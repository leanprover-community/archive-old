[
    {
        "content": "<p><code>[complete_linear_order α]</code> creates a diamond for <code>[lattice α]</code>: one instance goes through <code>complete_linear_order.to_complete_lattice</code>, another one goes through <code>complete_linear_order.to_linear_order</code>.</p>",
        "id": 267281348,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1641626202
    },
    {
        "content": "<p>/poll How should we solve it?<br>\nRedefine <code>linear_order</code> to have fields <code>inf</code> and <code>sup</code> instead of <code>min</code> and <code>max</code><br>\nRedefine <code>complete_linear_order</code> and <code>conditionally_complete_linear_order</code> so that they no longer extend structures with <code>sup</code>/<code>inf</code></p>",
        "id": 267281426,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1641626310
    },
    {
        "content": "<p>Would it make sense to redefine <code>linear_order</code> to have fields <code>inf</code> + <code>sup</code> <em>and</em> <code>min</code> + <code>max</code>?</p>",
        "id": 267282648,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1641628402
    },
    {
        "content": "<p>Sure it does. There's also the Yakov way of doing things which is to make linearity a mixin. And that may be what we'll eventually do.</p>",
        "id": 267282705,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641628464
    },
    {
        "content": "<p>Do you have an example of the diamond being non-defeq?</p>",
        "id": 267290379,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1641640187
    },
    {
        "content": "<p>If <a href=\"https://leanprover-community.github.io/mathlib_docs/find/complete_linear_order\">docs#complete_linear_order</a> is an old style structure, can you just use <code>renaming</code> to merge the <code>inf</code> and <code>min</code> fields?</p>",
        "id": 267290452,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1641640282
    },
    {
        "content": "<p>We already have a mixin for linearity; it's called <code>[is_total α (≤)]</code>.</p>",
        "id": 267301588,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1641656467
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>  What are the advantages of <code>inf</code> + <code>sup</code> + <code>min</code> + <code>max</code>?</p>",
        "id": 267301719,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1641656619
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> The diamond is non-defeq if you write <code>{α : Type*} [complete_linear_order α]</code>.</p>",
        "id": 267301783,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1641656684
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/11309\">#11309</a></p>",
        "id": 267302000,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1641657009
    },
    {
        "content": "<p>I've no idea which way around is the better direction for the rename</p>",
        "id": 267302024,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1641657083
    },
    {
        "content": "<p>It probably doesn't matter</p>",
        "id": 267302026,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1641657094
    },
    {
        "content": "<p>Probably you should do the same with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/conditionally_complete_linear_order\">docs#conditionally_complete_linear_order</a></p>",
        "id": 267302813,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1641658181
    },
    {
        "content": "<p>Feel free to push to that branch, I'm done for the day</p>",
        "id": 267311806,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1641671139
    },
    {
        "content": "<p>Alright, I think I have <a href=\"https://github.com/leanprover-community/mathlib/pull/11309\">#11309</a> building now. Probably it would still be convenient to rename the <code>max</code> field to <code>sup</code> and <code>min</code> to <code>inf</code>, but that's largely cosmetic.</p>",
        "id": 267664743,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1641945626
    },
    {
        "content": "<p>I left 2 comments.</p>",
        "id": 267668450,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1641948330
    },
    {
        "content": "<p>Do we still want to rename the<code>min</code> and <code>max</code> fields to <code>inf</code> and <code>sup</code>? Or is there no longer any reason to care now that the diamond is gone?</p>",
        "id": 268582397,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1642616578
    },
    {
        "content": "<p>I would prefer to unify names but now this is a low-priority task for me.</p>",
        "id": 268797087,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1642741861
    },
    {
        "content": "<p>While the diamond is gone, we have yet another way to create hard-to-notice diamonds.</p>",
        "id": 268797141,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1642741921
    },
    {
        "content": "<p>(e.g., some version of the PR that fixed this diamond introduced another one)</p>",
        "id": 268797201,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1642741956
    }
]