[
    {
        "content": "<p>I just ran into this and was confused about why it worked: </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">measure_theory</span><span class=\"bp\">.</span><span class=\"n\">borel_space</span>\n\n<span class=\"kn\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">measure_theory</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">fn_space</span><span class=\"bp\">.</span><span class=\"n\">measurable_space</span> <span class=\"o\">[</span><span class=\"n\">m₁</span> <span class=\"o\">:</span> <span class=\"n\">measurable_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">m₂</span> <span class=\"o\">:</span> <span class=\"n\">measurable_space</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span> <span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n<span class=\"n\">measurable_space</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">borel</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>If I remove the <code>topological_space</code> instances, Lean complains that it doesn't know how to find an instance of <code>topological_space (α → β)</code>.  So if I leave them on, somehow it is finding that instance on its own. Is this because of the <code>compact_open</code> topology? (But isn't that only for the subtype of continuous functions from<code>(α → β)</code>?</p>",
        "id": 165742921,
        "sender_full_name": "Koundinya Vajjha",
        "timestamp": 1557946443
    },
    {
        "content": "<p>Ah. <code>set_option trace.class_instances true</code> says that <code>Pi.topological_space</code> is the culprit.</p>",
        "id": 165743879,
        "sender_full_name": "Koundinya Vajjha",
        "timestamp": 1557946939
    },
    {
        "content": "<p>Right. A -&gt; B can be regarded as a product of B's over A, so for lots of structures (groups, topological spaces etc) A -&gt; B inherits a structure from B. For topological groups this results in a gotcha -- asking that G -&gt; G -&gt; G is continuous makes sense but is not what you want, you lose the topology on the middle G.</p>",
        "id": 165747094,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1557948992
    },
    {
        "content": "<p>Also related: why is Lean happy with this? </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">measurable_space</span> <span class=\"o\">[</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">measurable_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">measurable_space</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"err\">⊤</span>\n</pre></div>",
        "id": 165754042,
        "sender_full_name": "Koundinya Vajjha",
        "timestamp": 1557953709
    },
    {
        "content": "<p>Even <code>⊥</code> works. I'm very confused.</p>",
        "id": 165754135,
        "sender_full_name": "Koundinya Vajjha",
        "timestamp": 1557953766
    },
    {
        "content": "<p>I don't know what a measurable space is, but I guess <code>measurable_space</code> is a lattice, and <code>top</code> is probably the space where every set has infinite measure or something like that.</p>",
        "id": 165756384,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1557955735
    },
    {
        "content": "<p>unlike what its name suggests, measurable spaces don't actually need a measure</p>",
        "id": 165756437,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1557955798
    },
    {
        "content": "<p>it's just a sigma algebra</p>",
        "id": 165756509,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1557955821
    },
    {
        "content": "<p>That's why they're measurable and not measured.</p>",
        "id": 165756810,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1557956091
    },
    {
        "content": "<p>Yes it's just the sigma algebra. So why does <code>top</code> do it? I was expecting something like the powerset of <code>alpha</code>.</p>",
        "id": 165756977,
        "sender_full_name": "Koundinya Vajjha",
        "timestamp": 1557956237
    },
    {
        "content": "<p>yes it is the powerset</p>",
        "id": 165757085,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1557956322
    },
    {
        "content": "<p>Oooh the powerset is <code>top</code> for the lattice of set inclusions?</p>",
        "id": 165757115,
        "sender_full_name": "Koundinya Vajjha",
        "timestamp": 1557956352
    },
    {
        "content": "<p>right</p>",
        "id": 165757153,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1557956401
    },
    {
        "content": "<p>Incidentally the topology on a -&gt; b doesn't depend on the topology on a at all, which I guess is the most natural choice if you really consider <em>all</em> functions. So topological_space a isn't contributing anything in your original example.</p>",
        "id": 165762739,
        "sender_full_name": "Reid Barton",
        "timestamp": 1557961241
    }
]