[
    {
        "content": "<p><a href=\"http://adventofcode.com\" target=\"_blank\" title=\"http://adventofcode.com\">adventofcode.com</a> in Lean?</p>",
        "id": 150682850,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1543669230
    },
    {
        "content": "<p>Does anyone know how to use Lean to read a file from disk, and get a <code>list int</code> if each line looks like an integer?</p>",
        "id": 150683859,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1543671246
    },
    {
        "content": "<p>I just pasted into lean file! But that's a better idea!</p>",
        "id": 150683922,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1543671396
    },
    {
        "content": "<p>I thought about pasting, but I guess that's not a reasonable strategy if you want to do all 50 puzzles</p>",
        "id": 150683931,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1543671429
    },
    {
        "content": "<p>And someone needs to write a IO monad howto anyway</p>",
        "id": 150683932,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1543671446
    },
    {
        "content": "<p>I completed it but I used <code>meta</code>. I feel dirty.</p>",
        "id": 150684498,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1543672615
    },
    {
        "content": "<p>Did you use IO?</p>",
        "id": 150684511,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1543672644
    },
    {
        "content": "<p>nope</p>",
        "id": 150684515,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1543672653
    },
    {
        "content": "<p>Would you know how to read from a file?</p>",
        "id": 150684561,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1543672684
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">system</span><span class=\"bp\">.</span><span class=\"n\">io</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">buffer</span><span class=\"bp\">.</span><span class=\"n\">parser</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">open</span> <span class=\"n\">tactic</span> <span class=\"n\">parser</span>\n\n<span class=\"n\">def</span> <span class=\"n\">number</span> <span class=\"o\">:</span> <span class=\"n\">parser</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"n\">string</span><span class=\"bp\">.</span><span class=\"n\">to_nat</span> <span class=\"bp\">&lt;</span><span class=\"err\">$</span><span class=\"bp\">&gt;</span> <span class=\"n\">many_char1</span> <span class=\"o\">(</span><span class=\"n\">sat</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">c</span><span class=\"o\">,</span>\n  <span class=\"err\">&#39;</span><span class=\"mi\">0</span><span class=\"err\">&#39;</span><span class=\"bp\">.</span><span class=\"n\">to_nat</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"bp\">.</span><span class=\"n\">to_nat</span> <span class=\"bp\">∧</span> <span class=\"n\">c</span><span class=\"bp\">.</span><span class=\"n\">to_nat</span> <span class=\"bp\">≤</span> <span class=\"err\">&#39;</span><span class=\"mi\">9</span><span class=\"err\">&#39;</span><span class=\"bp\">.</span><span class=\"n\">to_nat</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">signed_number</span> <span class=\"o\">:</span> <span class=\"n\">parser</span> <span class=\"bp\">ℤ</span> <span class=\"o\">:=</span>\n<span class=\"n\">ch</span> <span class=\"err\">&#39;</span><span class=\"bp\">+</span><span class=\"err\">&#39;</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"bp\">&lt;</span><span class=\"err\">$</span><span class=\"bp\">&gt;</span> <span class=\"n\">number</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|&gt;</span>\n<span class=\"n\">ch</span> <span class=\"err\">&#39;</span><span class=\"bp\">-</span><span class=\"err\">&#39;</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"o\">((</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span><span class=\"err\">$</span><span class=\"bp\">&gt;</span> <span class=\"n\">number</span><span class=\"o\">)</span>\n\n<span class=\"n\">run_cmd</span> <span class=\"n\">do</span>\n  <span class=\"n\">s</span> <span class=\"err\">←</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">unsafe_run_io</span> <span class=\"err\">$</span> <span class=\"n\">io</span><span class=\"bp\">.</span><span class=\"n\">fs</span><span class=\"bp\">.</span><span class=\"n\">read_file</span> <span class=\"s2\">&quot;dat.txt&quot;</span><span class=\"o\">,</span>\n  <span class=\"n\">sum</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">l</span> <span class=\"err\">←</span> <span class=\"n\">return</span> <span class=\"err\">$</span> <span class=\"n\">run</span> <span class=\"o\">(</span><span class=\"n\">many</span> <span class=\"o\">(</span><span class=\"n\">signed_number</span> <span class=\"bp\">&lt;*</span> <span class=\"n\">ch</span> <span class=\"err\">&#39;\\</span><span class=\"n\">n&#39;</span><span class=\"o\">))</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n  <span class=\"n\">trace</span> <span class=\"n\">l</span>\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span>[13,\n -(2+1),\n -(7+1),\n 14,\n 16,\n -(6+1),\n 3,\n -(6+1),\n 9,\n -(9+1),\n 16,\n...\n</pre></div>",
        "id": 150684565,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1543672696
    },
    {
        "content": "<p>maybe <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> knows the correct way to call IO from <code>run_cmd</code>, but <code>unsafe_run_io</code> works in a pinch</p>",
        "id": 150684582,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1543672752
    },
    {
        "content": "<p>I think you can use <code>#eval</code></p>",
        "id": 150684636,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1543672833
    },
    {
        "content": "<p>oh, I should have used <code>to_string</code>, the output is much nicer</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">system</span><span class=\"bp\">.</span><span class=\"n\">io</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">buffer</span><span class=\"bp\">.</span><span class=\"n\">parser</span>\n<span class=\"kn\">open</span> <span class=\"n\">parser</span>\n\n<span class=\"n\">def</span> <span class=\"n\">number</span> <span class=\"o\">:</span> <span class=\"n\">parser</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"n\">string</span><span class=\"bp\">.</span><span class=\"n\">to_nat</span> <span class=\"bp\">&lt;</span><span class=\"err\">$</span><span class=\"bp\">&gt;</span> <span class=\"n\">many_char1</span> <span class=\"o\">(</span><span class=\"n\">sat</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">c</span><span class=\"o\">,</span>\n  <span class=\"err\">&#39;</span><span class=\"mi\">0</span><span class=\"err\">&#39;</span><span class=\"bp\">.</span><span class=\"n\">to_nat</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"bp\">.</span><span class=\"n\">to_nat</span> <span class=\"bp\">∧</span> <span class=\"n\">c</span><span class=\"bp\">.</span><span class=\"n\">to_nat</span> <span class=\"bp\">≤</span> <span class=\"err\">&#39;</span><span class=\"mi\">9</span><span class=\"err\">&#39;</span><span class=\"bp\">.</span><span class=\"n\">to_nat</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">signed_number</span> <span class=\"o\">:</span> <span class=\"n\">parser</span> <span class=\"bp\">ℤ</span> <span class=\"o\">:=</span>\n<span class=\"n\">ch</span> <span class=\"err\">&#39;</span><span class=\"bp\">+</span><span class=\"err\">&#39;</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"bp\">&lt;</span><span class=\"err\">$</span><span class=\"bp\">&gt;</span> <span class=\"n\">number</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|&gt;</span>\n<span class=\"n\">ch</span> <span class=\"err\">&#39;</span><span class=\"bp\">-</span><span class=\"err\">&#39;</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"o\">((</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span><span class=\"err\">$</span><span class=\"bp\">&gt;</span> <span class=\"n\">number</span><span class=\"o\">)</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">do</span>\n  <span class=\"n\">s</span> <span class=\"err\">←</span> <span class=\"n\">io</span><span class=\"bp\">.</span><span class=\"n\">fs</span><span class=\"bp\">.</span><span class=\"n\">read_file</span> <span class=\"s2\">&quot;dat.txt&quot;</span><span class=\"o\">,</span>\n  <span class=\"n\">sum</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">l</span> <span class=\"err\">←</span> <span class=\"n\">return</span> <span class=\"err\">$</span> <span class=\"n\">run</span> <span class=\"o\">(</span><span class=\"n\">many</span> <span class=\"o\">(</span><span class=\"n\">signed_number</span> <span class=\"bp\">&lt;*</span> <span class=\"n\">ch</span> <span class=\"err\">&#39;\\</span><span class=\"n\">n&#39;</span><span class=\"o\">))</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n  <span class=\"n\">trace</span> <span class=\"o\">(</span><span class=\"n\">to_string</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">return</span> <span class=\"o\">())</span>\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span>[13, -3, -8, 14, 16, -7, 3, -7, 9, -10, 16, 13, 12, 12, 4, 19, -2, -5, -15, -2, -13, -11, -13, -2, ...\n</pre></div>",
        "id": 150684702,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1543672990
    },
    {
        "content": "<p>For some reason the output or return value of the io is ignored, so I had to to a hack with <code>trace</code> to get it to print</p>",
        "id": 150684754,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1543673113
    },
    {
        "content": "<p>Thanks Mario! It allowed to complete Day 1, adding only 15 characters to your code :)</p>",
        "id": 150684902,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1543673422
    },
    {
        "content": "<p>Did you do the second part?</p>",
        "id": 150684972,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1543673572
    },
    {
        "content": "<p>here's how I did the first part in lean:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"mi\">0</span>\n<span class=\"bp\">+</span><span class=\"mi\">13</span>\n<span class=\"bp\">-</span><span class=\"mi\">3</span>\n<span class=\"bp\">-</span><span class=\"mi\">8</span>\n<span class=\"bp\">+</span><span class=\"mi\">14</span>\n<span class=\"bp\">+</span><span class=\"mi\">16</span>\n</pre></div>",
        "id": 150685393,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1543674459
    },
    {
        "content": "<p>No, I decided I should stop distractions for a while. And also the question looked masochistic to do in functional rather than imperative language</p>",
        "id": 150686187,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1543675969
    },
    {
        "content": "<p>Mario, was that all your input?</p>",
        "id": 150686195,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1543675986
    },
    {
        "content": "<p>I had to use <code>#eval (0 : int)</code> since the first line of the input was negative.</p>",
        "id": 150687782,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1543679398
    },
    {
        "content": "<p>I solved it too. But my solution took 40 seconds to run</p>",
        "id": 150703402,
        "sender_full_name": "Reid Barton",
        "timestamp": 1543712093
    },
    {
        "content": "<p>The first part, I mean</p>",
        "id": 150703410,
        "sender_full_name": "Reid Barton",
        "timestamp": 1543712135
    },
    {
        "content": "<p>Doing the second part in non-meta Lean seems pretty interesting</p>",
        "id": 150703754,
        "sender_full_name": "Reid Barton",
        "timestamp": 1543712783
    },
    {
        "content": "<p>I think this is a good test case for the conventional programming capabilities of lean. Here's my solution for day 2 pt 1:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">system</span><span class=\"bp\">.</span><span class=\"n\">io</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">buffer</span><span class=\"bp\">.</span><span class=\"n\">parser</span> <span class=\"n\">meta</span><span class=\"bp\">.</span><span class=\"n\">rb_map</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">open</span> <span class=\"n\">parser</span>\n\n<span class=\"n\">def</span> <span class=\"n\">letter</span> <span class=\"o\">:</span> <span class=\"n\">parser</span> <span class=\"n\">char</span> <span class=\"o\">:=</span>\n<span class=\"n\">sat</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"err\">&#39;</span><span class=\"n\">a&#39;</span><span class=\"bp\">.</span><span class=\"n\">to_nat</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"bp\">.</span><span class=\"n\">to_nat</span> <span class=\"bp\">∧</span> <span class=\"n\">c</span><span class=\"bp\">.</span><span class=\"n\">to_nat</span> <span class=\"bp\">≤</span> <span class=\"err\">&#39;</span><span class=\"n\">z&#39;</span><span class=\"bp\">.</span><span class=\"n\">to_nat</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">count1</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">lt</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_rel</span> <span class=\"n\">lt</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">rbmap</span> <span class=\"n\">α</span> <span class=\"bp\">ℕ</span> <span class=\"n\">lt</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">rbmap</span> <span class=\"n\">α</span> <span class=\"bp\">ℕ</span> <span class=\"n\">lt</span> <span class=\"o\">:=</span>\n<span class=\"n\">c</span><span class=\"bp\">.</span><span class=\"n\">insert</span> <span class=\"n\">a</span> <span class=\"err\">$</span> <span class=\"k\">match</span> <span class=\"n\">c</span><span class=\"bp\">.</span><span class=\"n\">find</span> <span class=\"n\">a</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"kn\">end</span>\n\n<span class=\"n\">def</span> <span class=\"n\">get_counts</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">char</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">bool</span> <span class=\"bp\">×</span> <span class=\"n\">bool</span> <span class=\"o\">:=</span>\n<span class=\"k\">let</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">foldl</span> <span class=\"n\">count1</span> <span class=\"o\">(</span><span class=\"n\">mk_rbmap</span> <span class=\"n\">char</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"n\">l</span> <span class=\"k\">in</span>\n<span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"n\">fold</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">c</span> <span class=\"n\">n</span> <span class=\"bp\">⟨</span><span class=\"n\">r₁</span><span class=\"o\">,</span> <span class=\"n\">r₂</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">r₁</span> <span class=\"bp\">∨</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">r₂</span> <span class=\"bp\">∨</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span><span class=\"bp\">⟩</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ff</span><span class=\"o\">,</span> <span class=\"n\">ff</span><span class=\"o\">)</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">do</span>\n  <span class=\"n\">s</span> <span class=\"err\">←</span> <span class=\"n\">io</span><span class=\"bp\">.</span><span class=\"n\">fs</span><span class=\"bp\">.</span><span class=\"n\">read_file</span> <span class=\"s2\">&quot;dat.txt&quot;</span><span class=\"o\">,</span>\n  <span class=\"n\">sum</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">ls</span> <span class=\"err\">←</span> <span class=\"n\">return</span> <span class=\"err\">$</span> <span class=\"n\">run</span> <span class=\"o\">(</span><span class=\"n\">many</span> <span class=\"o\">(</span><span class=\"n\">many</span> <span class=\"n\">letter</span> <span class=\"bp\">&lt;*</span> <span class=\"n\">ch</span> <span class=\"err\">&#39;\\</span><span class=\"n\">n&#39;</span><span class=\"o\">))</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">l₁</span><span class=\"o\">,</span> <span class=\"n\">l₂</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">ls</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">get_counts</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">unzip</span><span class=\"o\">,</span>\n  <span class=\"n\">trace</span> <span class=\"o\">(</span><span class=\"n\">to_string</span> <span class=\"o\">(</span><span class=\"n\">l₁</span><span class=\"bp\">.</span><span class=\"n\">count</span> <span class=\"n\">tt</span> <span class=\"bp\">*</span> <span class=\"n\">l₂</span><span class=\"bp\">.</span><span class=\"n\">count</span> <span class=\"n\">tt</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">return</span> <span class=\"o\">())</span>\n</pre></div>",
        "id": 150715253,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1543738662
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span>  As for doing the day 1 pt 2 in non-meta lean, it was obviously intended to have a solution with unbounded iteration, and it is possible to have such a program never halt on some inputs. With some significant additional work you can actually decide whether an input will halt (by looking at whether the numbers are all distinct mod the period), and so you could get a fully correct non-meta lean solution that way (which is even better than the naive algorithm because it will tell you when the infinite stream has no duplicates).</p>\n<p>But if you just want the easy solution, the simplest approach is just to have a depth limiter, and increase it until you get the answer.</p>",
        "id": 150715398,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1543738984
    },
    {
        "content": "<p>To avoid spamming the chat I won't report daily, but I think I will take up this challenge. Follow along at <a href=\"https://github.com/digama0/advent-of-code\" target=\"_blank\" title=\"https://github.com/digama0/advent-of-code\">https://github.com/digama0/advent-of-code</a> (spoiler alert)</p>",
        "id": 150794896,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1543866302
    },
    {
        "content": "<p>On part day 1 part 2, I believe you can show that the search terminates if two elements of your list are equal mod (answer to part 1). So I started coding up a non-meta algorithm but then I realized it would sap away my entire Saturday so I stopped.</p>",
        "id": 150837825,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1543920340
    },
    {
        "content": "<p>Did you see my solution?</p>",
        "id": 150837987,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1543920489
    },
    {
        "content": "<p>I did that algorithm</p>",
        "id": 150837992,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1543920500
    },
    {
        "content": "<p>and it did sap a good chunk of my day ;)</p>",
        "id": 150838001,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1543920523
    },
    {
        "content": "<p>you can actually do a bit better than producing a proof of well foundedness to run the search... when two values have the same mod the period, you find the least difference of divs, and that's where the search will terminate (so you can do the whole thing without actually running those passes)</p>",
        "id": 150838140,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1543920700
    },
    {
        "content": "<p>Yeah that's how I was going to do it.</p>",
        "id": 150838882,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1543921406
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> thanks for sharing your solutions. There are still lots of language/mathlib features I am neglecting! Eg <code>withtop</code></p>",
        "id": 150839362,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1543921830
    },
    {
        "content": "<p>Also <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>  in the parsers for numbers and letters you can use <code>sat $ char.is_lower</code> and <code>char.is_digit</code> instead of manually checking the char.</p>",
        "id": 150841457,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1543924361
    },
    {
        "content": "<p>oh, lovely</p>",
        "id": 150841473,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1543924399
    },
    {
        "content": "<p>I'm hoping that the conventional programming capabilities of lean will be boosted by these attempts</p>",
        "id": 150841529,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1543924444
    },
    {
        "content": "<p>Since Lean 4 is supposedly a programming language I thought I'd try it out:<br>\n<a href=\"https://github.com/rwbarton/advent-of-lean-4\">https://github.com/rwbarton/advent-of-lean-4</a></p>",
        "id": 218499844,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606867676
    },
    {
        "content": "<p>I think it took me about 2 hours to figure out why networking wasn't working in the VM I set up to install Lean 4, 30 minutes to figure out how to read a file, 10 minutes to solve part 1 and 2 minutes to solve part 2 <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 218500201,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606867991
    },
    {
        "content": "<p>How fast does it run?</p>",
        "id": 218500380,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1606868160
    },
    {
        "content": "<p>the ~200^3 algorithm takes about half a second just with <code>lean --run</code></p>",
        "id": 218500496,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606868255
    },
    {
        "content": "<p>I don't know how to compile it, I should try to figure that out</p>",
        "id": 218500503,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606868263
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/tree/master/doc/examples/compiler\">https://github.com/leanprover/lean4/tree/master/doc/examples/compiler</a></p>",
        "id": 218500998,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1606868711
    },
    {
        "content": "<p>and I had <em>just</em> figured out the proper incantation</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>g++ -I ~/lean4/build/release/stage1/include -O -o b b.c -L ~/lean4/build/release/stage1/lib/lean/ -lInit -lleancpp -lLean -lStd -lpthread -lm -lstdc++ -lgmp\n</code></pre></div>",
        "id": 218501228,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606868922
    },
    {
        "content": "<p>well it's a lot faster now</p>",
        "id": 218501334,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606869004
    },
    {
        "content": "<p>not sure how accurate these VM timings are but it takes around 0.01 second, will be more interesting for a different program</p>",
        "id": 218501391,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606869045
    },
    {
        "content": "<p>slightly prettier WIP docs than using the github interface: <a href=\"https://kha.github.io/lean4/doc\">https://kha.github.io/lean4/doc</a></p>",
        "id": 218501553,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1606869159
    },
    {
        "content": "<p>I got <code>leanmake</code> working, thanks.</p>",
        "id": 218501769,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606869355
    },
    {
        "content": "<p>There's no jump to definition or autocompletion in the emacs mode right?</p>",
        "id": 218501875,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606869442
    },
    {
        "content": "<p>nope. it's as barebones as it gets. the lsp server also doesn't have those features yet.</p>",
        "id": 218501912,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1606869480
    },
    {
        "content": "<p>Well, at least that means I can stick to my trusty <img alt=\":emacs:\" class=\"emoji\" src=\"https://zulip-avatars.s3.amazonaws.com/3121/emoji/images/17846.png\" title=\"emacs\"> for now</p>",
        "id": 218504163,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606871408
    },
    {
        "content": "<p>i think last we checked the lsp server still worked with emacs' lsp-mode :)</p>",
        "id": 218504432,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1606871712
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"221921\">Marc Huisinga</span> <a href=\"#narrow/stream/113488-general/topic/Advent.20of.20Code/near/218501553\">said</a>:</p>\n<blockquote>\n<p>slightly prettier WIP docs than using the github interface: <a href=\"https://kha.github.io/lean4/doc\">https://kha.github.io/lean4/doc</a></p>\n</blockquote>\n<p>Official, more up-to-date ones at <a href=\"https://leanprover.github.io/lean4/doc/\">https://leanprover.github.io/lean4/doc/</a> :)</p>",
        "id": 218525529,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1606897140
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> , any particular reason for using the 2018 problems in your repo?</p>",
        "id": 218685675,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1606998075
    },
    {
        "content": "<p>Because I did them in 2018?</p>",
        "id": 218685692,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1606998092
    },
    {
        "content": "<p>Reid's playing the game this year, not me</p>",
        "id": 218685830,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1606998181
    },
    {
        "content": "<p>Hahaha! Sorry ! I though you had started that after <span class=\"user-mention\" data-user-id=\"121918\">@Edward Ayers</span> started this thread!</p>",
        "id": 218685931,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1606998243
    },
    {
        "content": "<p>That also happened in 2018</p>",
        "id": 218686177,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606998407
    },
    {
        "content": "<p>Wow! I am crazy ! I didn’t pay attention to the dates! Ops!</p>",
        "id": 218686246,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1606998466
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> How is this going so far?</p>",
        "id": 218964370,
        "sender_full_name": "Jason Rute",
        "timestamp": 1607220845
    },
    {
        "content": "<p>Pretty well overall. I'd say it's probably already easier than it would be in Lean 3 aside from the editor mode not being finished yet.</p>",
        "id": 218964670,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607221524
    },
    {
        "content": "<p>Basically I pretend I'm writing Haskell except 20% of the time the library function I expect isn't there and I write it myself</p>",
        "id": 218964675,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607221552
    },
    {
        "content": "<p>One problem involved some tricky parsing that was suitable for a parser combinator library which doesn't fully exist, but there's an implementation of a JSON parser which covered enough of what I needed to get the job done</p>",
        "id": 218964732,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607221681
    },
    {
        "content": "<p>which also involved the first time I wrote a <a href=\"https://github.com/rwbarton/advent-of-lean-4/blob/main/4/b.lean#L46\">destructive update</a> inside a monadic parser</p>",
        "id": 218964774,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607221712
    },
    {
        "content": "<p>I don't really know what it means but I assume the Lean 4 developers figured that out</p>",
        "id": 218964778,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607221734
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113488-general/topic/Advent.20of.20Code/near/218964774\">said</a>:</p>\n<blockquote>\n<p>which also involved the first time I wrote a <a href=\"https://github.com/rwbarton/advent-of-lean-4/blob/main/4/b.lean#L46\">destructive update</a> inside a monadic parser</p>\n<p>I don't really know what it means but I assume the Lean 4 developers figured that out</p>\n</blockquote>\n<p>if you're holding the only reference to a value, a function that discards that reference just to create some new one can reuse the memory of the value that you're discarding the last reference of.<br>\nthis commonly comes up in \"updates\", i.e. you take some structure, change one of its fields and then return the new structure.<br>\nimperative programming languages would avoid the allocation through mutation, while functional languages can avoid the allocation through destructive updates.</p>",
        "id": 218980823,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1607251529
    },
    {
        "content": "<p>What do mutable variables in a monad desugar to? It can't just be shadowing if you can modify the variable in a loop, right? Some kind of state monad transformer?</p>",
        "id": 218981646,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607252795
    },
    {
        "content": "<p>it uses <code>ForInStep</code> (<a href=\"https://github.com/leanprover/lean4/blob/master/src/Init/Core.lean#L74\">Core.lean#L74</a>, example usage: <a href=\"https://github.com/leanprover/lean4/blob/master/src/Init/Data/Array/Basic.lean#L129\">Basic.lean#L129</a>).<br>\nin the above example, <code>f</code> is effectively the body of the for-loop and accumulates a value of type <code>β</code>.<br>\naccording to <a href=\"https://github.com/leanprover/lean4/blob/master/src/Lean/Elab/Do.lean#L726\">Do.lean#L726</a>, <code>β</code> typically denotes the set of variables that are being reassigned.<br>\nso i guess it compiles to something similar to a fold that is also capable of more complex control flow?<br>\nand then reassignments seem to be just shadowing: <a href=\"https://github.com/leanprover/lean4/blob/master/src/Lean/Elab/Do.lean#L941\">Do.lean#L941</a></p>",
        "id": 218983397,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1607255588
    },
    {
        "content": "<p>Thanks, that makes sense.<br>\nNow I remember hearing about a mythical Haskell-like language developed by Lennart Augustsson which had things like for loops and while loops...</p>",
        "id": 218984452,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607257271
    },
    {
        "content": "<p>On that note, I guess there are no <code>while</code> loops, even with <code>partial</code>?</p>",
        "id": 219201527,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607431222
    },
    {
        "content": "<p>no, there aren't. i think i wanted to ask <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> about that at some point :)<br>\ncore uses <code>let rec</code> usually.</p>",
        "id": 219201754,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1607431393
    },
    {
        "content": "<p>It's been fun writing \"imperative\" pure code... until I wrote <code>seen.set! i true</code> and didn't notice for a while that I meant <code>seen := seen.set! i true</code> <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 219202323,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607431818
    },
    {
        "content": "<p>Is there some pure trace facility like <a href=\"https://hackage.haskell.org/package/base-4.14.0.0/docs/Debug-Trace.html#v:trace\">https://hackage.haskell.org/package/base-4.14.0.0/docs/Debug-Trace.html#v:trace</a>?</p>",
        "id": 219202388,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607431880
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113488-general/topic/Advent.20of.20Code/near/219202323\">said</a>:</p>\n<blockquote>\n<p>It's been fun writing \"imperative\" pure code... until I wrote <code>seen.set! i true</code> and didn't notice for a while that I meant <code>seen := seen.set! i true</code> <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>\n</blockquote>\n<p>i think so far every time i've made that mistake the type checker corrected me. did that occur in a function that also happened to have the same return type as <code>seen</code>?</p>",
        "id": 219202587,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1607432022
    },
    {
        "content": "<p>It was here <a href=\"https://github.com/rwbarton/advent-of-lean-4/blob/main/8/a.lean#L17\">https://github.com/rwbarton/advent-of-lean-4/blob/main/8/a.lean#L17</a></p>",
        "id": 219202669,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607432064
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113488-general/topic/Advent.20of.20Code/near/219202388\">said</a>:</p>\n<blockquote>\n<p>Is there some pure trace facility like <a href=\"https://hackage.haskell.org/package/base-4.14.0.0/docs/Debug-Trace.html#v:trace\">https://hackage.haskell.org/package/base-4.14.0.0/docs/Debug-Trace.html#v:trace</a>?</p>\n</blockquote>\n<p>there's <a href=\"https://github.com/leanprover/lean4/blob/master/src/Init/Util.lean#L15\">https://github.com/leanprover/lean4/blob/master/src/Init/Util.lean#L15</a> and <a href=\"https://github.com/leanprover/lean4/blob/master/src/Lean/Util/Trace.lean\">https://github.com/leanprover/lean4/blob/master/src/Lean/Util/Trace.lean</a></p>",
        "id": 219203089,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1607432340
    },
    {
        "content": "<p>i think the latter may actually not be relevant at all here, sorry!</p>",
        "id": 219203733,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1607432690
    },
    {
        "content": "<p>The former looks good though, I'll probably try it out tomorrow.</p>",
        "id": 219212180,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607437649
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113488-general/topic/Advent.20of.20Code/near/219201527\">said</a>:</p>\n<blockquote>\n<p>On that note, I guess there are no <code>while</code> loops, even with <code>partial</code>?</p>\n</blockquote>\n<p>It seems pretty easy to make <a href=\"https://gist.github.com/jasonrute/bb62203cb7debba0122ef69740ac078d\">infinite iterators</a> which are functionally the same as while loops but not quite as pretty.  (I modified the code for <code>Range.forIn</code>.)</p>",
        "id": 219558505,
        "sender_full_name": "Jason Rute",
        "timestamp": 1607652761
    },
    {
        "content": "<p>Hi, all. This year once again I am going to attempt to get through AoC in Lean. I lasted 5 days last year and my kids will probably make this year about as successful, but I'm going through the Functional Programming With Lean online book to be a little better prepared this time around. Anyone else tryin git?</p>",
        "id": 310494206,
        "sender_full_name": "Omri Schwarz",
        "timestamp": 1668630039
    },
    {
        "content": "<p>oh, sweet. For anyone trying it: make sure to take notes on anything missing from <code>Std</code></p>",
        "id": 310695844,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668717750
    },
    {
        "content": "<p>AoC is a great source of reasonable programming tasks that can help boost our coverage</p>",
        "id": 310695915,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668717785
    },
    {
        "content": "<p>I am interested in trying to sharpen my skills with the Advent of Code.  </p>\n<ul>\n<li>Should we set up a stream to discuss problems?  </li>\n<li>Should we set up a private leaderboard on the AoC website?</li>\n</ul>\n<p>I feel there are some problems which are very natural for Lean, and some which are harder.</p>",
        "id": 312361949,
        "sender_full_name": "Ryan McCorvie",
        "timestamp": 1669476209
    },
    {
        "content": "<p>Why not just start a thread in #lean4 for maximal visibility and if it takes off and you need different threads for different questions you can move to a stream</p>",
        "id": 312362225,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1669476333
    },
    {
        "content": "<p>I probably won't have much more than 30 mins per day to spend on this (which means that I'll probably give up after a few days), but here is my repo for the advent of code 2022 in Lean4, in case anyone else is playing along: <a href=\"https://github.com/adamtopaz/Lean4_AOC_2022\">https://github.com/adamtopaz/Lean4_AOC_2022</a></p>",
        "id": 313306295,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1669908618
    },
    {
        "content": "<p>I am also doing the exercises! My repo is here: <a href=\"https://github.com/mpenciak/AdventOfCode\">https://github.com/mpenciak/AdventOfCode</a></p>",
        "id": 313397820,
        "sender_full_name": "Matej Penciak",
        "timestamp": 1669936654
    },
    {
        "content": "<p>Count me in <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span> <a href=\"https://github.com/alexjbest/aoc\">https://github.com/alexjbest/aoc</a></p>",
        "id": 313400599,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1669938161
    },
    {
        "content": "<p>Alright, I'm playing too!  <a href=\"https://github.com/dupuisf/Lean4_AoC2022\">https://github.com/dupuisf/Lean4_AoC2022</a></p>",
        "id": 313415869,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1669947735
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"455674\">Matej Penciak</span> <a href=\"#narrow/stream/113488-general/topic/Advent.20of.20Code/near/313397820\">said</a>:</p>\n<blockquote>\n<p>I am also doing the exercises! My repo is here: <a href=\"https://github.com/mpenciak/AdventOfCode\">https://github.com/mpenciak/AdventOfCode</a></p>\n</blockquote>\n<p>Where is the best place to learn to write lean code like this? The functional programming manual?</p>",
        "id": 313423625,
        "sender_full_name": "Ian Riley",
        "timestamp": 1669954259
    },
    {
        "content": "<p>I posted a bit about my updated template on Mastodon: <a href=\"https://types.pl/@kha/109449257306696700\">https://types.pl/@kha/109449257306696700</a><br>\nRepo is <a href=\"https://github.com/Kha/aoc-2022\">https://github.com/Kha/aoc-2022</a></p>",
        "id": 313714056,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1670087770
    },
    {
        "content": "<p>I'm especially interested in perusing the neglected <code>Stream</code> typeclass a bit more like you would in e.g. Rust (/cc <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>, eventually something like this should probably be in std4): <a href=\"https://github.com/Kha/aoc-2022/blob/a15035979a83524ad9908ccf0a2641789a298b78/Aoc/Util.lean#L109-L146\">https://github.com/Kha/aoc-2022/blob/a15035979a83524ad9908ccf0a2641789a298b78/Aoc/Util.lean#L109-L146</a></p>",
        "id": 313714443,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1670088005
    },
    {
        "content": "<p>I am new to lean, but I am also trying this out <a href=\"https://github.com/Mateiadrielrafael/aoc22\">in this repo</a></p>",
        "id": 313742772,
        "sender_full_name": "Matei Adriel",
        "timestamp": 1670108814
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/113488-general/topic/Advent.20of.20Code/near/313714056\">said</a>:</p>\n<blockquote>\n<p>I posted a bit about my updated template on Mastodon: <a href=\"https://types.pl/@kha/109449257306696700\">https://types.pl/@kha/109449257306696700</a><br>\nRepo is <a href=\"https://github.com/Kha/aoc-2022\">https://github.com/Kha/aoc-2022</a></p>\n</blockquote>\n<p>This motivated me to actually (try to) figure out how mastodon works...</p>",
        "id": 313745654,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1670111482
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span>  Re: <code>Collect</code>, <span class=\"user-mention\" data-user-id=\"407274\">@James Gallicchio</span> has been working a lot on possibilities for iteration typeclasses in std4. It seems like a bit of a quagmire though so I'm trying to avoid the area. ;) I assume that typeclass setup is Rust-inspired?</p>",
        "id": 313754162,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670119305
    },
    {
        "content": "<p>Ah, yeah, this is definitely related. LeanColls has to do some backflips to avoid external iterators, so if Sebastian finds <code>Stream</code> very ergonomic then that would be a good tradeoff to look at.</p>",
        "id": 313763728,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1670129311
    },
    {
        "content": "<p><a href=\"https://www.reddit.com/r/adventofcode/comments/zbpq5g/gpt_openai_solutions_should_be_removed_from_the/\">https://www.reddit.com/r/adventofcode/comments/zbpq5g/gpt_openai_solutions_should_be_removed_from_the/</a><br>\n<a href=\"https://twitter.com/ostwilkens/status/1598458146187628544\">https://twitter.com/ostwilkens/status/1598458146187628544</a></p>\n<div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/ostwilkens/status/1598458146187628544\"><img class=\"twitter-avatar\" src=\"https://uploads.zulipusercontent.net/5b77a0c5a96fbcee4d2371ee6511b5fbdb8958ba/68747470733a2f2f7062732e7477696d672e636f6d2f70726f66696c655f696d616765732f313538343838313437333931393738373030392f3277435f5a79756f5f6e6f726d616c2e6a7067\"></a><p><span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span> Fully automated solving &amp; submission for  #AdventOfCode using #OpenAI text-davinci-003\nCan't wait to see how it handles day 2! 🫣 <a href=\"https://t.co/K54e5gnOap\">https://twitter.com/ostwilkens/status/1598458146187628544/photo/1</a></p><span>- Carl Öst Wilkens (@ostwilkens)</span><div class=\"twitter-image\"><a href=\"https://t.co/K54e5gnOap\"><img src=\"https://uploads.zulipusercontent.net/8de3f189cdc2bb994ce55422ecccbb5e96a4e3fa/68747470733a2f2f7062732e7477696d672e636f6d2f6d656469612f466937634d7131586f41416277705f2e6a70673a736d616c6c\"></a></div></div></div>",
        "id": 313765506,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1670130770
    },
    {
        "content": "<p>It's open-sourced: <a href=\"https://github.com/ostwilkens/aoc2022\">https://github.com/ostwilkens/aoc2022</a><br>\nCan we try the same with Lean? (no need to submit solution quickly if you don't want to)<br>\nDay 4 Part 1 champion's methodology:<br>\n<a href=\"https://twitter.com/max_sixty/status/1598970226343051264\">https://twitter.com/max_sixty/status/1598970226343051264</a><br>\n<a href=\"https://twitter.com/max_sixty/status/1598927902070149120\">https://twitter.com/max_sixty/status/1598927902070149120</a><br>\nDeepMind's AlphaCode could probably solve a lot more days; it was about median level on Codeforces when published in February</p>\n<div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/max_sixty/status/1598970226343051264\"><img class=\"twitter-avatar\" src=\"https://uploads.zulipusercontent.net/36687832f2c157edc78650140dfe458b17847b44/68747470733a2f2f7062732e7477696d672e636f6d2f70726f66696c655f696d616765732f313534323030363334353034393539313830382f38706a456f5366715f6e6f726d616c2e6a7067\"></a><p><a href=\"https://twitter.com/ForrestTheWoods\">@ForrestTheWoods</a> <a href=\"https://twitter.com/ostwilkens\">@ostwilkens</a> I ran 20 in parallel and submitted the most popular answer — the hit rate is still quite low — both wrong answer and syntax errors\n\nHere are some of them: <a href=\"https://t.co/ZnSxB4tMDk\">https://twitter.com/max_sixty/status/1598970226343051264/photo/1</a></p><span>- Max (@max_sixty)</span><div class=\"twitter-image\"><a href=\"https://t.co/ZnSxB4tMDk\"><img src=\"https://uploads.zulipusercontent.net/ce2289e93f0f4ce7f85a7e9d72908dee561f5778/68747470733a2f2f7062732e7477696d672e636f6d2f6d656469612f466a437562717956514141717174672e6a70673a7468756d62\"></a></div></div></div><div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/max_sixty/status/1598927902070149120\"><img class=\"twitter-avatar\" src=\"https://uploads.zulipusercontent.net/36687832f2c157edc78650140dfe458b17847b44/68747470733a2f2f7062732e7477696d672e636f6d2f70726f66696c655f696d616765732f313534323030363334353034393539313830382f38706a456f5366715f6e6f726d616c2e6a7067\"></a><p><a href=\"https://twitter.com/EvgSkvDev\">@EvgSkvDev</a> <a href=\"https://twitter.com/OpenAI\">@OpenAI</a> <a href=\"https://twitter.com/ostwilkens\">@ostwilkens</a> I add some context on it being a puzzle, and do some rudimentary filtering of the text, but otherwise feed it the question without edits <a href=\"https://t.co/NZayZzID96\">https://twitter.com/max_sixty/status/1598927902070149120/photo/1</a></p><span>- Max (@max_sixty)</span><div class=\"twitter-image\"><a href=\"https://t.co/NZayZzID96\"><img src=\"https://uploads.zulipusercontent.net/e249b95ec5f933f5fd9186927ac68deb781e4f6f/68747470733a2f2f7062732e7477696d672e636f6d2f6d656469612f466a4348504c6c56454141365278642e6a70673a6c61726765\"></a></div><div class=\"twitter-image\"><a href=\"https://t.co/NZayZzID96\"><img src=\"https://uploads.zulipusercontent.net/2344149b63325ce9ff368e83cc67eaeadfeaf7ba/68747470733a2f2f7062732e7477696d672e636f6d2f6d656469612f466a434952347455554141434b68722e6a70673a736d616c6c\"></a></div></div></div>",
        "id": 313774825,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1670139890
    },
    {
        "content": "<p>Another day, another crucial type taken from Rust (spoilers I guess): <a href=\"https://github.com/Kha/aoc-2022/blob/1c99cddba8fabfdccf10adfe37ff4493c9b84805/Aoc/Util.lean#L152-L177\">https://github.com/Kha/aoc-2022/blob/1c99cddba8fabfdccf10adfe37ff4493c9b84805/Aoc/Util.lean#L152-L177</a></p>",
        "id": 313778506,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1670142896
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"407274\">James Gallicchio</span> <a href=\"#narrow/stream/113488-general/topic/Advent.20of.20Code/near/313763728\">said</a>:</p>\n<blockquote>\n<p>Ah, yeah, this is definitely related. LeanColls has to do some backflips to avoid external iterators, so if Sebastian finds <code>Stream</code> very ergonomic then that would be a good tradeoff to look at.</p>\n</blockquote>\n<p>I haven't felt any drawbacks yet at least. There may be some questionable typeclass design, but that is independent from the mode of iteration.</p>",
        "id": 313778859,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1670143198
    },
    {
        "content": "<p>Now that the term is almost over, I am starting to have some Lean time: I am also playing!</p>\n<p><a href=\"https://github.com/adomani/Advent_of_Code_2022\">https://github.com/adomani/Advent_of_Code_2022</a></p>",
        "id": 314585244,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1670460213
    },
    {
        "content": "<p>I am also trying Advent of Code, but I am new to lean.  Should be fun :)</p>",
        "id": 314586819,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1670461424
    },
    {
        "content": "<p>Lean was on my short list, but I decided to do Advent of Code in Rust this year.  I know neither language. Last Saturday, Sebastian Ulrich's mastodon post inspired me to go back and redo the first three days in Lean. It was fun, so I've been doing it in both languages since then. (The last few days were Lean first.)</p>",
        "id": 314603195,
        "sender_full_name": "Steve Dunham",
        "timestamp": 1670475082
    },
    {
        "content": "<p>I'm sure people will be interested in hearing comments about comparison between the two languages!</p>",
        "id": 314621946,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1670486457
    },
    {
        "content": "<p>No Lean involved, but I was just blown away by the visualizations a friend of mine is doing in a Clojure notebook with apparently little effort using <a href=\"https://clerk.vision/\">Clerk</a>: <a href=\"https://zmb.cm/aoc/2022/2022-18.html\">https://zmb.cm/aoc/2022/2022-18.html</a>. Spoilers, obviously.</p>",
        "id": 316583345,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1671367821
    },
    {
        "content": "<p>Now we just have to get to that level with both widgets and Alectryon :) /cc <span class=\"user-mention\" data-user-id=\"128280\">@Wojciech Nawrocki</span></p>",
        "id": 316583390,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1671367851
    },
    {
        "content": "<p>That visualization + literate code is nice.   I'm not sure I can get to that level of documentation in the time I've got to spend on this, but it's something to aspire to. I'll have to put Clerk on my list of things to check out someday.</p>\n<p>I'm still plugging along.  The rust is taking a back seat to Lean4, but I'm keeping up in lean.   So far Day 16 is the only one I've had to compile - it took about 3.3 minutes to run when compiled (I'm guessing I missed something).   I'll share a link to my repository, but with the caveat that I don't really know Lean or Rust: <a href=\"https://github.com/dunhamsteve/aoc2022\">https://github.com/dunhamsteve/aoc2022</a></p>",
        "id": 316632237,
        "sender_full_name": "Steve Dunham",
        "timestamp": 1671393696
    }
]