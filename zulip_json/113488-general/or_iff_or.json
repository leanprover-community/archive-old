[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> can you use your magic to tell me whether</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">↔</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"n\">c</span> <span class=\"bp\">∨</span> <span class=\"n\">d</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨λ</span> <span class=\"n\">hab</span><span class=\"o\">,</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"n\">hab</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"err\">$</span> <span class=\"n\">h1</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">ha</span><span class=\"o\">)</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"err\">$</span> <span class=\"n\">h2</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n <span class=\"bp\">λ</span> <span class=\"n\">hcd</span><span class=\"o\">,</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"n\">hcd</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hc</span><span class=\"o\">,</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"err\">$</span> <span class=\"n\">h1</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">hc</span><span class=\"o\">)</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">hd</span><span class=\"o\">,</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"err\">$</span> <span class=\"n\">h2</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">hd</span><span class=\"bp\">⟩</span>\n</pre></div>\n\n\n<p>is already in mathlib? Are we yet in a position where I can find this out for myself? Note that I secretly find writing proofs of these things rather satisfying, so no hurry ;-)</p>",
        "id": 161442255,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553256844
    },
    {
        "content": "<p>hint: it's a congr lemma</p>",
        "id": 161442478,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1553257051
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">↔</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"n\">c</span> <span class=\"bp\">∨</span> <span class=\"n\">d</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">library_search</span>\n<span class=\"c1\">-- exact or_congr h1 h2</span>\n</pre></div>",
        "id": 161443285,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1553257830
    },
    {
        "content": "<p>By the way, <code>library_search</code> does not work well for me when I work in advanced files (too much theorems in the environment, I guess, leading to timeouts). But I have created a file <code>search.lean</code> importing only basic stuff, in which I launch <code>library_search</code> when I need it. And it is super-efficient. Thanks <span class=\"user-mention\" data-user-id=\"110524\">@Scott Morrison</span> !</p>",
        "id": 161443429,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1553257974
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">or_iff_or</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">↔</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"n\">c</span> <span class=\"bp\">∨</span> <span class=\"n\">d</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">h2</span><span class=\"o\">]</span>\n</pre></div>\n\n\n<p>Aww. The by hand version is far more fun :-)</p>",
        "id": 161443720,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553258193
    },
    {
        "content": "<blockquote>\n<p>hint: it's a congr lemma</p>\n</blockquote>\n<p>I see. So I was looking in the wrong place. What does <code>congr</code> mean? </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">ball_congr</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"n\">h</span> <span class=\"bp\">↔</span> <span class=\"n\">Q</span> <span class=\"n\">x</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">Q</span> <span class=\"n\">x</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n</pre></div>\n\n\n<p>This seems to say that bounded forall \"distributes over iff\" (can one even say that?) Does \"congr\" means \"it distributes over iff\"</p>",
        "id": 161444079,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553258578
    },
    {
        "content": "<blockquote>\n<p>By the way, <code>library_search</code> does not work well for me when I work in advanced files (too much theorems in the environment, I guess, leading to timeouts). But I have created a file <code>search.lean</code> importing only basic stuff, in which I launch <code>library_search</code> when I need it. And it is super-efficient. Thanks <span class=\"user-mention silent\" data-user-id=\"110524\">Scott Morrison</span> !</p>\n</blockquote>\n<p>The next step is to improve the VScode extension to get a shortcut open a small window where you can type the statement and hit \"search\" to launch <code>library_search</code> on your <code>search.lean</code>. Who wants to learn TypeScript?</p>",
        "id": 161444099,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1553258596
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> can you share <code>search.lean</code> as a gist? Or just post it here?</p>",
        "id": 161444107,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553258609
    },
    {
        "content": "<p><code>foo_congr</code> means that if <code>x = y</code> then <code>foo x = foo y</code> or some variation on that.</p>",
        "id": 161444190,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1553258690
    },
    {
        "content": "<p>For predicates it seems to me that if <code>foo (P iff Q)</code> then <code>foo P iff foo Q</code> which seems to be a bit different.</p>",
        "id": 161444312,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553258785
    },
    {
        "content": "<p>Do I just have to close my eyes a bit and squint?</p>",
        "id": 161444323,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553258798
    },
    {
        "content": "<p>It's just an empty file in which I import only what should be relevant for the search (and I keep changing the imports depending on what I want). So no interest in posting it. What you really need to do is merge <a href=\"https://github.com/leanprover-community/mathlib/issues/839\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/839\">#839</a> in your local copy of mathlib (or merge it in mathlib if you are an admin, to bring it to everyone :).</p>",
        "id": 161444368,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1553258854
    },
    {
        "content": "<p>Oh I see, you change the imports to suit.</p>",
        "id": 161444583,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553259059
    },
    {
        "content": "<p>Are these proofs mathlib-ready or can they be golfed more?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">basic</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">order</span>\n\n<span class=\"n\">def</span> <span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">lt_map_of_le_map</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">he</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"err\">≃</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hle</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span> <span class=\"bp\">↔</span> <span class=\"n\">he</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">he</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span> <span class=\"bp\">↔</span> <span class=\"n\">he</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">he</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">lt_iff_le_not_le</span><span class=\"o\">,</span> <span class=\"n\">hle</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">hle</span> <span class=\"n\">y</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">lt_iff_le_not_le</span><span class=\"o\">]</span>\n\n<span class=\"n\">def</span> <span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">le_map_iff_lt_map</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">partial_order</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">partial_order</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">he</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"err\">≃</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span> <span class=\"bp\">↔</span> <span class=\"n\">he</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">he</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span> <span class=\"bp\">↔</span> <span class=\"n\">he</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">he</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨</span><span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">lt_map_of_le_map</span> <span class=\"n\">he</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">hlt</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">le_iff_eq_or_lt</span><span class=\"o\">,</span> <span class=\"n\">le_iff_eq_or_lt</span><span class=\"o\">]</span><span class=\"bp\">;</span>\n  <span class=\"n\">exact</span> <span class=\"n\">or_congr</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hlt</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">⟩</span>\n</pre></div>",
        "id": 161444604,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553259083
    },
    {
        "content": "<p>I need these sorts of things to break up medium sized proofs in the perfectoid project into several smaller proofs. I am actively working on learning how to make my proofs shorter. Perhaps I'm asking the wrong question -- the question is \"is this proof maintainable\" and the answer is probably yes by this point.</p>",
        "id": 161444620,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553259108
    },
    {
        "content": "<p>I am dealing with preorders at the minute, and <code>le_equiv</code> and <code>lt_equiv</code> are not the same thing, but this is the relationship between them.</p>",
        "id": 161444970,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553259373
    },
    {
        "content": "<p>I don't think the question is whether these proofs are maintainable or not. The fact that these statement exist make other proof maintainable. And the fact that those proofs are obfuscated indicates that the statements are meant to be trivial.</p>",
        "id": 161446611,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1553260800
    },
    {
        "content": "<blockquote>\n<p>It's just an empty file in which I import only what should be relevant for the search (and I keep changing the imports depending on what I want). So no interest in posting it. What you really need to do is merge <a href=\"https://github.com/leanprover-community/mathlib/issues/839\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/839\">#839</a> in your local copy of mathlib (or merge it in mathlib if you are an admin, to bring it to everyone :).</p>\n</blockquote>\n<p><a href=\"https://github.com/leanprover-community/mathlib/issues/839\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/839\">#839</a> seems to have some travis problem.</p>",
        "id": 161469828,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553277543
    },
    {
        "content": "<p>Here's another one:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">surjective</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨λ</span> <span class=\"n\">hb</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">hb</span> <span class=\"err\">$</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">ha</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"k\">begin</span> <span class=\"n\">rcases</span> <span class=\"n\">h</span> <span class=\"n\">b</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">ha</span> <span class=\"n\">a</span> <span class=\"kn\">end</span><span class=\"bp\">⟩</span>\n</pre></div>\n\n\n<p>I am working in a project with mathlib as a dependency and merging the PR locally won't be much fun (sometimes my coauthors update mathlib so I'd lose local changes). I need this one because I have quite a complicated <code>iff</code> goal and the moment I <code>split</code> it I seem to have lost the chance to ever put the pieces together again. Rewriting this example will enable me to apply <code>forall_congr</code> and make progress. I want library_search! I guess I could run a second VS Code session with a patched mathlib project open -- or can one even do this within one VS Code session?</p>",
        "id": 161470281,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553277897
    },
    {
        "content": "<p>No luck with <code>library_search</code> on this one. Add it to the library?</p>",
        "id": 161471670,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1553279018
    },
    {
        "content": "<p>It looks similar to <code>forall_range_iff</code>, if you add it to the library they should probably be close.</p>",
        "id": 161471792,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1553279109
    },
    {
        "content": "<p><code>lt_map_of_le_map </code> looks suspiciously similar to <code>le_iff_le_iff_lt_iff_lt</code></p>",
        "id": 161483013,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1553288119
    },
    {
        "content": "<p>ooh thanks. I don't quite have the tools to search for this stuff.</p>",
        "id": 161483922,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553288747
    },
    {
        "content": "<p>I find myself writing <code>x &lt;= y iff f x &lt;= f y</code> a lot. Is that a bad way round to put it? Should it be <code>f x &lt;= f y iff x &lt;= y</code>?</p>",
        "id": 161484018,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553288783
    },
    {
        "content": "<p>use whichever is more common in the library</p>",
        "id": 161484078,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1553288846
    },
    {
        "content": "<p>I would guess the second thing</p>",
        "id": 161484108,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1553288883
    },
    {
        "content": "<blockquote>\n<p><code>lt_map_of_le_map </code> looks suspiciously similar to <code>le_iff_le_iff_lt_iff_lt</code></p>\n</blockquote>\n<p>These are not the same though. My version is different because I am quantifying more.</p>",
        "id": 161484161,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553288898
    },
    {
        "content": "<p>that's true. It is a short proof though</p>",
        "id": 161484185,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1553288924
    },
    {
        "content": "<p>That's because b &lt; a is the opposite of a &lt;= b, whereas I don't have that luxury</p>",
        "id": 161484216,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553288948
    },
    {
        "content": "<p>oh that's not true! Maybe I do!</p>",
        "id": 161484228,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553288962
    },
    {
        "content": "<p>the equiv is unnecessary I think</p>",
        "id": 161484240,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1553288969
    },
    {
        "content": "<p>there are variations of <code>le_iff_le_iff_lt_iff_lt</code> for preorders and such</p>",
        "id": 161484318,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1553289009
    },
    {
        "content": "<p>aah -- not for me.</p>",
        "id": 161484321,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553289011
    },
    {
        "content": "<p>I need the equiv because I am working with preorders.</p>",
        "id": 161484327,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553289020
    },
    {
        "content": "<p>yeah, I am back to thinking they're similar but different.</p>",
        "id": 161484353,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553289064
    },
    {
        "content": "<p>For preorders, an le_equiv implies an lt_equiv, and for partial orders they're the same</p>",
        "id": 161484377,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553289094
    },
    {
        "content": "<p>you can use <code>lt_iff_lt_of_le_iff_le'</code> to prove that first claim</p>",
        "id": 161484452,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1553289139
    },
    {
        "content": "<p>and I have a real life situation where I need this result for preorders in the perfectoid project. The relation on a ring R induced by a valuation is a preorder. I only realised this a few days ago and it's made me think about things in a new way.</p>",
        "id": 161484481,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553289167
    },
    {
        "content": "<p>and <code>le_iff_le_of_strict_mono</code> for the second</p>",
        "id": 161484519,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1553289193
    },
    {
        "content": "<p>Thanks. These little things I'm writing are clogging up my for_mathlib directory and to a certain extent it's because I still don't really know where to look for some stuff.</p>",
        "id": 161484602,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553289245
    },
    {
        "content": "<p>There is a <code>strict_mono</code> file in <code>for_mathlib/</code>, I think</p>",
        "id": 161484999,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553289591
    }
]