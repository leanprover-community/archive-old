[
    {
        "content": "<p>Ok, so apparently <code>eq.rec_on</code> is evil. I'm not sure that I really understand when it is ok to use it, and when not. Can someone explain this to me in more detail?<br>\nI still find it somewhat hard to stomach that if I have two ideals in a ring, and they are provably equal, that I have to do so much work to get a ring isomorphism between the quotients. This is not <em>transport of structure</em> along some \"canonical\" isomorphism. This is equality. I had really hoped that proof irrelevance would help here.</p>",
        "id": 158550456,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1550167785
    },
    {
        "content": "<p>Shouldn't this all be in Lean already? If <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>I</mi><mo>⊆</mo><mi>J</mi></mrow><annotation encoding=\"application/x-tex\">I\\subseteq J</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.8193em;vertical-align:-0.13597em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.07847em;\">I</span><span class=\"mrel\">⊆</span><span class=\"mord mathit\" style=\"margin-right:0.09618em;\">J</span></span></span></span> then there should be a surjection <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>R</mi><mi mathvariant=\"normal\">/</mi><mi>I</mi><mo>→</mo><mi>R</mi><mi mathvariant=\"normal\">/</mi><mi>J</mi></mrow><annotation encoding=\"application/x-tex\">R/I\\to R/J</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.00773em;\">R</span><span class=\"mord mathrm\">/</span><span class=\"mord mathit\" style=\"margin-right:0.07847em;\">I</span><span class=\"mrel\">→</span><span class=\"mord mathit\" style=\"margin-right:0.00773em;\">R</span><span class=\"mord mathrm\">/</span><span class=\"mord mathit\" style=\"margin-right:0.09618em;\">J</span></span></span></span>.</p>",
        "id": 158550579,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550167884
    },
    {
        "content": "<p>At the very least there will be a surjection of <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.00773em;\">R</span></span></span></span>-modules.</p>",
        "id": 158550603,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550167903
    },
    {
        "content": "<p>But you're supposed to use <code>quotient.lift</code> not <code>eq.rec</code></p>",
        "id": 158550679,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550167939
    },
    {
        "content": "<p>because this preserves computability mumble mumble don't know what I'm talking about</p>",
        "id": 158550701,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550167969
    },
    {
        "content": "<p>That still doesn't explain why <code>eq.rec</code> is evil, and why it exists, and why it is sometimes useful. Also, I know that workarounds exist. But really we are now writing &gt;500 lines of code just to show that if two valuations are equivalent, then so are their valuation rings. And after 10 lines we know that if two valuations are equivalent, then they define two ideals that are <strong>equal</strong>. After that, it should be a no-brainer. But it's not.</p>",
        "id": 158551833,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1550168811
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">ideal_operations</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">algebra</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">I</span> <span class=\"n\">J</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">=</span> <span class=\"n\">J</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"bp\">.</span><span class=\"n\">quotient</span> <span class=\"err\">≃</span><span class=\"n\">r</span> <span class=\"n\">J</span><span class=\"bp\">.</span><span class=\"n\">quotient</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">subst</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">ring_equiv</span><span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"bp\">_</span>\n</pre></div>",
        "id": 158552162,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550169060
    },
    {
        "content": "<p>But that requires your bundled ring maps (-;<br>\nI don't have those yet.</p>",
        "id": 158552487,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1550169261
    },
    {
        "content": "<p>They're in mathlib</p>",
        "id": 158552499,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1550169276
    },
    {
        "content": "<p>When did that happen?</p>",
        "id": 158552543,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1550169329
    },
    {
        "content": "<p>How did I miss that?</p>",
        "id": 158552547,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1550169334
    },
    {
        "content": "<p>no that's a ring equiv, not a bundled ring hom</p>",
        "id": 158552554,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550169341
    },
    {
        "content": "<p>Don't you want a particular isomorphism though? This is the right one, but it's hard to prove.</p>",
        "id": 158552555,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1550169343
    },
    {
        "content": "<p>what do you mean by hard to prove?</p>",
        "id": 158552560,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550169350
    },
    {
        "content": "<p>aha so \"ring equiv\" is like a cheating version of ring hom</p>",
        "id": 158552621,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550169365
    },
    {
        "content": "<p>and that turns out to work</p>",
        "id": 158552626,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550169373
    },
    {
        "content": "<p>so again, bundled maps for the win</p>",
        "id": 158552633,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550169378
    },
    {
        "content": "<p>No, I think <code>ring_equiv</code> is fine for my purposes.</p>",
        "id": 158552643,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1550169383
    },
    {
        "content": "<p>prove that (<a href=\"http://quotient.mk\" target=\"_blank\" title=\"http://quotient.mk\">quotient.mk</a> \\circ example) = <a href=\"http://quotient.mk\" target=\"_blank\" title=\"http://quotient.mk\">quotient.mk</a></p>",
        "id": 158552646,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1550169385
    },
    {
        "content": "<p>Maybe that's easy actually</p>",
        "id": 158552685,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1550169431
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">ideal_operations</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">algebra</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">I</span> <span class=\"n\">J</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">=</span> <span class=\"n\">J</span><span class=\"o\">)</span>\n<span class=\"n\">include</span> <span class=\"n\">h</span>\n\n<span class=\"n\">def</span> <span class=\"n\">what</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"bp\">.</span><span class=\"n\">quotient</span> <span class=\"err\">≃</span><span class=\"n\">r</span> <span class=\"n\">J</span><span class=\"bp\">.</span><span class=\"n\">quotient</span> <span class=\"o\">:=</span>\n<span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">h</span> <span class=\"err\">$</span> <span class=\"n\">ring_equiv</span><span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"bp\">_</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">what</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_fun</span> <span class=\"o\">(</span><span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">I</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">J</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">subst</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">refl</span>\n</pre></div>",
        "id": 158552796,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550169513
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> What's going on here?</p>",
        "id": 158552859,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1550169567
    },
    {
        "content": "<p>But that last one would be <code>rfl</code> if you used <code>lift</code></p>",
        "id": 158553013,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1550169678
    },
    {
        "content": "<p>Sure, but Kenny's definition of <code>what</code> is way shorter.</p>",
        "id": 158553464,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1550170039
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">ideal_operations</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">algebra</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">I</span> <span class=\"n\">J</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">=</span> <span class=\"n\">J</span><span class=\"o\">)</span>\n<span class=\"n\">include</span> <span class=\"n\">h</span>\n\n<span class=\"n\">def</span> <span class=\"n\">what</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"bp\">.</span><span class=\"n\">quotient</span> <span class=\"err\">≃</span><span class=\"n\">r</span> <span class=\"n\">J</span><span class=\"bp\">.</span><span class=\"n\">quotient</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">lift</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">J</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">r</span> <span class=\"n\">hr</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"bp\">▸</span> <span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">eq_zero_iff_mem</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">hr</span><span class=\"o\">),</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">lift</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">r</span> <span class=\"n\">hr</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"bp\">▸</span> <span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">eq_zero_iff_mem</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">hr</span><span class=\"o\">),</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">induction_on&#39;</span> <span class=\"n\">x</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">induction_on&#39;</span> <span class=\"n\">x</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n  <span class=\"n\">hom</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">induction_on₂&#39;</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">r</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">induction_on₂&#39;</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">r</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">what</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_fun</span> <span class=\"o\">(</span><span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">I</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">J</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</pre></div>",
        "id": 158554271,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550170594
    },
    {
        "content": "<p>You're never actually stuck when you have <code>eq.rec_on</code> in terms, it's just that you need to do this generalize/cases/refl dance any time you want to manipulate them. It's awkward to do this in the middle of a proof, so effectively you have to prove a lemma (like Kenny's <code>example</code>).</p>",
        "id": 158554400,
        "sender_full_name": "Reid Barton",
        "timestamp": 1550170684
    },
    {
        "content": "<p>It's conceivable one could automate this with a tactic</p>",
        "id": 158554429,
        "sender_full_name": "Reid Barton",
        "timestamp": 1550170708
    },
    {
        "content": "<p>But the version that proves the lemma is significantly shorter.</p>",
        "id": 158554755,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1550170925
    },
    {
        "content": "<p>yes, always extract lemmas</p>",
        "id": 158554828,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550171009
    }
]