[
    {
        "content": "<p>Following conversation in Amsterdam, I'm trying to use the instance <code>instance {α : Type*}: has_mem (set α) (filter α) := ⟨λ U F, U ∈ F.sets⟩</code> so that, if <code>F</code> is a filter on <code>α</code>, and <code>U</code> a subset of <code>α</code> then we can write <code>U ∈ F</code> as we do on paper. But this leads to huge mess of failing proofs in <code>filter.basic</code> because <code>s ∈ F</code> is <em>not</em> syntactically equal to <code>s ∈ F.sets</code>, although it is defeq. Is there anything I could do to improve this? Should I give up on having this instance? It would be very sad, because this <code>s ∈ F.sets</code> reads really weird</p>",
        "id": 160107362,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551887523
    },
    {
        "content": "<p>I was too pessimistic. It turns out that marking the instance as reducible goes a long way towards solving those issues. I'm working on it</p>",
        "id": 160206632,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551971952
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110294\">@Johannes Hölzl</span>  I did it! <a href=\"https://github.com/leanprover-community/mathlib/pull/799\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/pull/799\">https://github.com/leanprover-community/mathlib/pull/799</a> This was super tedious work, but the result looks great.</p>",
        "id": 160221147,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551981721
    },
    {
        "content": "<p>I think this will bring less conflicts than moving stuff around, but it should still be merged pretty quickly if we don't want any inconvenience.</p>",
        "id": 160221265,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551981810
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"210574\">@Patrick Massot</span> I still see <code>.sets</code> here: <a href=\"https://github.com/leanprover-community/mathlib/blob/e8bdc7fc14c6d56d4040892d16929f310e9d03d5/src/order/filter/basic.lean#L415-L417\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/e8bdc7fc14c6d56d4040892d16929f310e9d03d5/src/order/filter/basic.lean#L415-L417\">https://github.com/leanprover-community/mathlib/blob/e8bdc7fc14c6d56d4040892d16929f310e9d03d5/src/order/filter/basic.lean#L415-L417</a><br>\nIs that because removing it causes some breakage?</p>",
        "id": 161050950,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1552910473
    },
    {
        "content": "<p>The change only added a <code>∈</code> instance to filter. But in the proposition, <code>sets</code> is used for the projection from <code>filter</code> to <code>set</code>. While in the proof the <code>.sets</code> notation is required for the rewrite.</p>",
        "id": 161083921,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1552934051
    },
    {
        "content": "<p>So the lemma is not affected by the change.</p>",
        "id": 161083942,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1552934079
    },
    {
        "content": "<p>Aah, so this is not made \"transparent\" by some coercion.</p>",
        "id": 161084821,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1552934669
    },
    {
        "content": "<p>I'm not sure which <code>.sets</code> you are talking about. In the statement of the lemma, it's clearly needed. The notation <code>⋃</code> is not a generic one like <code>∈</code> or <code>≤</code>, it specifically means <code>set.Union</code>. So the binded expression must be a set, a filter is not good enough. In the <code>show</code> at beginning of the proof, the situation is different. Here we are indeed fighting the rigidity of <code>rw</code>, which really work on the syntactic level: a transparent instance of a defeq quantity is not good enough. This problem is almost hidden in this change because I changed almost all definition and statements to use this <code>has_mem</code> instance, so almost everything is syntactically what we want. This is why it was crucial to make the replacement everywhere at once. The only exceptions arise in statements like the one we pointed out where we really want to talk about the sets of a filter, and not talk about something belonging to these sets.</p>",
        "id": 161088208,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1552937129
    },
    {
        "content": "<p>Does it make sense?</p>",
        "id": 161088217,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1552937137
    },
    {
        "content": "<p>I think it makes sense. I find that <code>erw</code> can often succeed when <code>rw</code> fails.</p>",
        "id": 161088339,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1552937241
    },
    {
        "content": "<p>Also, would a coercion help to get rid of the <code>.sets</code> in the statement?</p>",
        "id": 161088351,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1552937262
    },
    {
        "content": "<p>I never used <code>erw</code></p>",
        "id": 161088359,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1552937274
    },
    {
        "content": "<p>Because statements like these will introduce <code>.sets</code> and then it doesn't compose nicely with all the statements where you did remove the <code>.sets</code></p>",
        "id": 161088439,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1552937312
    },
    {
        "content": "<p>Coercions rarely help in delicate situations. We are already happy when they work in situations that look straightforward</p>",
        "id": 161088451,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1552937327
    },
    {
        "content": "<p>Hmm... never mind. A coe wouldn't solve that.</p>",
        "id": 161088461,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1552937333
    },
    {
        "content": "<p>Ok... my confusion is cleared up. Thanks!</p>",
        "id": 161088500,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1552937362
    }
]