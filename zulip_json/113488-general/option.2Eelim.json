[
    {
        "content": "<p>Should the arguments of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/option.elim\">docs#option.elim</a> be swapped so that it behaves like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/sum.elim\">docs#sum.elim</a>? Mario in <code>number_theory.dioph</code> defined <a href=\"https://leanprover-community.github.io/mathlib_docs/find/option.cons\">docs#option.cons</a>, which is just <code>option.elim</code> with the arguments swapped.</p>",
        "id": 278748002,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649794845
    },
    {
        "content": "<p>What side do <a href=\"https://leanprover-community.github.io/mathlib_docs/find/and.elim\">docs#and.elim</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/or.elim\">docs#or.elim</a> fall on?</p>",
        "id": 278750550,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649796196
    },
    {
        "content": "<p>Seem like they agree with <code>option</code></p>",
        "id": 278750867,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649796369
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/iff.elim\">docs#iff.elim</a> goes the other way though</p>",
        "id": 278753054,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649797488
    },
    {
        "content": "<p>As does <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.elim\">docs#nat.elim</a></p>",
        "id": 278753215,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649797571
    },
    {
        "content": "<p>My feeling is that the <code>option.cons</code> order is the right one, and the rule should be \"<code>elim</code> is just non-dependent <code>rec</code>\"</p>",
        "id": 278753296,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649797627
    },
    {
        "content": "<p>As opposed to the current meaning \"as decided by a possibly biased coin toss, <code>elim</code> is the non-dependent version of either <code>rec</code> or <code>rec_on</code>\"</p>",
        "id": 278753431,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649797686
    },
    {
        "content": "<p>What does lean 4 do?</p>",
        "id": 278753445,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649797698
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/option.2Eelim/near/278753445\">said</a>:</p>\n<blockquote>\n<p>What does lean 4 do?</p>\n</blockquote>\n<p>Same as lean 3: it's not autogenerated so when it is created manually it's a coin toss what you get</p>",
        "id": 278763285,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1649803460
    },
    {
        "content": "<p>Does lean 4 still generate both rec and rec_on?</p>",
        "id": 278763598,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649803715
    },
    {
        "content": "<p>yes, although they are a lot less useful since they aren't <code>@[elab_as_elminator]</code></p>",
        "id": 278763983,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1649804036
    },
    {
        "content": "<p>you can't really use them directly anymore</p>",
        "id": 278763988,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1649804042
    },
    {
        "content": "<p>Why even bother having both then?</p>",
        "id": 278764325,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649804289
    },
    {
        "content": "<p>Idle question: how feasible is it to have some syntax where you can do <code>eliminator foo.rec a b c</code> and have elaborate like <code>elab_as_eliminator</code>? (Maybe it could be like an expression version of the <code>induction</code> tactic?)</p>",
        "id": 278764382,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1649804350
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> They seemed to be used at least by the <code>induction</code> tactic. (edit: oh, why <em>both</em>)</p>",
        "id": 278764889,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1649804654
    },
    {
        "content": "<p>I'm surprised <code>rec</code> alone isn't enough and that <code>rec_on</code> is worth leaving around</p>",
        "id": 278764976,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649804715
    },
    {
        "content": "<p>Maybe there's a <code>mutual</code> case where only one exists, like in lean 3</p>",
        "id": 278764998,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649804740
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/13403\">#13403</a> for moving <code>option.cons</code>. I didn't make the notation global.</p>",
        "id": 278765483,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649805138
    },
    {
        "content": "<p>Yeah, I would be on board with a term mode syntax for <code>@[elab_as_eliminator]</code>. That can be implemented in user space too</p>",
        "id": 278779942,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1649820121
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/14681\">#14681</a></p>",
        "id": 285768482,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1654937574
    }
]