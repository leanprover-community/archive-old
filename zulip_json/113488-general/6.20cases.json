[
    {
        "content": "<p>Is there a trick for doing this painlessly:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">H0</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"mi\">6</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">9</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">20</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"mi\">44</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"mi\">4</span><span class=\"o\">,</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"n\">rfl</span><span class=\"bp\">⟩</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">H1</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"mi\">6</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">9</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">20</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"mi\">44</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">5</span><span class=\"o\">,</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"n\">rfl</span><span class=\"bp\">⟩</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">H2</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"mi\">6</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">9</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">20</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"mi\">44</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"n\">rfl</span><span class=\"bp\">⟩</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">H3</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"mi\">6</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">9</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">20</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"mi\">44</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"n\">rfl</span><span class=\"bp\">⟩</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">H4</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"mi\">6</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">9</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">20</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"mi\">44</span> <span class=\"bp\">+</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"mi\">8</span><span class=\"o\">,</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"n\">rfl</span><span class=\"bp\">⟩</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">H5</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"mi\">6</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">9</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">20</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"mi\">44</span> <span class=\"bp\">+</span> <span class=\"mi\">5</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"n\">rfl</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Hr</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">6</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"mi\">6</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">9</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">20</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"mi\">44</span> <span class=\"bp\">+</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>\n\n\n<p>Currently I have</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Hlt6</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">6</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"mi\">6</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">9</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">20</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"mi\">44</span> <span class=\"bp\">+</span> <span class=\"n\">r</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"o\">(</span><span class=\"n\">lt_or_eq_of_le</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">le_of_succ_le_succ</span> <span class=\"n\">Hlt6</span><span class=\"o\">))</span> <span class=\"k\">with</span> <span class=\"n\">Hlt5</span> <span class=\"n\">Heq5</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"o\">(</span><span class=\"n\">lt_or_eq_of_le</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">le_of_succ_le_succ</span> <span class=\"n\">Hlt5</span><span class=\"o\">))</span> <span class=\"k\">with</span> <span class=\"n\">Hlt4</span> <span class=\"n\">Heq4</span><span class=\"o\">,</span>\n      <span class=\"n\">cases</span> <span class=\"o\">(</span><span class=\"n\">lt_or_eq_of_le</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">le_of_succ_le_succ</span> <span class=\"n\">Hlt4</span><span class=\"o\">))</span> <span class=\"k\">with</span> <span class=\"n\">Hlt3</span> <span class=\"n\">Heq3</span><span class=\"o\">,</span>\n        <span class=\"n\">cases</span> <span class=\"o\">(</span><span class=\"n\">lt_or_eq_of_le</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">le_of_succ_le_succ</span> <span class=\"n\">Hlt3</span><span class=\"o\">))</span> <span class=\"k\">with</span> <span class=\"n\">Hlt2</span> <span class=\"n\">Heq2</span><span class=\"o\">,</span>\n          <span class=\"n\">cases</span> <span class=\"o\">(</span><span class=\"n\">lt_or_eq_of_le</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">le_of_succ_le_succ</span> <span class=\"n\">Hlt2</span><span class=\"o\">))</span> <span class=\"k\">with</span> <span class=\"n\">Hlt1</span> <span class=\"n\">Heq1</span><span class=\"o\">,</span>\n            <span class=\"n\">cases</span> <span class=\"o\">(</span><span class=\"n\">lt_or_eq_of_le</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">le_of_succ_le_succ</span> <span class=\"n\">Hlt1</span><span class=\"o\">))</span> <span class=\"k\">with</span> <span class=\"n\">Hlt0</span> <span class=\"n\">Heq0</span><span class=\"o\">,</span>\n              <span class=\"n\">cases</span> <span class=\"n\">Hlt0</span><span class=\"o\">,</span>\n            <span class=\"n\">rw</span> <span class=\"n\">Heq0</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">H0</span><span class=\"o\">,</span>\n          <span class=\"n\">rw</span> <span class=\"n\">Heq1</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">H1</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"n\">Heq2</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">H2</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">Heq3</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">H3</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">Heq4</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">H4</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">Heq5</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">H5</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span>\n</pre></div>",
        "id": 147928252,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542570399
    },
    {
        "content": "<p>Just to be clear -- \"this\" isn't proving the 6 lemmas, it's proving the example. I guess I'd like some tactic which replaces <code>r &lt; 6 -&gt; P r</code> with <code>P 0 \\and P 1 \\and P 2 \\and P 3 \\and P 4 \\and P 5</code> which I could then just kill with <code>\\&lt;H0,H1,H2,H3,H4,H5\\&gt;</code> on one line.</p>",
        "id": 147928746,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542571253
    },
    {
        "content": "<p>Here's the context (question and solution on an M1F example sheet):</p>\n<p><a href=\"https://github.com/ImperialCollegeLondon/M1F_example_sheets/tree/master/src/example_sheet_05/Sht05Q05\" target=\"_blank\" title=\"https://github.com/ImperialCollegeLondon/M1F_example_sheets/tree/master/src/example_sheet_05/Sht05Q05\">https://github.com/ImperialCollegeLondon/M1F_example_sheets/tree/master/src/example_sheet_05/Sht05Q05</a></p>",
        "id": 147928810,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542571350
    },
    {
        "content": "<p>This isn't the tactic you want, but is (in my opinion) a little cleaner than what you posted:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Hr</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">6</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"mi\">6</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">9</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">20</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"mi\">44</span> <span class=\"bp\">+</span> <span class=\"n\">r</span> <span class=\"o\">:=</span>\n<span class=\"k\">match</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">Hr</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">H</span> <span class=\"o\">:=</span> <span class=\"n\">H0</span>\n<span class=\"bp\">|</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">H</span> <span class=\"o\">:=</span> <span class=\"n\">H1</span>\n<span class=\"bp\">|</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">H</span> <span class=\"o\">:=</span> <span class=\"n\">H2</span>\n<span class=\"bp\">|</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"n\">H</span> <span class=\"o\">:=</span> <span class=\"n\">H3</span>\n<span class=\"bp\">|</span> <span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"n\">H</span> <span class=\"o\">:=</span> <span class=\"n\">H4</span>\n<span class=\"bp\">|</span> <span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"n\">H</span> <span class=\"o\">:=</span> <span class=\"n\">H5</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">6</span><span class=\"o\">),</span> <span class=\"n\">H</span> <span class=\"o\">:=</span>\n  <span class=\"k\">begin</span>\n    <span class=\"n\">revert</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span>\n  <span class=\"kn\">end</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 147928998,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1542571671
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">H0</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"mi\">6</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">9</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">20</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"mi\">44</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"mi\">4</span><span class=\"o\">,</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"n\">rfl</span><span class=\"bp\">⟩</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">H1</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"mi\">6</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">9</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">20</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"mi\">44</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">5</span><span class=\"o\">,</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"n\">rfl</span><span class=\"bp\">⟩</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">H2</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"mi\">6</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">9</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">20</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"mi\">44</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"n\">rfl</span><span class=\"bp\">⟩</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">H3</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"mi\">6</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">9</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">20</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"mi\">44</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"n\">rfl</span><span class=\"bp\">⟩</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">H4</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"mi\">6</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">9</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">20</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"mi\">44</span> <span class=\"bp\">+</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"mi\">8</span><span class=\"o\">,</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"n\">rfl</span><span class=\"bp\">⟩</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">H5</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"mi\">6</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">9</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">20</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"mi\">44</span> <span class=\"bp\">+</span> <span class=\"mi\">5</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"n\">rfl</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Hr</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">6</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"mi\">6</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">9</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">20</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"mi\">44</span> <span class=\"bp\">+</span> <span class=\"n\">r</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">repeat</span> <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">Hr</span> <span class=\"k\">with</span> <span class=\"bp\">_</span> <span class=\"n\">Hr</span> <span class=\"o\">},</span>\n  <span class=\"n\">exacts</span> <span class=\"o\">[</span><span class=\"n\">H5</span><span class=\"o\">,</span> <span class=\"n\">H4</span><span class=\"o\">,</span> <span class=\"n\">H3</span><span class=\"o\">,</span> <span class=\"n\">H2</span><span class=\"o\">,</span> <span class=\"n\">H1</span><span class=\"o\">,</span> <span class=\"n\">H0</span><span class=\"o\">]</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 147929396,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1542572207
    },
    {
        "content": "<p>Nice! <code>exacts</code>??</p>",
        "id": 147932349,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542577395
    },
    {
        "content": "<p>it clears many goals at once</p>",
        "id": 147932362,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1542577424
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">fin_cases</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">H0</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"mi\">6</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">9</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">20</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"mi\">44</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"mi\">4</span><span class=\"o\">,</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"n\">rfl</span><span class=\"bp\">⟩</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">H1</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"mi\">6</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">9</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">20</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"mi\">44</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">5</span><span class=\"o\">,</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"n\">rfl</span><span class=\"bp\">⟩</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">H2</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"mi\">6</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">9</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">20</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"mi\">44</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"n\">rfl</span><span class=\"bp\">⟩</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">H3</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"mi\">6</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">9</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">20</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"mi\">44</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"n\">rfl</span><span class=\"bp\">⟩</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">H4</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"mi\">6</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">9</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">20</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"mi\">44</span> <span class=\"bp\">+</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"mi\">8</span><span class=\"o\">,</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"n\">rfl</span><span class=\"bp\">⟩</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">H5</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"mi\">6</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">9</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">20</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"mi\">44</span> <span class=\"bp\">+</span> <span class=\"mi\">5</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"n\">rfl</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Hr</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">6</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"mi\">6</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">9</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">20</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"mi\">44</span> <span class=\"bp\">+</span> <span class=\"n\">r</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">suffices</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">6</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"mi\">6</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">9</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">20</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"mi\">44</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">this</span> <span class=\"bp\">⟨</span><span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">Hr</span><span class=\"bp\">⟩</span> <span class=\"o\">},</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">fin_cases</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">exacts</span> <span class=\"o\">[</span><span class=\"n\">H0</span><span class=\"o\">,</span> <span class=\"n\">H1</span><span class=\"o\">,</span> <span class=\"n\">H2</span><span class=\"o\">,</span> <span class=\"n\">H3</span><span class=\"o\">,</span> <span class=\"n\">H4</span><span class=\"o\">,</span> <span class=\"n\">H5</span><span class=\"o\">]</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 148257191,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1543022931
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span></p>",
        "id": 148257197,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1543022946
    },
    {
        "content": "<p>Aah I remember Scott talking about cases on fin n. So this happened? :-) Thanks for pointing it out!</p>",
        "id": 148267406,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1543045757
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span>\n<span class=\"kn\">open</span> <span class=\"n\">lean</span><span class=\"bp\">.</span><span class=\"n\">parser</span> <span class=\"n\">tactic</span> <span class=\"n\">interactive</span>\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">nat_lt_cases</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">ident</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"n\">e</span> <span class=\"err\">←</span> <span class=\"n\">get_local</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n   <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"err\">%%</span><span class=\"n\">val</span> <span class=\"bp\">&lt;</span> <span class=\"err\">%%</span><span class=\"n\">ebound</span><span class=\"o\">)</span> <span class=\"err\">←</span> <span class=\"n\">infer_type</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n   <span class=\"n\">bound</span> <span class=\"err\">←</span> <span class=\"n\">eval_expr</span> <span class=\"bp\">ℕ</span> <span class=\"n\">ebound</span><span class=\"o\">,</span>\n   <span class=\"n\">expr</span><span class=\"bp\">.</span><span class=\"n\">local_const</span> <span class=\"bp\">_</span> <span class=\"n\">nval</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"err\">←</span> <span class=\"n\">return</span> <span class=\"n\">val</span><span class=\"o\">,</span>\n   <span class=\"n\">iterate_at_most</span> <span class=\"n\">bound</span> <span class=\"o\">(</span><span class=\"n\">do</span> <span class=\"n\">val</span> <span class=\"err\">←</span> <span class=\"n\">get_local</span> <span class=\"n\">nval</span><span class=\"o\">,</span>\n     <span class=\"o\">(</span><span class=\"bp\">_</span><span class=\"o\">,</span><span class=\"bp\">_</span><span class=\"o\">,(</span><span class=\"bp\">_</span><span class=\"o\">,</span><span class=\"n\">e</span><span class=\"o\">)</span><span class=\"bp\">::_</span><span class=\"o\">)</span><span class=\"bp\">::_</span> <span class=\"err\">←</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">cases_core</span> <span class=\"n\">val</span> <span class=\"o\">[</span><span class=\"n\">nval</span><span class=\"o\">,</span><span class=\"n\">h</span><span class=\"o\">],</span>\n     <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">clear</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">swap</span><span class=\"o\">),</span>\n   <span class=\"n\">e</span> <span class=\"err\">←</span> <span class=\"n\">get_local</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">val</span> <span class=\"err\">←</span> <span class=\"n\">get_local</span> <span class=\"n\">nval</span><span class=\"o\">,</span>\n   <span class=\"k\">proof</span> <span class=\"err\">←</span> <span class=\"n\">to_expr</span> <span class=\"bp\">```</span><span class=\"o\">(</span><span class=\"n\">absurd</span> <span class=\"err\">%%</span><span class=\"n\">e</span> <span class=\"o\">(</span><span class=\"n\">not_lt_of_ge</span> <span class=\"err\">$</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">le_add_left</span> <span class=\"err\">%%</span><span class=\"n\">ebound</span> <span class=\"err\">%%</span><span class=\"n\">val</span><span class=\"o\">)),</span>\n   <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">exact</span> <span class=\"k\">proof</span><span class=\"o\">,</span>\n   <span class=\"n\">goals</span> <span class=\"err\">←</span> <span class=\"n\">get_goals</span><span class=\"o\">,</span>\n   <span class=\"n\">set_goals</span> <span class=\"n\">goals</span><span class=\"bp\">.</span><span class=\"n\">reverse</span><span class=\"o\">,</span>\n   <span class=\"n\">skip</span>\n<span class=\"kn\">end</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">H0</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"mi\">6</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">9</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">20</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"mi\">44</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"mi\">4</span><span class=\"o\">,</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"n\">rfl</span><span class=\"bp\">⟩</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">H1</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"mi\">6</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">9</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">20</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"mi\">44</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">5</span><span class=\"o\">,</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"n\">rfl</span><span class=\"bp\">⟩</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">H2</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"mi\">6</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">9</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">20</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"mi\">44</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"n\">rfl</span><span class=\"bp\">⟩</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">H3</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"mi\">6</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">9</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">20</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"mi\">44</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"n\">rfl</span><span class=\"bp\">⟩</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">H4</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"mi\">6</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">9</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">20</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"mi\">44</span> <span class=\"bp\">+</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"mi\">8</span><span class=\"o\">,</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"n\">rfl</span><span class=\"bp\">⟩</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">H5</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"mi\">6</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">9</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">20</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"mi\">44</span> <span class=\"bp\">+</span> <span class=\"mi\">5</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"n\">rfl</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Hr</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">6</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"mi\">6</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">9</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">20</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"mi\">44</span> <span class=\"bp\">+</span> <span class=\"n\">r</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">nat_lt_cases</span> <span class=\"n\">Hr</span><span class=\"o\">,</span>\n  <span class=\"n\">exacts</span> <span class=\"o\">[</span><span class=\"n\">H0</span><span class=\"o\">,</span> <span class=\"n\">H1</span><span class=\"o\">,</span> <span class=\"n\">H2</span><span class=\"o\">,</span> <span class=\"n\">H3</span><span class=\"o\">,</span> <span class=\"n\">H4</span><span class=\"o\">,</span> <span class=\"n\">H5</span><span class=\"o\">]</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 148293408,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1543098004
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span></p>",
        "id": 148293413,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1543098007
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> how can I improve this tactic?</p>",
        "id": 148293415,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1543098017
    },
    {
        "content": "<p>Aah, they appear in the right order this time :-) I guess you can just <code>exacts [&lt;4,0,1,rfl&gt;,&lt;0,5,0,rfl&gt;,...]</code></p>",
        "id": 148293479,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1543098232
    },
    {
        "content": "<p>Someone will want you to do it for <code>Ha : r &gt; 2</code> <code>Hb : r &lt;= 6</code> at some point</p>",
        "id": 148293527,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1543098292
    },
    {
        "content": "<p>great</p>",
        "id": 148293580,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1543098471
    },
    {
        "content": "<blockquote>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span>\n<span class=\"kn\">open</span> <span class=\"n\">lean</span><span class=\"bp\">.</span><span class=\"n\">parser</span> <span class=\"n\">tactic</span> <span class=\"n\">interactive</span>\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">nat_lt_cases</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">ident</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"n\">e</span> <span class=\"err\">←</span> <span class=\"n\">get_local</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n   <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"err\">%%</span><span class=\"n\">val</span> <span class=\"bp\">&lt;</span> <span class=\"err\">%%</span><span class=\"n\">ebound</span><span class=\"o\">)</span> <span class=\"err\">←</span> <span class=\"n\">infer_type</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n   <span class=\"n\">bound</span> <span class=\"err\">←</span> <span class=\"n\">eval_expr</span> <span class=\"bp\">ℕ</span> <span class=\"n\">ebound</span><span class=\"o\">,</span>\n   <span class=\"n\">expr</span><span class=\"bp\">.</span><span class=\"n\">local_const</span> <span class=\"bp\">_</span> <span class=\"n\">nval</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"err\">←</span> <span class=\"n\">return</span> <span class=\"n\">val</span><span class=\"o\">,</span>\n   <span class=\"n\">iterate_at_most</span> <span class=\"n\">bound</span> <span class=\"o\">(</span><span class=\"n\">do</span> <span class=\"n\">val</span> <span class=\"err\">←</span> <span class=\"n\">get_local</span> <span class=\"n\">nval</span><span class=\"o\">,</span>\n     <span class=\"o\">(</span><span class=\"bp\">_</span><span class=\"o\">,</span><span class=\"bp\">_</span><span class=\"o\">,(</span><span class=\"bp\">_</span><span class=\"o\">,</span><span class=\"n\">e</span><span class=\"o\">)</span><span class=\"bp\">::_</span><span class=\"o\">)</span><span class=\"bp\">::_</span> <span class=\"err\">←</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">cases_core</span> <span class=\"n\">val</span> <span class=\"o\">[</span><span class=\"n\">nval</span><span class=\"o\">,</span><span class=\"n\">h</span><span class=\"o\">],</span>\n     <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">clear</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">swap</span><span class=\"o\">),</span>\n   <span class=\"n\">e</span> <span class=\"err\">←</span> <span class=\"n\">get_local</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">val</span> <span class=\"err\">←</span> <span class=\"n\">get_local</span> <span class=\"n\">nval</span><span class=\"o\">,</span>\n   <span class=\"k\">proof</span> <span class=\"err\">←</span> <span class=\"n\">to_expr</span> <span class=\"bp\">```</span><span class=\"o\">(</span><span class=\"n\">absurd</span> <span class=\"err\">%%</span><span class=\"n\">e</span> <span class=\"o\">(</span><span class=\"n\">not_lt_of_ge</span> <span class=\"err\">$</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">le_add_left</span> <span class=\"err\">%%</span><span class=\"n\">ebound</span> <span class=\"err\">%%</span><span class=\"n\">val</span><span class=\"o\">)),</span>\n   <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">exact</span> <span class=\"k\">proof</span><span class=\"o\">,</span>\n   <span class=\"n\">goals</span> <span class=\"err\">←</span> <span class=\"n\">get_goals</span><span class=\"o\">,</span>\n   <span class=\"n\">set_goals</span> <span class=\"n\">goals</span><span class=\"bp\">.</span><span class=\"n\">reverse</span><span class=\"o\">,</span>\n   <span class=\"n\">skip</span>\n<span class=\"kn\">end</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span>\n</pre></div>\n\n\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> what happened to this tactic, did it ever get PR'ed?</p>",
        "id": 156849825,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1548420133
    },
    {
        "content": "<p>no it didn't</p>",
        "id": 156849836,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1548420149
    },
    {
        "content": "<p>Is there a better recommended way do achieve the same result?</p>",
        "id": 156849845,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1548420175
    },
    {
        "content": "<p>no idea</p>",
        "id": 156849849,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1548420181
    },
    {
        "content": "<p>It doesn't work at all actually</p>",
        "id": 156850210,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1548420636
    },
    {
        "content": "<p>Sometimes it works but this is very unstable</p>",
        "id": 156850217,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1548420655
    },
    {
        "content": "<p>I'd be very grateful if someone can make a reliable version of this tactic</p>",
        "id": 156850397,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1548420879
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span> maybe?</p>",
        "id": 156851579,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1548422267
    },
    {
        "content": "<p>MWE:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span>\n<span class=\"kn\">open</span> <span class=\"n\">lean</span><span class=\"bp\">.</span><span class=\"n\">parser</span> <span class=\"n\">tactic</span> <span class=\"n\">interactive</span>\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">nat_lt_cases</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">ident</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"n\">e</span> <span class=\"err\">←</span> <span class=\"n\">get_local</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n   <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"err\">%%</span><span class=\"n\">val</span> <span class=\"bp\">&lt;</span> <span class=\"err\">%%</span><span class=\"n\">ebound</span><span class=\"o\">)</span> <span class=\"err\">←</span> <span class=\"n\">infer_type</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n   <span class=\"n\">bound</span> <span class=\"err\">←</span> <span class=\"n\">eval_expr</span> <span class=\"bp\">ℕ</span> <span class=\"n\">ebound</span><span class=\"o\">,</span>\n   <span class=\"n\">expr</span><span class=\"bp\">.</span><span class=\"n\">local_const</span> <span class=\"bp\">_</span> <span class=\"n\">nval</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"err\">←</span> <span class=\"n\">return</span> <span class=\"n\">val</span><span class=\"o\">,</span>\n   <span class=\"n\">iterate_at_most</span> <span class=\"n\">bound</span> <span class=\"o\">(</span><span class=\"n\">do</span> <span class=\"n\">val</span> <span class=\"err\">←</span> <span class=\"n\">get_local</span> <span class=\"n\">nval</span><span class=\"o\">,</span>\n     <span class=\"o\">(</span><span class=\"bp\">_</span><span class=\"o\">,</span><span class=\"bp\">_</span><span class=\"o\">,(</span><span class=\"bp\">_</span><span class=\"o\">,</span><span class=\"n\">e</span><span class=\"o\">)</span><span class=\"bp\">::_</span><span class=\"o\">)</span><span class=\"bp\">::_</span> <span class=\"err\">←</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">cases_core</span> <span class=\"n\">val</span> <span class=\"o\">[</span><span class=\"n\">nval</span><span class=\"o\">,</span><span class=\"n\">h</span><span class=\"o\">],</span>\n     <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">clear</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">swap</span><span class=\"o\">),</span>\n   <span class=\"n\">e</span> <span class=\"err\">←</span> <span class=\"n\">get_local</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">val</span> <span class=\"err\">←</span> <span class=\"n\">get_local</span> <span class=\"n\">nval</span><span class=\"o\">,</span>\n   <span class=\"k\">proof</span> <span class=\"err\">←</span> <span class=\"n\">to_expr</span> <span class=\"bp\">```</span><span class=\"o\">(</span><span class=\"n\">absurd</span> <span class=\"err\">%%</span><span class=\"n\">e</span> <span class=\"o\">(</span><span class=\"n\">not_lt_of_ge</span> <span class=\"err\">$</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">le_add_left</span> <span class=\"err\">%%</span><span class=\"n\">ebound</span> <span class=\"err\">%%</span><span class=\"n\">val</span><span class=\"o\">)),</span>\n   <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">exact</span> <span class=\"k\">proof</span><span class=\"o\">,</span>\n   <span class=\"n\">goals</span> <span class=\"err\">←</span> <span class=\"n\">get_goals</span><span class=\"o\">,</span>\n   <span class=\"n\">set_goals</span> <span class=\"n\">goals</span><span class=\"bp\">.</span><span class=\"n\">reverse</span><span class=\"o\">,</span>\n   <span class=\"n\">skip</span>\n<span class=\"kn\">end</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span>\n\n<span class=\"n\">def</span> <span class=\"n\">pair</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">k</span>\n\n<span class=\"n\">def</span> <span class=\"n\">impair</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">div_euclide</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"bp\">.</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">exact_dec_trivial</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">q</span> <span class=\"bp\">+</span> <span class=\"n\">r</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨</span><span class=\"n\">a</span><span class=\"bp\">/</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">a</span> <span class=\"err\">%</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">add_comm</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">mod_add_div</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">mod_lt</span> <span class=\"n\">a</span> <span class=\"n\">hb</span><span class=\"o\">]</span><span class=\"bp\">⟩⟩</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">pair_ou_impair</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">pair</span> <span class=\"n\">n</span> <span class=\"bp\">∨</span> <span class=\"n\">impair</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">rcases</span>  <span class=\"n\">div_euclide</span> <span class=\"n\">n</span> <span class=\"mi\">2</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span><span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">hnqr</span><span class=\"o\">,</span> <span class=\"n\">hr</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">nat_lt_cases</span> <span class=\"n\">hr</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">left</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"n\">q</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">hnqr</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">right</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"n\">q</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">hnqr</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>The assumption <code>hnqr</code> randomly disappears from context in either or both of the branches</p>",
        "id": 156851743,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1548422426
    },
    {
        "content": "<p>make another assumption that depends on <code>hnqr</code> so it can't be deleted :-)</p>",
        "id": 156851945,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1548422646
    },
    {
        "content": "<p>Kevin, how would you do this proof in your classes?</p>",
        "id": 156852105,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1548422848
    },
    {
        "content": "<p>Isn't fin_cases supposed to do this? (But fin_cases failed for unclear reasons, the only time I tried it.)</p>",
        "id": 156853132,
        "sender_full_name": "Neil Strickland",
        "timestamp": 1548423931
    },
    {
        "content": "<p>My data is not in <code>fin 2</code>, it is a <code>nat</code> which, by assumption, is less than 2. I don't want the overhead of translating back and forth between those two setups (that are mathematically indistinguishable)</p>",
        "id": 156853585,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1548424370
    },
    {
        "content": "<p>I'm about to start classes on mathematical reasoning. I'll try to use Lean as a tool, but I'm not running a Lean course</p>",
        "id": 156853620,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1548424419
    },
    {
        "content": "<p>I want all the technical Lean stuff to be hidden in mathlib or custom imports</p>",
        "id": 156853676,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1548424458
    },
    {
        "content": "<p>I can take a shot at it. When you say the assumption randomly disappears, do you really mean its behavior changes in the same proof?</p>",
        "id": 156853942,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1548424690
    },
    {
        "content": "<p>Yes, it can change if you restart Lean, or add unrelated stuff before the lemma etc.</p>",
        "id": 156853967,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1548424723
    },
    {
        "content": "<p>Pretty much the same hell as with <code>tfae</code></p>",
        "id": 156853976,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1548424735
    },
    {
        "content": "<p>Hmm, okay.</p>",
        "id": 156853978,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1548424737
    },
    {
        "content": "<p>Can you reproduce that using my MNWE?</p>",
        "id": 156854548,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1548425203
    },
    {
        "content": "<p>Yeah, I can reproduce.</p>",
        "id": 156855480,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1548426110
    },
    {
        "content": "<p>And can you fix it?</p>",
        "id": 156855542,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1548426143
    },
    {
        "content": "<p>Not instantly!</p>",
        "id": 156855548,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1548426157
    },
    {
        "content": "<p>I see your grant money drifting away from you...</p>",
        "id": 156855558,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1548426178
    },
    {
        "content": "<p>I know grant proposals are usually ambitious, but \"I can fix any bug in 10 seconds\" might scare off even the ERC.</p>",
        "id": 156855647,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1548426267
    },
    {
        "content": "<p>I don't know what <code>tactic.clear e</code> is supposed to achieve. Deleting that seems to solve the issue.</p>",
        "id": 156856534,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1548427143
    },
    {
        "content": "<p>But I also don't know where the undeterminism is coming from.</p>",
        "id": 156856547,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1548427152
    },
    {
        "content": "<p>This whole tactic should probably be wrapped in <code>focus1</code>. If there's more than one goal when you call it, the order gets screwed up.</p>",
        "id": 156856638,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1548427216
    },
    {
        "content": "<p>Thanks! How do you \"wrap in <code>focus1</code>\"?</p>",
        "id": 156856799,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1548427334
    },
    {
        "content": "<p><code>meta def nat_lt_cases (h : parse ident) : tactic unit := focus1 $ do ...</code></p>",
        "id": 156856812,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1548427353
    },
    {
        "content": "<p>I tried to build a version which would also work with <code>≤</code> but failed. How would you try <code>  `(%%val &lt; %%ebound) ← infer_type e,</code> and then try <code>  `(%%val ≤ %%ebound) ← infer_type e, </code> and tweak the bound accordingly?</p>",
        "id": 156863864,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1548433337
    },
    {
        "content": "<p>I'd just define something like this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">get_lt_sides</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"o\">(</span><span class=\"n\">expr</span> <span class=\"bp\">×</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"err\">%%</span><span class=\"n\">val</span> <span class=\"bp\">≤</span> <span class=\"err\">%%</span><span class=\"n\">ebound</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">val</span> <span class=\"bp\">&lt;</span><span class=\"err\">$</span><span class=\"bp\">&gt;</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"bp\">&lt;</span><span class=\"err\">$</span><span class=\"bp\">&gt;</span> <span class=\"n\">eval_expr</span> <span class=\"bp\">ℕ</span> <span class=\"n\">ebound</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"err\">%%</span><span class=\"n\">val</span> <span class=\"bp\">&lt;</span> <span class=\"err\">%%</span><span class=\"n\">ebound</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">val</span> <span class=\"bp\">&lt;</span><span class=\"err\">$</span><span class=\"bp\">&gt;</span> <span class=\"n\">eval_expr</span> <span class=\"bp\">ℕ</span> <span class=\"n\">ebound</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"n\">failed</span>\n</pre></div>",
        "id": 156865663,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1548434915
    },
    {
        "content": "<p>You can probably take advantage of the fact that <code>nat.lt</code> is defined in terms of <code>nat.le</code>.</p>",
        "id": 156865779,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1548435040
    },
    {
        "content": "<p>I'm afraid this will rather be a disadvantage. The le case may match when I want lt to match</p>",
        "id": 156866770,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1548435851
    },
    {
        "content": "<p>But I can't use this <code>get_lt_sides</code> in any case</p>",
        "id": 156866784,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1548435868
    },
    {
        "content": "<p>If you modify the tactic to work on an le proof instead of a lt proof, and use <code>get_lt_sides</code> at the beginning to compute <code>bound</code>, it should work when given either an le or an lt proof.</p>",
        "id": 156867226,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1548436297
    },
    {
        "content": "<p>Maybe I can actually</p>",
        "id": 156867228,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1548436299
    },
    {
        "content": "<p>My problem was I was not able to reconstitute <code>ebound</code> from <code>bound</code> but I cheated in</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">namespace</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span>\n<span class=\"kn\">open</span> <span class=\"n\">lean</span><span class=\"bp\">.</span><span class=\"n\">parser</span> <span class=\"n\">tactic</span> <span class=\"n\">interactive</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">get_lt_sides</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"o\">(</span><span class=\"n\">expr</span> <span class=\"bp\">×</span> <span class=\"n\">expr</span> <span class=\"bp\">×</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"err\">%%</span><span class=\"n\">val</span> <span class=\"bp\">&lt;</span> <span class=\"err\">%%</span><span class=\"n\">ebound</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">val</span> <span class=\"bp\">&lt;</span><span class=\"err\">$</span><span class=\"bp\">&gt;</span> <span class=\"o\">(</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">ebound</span> <span class=\"bp\">&lt;</span><span class=\"err\">$</span><span class=\"bp\">&gt;</span> <span class=\"n\">eval_expr</span> <span class=\"bp\">ℕ</span> <span class=\"n\">ebound</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"err\">%%</span><span class=\"n\">val</span> <span class=\"bp\">≤</span> <span class=\"err\">%%</span><span class=\"n\">ebound</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">val</span> <span class=\"bp\">&lt;</span><span class=\"err\">$</span><span class=\"bp\">&gt;</span> <span class=\"o\">(</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">ebound</span> <span class=\"bp\">&lt;</span><span class=\"err\">$</span><span class=\"bp\">&gt;</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"bp\">&lt;</span><span class=\"err\">$</span><span class=\"bp\">&gt;</span> <span class=\"n\">eval_expr</span> <span class=\"bp\">ℕ</span> <span class=\"n\">ebound</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"n\">failed</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">nat_cases</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">ident</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">focus1</span> <span class=\"err\">$</span> <span class=\"n\">do</span> <span class=\"n\">e</span> <span class=\"err\">←</span> <span class=\"n\">get_local</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n   <span class=\"bp\">⟨</span><span class=\"n\">val</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">ebound</span><span class=\"o\">,</span> <span class=\"n\">bound</span><span class=\"bp\">⟩⟩</span> <span class=\"err\">←</span> <span class=\"n\">infer_type</span> <span class=\"n\">e</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">get_lt_sides</span><span class=\"o\">,</span>\n   <span class=\"n\">expr</span><span class=\"bp\">.</span><span class=\"n\">local_const</span> <span class=\"bp\">_</span> <span class=\"n\">nval</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"err\">←</span> <span class=\"n\">return</span> <span class=\"n\">val</span><span class=\"o\">,</span>\n   <span class=\"n\">iterate_at_most</span> <span class=\"n\">bound</span> <span class=\"o\">(</span><span class=\"n\">do</span> <span class=\"n\">val</span> <span class=\"err\">←</span> <span class=\"n\">get_local</span> <span class=\"n\">nval</span><span class=\"o\">,</span>\n     <span class=\"o\">(</span><span class=\"bp\">_</span><span class=\"o\">,</span><span class=\"bp\">_</span><span class=\"o\">,(</span><span class=\"bp\">_</span><span class=\"o\">,</span><span class=\"n\">e</span><span class=\"o\">)</span><span class=\"bp\">::_</span><span class=\"o\">)</span><span class=\"bp\">::_</span> <span class=\"err\">←</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">cases_core</span> <span class=\"n\">val</span> <span class=\"o\">[</span><span class=\"n\">nval</span><span class=\"o\">,</span><span class=\"n\">h</span><span class=\"o\">],</span>\n     <span class=\"n\">swap</span><span class=\"o\">),</span>\n   <span class=\"n\">e</span> <span class=\"err\">←</span> <span class=\"n\">get_local</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">val</span> <span class=\"err\">←</span> <span class=\"n\">get_local</span> <span class=\"n\">nval</span><span class=\"o\">,</span>\n   <span class=\"k\">proof</span> <span class=\"err\">←</span> <span class=\"n\">to_expr</span> <span class=\"bp\">```</span><span class=\"o\">(</span><span class=\"n\">absurd</span> <span class=\"err\">%%</span><span class=\"n\">e</span> <span class=\"o\">(</span><span class=\"n\">not_lt_of_ge</span> <span class=\"err\">$</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">le_add_left</span> <span class=\"err\">%%</span><span class=\"n\">ebound</span> <span class=\"err\">%%</span><span class=\"n\">val</span><span class=\"o\">)),</span>\n   <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">exact</span> <span class=\"k\">proof</span><span class=\"o\">,</span>\n   <span class=\"n\">goals</span> <span class=\"err\">←</span> <span class=\"n\">get_goals</span><span class=\"o\">,</span>\n   <span class=\"n\">set_goals</span> <span class=\"n\">goals</span><span class=\"bp\">.</span><span class=\"n\">reverse</span><span class=\"o\">,</span>\n   <span class=\"n\">skip</span>\n<span class=\"kn\">end</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span>\n</pre></div>",
        "id": 156867457,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1548436488
    },
    {
        "content": "<p>But we still have the esthetic problem that you removed the <code>tactic.clear</code> which was meant to get rid of the bound assumption (which is turned into silly inequalities after running the tactic)</p>",
        "id": 156867686,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1548436686
    },
    {
        "content": "<p>Add <code>clear_lst [h]</code> before <code>swap</code>, I think.</p>",
        "id": 156867944,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1548436928
    },
    {
        "content": "<p><code>clear</code> takes an expr, <code>clear_lst</code> takes a list of names, I think we're missing a version that takes a single name.</p>",
        "id": 156867965,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1548436974
    },
    {
        "content": "<p>Thank you very much Rob (and Kenny for the initial version). What I currently have is:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">open</span> <span class=\"n\">tactic</span>\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">get_nat_ineq</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"o\">(</span><span class=\"n\">expr</span> <span class=\"bp\">×</span> <span class=\"n\">expr</span> <span class=\"bp\">×</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"err\">%%</span><span class=\"n\">val</span> <span class=\"bp\">&lt;</span> <span class=\"err\">%%</span><span class=\"n\">ebound</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">val</span> <span class=\"bp\">&lt;</span><span class=\"err\">$</span><span class=\"bp\">&gt;</span> <span class=\"o\">(</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">ebound</span> <span class=\"bp\">&lt;</span><span class=\"err\">$</span><span class=\"bp\">&gt;</span> <span class=\"n\">eval_expr</span> <span class=\"bp\">ℕ</span> <span class=\"n\">ebound</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"err\">%%</span><span class=\"n\">val</span> <span class=\"bp\">≤</span> <span class=\"err\">%%</span><span class=\"n\">ebound</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">val</span> <span class=\"bp\">&lt;</span><span class=\"err\">$</span><span class=\"bp\">&gt;</span> <span class=\"o\">(</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">ebound</span> <span class=\"bp\">&lt;</span><span class=\"err\">$</span><span class=\"bp\">&gt;</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"bp\">&lt;</span><span class=\"err\">$</span><span class=\"bp\">&gt;</span> <span class=\"n\">eval_expr</span> <span class=\"bp\">ℕ</span> <span class=\"n\">ebound</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"n\">failed</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span>\n<span class=\"kn\">open</span> <span class=\"n\">lean</span><span class=\"bp\">.</span><span class=\"n\">parser</span> <span class=\"n\">interactive</span>\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">nat_cases</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">ident</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">focus1</span> <span class=\"err\">$</span> <span class=\"n\">do</span>\n  <span class=\"n\">e</span> <span class=\"err\">←</span> <span class=\"n\">get_local</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"bp\">⟨</span><span class=\"n\">val</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">ebound</span><span class=\"o\">,</span> <span class=\"n\">bound</span><span class=\"bp\">⟩⟩</span> <span class=\"err\">←</span> <span class=\"n\">infer_type</span> <span class=\"n\">e</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">get_nat_ineq</span><span class=\"o\">,</span>\n  <span class=\"n\">expr</span><span class=\"bp\">.</span><span class=\"n\">local_const</span> <span class=\"bp\">_</span> <span class=\"n\">nval</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"err\">←</span> <span class=\"n\">return</span> <span class=\"n\">val</span><span class=\"o\">,</span>\n  <span class=\"n\">iterate_at_most</span> <span class=\"n\">bound</span> <span class=\"err\">$</span> <span class=\"n\">do</span> <span class=\"o\">{</span>\n      <span class=\"n\">val</span> <span class=\"err\">←</span> <span class=\"n\">get_local</span> <span class=\"n\">nval</span><span class=\"o\">,</span>\n      <span class=\"o\">(</span><span class=\"bp\">_</span><span class=\"o\">,</span><span class=\"bp\">_</span><span class=\"o\">,(</span><span class=\"bp\">_</span><span class=\"o\">,</span><span class=\"n\">e</span><span class=\"o\">)</span><span class=\"bp\">::_</span><span class=\"o\">)</span><span class=\"bp\">::_</span> <span class=\"err\">←</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">cases_core</span> <span class=\"n\">val</span> <span class=\"o\">[</span><span class=\"n\">nval</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">],</span>\n      <span class=\"n\">clear_lst</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">],</span>\n      <span class=\"n\">swap</span><span class=\"o\">},</span>\n  <span class=\"n\">e</span> <span class=\"err\">←</span> <span class=\"n\">get_local</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">val</span> <span class=\"err\">←</span> <span class=\"n\">get_local</span> <span class=\"n\">nval</span><span class=\"o\">,</span>\n  <span class=\"k\">proof</span> <span class=\"err\">←</span> <span class=\"n\">to_expr</span> <span class=\"bp\">```</span><span class=\"o\">(</span><span class=\"n\">absurd</span> <span class=\"err\">%%</span><span class=\"n\">e</span> <span class=\"o\">(</span><span class=\"n\">not_lt_of_ge</span> <span class=\"err\">$</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">le_add_left</span> <span class=\"err\">%%</span><span class=\"n\">ebound</span> <span class=\"err\">%%</span><span class=\"n\">val</span><span class=\"o\">)),</span>\n  <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">exact</span> <span class=\"k\">proof</span><span class=\"o\">,</span>\n  <span class=\"n\">goals</span> <span class=\"err\">←</span> <span class=\"n\">get_goals</span><span class=\"o\">,</span>\n  <span class=\"n\">set_goals</span> <span class=\"n\">goals</span><span class=\"bp\">.</span><span class=\"n\">reverse</span>\n<span class=\"kn\">end</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span>\n</pre></div>\n\n\n<p>It works for me, and I think this is a very useful tactic. Do you want to open a PR? Would you like me to do it?</p>",
        "id": 156868588,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1548437574
    },
    {
        "content": "<p>Or should we wait until someone does a version consuming an optional lower bound?</p>",
        "id": 156869028,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1548437947
    },
    {
        "content": "<p>I also have tests if you want to PR:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"mi\">10</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">nat_cases</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">do</span> <span class=\"o\">{</span> <span class=\"n\">goals</span> <span class=\"err\">←</span> <span class=\"n\">get_goals</span><span class=\"o\">,</span> <span class=\"n\">guard</span> <span class=\"o\">(</span><span class=\"n\">goals</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">=</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"n\">all_goals</span> <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">dec_trivial</span><span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"mi\">10</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">nat_cases</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">do</span> <span class=\"o\">{</span> <span class=\"n\">goals</span> <span class=\"err\">←</span> <span class=\"n\">get_goals</span><span class=\"o\">,</span> <span class=\"n\">guard</span> <span class=\"o\">(</span><span class=\"n\">goals</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"n\">all_goals</span> <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">dec_trivial</span><span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 156869069,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1548437993
    },
    {
        "content": "<p>Nice! I think this is \"complete\" when it takes an optional lower bound (and in that case, works for <code>int</code> also). When you write something that does x, and y looks similar to x, people will eventually ask you to make it do y as well. <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 156870702,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1548439296
    },
    {
        "content": "<p>Going from here to there is nontrivial but not super difficult.</p>",
        "id": 156870820,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1548439393
    },
    {
        "content": "<p>I'd love to see that</p>",
        "id": 156870830,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1548439410
    },
    {
        "content": "<p>This could be a good exercise for anyone looking to get better at writing tactics. I don't mind seeing this PR'ed as is, with a little cleanup, with the expectation that someone will finish it.</p>",
        "id": 156870956,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1548439505
    },
    {
        "content": "<p>For cleanup: you don't need to bind the result of <code>cases_core</code>. There are some unneeded <code>tactic.</code> names since you have <code>tactic</code> open.</p>",
        "id": 156871085,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1548439632
    },
    {
        "content": "<p>I think that <code>tactic.exact</code> is there to disambiguate from <code>tactic.interactive.exact</code></p>",
        "id": 156871498,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1548439996
    },
    {
        "content": "<p>I'd like to know how to avoid that <code>ebound</code> hack though. Inside a tactic, I have a <code>nat</code> taken from a function returning <code>tactic nat</code>, how can I turn it into an <code>expr</code>?</p>",
        "id": 156873782,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1548441921
    },
    {
        "content": "<p>if <code>n</code> is your <code>nat</code>, <code>reflect n</code> will give you an expression that corresponds to it</p>",
        "id": 156879188,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1548445618
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 156879299,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1548445695
    }
]