[
    {
        "content": "<p>Consider the following lemma, saying that two equal functions taking two equal arguments give the same result, but in a somewhat dependent setting:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">dependent_helper</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"err\">Σ</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"bp\">ℤ</span><span class=\"o\">)}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">=</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">iF</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">iG</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">jF</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">&lt;</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">jG</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">&lt;</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">iF</span><span class=\"bp\">⟩</span> <span class=\"bp\">⟨</span><span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">jF</span><span class=\"bp\">⟩</span> <span class=\"bp\">=</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">iG</span><span class=\"bp\">⟩</span> <span class=\"bp\">⟨</span><span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">jG</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">subst</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">refl</span>\n</pre></div>\n\n\n<p>This works fine. However, exactly in the same situation but in the middle of a more complicated proof (see <a href=\"https://github.com/sgouezel/mathlib/blob/a734bb06a1c4e833cfd1bad117eb0b500f26e929/src/topology/metric_space/gromov_hausdorff.lean#L1287\" target=\"_blank\" title=\"https://github.com/sgouezel/mathlib/blob/a734bb06a1c4e833cfd1bad117eb0b500f26e929/src/topology/metric_space/gromov_hausdorff.lean#L1287\">https://github.com/sgouezel/mathlib/blob/a734bb06a1c4e833cfd1bad117eb0b500f26e929/src/topology/metric_space/gromov_hausdorff.lean#L1287</a> -- here, <code>hpq</code> is <code>F p = F q</code>), this proof does not work. I proved the above helper lemma separately and applied it, and this solves my problem, but I would like to understand what is going on and why the substitution does not work in the middle of my big proof. I did not find anything about this in TPIL, would you have some pointer?</p>",
        "id": 157429547,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1549125596
    },
    {
        "content": "<p><code>subst</code> only works when one side is a local constant. It's a very annoying problem.</p>",
        "id": 157429629,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1549125722
    },
    {
        "content": "<p>Did you try <code>erw</code>?</p>",
        "id": 157429665,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549125744
    },
    {
        "content": "<p><code>erw hpq</code> gives</p>\n<div class=\"codehilite\"><pre><span></span>rewrite tactic failed, motive is not type correct\nnested exception message:\ncheck failed, application type mismatch (use &#39;set_option trace.check true&#39; for additional details)\n</pre></div>",
        "id": 157429740,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1549125890
    },
    {
        "content": "<p>oh yeah, that's a familiar message.</p>",
        "id": 157429754,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549125911
    },
    {
        "content": "<p>The trace is</p>\n<div class=\"codehilite\"><pre><span></span>[check] application type mismatch at\n  ⟨i, hip⟩\nargument type\n  i &lt; N p\nexpected type\n  i &lt; _a.fst\n</pre></div>",
        "id": 157429755,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1549125926
    },
    {
        "content": "<p>Welcome to dependent type theory.</p>",
        "id": 157429759,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549125942
    },
    {
        "content": "<p>If it's any consolation, I was singing your praises at a talk in Cambridge last Wednesday.</p>",
        "id": 157429807,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549126014
    },
    {
        "content": "<p>Most of the time, I manage to avoid any real use of dependent types, but for this proof this is really the way to go. Anyway, at the end it works!</p>",
        "id": 157429808,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1549126017
    },
    {
        "content": "<p>It's always a consolation to be praised :)</p>",
        "id": 157429816,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1549126042
    },
    {
        "content": "<p>In front of Larry Paulson no less.</p>",
        "id": 157429822,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549126057
    },
    {
        "content": "<p>The proof I am writing is something that is completely impossible in Isabelle. But don't tell that to Larry.</p>",
        "id": 157429876,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1549126107
    },
    {
        "content": "<p>He would just tell you that you were wrong.</p>",
        "id": 157429886,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549126154
    },
    {
        "content": "<p>He asked one of his post-docs on Wednesday to go away and formalise schemes in Isabelle. My impression from talking to people here was that this was not such a good idea, but I couldn't really tell her this in front of him. But back to your question -- I would be interested to know whether the problem you're now running into are solvable in some sensible way or whether there are genuine issues. I have been banging on here for a while now about how it's really annoying that you can't painlessly rewrite along \"canonical isomorphisms\", but you have an explicit example where rewriting an equality is painful and it would be interesting to see what the experts have to say about it. My understanding is that this sort of problem does not occur in Isabelle because there are no dependent types, but I really am still a novice in these matters.</p>",
        "id": 157429997,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549126337
    },
    {
        "content": "<p>I would like to be able to deduce that a topological space<code>Y</code> is compact, given that <code>X</code> is compact and that <code>X</code> and <code>Y</code> are homeomorphic, using a rewrite; this seems to be genuinely technically difficult though. But you're rewriting an equality so it should be easier. Maybe someone will just come along and tell you how to do it using the tactics we have.</p>",
        "id": 157430016,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549126439
    },
    {
        "content": "<p>I completely agree with you that transferring structure is not solved yet in a satisfactory way. For a simple example, assume that a space X is such that, for all e&gt;0, the space X can be covered by finitely many balls or radius e such that any 5 of them have empty intersection. If Y is isometric to X, then the same property holds obviously for Y, but proving this in Lean would be utterly tedious now...</p>",
        "id": 157431214,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1549128660
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">GH_space</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">GH_space</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">GH_space</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">hip</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">N</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">hiq</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">N</span> <span class=\"n\">q</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">hjp</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">&lt;</span> <span class=\"n\">N</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">hjq</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">&lt;</span> <span class=\"n\">N</span> <span class=\"n\">q</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">GH_space</span><span class=\"o\">,</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span>\n<span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">5</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n\n<span class=\"k\">let</span> <span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">GH_space</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"err\">Σ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">λ</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">⟨</span><span class=\"n\">N</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"bp\">⟩</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"err\">Σ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"bp\">ℤ</span><span class=\"o\">)),</span>\n<span class=\"k\">have</span> <span class=\"n\">hpq</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">F</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span> <span class=\"c1\">-- implies N p = N q</span>\n<span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">snd</span> <span class=\"bp\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">hip</span><span class=\"bp\">⟩</span> <span class=\"bp\">⟨</span><span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">hjp</span><span class=\"bp\">⟩</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">q</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">snd</span> <span class=\"bp\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">hiq</span><span class=\"bp\">⟩</span> <span class=\"bp\">⟨</span><span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">hjq</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">sorry</span><span class=\"o\">,</span> <span class=\"c1\">-- this is Sebastien&#39;s question.</span>\n  <span class=\"n\">sorry</span> <span class=\"c1\">-- 2 + 2 isn&#39;t 5</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>This is some sort of minimised version of Sebastien's question. The hypothesis that <code>F p = F q</code> implies that <code>N p = N q</code>, so the goal <code>(F p).snd ⟨i, hip⟩ ⟨j, hjp⟩ = (F q).snd ⟨i, hiq⟩ ⟨j, hjq⟩</code> is a simultaneous rewrite of <code>hpq</code> and its corollaries all in one go. The question is whether there's a slick way to remove that last-but-one sorry. I had to make a random auxiliary goal otherwise there would be <code>let</code>s in the goal.</p>",
        "id": 157431465,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549129154
    },
    {
        "content": "<p>As for the balls of radius e question, whenever I came up with an example <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> would point out that the rewrite I wanted was a consequence of a stronger statement which I was going to have to prove anyway, so I should stop moaning. I've always been looking for a real-world example which he couldn't counter in this way. Maybe this is one? Just to be clear -- I believe that <span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> and <span class=\"user-mention\" data-user-id=\"110294\">@Johannes Hölzl</span> talked about this problem in Amsterdam last month and my impression is that there actually _is_ some kind of solution in dependent type theory to problems of this nature, but all I know is that it involves <code>transfer</code> or something. As I'm sure you know, the problem is that it's not true that an arbitrary statement about <code>X</code> is also true for <code>Y</code>, e.g. if <code>P Z := Z = X</code> then <code>P X</code> is true but <code>P Y</code> is not. The point is that any statement about metric spaces which a mathematician finds reasonable will be true for X iff it's true for Y. I have not given up hope that there will one day be a tactic which solves this sort of problem.</p>",
        "id": 157431736,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549129566
    },
    {
        "content": "<p>Here's my solution to that problem in situ:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">GH_space</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">GH_space</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">GH_space</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">hip</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">N</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">hiq</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">N</span> <span class=\"n\">q</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">hjp</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">&lt;</span> <span class=\"n\">N</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">hjq</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">&lt;</span> <span class=\"n\">N</span> <span class=\"n\">q</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">GH_space</span><span class=\"o\">,</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span>\n<span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">5</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">GH_space</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"err\">Σ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"bp\">λ</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">⟨</span><span class=\"n\">N</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"bp\">⟩</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"err\">Σ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"bp\">ℤ</span><span class=\"o\">)),</span>\n  <span class=\"k\">have</span> <span class=\"n\">hpq</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">F</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span> <span class=\"c1\">-- implies N p = N q</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">snd</span> <span class=\"bp\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">hip</span><span class=\"bp\">⟩</span> <span class=\"bp\">⟨</span><span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">hjp</span><span class=\"bp\">⟩</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">q</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">snd</span> <span class=\"bp\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">hiq</span><span class=\"bp\">⟩</span> <span class=\"bp\">⟨</span><span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">hjq</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">revert</span> <span class=\"n\">hiq</span> <span class=\"n\">hjq</span><span class=\"o\">,</span>\n    <span class=\"n\">change</span> <span class=\"n\">N</span> <span class=\"n\">q</span> <span class=\"k\">with</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">q</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span>\n    <span class=\"n\">generalize_hyp</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">at</span> <span class=\"n\">hpq</span> <span class=\"err\">⊢</span><span class=\"o\">,</span> <span class=\"n\">subst</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span><span class=\"o\">,</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n  <span class=\"n\">sorry</span> <span class=\"c1\">-- 2 + 2 isn&#39;t 5</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 157463352,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549190532
    },
    {
        "content": "<p>Very instructive, thanks. From what I understand, you do what is needed to replace <code>F q</code> by a constant <code>f</code>, then substitute and now it is allowed. Is this limitation of <code>subst</code>, that it can only work with local constants, something that is unavoidable and will stay like that forever, or is there a possibility that it could be improved at some point?</p>",
        "id": 157464291,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1549192540
    },
    {
        "content": "<p>it's a fundamental part of how it works. <code>subst</code> can only apply when one side is a variable, but the benefit is that it will never have a \"not type correct\" error, because it eliminates the variable in the equality completely using eq.rec</p>",
        "id": 157464605,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549193136
    },
    {
        "content": "<p>In this case, we have a combination of <code>generalize_hyp</code> and <code>subst</code> that is essentially what <code>rw</code> does - conceivably with some rearrangement I could also use <code>rw</code> to do this trick</p>",
        "id": 157464650,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549193203
    },
    {
        "content": "<p>ah yes, this also works</p>\n<div class=\"codehilite\"><pre><span></span>  <span class=\"o\">{</span> <span class=\"n\">revert</span> <span class=\"n\">hiq</span> <span class=\"n\">hjq</span><span class=\"o\">,</span>\n    <span class=\"n\">change</span> <span class=\"n\">N</span> <span class=\"n\">q</span> <span class=\"k\">with</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">q</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">hpq</span><span class=\"o\">,</span> <span class=\"n\">intros</span><span class=\"o\">,</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n</pre></div>",
        "id": 157464710,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549193320
    },
    {
        "content": "<blockquote>\n<p>ah yes, this also works</p>\n<div class=\"codehilite\"><pre><span></span>  <span class=\"o\">{</span> <span class=\"n\">revert</span> <span class=\"n\">hiq</span> <span class=\"n\">hjq</span><span class=\"o\">,</span>\n    <span class=\"n\">change</span> <span class=\"n\">N</span> <span class=\"n\">q</span> <span class=\"k\">with</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">q</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">hpq</span><span class=\"o\">,</span> <span class=\"n\">intros</span><span class=\"o\">,</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n</pre></div>\n\n\n</blockquote>\n<p>This example must be oversimplified, as this does not work in my real-world example. But the previous solution based on <code>subst</code> works fine.</p>",
        "id": 157472488,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1549208696
    }
]