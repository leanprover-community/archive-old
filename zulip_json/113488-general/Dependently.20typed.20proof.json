[
    {
        "content": "<p>I don't suppose this sorry is provable - how does one convince Lean that whatever it is that I am mapping over comes from the list being mapped over? I can show that: <code>x ∈ filter P xs -&gt; P x</code>, but I can't tell map <code>x ∈ filter P xs</code>, even though it's \"obvious\". This is a toy version of what I am trying to do:</p>\n<div class=\"codehilite\"><pre><span></span>def positive := {x : ℤ // x &gt; 0}\ndef x_of_positive : positive → ℤ | ⟨a, _⟩ := a\ndef is_positive (x : ℤ) := x &gt; 0\ninstance {x : ℤ} : decidable (is_positive x) := by simp [is_positive]; apply_instance\ndef make_positive (x : ℤ) (h : x &gt; 0) : positive := ⟨x, h⟩\ndef test_two (x : positive) :=\n  let pos := x_of_positive x in [pos+1, pos-1]\ndef foo (x : positive) :=\n  let to_check  := test_two x in\n  let checked   := list.filter is_positive to_check in\n  let positives := list.map (λx, make_positive x sorry) checked in\n  positives\n</pre></div>",
        "id": 123038173,
        "sender_full_name": "Frantisek Silvasi",
        "timestamp": 1519728463
    },
    {
        "content": "<p>you want the <code>of_mem_filter</code> lemma in mathlib</p>",
        "id": 123039719,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1519731194
    },
    {
        "content": "<p>wait, sorry, I didn't look closely enough at your code snippet</p>",
        "id": 123039771,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1519731359
    },
    {
        "content": "<p>The idea is to escape positive to Z and check x+/-1. Then I filter the ones that are not positive and now I need a way to inject them back to the dependent type.</p>",
        "id": 123039815,
        "sender_full_name": "Frantisek Silvasi",
        "timestamp": 1519731429
    },
    {
        "content": "<p>list.pmap in mathlib is probably what you want</p>",
        "id": 123039868,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1519731598
    },
    {
        "content": "<p>one way to do it would be to prove that all the operations you use preserve the <code>is_positive</code> invariant</p>",
        "id": 123039927,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1519731611
    },
    {
        "content": "<p>this is kind of tedious, i'd be hunting for a appropriate function in the data.list namespace, maybe <code>pmap</code> would be appropriate as Chris mentioned</p>",
        "id": 123039980,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1519731738
    },
    {
        "content": "<p>Don't forget to use<code>```lean</code> instead of ````` at the beginning of your code blocks to have (partial) syntax highlighting</p>",
        "id": 123039982,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1519731755
    },
    {
        "content": "<p>I'll take a look at the pmap, thank you.</p>",
        "id": 123039988,
        "sender_full_name": "Frantisek Silvasi",
        "timestamp": 1519731813
    },
    {
        "content": "<p>Interesting. This <code>pmap</code> contraption is basically <code>map . filter</code>, which is exactly what I do, except I manage to lose some information in between.</p>",
        "id": 123040083,
        "sender_full_name": "Frantisek Silvasi",
        "timestamp": 1519731965
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"n\">def</span> <span class=\"n\">positive</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">}</span>\n<span class=\"n\">def</span> <span class=\"n\">x_of_positive</span> <span class=\"o\">:</span> <span class=\"n\">positive</span> <span class=\"bp\">→</span> <span class=\"bp\">ℤ</span> <span class=\"bp\">|</span> <span class=\"bp\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span> <span class=\"o\">:=</span> <span class=\"n\">a</span>\n<span class=\"n\">def</span> <span class=\"n\">is_positive</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span>\n<span class=\"kn\">instance</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"n\">is_positive</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">is_positive</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">apply_instance</span>\n<span class=\"n\">def</span> <span class=\"n\">make_positive</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">positive</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"bp\">⟩</span>\n<span class=\"n\">def</span> <span class=\"n\">test_two</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">positive</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">pos</span> <span class=\"o\">:=</span> <span class=\"n\">x_of_positive</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"o\">[</span><span class=\"n\">pos</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">pos</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">]</span>\n<span class=\"n\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">positive</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">to_check</span>  <span class=\"o\">:=</span> <span class=\"n\">test_two</span> <span class=\"n\">x</span> <span class=\"k\">in</span>\n  <span class=\"k\">let</span> <span class=\"n\">checked</span>   <span class=\"o\">:=</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">filter</span> <span class=\"n\">is_positive</span> <span class=\"n\">to_check</span> <span class=\"k\">in</span>\n  <span class=\"k\">let</span> <span class=\"n\">positives</span> <span class=\"o\">:=</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">pmap</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">),</span> <span class=\"n\">make_positive</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">)</span> <span class=\"n\">checked</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">mem_filter</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">ha</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">right</span><span class=\"o\">)</span> <span class=\"k\">in</span>\n  <span class=\"n\">positives</span>\n</pre></div>",
        "id": 123040088,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1519732000
    },
    {
        "content": "<p>Is the <code>a ha</code> accidental ;)?</p>",
        "id": 123040098,
        "sender_full_name": "Frantisek Silvasi",
        "timestamp": 1519732041
    },
    {
        "content": "<p>Thank you kindly for your help, I'm going to take <code>pmap</code> for a spin.</p>",
        "id": 123040102,
        "sender_full_name": "Frantisek Silvasi",
        "timestamp": 1519732065
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-email=\"frantisek.silvasi@tuke.sk\" data-user-id=\"110099\">@Frantisek Silvasi</span> The combination of filter and map in the positive case is <code>filter_map</code>. You should <code>filter_map</code> with the function <code>if h : x &gt; 0 then some (is_positive x h) else none</code></p>",
        "id": 123051610,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1519753824
    }
]