[
    {
        "content": "<p>Is there a way to tell my mathlib-using lean project to use a particular branch of mathlib, as I might want to do if I were developing a project in parallel to some changes to mathlib that hadn't been accepted yet? I sort of expected there to be a <code>leanproject get-mathlib-cache --rev my_branch</code> command, but it seems there is not.</p>",
        "id": 277654185,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1649011020
    },
    {
        "content": "<p>To do this, I manually edit the <code>leanpkg.toml</code> file with the exact version of mathlib I've needed.  The tricky thing then is figuring out the exact invocations of <code>leanpkg</code> and/or <code>leanproject</code> to download the oleans and build the project without upgrading mathlib.  Let me look back at my notes...</p>",
        "id": 277654995,
        "sender_full_name": "Jason Rute",
        "timestamp": 1649012117
    },
    {
        "content": "<p>I think <code>leanpkg configure; leanproject get-mathlib-cache</code> should do the trick</p>",
        "id": 277655018,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649012155
    },
    {
        "content": "<p>Does anyone know how frequently the oleans are saved for a commit?  Can you do <code>leanproject get-mathlib-cache</code> for basically any commit on github, or only on select releases?</p>",
        "id": 277655608,
        "sender_full_name": "Jason Rute",
        "timestamp": 1649012872
    },
    {
        "content": "<p>Any commit</p>",
        "id": 277655690,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649012970
    },
    {
        "content": "<p>Also, I've only ever done this for specific commit hashes?  (I just looked at the <code>leanpkg.toml</code> file and replaced the <code>rev</code> with the commit I want.)  Can you use branch names instead of commits?</p>",
        "id": 277655756,
        "sender_full_name": "Jason Rute",
        "timestamp": 1649013009
    },
    {
        "content": "<p>IIRC, Not every commit has a cache</p>",
        "id": 277656166,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649013570
    },
    {
        "content": "<p>Only the one at the head of each bors batch</p>",
        "id": 277656171,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649013583
    },
    {
        "content": "<p>Using a branch name is a bad idea, because then no one can reproduce your build if the branch moves</p>",
        "id": 277656245,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649013650
    },
    {
        "content": "<p>My recollection is the following: on the <code>master</code> branch, we keep a cache for every commit at the head of every bors batch (more or less the commits with a green checkmark next to them <a href=\"https://github.com/leanprover-community/mathlib/commits/master\">here</a>). We create a cache for every commit to any branch pushed to the repo, but they are deleted after ~3 days if they are not at the head of a branch.</p>\n<p>The precise details are in <a href=\"https://github.com/leanprover-community/azure-scripts/blob/master/cleanup.py\">this script</a>.</p>",
        "id": 277656566,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1649014042
    },
    {
        "content": "<p>Oh sorry, I had branches in mind.</p>",
        "id": 277657585,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649015400
    },
    {
        "content": "<p>Even on a branch, CI only ever builds the head commit</p>",
        "id": 277658350,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649016332
    },
    {
        "content": "<p>If you commit twice and push both simultaneously, only the second commit gets built</p>",
        "id": 277658359,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649016348
    },
    {
        "content": "<p>Ah, is that what you call the head commit? Then sure. Sorry for the terminology confusion.</p>",
        "id": 277658410,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649016384
    },
    {
        "content": "<p><code>HEAD</code> has a well-defined meaning in the gitiverse (-;</p>",
        "id": 277686183,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1649052833
    },
    {
        "content": "<p>Not answering anyone's questions, but here's a git trick I use sometimes: <code>HEAD</code> refers to what commit is currently checked out (I think it's just whatever <code>.git/HEAD</code> is referring to), and you can refer to its parents by repeatedly suffixing it with <code>^</code>. So for example if you've checked out a branch and you know CI hasn't finished, but still the oleans of its parent commit should be good enough, you can do</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>leanproject get-cache --rev=HEAD^\n</code></pre></div>",
        "id": 277686822,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1649053533
    },
    {
        "content": "<p><code>get-cache --fallback=download-first</code> iteratively does that for you <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span>.</p>",
        "id": 277690306,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649056474
    }
]