[
    {
        "content": "<p>Yet another diamond involving <code>nat.cast</code>... </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.cast</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">nat.cast</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"c1\">--fails</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 256050118,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1633350654
    },
    {
        "content": "<p>AFAIR, we have a <code>simp</code> lemma for this.</p>",
        "id": 256050195,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1633350690
    },
    {
        "content": "<p>The culprit is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/int.has_coe\">docs#int.has_coe</a>. Should we nuke it?</p>",
        "id": 256050232,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1633350706
    },
    {
        "content": "<p>See <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat_cast_eq_coe_nat\">docs#nat_cast_eq_coe_nat</a></p>",
        "id": 256050341,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1633350741
    },
    {
        "content": "<p>For context, when <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> stumbled on the problem with <code>enat</code>, we decided to delete the <code>enat</code>-specific coercion.</p>",
        "id": 256050542,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1633350825
    },
    {
        "content": "<p>This won't solve</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>",
        "id": 256050631,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1633350855
    },
    {
        "content": "<p>What about we delete <code>ℕ</code>?</p>",
        "id": 256050679,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1633350881
    },
    {
        "content": "<p>One way to deal with this is to include <code>of_nat</code> into the signature of <code>semiring</code> and restrict <code>nat.cast</code> to <code>semiring</code>s.</p>",
        "id": 256051067,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1633351051
    },
    {
        "content": "<p>It's going to be a royal PITA to do that refactor, but it's the logical extension of what we've been doing already.</p>",
        "id": 256051168,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633351088
    },
    {
        "content": "<p>At that point, you might as well use nat.bin_cast since you have all the proofs that they're the same, given your semiring.</p>",
        "id": 256051246,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1633351136
    },
    {
        "content": "<p>Then we'll loose defeq <code>↑(n + 1) = ↑n + 1</code>.</p>",
        "id": 256051249,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1633351137
    },
    {
        "content": "<p>And you can use <code>int.has_coe</code> for integers, <code>id</code> for naturals.</p>",
        "id": 256051319,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1633351174
    },
    {
        "content": "<p>So no <code>nat.cast</code> for monoids anymore?</p>",
        "id": 256051354,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1633351199
    },
    {
        "content": "<p>Are there examples of <code>add_monoid + has_one</code> but no <code>semiring</code> where we care about <code>nat.cast</code>?</p>",
        "id": 256051470,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1633351241
    },
    {
        "content": "<p>Games?</p>",
        "id": 256051504,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1633351261
    },
    {
        "content": "<p>I don't remember if it's pregames or games</p>",
        "id": 256051522,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1633351273
    },
    {
        "content": "<p>I just remember proving that nat.bin_cast does the right thing for them was brutal. I don't remember if I even finished that.</p>",
        "id": 256051576,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1633351305
    },
    {
        "content": "<p>You can have a separate <code>has_coe</code> instance in this case.</p>",
        "id": 256051689,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1633351348
    },
    {
        "content": "<p>Most properties of <code>nat.cast</code> follow from it being an <code>add_monoid_hom</code>.</p>",
        "id": 256051726,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1633351372
    },
    {
        "content": "<p>Otoh, I don't really care about whether <code>↑n</code> is defeq to <code>n</code>. What I do care about, is that all the coercions from <code>ℕ</code> to <code>ℤ</code> are defeq.</p>",
        "id": 256052043,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633351507
    },
    {
        "content": "<p>I understand the reason to put nsmul and gsmul into the typeclass, to make typeclass inference and unification work better, because we can't provide proofs to the TC resolver. But what TC issue is there here?</p>",
        "id": 256052050,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1633351511
    },
    {
        "content": "<p>In general, it has seemed that we avoid making things rfl proofs, because that just hides complexity.</p>",
        "id": 256052163,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1633351555
    },
    {
        "content": "<p>We have a generic coercion from <code>ℕ</code> to any unital <code>add_monoid</code>and a specific one from <code>ℕ</code> to <code>ℤ</code>.</p>",
        "id": 256052244,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1633351576
    },
    {
        "content": "<p>I'm inclined to nuke the specific coe from <code>ℕ</code> to <code>ℤ</code>. If people want a map <code>ℕ → ℤ</code> that computes well, they can call it by name, instead of using the coe.</p>",
        "id": 256054777,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633352625
    },
    {
        "content": "<p>Why not just kill the specific one?</p>",
        "id": 256054784,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1633352629
    },
    {
        "content": "<p>But I understand that this is a very mathsy opinion.</p>",
        "id": 256054803,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633352638
    },
    {
        "content": "<p>You just beat me to it :-)</p>",
        "id": 256054865,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1633352654
    },
    {
        "content": "<p>I think <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> was strongly in favour of keeping the specific coe around.</p>",
        "id": 256054897,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633352673
    },
    {
        "content": "<p>The issue with exponential time coes is bad enough already. This would just make that get secretly used all over the place, causing pain and suffering for anyone with lean 3 code that we aren't actively monitoring</p>",
        "id": 256055428,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1633352875
    },
    {
        "content": "<p>We could add <code>of_nat : has_one α → ℕ → α</code> to add_monoid?</p>",
        "id": 256056989,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1633353487
    },
    {
        "content": "<p>That sounds like a good tradeof.</p>",
        "id": 256057243,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1633353601
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> I think that the better way is to add <code>add_monoid_with_one</code>.</p>",
        "id": 256058043,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1633353903
    },
    {
        "content": "<p>If you add <code>of_nat : has_one α → ℕ → α</code> with appropriate axioms, then you won't be able to ignore the <code>has_one</code> argument in the case <code>α = int</code>.</p>",
        "id": 256058162,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1633353946
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/113488-general/topic/nat.2Ecast.20diamond/near/256058043\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> I think that the better way is to add <code>add_monoid_with_one</code>.</p>\n</blockquote>\n<p>But then you also might need <code>add_comm_monoid_with_one</code>, <code>add_cancel_comm_monoid_with_one</code>, <code>add_group_with_one</code>, ...</p>",
        "id": 256058806,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1633354178
    }
]