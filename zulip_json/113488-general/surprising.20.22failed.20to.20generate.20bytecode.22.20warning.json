[
    {
        "content": "<p>Ashvni showed me a surprising warning: here's a MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">number_theory.padics.ring_homs</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">nat.prime</span> <span class=\"n\">p</span><span class=\"o\">)]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">sets</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">H</span> <span class=\"bp\">//</span> <span class=\"n\">true</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">sets</span> <span class=\"o\">(</span><span class=\"n\">ℤ_</span><span class=\"o\">[</span><span class=\"n\">p</span><span class=\"o\">])</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨(</span><span class=\"n\">set.preimage</span> <span class=\"o\">(</span><span class=\"n\">padic_int.appr</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">id</span><span class=\"o\">}),</span> <span class=\"kd\">by</span> <span class=\"n\">trivial</span><span class=\"o\">⟩</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">failed to generate bytecode for 'foo'</span>\n<span class=\"cm\">code generation failed, VM does not have code for 'classical.choice'</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>Both the fact that it's a subtype and the fact that we're using <code>padic_int.appr</code> seem to be relevant. Can this be fixed? Should she worry if it can't? It's beyond me!</p>",
        "id": 261939212,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1637247975
    },
    {
        "content": "<p>Did you try adding <code>noncomputable def</code> and/or <code>noncomputable theory</code>?</p>",
        "id": 261939674,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1637248195
    },
    {
        "content": "<p>Ah, that doesn't seem to fix it...</p>",
        "id": 261939883,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1637248280
    },
    {
        "content": "<p>I have the feeling that this mostly happens because something should be a <code>lemma</code> not a <code>def</code> or vice versa</p>",
        "id": 261940043,
        "sender_full_name": "Reid Barton",
        "timestamp": 1637248347
    },
    {
        "content": "<p>however, I don't see how that could apply here...</p>",
        "id": 261940117,
        "sender_full_name": "Reid Barton",
        "timestamp": 1637248390
    },
    {
        "content": "<p>Indeed, <code>noncomputable def</code> complains that it should be computable. <code>appr</code> is defined noncomputably in <code>number_theory.padics_ring_homs</code> and then made irreducible on line 383, I wondered if that had anything to do with it.</p>",
        "id": 261941646,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1637249016
    },
    {
        "content": "<p>It somehow also has to do with the fact that <code>set</code> is a function into <code>Sort*</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">number_theory.padics.ring_homs</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">nat.prime</span> <span class=\"n\">p</span><span class=\"o\">)]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">unit</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">unit</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">unit</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"bp\">//</span> <span class=\"n\">true</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">padic_int.appr</span> <span class=\"n\">p</span> <span class=\"n\">_</span><span class=\"o\">),</span> <span class=\"n\">trivial</span><span class=\"o\">⟩</span> <span class=\"c1\">-- error</span>\n</code></pre></div>\n<p>but</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">number_theory.padics.ring_homs</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">nat.prime</span> <span class=\"n\">p</span><span class=\"o\">)]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">unit</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">//</span> <span class=\"n\">true</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">padic_int.appr</span> <span class=\"n\">p</span> <span class=\"n\">_</span><span class=\"o\">),</span> <span class=\"n\">trivial</span><span class=\"o\">⟩</span> <span class=\"c1\">-- no error</span>\n</code></pre></div>\n<p>and</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">number_theory.padics.ring_homs</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">nat.prime</span> <span class=\"n\">p</span><span class=\"o\">)]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">unit</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">unit</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">//</span> <span class=\"n\">true</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">padic_int.appr</span> <span class=\"n\">p</span> <span class=\"n\">_</span><span class=\"o\">),</span> <span class=\"n\">trivial</span><span class=\"o\">⟩</span> <span class=\"c1\">-- no error (but noncomputable is mandatory)</span>\n</code></pre></div>",
        "id": 261943078,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1637249640
    },
    {
        "content": "<p>Is it possible my PR to remove <code>noncomputable lemma</code> from <a href=\"https://leanprover-community.github.io/mathlib_docs/find/classical.dec\">docs#classical.dec</a> is to blame?</p>",
        "id": 261961509,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637256803
    },
    {
        "content": "<p>I thought we were safe because mathlib was happy</p>",
        "id": 261961544,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637256818
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/surprising.20.22failed.20to.20generate.20bytecode.22.20warning/near/261939212\">said</a>:</p>\n<blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">failed to generate bytecode for 'foo'</span>\n<span class=\"cm\">code generation failed, VM does not have code for 'classical.choice'</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>Both the fact that it's a subtype and the fact that we're using <code>padic_int.appr</code> seem to be relevant. Can this be fixed? Should she worry if it can't? It's beyond me!</p>\n</blockquote>\n<p>I've just found a strange fix for this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">number_theory.padics.ring_homs</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">nat.prime</span> <span class=\"n\">p</span><span class=\"o\">)]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">sets</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">H</span> <span class=\"bp\">//</span> <span class=\"n\">true</span><span class=\"o\">}</span>\n\n<span class=\"kn\">local</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">inline</span><span class=\"o\">]</span> <span class=\"n\">set.preimage</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">sets</span> <span class=\"o\">(</span><span class=\"n\">ℤ_</span><span class=\"o\">[</span><span class=\"n\">p</span><span class=\"o\">])</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨(</span><span class=\"n\">set.preimage</span> <span class=\"o\">(</span><span class=\"n\">padic_int.appr</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">id</span><span class=\"o\">}),</span> <span class=\"kd\">by</span> <span class=\"n\">trivial</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>I think it's got to do with the fact that the vm doesn't see that <code>padic_int.appr</code> is computationally irrelevant for some reason.  But once it's expanded out to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo'</span> <span class=\"o\">:</span> <span class=\"n\">sets</span> <span class=\"o\">(</span><span class=\"n\">ℤ_</span><span class=\"o\">[</span><span class=\"n\">p</span><span class=\"o\">])</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨{</span><span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"n\">padic_int.appr</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"o\">({</span><span class=\"n\">id</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">))},</span> <span class=\"kd\">by</span> <span class=\"n\">trivial</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>then it's happy.</p>",
        "id": 274374691,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1646650132
    }
]