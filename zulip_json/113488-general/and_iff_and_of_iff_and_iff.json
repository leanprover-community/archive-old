[
    {
        "content": "<p>Would this be a useful lemma for mathlib? If so, where should it go? I currently solve this by <code>split; intros; split,</code> but that is a bit of a hack, and creates 4 goals where usually 2 should suffice.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">and_iff_and_of_iff_and_iff</span> <span class=\"o\">{</span><span class=\"n\">P1</span> <span class=\"n\">P2</span> <span class=\"n\">Q1</span> <span class=\"n\">Q2</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">P1</span> <span class=\"err\">\\</span><span class=\"n\">iff</span> <span class=\"n\">Q1</span><span class=\"o\">)</span> <span class=\"err\">\\</span><span class=\"n\">and</span> <span class=\"o\">(</span><span class=\"n\">P2</span> <span class=\"err\">\\</span><span class=\"n\">iff</span> <span class=\"n\">Q2</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"n\">P1</span> <span class=\"err\">\\</span><span class=\"n\">and</span> <span class=\"n\">P2</span><span class=\"o\">)</span> <span class=\"err\">\\</span><span class=\"n\">iff</span> <span class=\"o\">(</span><span class=\"n\">Q1</span> <span class=\"err\">\\</span><span class=\"n\">and</span> <span class=\"n\">Q2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>",
        "id": 135087802,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538553859
    },
    {
        "content": "<p>This looks like <code>and_congr</code></p>",
        "id": 135087872,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538553969
    },
    {
        "content": "<p>Cool, I'll use that! Is there a way that I could have discovered that name myself?</p>",
        "id": 135087981,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538554133
    },
    {
        "content": "<p>I also had trouble finding that. Like me, Johan may have been look for something <code>iff</code>-named instead of <code>and</code>- and <code>congr</code>-named.</p>",
        "id": 135088008,
        "sender_full_name": "Sean Leather",
        "timestamp": 1538554191
    },
    {
        "content": "<p>I probably tried <code>git grep 'and.*iff'</code> and <code>git grep 'iff.*and'</code>.</p>",
        "id": 135088104,
        "sender_full_name": "Sean Leather",
        "timestamp": 1538554306
    },
    {
        "content": "<p>That's true. This is a special pattern, like <code>ext</code>. <code>congr</code> lemmas mean if the inputs are equal then a function applied to those inputs is equal</p>",
        "id": 135088105,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538554308
    },
    {
        "content": "<p>There are similar theorems for all the propositional functions, and for regular functions <code>congr</code> the tactic will often generate these on the fly</p>",
        "id": 135088176,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538554390
    },
    {
        "content": "<p>You will also find custom <code>congr</code> lemmas for things like <code>list.map_congr</code>, where we want to insert an additional assumption into the hypothesis (if <code>\\all x \\in l, f x = g x</code> then <code>map f l = map g l</code>)</p>",
        "id": 135088308,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538554596
    },
    {
        "content": "<p>so many higher order functions have some kind of altered <code>congr</code> lemma</p>",
        "id": 135088324,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538554658
    }
]