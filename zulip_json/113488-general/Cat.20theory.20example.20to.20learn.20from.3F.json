[
    {
        "content": "<p>Hi, I am in the middle of coding critical parts to BananaCats.  I am confident enough now in Lean that I can start doing project-motivated learning, and my project is about category theory.   So could someone point me to the simplest (takes least effort in the long-run to use) way of \"defining a variable C, that is an abstract category?\" And why not declare an object X in Ob(C) as well.</p>",
        "id": 174372838,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1567005627
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">category</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">category</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 174373312,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1567005886
    },
    {
        "content": "<p><code>X : C</code> means X is an object in C.</p>",
        "id": 174373339,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1567005905
    },
    {
        "content": "<p>What does Type* mean?</p>",
        "id": 174373366,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1567005925
    },
    {
        "content": "<p>Klean closure?</p>",
        "id": 174373371,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1567005930
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> You'll have some hidden universe variables that way...</p>",
        "id": 174373415,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1567005961
    },
    {
        "content": "<p>maybe just use <code>large_category</code> for now.</p>",
        "id": 174373466,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1567005973
    },
    {
        "content": "<p>that includes all categories?</p>",
        "id": 174373490,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1567005987
    },
    {
        "content": "<p>I.e. does it mean <em>not-neccessarily large</em> category?</p>",
        "id": 174373534,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1567006007
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"236489\">@EnjoysMath</span> <code>Type*</code> mean that <code>C</code> is a type.</p>",
        "id": 174373563,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1567006029
    },
    {
        "content": "<p>Lean uses type theory in its foundations, see TPIL</p>",
        "id": 174373582,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1567006044
    },
    {
        "content": "<p>I thought <code>C : Type</code> would accomplish that</p>",
        "id": 174373617,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1567006066
    },
    {
        "content": "<p>I will work with the Chris Hughes example for now, since I'm okay with any implications regarding Universes for now</p>",
        "id": 174373769,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1567006148
    },
    {
        "content": "<p><code>Type*</code> is <code>Type u</code> for a fresh univers <code>u</code></p>",
        "id": 174373800,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1567006181
    },
    {
        "content": "<p>Should BananaCats have a Universe  setting as well, where needed?</p>",
        "id": 174373818,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1567006199
    },
    {
        "content": "<p>That's as easy as adding a GUI field from my perspective</p>",
        "id": 174373880,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1567006209
    },
    {
        "content": "<p>You can add that later</p>",
        "id": 174374120,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1567006380
    },
    {
        "content": "<p>Category lives in Universe: [int spinbox]    Use first free universe:   [*]</p>",
        "id": 174374133,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1567006387
    },
    {
        "content": "<p>Just use <code>Type</code> for now.</p>",
        "id": 174374134,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1567006388
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>  sure thing.  I will use Type for now :)</p>",
        "id": 174374167,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1567006411
    },
    {
        "content": "<p>I'ma use Jinja2 (a python library) for making a \"create new category\" template, and so on...</p>",
        "id": 174374358,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1567006554
    },
    {
        "content": "<p>The question is, can I get away with generalizing the template to declaring a variable of a certain type?</p>",
        "id": 174374555,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1567006655
    },
    {
        "content": "<p>And another question is what does the application in brackets <code>[category C]</code> do to the declaration?</p>",
        "id": 174374639,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1567006685
    },
    {
        "content": "<p>Finallly is variable declaration the formal term for this?</p>",
        "id": 174374658,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1567006699
    },
    {
        "content": "<p>*formal vocabulary</p>",
        "id": 174374674,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1567006708
    },
    {
        "content": "<p>Btw, the comm to / from Lean VSCode will be 2-way,  I.e. a change in the code which Bancats cares about will be detected and reflected in the PyQt5 app (\"BananaCats\"), and obviously vise versa is the typical usage.</p>",
        "id": 174374839,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1567006812
    },
    {
        "content": "<p>To answer one question, I shouldn't generalize, as that would move more logic framework over to BananaCats by  necessity, since I'd have to call multiple atomic calls, and organize them correctly.  Whereas if I just do the hard coded script for Create a Category, and do the same for each thing, then I should be okay in finishing this.</p>",
        "id": 174375387,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1567007145
    },
    {
        "content": "<p>If I need to generalize it should be done with lean code I think</p>",
        "id": 174375473,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1567007179
    },
    {
        "content": "<p>I take back that lean should drive BananaCats</p>",
        "id": 174375706,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1567007312
    },
    {
        "content": "<p>That would necessitate parsing of Lean!</p>",
        "id": 174375719,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1567007322
    },
    {
        "content": "<p>I have to KISS keep it simple</p>",
        "id": 174375754,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1567007344
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"236489\">@EnjoysMath</span> <code>[category C]</code> means that <code>C</code> is endowed with the structure of a category.</p>",
        "id": 174376216,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1567007641
    },
    {
        "content": "<p>Thx</p>",
        "id": 174376284,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1567007663
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"o\">{</span><span class=\"err\">%</span> <span class=\"k\">if</span> <span class=\"s2\">&quot;category_theory.category&quot;</span> <span class=\"n\">not</span> <span class=\"k\">in</span> <span class=\"kn\">context</span><span class=\"bp\">.</span><span class=\"n\">imported_names</span> <span class=\"err\">%</span><span class=\"o\">}</span>\n    <span class=\"kn\">import</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">category</span>\n<span class=\"o\">{</span><span class=\"err\">%</span> <span class=\"n\">endif</span> <span class=\"err\">%</span><span class=\"o\">}</span>\n\n<span class=\"o\">{</span><span class=\"err\">%</span> <span class=\"k\">if</span> <span class=\"s2\">&quot;category_theory&quot;</span> <span class=\"n\">not</span> <span class=\"k\">in</span> <span class=\"kn\">context</span><span class=\"bp\">.</span><span class=\"n\">open_modules</span> <span class=\"err\">%</span><span class=\"o\">}</span>\n    <span class=\"kn\">open</span> <span class=\"n\">category_theory</span>\n<span class=\"o\">{</span><span class=\"err\">%</span> <span class=\"n\">endif</span> <span class=\"err\">%</span><span class=\"o\">}</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{{{</span><span class=\"n\">decl</span><span class=\"bp\">.</span><span class=\"n\">name</span><span class=\"o\">}}</span> <span class=\"o\">:</span> <span class=\"o\">{{</span><span class=\"n\">decl</span><span class=\"bp\">.</span><span class=\"n\">type</span><span class=\"o\">}}}</span> <span class=\"o\">[</span><span class=\"n\">category</span> <span class=\"o\">{{</span><span class=\"n\">decl</span><span class=\"bp\">.</span><span class=\"n\">name</span><span class=\"o\">}}]</span>\n</pre></div>\n\n\n<p>It's a Jinja2 template for declaring a variable an abstract category</p>",
        "id": 174376674,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1567007915
    },
    {
        "content": "<p>If universe polymorphism doesn't matter to you (this is pretty much synonymous with \"you're not trying to write library code\"), then I'd recommend:</p>\n<div class=\"codehilite\"><pre><span></span>import category_theory.category\n\nopen category_theory\n\nvariables {C : Type} [small_category C] (X : C)\n</pre></div>",
        "id": 174410428,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1567035202
    },
    {
        "content": "<p>If universe polymorphism does matter to you, and you want the most general case (which in \"real maths\" means that you either have a small category, where the objects and morphisms live in the same universe, or a large category, where the objects live in a universe one higher than the morphisms, but in \"Lean math\", because we can't specify this dichotomy, the objects and morphisms just live in two entirely independent universes, I'd recommend:</p>\n<div class=\"codehilite\"><pre><span></span>import category_theory.category\n\nuniverses v u\nopen category_theory\n\nvariables {C : Type u} [𝒞 : category.{v} C] (X : C)\ninclude 𝒞\n</pre></div>",
        "id": 174410531,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1567035296
    },
    {
        "content": "<p>Here we need <code>include𝒞</code>because Lean's typeclass inference algorithm is not willing to pull in the instance <code>C</code> until it is sure that the universe parameter <code>v</code> is the desired one, and often it can't tell this without explicit universe annotations everywhere --- instead we just tell Lean to include <code>𝒞</code> as an argument to every definition that follows. This is a little dangerous, as you need to be careful to then explicitly <code>omit</code> it again if you write any functions that don't refer to <code>C</code>. (Such functions probably belong higher in the file, or in another file, in any case...)</p>",
        "id": 174410698,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1567035468
    }
]