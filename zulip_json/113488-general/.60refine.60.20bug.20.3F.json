[
    {
        "content": "<p><code>refine</code> won't accept a placeholder after a <code>λ ⟨a, b⟩</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"c1\">--exact λ ⟨a, b⟩, a --works</span>\n  <span class=\"c1\">--refine λ a, _, exact a.1 --works</span>\n  <span class=\"c1\">--refine λ ⟨a, b⟩, a --works</span>\n  <span class=\"n\">refine</span> <span class=\"bp\">λ</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">⟩,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">a</span> <span class=\"c1\">--fails (don't know hoow to synthesize placeholder)</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 278031110,
        "sender_full_name": "Pierre-Alexandre Bazin",
        "timestamp": 1649255145
    },
    {
        "content": "<p>sadly this is well known, it'd be nice if <code>λ</code> in refine expanded to <code>rintro</code>, but that's not the case :/</p>",
        "id": 278033228,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1649255975
    },
    {
        "content": "<p>the cause of it is that using <code>match</code> or lambda-match causes lean to extract the contents into a separate definition, and that definition needs to have no metavariables so that it can be put in the environment. As a result it acts like you put <code>by exact</code> around it - you can't move metavariables inside it into the outer begin-end block (although you can start another begin-end block inside it)</p>",
        "id": 278104268,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1649291329
    },
    {
        "content": "<p>Does lean4 know how to do this?</p>",
        "id": 278124473,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649315074
    },
    {
        "content": "<p>Presumably it could turn metavariables into extra arguments to the definition?</p>",
        "id": 278124520,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649315108
    },
    {
        "content": "<p>I would bet yes</p>",
        "id": 278124522,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1649315112
    },
    {
        "content": "<p>yes</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine</span> <span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"n\">hq</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hp</span>\n</code></pre></div>",
        "id": 278124624,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1649315173
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/.60refine.60.20bug.20.3F/near/278124520\">said</a>:</p>\n<blockquote>\n<p>Presumably it could turn metavariables into extra arguments to the definition?</p>\n</blockquote>\n<p>Not easily, as this would mess up the compilation of the definition, which is trying to go through the same process as the equation compiler</p>",
        "id": 278124672,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1649315231
    },
    {
        "content": "<p>such a compilation would result in a different term altogether than if you were to fill in the metavariable on the spot, so it is hard to argue that this is still \"refine\"</p>",
        "id": 278124790,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1649315292
    },
    {
        "content": "<p>I believe that lean 4 does not attempt to pull this out into a separate definition, it just uses <code>foo.rec</code> on the spot similar to what <code>rintro</code> would do</p>",
        "id": 278124839,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1649315340
    }
]