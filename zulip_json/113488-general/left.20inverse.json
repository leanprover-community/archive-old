[
    {
        "content": "<p>Today <code>library_search</code> is utterly failing me. Could it be true that we don't have:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">left_inverse_iff_comp</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">left_inverse</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"bp\">↔</span> <span class=\"n\">f</span> <span class=\"err\">∘</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"n\">id</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">funext</span> <span class=\"err\">$</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">congr_fun</span> <span class=\"n\">h</span> <span class=\"n\">x</span>\n</code></pre></div>",
        "id": 207558647,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1597948910
    },
    {
        "content": "<p>Looks like it is indeed missing. I see <code>left_inverse.comp_eq_id</code> in <code>logic.function.basic</code> but not the converse direction.</p>",
        "id": 207606643,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1597995049
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/3897\">#3897</a></p>",
        "id": 207612229,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1598000159
    },
    {
        "content": "<p>Is there a convention for when to provide separate lemmas for one or both directions of an <code>iff</code> vs just a single <code>iff</code> lemma?</p>",
        "id": 207622152,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1598007902
    },
    {
        "content": "<p>I think that there should really only be the <code>iff</code> version, unless there is a strong argument that the implication is used a lot by itself (e.g. a typeclass <code>is_foo</code> defined as a structure with one field <code>foo : Prop</code>, then you might see both <code>is_foo.foo</code> and <code>is_foo.iff_foo</code> in use).</p>",
        "id": 207623191,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1598008840
    },
    {
        "content": "<p>Often, a non-<code>iff</code> lemma sticks around if it was defined before the <code>iff</code> variant (as happened here).</p>",
        "id": 207623234,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1598008901
    },
    {
        "content": "<p>Is there any kinda of deprecation process in place to allow removing weaker lemmas in situations like this? Perhaps a way to have lean emit a warning whenever a name is referred to?</p>",
        "id": 207623770,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1598009399
    },
    {
        "content": "<p>Mathlib is aggressively backwards-incompatible, so the deprecation process is basically \"delete the obsolete thing and fix any build error that occurs in the official repositories\".</p>",
        "id": 207626650,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1598011879
    },
    {
        "content": "<p>It should definitely be possible to make a linter to detect usages of deprecated definitions, like the linter that complains about usage of <code>&gt;</code> where <code>&lt;</code> would also work.</p>",
        "id": 207626753,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1598011953
    },
    {
        "content": "<p>You will find a lot of one-directional lemmas in theorems that originated in core lean (i.e. <code>algebra.ordered_group</code> and friends), because MS lean style is a bit different from mathlib style. Since these have moved to mathlib, they are being phased out.</p>",
        "id": 207668085,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598034672
    }
]