[
    {
        "content": "<p>Suppose my goal is <code>∀ p : α × β, A</code>. Is there a shorthand for <code>intro xy, cases xs with x y</code>? In Coq this is <code>intros [x y]</code> and in Agda it's just pattern matching against <code>(x,y)</code>.</p>",
        "id": 253540175,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1631777239
    },
    {
        "content": "<p><code>rintro \\&lt;x,y\\&gt;</code></p>",
        "id": 253540211,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631777265
    },
    {
        "content": "<p>Where <code>\\&lt;</code> and <code>\\&gt;</code> should be replaced by funny unicode brackets</p>",
        "id": 253540281,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631777292
    },
    {
        "content": "<p><code>⟨x, y⟩</code></p>",
        "id": 253540505,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631777430
    },
    {
        "content": "<p>While I have your attention, is there a simple logic solver, along the lines of Coq <code>tauto</code> and <code>firstorder</code>?</p>",
        "id": 253540570,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1631777479
    },
    {
        "content": "<p><code>tauto</code> exists, I don't know if it does what you want</p>",
        "id": 253540643,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631777511
    },
    {
        "content": "<p>I think there is even <code>tauto!</code>!</p>",
        "id": 253540656,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631777521
    },
    {
        "content": "<p>For more oompf</p>",
        "id": 253540700,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631777529
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"345260\">Andrej Bauer</span> <a href=\"#narrow/stream/113488-general/topic/Shorthand.20for.20decomposing.20a.20pair/near/253540175\">said</a>:</p>\n<blockquote>\n<p>Suppose my goal is <code>∀ p : α × β, A</code>. Is there a shorthand for <code>intro xy, cases xs with x y</code>? In Coq this is <code>intros [x y]</code> and in Agda it's just pattern matching against <code>(x,y)</code>.</p>\n</blockquote>\n<p>The term mode syntax <code>\\lam \\&lt;x, y\\&gt;,</code> also works same as in agda, and that doesn't need any mathlib tactics</p>",
        "id": 253558479,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1631787800
    },
    {
        "content": "<p>It's a bit fragile though. It doesnt always work in <code>refine λ ⟨x, y⟩, _</code> for example.</p>",
        "id": 253558815,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631787967
    },
    {
        "content": "<p>That's because it sets up a separate proof context in an auxiliary, so it can't share metavariables with the original proof. You can always do <code>exact λ ⟨x, y⟩, begin ... end</code> if you want to keep tacticking</p>",
        "id": 253559422,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1631788318
    },
    {
        "content": "<p>the same thing happens if you use <code>match</code></p>",
        "id": 253559577,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1631788400
    }
]