[
    {
        "content": "<p>Can you elaborate on that?</p>",
        "id": 220372639,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1608298757
    },
    {
        "content": "<p>What kind of an answer do you expect to get if you attempt to \"evaluate\" (whatever that means) an arbitrary real number computed as a sup?</p>",
        "id": 220373118,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608299061
    },
    {
        "content": "<p>Indeed, I think the  fact that they are uniquely suitable for doing logic is intrinsically linked to the fact that they are not computable, because this would otherwise imply that arbitrary formulas can simply be evaluated to a truth value, which is obviously false for nondecidable propositions</p>",
        "id": 220373542,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608299346
    },
    {
        "content": "<p>Hum... hi Kevin, thank you for your attention, programming languages use some approximation right? Evaluation couldn’t be bound to some approximation?</p>",
        "id": 220375813,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1608300710
    },
    {
        "content": "<p>Hi Mario, once more, maybe a silly question... but what do you mean for nondecidable proposition? 1) A proposition for which we can’t  find the truth assignment (interpretation) that make it true/false or; 2) a proposition for which given a truth assignment (interpretation) we can’t evaluate it’s truth value? </p>\n<p>In general (2) is “easy” and (1) can be undecidable, right?  But we may be talking about different things...</p>",
        "id": 220376609,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1608301178
    },
    {
        "content": "<p>Reals with approximations (some sort of interval / ball arithmetic) that allow one to compute the first few digits of a real number would be cool type to have in mathlib, but mathlibs <code>real</code> is not defined this way. It is defined the mathematical way as quotients of Cauchy sequences of rationals, so even computing the first few terms of this cauchy sequence doesn't actually tell you anything about the real number, as the sequence is only guaranteed to be eventually close to whatever real it converges too.</p>",
        "id": 220379789,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1608302798
    },
    {
        "content": "<p>Is it possible to spit out the first few digits of a real number inside something like an <code>IO</code> monad?</p>",
        "id": 220382365,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1608304017
    },
    {
        "content": "<p>It needs to be able to decide whether <code>x = 0.99999998</code> or <code>x = 1.000000001</code> to do that, right?</p>",
        "id": 220382539,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1608304083
    },
    {
        "content": "<p>So maybe you want to allow it an error margin?</p>",
        "id": 220382575,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1608304095
    },
    {
        "content": "<p>Apart from that, you need to make sure to bound the rate of convergence of the sequence. It could be the sequence is 0 for the first 9999999999 terms and then jumps to 1.</p>",
        "id": 220382678,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1608304153
    },
    {
        "content": "<p>Can you represent a real number as a sequence of nested intervals (whose length tends to zero)?</p>",
        "id": 220382840,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1608304220
    },
    {
        "content": "<p>Brouwer does so IIRC, where the n'th interval has length at most 10^-n.</p>",
        "id": 220382875,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1608304244
    },
    {
        "content": "<p>Yeah I think that's what Alex is suggesting.</p>",
        "id": 220382882,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1608304248
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/1038\">#1038</a> has a few ideas too.</p>",
        "id": 220392518,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1608308361
    },
    {
        "content": "<p>what you typically do in non-Lean programming when you are fidgeting about precision is instead of using a real number stored as a variable, you use functions like f(epsilon) where f returns an approximation that is correct within epsilon. which is kind of what that PR proposes. it's not really clear to me what problem this is trying to solve, but I think that will be more tractable for exact computation than handling reals as a sequence of things.</p>",
        "id": 220416624,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1608319111
    },
    {
        "content": "<p>One design question that comes up when doing real computations is whether to work \"forward\" or \"backward\" to get the approximation order. With computable reals, you are usually working backward, meaning that each step in the computation is given a target approximation order and gets to pick the approximation order to request of its inputs. By contrast, in interval arithmetic, you generally say that the inputs are given at some approximation order, and then you work forward to find out how much accuracy you can get for each of the intermediate steps; at the end you get some approximation level and if that's not good enough then you redo the whole computation at higher accuracy.</p>",
        "id": 220419370,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608320574
    },
    {
        "content": "<p>I think the latter method is more appropriate for actual verified computations, since you can encode the good enough initial approximation order pretty easily as a witness in the script. Most of our numerical computations (such as the calculations of e and pi) are like that</p>",
        "id": 220419819,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608320773
    },
    {
        "content": "<p>the nice thing about the former (computable reals) method is that it is more well encapsulated; you actually get something that you can call a \"real number\", namely a function which given a target approximation will provide a rational which is at least that close to the true value</p>",
        "id": 220420065,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608320912
    },
    {
        "content": "<p>you can even mostly use it to replace the <code>real</code> type itself, if you take an appropriate quotient. The quotient kind of destroys your ability to get actual answers to questions though</p>",
        "id": 220420175,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608320987
    }
]