[
    {
        "content": "<p>Why can't I unfold this equation compiler definition (it only fails in the <code>_</code> catch-all case)? </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">isA</span> <span class=\"o\">:</span> <span class=\"n\">char</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">bool</span>\n<span class=\"bp\">|</span> <span class=\"sc\">'a'</span> <span class=\"o\">:=</span> <span class=\"n\">tt</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">ff</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">isA</span> <span class=\"sc\">'z'</span> <span class=\"bp\">=</span> <span class=\"n\">ff</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"c1\">-- simplify tactic failed to simplify</span>\n  <span class=\"c1\">--unfold isA,</span>\n  <span class=\"c1\">-- simplify tactic failed to simplify</span>\n  <span class=\"c1\">--simp only [isA],</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n\n<p>The definition <code>isA._main</code> unfolds to <code>λ (a : char), ite (a = 'a') (id_rhs bool tt) (id_rhs bool ff)</code> which seems to work fine even when it's behind a definition not marked reducible:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">isA'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">char</span><span class=\"o\">),</span> <span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"sc\">'a'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">id_rhs</span> <span class=\"n\">bool</span> <span class=\"n\">tt</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">id_rhs</span> <span class=\"n\">bool</span> <span class=\"n\">ff</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">isA'.main</span> <span class=\"o\">:=</span> <span class=\"n\">isA'</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">isA'.main</span> <span class=\"sc\">'z'</span> <span class=\"bp\">=</span> <span class=\"n\">ff</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">isA'.main</span><span class=\"o\">,</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">isA'</span><span class=\"o\">,</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">isA'.main</span> <span class=\"sc\">'z'</span> <span class=\"bp\">=</span> <span class=\"n\">ff</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">isA'.main</span><span class=\"o\">,</span> <span class=\"n\">isA'</span><span class=\"o\">],</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 213430775,
        "sender_full_name": "Chris B",
        "timestamp": 1602770948
    },
    {
        "content": "<p>The equational lemma for <code>isA</code> has a hypothesis <code>¬ ('z' = 'a')</code> which <code>simp</code> doesn't know how to discharge</p>",
        "id": 213431594,
        "sender_full_name": "Reid Barton",
        "timestamp": 1602771275
    },
    {
        "content": "<p>If you just want to replace <code>isA</code> by its definition, you can use <code>delta isA</code></p>",
        "id": 213431682,
        "sender_full_name": "Reid Barton",
        "timestamp": 1602771318
    },
    {
        "content": "<p>actually, even if I pass a proof of <code>¬ ('z' = 'a')</code> to <code>simp</code> as well, it still doesn't want to apply the equational lemma, which I don't understand</p>",
        "id": 213432651,
        "sender_full_name": "Reid Barton",
        "timestamp": 1602771652
    },
    {
        "content": "<p><code>simpa</code> works as well.</p>",
        "id": 213432761,
        "sender_full_name": "Chris B",
        "timestamp": 1602771693
    },
    {
        "content": "<p>That's because the theorem is true by <code>refl</code></p>",
        "id": 213432869,
        "sender_full_name": "Reid Barton",
        "timestamp": 1602771729
    },
    {
        "content": "<p>I didn't think to look at the equational lemmas though after I saw the <code>ite</code> main function, so thank you for that (and the <code>delta</code> suggestion).</p>",
        "id": 213432906,
        "sender_full_name": "Chris B",
        "timestamp": 1602771750
    },
    {
        "content": "<p>heh, looks like my guess about the failure was wrong. Try turning on <code>trace.simplify</code></p>",
        "id": 213432913,
        "sender_full_name": "Reid Barton",
        "timestamp": 1602771753
    },
    {
        "content": "<p><code>simp</code> knows how to reduce <code>'z' = 'a'</code> to <code>false</code> but it doesn't know how to prove <code>¬false</code></p>",
        "id": 213432985,
        "sender_full_name": "Reid Barton",
        "timestamp": 1602771778
    },
    {
        "content": "<p>This works, but seems very silly:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">isA</span> <span class=\"o\">:</span> <span class=\"n\">char</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">bool</span>\n<span class=\"bp\">|</span> <span class=\"sc\">'a'</span> <span class=\"o\">:=</span> <span class=\"n\">tt</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">ff</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">not_false_iff_true</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"n\">false</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">isA</span> <span class=\"sc\">'z'</span> <span class=\"bp\">=</span> <span class=\"n\">ff</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"sc\">'z'</span> <span class=\"bp\">=</span> <span class=\"sc\">'a'</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">isA</span><span class=\"o\">,</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">not_false_iff_true</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 213433289,
        "sender_full_name": "Reid Barton",
        "timestamp": 1602771875
    },
    {
        "content": "<p>Mine says</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">simplify.failure</span><span class=\"o\">]</span> <span class=\"n\">proof</span> <span class=\"n\">stuck</span> <span class=\"n\">at</span><span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"sc\">'z'</span> <span class=\"bp\">=</span> <span class=\"sc\">'a'</span>\n<span class=\"o\">[</span><span class=\"n\">simplify.failure</span><span class=\"o\">]</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">prove</span><span class=\"o\">:</span> <span class=\"bp\">?</span><span class=\"n\">x_1</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"sc\">'z'</span> <span class=\"bp\">=</span> <span class=\"sc\">'a'</span>\n</code></pre></div>\n\n<p>but I'm on an older mathlib</p>",
        "id": 213433312,
        "sender_full_name": "Chris B",
        "timestamp": 1602771881
    },
    {
        "content": "<p>Maybe my trace was with <code>¬ 'z' = 'a'</code> included as an argument, I'm not sure</p>",
        "id": 213433435,
        "sender_full_name": "Reid Barton",
        "timestamp": 1602771927
    },
    {
        "content": "<p>Do you know if that inequality in the equational lemma plus the ite in <code>_main</code> means this does two checks when it's evaluating?</p>",
        "id": 213433621,
        "sender_full_name": "Chris B",
        "timestamp": 1602771985
    },
    {
        "content": "<p>Well, <code>simp</code> doesn't \"evaluate\"--I don't know what you mean</p>",
        "id": 213433679,
        "sender_full_name": "Reid Barton",
        "timestamp": 1602772006
    },
    {
        "content": "<p>but I think the answer is no</p>",
        "id": 213433774,
        "sender_full_name": "Reid Barton",
        "timestamp": 1602772040
    },
    {
        "content": "<p>Just if somewhere else, in a lean program you computed <code>isA c</code> for some character.</p>",
        "id": 213433782,
        "sender_full_name": "Chris B",
        "timestamp": 1602772043
    },
    {
        "content": "<p>This has nothing to do with lemmas of any kind</p>",
        "id": 213433825,
        "sender_full_name": "Reid Barton",
        "timestamp": 1602772060
    },
    {
        "content": "<p>Oh word, you're right.</p>",
        "id": 213434033,
        "sender_full_name": "Chris B",
        "timestamp": 1602772137
    },
    {
        "content": "<p>I'm not sure whether the compiler works on the equations directly or on the output of the equation compiler, but either way there should be only one test</p>",
        "id": 213434055,
        "sender_full_name": "Reid Barton",
        "timestamp": 1602772145
    },
    {
        "content": "<p>(by the output of the equation compiler, I mean the defs: <code>def isA : char → bool := isA._main</code>, <code>def isA._main : char → bool := λ (a : char), ite (a = 'a') (id_rhs bool tt) (id_rhs bool ff)</code>)</p>",
        "id": 213434221,
        "sender_full_name": "Reid Barton",
        "timestamp": 1602772210
    },
    {
        "content": "<p>It's early, for some reason I was reading the equational lemmas like they were the match discriminator instead of just lemmas.<br>\nThanks for helping me figure this out.</p>",
        "id": 213435106,
        "sender_full_name": "Chris B",
        "timestamp": 1602772555
    },
    {
        "content": "<p>Interestingly this has nothing to do with <code>char</code>--I get the same behavior with <code>nat</code></p>",
        "id": 213435229,
        "sender_full_name": "Reid Barton",
        "timestamp": 1602772594
    },
    {
        "content": "<p>In hindsight I guess it makes sense that the extra hypothesis would be there for any patterns that aren't just applications of a constructor.</p>",
        "id": 213438039,
        "sender_full_name": "Chris B",
        "timestamp": 1602773746
    }
]