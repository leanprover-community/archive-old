[
    {
        "content": "<p>Should <code>abel</code> be idempotent?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">specific_limits</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">normed_group</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n  <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"err\">∥</span><span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"err\">∥</span> <span class=\"bp\">≤</span> <span class=\"n\">C</span> <span class=\"bp\">*</span> <span class=\"n\">r</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">-</span><span class=\"o\">((</span><span class=\"err\">∑</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"err\">∑</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">abel</span><span class=\"o\">,</span> <span class=\"c1\">-- does not close the goal</span>\n  <span class=\"n\">abel</span><span class=\"o\">,</span> <span class=\"c1\">-- closes the goal</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 196000191,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588361621
    },
    {
        "content": "<p>I saw this once with <code>ring</code> and what was happening was that there was some metavariable goal</p>",
        "id": 196001006,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588362041
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/wiki/Minimum-Working-Example-&#40;MWE&#41;\" title=\"https://github.com/leanprover-community/mathlib/wiki/Minimum-Working-Example-&#40;MWE&#41;\">#mwe</a></p>",
        "id": 196001065,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588362078
    },
    {
        "content": "<p>I just deleted <code>{ring, ring}</code> from my project today!</p>",
        "id": 196005628,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588364681
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span> I hope the banana means that I'm not the only one with Raffi stuck in my head now.</p>",
        "id": 196014989,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1588370383
    },
    {
        "content": "<p>Yes! Though I've never much minded having songs stuck in my head. </p>\n<p>Slightly more on topic, is there a way to cook up examples which require <code>{ring, ring, ring}</code> (or even more)?</p>",
        "id": 196017128,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1588372075
    }
]