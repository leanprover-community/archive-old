[
    {
        "content": "<p>How should one use <code>@[refl]</code> and <code>@[trans]</code>? Here's what I'm doing in my extreme sets PR (<a href=\"https://github.com/leanprover-community/mathlib/issues/7357\">#7357</a>) and it yields (or rather yells at me) <code>invalid binary relation declaration, relation 'reflexive' must have two explicit parameters</code> and <code>invalid transitivity rule, it must have at least 5 arguments</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra.affine_space.independent</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.big_operators.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.convex.topology</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span> <span class=\"n\">affine</span>\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">vector_space</span> <span class=\"n\">ℝ</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">E</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">is_extreme</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"n\">B</span> <span class=\"bp\">⊆</span> <span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">x₁</span> <span class=\"n\">x₂</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">segment</span> <span class=\"n\">x₁</span> <span class=\"n\">x₂</span> <span class=\"bp\">→</span> <span class=\"n\">x₁</span> <span class=\"bp\">≠</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">x₂</span> <span class=\"bp\">≠</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">x₁</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span> <span class=\"bp\">∧</span> <span class=\"n\">x₂</span> <span class=\"bp\">∈</span> <span class=\"n\">B</span>\n\n<span class=\"kd\">@[refl]</span> <span class=\"kd\">lemma</span> <span class=\"n\">is_extreme.refl</span> <span class=\"o\">:</span>\n  <span class=\"n\">reflexive</span> <span class=\"o\">(</span><span class=\"n\">is_extreme</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">subset.refl</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">x₁</span> <span class=\"n\">x₂</span> <span class=\"n\">hx₁A</span> <span class=\"n\">hx₂A</span> <span class=\"n\">x</span> <span class=\"n\">hxA</span> <span class=\"n\">hx</span> <span class=\"n\">hxx₁</span> <span class=\"n\">hxx₂</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">hx₁A</span><span class=\"o\">,</span> <span class=\"n\">hx₂A</span><span class=\"o\">⟩⟩</span>\n\n<span class=\"kd\">@[trans]</span> <span class=\"kd\">lemma</span> <span class=\"n\">is_extreme.trans</span> <span class=\"o\">:</span>\n  <span class=\"n\">transitive</span> <span class=\"o\">(</span><span class=\"n\">is_extreme</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rintro</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"o\">⟨</span><span class=\"n\">hBA</span><span class=\"o\">,</span> <span class=\"n\">hAB</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">hCB</span><span class=\"o\">,</span> <span class=\"n\">hBC</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">use</span> <span class=\"n\">subset.trans</span> <span class=\"n\">hCB</span> <span class=\"n\">hBA</span><span class=\"o\">,</span>\n  <span class=\"n\">rintro</span> <span class=\"n\">x₁</span> <span class=\"n\">x₂</span> <span class=\"n\">hx₁A</span> <span class=\"n\">hx₂A</span> <span class=\"n\">x</span> <span class=\"n\">hxC</span> <span class=\"n\">hx</span> <span class=\"n\">hxx₁</span> <span class=\"n\">hxx₂</span><span class=\"o\">,</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">hx₁B</span><span class=\"o\">,</span> <span class=\"n\">hx₂B</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hAB</span> <span class=\"n\">x₁</span> <span class=\"n\">x₂</span> <span class=\"n\">hx₁A</span> <span class=\"n\">hx₂A</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">hCB</span> <span class=\"n\">hxC</span><span class=\"o\">)</span> <span class=\"n\">hx</span> <span class=\"n\">hxx₁</span> <span class=\"n\">hxx₂</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hBC</span> <span class=\"n\">x₁</span> <span class=\"n\">x₂</span> <span class=\"n\">hx₁B</span> <span class=\"n\">hx₂B</span> <span class=\"n\">x</span> <span class=\"n\">hxC</span> <span class=\"n\">hx</span> <span class=\"n\">hxx₁</span> <span class=\"n\">hxx₂</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 236303444,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1619513748
    },
    {
        "content": "<p>I think it should look more like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[refl]</span> <span class=\"kd\">lemma</span> <span class=\"n\">is_extreme.refl</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_extreme</span> <span class=\"n\">A</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"n\">subset.refl</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">x₁</span> <span class=\"n\">x₂</span> <span class=\"n\">hx₁A</span> <span class=\"n\">hx₂A</span> <span class=\"n\">x</span> <span class=\"n\">hxA</span> <span class=\"n\">hx</span> <span class=\"n\">hxx₁</span> <span class=\"n\">hxx₂</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">hx₁A</span><span class=\"o\">,</span> <span class=\"n\">hx₂A</span><span class=\"o\">⟩⟩</span>\n</code></pre></div>",
        "id": 236303651,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619513839
    },
    {
        "content": "<p>(I didn't try the code, just modifying it to get it into the right pattern.</p>",
        "id": 236303690,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619513867
    },
    {
        "content": "<p>Do we have anything to convert <code>@[refl]</code> into <code>reflexive</code> or vice-versa?</p>",
        "id": 236303753,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1619513889
    },
    {
        "content": "<p>Pretty sure no.</p>",
        "id": 236303870,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1619513956
    },
    {
        "content": "<p>Also, what's the convention regarding the implicitness of the arguments?</p>",
        "id": 236304285,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1619514165
    },
    {
        "content": "<p>I would make them explicit, because you can't infer them from later arguments.</p>",
        "id": 236304447,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619514242
    },
    {
        "content": "<p>For refl, yes you can't. For trans, no you can.</p>",
        "id": 236304534,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1619514272
    },
    {
        "content": "<p>Sorry, you are right. So for trans I would only make the two propositional arguments explicit.</p>",
        "id": 236305626,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619514866
    },
    {
        "content": "<p>That allows nice dot notation <code>h1.trans h2</code></p>",
        "id": 236305656,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619514885
    },
    {
        "content": "<p>is there also such a thing as <code>@[antisymm]</code>?</p>",
        "id": 236305868,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1619514984
    },
    {
        "content": "<p>Not that I know</p>",
        "id": 236305895,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1619515004
    },
    {
        "content": "<p>I think the point of <code>@[trans]</code> is for <code>calc</code> mode and the point of <code>@[refl]</code> is for the <code>refl</code> tactic. I'm not sure there's an analogous argument for antisymmetry.</p>",
        "id": 236311713,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1619518154
    },
    {
        "content": "<p>Also for <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#transitivity\">tactic#transitivity</a></p>",
        "id": 236314197,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1619519577
    }
]