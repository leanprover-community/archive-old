[
    {
        "content": "<p><a href=\"/user_uploads/3121/LMmQ5evqscH5HP8ZIbeQzf4v/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/LMmQ5evqscH5HP8ZIbeQzf4v/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/LMmQ5evqscH5HP8ZIbeQzf4v/image.png\"></a></div>",
        "id": 312455603,
        "sender_full_name": "sedev627",
        "timestamp": 1669548465
    },
    {
        "content": "<p>Can I get some advice....?</p>",
        "id": 312455720,
        "sender_full_name": "sedev627",
        "timestamp": 1669548516
    },
    {
        "content": "<p>I posted the above question, but not answered yet...</p>",
        "id": 312455795,
        "sender_full_name": "sedev627",
        "timestamp": 1669548555
    },
    {
        "content": "<p>Can you post a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>, with <a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a>?</p>",
        "id": 312455915,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1669548610
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">init.default</span>\n<span class=\"kn\">import</span> <span class=\"n\">init.data.nat</span>\n<span class=\"kd\">def</span> <span class=\"n\">arith_sum</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">nat.succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">nat.succ</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">arith_sum</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">arith_formula</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span>\n<span class=\"kn\">open</span> <span class=\"n\">nat</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">arith_eq</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">arith_formula</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">arith_sum</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">arith_formula</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">ring</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">rw</span> <span class=\"n\">arith_sum</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">n_ih</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">add_one</span><span class=\"o\">,</span>\n    <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 312456148,
        "sender_full_name": "sedev627",
        "timestamp": 1669548727
    },
    {
        "content": "<p>Is it working...?</p>",
        "id": 312456184,
        "sender_full_name": "sedev627",
        "timestamp": 1669548757
    },
    {
        "content": "<p>That is not a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>.</p>",
        "id": 312456217,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1669548789
    },
    {
        "content": "<p>Oh sorry... I'll fix it</p>",
        "id": 312456250,
        "sender_full_name": "sedev627",
        "timestamp": 1669548817
    },
    {
        "content": "<p>Is it okay....?</p>",
        "id": 312456358,
        "sender_full_name": "sedev627",
        "timestamp": 1669548869
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 312456487,
        "sender_full_name": "sedev627",
        "timestamp": 1669548948
    },
    {
        "content": "<p>Precisely... I stuck at \"How to erase common constant 1/2 in equation....?\".</p>",
        "id": 312457025,
        "sender_full_name": "sedev627",
        "timestamp": 1669549197
    },
    {
        "content": "<p>Did I have some mistakes in above question...?</p>",
        "id": 312458195,
        "sender_full_name": "sedev627",
        "timestamp": 1669549860
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">arith_eq</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">arith_formula</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">arith_sum</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">arith_formula</span><span class=\"o\">,</span> <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">ring</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">arith_sum</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">nat.add_one</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">nat.mul_left_inj</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">linarith</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span><span class=\"o\">),</span>\n      <span class=\"n\">add_mul</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">nat.div_mul_cancel</span><span class=\"o\">,</span> <span class=\"n\">nat.div_mul_cancel</span><span class=\"o\">],</span> <span class=\"n\">ring</span><span class=\"o\">,</span>\n    <span class=\"n\">repeat</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">even_iff_two_dvd</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">nat.even_mul_succ_self</span> <span class=\"o\">}},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 312459794,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1669550577
    },
    {
        "content": "<p>Thank you....!</p>",
        "id": 312460885,
        "sender_full_name": "sedev627",
        "timestamp": 1669551086
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"456794\">Patrick Johnson</span> <a href=\"#narrow/stream/113488-general/topic/question/near/312459794\">said</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">arith_eq</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">arith_formula</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">arith_sum</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">arith_formula</span><span class=\"o\">,</span> <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">ring</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">arith_sum</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">nat.add_one</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">nat.mul_left_inj</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">linarith</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span><span class=\"o\">),</span>\n      <span class=\"n\">add_mul</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">nat.div_mul_cancel</span><span class=\"o\">,</span> <span class=\"n\">nat.div_mul_cancel</span><span class=\"o\">],</span> <span class=\"n\">ring</span><span class=\"o\">,</span>\n    <span class=\"n\">repeat</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">even_iff_two_dvd</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">nat.even_mul_succ_self</span> <span class=\"o\">}},</span>\n<span class=\"kd\">end</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>It has error \"unknown identifier 'nat.mul_left_inj'\"... where is nat.mul_left_inj?</p>",
        "id": 312463673,
        "sender_full_name": "sedev627",
        "timestamp": 1669552650
    },
    {
        "content": "<p>I forgot to update my mathlib. Here is the fixed proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">arith_eq</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">arith_formula</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">arith_sum</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">arith_formula</span><span class=\"o\">,</span> <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">ring</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">arith_sum</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">nat.add_one</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">mul_right_cancel_iff_of_pos</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">linarith</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span><span class=\"o\">),</span>\n      <span class=\"n\">add_mul</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">nat.div_mul_cancel</span><span class=\"o\">,</span> <span class=\"n\">nat.div_mul_cancel</span><span class=\"o\">],</span> <span class=\"n\">ring</span><span class=\"o\">,</span>\n    <span class=\"n\">all_goals</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">even_iff_two_dvd</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">nat.even_mul_succ_self</span> <span class=\"o\">}},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>You also have to import <code>data.nat.parity</code></p>",
        "id": 312464864,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1669553273
    },
    {
        "content": "<p>It is working....!!!! Thank you!</p>",
        "id": 312465004,
        "sender_full_name": "sedev627",
        "timestamp": 1669553345
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260794\">@sedev627</span> You can also use the <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#qify\">tactic#qify</a> tactic, where you can give it information about whether something evenly divides, which lets it convert everything to rational arithmetic. Then <code>ring</code> works.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">init.default</span>\n<span class=\"kn\">import</span> <span class=\"n\">init.data.nat</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.nat.parity</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic.qify</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">arith_sum</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">nat.succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">nat.succ</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">arith_sum</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">arith_formula</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span>\n<span class=\"kn\">open</span> <span class=\"n\">nat</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">two_dvd_mul_succ_self</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">∣</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">even_iff_two_dvd</span><span class=\"o\">],</span> <span class=\"n\">exact</span> <span class=\"n\">nat.even_mul_succ_self</span> <span class=\"n\">n</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">arith_eq</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">arith_formula</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">arith_sum</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">arith_formula</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">ring</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">rw</span> <span class=\"n\">arith_sum</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">n_ih</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">add_one</span><span class=\"o\">,</span>\n\n    <span class=\"n\">qify</span> <span class=\"o\">[</span><span class=\"n\">two_dvd_mul_succ_self</span><span class=\"o\">],</span>\n    <span class=\"n\">ring</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 312588189,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1669628752
    },
    {
        "content": "<p>Can Type casting be do in lean prover?</p>",
        "id": 312974608,
        "sender_full_name": "sedev627",
        "timestamp": 1669774903
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113488-general/topic/question/near/312588189\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"260794\">sedev627</span> You can also use the <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#qify\">tactic#qify</a> tactic, where you can give it information about whether something evenly divides, which lets it convert everything to rational arithmetic. Then <code>ring</code> works.</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">init.default</span>\n<span class=\"kn\">import</span> <span class=\"n\">init.data.nat</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.nat.parity</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic.qify</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">arith_sum</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">nat.succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">nat.succ</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">arith_sum</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">arith_formula</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span>\n<span class=\"kn\">open</span> <span class=\"n\">nat</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">two_dvd_mul_succ_self</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">∣</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">even_iff_two_dvd</span><span class=\"o\">],</span> <span class=\"n\">exact</span> <span class=\"n\">nat.even_mul_succ_self</span> <span class=\"n\">n</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">arith_eq</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">arith_formula</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">arith_sum</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">arith_formula</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">ring</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">rw</span> <span class=\"n\">arith_sum</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">n_ih</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">add_one</span><span class=\"o\">,</span>\n\n    <span class=\"n\">qify</span> <span class=\"o\">[</span><span class=\"n\">two_dvd_mul_succ_self</span><span class=\"o\">],</span>\n    <span class=\"n\">ring</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Oh... I saw it just now... This is what I want.. thank you :)</p>",
        "id": 312974691,
        "sender_full_name": "sedev627",
        "timestamp": 1669774980
    },
    {
        "content": "<p>Is there any examples using is_compact?</p>",
        "id": 317909233,
        "sender_full_name": "sedev627",
        "timestamp": 1672032607
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260794\">@sedev627</span> See <a href=\"https://leanprover-community.github.io/mathematics_in_lean/07_Topology.html#compactness\">https://leanprover-community.github.io/mathematics_in_lean/07_Topology.html#compactness</a>.</p>",
        "id": 317930930,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1672048690
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">id_</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"n\">a</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">has_mul_</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">mul</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">semigroup_</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">has_mul_</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">mul_assoc</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">mul</span> <span class=\"o\">(</span><span class=\"n\">mul</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">mul</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">mul</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">))</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">has_one_</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">one</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">monoid_</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">semigroup_</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">has_one</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">one_mul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">,</span> <span class=\"n\">mul</span> <span class=\"n\">one</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">mul_one</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">,</span> <span class=\"n\">mul</span> <span class=\"n\">a</span> <span class=\"n\">one</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">has_inv_</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">inv</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">group_</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">monoid_</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">has_inv_</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">mul_left_inv</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">,</span> <span class=\"n\">mul</span> <span class=\"o\">(</span><span class=\"n\">inv</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">one</span><span class=\"o\">)</span>\n\n\n<span class=\"kd\">class</span> <span class=\"n\">subgroup_</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">group_</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">mul_inv</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">},</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span> <span class=\"bp\">→</span>  <span class=\"n\">mul</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">inv</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I struggled to define subgroup. What's wrong?</p>",
        "id": 318307346,
        "sender_full_name": "sedev627",
        "timestamp": 1672252774
    },
    {
        "content": "<p>Seems you allow <code>S</code> to be empty.</p>",
        "id": 318308041,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1672253064
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/113488-general/topic/question/near/318308041\">said</a>:</p>\n<blockquote>\n<p>Seems you allow <code>S</code> to be empty.</p>\n</blockquote>\n<p>What should I do? I'm a beginner...</p>",
        "id": 318308355,
        "sender_full_name": "sedev627",
        "timestamp": 1672253235
    },
    {
        "content": "<p>What doesn't work that you want to do?</p>",
        "id": 318308588,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1672253348
    },
    {
        "content": "<p>I want subgroup_ to be well defined. However, the code now has an error.</p>",
        "id": 318308839,
        "sender_full_name": "sedev627",
        "timestamp": 1672253480
    },
    {
        "content": "<p>Show us.</p>",
        "id": 318308878,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1672253496
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/eMyGKBg8Y0rnaEGHfvposPVl/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/eMyGKBg8Y0rnaEGHfvposPVl/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/eMyGKBg8Y0rnaEGHfvposPVl/image.png\"></a></div>",
        "id": 318309013,
        "sender_full_name": "sedev627",
        "timestamp": 1672253567
    },
    {
        "content": "<p>Can you see it...?</p>",
        "id": 318309094,
        "sender_full_name": "sedev627",
        "timestamp": 1672253599
    },
    {
        "content": "<p><code>mul</code> and <code>inv</code> are functions in their respective namespaces <code>has_mul_</code> and <code>has_inv_</code></p>",
        "id": 318309309,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672253708
    },
    {
        "content": "<p>so you should either <code>open</code> them or write <code>has_mul_.mul</code> (or make a notation for it)</p>",
        "id": 318309338,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672253729
    },
    {
        "content": "<p>Thank you!!!</p>",
        "id": 318309387,
        "sender_full_name": "sedev627",
        "timestamp": 1672253760
    },
    {
        "content": "<p>the reason you don't need to do that when you use <code>extends</code> is because they are actually local variables in that case (you can see them in the context in the goal view)</p>",
        "id": 318309517,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672253814
    },
    {
        "content": "<p>Now when your code is syntactically correct, let's turn to the semantics. Do you want the empty set to be a subgroup?</p>",
        "id": 318312179,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1672255071
    },
    {
        "content": "<p>Unless you want to really change the mathematical definition, the empty set is not a subgroup...</p>",
        "id": 318312562,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1672255236
    }
]