[
    {
        "content": "<p>Sometimes when the <code>simp</code> set becomes too powerful, and can reduce a hypothesis to <code>false</code>, <code>norm_num</code> can no longer close goals.</p>\n<p>Here's an example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.linarith</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span><span class=\"o\">):</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">_</span><span class=\"bp\">|</span><span class=\"n\">_</span><span class=\"bp\">|</span><span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">norm_num</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">},</span> <span class=\"c1\">-- works great</span>\n  <span class=\"o\">{</span> <span class=\"n\">norm_num</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">nat.succ_eq_add_one</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"n\">linarith</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"c1\">-- I would like to have this as a simp lemma:</span>\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"n\">nat.bit0_ne_zero</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span><span class=\"o\">):</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">_</span><span class=\"bp\">|</span><span class=\"n\">_</span><span class=\"bp\">|</span><span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">norm_num</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">},</span> <span class=\"c1\">-- we end up with `h : false`, but the goal is still open</span>\n  <span class=\"o\">{</span> <span class=\"n\">norm_num</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">nat.succ_eq_add_one</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"n\">linarith</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 230004826,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1615544101
    },
    {
        "content": "<p>I was hoping to be able to make <code>norm_num</code> a bit more robust, so that if its internal calls to the simplifier reduced a hypothesis to <code>false</code>, it could always make use of that. However I've never fully understood the inner workings of <code>norm_num</code>, and couldn't work this out.</p>",
        "id": 230004988,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1615544163
    },
    {
        "content": "<p>Any advice, e.g. from <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>?</p>",
        "id": 230005023,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1615544171
    },
    {
        "content": "<p>Thanks for bringing this up, I just ran into something like that this week when some of my proofs broke after updating mathlib</p>",
        "id": 230009931,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1615546661
    },
    {
        "content": "<p>This looks like an issue in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.norm_num1/src\">src#tactic.norm_num1</a>. When the hypothesis simplifies to <code>false</code>, we attempt a call to <code>tactic.contradiction</code> which is what closes the goal. But when the hypothesis is already <code>false</code>, the simplify fails and so does norm_num (because there was nothing to simplify), and we don't perform cleanup actions</p>",
        "id": 230029327,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615556301
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/6655\">#6655</a></p>",
        "id": 230035521,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615558679
    },
    {
        "content": "<p>Thank you!</p>",
        "id": 230111256,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1615588745
    },
    {
        "content": "<p>(it's just amazing to work with a system which, from top to bottom, is continually improving, and in a community where questions and requests receive so much help!)</p>",
        "id": 230111637,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1615588945
    }
]