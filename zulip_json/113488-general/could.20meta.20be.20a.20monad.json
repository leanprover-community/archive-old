[
    {
        "content": "<p>Something that popped into my head recently, and my curiosity makes me ask this question:<br>\nCould <code>meta</code> have been a monad?<br>\nIn Haskell, there is the <code>IO</code> monad that marks functions \"unsafe\" (i.e., they can have side effects). I could imagine that <code>meta</code> could also be a monad that marks functions \"unsafe\" (i.e., they are meta). Would this work? What would be the pros and cons?</p>",
        "id": 135797914,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539560319
    },
    {
        "content": "<p>Do you mean <code>tactic</code>? It's already a monad.</p>",
        "id": 135802955,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1539570640
    },
    {
        "content": "<p>No, I meant what I wrote. [Edit: misinterpreted Simon's answer.]</p>",
        "id": 135806442,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539577608
    },
    {
        "content": "<p>I think you're conflating <code>meta</code> and <code>tactic</code> here.</p>",
        "id": 135806499,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1539577722
    },
    {
        "content": "<p>No, I really meant <code>meta</code>.</p>",
        "id": 135806648,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539578015
    },
    {
        "content": "<p>If I have a trusted piece of code, I could wrap it into the \"meta\" tactic, and it would no longer be trusted, etc, etc...</p>",
        "id": 135806698,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539578052
    },
    {
        "content": "<p>Or does <span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> mean that <code>tactic</code> is already a monad. I see. Yes, that I knew.</p>",
        "id": 135806700,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539578093
    },
    {
        "content": "<p>So I repeat my question: <em>Could</em> <code>meta</code> be a monad?</p>",
        "id": 135806707,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539578116
    },
    {
        "content": "<p>Ok so instead of having a keyword meta, you'd have a meta monad which would enable unbounded recursion and access to the prover's internals</p>",
        "id": 135806807,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1539578312
    },
    {
        "content": "<p>I know that they want more parts of the tactics framework to be in pure code for Lean 4 but I don't know if everything can go there.</p>",
        "id": 135806815,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1539578347
    },
    {
        "content": "<p>What gain do you think it would give us?</p>",
        "id": 135806816,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1539578364
    },
    {
        "content": "<p>Like I said in my first post: just curiosity. I don't know anything about theoretical pros and cons.</p>",
        "id": 135806917,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539578529
    },
    {
        "content": "<p>I think at the moment, pure code doesn't allow unbounded recursion yet but that could be added too. I can't think of other reasons to not write all meta code as pure code</p>",
        "id": 135807044,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1539578816
    },
    {
        "content": "<p>I think the best analogue here is actually the <code>io</code> monad of lean</p>",
        "id": 135807583,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539579829
    },
    {
        "content": "<p>it is non-meta, but you can do lots of external manipulation stuff and unbounded recursion</p>",
        "id": 135807626,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539579859
    },
    {
        "content": "<blockquote>\n<p>Could <code>meta</code> have been a monad?</p>\n</blockquote>\n<p>Yes, instead of the <code>meta</code> keyword we could have a <code>meta</code> monad as follows:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"err\">«</span><span class=\"n\">meta</span><span class=\"err\">»</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n<span class=\"bp\">|</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">false</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n</pre></div>\n\n\n<p>I think you can derive all features of the current meta in this monad, including <code>undefined</code> and general recursion.  But I'm not sure how helpful it would be.</p>",
        "id": 135814024,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1539589681
    },
    {
        "content": "<p>I'm not sure if it is helpful. But I do find it <em>funny</em>.</p>",
        "id": 135814262,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539590035
    },
    {
        "content": "<p>Encoding a type of effect as a monad has various generic disadvantages, including:</p>\n<ul>\n<li>You need different syntaxes to form the application <code>f x</code> depending on whether each of <code>f</code> or <code>x</code> is a monadic value or an ordinary value (here: <code>meta</code> or not).</li>\n<li>You need to specify an order of effects, which forces you to linearize your program to a certain extent, whereas a pure program can have a tree structure.</li>\n<li>If you want to use a second monad as well (say the <code>list</code> monad), now you need to figure out some way to combine the second monad with your effect monad (using something like monad transformers perhaps).</li>\n</ul>\n<p>In some contexts these points could be viewed as advantages, but the effect of nontermination is so mild that that doesn't apply here. For example, if <code>x</code> and <code>y</code> are possibly nonterminating computations, then computing <code>x</code> and then <code>y</code> is the same as computing <code>y</code> and then <code>x</code>.</p>",
        "id": 136114496,
        "sender_full_name": "Reid Barton",
        "timestamp": 1539958816
    },
    {
        "content": "<p>The only advantage of <code>meta</code> as a monad that I can think of is on the implementation side: Lean would no longer have to track the <code>meta</code> property. However, I think there would still be special cases required to reproduce the current behavior, e.g., <code>meta</code> inductive types have a relaxed syntax for recursion--Lean would have to make the constructors and/or recursors operate in the <code>meta</code> monad</p>",
        "id": 136114667,
        "sender_full_name": "Reid Barton",
        "timestamp": 1539958988
    }
]