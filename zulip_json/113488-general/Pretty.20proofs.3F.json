[
    {
        "content": "<p>[soft question]<br>\nA friend of mine asked me:<br>\n\"Isn't the whole point of computer proofs that they aren't pretty, and it's just the result that matters?\"</p>\n<p>I know that mathlib has pretty high standards regarding what proofs are added to mathlib. I could probably generate a few answers why. However, I don't know what is really important. So I thought it would be better to forward the question to you guys.</p>\n<p>Why do we care about how proofs in Lean are written?</p>",
        "id": 308976148,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1668082684
    },
    {
        "content": "<p>One argument is that we're basically writing a giant textbook and readability is thus important. Another is maintainability. A badly written proof is much harder to understand, hence to fix. Your friend seems to be thinking about one-time proofs, which you can just throw away once you're done. This is not the case in mathlib, where definitions change and we concretely have to keep everything coherent.</p>",
        "id": 308977023,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1668083088
    },
    {
        "content": "<p>Note that this doesn't actually argue for pretty proofs, but rather for short and simple proofs. They are quite correlated though.</p>",
        "id": 308977222,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1668083174
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113488-general/topic/Pretty.20proofs.3F/near/308977222\">said</a>:</p>\n<blockquote>\n<p>Note that this doesn't actually argue for pretty proofs, but rather for short and simple proofs. They are quite correlated though.</p>\n</blockquote>\n<p>I think I disagree with the correlation. Before continuing, <strong>full disclosure</strong>: I'm new to Lean and I come from the Isabelle camp, but from rare corner of if (<em>not</em> a user of HOL).</p>",
        "id": 309253551,
        "sender_full_name": "Pedro Sánchez Terraf",
        "timestamp": 1668196703
    },
    {
        "content": "<p>There, I used to write in an extremely verbose way, in such a way that in the ideal situation you wouldn't need to look at the Infoview/proof state to understand what is going on</p>",
        "id": 309254024,
        "sender_full_name": "Pedro Sánchez Terraf",
        "timestamp": 1668196979
    },
    {
        "content": "<p>So, my (perhaps repeated) question is whether here in mathlib we are going <em>against</em> the “giant textbook” approach by golfing proofs.</p>\n<p>The extreme opposite would be to have proofs written in a style similar to that used in the tutorials. I really do not know if there are some technical limitations (such as speed of processing the code) that make this prohibitive.</p>\n<p>I understand that this will result in proofs that are very long , but (again, using the “textbook“ analogy), perhaps someone could learn the math underlying some mathlib proof by reading just the code.</p>",
        "id": 309254740,
        "sender_full_name": "Pedro Sánchez Terraf",
        "timestamp": 1668197386
    },
    {
        "content": "<p>In some ways the hope is that you do have access to the info view, and there's been tooling developed to help with this such as Alectryon.</p>",
        "id": 309255648,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1668197871
    },
    {
        "content": "<p>I really disagree with the characterisation that we're writing a giant textbook and consider readability important. Only a handful of proofs in all of mathlib even approach readability.</p>",
        "id": 309266643,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1668204550
    },
    {
        "content": "<p>(I'm not saying I think we're doing the right thing, by ignoring readability.)</p>",
        "id": 309266683,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1668204578
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113488-general/topic/Pretty.20proofs.3F/near/309266683\">said</a>:</p>\n<blockquote>\n<p>(I'm not saying I think we're doing the right thing, by ignoring readability.)</p>\n</blockquote>\n<p>It is very reassuring that people at least give some thought to the matter. On the other hand, writing readable proofs is extremely, painfully slower.</p>",
        "id": 309274043,
        "sender_full_name": "Pedro Sánchez Terraf",
        "timestamp": 1668209866
    },
    {
        "content": "<blockquote>\n<p>I really disagree with the characterisation that we're writing a giant textbook and consider readability important.</p>\n</blockquote>\n<p>I think <a href=\"https://leanprover-community.github.io/mathlib_docs/find/Set.powerset/src\">src#Set.powerset</a> is a good example of how terse it can get</p>",
        "id": 309275521,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1668211067
    },
    {
        "content": "<p>on the other hand, it's nice to find the most elegant solution</p>",
        "id": 309275649,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1668211192
    },
    {
        "content": "<p>I think a good/realistic target would be: any proof less than 10 lines with no \"mathematical content\" (i.e. that you would never find yourself explaining to a human) can be golfed to the point of abscurity. Any proof longer than that should either be split (after which the first rule applies!) or it should have human readable comments explaining the proof structure in informal text, at least every few lines.</p>",
        "id": 309284076,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1668219324
    },
    {
        "content": "<p>I like this as a compromise as it gives authors considerable leeway in how they structure their work, but avoids the monolithic impenetrable proofs that we know can't be maintained.</p>",
        "id": 309284160,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1668219392
    },
    {
        "content": "<p>Adding to this, I think mathlib proofs aim to be at a higher level than just what comes after the <code>:=</code>, and instead it's in the statements of all the lemmas. It reminds me somewhat of the <a href=\"https://ncatlab.org/nlab/show/The+Rising+Sea\">rising sea metaphor</a>.</p>",
        "id": 309343308,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1668261507
    },
    {
        "content": "<p>If we want mathlib proofs to be readable (using infoview) we should use more <code>rw</code> and less <code>simp</code> IMO.</p>",
        "id": 309362432,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1668270946
    },
    {
        "content": "<p>That unfortunately makes proofs longer and more brittle overall.</p>",
        "id": 309377818,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1668280082
    },
    {
        "content": "<p>I'm not certain about this. I feel like long rw chains are superficially more brittle (i.e. a little change will break them, in an easily fixed way), but a big <code>simp</code> can be traumatic to fix: it's robust to small changes, but then once it breaks you have little idea of how it was meant to be working.</p>",
        "id": 309391081,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1668289797
    },
    {
        "content": "<p>That should be less true of <code>simp</code> if we had a way to distinguish among <code>simp</code> lemmas vs. non-<code>simp</code> lemmas within the braces (i.e., with coloring) as we had discussed in the other thread, along with code folding (so that all <code>simp</code>s could be <code>simp only</code> under the hood).</p>",
        "id": 309392043,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1668290568
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113488-general/topic/Pretty.20proofs.3F/near/309377818\">said</a>:</p>\n<blockquote>\n<p>That unfortunately makes proofs longer and more brittle overall.</p>\n</blockquote>\n<p>Is the consensus that length and robustness are more important than readability then?</p>",
        "id": 309437988,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1668335451
    },
    {
        "content": "<p>When I read <code>simp only [foo, bar, baz],</code> I have no idea what happened (some magic probably).<br>\nIf someone writes <code>rw [foo, bar, foo, baz, foo],</code> instead, I click my mouse after each comma and see the transformation step by step.</p>",
        "id": 309438543,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1668335929
    },
    {
        "content": "<p>To bring in another aspect: is there any expected difference in efficiency between <code>rw [foo, bar, foo, baz, foo]</code> and <code>simp only [foo, bar, baz]</code>? (I assume <code>simp [foo, bar, baz]</code> would be less efficient, since it has to find the relevant lemmas first?)</p>",
        "id": 309438899,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1668336134
    },
    {
        "content": "<p>My intuition says <code>rw [foo, bar, foo, baz, foo],</code> must be more efficient, but my intuition has been wrong many times.</p>",
        "id": 309439096,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1668336264
    },
    {
        "content": "<p>Yes and no, because <code>simp</code> calls are much shorter, so take less parsing time. This is quite noticeable in very long lists of rewrite.</p>",
        "id": 309439110,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1668336279
    },
    {
        "content": "<p>Sometimes you don't get the choice; <code>rw foo</code> works sometimes where <code>simp only [foo]</code> doesn't, and vice versa</p>",
        "id": 309439120,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1668336286
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/113488-general/topic/Pretty.20proofs.3F/near/309438543\">said</a>:</p>\n<blockquote>\n<p>When I read <code>simp only [foo, bar, baz],</code> I have no idea what happened (some magic probably).</p>\n</blockquote>\n<p><code>set_option trace.simplify.rewrite true</code> can be helpful.</p>",
        "id": 309439748,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1668336714
    },
    {
        "content": "<p>Hm.. Seems like there is always 0 in the simp rewrite list numbering. For example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">open</span> <span class=\"n\">nat</span> <span class=\"n\">set</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.simplify.rewrite</span> <span class=\"n\">true</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">∈</span> <span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"bp\">∪</span> <span class=\"n\">range</span> <span class=\"n\">succ</span> <span class=\"bp\">↔</span> <span class=\"mi\">0</span> <span class=\"bp\">∈</span> <span class=\"bp\">@</span><span class=\"n\">univ</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n</code></pre></div>\n<p>Produces:</p>\n<div class=\"codehilite\" data-code-language=\"txt\"><pre><span></span><code>0. [simplify.rewrite] [nat.range_succ]: range succ ==&gt; {i : ℕ | 0 &lt; i}\n0. [simplify.rewrite] [set.singleton_union]: {0} ∪ set_of (has_lt.lt 0) ==&gt; insert 0 (set_of (has_lt.lt 0))\n0. [simplify.rewrite] [set.mem_set_of_eq]: 0 ∈ set_of (has_lt.lt 0) ==&gt; 0 &lt; 0\n0. [simplify.rewrite] [nat.not_lt_zero]: 0 &lt; 0 ==&gt; false\n0. [simplify.rewrite] [set.mem_insert_iff]: 0 ∈ insert 0 (set_of (has_lt.lt 0)) ==&gt; 0 = 0 ∨ 0 ∈ set_of (has_lt.lt 0)\n0. [simplify.rewrite] [eq_self_iff_true]: 0 = 0 ==&gt; true\n0. [simplify.rewrite] [or_false]: true ∨ false ==&gt; true\n0. [simplify.rewrite] [set.mem_univ]: 0 ∈ univ ==&gt; true\n0. [simplify.rewrite] [iff_self]: true ↔ true ==&gt; true\n</code></pre></div>\n<p>Shouldn't it be <code>1. 2. 3. ...</code> instead of <code>0. 0. 0. ...</code>? Or do these <code>0</code>s stand for something else?</p>",
        "id": 309440873,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1668337411
    },
    {
        "content": "<p>Here's where that trace message is generated: <a href=\"https://github.com/leanprover-community/lean/blob/master/src/library/tactic/simplify.cpp#L523\">https://github.com/leanprover-community/lean/blob/master/src/library/tactic/simplify.cpp#L523</a></p>\n<p>If I understand things correctly, the number before the <code>.</code> gives the \"depth\" of the trace message, which keeps track of how deeply nested of a context the trace message comes from. So for <code>simplify.rewrite</code> there's no nesting of this type. <a href=\"https://github.com/leanprover-community/lean/blob/master/src/library/trace.cpp#L170\">https://github.com/leanprover-community/lean/blob/master/src/library/trace.cpp#L170</a></p>",
        "id": 309442963,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1668338804
    },
    {
        "content": "<p>Do you think I use too much <code>rw</code>s?<br>\n<a href=\"https://github.com/leanprover-community/mathlib/pull/17554/files\">https://github.com/leanprover-community/mathlib/pull/17554/files</a><br>\nMany people would probably prove these two lemmata by <code>simp</code>s.</p>",
        "id": 310210226,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1668521754
    },
    {
        "content": "<p>Are a lot of declaration used in <code>rw</code> tagged <code>simp</code>? I mean, if just <code>simp [foo]</code> is enough then it's probably better, but I don't see any problem with <code>rw</code>.</p>",
        "id": 310210625,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1668521866
    },
    {
        "content": "<p>I think they are all <code>simp</code> lemmas. Both proofs can be replaced by:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">L</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">L_ih</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Do you think it is better to PR it with these <code>simp</code>s instead?</p>",
        "id": 310211965,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1668522221
    },
    {
        "content": "<p>Is the lemma obvious? Then <code>simp</code> is a pretty proof. You can probably just do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">append_join_append</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">x</span> <span class=\"bp\">++</span> <span class=\"o\">(</span><span class=\"n\">list.map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">l</span> <span class=\"bp\">++</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">L</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">join</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">list.map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">++</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"n\">L</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">join</span> <span class=\"bp\">++</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">induction</span> <span class=\"n\">L</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 310212462,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1668522347
    },
    {
        "content": "<p>It is obvious to me, yes.</p>",
        "id": 310212650,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1668522396
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/113488-general/topic/Pretty.20proofs.3F/near/310212462\">said</a>:</p>\n<blockquote>\n<p>Is the lemma obvious? Then <code>simp</code> is a pretty proof. You can probably just do</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">append_join_append</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">x</span> <span class=\"bp\">++</span> <span class=\"o\">(</span><span class=\"n\">list.map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">l</span> <span class=\"bp\">++</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">L</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">join</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">list.map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">++</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"n\">L</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">join</span> <span class=\"bp\">++</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">induction</span> <span class=\"n\">L</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">}</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Your code doesn't pass the induction hypothesis into the <code>simp</code> does it?</p>",
        "id": 310212832,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1668522457
    },
    {
        "content": "<p>The idea is that we don't care about readability of obvious results (meaning that no human will ever want to see the proof.</p>",
        "id": 310212900,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1668522475
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/113488-general/topic/Pretty.20proofs.3F/near/310212832\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/113488-general/topic/Pretty.20proofs.3F/near/310212462\">said</a>:</p>\n<blockquote>\n<p>Is the lemma obvious? Then <code>simp</code> is a pretty proof. You can probably just do</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">append_join_append</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">x</span> <span class=\"bp\">++</span> <span class=\"o\">(</span><span class=\"n\">list.map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">l</span> <span class=\"bp\">++</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">L</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">join</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">list.map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">++</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"n\">L</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">join</span> <span class=\"bp\">++</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">induction</span> <span class=\"n\">L</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">}</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Your code doesn't pass the induction hypothesis into the <code>simp</code> does it?</p>\n</blockquote>\n<p>Ops: <code>by { induction L; simp * }</code></p>",
        "id": 310213794,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1668522721
    },
    {
        "content": "<p>I think the <code>rw</code>s are good here, as they make it obvious what the API is, and they make the proof less fragile</p>",
        "id": 310213841,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1668522725
    },
    {
        "content": "<p>If you've gone to the effort of finding the rewrites you may as well commit them</p>",
        "id": 310213894,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1668522742
    },
    {
        "content": "<p>It's a lot more annoying to move proofs between (or within) files if you don't know what lemmas the proof uses</p>",
        "id": 310213995,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1668522773
    },
    {
        "content": "<p>Surely the <code>rw</code> make the proof <em>more</em> fragile?</p>",
        "id": 310227376,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1668526675
    },
    {
        "content": "<p>I think <code>rw</code> makes it more likely to need a fix but easier to fix it when it happens.</p>",
        "id": 310228220,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1668526917
    },
    {
        "content": "<p><code>rw</code>s are also good at informing if the result you're looking for might already exist somewhere  else</p>",
        "id": 310228603,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1668527017
    }
]