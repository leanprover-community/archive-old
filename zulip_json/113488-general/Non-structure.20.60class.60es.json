[
    {
        "content": "<p>Did we decide that one or both of these was outlawed in mathlib (for lean 4 reasons?)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"kd\">inductive</span> <span class=\"n\">has_foo_ind</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">strong_foo</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">,</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">has_foo_ind</span>\n<span class=\"bp\">|</span> <span class=\"n\">weak_foo</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">has_foo_ind</span>\n\n<span class=\"kd\">@[class]</span>\n<span class=\"kd\">def</span> <span class=\"n\">has_foo_def</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">,</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">true</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 230667911,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615976848
    },
    {
        "content": "<p>The second one is definitely out.</p>",
        "id": 230668266,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1615977051
    },
    {
        "content": "<p>Class inductives should be fine though (I hope).</p>",
        "id": 230668287,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1615977066
    },
    {
        "content": "<p>Alright, good; I was thinking of suggesting using <code>class inductive</code> in <a href=\"https://github.com/leanprover-community/mathlib/issues/6671\">#6671</a>, as it seems to make the <code>or</code> easier to work with:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.char_p.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.char_zero</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.nat.prime</span>\n\n<span class=\"sd\">/-- The definition of the exponential characteristic of a semiring. (from the PR) -/</span>\n<span class=\"kd\">class</span> <span class=\"n\">exp_char</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">exp_char_def</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∧</span> <span class=\"n\">char_zero</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">q.prime</span> <span class=\"bp\">∧</span> <span class=\"n\">char_p</span> <span class=\"n\">R</span> <span class=\"n\">q</span><span class=\"o\">))</span>\n\n<span class=\"sd\">/-- Easier definition to work with? -/</span>\n<span class=\"kd\">class</span> <span class=\"kd\">inductive</span> <span class=\"n\">exp_char'</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">(</span><span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">char_zero</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">exp_char'</span>\n<span class=\"bp\">|</span> <span class=\"n\">prime</span> <span class=\"o\">(</span><span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"n\">q.prime</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">char_p</span> <span class=\"n\">R</span> <span class=\"n\">q</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">exp_char'</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">integral_domain</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"n\">exp_char'</span> <span class=\"n\">R</span> <span class=\"mi\">3</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">casesI</span> <span class=\"n\">hq</span><span class=\"o\">,</span>  <span class=\"c1\">-- unpacks all the instances</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"n\">exp_char</span> <span class=\"n\">R</span> <span class=\"mi\">3</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">hq.exp_char_def</span><span class=\"o\">,</span>  <span class=\"c1\">-- requires unpacking ands</span>\n  <span class=\"o\">{</span> <span class=\"n\">haveI</span> <span class=\"o\">:=</span> <span class=\"n\">h.2</span><span class=\"o\">,</span>\n    <span class=\"gr\">sorry</span><span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">haveI</span> <span class=\"o\">:=</span> <span class=\"n\">h.2</span><span class=\"o\">,</span>\n    <span class=\"gr\">sorry</span><span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 230668466,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615977169
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"247154\">@Jakob Scholbach</span></p>",
        "id": 230668486,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615977183
    }
]