[
    {
        "content": "<p>Idris has a nice feature where (in emacs) <code>C-c C-e</code> extracts a goal as a top-level definition, and replaces the current goal with a call to that new definition. We have something similar with <code>extract_goal</code> in mathlib. How hard would it be to extend <code>extract_goal</code> so that it automatically makes a top level def (with a sorry) and replaces the current goal with that def?</p>",
        "id": 269942636,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1643561116
    },
    {
        "content": "<p>(I guess it would have to be a hole command?)</p>",
        "id": 269942731,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1643561259
    },
    {
        "content": "<p>Is <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#abstract\">tactic.interactive.abstract</a> what you want? The tactic description looks promising but I have never figured out how to make it work.</p>",
        "id": 269942920,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1643561515
    },
    {
        "content": "<p>Maybe! I have never even heard of <code>abstract</code>...</p>",
        "id": 269943689,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1643562328
    },
    {
        "content": "<p>I'll have to try it later.</p>",
        "id": 269943693,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1643562334
    },
    {
        "content": "<p>I think Adam wants something that changes the source code, right? <code>abstract</code> can be useful but it just creates a new declaration under the hood. I think what you're describing is <code>extract_goal</code> plus VSCode support. This doesn't seem doable with the current <code>Try this:</code> or with hole commands.</p>",
        "id": 269945510,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1643564408
    },
    {
        "content": "<p>So what is <code>abstract</code> actually useful for? For example, can it help with deterministic timeouts in long proofs?</p>",
        "id": 269950586,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1643570365
    },
    {
        "content": "<p>I just tried this, and I think <code>extract_goal</code> uses <code>pp</code> instead of <code>to_string</code> so copy-pasting goals created by it doesn't usually work :/ is round-tripping easier in Lean4?</p>",
        "id": 269951871,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1643571742
    }
]