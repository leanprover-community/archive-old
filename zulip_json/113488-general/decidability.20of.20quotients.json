[
    {
        "content": "<p>What is going on in elaboration here such that the first example fails but the other ones work?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.list.cycle</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">cycle.nodup</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">])</span> <span class=\"o\">:=</span> <span class=\"n\">dec_trivial</span> <span class=\"c1\">-- why do I get two errors here?</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">cycle.nodup</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">cycle</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">dec_trivial</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">cycle.nodup</span> <span class=\"n\">ℕ</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">])</span> <span class=\"o\">:=</span> <span class=\"n\">dec_trivial</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">cycle.nodup</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">])</span> <span class=\"o\">:=</span> <span class=\"n\">cycle.nodup_coe_iff.mpr</span> <span class=\"n\">dec_trivial</span>\n</code></pre></div>",
        "id": 255611886,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1633022163
    },
    {
        "content": "<p>Do they all work with <code>lemma</code>?</p>",
        "id": 255627487,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1633027760
    },
    {
        "content": "<p>Remember <code>example</code> means <code>def</code></p>",
        "id": 255627499,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1633027768
    },
    {
        "content": "<p>Because the coercion could be to <code>zmod 1</code>?</p>",
        "id": 255657170,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1633040028
    },
    {
        "content": "<p>If that was the case, then why would the last example work, where the type of the elements is not specified?</p>",
        "id": 255660286,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1633041612
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/cycle.nodup_coe_iff\">docs#cycle.nodup_coe_iff</a></p>",
        "id": 255697345,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1633070531
    },
    {
        "content": "<p>Because for some reason lean decides you're talking about naturals in the last one? What is the type of the term produced?</p>",
        "id": 255697562,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1633070713
    },
    {
        "content": "<p>For me this lemma looks ambiguous/false. It's not true that <code>(1 : R) ≠ 2</code> in general so whether the lemma is provable or not depends on exactly what is going on when it's elaborated.</p>",
        "id": 255697752,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1633070827
    },
    {
        "content": "<p>This is just a guess really but maybe cycle.nodup_coe_iff eliminates the <code>↑</code>, and then defaulting kicks in. It's not really surprising that in the others, an explicit <code>↑</code> without fixed source or target type doesn't work well.</p>",
        "id": 255722836,
        "sender_full_name": "Reid Barton",
        "timestamp": 1633084461
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.list.cycle</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">cycle.nodup</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">])</span> <span class=\"o\">:=</span> <span class=\"n\">dec_trivial</span> <span class=\"c1\">-- infoview says this is about `cycle ⁇`</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">cycle.nodup</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">])</span> <span class=\"o\">:=</span> <span class=\"n\">cycle.nodup_coe_iff.mpr</span> <span class=\"n\">dec_trivial</span> <span class=\"c1\">-- infoview says this is about `cycle nat`</span>\n</code></pre></div>",
        "id": 255724372,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1633085348
    },
    {
        "content": "<p>I think that <code>↑[1, 2]</code> is just a highly ambiguous thing to say. Are you talking about nats or not? If nats then say so, if not then the result isn't true. <code>1</code> doesn't mean <code>1 : nat</code>, it means <code>has_one.one</code> so it could mean anything without any further clues.</p>",
        "id": 255724498,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1633085427
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/decidability.20of.20quotients/near/255627487\">said</a>:</p>\n<blockquote>\n<p>Do they all work with <code>lemma</code>?</p>\n</blockquote>\n<p>Since no one replied to this, no, they don't:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.list.cycle</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">foo1</span> <span class=\"o\">:</span> <span class=\"n\">cycle.nodup</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">])</span> <span class=\"o\">:=</span> <span class=\"n\">dec_trivial</span>\n<span class=\"c1\">-- fail: don't know how to synthesize placeholder `Type ?`</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">foo2</span> <span class=\"o\">:</span> <span class=\"n\">cycle.nodup</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">cycle</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">dec_trivial</span>\n<span class=\"c1\">-- ok</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">foo3</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">cycle.nodup</span> <span class=\"n\">ℕ</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">])</span> <span class=\"o\">:=</span> <span class=\"n\">dec_trivial</span>\n<span class=\"c1\">-- ok</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">foo4</span> <span class=\"o\">:</span> <span class=\"n\">cycle.nodup</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">])</span> <span class=\"o\">:=</span> <span class=\"n\">cycle.nodup_coe_iff.mpr</span> <span class=\"n\">dec_trivial</span>\n<span class=\"c1\">-- fail: don't know how to synthesize placeholder `Type ?`</span>\n</code></pre></div>",
        "id": 255724591,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1633085495
    },
    {
        "content": "<p>This is the \"<code>example</code> is <code>def</code> and works out its type from the proof\" thing again</p>",
        "id": 255724657,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1633085523
    },
    {
        "content": "<p>Oh -- even <code>example : cycle.nodup (↑[(1 : ℕ), 2]) := dec_trivial</code> fails :-(</p>",
        "id": 255724670,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1633085526
    },
    {
        "content": "<p>even if the literals <code>1</code> and <code>2</code> are determined to be <code>nat</code>, which I think Lean will do, it doesn't mean the result is <code>cycle nat</code>, because there is no <code>out_param</code> in the class controlling <code>coe</code>; Lean has to imagine that you could mean <code>cycle</code> of anything</p>",
        "id": 255724834,
        "sender_full_name": "Reid Barton",
        "timestamp": 1633085639
    },
    {
        "content": "<p>There's something broken with the <code>has_lift_t</code> resolution that I found while looking at this... I'll make a new thread</p>",
        "id": 255726039,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1633086253
    },
    {
        "content": "<p>I was relying on the thought that numerals are nat (to lean 3) until notated or inferred otherwise. Perhaps the coe arrow is too powerful, and apart from allowing the list to be interpetered as a cycle, it also fuzzed the type of the numeral.</p>",
        "id": 255734568,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1633090961
    },
    {
        "content": "<p>This question is around an issue of how to encode a dec_trivial for the notation I define in <a href=\"https://github.com/leanprover-community/mathlib/issues/9470\">#9470</a></p>",
        "id": 255734732,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1633091054
    },
    {
        "content": "<p>Where the notation constructs a list over an arbitrary type, then lifts that into a quotient, and tries to prove its nodup by brute force</p>",
        "id": 255734860,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1633091120
    }
]