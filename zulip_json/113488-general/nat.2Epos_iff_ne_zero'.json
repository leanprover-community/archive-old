[
    {
        "content": "<p>From <code>data.nat.basic</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">pos_iff_ne_zero</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">↔</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨</span><span class=\"n\">ne_of_gt</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">pos_of_ne_zero</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">pos_iff_ne_zero&#39;</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">↔</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">pos_iff_ne_zero</span>\n</pre></div>\n\n\n<p>Anyone understand the purpose of this?</p>",
        "id": 178960617,
        "sender_full_name": "Reid Barton",
        "timestamp": 1571929133
    },
    {
        "content": "<p>rotflol</p>",
        "id": 178960849,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571929284
    },
    {
        "content": "<p>Looks like <code>pos_iff_ne_zero</code> originally had <code>n &gt; 0</code> until <a href=\"https://github.com/leanprover-community/mathlib/pull/1436/files#diff-2ea34d3e10b301f8e7ff60d03fd4e799L123\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/pull/1436/files#diff-2ea34d3e10b301f8e7ff60d03fd4e799L123\">#1436</a>.</p>",
        "id": 178960894,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1571929303
    },
    {
        "content": "<p>Aha, that makes sense</p>",
        "id": 178961079,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571929427
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>src/analysis/complex/exponential.lean:have hn0 : (n : ℝ) ≠ 0, by simpa [nat.pos_iff_ne_zero&#39;] using hn,\nsrc/data/nat/basic.lean:theorem pos_iff_ne_zero&#39; : 0 &lt; n ↔ n ≠ 0 := pos_iff_ne_zero\nsrc/data/nat/basic.lean:by have := @size_pos n; simp [pos_iff_ne_zero&#39;] at this;\nsrc/ring_theory/multiplicity.lean:  rw [finite_int_iff_nat_abs_finite, finite_nat_iff, nat.pos_iff_ne_zero&#39;],\n</pre></div>",
        "id": 178961196,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571929478
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/1610\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/1610\">#1610</a></p>",
        "id": 178985177,
        "sender_full_name": "Reid Barton",
        "timestamp": 1571943448
    },
    {
        "content": "<p>It's in the hands of Travis now... <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 178985633,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571943659
    }
]