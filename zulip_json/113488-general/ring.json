[
    {
        "content": "<p><code>ring</code> just failed me on</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">come_on_ring</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n   <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"o\">((</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">ring</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">neg_neg</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">mul_comm</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>First line should work but does not close the goal. Also, if you replace the line <code>rw mul_comm</code> with <code>ring</code>, it fails again but expands the definition of the inverse, which it didn't do in the first step.</p>",
        "id": 180906232,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1573899000
    },
    {
        "content": "<p>this works for me:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">ring</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">ℂ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_field</span> <span class=\"n\">ℂ</span><span class=\"o\">]</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">come_on_ring</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n   <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"o\">((</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">ring1</span>\n</pre></div>",
        "id": 180906350,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573899210
    },
    {
        "content": "<p>On further review, though, that typeclass is nonsense. Something requires a linear ordered semiring</p>",
        "id": 180906394,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573899268
    },
    {
        "content": "<p>I think it is because it is trying to use <code>rat.cast</code> to make sense of the one half</p>",
        "id": 180906412,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573899324
    },
    {
        "content": "<p>Yes, <code>ℂ</code> is not really ordered, but still it has characteristic <code>0</code>...</p>",
        "id": 180906482,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1573899437
    },
    {
        "content": "<p>The culprit is <code>tactic.norm_num</code> from core:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">norm_num</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">))</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">trace</span>\n<span class=\"c1\">-- failed to synthesize &#39;linear_ordered_semiring&#39;</span>\n</pre></div>",
        "id": 180906588,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573899625
    },
    {
        "content": "<p>mathlib has a <code>char_zero</code> typeclass to address this, but we used <code>linear_ordered_field</code> before that and the norm_num lemmas use it too</p>",
        "id": 180906591,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573899635
    },
    {
        "content": "<p>It uses</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">norm_num</span><span class=\"bp\">.</span><span class=\"n\">div_eq_div_helper</span>\n<span class=\"c1\">-- theorem norm_num.div_eq_div_helper : ∀ {α : Type u} [_inst_1 : field α] (a b c d v : α),</span>\n<span class=\"c1\">--   a * d = v → c * b = v → b ≠ 0 → d ≠ 0 → a / b = c / d</span>\n</pre></div>\n\n\n<p>to prove equality of divisions by cross multiplication (causing a <code>2 ≠ 0</code> subgoal), followed by</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">norm_num</span><span class=\"bp\">.</span><span class=\"n\">nonzero_of_pos_helper</span>\n<span class=\"c1\">-- theorem norm_num.nonzero_of_pos_helper : ∀ {α : Type u} [_inst_1 : linear_ordered_semiring α] (a : α), a &gt; 0 → a ≠ 0</span>\n</pre></div>\n\n\n<p>to deduce this from <code>2 &gt; 0</code> (at which point we are talking nonsense since there is no such order on complexes)</p>",
        "id": 180906779,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573900005
    },
    {
        "content": "<p>In any case, you can solve the lemma like this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">come_on_ring</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n   <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"o\">((</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"n\">generalize</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ring</span><span class=\"o\">}</span>\n</pre></div>",
        "id": 180906851,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573900131
    },
    {
        "content": "<p>OK. Finally, in my more complex computation, I cheated by hiding <code>1/2</code> from ring, with (a variant of)</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">come_on_ring</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n   <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"o\">((</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">set</span> <span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span><span class=\"o\">,</span>\n  <span class=\"n\">ring</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 180906866,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1573900173
    },
    {
        "content": "<p>Yes, it's essentially the same as your solution with <code>generalize</code>.</p>",
        "id": 180906919,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1573900215
    }
]