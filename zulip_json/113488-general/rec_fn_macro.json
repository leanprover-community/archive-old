[
    {
        "content": "<p>I just updated Lean from 3.3.0 to 3.4.1, and now when I write this code:</p>\n<div class=\"codehilite\"><pre><span></span>axiom R : Type\n\ninductive Sampler : Type\n| Ret : Sampler\n| BindUniform : (R → Sampler) → Sampler\n\ndef Bind : Sampler → (ℕ → Sampler) → Sampler\n| Sampler.Ret f := f 0\n| (Sampler.BindUniform k) f := Sampler.BindUniform (λ x, Bind (k x) f)\n</pre></div>\n\n\n<p>I get the error <code>rec_fn_macro only allowed in meta definitions</code> in the definition of <code>Bind</code>. Is this a bug? Should I submit it as a Github issue? Or do I just not understand what's going on?</p>",
        "id": 126885006,
        "sender_full_name": "Ben Sherman",
        "timestamp": 1526927263
    },
    {
        "content": "<p>whether or not it's a bug, lean 3.4.1 is the last release in the 3xx series and only critical issues are going to be fixed</p>",
        "id": 126886035,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1526928614
    },
    {
        "content": "<p>if you change out <code>axiom R</code> for <code>variable R</code> do you get a more educational error message?</p>",
        "id": 126886556,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1526929310
    },
    {
        "content": "<p>This is some kind of universe problem, I bet</p>",
        "id": 126886865,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1526929645
    },
    {
        "content": "<p>maybe not. I just pasted it into my vscode and replaced <code>axiom R</code> with <code>variable R</code>. If you <code>#print</code> Sampler you get that the Sampler type is <code>Type u -&gt; Type u</code>. Your definition is type incorrect. Now I'm confused why it ever worked in <code>3.3.0</code>...</p>",
        "id": 126887061,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1526929894
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">Sampler</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u₁</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u₁</span>\n<span class=\"n\">constructors</span><span class=\"o\">:</span>\n<span class=\"n\">Sampler</span><span class=\"bp\">.</span><span class=\"n\">Ret</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u₁</span><span class=\"o\">),</span> <span class=\"n\">Sampler</span> <span class=\"n\">R</span>\n<span class=\"n\">Sampler</span><span class=\"bp\">.</span><span class=\"n\">BindUniform</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u₁</span><span class=\"o\">},</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">Sampler</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Sampler</span> <span class=\"n\">R</span>\n</pre></div>",
        "id": 126887150,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1526929984
    },
    {
        "content": "<p>huh, interesting. The definition is correct if you use <code>axiom</code>...</p>",
        "id": 126887244,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1526930071
    },
    {
        "content": "<p>I guess a variable is something which, if mentioned in a definition, secretly appends itself as a \"forall R : type\" in front of definitions</p>",
        "id": 126888047,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526931021
    },
    {
        "content": "<p>Yeah, if I switch to using a <code>variable</code> or a <code>parameter</code> in a section, the definition goes through fine. And I don't think <code>Sampler</code> becomes universe-polymorphic in any case</p>",
        "id": 126888052,
        "sender_full_name": "Ben Sherman",
        "timestamp": 1526931027
    },
    {
        "content": "<p>whereas perhaps with an axiom this does not happen.</p>",
        "id": 126888067,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526931056
    },
    {
        "content": "<p>But isn't the error with <code>Bind</code> simply because Lean can't prove that the definition \"terminates\"?</p>",
        "id": 126888086,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526931079
    },
    {
        "content": "<p>cf the meta def of that 91 function in Programming In Lean, where the definition is OK but this is too hard for Lean to spot so you have to make it meta</p>",
        "id": 126888148,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526931129
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">axiom</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"kn\">variable</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">=</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">=</span> <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">X</span> <span class=\"c1\">-- R = R</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">Y</span> <span class=\"c1\">-- ∀ (S : Type), S = S</span>\n</pre></div>",
        "id": 126888224,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526931237
    },
    {
        "content": "<p>The axiom makes a new constant, like <code>quotient.sound</code> or whatever -- when you mention quotient.sound you don't get random \"forall quotient.sound\" hypotheses appearing in theorems</p>",
        "id": 126888301,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526931302
    },
    {
        "content": "<p>but the variable gets inserted. I guess you guys both know this.</p>",
        "id": 126888317,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526931317
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> No,  this is actually a primitive recursive definition:</p>\n<div class=\"codehilite\"><pre><span></span>protected eliminator Sampler.rec : Π {real : Type} {C : Sampler real → Sort l},\n  C (Sampler.Ret real) →\n  (Π (a : real → Sampler real), (Π (a_1 : real), C (a a_1)) → C (Sampler.BindUniform a)) →\n  Π (n : Sampler real), C n\n</pre></div>\n\n\n<p>Notice how the inductive hypothesis allows you to apply the continuation to any argument.</p>",
        "id": 126888389,
        "sender_full_name": "Ben Sherman",
        "timestamp": 1526931380
    },
    {
        "content": "<p>I am suggesting that your definition of Bind relies on evaluating Bind elsewhere, does it not?</p>",
        "id": 126888423,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526931462
    },
    {
        "content": "<p>And with the definition of nat, Lean can use some recursion principle to check that the definition is good.</p>",
        "id": 126888487,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526931508
    },
    {
        "content": "<p>Presumably the error means \"I find myself trying to prove that this definition of Bind has a decent recursor but I find myself trying to write some induction over functions, so I give up, make me meta so I don't have to worry about this sort of thing and can just be untrusted code\"</p>",
        "id": 126888566,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526931608
    },
    {
        "content": "<p>heh</p>",
        "id": 126888576,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526931652
    },
    {
        "content": "<p>making the definition of Bind meta doesn't make the error go away :-)</p>",
        "id": 126888586,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526931674
    },
    {
        "content": "<p>So the definition works if I apply the recursor directly:</p>\n<div class=\"codehilite\"><pre><span></span>axiom real : Type\n\ninductive Sampler : Type\n| Ret : Sampler\n| BindUniform : (real → Sampler) → Sampler\n\ndef Bind (x : Sampler) : (ℕ → Sampler) → Sampler\n:= @Sampler.rec_on (λ _, (ℕ → Sampler) → Sampler) x\n     (λ f, f 0)\n     (λ k ih f, Sampler.BindUniform (λ x, ih x f))\n</pre></div>\n\n\n<p>So, even though the definition is primitive recursive, it does look to be something to do with it failing in figuring out the recursion scheme.</p>",
        "id": 126888735,
        "sender_full_name": "Ben Sherman",
        "timestamp": 1526931849
    },
    {
        "content": "<p>I am really confused by that recursor</p>",
        "id": 126889923,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526933321
    },
    {
        "content": "<p><code>(Π (a_1 : R), C (a a_1))</code></p>",
        "id": 126889945,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526933349
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">Sampler</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">Ret</span> <span class=\"o\">:</span> <span class=\"n\">Sampler</span>\n<span class=\"bp\">|</span> <span class=\"n\">BindUniform</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">ℤ</span> <span class=\"bp\">→</span> <span class=\"n\">Sampler</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Sampler</span>\n\n\n\n<span class=\"n\">def</span> <span class=\"n\">Bind</span> <span class=\"o\">:</span> <span class=\"n\">Sampler</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">Sampler</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Sampler</span>\n<span class=\"bp\">|</span> <span class=\"n\">Sampler</span><span class=\"bp\">.</span><span class=\"n\">Ret</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">Sampler</span><span class=\"bp\">.</span><span class=\"n\">BindUniform</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">Sampler</span><span class=\"bp\">.</span><span class=\"n\">BindUniform</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">Bind</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 126890135,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526933551
    },
    {
        "content": "<p>That works fine</p>",
        "id": 126890137,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526933553
    },
    {
        "content": "<p>replacing the constant with an explicit type</p>",
        "id": 126890155,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526933585
    },
    {
        "content": "<p>The definition with rec_on looks a bit funny to me -- k doesn't seem to play a role</p>",
        "id": 126890565,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526934131
    },
    {
        "content": "<p>oh I see</p>",
        "id": 126890599,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526934196
    },
    {
        "content": "<p><code>ih x</code> is <code>Bind (k x)</code></p>",
        "id": 126890616,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526934230
    },
    {
        "content": "<p>that's the role of <code>ih</code></p>",
        "id": 126890620,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526934241
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> Yes, exactly!</p>",
        "id": 126890770,
        "sender_full_name": "Ben Sherman",
        "timestamp": 1526934417
    },
    {
        "content": "<p>so I finally understand the question :-)</p>",
        "id": 126890773,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526934423
    },
    {
        "content": "<p>so it is a bit weird that it will work for a concrete type like the integers but won't work for the constant, or at least it's weird to me</p>",
        "id": 126890852,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526934494
    },
    {
        "content": "<p>Right, and if you change from <code>axiom</code> to <code>parameter</code> or <code>variable</code>, it works again. So I'm thinking it's a bug.</p>",
        "id": 126890872,
        "sender_full_name": "Ben Sherman",
        "timestamp": 1526934527
    },
    {
        "content": "<p>well, with variable you change the type</p>",
        "id": 126890895,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526934551
    },
    {
        "content": "<p>so you have to fiddle with everything</p>",
        "id": 126890900,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526934559
    },
    {
        "content": "<p>I'm having another issue with rec_fn_macro: I've reduced it to this bug this time:</p>\n<div class=\"codehilite\"><pre><span></span>import analysis.real\ndef foo : bool → list ℝ\n| tt := list.nil\n| ff := 1/2 :: foo tt\n</pre></div>\n\n\n<p>I get the error:</p>\n<div class=\"codehilite\"><pre><span></span>equation compiler failed to generate bytecode for &#39;foo._main&#39;\nnested exception message:\ncode generation failed, VM does not have code for &#39;real.division_ring&#39;\n</pre></div>\n\n\n<p>If I try to mark <code>foo</code> as <code>noncomputable</code>, I instead get an error about a failure to prove the recursion well-founded.<br>\nDoes anyone have any idea for how to get around this issue?<br>\nIn my actual code, I'm getting a <code>rec_fn_macro</code> issue that appears nonlocally - it's failing for a definition that calls some other function <code>bar</code> that involves division on ℝ. If I redefine <code>bar</code> as <code>sorry</code>, there is no longer any issue. But it doesn't even help for me to mark <code>bar</code> as <code>irreducible</code>.</p>",
        "id": 147271354,
        "sender_full_name": "Ben Sherman",
        "timestamp": 1541642641
    },
    {
        "content": "<p>I don't see the issue. This is certainly <code>noncomputable</code>, and that's the error you get if you don't mark it so. And it is failing to prove the recursion is well founded because the default well founded instance on bool has tt and ff incomparable, so you can't do any recursion.</p>",
        "id": 147271582,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541642992
    },
    {
        "content": "<p>perhaps you have oversimplified your example?</p>",
        "id": 147271643,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541643054
    },
    {
        "content": "<p>Thanks! I didn't know that details about the well-foundedness. Then I indeed oversimplified my example - originally it was nat. Let me backtrack with a revised example.</p>",
        "id": 147271849,
        "sender_full_name": "Ben Sherman",
        "timestamp": 1541643325
    }
]