[
    {
        "content": "<p>I have this : </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">regex</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span>\n<span class=\"bp\">|</span> <span class=\"n\">emp</span>         <span class=\"o\">:</span> <span class=\"n\">regex</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">chr</span>         <span class=\"o\">:</span> <span class=\"n\">char</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">regex</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">group</span>       <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">regex</span> <span class=\"n\">n</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">regex</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">alt</span>   <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">regex</span> <span class=\"n\">m</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">regex</span> <span class=\"n\">n</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">regex</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">conct</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">regex</span> <span class=\"n\">m</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">regex</span> <span class=\"n\">n</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">regex</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"kn\">open</span> <span class=\"n\">regex</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">n'</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">has_sizeof</span> <span class=\"o\">(</span><span class=\"n\">regex</span> <span class=\"n\">n'</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span>\n  <span class=\"bp\">λ</span><span class=\"n\">reg</span><span class=\"o\">,</span> <span class=\"k\">match</span> <span class=\"n\">reg</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"n\">alt</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">r</span> <span class=\"n\">r'</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n      <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n      <span class=\"kd\">end</span>\n<span class=\"o\">⟩</span>\n</code></pre></div>\n<p>And i have this error : </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">_match</span> <span class=\"o\">(</span><span class=\"n\">alt</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">r</span> <span class=\"n\">r'</span><span class=\"o\">)</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">alt</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">r</span> <span class=\"n\">r'</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">regex</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">regex</span> <span class=\"n\">n'</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span>\n</code></pre></div>\n<p>I understand why, but i don't know how to fix this</p>",
        "id": 269111209,
        "sender_full_name": "Alice Laroche",
        "timestamp": 1643033668
    },
    {
        "content": "<p>You can match on both <code>n'</code> and <code>reg</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">n'</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">has_sizeof</span> <span class=\"o\">(</span><span class=\"n\">regex</span> <span class=\"n\">n'</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">reg</span><span class=\"o\">,</span>\n    <span class=\"k\">match</span> <span class=\"n\">n'</span><span class=\"o\">,</span> <span class=\"n\">reg</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">emp</span>            <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">chr</span> <span class=\"n\">c</span>          <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">group</span> <span class=\"n\">n</span> <span class=\"n\">r</span>      <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">alt</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">r</span> <span class=\"n\">r'</span>   <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">conct</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">r</span> <span class=\"n\">r'</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n    <span class=\"kd\">end</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>This is called <a href=\"https://leanprover.github.io/theorem_proving_in_lean/induction_and_recursion.html#dependent-pattern-matching\">\"dependent pattern matching\"</a></p>",
        "id": 269116697,
        "sender_full_name": "Zhanrong Qiao",
        "timestamp": 1643036158
    },
    {
        "content": "<p>Thanks</p>",
        "id": 269117858,
        "sender_full_name": "Alice Laroche",
        "timestamp": 1643036588
    }
]