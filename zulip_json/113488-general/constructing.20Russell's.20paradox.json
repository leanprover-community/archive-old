[
    {
        "content": "<p>I thought it was impossible to construct Russell's paradox in lean, until I found that this works</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"bp\">∈</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">x</span><span class=\"o\">}</span>  <span class=\"c1\">-- prints \"Prop\"</span>\n</code></pre></div>\n<p>What does it mean? Is it really Russell's paradox or something different?</p>",
        "id": 245622916,
        "sender_full_name": "Liang Zhang",
        "timestamp": 1626031983
    },
    {
        "content": "<p>It means that what you have written is a true-false statement.</p>",
        "id": 245622973,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1626032047
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span> <span class=\"c1\">-- Prop</span>\n<span class=\"k\">#check</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">5</span> <span class=\"c1\">-- Prop</span>\n</code></pre></div>",
        "id": 245622988,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1626032084
    },
    {
        "content": "<p>This is an incomplete expression, too.  Take a look at the type of just the first part:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">x</span><span class=\"o\">}</span>\n\n<span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">?</span><span class=\"n\">M_1</span> <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"bp\">?</span><span class=\"n\">M_1</span>\n</code></pre></div>\n<p>That's a metavariable.</p>",
        "id": 245623050,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1626032169
    },
    {
        "content": "<p>You can make it complete manually, though:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_mem</span> <span class=\"n\">α</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">x</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>This isn't Russell's paradox because <code>has_mem</code> instances can do whatever you want -- they have no axioms.</p>",
        "id": 245623073,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1626032265
    },
    {
        "content": "<p>Here's a version of Russell's paradox.  It says that if you have a <code>has_mem</code> instance that is \"set-like\" in that every set of <code>α</code> can be represented as a term of <code>α</code> (where the <code>has_mem</code> instance is what lets you go the other way), then you reach a contradiction.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">russell</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_mem</span> <span class=\"n\">α</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">from_set</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">from_set_prop</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">z</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">↔</span> <span class=\"n\">z</span> <span class=\"bp\">∈</span> <span class=\"n\">from_set</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">uhoh</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">from_set</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">x</span><span class=\"o\">},</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">uhoh</span> <span class=\"bp\">∈</span> <span class=\"n\">uhoh</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"n\">h'</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">from_set_prop</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h'</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">from_set_prop</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 245623435,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1626032882
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> I don't think it a simple false statement. If the statement is false, then it should be true. That's what Russell's paradox is supposed to mean, right?</p>\n<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> thanks for pointing it out. I'm very new to lean, can you elaborate a little bit on what you mean by \"they have no axioms\"? Thanks.</p>",
        "id": 245623480,
        "sender_full_name": "Liang Zhang",
        "timestamp": 1626032920
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> thanks. I'll take a look.</p>",
        "id": 245623551,
        "sender_full_name": "Liang Zhang",
        "timestamp": 1626033041
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"426285\">@Liang Zhang</span> The notation <code>x ∈ y</code> is defined to be <code>has_mem.mem x y</code>, and this is the definition of <code>has_mem</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">has_mem</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">out_param</span> <span class=\"bp\">$</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">mem</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>It is a typeclass that requires nothing but a definition explaining how to decide whether <code>has_mem.mem x y</code> should hold or not.  From a certain point of view, it's simply a way to turn <code>y</code> into a set (that may or may not have anything to do with the original <code>y</code>!)</p>",
        "id": 245623608,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1626033130
    },
    {
        "content": "<p>For <code>russell</code>, I should point out that it's a notationally complicated way of saying that there's no injection from <code>set α</code> to <code>α</code>.  The type <code>set α</code> is defined to be <code>α -&gt; Prop</code>, and since <code>Prop</code> is a two-term type, in other words it's proving that there's no injection <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mi>α</mi></msup><mo>→</mo><mi>α</mi></mrow><annotation encoding=\"application/x-tex\">2^\\alpha \\to \\alpha</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.664392em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.0037em;\">α</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">α</span></span></span></span>.</p>",
        "id": 245624119,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1626033966
    },
    {
        "content": "<p>Just to emphasize the importance of the notation meaning what you expect, here's a completely contradiction free proof that \"the russell set is a member of itself\":</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">has_mem</span> <span class=\"n\">unit</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">true</span><span class=\"o\">⟩</span>\n<span class=\"kd\">instance</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">has_mem</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">unit</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">unit</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">true</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"bp\">∈</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">unit</span> <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"n\">trivial</span>\n</code></pre></div>",
        "id": 245643854,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626064113
    }
]