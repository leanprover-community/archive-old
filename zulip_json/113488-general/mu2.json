[
    {
        "content": "<p>mu2 is the inductive type with two terms: 1 and -1. It is closed under negation, multiplication, and power. This type casts to int as well as zmodp, and is injective as long as p is an odd prime. It can also be cast to the units of ang ring. This type can be used in defining the sign of a permutation, as well as for proving quadratic reciprocity. Without this type, we would need 1000 auxiliary lemmas in the form of (? = 1 or ? = -1). Are these reasons good enough to define this type?</p>",
        "id": 135532351,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539167607
    },
    {
        "content": "<p>It's already there and called <code>units int</code></p>",
        "id": 135532406,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1539167667
    },
    {
        "content": "<p>Then why didn’t you use it in your QR proof?</p>",
        "id": 135532412,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539167683
    },
    {
        "content": "<p>you used cases 4 times consecutively and produced 16 goals</p>",
        "id": 135532416,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539167699
    },
    {
        "content": "<p>I should have used it to define legendre sym?</p>",
        "id": 135532426,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1539167717
    },
    {
        "content": "<p>legendre symbol can be 0, so don’t replace it with another definition. Instead, define another partial legendre symbol and prove that they are equal</p>",
        "id": 135532495,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539167798
    },
    {
        "content": "<p>do you have a better idea?</p>",
        "id": 135532525,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539167853
    },
    {
        "content": "<p>I don't see what problem this solves.</p>",
        "id": 135532675,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1539168018
    },
    {
        "content": "<p>The legende_symbol takes values in <code>with_zero (units int)</code></p>",
        "id": 135532775,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539168173
    },
    {
        "content": "<blockquote>\n<p>I don't see what problem this solves.</p>\n</blockquote>\n<p>That said, I didn't give this issue that much thought, and it may well be better to change it. It will probably be changed if anyone wants to generalize stuff, and do the Jacobi symbol.</p>",
        "id": 135535670,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1539172017
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> <code>def μ₂ := bool</code>. Does that work?</p>",
        "id": 135535952,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539172377
    },
    {
        "content": "<p>Why would you define it again when there's already <code>units int</code>?</p>",
        "id": 135536034,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1539172536
    },
    {
        "content": "<p>Because inductive types are pretty to work with?</p>",
        "id": 135536510,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539173205
    },
    {
        "content": "<p>You can always define a <code>units_int.rec_on</code>, that looks exactly like what <code>mu2.rec_on</code> would look like. <code>mu2.rec_on</code> wouldn't even be that nice, because it would split it into the cases <code>mu2.one</code> and <code>mu2.neg_one</code>, not <code>has_one.one</code> and <code>has_neg.neg has_one.one</code></p>",
        "id": 135537768,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1539174789
    },
    {
        "content": "<p>These are interesting questions. They are pure implementation issues so as a mathematician with 30 years of experience I find that I have nothing to say. I guess one thing I don't understand is why it even matters. You make a random implementation decision and then you prove all the lemmas you need for your interface, and then who cares how the type is defined. Right? [I'm assuming not]</p>",
        "id": 135566155,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539203242
    },
    {
        "content": "<p>I don't suggest using <code>with_zero (units int)</code>, it doesn't interact with other numeric types well enough, I think</p>",
        "id": 135566331,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539203461
    },
    {
        "content": "<p>I would just use <code>int</code> and prove that it has absolute value &lt;= 1, or it is a unit if not zero, or something like that</p>",
        "id": 135566352,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539203502
    },
    {
        "content": "<p>Just use <code>X [has_one X] [has_mul X] [has_neg X]</code></p>",
        "id": 135566791,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539204076
    }
]