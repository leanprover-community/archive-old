[
    {
        "content": "<p>I ran into something I don't understand trying to write a tactic that does something roughly similar to <code>simp * at *</code>. Below is my mwe. Why do I get the error <code>term  new_to_simplify_with has type  list name but is expected to have type tactic_state</code>? Furthermore, why do I get no errors at all when I don't give arguments to <code>mutually_simplify_aux</code> in the last line? What arguments is it being called with when I do this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.mv_polynomial.basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">interactive</span>\n<span class=\"kn\">open</span> <span class=\"n\">interactive</span> <span class=\"n\">interactive.types</span> <span class=\"n\">expr</span>\n\n<span class=\"n\">setup_tactic_parser</span>\n\n<span class=\"sd\">/-- For a name nmat in the local context, simplify at it with nmwith,</span>\n<span class=\"sd\">and if that is successful, simplify again at nmat with integral_domain_simp.</span>\n<span class=\"sd\">Never fails, but returns tt if the simplification changed something -/</span>\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">simplify_at_with</span> <span class=\"o\">(</span><span class=\"n\">nmat</span> <span class=\"n\">nmwith</span> <span class=\"o\">:</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">bool</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">nmat</span> <span class=\"bp\">=</span> <span class=\"n\">nmwith</span> <span class=\"k\">then</span> <span class=\"k\">do</span> <span class=\"n\">return</span> <span class=\"n\">ff</span> <span class=\"k\">else</span> <span class=\"k\">do</span>\n  <span class=\"n\">nmwith_expr</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">get_local</span> <span class=\"n\">nmwith</span><span class=\"o\">,</span>\n  <span class=\"n\">used_set</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">simp_core</span> <span class=\"o\">{</span><span class=\"n\">fail_if_unchanged</span> <span class=\"o\">:=</span> <span class=\"n\">ff</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">failed</span><span class=\"o\">)</span> <span class=\"n\">tt</span> <span class=\"o\">[</span><span class=\"n\">simp_arg_type.expr</span> <span class=\"o\">(</span><span class=\"n\">pexpr.of_expr</span> <span class=\"n\">nmwith_expr</span><span class=\"o\">)]</span> <span class=\"o\">[]</span> <span class=\"o\">(</span><span class=\"n\">loc.ns</span> <span class=\"o\">[</span><span class=\"n\">some</span> <span class=\"n\">nmat</span><span class=\"o\">]),</span>\n  <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">bnot</span> <span class=\"o\">(</span><span class=\"n\">name_set.empty</span> <span class=\"n\">used_set</span><span class=\"o\">))</span>\n\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">mutually_simplify_aux</span> <span class=\"o\">(</span><span class=\"n\">to_simplify_with</span> <span class=\"n\">other</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"k\">match</span> <span class=\"n\">to_simplify_with</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"n\">skip</span>\n<span class=\"bp\">|</span> <span class=\"n\">nm_with</span><span class=\"o\">::</span><span class=\"n\">to_simplify_withs</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"c1\">-- simplify the ones we will simplify with in the future</span>\n  <span class=\"n\">to_simplify_withs.mmap'</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">simplify_at_with</span> <span class=\"n\">a</span> <span class=\"n\">nm_with</span><span class=\"o\">),</span>\n  <span class=\"c1\">-- Simplify the others, and if they change, remove them from other and add to future</span>\n  <span class=\"n\">other_success_labels</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">other.mmap</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">simplify_at_with</span> <span class=\"n\">a</span> <span class=\"n\">nm_with</span><span class=\"o\">),</span>\n  <span class=\"k\">let</span> <span class=\"n\">others_changed</span> <span class=\"o\">:=</span> <span class=\"n\">list.reduce_option</span> <span class=\"o\">(</span><span class=\"n\">list.zip_with</span>\n                            <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">nm</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"k\">match</span> <span class=\"n\">b</span> <span class=\"k\">with</span>\n                              <span class=\"bp\">|</span> <span class=\"n\">tt</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">nm</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"n\">name</span><span class=\"o\">)</span>\n                              <span class=\"bp\">|</span> <span class=\"n\">ff</span> <span class=\"o\">:=</span> <span class=\"n\">none</span> <span class=\"kd\">end</span><span class=\"o\">)</span>\n                            <span class=\"n\">other</span> <span class=\"n\">other_success_labels</span><span class=\"o\">),</span>\n  <span class=\"k\">let</span> <span class=\"n\">others_unchanged</span> <span class=\"o\">:=</span> <span class=\"n\">list.reduce_option</span> <span class=\"o\">(</span><span class=\"n\">list.zip_with</span>\n                            <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">nm</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"k\">match</span> <span class=\"n\">b</span> <span class=\"k\">with</span>\n                              <span class=\"bp\">|</span> <span class=\"n\">tt</span> <span class=\"o\">:=</span> <span class=\"n\">none</span>\n                              <span class=\"bp\">|</span> <span class=\"n\">ff</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">nm</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"n\">name</span><span class=\"o\">)</span>  <span class=\"kd\">end</span><span class=\"o\">)</span>\n                            <span class=\"n\">other</span> <span class=\"n\">other_success_labels</span><span class=\"o\">),</span>\n  <span class=\"k\">let</span> <span class=\"n\">new_to_simplify_with</span> <span class=\"o\">:=</span> <span class=\"n\">list.append</span> <span class=\"n\">to_simplify_withs</span> <span class=\"n\">others_changed</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- mutually_simplify_aux -- This throws no errors</span>\n  <span class=\"n\">mutually_simplify_aux</span> <span class=\"n\">new_to_simplify_with</span> <span class=\"n\">others_unchanged</span> <span class=\"c1\">-- ... expected to have type tactic_state</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">interactive</span>\n\n\n<span class=\"kd\">end</span> <span class=\"n\">test</span>\n</code></pre></div>",
        "id": 260201218,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1635975509
    },
    {
        "content": "<p>I think it will work fine if you use the pattern matching syntax without <code>match</code></p>",
        "id": 260201671,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635975761
    },
    {
        "content": "<p>When you recurse in lean, the equation compiler only lets you insert the arguments that appear after the colon</p>",
        "id": 260201721,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635975789
    },
    {
        "content": "<p>Not sure how the normal pattern matching syntax is supposed to work. I try this and I'm told the equation compiler failed</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.mv_polynomial.basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">interactive</span>\n<span class=\"kn\">open</span> <span class=\"n\">interactive</span> <span class=\"n\">interactive.types</span> <span class=\"n\">expr</span>\n\n<span class=\"n\">setup_tactic_parser</span>\n\n<span class=\"sd\">/-- For a name nmat in the local context, simplify at it with nmwith,</span>\n<span class=\"sd\">and if that is successful, simplify again at nmat with integral_domain_simp.</span>\n<span class=\"sd\">Never fails, but returns tt if the simplification changed something -/</span>\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">simplify_at_with</span> <span class=\"o\">(</span><span class=\"n\">nmat</span> <span class=\"n\">nmwith</span> <span class=\"o\">:</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">bool</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">nmat</span> <span class=\"bp\">=</span> <span class=\"n\">nmwith</span> <span class=\"k\">then</span> <span class=\"k\">do</span> <span class=\"n\">return</span> <span class=\"n\">ff</span> <span class=\"k\">else</span> <span class=\"k\">do</span>\n  <span class=\"n\">nmwith_expr</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">get_local</span> <span class=\"n\">nmwith</span><span class=\"o\">,</span>\n  <span class=\"n\">used_set</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">simp_core</span> <span class=\"o\">{</span><span class=\"n\">fail_if_unchanged</span> <span class=\"o\">:=</span> <span class=\"n\">ff</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">failed</span><span class=\"o\">)</span> <span class=\"n\">tt</span> <span class=\"o\">[</span><span class=\"n\">simp_arg_type.expr</span> <span class=\"o\">(</span><span class=\"n\">pexpr.of_expr</span> <span class=\"n\">nmwith_expr</span><span class=\"o\">)]</span> <span class=\"o\">[]</span> <span class=\"o\">(</span><span class=\"n\">loc.ns</span> <span class=\"o\">[</span><span class=\"n\">some</span> <span class=\"n\">nmat</span><span class=\"o\">]),</span>\n  <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">bnot</span> <span class=\"o\">(</span><span class=\"n\">name_set.empty</span> <span class=\"n\">used_set</span><span class=\"o\">))</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"n\">nat</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"n\">a</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">::</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">b</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">::</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span>\n\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">mutually_simplify_aux</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">name</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">list</span> <span class=\"n\">name</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">skip</span>\n<span class=\"bp\">|</span> <span class=\"n\">nm_with</span><span class=\"o\">::</span><span class=\"n\">to_simplify_withs</span> <span class=\"n\">other</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"c1\">-- simplify the ones we will simplify with in the future</span>\n  <span class=\"n\">to_simplify_withs.mmap'</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">simplify_at_with</span> <span class=\"n\">a</span> <span class=\"n\">nm_with</span><span class=\"o\">),</span>\n  <span class=\"c1\">-- Simplify the others, and if they change, remove them from other and add to future</span>\n  <span class=\"n\">other_success_labels</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">other.mmap</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">simplify_at_with</span> <span class=\"n\">a</span> <span class=\"n\">nm_with</span><span class=\"o\">),</span>\n  <span class=\"k\">let</span> <span class=\"n\">others_changed</span> <span class=\"o\">:=</span> <span class=\"n\">list.reduce_option</span> <span class=\"o\">(</span><span class=\"n\">list.zip_with</span>\n                            <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">nm</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"k\">match</span> <span class=\"n\">b</span> <span class=\"k\">with</span>\n                              <span class=\"bp\">|</span> <span class=\"n\">tt</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">nm</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"n\">name</span><span class=\"o\">)</span>\n                              <span class=\"bp\">|</span> <span class=\"n\">ff</span> <span class=\"o\">:=</span> <span class=\"n\">none</span> <span class=\"kd\">end</span><span class=\"o\">)</span>\n                            <span class=\"n\">other</span> <span class=\"n\">other_success_labels</span><span class=\"o\">),</span>\n  <span class=\"k\">let</span> <span class=\"n\">others_unchanged</span> <span class=\"o\">:=</span> <span class=\"n\">list.reduce_option</span> <span class=\"o\">(</span><span class=\"n\">list.zip_with</span>\n                            <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">nm</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"k\">match</span> <span class=\"n\">b</span> <span class=\"k\">with</span>\n                              <span class=\"bp\">|</span> <span class=\"n\">tt</span> <span class=\"o\">:=</span> <span class=\"n\">none</span>\n                              <span class=\"bp\">|</span> <span class=\"n\">ff</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">nm</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"n\">name</span><span class=\"o\">)</span>  <span class=\"kd\">end</span><span class=\"o\">)</span>\n                            <span class=\"n\">other</span> <span class=\"n\">other_success_labels</span><span class=\"o\">),</span>\n  <span class=\"k\">let</span> <span class=\"n\">new_to_simplify_with</span> <span class=\"o\">:=</span> <span class=\"n\">list.append</span> <span class=\"n\">to_simplify_withs</span> <span class=\"n\">others_changed</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- mutually_simplify_aux -- This throws no errors</span>\n  <span class=\"n\">mutually_simplify_aux</span> <span class=\"n\">new_to_simplify_with</span> <span class=\"n\">others_unchanged</span> <span class=\"c1\">-- ... expected to have type tactic_state</span>\n\n\n<span class=\"kd\">end</span> <span class=\"n\">interactive</span>\n\n\n<span class=\"kd\">end</span> <span class=\"n\">test</span>\n</code></pre></div>",
        "id": 260202759,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1635976388
    },
    {
        "content": "<p>I guess I was just missing parentheses</p>",
        "id": 260202952,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1635976487
    },
    {
        "content": "<p>So it's all working now?</p>",
        "id": 260205654,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635978187
    },
    {
        "content": "<p>Yep, got it working, thanks for your help!</p>",
        "id": 260213085,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1635983388
    }
]