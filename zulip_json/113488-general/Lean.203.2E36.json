[
    {
        "content": "<p>Hi,<br>\nThe <a href=\"https://github.com/leanprover-community/mathlib/tree/YK-pointwise\">branch#YK-pointwise</a> builds with lean&lt;3.36 and fails to build with lean 3.36 (<code>git bisect</code> points to 60e279ba2b as the \"bad\" commit). What were the backwards-incompatible changes in lean-3.36?</p>",
        "id": 268348944,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1642487938
    },
    {
        "content": "<p>With 3.36 it fails at <a href=\"https://github.com/leanprover-community/mathlib/blob/YK-pointwise/src/algebra/group/fun_like.lean#L166\">this line</a></p>",
        "id": 268348979,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1642487997
    },
    {
        "content": "<p>It wouldn't surprise me if it was my <a href=\"https://github.com/leanprover-community/lean/commit/b89028dc10e95eda849dcfa0d02ca8c23ca64d5d\">commit allowing the elaborator to proceed a bit further in the presence of <code>out_param</code></a>.</p>",
        "id": 268369941,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1642501143
    },
    {
        "content": "<p>Do you have a version of your branch updated to the new 3.36 syntax?</p>",
        "id": 268370112,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1642501222
    },
    {
        "content": "<p>Alright, doing it myself wasn't too bad: <a href=\"https://github.com/leanprover-community/mathlib/tree/YK-pointwise-3.36-bump\">branch#YK-pointwise-3.36-bump</a></p>",
        "id": 268371014,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1642501775
    },
    {
        "content": "<p>The error with <code>trace.type_context.is_def_eq_detail</code> and <code>trace.class_instances</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"kd\">class</span> <span class=\"kd\">instance</span> <span class=\"n\">for</span>\n<span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">,</span>\n<span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"n\">out_param</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">u_2</span><span class=\"o\">),</span>\n<span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">out_param</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u_3</span><span class=\"o\">),</span>\n<span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"n\">comm_monoid</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">),</span>\n<span class=\"n\">_inst_2</span> <span class=\"o\">:</span> <span class=\"n\">fun_like</span> <span class=\"n\">F</span> <span class=\"n\">ι</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_3</span> <span class=\"o\">:</span>\n  <span class=\"bp\">@</span><span class=\"n\">has_pointwise_one</span> <span class=\"n\">F</span> <span class=\"n\">ι</span> <span class=\"n\">α</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span>\n       <span class=\"bp\">@</span><span class=\"n\">mul_one_class.to_has_one</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">monoid.to_mul_one_class</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_monoid.to_monoid</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_inst_1</span> <span class=\"n\">i</span><span class=\"o\">))))</span>\n    <span class=\"n\">_inst_2</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_4</span> <span class=\"o\">:</span>\n  <span class=\"bp\">@</span><span class=\"n\">has_pointwise_mul</span> <span class=\"n\">F</span> <span class=\"n\">ι</span> <span class=\"n\">α</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span>\n       <span class=\"bp\">@</span><span class=\"n\">mul_one_class.to_has_mul</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">monoid.to_mul_one_class</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_monoid.to_monoid</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_inst_1</span> <span class=\"n\">i</span><span class=\"o\">))))</span>\n    <span class=\"n\">_inst_2</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_5</span> <span class=\"o\">:</span>\n  <span class=\"bp\">@</span><span class=\"n\">has_pointwise_pow</span> <span class=\"n\">F</span> <span class=\"n\">ι</span> <span class=\"n\">α</span> <span class=\"n\">ℕ</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"bp\">@</span><span class=\"n\">monoid.has_pow</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_monoid.to_monoid</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_inst_1</span> <span class=\"n\">i</span><span class=\"o\">)))</span>\n    <span class=\"n\">_inst_2</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">@</span><span class=\"n\">has_pointwise_mul</span> <span class=\"n\">F</span> <span class=\"n\">ι</span> <span class=\"n\">α</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"bp\">@</span><span class=\"n\">semigroup.to_has_mul</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_semigroup.to_semigroup</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"n\">i</span><span class=\"o\">)))</span>\n    <span class=\"n\">_inst_2</span>\n<span class=\"bp\">▶</span> <span class=\"mi\">173</span><span class=\"o\">:</span><span class=\"mi\">6</span><span class=\"bp\">-</span><span class=\"mi\">173</span><span class=\"o\">:</span><span class=\"mi\">7</span><span class=\"o\">:</span> <span class=\"n\">information</span><span class=\"o\">:</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span>  <span class=\"kd\">class</span><span class=\"bp\">-</span><span class=\"kd\">instance</span> <span class=\"n\">resolution</span> <span class=\"n\">trace</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_4</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">has_pointwise_mul</span> <span class=\"n\">F</span> <span class=\"bp\">?</span><span class=\"n\">x_0</span> <span class=\"bp\">?</span><span class=\"n\">x_1</span> <span class=\"bp\">?</span><span class=\"n\">x_2</span> <span class=\"bp\">?</span><span class=\"n\">x_3</span> <span class=\"o\">:=</span> <span class=\"n\">_inst_4</span>\n<span class=\"o\">[</span><span class=\"n\">type_context.is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]:</span> <span class=\"bp\">@</span><span class=\"n\">has_pointwise_mul</span> <span class=\"n\">F</span> <span class=\"bp\">?</span><span class=\"n\">x_0</span> <span class=\"bp\">?</span><span class=\"n\">x_1</span> <span class=\"bp\">?</span><span class=\"n\">x_2</span> <span class=\"bp\">?</span><span class=\"n\">x_3</span> <span class=\"bp\">=?=</span> <span class=\"bp\">@</span><span class=\"n\">has_pointwise_mul</span> <span class=\"n\">F</span> <span class=\"bp\">?</span><span class=\"n\">m__fresh.290.38668</span> <span class=\"bp\">?</span><span class=\"n\">m__fresh.290.38669</span> <span class=\"bp\">?</span><span class=\"n\">m__fresh.290.38670</span> <span class=\"n\">_inst_2</span>\n<span class=\"o\">[</span><span class=\"bp\">...</span><span class=\"o\">]</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"n\">caching</span> <span class=\"kd\">instance</span> <span class=\"n\">for</span> <span class=\"bp\">@</span><span class=\"n\">has_pointwise_mul</span> <span class=\"n\">F</span> <span class=\"n\">ι</span> <span class=\"n\">α</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span>\n     <span class=\"bp\">@</span><span class=\"n\">mul_one_class.to_has_mul</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">monoid.to_mul_one_class</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_monoid.to_monoid</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_inst_1</span> <span class=\"n\">i</span><span class=\"o\">))))</span>\n  <span class=\"n\">_inst_2</span>\n<span class=\"n\">_inst_4</span>\n<span class=\"o\">[</span><span class=\"n\">type_context.is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]:</span> <span class=\"bp\">@</span><span class=\"n\">semigroup.to_has_mul</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_semigroup.to_semigroup</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"bp\">=?=</span> <span class=\"bp\">@</span><span class=\"n\">mul_one_class.to_has_mul</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">monoid.to_mul_one_class</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_monoid.to_monoid</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_inst_1</span> <span class=\"n\">i</span><span class=\"o\">)))</span>\n<span class=\"o\">[</span><span class=\"n\">type_context.is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">]:</span> <span class=\"bp\">@</span><span class=\"n\">has_mul.mk</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">semigroup.mul</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_semigroup.to_semigroup</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"n\">i</span><span class=\"o\">)))</span> <span class=\"bp\">=?=</span> <span class=\"bp\">@</span><span class=\"n\">has_mul.mk</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">mul_one_class.mul</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">monoid.to_mul_one_class</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_monoid.to_monoid</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_inst_1</span> <span class=\"n\">i</span><span class=\"o\">))))</span>\n<span class=\"o\">[</span><span class=\"n\">type_context.is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"o\">]:</span> <span class=\"bp\">@</span><span class=\"n\">semigroup.mul</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_semigroup.to_semigroup</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"bp\">=?=</span> <span class=\"bp\">@</span><span class=\"n\">mul_one_class.mul</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">monoid.to_mul_one_class</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_monoid.to_monoid</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_inst_1</span> <span class=\"n\">i</span><span class=\"o\">)))</span>\n<span class=\"o\">[</span><span class=\"n\">type_context.is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">4</span><span class=\"o\">]:</span> <span class=\"bp\">@</span><span class=\"n\">comm_semigroup.mul</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=?=</span> <span class=\"bp\">@</span><span class=\"n\">monoid.mul</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_monoid.to_monoid</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_inst_1</span> <span class=\"n\">i</span><span class=\"o\">))</span>\n<span class=\"o\">[</span><span class=\"n\">type_context.is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">5</span><span class=\"o\">]:</span> <span class=\"bp\">@</span><span class=\"n\">comm_semigroup.mul</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=?=</span> <span class=\"bp\">@</span><span class=\"n\">comm_monoid.mul</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_inst_1</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"n\">type_context.is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">6</span><span class=\"o\">]:</span> <span class=\"n\">comm_semigroup.mul</span> <span class=\"bp\">=?=</span> <span class=\"n\">comm_monoid.mul</span>\n<span class=\"o\">[</span><span class=\"n\">type_context.is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"n\">on</span> <span class=\"n\">failure</span><span class=\"o\">:</span> <span class=\"n\">comm_semigroup.mul</span> <span class=\"bp\">=?=</span> <span class=\"n\">comm_monoid.mul</span>\n<span class=\"o\">[</span><span class=\"n\">type_context.is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"n\">on</span> <span class=\"n\">failure</span><span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">comm_semigroup.mul</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=?=</span> <span class=\"bp\">@</span><span class=\"n\">comm_monoid.mul</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_inst_1</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"n\">type_context.is_def_eq_detail</span><span class=\"o\">]</span> <span class=\"n\">on</span> <span class=\"n\">failure</span><span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">has_mul.mk</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">semigroup.mul</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_semigroup.to_semigroup</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"n\">i</span><span class=\"o\">)))</span> <span class=\"bp\">=?=</span> <span class=\"bp\">@</span><span class=\"n\">has_mul.mk</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">mul_one_class.mul</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">monoid.to_mul_one_class</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_monoid.to_monoid</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_inst_1</span> <span class=\"n\">i</span><span class=\"o\">))))</span>\n</code></pre></div>",
        "id": 268371276,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1642501946
    },
    {
        "content": "<p>So what's going on is that the <code>comm_semigroup</code> instance found on the right hand side isn't being used to solve the metavariable <code>?m_1</code> on the left, when checking that the <code>has_pointwise_mul F</code> instance is compatible with the context of its application.</p>",
        "id": 268371619,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1642502152
    },
    {
        "content": "<p>Self-contained example of the unification failure:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">comm_monoid</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">fun_like</span> <span class=\"n\">F</span> <span class=\"n\">ι</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_pointwise_one</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">has_pointwise_mul</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">has_pointwise_pow</span> <span class=\"n\">F</span> <span class=\"n\">ℕ</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"c1\">-- Create a new metavariable for the instance instead of inferring it</span>\n  <span class=\"k\">let</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">comm_semigroup</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"c\">/-</span><span class=\"cm\"> works with: λ i, (@@comm_monoid.to_comm_semigroup _ (id _)), -/</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">has_pointwise_mul</span> <span class=\"n\">F</span> <span class=\"n\">ι</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">semigroup.to_has_mul</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_semigroup.to_semigroup</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">i</span><span class=\"o\">)))</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"c1\">-- type error</span>\n  <span class=\"n\">trivial</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 268373274,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1642503011
    },
    {
        "content": "<p>If I understand the unification process correctly, what should happen is that the <code>?m_1</code> metavariable is inferred, and then we can project out all the structures and show equality. Instead it remains a metavariable, the projection can't be unfolded past <code>comm_semigroup.mul _ _</code> which is not defeq to <code>comm_monoid.mul _ _</code> and we give up.</p>",
        "id": 268374774,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1642503869
    },
    {
        "content": "<p>Is it easy to fix?</p>",
        "id": 269978899,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1643603518
    },
    {
        "content": "<p>I have no big-picture overview of the unifier, so fixing Lean is pretty hard. Working around the missing instance error is not too hard, if we manipulate the elaboration order a bit:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[to_additive]</span>\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">comm_monoid</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">fun_like</span> <span class=\"n\">F</span> <span class=\"n\">ι</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_pointwise_one</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_pointwise_mul</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">has_pointwise_pow</span> <span class=\"n\">F</span> <span class=\"n\">ℕ</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">comm_monoid</span> <span class=\"n\">F</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"bp\">..</span> <span class=\"n\">fun_like.monoid</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"bp\">..</span> <span class=\"bp\">@@</span><span class=\"n\">fun_like.comm_semigroup</span> <span class=\"n\">F</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">apply_instance</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>or here we can also use <code>assumption</code> instead of <code>apply_instance</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[to_additive]</span>\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">comm_monoid</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">fun_like</span> <span class=\"n\">F</span> <span class=\"n\">ι</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_pointwise_one</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_pointwise_mul</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">has_pointwise_pow</span> <span class=\"n\">F</span> <span class=\"n\">ℕ</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">comm_monoid</span> <span class=\"n\">F</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"bp\">..</span> <span class=\"n\">fun_like.monoid</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"bp\">..</span> <span class=\"bp\">@@</span><span class=\"n\">fun_like.comm_semigroup</span> <span class=\"n\">F</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">‹</span><span class=\"n\">_</span><span class=\"o\">›</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 270019180,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1643629983
    },
    {
        "content": "<p>For example, <a href=\"https://github.com/leanprover-community/mathlib/commit/0a8652754854bb42b93e7c951cd748fb6a3a4330\">commit <code>0a86527548</code></a></p>",
        "id": 270019554,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1643630209
    }
]