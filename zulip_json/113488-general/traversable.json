[
    {
        "content": "<p>is free_group traversable?</p>",
        "id": 158765682,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550449360
    },
    {
        "content": "<p>I didn't read all that thread. Did you end up with a quotient on an inductive type for <code>free_group</code>?</p>",
        "id": 158766442,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1550450796
    },
    {
        "content": "<p>sure</p>",
        "id": 158766505,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550450974
    },
    {
        "content": "<p>What is the equivalence relation and the inductive type?</p>",
        "id": 158767025,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1550451896
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/group_theory/free_group.lean\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/src/group_theory/free_group.lean\">https://github.com/leanprover-community/mathlib/blob/master/src/group_theory/free_group.lean</a></p>",
        "id": 158767219,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550452246
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"c\">/-</span><span class=\"cm\">- Reduction step: `w * x * x⁻¹ * v ~&gt; w * v` -/</span>\n<span class=\"kn\">inductive</span> <span class=\"n\">red</span><span class=\"bp\">.</span><span class=\"n\">step</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">bnot</span> <span class=\"o\">{</span><span class=\"n\">L₁</span> <span class=\"n\">L₂</span> <span class=\"n\">x</span> <span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">red</span><span class=\"bp\">.</span><span class=\"n\">step</span> <span class=\"o\">(</span><span class=\"n\">L₁</span> <span class=\"bp\">++</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">::</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">bnot</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">::</span> <span class=\"n\">L₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">L₁</span> <span class=\"bp\">++</span> <span class=\"n\">L₂</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 158767221,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550452261
    },
    {
        "content": "<p>That looks traversable</p>",
        "id": 158767862,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1550453506
    },
    {
        "content": "<p>Oh, wait, no, that's more complex than I thought. I'm not sure</p>",
        "id": 158767906,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1550453562
    },
    {
        "content": "<p>Probably not. One thinig you can do with <code>traversable T</code> is write a function <code>T a -&gt; list a</code> which lists \"all the <code>a</code>s in a <code>T a</code> in order\". I think this function is also supposed to be natural in <code>a</code>.<br>\nNow \"all the <code>a</code>s in a <code>T a</code>\" may not really have a meaning a priori, but still it seems unlikely that you could write a sensible instance for something like the free group or free commutative monoid or any structure where the relations involve duplicating, dropping, or reordering variables.</p>",
        "id": 158883458,
        "sender_full_name": "Reid Barton",
        "timestamp": 1550585186
    },
    {
        "content": "<p>Maybe you could define a <code>traversable_up_to_order</code> class which only quantifies over commutative monads, and then it could have instances which are types formed by a quotient which reorders <code>a</code>s, etc. This stuff grew out of Haskell, which doesn't have quotient types, so variants like this haven't been explored as far as I know.</p>",
        "id": 158883597,
        "sender_full_name": "Reid Barton",
        "timestamp": 1550585305
    },
    {
        "content": "<p>For a group you probably need idempotency too ... and probably more now that I think of it. Some sort of cancellation</p>",
        "id": 158883904,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1550585543
    },
    {
        "content": "<p>Thanks for the name <code>traversable_up_to_order</code>. I've been thinking about adding this class</p>",
        "id": 158883939,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1550585567
    },
    {
        "content": "<p>Yes, for <code>free_group</code>, you would need a monad where you can undo effects, and that doesn't sound like the kind of thing there would be many examples of.</p>",
        "id": 158884134,
        "sender_full_name": "Reid Barton",
        "timestamp": 1550585725
    },
    {
        "content": "<p>Actually, that might be an opportunity for a sort of undo / redo design pattern</p>",
        "id": 158898091,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1550596070
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> I think you just need a commutative applicative, where <code>f &lt;$&gt; fa &lt;*&gt; fb = flip f &lt;$&gt; fb &lt;*&gt; fa</code> ... <code>option</code> is a good example of an applicative functor that supports that, plus the writer monad (over a commutative monoid) ... similarly, applicative validation[1] over a commutative monoid will be a commutative applicative – of course, it would be slightly ironic to traverse a free commutative monoid into another free commutative monoid, but it would work <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span> </p>\n<p>[1] <a href=\"https://pursuit.purescript.org/packages/purescript-validation/4.2.0/docs/Data.Validation.Semigroup\" target=\"_blank\" title=\"https://pursuit.purescript.org/packages/purescript-validation/4.2.0/docs/Data.Validation.Semigroup\">https://pursuit.purescript.org/packages/purescript-validation/4.2.0/docs/Data.Validation.Semigroup</a></p>",
        "id": 158947254,
        "sender_full_name": "Nicholas Scheel",
        "timestamp": 1550639896
    }
]