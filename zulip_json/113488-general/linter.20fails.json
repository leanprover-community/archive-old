[
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/9413/checks?check_run_id=3720279766\">This linting</a> is funny. One of the tactics failed to typecheck!</p>",
        "id": 255074882,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1632758976
    },
    {
        "content": "<p>Maybe you hit a hash collision in the cache?</p>",
        "id": 255075961,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1632759363
    },
    {
        "content": "<p>Oh, how do you know that?</p>",
        "id": 255076428,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1632759558
    },
    {
        "content": "<p>I'm worried that Lean is confused by the new notation introduced in this PR.</p>",
        "id": 255085024,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1632762892
    },
    {
        "content": "<p>That was my first guess as well. Could you try putting the notation in a locale?</p>",
        "id": 255086047,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1632763308
    },
    {
        "content": "<p>Yeah, the problem is that the following notation make other notations that start with <code>[</code> unusable.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">notation</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"bp\">`</span> <span class=\"n\">a</span> <span class=\"bp\">`</span> <span class=\"bp\">≤</span> <span class=\"bp\">`</span> <span class=\"n\">b</span> <span class=\"bp\">`</span> <span class=\"bp\">≤</span> <span class=\"bp\">`</span> <span class=\"n\">c</span> <span class=\"bp\">`</span><span class=\"o\">]</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">btw</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span>\n<span class=\"kd\">notation</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"bp\">`</span> <span class=\"n\">a</span> <span class=\"bp\">`</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">`</span> <span class=\"n\">b</span> <span class=\"bp\">`</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">`</span> <span class=\"n\">c</span> <span class=\"bp\">`</span><span class=\"o\">]</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">sbtw</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span>\n</code></pre></div>\n<p>I <em>think</em> that the story is as follows: after seeing <code>[</code> Lean has to decide what this notation is going to mean. It can overload notation, but only if the parser is the same for the different overloads (which is not the case for <code>btw</code>, <code>sbtw</code>, and <code>list.nil</code>). If the future parsing is different, then it has to make a choice, and in this case it just chooses the last declared notation (the one for <code>sbtw</code>).</p>",
        "id": 255086295,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1632763418
    },
    {
        "content": "<p>Hmm, that's very sad. I'll just nuke it for now then.</p>",
        "id": 255086700,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1632763567
    },
    {
        "content": "<p>Good news is that this will be possible in Lean 4</p>",
        "id": 255088863,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1632764426
    },
    {
        "content": "<p>Lean 4 save my notation <span aria-label=\"pray\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"pray\">:pray:</span></p>",
        "id": 255089643,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1632764746
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/runs/6266696983?check_suite_focus=true\">https://github.com/leanprover-community/mathlib/runs/6266696983?check_suite_focus=true</a></p>",
        "id": 280954501,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1651539929
    },
    {
        "content": "<p>This has failed like four times in a row and I don't know why</p>",
        "id": 280954512,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1651539953
    },
    {
        "content": "<p>Hmm, seems like it might be related to this elan issue: <a href=\"https://github.com/leanprover/elan/issues/73\">https://github.com/leanprover/elan/issues/73</a></p>\n<p>cc: <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span></p>",
        "id": 280954810,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1651540267
    },
    {
        "content": "<p>It looks like the error just started happening and I don't see any recent changes to elan so I'm a bit mystified.</p>",
        "id": 280954888,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1651540354
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/elan/releases/download//elan-x86_64-unknown-linux-gnu.tar.gz\">https://github.com/leanprover/elan/releases/download//elan-x86_64-unknown-linux-gnu.tar.gz</a> indeed can't be found on my browser</p>",
        "id": 280955139,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1651540655
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/113488-general/topic/linter.20fails/near/280955139\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/leanprover/elan/releases/download//elan-x86_64-unknown-linux-gnu.tar.gz\">https://github.com/leanprover/elan/releases/download//elan-x86_64-unknown-linux-gnu.tar.gz</a> indeed can't be found on my browser</p>\n</blockquote>\n<p>I think I found a fix, see <a href=\"https://github.com/leanprover/elan/pull/74\">https://github.com/leanprover/elan/pull/74</a></p>",
        "id": 280961143,
        "sender_full_name": "Chris Lovett",
        "timestamp": 1651547434
    }
]