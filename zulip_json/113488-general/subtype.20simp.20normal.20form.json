[
    {
        "content": "<p>Is there a reason that when <code>x</code> is an element of a subtype, neither <code>x.1</code> nor <code>↑x</code> is in simp-normal-form?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">subtype</span> <span class=\"n\">P</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">}</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>",
        "id": 202048609,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1593141265
    },
    {
        "content": "<p>Clearly, we need to fix things here. The <code>.ext</code> lemma etc are not following standard conventions either.</p>",
        "id": 202048684,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593141408
    },
    {
        "content": "<p>Which one would we want to be simp-normal form? The coe?</p>",
        "id": 202048754,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1593141513
    },
    {
        "content": "<p>This has bitten me before too. There is no subtype.ext_iff, and the ext tactic does not work for subtypes</p>",
        "id": 202055413,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593151154
    },
    {
        "content": "<p>I think having the coe as simp normal form would be more consistent with our other choices.</p>",
        "id": 202060560,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593157243
    },
    {
        "content": "<p>Yes, at one point I tried adding the ext lemma for <code>subtype</code> to <code>@[ext]</code>, and it broke some things which were all avoided by phrasing it in terms of the coercion.</p>",
        "id": 202082572,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593174095
    },
    {
        "content": "<p>(I'm still not sure whether it is actually a good idea to add it though.)</p>",
        "id": 202082585,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593174106
    },
    {
        "content": "<p>Why not?</p>",
        "id": 202082689,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593174178
    },
    {
        "content": "<p>It can be too aggressive with things like <code>nnreal</code> (I don't remember whether this is an actual example, but it might be) defined directly as <code>subtype</code> where there currently is no <code>ext</code> lemma and outside the <code>nnreal</code> file itself you probably don't actually want to prove equalities of <code>nnreal</code> by proving equalities of the underlying value. (Okay maybe this isn't a great example, because <code>real</code> &gt;&gt; <code>nnreal</code>, but imagine you also want to use some hypotheses which are in <code>nnreal</code> language.)</p>",
        "id": 202083082,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593174515
    },
    {
        "content": "<p>On the other hand I think it actually didn't break anything in mathlib at all, so maybe this isn't a real concern.<br>\nAnd if it is, one could argue that <code>nnreal</code> should use a custom structure type anyways and not be a <code>def</code> around <code>subtype</code>.</p>",
        "id": 202083229,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593174624
    },
    {
        "content": "<p>Does <code>ext</code> unfold definitions?</p>",
        "id": 202090261,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1593178568
    },
    {
        "content": "<p>It does, although since it is using <code>apply</code> under the hood we _could_ turn this off.</p>",
        "id": 202090326,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593178595
    },
    {
        "content": "<p>(This would surely break a lot.)</p>",
        "id": 202090350,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593178607
    },
    {
        "content": "<p>It seems unafraid to apply lemmas even if it would need semireducible transparency to do so, yes</p>",
        "id": 202090352,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593178609
    },
    {
        "content": "<p>Maybe we want <code>ext</code> and <code>ext!</code> (with the current behaviour)?</p>",
        "id": 202090439,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593178648
    },
    {
        "content": "<p>Probably the things it would be break could be fixed by adding more <code>ext</code> lemmas, right?</p>",
        "id": 202090448,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593178651
    },
    {
        "content": "<p>I thought that <code>ext</code> stores lemmas sorted by head type name in order to apply only a small set of lemmas.</p>",
        "id": 202090559,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1593178686
    },
    {
        "content": "<p>But it applies <code>option</code> ext lemma to <code>ennreal</code>.</p>",
        "id": 202090616,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1593178712
    },
    {
        "content": "<p>So I have to use <code>ext1</code> in <code>measure_theory</code>.</p>",
        "id": 202090644,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1593178729
    },
    {
        "content": "<p>I think that applying only lemmas with the desired head symbol is the \"least surprise\" approach.</p>",
        "id": 202090785,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1593178795
    },
    {
        "content": "<p>I rely on the current behavior pretty heavily in lean-homotopy-theory to check whether two morphisms <code>X \\hom Y</code> in <code>Top</code> are equal by function extensionality, and various other things like this, but I think I could add lemmas for these if <code>ext</code> refused to apply <code>funext</code> here.</p>",
        "id": 202091248,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593178976
    },
    {
        "content": "<p>actually that might be a bad example, since that needs a separate extensionality lemma anyways.</p>",
        "id": 202091280,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593178988
    },
    {
        "content": "<p>The other examples are things like checking equality of <code>x y : Top.prod A B</code> where <code>A B : Top</code> using <code>ext</code> for <code>prod</code>.</p>",
        "id": 202091461,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593179061
    },
    {
        "content": "<p>You can always use <code>attribute [ext newtype] oldlemma</code>.</p>",
        "id": 202091464,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1593179063
    },
    {
        "content": "<p>Here <code>Top.prod A B</code> is something whose underlying type will unfold to <code>prod</code> of the underlying types of <code>A</code> and <code>B</code></p>",
        "id": 202091563,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593179104
    },
    {
        "content": "<p>Probably we should make an exception for the case \"head symbol is <code>coe_sort</code>\".</p>",
        "id": 202091690,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1593179160
    },
    {
        "content": "<p>Yes, I've also noticed that <code>ext</code> for <code>option</code> is applied to <code>ennreal</code>. It's not really a problem if you use <code>ext1</code> instead.<br>\n(also, I regularly want to prove two <code>nnreal</code>s equal and am sad that <code>ext</code> doesn't work). <br>\nI will try to do some low level changes to subtype.</p>",
        "id": 202114607,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1593190036
    },
    {
        "content": "<p>Ok, I'm working on it now: <a href=\"https://github.com/leanprover-community/mathlib/tree/subtype\">https://github.com/leanprover-community/mathlib/tree/subtype</a></p>\n<p>I'm adding <code>@[ext]</code> for <code>subtype</code> and simplify <code>x.val</code> to <code>↑x</code>. There is a lot of damage, but so far most of it is fixed just by </p>\n<ul>\n<li>using the coercion more, instead of <code>subtype.val</code></li>\n<li>using <code>ext1</code> if <code>ext</code> is too aggressive.</li>\n<li>There are a couple of places where I have to add <code>-subtype.val_eq_coe</code> as argument to simp. This happens when a new type is defined as a subtype, so the coercion doesn't fire anymore, and <code>subtype.val</code> is still used to get the first component.</li>\n</ul>\n<p>Please voice any concerns of this change ASAP.</p>",
        "id": 202126587,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1593196881
    },
    {
        "content": "<p>A version of <code>ext</code> that doesn't unfold definitions (and making that the default version?) sounds useful as well!</p>",
        "id": 202126647,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1593196921
    },
    {
        "content": "<p>So far, this sounds good to me! Thanks for battling through this</p>",
        "id": 202136233,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593201878
    }
]