[
    {
        "content": "<p>What's going on here?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.algebra.subalgebra</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">subalgebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"c1\">-- invalid definev tactic, value has type</span>\n  <span class=\"c1\">--   {x // x ∈ has_coe_t_aux.coe s}</span>\n  <span class=\"c1\">-- but is expected to have type</span>\n  <span class=\"c1\">--   s</span>\n  <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 230488843,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615890193
    },
    {
        "content": "<p>I tend to have these kinds of issues when reduction gets stuck on a metavariable. Do you have <code>pp.all</code> output?</p>",
        "id": 230489293,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1615890424
    },
    {
        "content": "<p>Got it:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>invalid definev tactic, value has type\n  @subtype.{u_2+1} A\n    (λ (x : A),\n       @has_mem.mem.{u_2 u_2} A\n         (@submodule.{u_1 u_2} R A (@comm_semiring.to_semiring.{u_1} R _inst_1)\n            (@semiring.to_add_comm_monoid.{u_2} A _inst_2)\n            (@algebra.to_semimodule.{u_1 u_2} R A _inst_1 _inst_2 _inst_3))\n         (@submodule.has_mem.{u_1 u_2} R A (@comm_semiring.to_semiring.{u_1} R _inst_1)\n            (@semiring.to_add_comm_monoid.{u_2} A _inst_2)\n            (@algebra.to_semimodule.{u_1 u_2} R A _inst_1 _inst_2 _inst_3))\n         x\n         (@has_coe_t_aux.coe.{u_2+1 u_2+1} (@subalgebra.{u_1 u_2} R A _inst_1 _inst_2 _inst_3)\n            (@submodule.{u_1 u_2} R A (@comm_semiring.to_semiring.{u_1} R _inst_1)\n               (@semiring.to_add_comm_monoid.{u_2} A _inst_2)\n               (@algebra.to_semimodule.{u_1 u_2} R A _inst_1 _inst_2 _inst_3))\n            (@coe_base_aux.{u_2+1 u_2+1} (@subalgebra.{u_1 u_2} R A _inst_1 _inst_2 _inst_3)\n               (@submodule.{u_1 u_2} R A (@comm_semiring.to_semiring.{u_1} R _inst_1)\n                  (@semiring.to_add_comm_monoid.{u_2} A _inst_2)\n                  (@algebra.to_semimodule.{u_1 u_2} R A _inst_1 _inst_2 _inst_3))\n               (@subalgebra.coe_to_submodule.{u_1 u_2} R A _inst_1 _inst_2 _inst_3))\n            s))\nbut is expected to have type\n  s\n</code></pre></div>",
        "id": 230489353,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1615890476
    },
    {
        "content": "<p>Aha, so <code>let</code> just doesn't realize it has to turn <code>s</code> into <code>coe_sort s</code>.</p>",
        "id": 230489431,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1615890514
    },
    {
        "content": "<p>As a workaround, you can do:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">coe_sort</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n<span class=\"c1\">-- or</span>\n  <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n</code></pre></div>",
        "id": 230489559,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1615890600
    },
    {
        "content": "<p>Looks like <code>assertv_definev_core</code> just infers the type of <code>v</code> (here <code>⟨0, _⟩</code>), checks for defeq with <code>t</code> (here <code>s</code>), and errors if they are not equal. Let me see if I can convince it to coerce <code>t</code> to a sort.</p>",
        "id": 230490199,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1615890929
    },
    {
        "content": "<p><code>let x : ↥s</code> seems to work too</p>",
        "id": 230490558,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615891136
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/let.20fails.20with.20coe_sort/near/230490558\">said</a>:</p>\n<blockquote>\n<p><code>let x : ↥s</code> seems to work too</p>\n</blockquote>\n<p>Indeed, I was just too lazy to copypaste the arrow :)</p>",
        "id": 230490595,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1615891164
    },
    {
        "content": "<p>Term mode <code>let</code> fails <del>in the same way</del> on the same input, interestingly</p>",
        "id": 230490610,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615891176
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">subalgebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n  <span class=\"c1\">-- invalid constructor ⟨...⟩, expected type is not an inductive type</span>\n  <span class=\"c1\">--   s</span>\n  <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">s.zero_mem</span><span class=\"o\">⟩</span> <span class=\"k\">in</span> <span class=\"n\">trivial</span>\n</code></pre></div>",
        "id": 230490715,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615891227
    },
    {
        "content": "<p>Looks like it's the same thing, with <code>pp.all</code> it only says <code>s</code>, not <code>has_coe_to_sort.coe_sort _</code>.</p>",
        "id": 230490997,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1615891408
    },
    {
        "content": "<p>I'm a bit stuck here. I think <code>elaborator::visit_typed_expr</code> will do the right thing here, inserting the correct coercions to make <code>t</code> a type and <code>v</code> a term of that type. But I'm not sure that we can get at the elaborator from the tactic state in <code>assertv_definev_core</code>. <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span>, could you help out?</p>",
        "id": 230494267,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1615893215
    },
    {
        "content": "<p>(I'm not necessarily saying that <code>visit_typed_expr</code> is exactly the correct thing to call, just that we should emulate what it does.)</p>",
        "id": 230494339,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1615893254
    },
    {
        "content": "<p>Do you have a mathlib-free mwe?</p>",
        "id": 230494385,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1615893286
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">foo</span> <span class=\"bp\">|</span> <span class=\"n\">bar</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_to_sort</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"kt\">Type</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">unit</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">pp.all</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">foo.bar</span> <span class=\"o\">:=</span> <span class=\"o\">(),</span>\n  <span class=\"n\">trivial</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 230494727,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1615893473
    },
    {
        "content": "<p>Note that the error on <code>let</code> does not mention any <code>coe_sort</code>.</p>",
        "id": 230494867,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1615893543
    },
    {
        "content": "<p>Do you want the let to work, or do you want to get a better error from definev?</p>",
        "id": 230495001,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1615893617
    },
    {
        "content": "<p>The <code>let</code> should work.</p>",
        "id": 230495109,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1615893666
    },
    {
        "content": "<p>Ok, I'll fix the <code>have</code> as well.</p>",
        "id": 230495141,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1615893677
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean/issues/555\">lean#555</a></p>",
        "id": 230495334,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1615893794
    },
    {
        "content": "<p>Great, thank you!</p>",
        "id": 230495558,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1615893897
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span>, I assume that fixes tactic- but not term- mode?</p>",
        "id": 230495858,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615894040
    },
    {
        "content": "<p>Yes, this was not in the mwe.  Give me a second.</p>",
        "id": 230495983,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1615894101
    },
    {
        "content": "<p>That was another one-line fix.  I wonder why we didn't run into this issue before though.</p>",
        "id": 230496307,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1615894271
    },
    {
        "content": "<p><code>assume (x : foo.bar)</code> is broken too</p>",
        "id": 230496814,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615894498
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">foo.bar</span> <span class=\"bp\">→</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"k\">assume</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">foo.bar</span><span class=\"o\">),</span>\n  <span class=\"n\">trivial</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 230496909,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615894543
    },
    {
        "content": "<p>With</p>\n<div class=\"codehilite\" data-code-language=\"plain\"><pre><span></span><code>unify tactic failed, failed to unify\n  foo.bar : foo\nand\n  ↥foo.bar : has_coe_to_sort.S foo\n</code></pre></div>",
        "id": 230497016,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615894583
    },
    {
        "content": "<p>Doesn't <code> `(e:Sort*)</code> use <code>coe</code> instead of <code>coe_sort</code> for the coercion? I've been aware of this issue but the problem is that there isn't an easy way to create \"elaborate as a type\" without putting it in places like the binder of a lambda and throwing away the lambda</p>",
        "id": 230584545,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615926125
    },
    {
        "content": "<p>Whew!  For a moment, you got me really worried there.  But luckily, the <code>mk_coercion</code> function contains this wonderful part:</p>\n<div class=\"codehilite\" data-code-language=\"C++\"><pre><span></span><code>    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">is_sort</span><span class=\"p\">(</span><span class=\"n\">whnf_type</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"k\">auto</span> <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">mk_coercion_to_sort</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">e_type</span><span class=\"p\">,</span> <span class=\"n\">ref</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n            <span class=\"k\">return</span> <span class=\"n\">r</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n</code></pre></div>\n<p>And I've just checked: both the term-mode and the tactic versions produce the serif uparrow.</p>",
        "id": 230595419,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1615930715
    }
]