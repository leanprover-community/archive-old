[
    {
        "content": "<p>Dear all,</p>\n<p>Am I an heretic?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.group.with_one</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_involutive_inv</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kd\">@[simp, to_additive]</span> <span class=\"kd\">lemma</span> <span class=\"n\">inv_comp_inv</span> <span class=\"o\">:</span>\n  <span class=\"n\">has_inv.inv</span> <span class=\"bp\">∘</span> <span class=\"n\">has_inv.inv</span> <span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">id</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"n\">inv_involutive.comp_self</span>\n\n<span class=\"kn\">local</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">reducible</span><span class=\"o\">]</span> <span class=\"n\">with_zero</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">to_additive</span><span class=\"o\">]</span> <span class=\"n\">with_zero.has_inv</span>\n\n<span class=\"kd\">@[to_additive]</span> <span class=\"c1\">-- additivizing `with_zero` gives... `with_zero`</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_involutive_inv</span> <span class=\"o\">(</span><span class=\"n\">with_zero</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">inv_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">option.map_map</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"bp\">$</span> <span class=\"kd\">by</span> <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">inv_comp_inv</span><span class=\"o\">,</span> <span class=\"n\">option.map_id</span><span class=\"o\">,</span> <span class=\"n\">id</span><span class=\"o\">],</span>\n  <span class=\"bp\">..</span><span class=\"n\">with_zero.has_inv</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 281979097,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652281415
    },
    {
        "content": "<p>I thought all groups had a one? Oh wooah that really is a valid import, I'm not sure I've ever seen that file!</p>",
        "id": 281992217,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1652286658
    },
    {
        "content": "<p><a href=\"https://tqft.net/mathlib/algebra/group/with_one\">file#algebra/group/with_one</a></p>",
        "id": 281993075,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1652287021
    },
    {
        "content": "<p>regex fail?! edit: aah, you need <code>/</code>s</p>",
        "id": 281993118,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1652287040
    },
    {
        "content": "<p>I never remmeber which is which :b</p>",
        "id": 281993311,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1652287121
    },
    {
        "content": "<p>So do we not care about such cases where an additive lemma/instance comes from two multiplicative ones?</p>",
        "id": 282092803,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652355652
    },
    {
        "content": "<p>I briefly had a case like that, we have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_compact_mul_support.mul\">docs#has_compact_mul_support.mul</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_compact_support.add\">docs#has_compact_support.add</a>, and briefly I had <code>has_compact_support.mul</code> that additivized would also give <code>has_compact_support.add</code>. But now there are two lemmas <a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_compact_support.mul_right\">docs#has_compact_support.mul_right</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_compact_support.mul_left\">docs#has_compact_support.mul_left</a>.</p>\n<p>I think it's best to <code>to_additivize</code> the most multiplicative one, and not add the attribute for the other ones: I think they will often not compile, because they are not semantically equivalent. So in this case <code>with_zero.has_involutive_neg</code> should come from <code>with_one.has_involutive_inv</code>.</p>",
        "id": 282094090,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1652356419
    },
    {
        "content": "<p>In my case it seems to work fine, but fair.</p>",
        "id": 282094368,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652356568
    }
]