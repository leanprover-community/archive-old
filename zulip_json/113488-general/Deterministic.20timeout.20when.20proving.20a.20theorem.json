[
    {
        "content": "<p>So I'm using Lean v3.7.2 with mathlib commit <code>732f7109c5cb2ece35481c200faa38fbbb4dc995</code> and encountered a deterministic timeout when trying to prove a theorem, which is certainly a first for me:</p>\n<p><code>Preloaded.lean</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">times_3_plus_5</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"bp\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"n\">start</span> <span class=\"o\">:</span>\n    <span class=\"n\">times_3_plus_5</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"n\">times_3</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"n\">times_3_plus_5</span> <span class=\"n\">n</span> <span class=\"bp\">→</span>\n    <span class=\"n\">times_3_plus_5</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"mi\">3</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">plus_5</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"n\">times_3_plus_5</span> <span class=\"n\">n</span> <span class=\"bp\">→</span>\n    <span class=\"n\">times_3_plus_5</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">5</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">decide</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">bool</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"err\">%</span> <span class=\"mi\">5</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">ff</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"mi\">27</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span> <span class=\"mi\">9</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"n\">tt</span>\n  <span class=\"kn\">end</span>\n\n<span class=\"n\">def</span> <span class=\"n\">SUBMISSION</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">times_3_plus_5</span> <span class=\"n\">n</span> <span class=\"bp\">↔</span> <span class=\"n\">decide</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">tt</span>\n<span class=\"kn\">notation</span> <span class=\"bp\">`</span><span class=\"n\">SUBMISSION</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">SUBMISSION</span>\n</pre></div>\n\n\n<p><code>Solution.lean</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">Preloaded</span> <span class=\"n\">tactic</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">modeq</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">times_3_plus_5</span> <span class=\"n\">nat</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">modeq</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">decide_works</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">times_3_plus_5</span> <span class=\"n\">n</span> <span class=\"bp\">↔</span> <span class=\"n\">decide</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">tt</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">split</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">decide</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">intros</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">induction</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">case</span> <span class=\"n\">start</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n    <span class=\"n\">case</span> <span class=\"n\">times_3</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"n\">hm</span> <span class=\"n\">ihm</span> <span class=\"o\">{</span>\n      <span class=\"k\">have</span> <span class=\"n\">hm5</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"err\">%</span> <span class=\"mi\">5</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">5</span> <span class=\"o\">:=</span> <span class=\"n\">mod_lt</span> <span class=\"n\">m</span> <span class=\"n\">dec_trivial</span><span class=\"o\">,</span>\n      <span class=\"n\">interval_cases</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"err\">%</span> <span class=\"mi\">5</span><span class=\"o\">),</span>\n      <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">lh</span> <span class=\"n\">at</span> <span class=\"n\">ihm</span><span class=\"o\">,</span> <span class=\"n\">contradiction</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"n\">hm1</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"err\">%</span> <span class=\"mi\">5</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"err\">%</span> <span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">assumption</span><span class=\"o\">,</span>\n        <span class=\"k\">have</span> <span class=\"n\">hm3</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"mi\">3</span> <span class=\"err\">%</span> <span class=\"mi\">5</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"mi\">3</span> <span class=\"err\">%</span> <span class=\"mi\">5</span> <span class=\"o\">:=</span> <span class=\"n\">modeq_mul_right</span> <span class=\"bp\">_</span> <span class=\"n\">hm1</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"n\">hm3</span><span class=\"o\">,</span>\n        <span class=\"n\">refl</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">lh</span> <span class=\"n\">at</span> <span class=\"n\">ihm</span><span class=\"o\">,</span>\n        <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">decide</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n        <span class=\"k\">have</span> <span class=\"n\">hm2</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"err\">%</span> <span class=\"mi\">5</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"err\">%</span> <span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">assumption</span><span class=\"o\">,</span>\n        <span class=\"k\">have</span> <span class=\"n\">hm3</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"mi\">3</span> <span class=\"err\">%</span> <span class=\"mi\">5</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"mi\">3</span> <span class=\"err\">%</span> <span class=\"mi\">5</span> <span class=\"o\">:=</span> <span class=\"n\">modeq_mul_right</span> <span class=\"bp\">_</span> <span class=\"n\">hm2</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"n\">hm3</span><span class=\"o\">,</span>\n        <span class=\"n\">refl</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"n\">hm3</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"err\">%</span> <span class=\"mi\">5</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"err\">%</span> <span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">assumption</span><span class=\"o\">,</span>\n        <span class=\"k\">have</span> <span class=\"n\">hm4</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"mi\">3</span> <span class=\"err\">%</span> <span class=\"mi\">5</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span> <span class=\"n\">modeq_mul_right</span> <span class=\"bp\">_</span> <span class=\"n\">hm3</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"n\">hm4</span><span class=\"o\">,</span>\n        <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">decide</span><span class=\"o\">],</span>\n        <span class=\"n\">generalize</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"n\">m&#39;</span><span class=\"o\">,</span>\n        <span class=\"n\">iterate</span> <span class=\"mi\">9</span> <span class=\"o\">{</span> <span class=\"n\">all_goals</span> <span class=\"o\">{</span> <span class=\"n\">try</span> <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">m&#39;</span> <span class=\"o\">}</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n        <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">h</span> <span class=\"n\">at</span> <span class=\"n\">hm4</span><span class=\"bp\">;</span> <span class=\"n\">contradiction</span> <span class=\"o\">},</span>\n        <span class=\"o\">{</span> <span class=\"n\">omega</span> <span class=\"o\">},</span>\n        <span class=\"o\">{</span> <span class=\"n\">omega</span> <span class=\"o\">},</span>\n        <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"n\">hm1</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">omega</span><span class=\"o\">,</span> <span class=\"n\">subst</span> <span class=\"n\">hm1</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">lh</span> <span class=\"o\">},</span>\n        <span class=\"o\">{</span> <span class=\"n\">omega</span> <span class=\"o\">},</span>\n        <span class=\"o\">{</span> <span class=\"n\">omega</span> <span class=\"o\">},</span>\n        <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"n\">hm2</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">omega</span><span class=\"o\">,</span> <span class=\"n\">subst</span> <span class=\"n\">hm2</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">lh</span> <span class=\"o\">},</span>\n        <span class=\"o\">{</span> <span class=\"n\">omega</span> <span class=\"o\">},</span>\n        <span class=\"o\">{</span> <span class=\"n\">omega</span> <span class=\"o\">},</span>\n        <span class=\"o\">{</span> <span class=\"n\">omega</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">sorry</span> <span class=\"o\">}</span>\n    <span class=\"o\">},</span>\n    <span class=\"n\">case</span> <span class=\"n\">plus_5</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">sorry</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">sorry</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>As far as I can see, all the tactics I've used so far succeed, but I get a red squiggly line just below the <code>theorem</code> in <code>theorem decide_works ...</code>, and upon hovering my mouse over it, it says <code>(deterministic) timeout</code>. The thing is, I've written proofs that take way longer than this one to compile (&gt; 30s compared to maybe about 10s on this one) and have not seen such an error before so was this timing restriction added recently, or am I missing something?</p>",
        "id": 193546490,
        "sender_full_name": "Donald Sebastian Leung",
        "timestamp": 1586505605
    },
    {
        "content": "<p>yay you're translating more kata</p>",
        "id": 193546872,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586505948
    },
    {
        "content": "<p>deterministic timeout has always existed (and always will)</p>",
        "id": 193546928,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586505974
    },
    {
        "content": "<p>the multitude of <code>omega</code> may or may not be the cause</p>",
        "id": 193546939,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586505991
    },
    {
        "content": "<p>So a tactic-mode proof cannot have too many steps? In that case maybe I'll try extracting out a few lemmas and see if it helps.</p>",
        "id": 193548487,
        "sender_full_name": "Donald Sebastian Leung",
        "timestamp": 1586507517
    },
    {
        "content": "<p>You can turn off the timeout, and I think it is disabled by default if you run lean via the command line</p>",
        "id": 193548668,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586507654
    },
    {
        "content": "<p>Thanks. In any case, it seems that it was indeed the excessive use of <code>omega</code> which caused the timeout. I pulled out all uses of <code>omega</code> into separate lemmas and that seems to have solved my timeout issues, at least for now.</p>",
        "id": 193549971,
        "sender_full_name": "Donald Sebastian Leung",
        "timestamp": 1586508866
    },
    {
        "content": "<p>I think there is some underlying weirdness going on here. Here's a situation where I prove one goal with <code>omega</code> in two different situations, and it takes 0.08 seconds in the first and 3 seconds in the second one on my machine, to solve exactly the same goal.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span>  <span class=\"n\">tactic</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">modeq</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">times_3_plus_5</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"bp\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"n\">start</span> <span class=\"o\">:</span>\n    <span class=\"n\">times_3_plus_5</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"n\">times_3</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"n\">times_3_plus_5</span> <span class=\"n\">n</span> <span class=\"bp\">→</span>\n    <span class=\"n\">times_3_plus_5</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"mi\">3</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">plus_5</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"n\">times_3_plus_5</span> <span class=\"n\">n</span> <span class=\"bp\">→</span>\n    <span class=\"n\">times_3_plus_5</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">5</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">decide</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">bool</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"err\">%</span> <span class=\"mi\">5</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">ff</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"mi\">27</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span> <span class=\"mi\">9</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"n\">tt</span>\n  <span class=\"kn\">end</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">times_3_plus_5</span> <span class=\"n\">nat</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">modeq</span>\n\n<span class=\"c1\">-- I can make Lean solve the following goal in 0 seconds and in 3 seconds with the same tactic</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">n m : ℕ,</span>\n<span class=\"cm\">hm : times_3_plus_5 m,</span>\n<span class=\"cm\">ihm : decide._match_1 m (m % 5) = tt,</span>\n<span class=\"cm\">hm5 : m % 5 &lt; 5,</span>\n<span class=\"cm\">lh : m % 5 = 3,</span>\n<span class=\"cm\">hm3 : m % 5 = 3 % 5,</span>\n<span class=\"cm\">hm4 : m * 3 % 5 = 4,</span>\n<span class=\"cm\">h : m * 3 = 7</span>\n<span class=\"cm\">⊢ 9 ≤ 7</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"kn\">set_option</span> <span class=\"n\">profiler</span> <span class=\"n\">true</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">hm</span> <span class=\"o\">:</span> <span class=\"n\">times_3_plus_5</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">ihm</span> <span class=\"o\">:</span> <span class=\"n\">decide</span><span class=\"bp\">._</span><span class=\"n\">match_1</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"err\">%</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">tt</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">hm5</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"err\">%</span> <span class=\"mi\">5</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">5</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">lh</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"err\">%</span> <span class=\"mi\">5</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">hm3</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"err\">%</span> <span class=\"mi\">5</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"err\">%</span> <span class=\"mi\">5</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">hm4</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"mi\">3</span> <span class=\"err\">%</span> <span class=\"mi\">5</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"mi\">7</span><span class=\"o\">)</span>\n<span class=\"o\">:</span> <span class=\"mi\">9</span> <span class=\"bp\">≤</span> <span class=\"mi\">7</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">omega</span> <span class=\"c1\">-- &lt;- finishes almost instantly</span>\n\n<span class=\"c1\">-- Now look in the middle of a proof</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">decide_works</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">times_3_plus_5</span> <span class=\"n\">n</span> <span class=\"bp\">↔</span> <span class=\"n\">decide</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">tt</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">split</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">decide</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">intros</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">induction</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">case</span> <span class=\"n\">start</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n    <span class=\"n\">case</span> <span class=\"n\">times_3</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"n\">hm</span> <span class=\"n\">ihm</span> <span class=\"o\">{</span>\n      <span class=\"k\">have</span> <span class=\"n\">hm5</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"err\">%</span> <span class=\"mi\">5</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">5</span> <span class=\"o\">:=</span> <span class=\"n\">mod_lt</span> <span class=\"n\">m</span> <span class=\"n\">dec_trivial</span><span class=\"o\">,</span>\n      <span class=\"n\">interval_cases</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"err\">%</span> <span class=\"mi\">5</span><span class=\"o\">),</span>\n      <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">lh</span> <span class=\"n\">at</span> <span class=\"n\">ihm</span><span class=\"o\">,</span> <span class=\"n\">contradiction</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"n\">hm1</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"err\">%</span> <span class=\"mi\">5</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"err\">%</span> <span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">assumption</span><span class=\"o\">,</span>\n        <span class=\"k\">have</span> <span class=\"n\">hm3</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"mi\">3</span> <span class=\"err\">%</span> <span class=\"mi\">5</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"mi\">3</span> <span class=\"err\">%</span> <span class=\"mi\">5</span> <span class=\"o\">:=</span> <span class=\"n\">modeq_mul_right</span> <span class=\"bp\">_</span> <span class=\"n\">hm1</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"n\">hm3</span><span class=\"o\">,</span>\n        <span class=\"n\">refl</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">lh</span> <span class=\"n\">at</span> <span class=\"n\">ihm</span><span class=\"o\">,</span>\n        <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">decide</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n        <span class=\"k\">have</span> <span class=\"n\">hm2</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"err\">%</span> <span class=\"mi\">5</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"err\">%</span> <span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">assumption</span><span class=\"o\">,</span>\n        <span class=\"k\">have</span> <span class=\"n\">hm3</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"mi\">3</span> <span class=\"err\">%</span> <span class=\"mi\">5</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"mi\">3</span> <span class=\"err\">%</span> <span class=\"mi\">5</span> <span class=\"o\">:=</span> <span class=\"n\">modeq_mul_right</span> <span class=\"bp\">_</span> <span class=\"n\">hm2</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"n\">hm3</span><span class=\"o\">,</span>\n        <span class=\"n\">refl</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"n\">hm3</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"err\">%</span> <span class=\"mi\">5</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"err\">%</span> <span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">assumption</span><span class=\"o\">,</span>\n        <span class=\"k\">have</span> <span class=\"n\">hm4</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"mi\">3</span> <span class=\"err\">%</span> <span class=\"mi\">5</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span> <span class=\"n\">modeq_mul_right</span> <span class=\"bp\">_</span> <span class=\"n\">hm3</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"n\">hm4</span><span class=\"o\">,</span>\n        <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">decide</span><span class=\"o\">],</span>\n        <span class=\"n\">generalize</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"n\">m&#39;</span><span class=\"o\">,</span>\n        <span class=\"n\">iterate</span> <span class=\"mi\">9</span> <span class=\"o\">{</span> <span class=\"n\">all_goals</span> <span class=\"o\">{</span> <span class=\"n\">try</span> <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">m&#39;</span> <span class=\"o\">}</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n        <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">h</span> <span class=\"n\">at</span> <span class=\"n\">hm4</span><span class=\"bp\">;</span> <span class=\"n\">contradiction</span> <span class=\"o\">},</span>\n        <span class=\"o\">{</span> <span class=\"n\">omega</span> <span class=\"o\">},</span>\n        <span class=\"o\">{</span> <span class=\"n\">omega</span> <span class=\"o\">},</span>\n        <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"n\">hm1</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">omega</span><span class=\"o\">,</span> <span class=\"n\">subst</span> <span class=\"n\">hm1</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">lh</span> <span class=\"o\">},</span>\n        <span class=\"o\">{</span> <span class=\"n\">omega</span> <span class=\"o\">},</span>\n        <span class=\"o\">{</span> <span class=\"n\">omega</span> <span class=\"o\">},</span>\n        <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"n\">hm2</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">omega</span><span class=\"o\">,</span> <span class=\"n\">subst</span> <span class=\"n\">hm2</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">lh</span> <span class=\"o\">},</span>\n        <span class=\"o\">{</span> <span class=\"n\">omega</span><span class=\"o\">},</span> <span class=\"c1\">-- &lt;- this omega takes 3 seconds; replace with sorry and observe profiler change</span>\n        <span class=\"n\">sorry</span><span class=\"o\">,</span><span class=\"n\">sorry</span><span class=\"o\">},</span><span class=\"n\">sorry</span><span class=\"o\">},</span><span class=\"n\">sorry</span><span class=\"o\">},</span><span class=\"n\">sorry</span><span class=\"o\">,</span><span class=\"kn\">end</span> <span class=\"c1\">-- &lt;- look at profiler output here</span>\n</pre></div>",
        "id": 193551327,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586510030
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> how can that happen?</p>",
        "id": 193551408,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586510098
    },
    {
        "content": "<p>How do I begin to debug this? All I know is how to turn the profiler on. Are there hidden metavariable goals?</p>",
        "id": 193551666,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586510319
    },
    {
        "content": "<p>Aah! If I type <code>recover</code> before the omega, then all of a sudden I have 5 goals.</p>",
        "id": 193551899,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586510507
    },
    {
        "content": "<p>Does this indicate that something is not clearing up as it should be?</p>",
        "id": 193551950,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586510535
    },
    {
        "content": "<p>Oh -- is that actually expected behaviour of <code>recover</code> when one is in a sub-<code>{}</code> block?</p>",
        "id": 193552126,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586510750
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">∧</span> <span class=\"n\">Q</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">recover</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">hq</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">hp</span><span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>Maybe I'm back to square 1.</p>",
        "id": 193552208,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586510808
    },
    {
        "content": "<p>I can see two possible ways this could happen: 1) <code>7</code> is not the same as <code>7</code>.  You could enable <code>pp.all</code> and check if the two goals are actually the same.  2) <code>omega</code> is non-deterministic because it depends on the state of the caches, the order of the assumptions, the names of the assumptions, the hash codes of the expressions, etc.</p>",
        "id": 193552359,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1586510927
    },
    {
        "content": "<p>I hope that <code>omega</code> only looks at the current goal and not at other metavariables.  So I don't think it's got anything to do with <code>recover</code>.</p>",
        "id": 193552458,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1586511001
    },
    {
        "content": "<p>7 is indeed not the same as 7. They're both nats though.</p>",
        "id": 193552537,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586511046
    },
    {
        "content": "<p><code>(nat.succ (nat.succ (nat.succ (nat.succ (nat.succ (nat.succ (nat.succ nat.zero)))))))</code> v <code>(@bit1.{0} nat nat.has_one nat.has_add (@bit1.{0} nat nat.has_one nat.has_add (@has_one.one.{0} nat nat.has_one)))</code></p>",
        "id": 193552557,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586511064
    },
    {
        "content": "<p>Oh nice Gabriel -- this is exactly it!</p>",
        "id": 193552652,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586511128
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">omega</span>\n\n<span class=\"kn\">set_option</span> <span class=\"n\">profiler</span> <span class=\"n\">true</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">hm5</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"err\">%</span> <span class=\"mi\">5</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">5</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">lh</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"err\">%</span> <span class=\"mi\">5</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">hm3</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"err\">%</span> <span class=\"mi\">5</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"err\">%</span> <span class=\"mi\">5</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">hm4</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"mi\">3</span> <span class=\"err\">%</span> <span class=\"mi\">5</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"mi\">7</span><span class=\"o\">)</span>\n<span class=\"o\">:</span> <span class=\"mi\">9</span> <span class=\"bp\">≤</span> <span class=\"mi\">7</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n <span class=\"n\">omega</span> <span class=\"c1\">-- &lt;- finishes almost instantly</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">hm5</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"err\">%</span> <span class=\"mi\">5</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">5</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">lh</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"err\">%</span> <span class=\"mi\">5</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">hm3</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"err\">%</span> <span class=\"mi\">5</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"err\">%</span> <span class=\"mi\">5</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">hm4</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"mi\">3</span> <span class=\"err\">%</span> <span class=\"mi\">5</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"mi\">7</span><span class=\"o\">)</span>\n<span class=\"o\">:</span> <span class=\"mi\">9</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">zero</span><span class=\"o\">)))))))</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n <span class=\"n\">omega</span> <span class=\"c1\">-- &lt;- takes three seconds</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 193552690,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586511184
    },
    {
        "content": "<p>The prettyprinter displays them both as 7 and they're both nats</p>",
        "id": 193552718,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586511215
    },
    {
        "content": "<p>Here's what's happening: as a preprocessing step, <code>omega</code> replaces <code>nat.succ</code> by <code>+ 1</code>: <a href=\"https://github.com/leanprover-community/mathlib/blob/f723f37531502d76e9f7a3a27c225884918a70b5/src/tactic/omega/nat/main.lean#L24\" title=\"https://github.com/leanprover-community/mathlib/blob/f723f37531502d76e9f7a3a27c225884918a70b5/src/tactic/omega/nat/main.lean#L24\">https://github.com/leanprover-community/mathlib/blob/f723f37531502d76e9f7a3a27c225884918a70b5/src/tactic/omega/nat/main.lean#L24</a>  So instead of <code>7</code> it sees <code>0 + 1 + 1 + 1 + 1 + 1 + 1 +1</code>.</p>",
        "id": 193553314,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1586511701
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/2376\" title=\"https://github.com/leanprover-community/mathlib/issues/2376\">#2376</a></p>",
        "id": 193553508,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586511859
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"264734\">@Donald Sebastian Leung</span> there is some issue with <code>omega</code> taking too long, but in your code above if you replace <code>iterate 9 { all_goals { try { cases m' } } }, </code> with <code>iterate 9 { all_goals { try { cases m'; simp } } },</code> you might be back on track.</p>",
        "id": 193595308,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586539813
    }
]