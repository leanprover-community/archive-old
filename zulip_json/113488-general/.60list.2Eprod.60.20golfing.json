[
    {
        "content": "<p>I'm generalizing <a href=\"https://leanprover-community.github.io/mathlib_docs/find/multilinear.mk_pi_ring/src\">src#multilinear.mk_pi_ring</a> to an algebra over a ring. If <code>A</code> is a commutative algebra over <code>R</code>, then the original proof works with trivial modifications. However, if <code>A</code> is not commutative (e.g., the space of continuous linear endomorphisms) then it's true but harder to prove in Lean.</p>\n<p>Here is the goal:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra.multilinear</span>\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory.algebra</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n\n<span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">mk_pi_algebra_fin</span> <span class=\"o\">:</span> <span class=\"n\">multilinear_map</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"o\">((</span><span class=\"n\">list.fin_range</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">m</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">prod</span><span class=\"o\">,</span>\n  <span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">m</span> <span class=\"n\">i</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">map_smul'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">m</span> <span class=\"n\">i</span> <span class=\"n\">c</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"o\">}</span>\n</code></pre></div>\n\n<p>Do we have some good lemmas about <code>list.prod</code> that I can use instead of <code>finset.prod_update_of_mem</code>?</p>",
        "id": 211431193,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1601235756
    },
    {
        "content": "<p>Almost done</p>",
        "id": 211437241,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1601245229
    },
    {
        "content": "<p>Done.</p>",
        "id": 211438327,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1601246885
    },
    {
        "content": "<p>This looks it would replace <code>algebra_prod</code> in <a href=\"https://github.com/leanprover-community/mathlib/issues/3770\">#3770</a></p>",
        "id": 211439516,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1601248768
    },
    {
        "content": "<p>I missed this pr</p>",
        "id": 211439840,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1601249305
    },
    {
        "content": "<p>But I prefer my version (to be PRed soon)</p>",
        "id": 211439923,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1601249469
    }
]