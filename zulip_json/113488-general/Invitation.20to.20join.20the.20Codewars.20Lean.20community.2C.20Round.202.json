[
    {
        "content": "<p>I hereby invite you to <a href=\"https://www.codewars.com/?language=lean\" title=\"https://www.codewars.com/?language=lean\">sign up for an account on Codewars</a>.</p>\n<p>Codewars is a training platform where programmers of all disciplines train on code challenges called kata in order to improve their programming skills, and <strong>we are now extending our invitation to Lean users of all levels (whether beginner, intermediate or expert) and disciplines (mathematicians and computer scientists alike) interested in computerized theorem proving</strong>.</p>\n<p>Lean support has been recently added to Codewars (late March / early April) and is now in the <em>Beta Phase</em> - we now have much more content compared to when we just started thanks to all of those who actively participated in the Round 1 invitation and generously contributed Lean kata to our site, but we are still looking forward to potential feedback on how the experience on Codewars can be improved (for Lean).</p>\n<p>In terms of Lean challenges, we now have <a href=\"https://www.codewars.com/kata/search/lean?q=&amp;beta=false\" title=\"https://www.codewars.com/kata/search/lean?q=&amp;beta=false\">11 approved kata</a> and <a href=\"https://www.codewars.com/kata/search/lean?q=&amp;beta=true\" title=\"https://www.codewars.com/kata/search/lean?q=&amp;beta=true\">20 beta kata</a> spanning topics on synthetic geometry, category theory, number theory, abstract algebra ... and more! Feel free to browse through the list of available challenges and train on whatever challenge you find of interest. Once you have 25 honor (a scoring system on Codewars), you will also be able to vote on Kata you have completed based on how satisfied you were with the experience, so <em>don't forget to cast your votes</em>! <span aria-label=\"smile\" class=\"emoji emoji-263a\" role=\"img\" title=\"smile\">:smile:</span> </p>\n<p>You may learn more about <a href=\"https://github.com/Codewars/codewars.com/wiki/Language-Lean\" title=\"https://github.com/Codewars/codewars.com/wiki/Language-Lean\">the Lean setup used on Codewars</a> on our Wiki, as well as the <a href=\"https://github.com/Codewars/codewars.com/wiki/Honor-&amp;-Ranks\" title=\"https://github.com/Codewars/codewars.com/wiki/Honor-&amp;-Ranks\">scoring system</a>, <a href=\"https://github.com/codewars/codewars.com/wiki/Privileges\" title=\"https://github.com/codewars/codewars.com/wiki/Privileges\">user privileges</a> and the <a href=\"https://github.com/codewars/codewars.com/wiki/Kata-Beta-Process\" title=\"https://github.com/codewars/codewars.com/wiki/Kata-Beta-Process\">beta process</a>. You may also wish to drop by <a href=\"https://gitter.im/Codewars/codewars.com/\" title=\"https://gitter.im/Codewars/codewars.com/\">our Gitter chat</a> if you have any questions about Codewars or would just like to chat in general.</p>\n<p>Happy sparring! <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 193780791,
        "sender_full_name": "Donald Sebastian Leung",
        "timestamp": 1586790300
    },
    {
        "content": "<p>Plasmodium: <a href=\"https://www.codewars.com/kata/5cc3d8c2312133001dea9b3d/lean\" title=\"https://www.codewars.com/kata/5cc3d8c2312133001dea9b3d/lean\">Program Verification #5: The sum of a geometric progression</a></p>",
        "id": 193821884,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586812227
    },
    {
        "content": "<p>How does beta work? More specifically, how many votes does a beta kata need to get before begin approved?</p>",
        "id": 193859018,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586849566
    },
    {
        "content": "<p>Generally, the number of satisfaction votes, rank assessments as well as the satisfaction rating required for a Beta kata to leave Beta decreases as 1) the average assessed rank of the kata is higher and 2) you get more and more kata approved. For example, if you currently have &lt; 10 approved kata and the average assessed rank of your Beta kata is in the <code>7-8 kyu</code> range then it will require 12 (satisfaction + ranking) votes with a satisfaction rating of &gt;= 80% in order to be eligible to leave Beta, but if its average assessed rank is <code>1-2 kyu</code> then it only requires 5 votes and &gt;= 70% satisfaction to leave Beta.</p>\n<p>You may learn more about the <a href=\"https://github.com/codewars/codewars.com/wiki/Kata-Beta-Process\" title=\"https://github.com/codewars/codewars.com/wiki/Kata-Beta-Process\">Beta Process</a> on our Wiki; specifically, the <a href=\"https://github.com/codewars/codewars.com/wiki/Kata-Beta-Process#kata-approval\" title=\"https://github.com/codewars/codewars.com/wiki/Kata-Beta-Process#kata-approval\">kata approval requirements</a>.</p>",
        "id": 193868443,
        "sender_full_name": "Donald Sebastian Leung",
        "timestamp": 1586855104
    },
    {
        "content": "<p>Is there a template for making new lean kata? For instance, how do I make sure the user didn't use any new axioms or sorry?</p>",
        "id": 194233919,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1586988278
    },
    {
        "content": "<p>In about 30 minutes I was going to ask exactly the same question. I've seen this issue several times in the discussions -- \"don't do it like that, it's trivial to hack\" :-/</p>",
        "id": 194234430,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586988556
    },
    {
        "content": "<p>OK so I am faced with having to supply 5 files:<br>\nComplete solution<br>\nInitial solution<br>\nPreloaded<br>\nTest cases<br>\nExample test cases</p>",
        "id": 194240075,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586992256
    },
    {
        "content": "<p>Say my kata is to prove <code>theorem easy : 2 + 2 = 4</code>. What now? Where does all this SUBMISSION go?</p>",
        "id": 194240135,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586992300
    },
    {
        "content": "<p>sorry, :D</p>",
        "id": 194243796,
        "sender_full_name": "orlando",
        "timestamp": 1586995559
    },
    {
        "content": "<p>oups i post in a bas section sorry :D</p>",
        "id": 194243877,
        "sender_full_name": "orlando",
        "timestamp": 1586995594
    },
    {
        "content": "<p><code> Final Solution is invalid. (lean) The solution should pass the provided test cases</code> What did I do wrong?</p>",
        "id": 194245423,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586997053
    },
    {
        "content": "<p>I might have got it working: <a href=\"https://www.codewars.com/kata/5e97af00b13ab700244eaae9/train/lean\" title=\"https://www.codewars.com/kata/5e97af00b13ab700244eaae9/train/lean\">elliptic curve question</a></p>",
        "id": 194247445,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586999153
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/Invitation.20to.20join.20the.20Codewars.20Lean.20community.2C.20Round.202/near/194240135\" title=\"#narrow/stream/113488-general/topic/Invitation.20to.20join.20the.20Codewars.20Lean.20community.2C.20Round.202/near/194240135\">said</a>:</p>\n<blockquote>\n<p>Say my kata is to prove <code>theorem easy : 2 + 2 = 4</code>. What now? Where does all this SUBMISSION go?</p>\n</blockquote>\n<p>I think the way that some kata have done it is to have this in your tests</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">Preloaded</span> <span class=\"n\">Solution</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">easy&#39;</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span> <span class=\"n\">easy</span>\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">axioms</span> <span class=\"n\">easy&#39;</span>\n</pre></div>",
        "id": 194247498,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1586999177
    },
    {
        "content": "<p>So do this instead of using <code>SUBMISSION</code></p>",
        "id": 194247540,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1586999234
    },
    {
        "content": "<p>For <span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span> : the 5 Lean files I made are:<br>\n1) Complete solution: a bunch of working Lean 3.7.2 code containing <code>theorem zany_name : my_statement := &lt;proof&gt;</code><br>\n2) Initial solution:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">Preloaded</span>\n\n<span class=\"c1\">-- some comments</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">zany_name</span> <span class=\"o\">:</span> <span class=\"n\">my_statement</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>\n\n\n<p>3) Preloaded:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">imports</span><span class=\"bp\">-</span><span class=\"n\">needed</span><span class=\"bp\">-</span><span class=\"n\">to</span><span class=\"bp\">-</span><span class=\"n\">make</span><span class=\"bp\">-</span><span class=\"kn\">theorem</span><span class=\"bp\">-</span><span class=\"n\">statement</span><span class=\"bp\">-</span><span class=\"n\">compile</span>\n\n<span class=\"n\">def</span> <span class=\"n\">SUBMISSION</span> <span class=\"o\">:=</span> <span class=\"n\">my_statement</span>\n<span class=\"kn\">notation</span> <span class=\"bp\">`</span><span class=\"n\">SUBMISSION</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">SUBMISSION</span>\n</pre></div>\n\n\n<p>4) Test cases:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">Preloaded</span> <span class=\"n\">Solution</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">submission</span> <span class=\"o\">:</span> <span class=\"n\">SUBMISSION</span> <span class=\"o\">:=</span> <span class=\"n\">zany_name</span>\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">axioms</span> <span class=\"n\">submission</span>\n</pre></div>\n\n\n<p>5) Example test cases: same as test cases.</p>\n<p>As an example: in the <a href=\"https://www.codewars.com/kata/5e987757eb3b570001edb6cd\" title=\"https://www.codewars.com/kata/5e987757eb3b570001edb6cd\">5^5^5^5^5 question</a>, <code>zany_name</code> is <code>fivefives</code> and <code>my_statement</code> is <code>¬ nat.prime ((5^5^5^5^5-1)/(5^5^(5^5^5-1)-1))</code></p>",
        "id": 194247727,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586999466
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"266440\">@Shing Tak Lam</span> does my kata look OK (I'm not asking about the maths, I'm just asking if I've made any dumb errors)</p>",
        "id": 194247838,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586999573
    },
    {
        "content": "<p>I think so? At least from comparing it to existing kata.</p>",
        "id": 194247960,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1586999717
    },
    {
        "content": "<p>I mean if you put it into Codewars, the preloaded.lean should fail the tests and the completed solution should pass. So if that's the case then you're probably fine? Probably best to ask someone who actually knows this stuff (Donald)</p>",
        "id": 194248021,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1586999781
    },
    {
        "content": "<p>I just had a weird time uploading it; the first time it seemed to fail, and then the second time it seemed to pass instantly.</p>",
        "id": 194248042,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586999832
    },
    {
        "content": "<p>Sometimes the Codewars servers does that. It seems to depend on the load the servers are under (the time of day)...</p>",
        "id": 194248096,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1586999886
    },
    {
        "content": "<p>I like the good test coverage :)</p>",
        "id": 194248424,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587000338
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/Invitation.20to.20join.20the.20Codewars.20Lean.20community.2C.20Round.202/near/194247445\" title=\"#narrow/stream/113488-general/topic/Invitation.20to.20join.20the.20Codewars.20Lean.20community.2C.20Round.202/near/194247445\">said</a>:</p>\n<blockquote>\n<p>I might have got it working: <a href=\"https://www.codewars.com/kata/5e97af00b13ab700244eaae9/train/lean\" title=\"https://www.codewars.com/kata/5e97af00b13ab700244eaae9/train/lean\">elliptic curve question</a></p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> Congrats on authoring your first kata on the site (as yourself)! <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> </p>\n<p><span class=\"user-mention silent\" data-user-id=\"266440\">Shing Tak Lam</span> <a href=\"#narrow/stream/113488-general/topic/Invitation.20to.20join.20the.20Codewars.20Lean.20community.2C.20Round.202/near/194248021\" title=\"#narrow/stream/113488-general/topic/Invitation.20to.20join.20the.20Codewars.20Lean.20community.2C.20Round.202/near/194248021\">said</a>:</p>\n<blockquote>\n<p>I mean if you put it into Codewars, the preloaded.lean should fail the tests and the completed solution should pass. So if that's the case then you're probably fine? Probably best to ask someone who actually knows this stuff (Donald)</p>\n</blockquote>\n<p>That sounds about right, except that the initial solution should only fail the tests because of a wrong input (or in the case of Lean, a <code>sorry</code>) and not because of a compilation error. We don't want the solver to perform unnecessary debugging just to get their solution to compile. There are exceptions where the initial solution is designed to not compile (e.g. in a weird C++ kata involving compile-time metaprogramming) but those are extremely rare.</p>",
        "id": 194248828,
        "sender_full_name": "Donald Sebastian Leung",
        "timestamp": 1587000825
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/Invitation.20to.20join.20the.20Codewars.20Lean.20community.2C.20Round.202/near/194248042\" title=\"#narrow/stream/113488-general/topic/Invitation.20to.20join.20the.20Codewars.20Lean.20community.2C.20Round.202/near/194248042\">said</a>:</p>\n<blockquote>\n<p>I just had a weird time uploading it; the first time it seemed to fail, and then the second time it seemed to pass instantly.</p>\n</blockquote>\n<p>Not sure if it's related here but I should probably mention this: there is a known long-standing bug on Codewars that when you publish your kata for the first time, the servers do not actually check if your kata is completable so can actually publish a broken kata that no one can possibly solve. But on every re-publish, the servers do the checking and prevents you from re-publishing if the kata becomes un-completable. The best way to ensure that you do not accidentally publish a broken kata is by clicking \"Validate Solution\" and making sure that the test output is green before publishing your kata.</p>",
        "id": 194249052,
        "sender_full_name": "Donald Sebastian Leung",
        "timestamp": 1587001128
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/Invitation.20to.20join.20the.20Codewars.20Lean.20community.2C.20Round.202/near/194248424\" title=\"#narrow/stream/113488-general/topic/Invitation.20to.20join.20the.20Codewars.20Lean.20community.2C.20Round.202/near/194248424\">said</a>:</p>\n<blockquote>\n<p>I like the good test coverage :)</p>\n</blockquote>\n<p>IMO the two good things about authoring theorem-proving kata (as opposed to ordinary programming kata) on Codewars is 1) authoring a theorem-proving kata takes about the same effort as solving one, whereas authoring a programming kata requires substantially more effort in designing suitable fixed, edge and random tests and 2) the community generally give more favorable votes to theorem-proving kata (if only because there currently aren't that many and everyone wants to see more on the site), whereas, when authoring a programming kata, if you don't get it <em>just right</em> then you immediately get <del>cyber-bullied</del> shouted on by the community for all sorts of various issues and receive a flood of \"Not Satisfied\" votes (which could automatically retire your Beta kata, rendering it impossible to leave Beta).</p>",
        "id": 194249434,
        "sender_full_name": "Donald Sebastian Leung",
        "timestamp": 1587001460
    },
    {
        "content": "<p>Congrats <span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> on your first approved kata: <a href=\"https://www.codewars.com/kata/5e90c3814af7f4002e2535af\" title=\"https://www.codewars.com/kata/5e90c3814af7f4002e2535af\">Show that there are two types that are unequal</a> <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 194309519,
        "sender_full_name": "Donald Sebastian Leung",
        "timestamp": 1587046155
    },
    {
        "content": "<p>Congrats <span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span> on your first approved kata: <a href=\"https://www.codewars.com/kata/5e9900b311efe00001996e26\" title=\"https://www.codewars.com/kata/5e9900b311efe00001996e26\">Every symmetric transitive relation is reflexive ... right?</a> <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> </p>\n<p>And ... we now have <a href=\"https://www.codewars.com/collections/mathematical-analysis\" title=\"https://www.codewars.com/collections/mathematical-analysis\">4 new kata on limits of sequences</a>, check them out <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 194422429,
        "sender_full_name": "Donald Sebastian Leung",
        "timestamp": 1587120198
    },
    {
        "content": "<p>... which brings us up to 41 (Lean) kata in total</p>",
        "id": 194422813,
        "sender_full_name": "Donald Sebastian Leung",
        "timestamp": 1587120460
    },
    {
        "content": "<p>Math rendering at <a href=\"https://www.codewars.com/kata/5e997f77ea84170016600045\" title=\"https://www.codewars.com/kata/5e997f77ea84170016600045\">https://www.codewars.com/kata/5e997f77ea84170016600045</a> is painful to see. It brings back memories of the 90's.</p>",
        "id": 194425449,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1587122490
    },
    {
        "content": "<p>Why <code> ∀ ε &gt; 0, ∃ (N : ℝ), ∀ n : ℕ, ↑n &gt; N → abs (x n - l) &lt; ε</code>? Why would you want to ask N to be real??</p>",
        "id": 194425554,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1587122561
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/Invitation.20to.20join.20the.20Codewars.20Lean.20community.2C.20Round.202/near/194425449\" title=\"#narrow/stream/113488-general/topic/Invitation.20to.20join.20the.20Codewars.20Lean.20community.2C.20Round.202/near/194425449\">said</a>:</p>\n<blockquote>\n<p>Math rendering at <a href=\"https://www.codewars.com/kata/5e997f77ea84170016600045\" title=\"https://www.codewars.com/kata/5e997f77ea84170016600045\">https://www.codewars.com/kata/5e997f77ea84170016600045</a> is painful to see. It brings back memories of the 90's.</p>\n</blockquote>\n<p>Yeah, sorry about that, I don't think Codewars supports TeX / MathJAX or similar so I had to typeset the LaTeX in an external editor, take screenshots of the rendered output, upload them onto imgur and paste the images there.</p>\n<p>There might be a way to get rid of that white background by using SVGs but I'm not all too familiar with it.</p>",
        "id": 194439268,
        "sender_full_name": "Donald Sebastian Leung",
        "timestamp": 1587129947
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/Invitation.20to.20join.20the.20Codewars.20Lean.20community.2C.20Round.202/near/194425554\" title=\"#narrow/stream/113488-general/topic/Invitation.20to.20join.20the.20Codewars.20Lean.20community.2C.20Round.202/near/194425554\">said</a>:</p>\n<blockquote>\n<p>Why <code> ∀ ε &gt; 0, ∃ (N : ℝ), ∀ n : ℕ, ↑n &gt; N → abs (x n - l) &lt; ε</code>? Why would you want to ask N to be real??</p>\n</blockquote>\n<p>IMO it's easier to allow <code>N</code> to be real since otherwise one may have to round their value of <code>N</code> up to the nearest natural number in Lean after finding it by manipulating the inequality <code>abs (x n - l) &lt; ε</code> on paper. But I am definitely no expert in analysis / Lean so feel free to leave your suggestions in the discourse of the kata concerned and I'll see if I can implement your suggestions in my spare time.</p>",
        "id": 194440311,
        "sender_full_name": "Donald Sebastian Leung",
        "timestamp": 1587130344
    },
    {
        "content": "<p>I strongly suggest this is a very bad idea.</p>",
        "id": 194440480,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1587130417
    },
    {
        "content": "<p>And I've written dozens of \"Katas\" for my students on this topic of limits of sequences.</p>",
        "id": 194440555,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1587130443
    },
    {
        "content": "<p>Although I haven't tried to replace the word exercise with kata.</p>",
        "id": 194440615,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1587130475
    },
    {
        "content": "<p>It's true you can meet coercion hell with applying this definition on concrete sequence like <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>↦</mo><mn>1</mn><mi mathvariant=\"normal\">/</mi><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n \\mapsto 1/n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.522em;vertical-align:-0.011em;\"></span><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">↦</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mord\">/</span><span class=\"mord mathdefault\">n</span></span></span></span>. But what you do is enforcing coercion hell <em>everywhere</em>.</p>",
        "id": 194440764,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1587130552
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/Invitation.20to.20join.20the.20Codewars.20Lean.20community.2C.20Round.202/near/194440764\" title=\"#narrow/stream/113488-general/topic/Invitation.20to.20join.20the.20Codewars.20Lean.20community.2C.20Round.202/near/194440764\">said</a>:</p>\n<blockquote>\n<p>It's true you can meet coercion hell with applying this definition on concrete sequence like <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>↦</mo><mn>1</mn><mi mathvariant=\"normal\">/</mi><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n \\mapsto 1/n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.522em;vertical-align:-0.011em;\"></span><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">↦</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mord\">/</span><span class=\"mord mathdefault\">n</span></span></span></span>. But what you do is enforcing coercion hell <em>everywhere</em>.</p>\n</blockquote>\n<p>Thanks for your input, I have made a note to myself to fix this when I get around to it.</p>",
        "id": 194521928,
        "sender_full_name": "Donald Sebastian Leung",
        "timestamp": 1587177814
    },
    {
        "content": "<p>Here's one on matrices (specifically, special linear groups): <a href=\"https://www.codewars.com/kata/5c930224c4661143a6666add/lean\" title=\"https://www.codewars.com/kata/5c930224c4661143a6666add/lean\">A special set of matrices with unique representation</a></p>\n<p>And one on modular arithmetic: <a href=\"https://www.codewars.com/kata/5e59626530e9d00028bbe569/lean\" title=\"https://www.codewars.com/kata/5e59626530e9d00028bbe569/lean\">Times Three, Plus Five</a> (hint: <code>interval_cases</code> will definitely be of use here ;-)</p>",
        "id": 194578605,
        "sender_full_name": "Donald Sebastian Leung",
        "timestamp": 1587270832
    },
    {
        "content": "<p>Plasmodium: <a href=\"https://www.codewars.com/kata/5d0e57ec1c5fdd000146b7d9/lean\" title=\"https://www.codewars.com/kata/5d0e57ec1c5fdd000146b7d9/lean\">Verified Horner's method</a></p>",
        "id": 194587440,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587287319
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"264734\">Donald Sebastian Leung</span> <a href=\"#narrow/stream/113488-general/topic/Invitation.20to.20join.20the.20Codewars.20Lean.20community.2C.20Round.202/near/194439268\" title=\"#narrow/stream/113488-general/topic/Invitation.20to.20join.20the.20Codewars.20Lean.20community.2C.20Round.202/near/194439268\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/Invitation.20to.20join.20the.20Codewars.20Lean.20community.2C.20Round.202/near/194425449\" title=\"#narrow/stream/113488-general/topic/Invitation.20to.20join.20the.20Codewars.20Lean.20community.2C.20Round.202/near/194425449\">said</a>:</p>\n<blockquote>\n<p>Math rendering at <a href=\"https://www.codewars.com/kata/5e997f77ea84170016600045\" title=\"https://www.codewars.com/kata/5e997f77ea84170016600045\">https://www.codewars.com/kata/5e997f77ea84170016600045</a> is painful to see. It brings back memories of the 90's.</p>\n</blockquote>\n<p>Yeah, sorry about that, I don't think Codewars supports TeX / MathJAX or similar so I had to typeset the LaTeX in an external editor, take screenshots of the rendered output, upload them onto imgur and paste the images there.</p>\n<p>There might be a way to get rid of that white background by using SVGs but I'm not all too familiar with it.</p>\n</blockquote>\n<p>png images support transparent backgrounds, which could help:<br>\n<a href=\"https://tex.stackexchange.com/questions/287481/using-latex-to-generate-png-images-of-an-equation\" title=\"https://tex.stackexchange.com/questions/287481/using-latex-to-generate-png-images-of-an-equation\">https://tex.stackexchange.com/questions/287481/using-latex-to-generate-png-images-of-an-equation</a><br>\nbut if there is dark mode and light mode in the settings, that could fail, since you either choose the text colour for the LaTeX to be black or white.</p>\n<p>Alternatively, you might be able to convert LaTeX into HTML and then put it in the page. I haven't used pandoc before, but I've heard it's a very powerful tool. Check out example 17 in this page : <a href=\"https://pandoc.org/demos.html\" title=\"https://pandoc.org/demos.html\">https://pandoc.org/demos.html</a></p>",
        "id": 194591208,
        "sender_full_name": "Mohammad Pedramfar",
        "timestamp": 1587293386
    },
    {
        "content": "<p>Converting LaTeX to HTML using pandoc or plasTeX or other heavy programs would be overkill. They simply need to use mathjax. Maybe they don't want mathjax on all their webpages but we would need to know many more details to give advice.</p>",
        "id": 194592201,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1587294814
    },
    {
        "content": "<p>Yes, MathJax is ideal and it canbe implemented with minimal hassle. Basically a few lines of code for the whole website, including the configurations.<br>\nWhat I was saying is only useful if the webpage is not changed and you can only write some html, and you can't inject javascript in the middle <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 194596351,
        "sender_full_name": "Mohammad Pedramfar",
        "timestamp": 1587300960
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/Invitation.20to.20join.20the.20Codewars.20Lean.20community.2C.20Round.202/near/194592201\" title=\"#narrow/stream/113488-general/topic/Invitation.20to.20join.20the.20Codewars.20Lean.20community.2C.20Round.202/near/194592201\">said</a>:</p>\n<blockquote>\n<p>Converting LaTeX to HTML using pandoc or plasTeX or other heavy programs would be overkill. They simply need to use mathjax. Maybe they don't want mathjax on all their webpages but we would need to know many more details to give advice.</p>\n</blockquote>\n<p>I've just checked and someone did make such a feature request back in mid-2018. Feel free to show your support by upvoting <a href=\"https://github.com/codewars/codewars.com/issues/1527\" title=\"https://github.com/codewars/codewars.com/issues/1527\">Codewars/codewars.com#1527</a> <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 194600111,
        "sender_full_name": "Donald Sebastian Leung",
        "timestamp": 1587306173
    },
    {
        "content": "<p>Prof. Buzzard your Easy Fermat kata was quite difficult.</p>",
        "id": 194600803,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587307159
    },
    {
        "content": "<p>Was it easier than Fermat's last theorem though?</p>",
        "id": 194601932,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1587308616
    },
    {
        "content": "<p>I guess</p>",
        "id": 194602119,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587308845
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span>  I've changed <code>N</code> to a natural number in my definition of the sequence limit throughout the kata series if you would like to take another look at it</p>\n<p>And thanks <span class=\"user-mention\" data-user-id=\"132175\">@Mohammad Pedramfar</span> for your amazing idea - the descriptions look a lot nicer now <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 194603250,
        "sender_full_name": "Donald Sebastian Leung",
        "timestamp": 1587310401
    },
    {
        "content": "<p>It clearly looks better.</p>",
        "id": 194603405,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1587310619
    },
    {
        "content": "<p>But I wouldn't know how to interpret those katas. What are you allowed to use from mathlib? Do you expect people redo them from scratch or crush them using the much more general versions from mathlib?</p>",
        "id": 194603442,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1587310675
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/Invitation.20to.20join.20the.20Codewars.20Lean.20community.2C.20Round.202/near/194603442\" title=\"#narrow/stream/113488-general/topic/Invitation.20to.20join.20the.20Codewars.20Lean.20community.2C.20Round.202/near/194603442\">said</a>:</p>\n<blockquote>\n<p>But I wouldn't know how to interpret those katas. What are you allowed to use from mathlib? Do you expect people redo them from scratch or crush them using the much more general versions from mathlib?</p>\n</blockquote>\n<p>Either approach is fine and there is currently no way to prevent certain parts of mathlib from being used on a per-kata basis. You may learn more about our Lean environment setup <a href=\"https://github.com/Codewars/codewars.com/wiki/Language-Lean\" title=\"https://github.com/Codewars/codewars.com/wiki/Language-Lean\">on our Wiki page</a>.</p>",
        "id": 194603578,
        "sender_full_name": "Donald Sebastian Leung",
        "timestamp": 1587310829
    },
    {
        "content": "<p>I think this is the reason why Kevin is writing less conventional katas</p>",
        "id": 194603609,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1587310895
    },
    {
        "content": "<p>BTW how easy would it be for a typical undergraduate mathematician to define \"transport lemmas\" between the general definition of a limit in mathlib and my specialized version and solve the kata by riding on results already proven in mathlib? Would it be easier than proving it from first principles?</p>",
        "id": 194603689,
        "sender_full_name": "Donald Sebastian Leung",
        "timestamp": 1587310993
    },
    {
        "content": "<p>A typical undergraduate mathematician doesn't use Lean</p>",
        "id": 194603772,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587311117
    },
    {
        "content": "<p>I think this would be hard. Shing defined a custom <code>equiv</code> and then asked a bunch of questions which were already in mathlib for <code>equiv</code> but it seemed like less work to just reprove them all than to show that eg equiv.trans implied iso.trans</p>",
        "id": 194604098,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587311527
    },
    {
        "content": "<p>The first kata I was shown was the verified Horner's rule one and the second one was tail-recursive sum. Now that I look closer the second one uses a function but even if it used a list, it would literally be \"set x = 1 in Horner's rule\" but I think it's still easier to reprove it than to use the proof of Horner's rule.</p>",
        "id": 194604290,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587311759
    },
    {
        "content": "<p>Well, probably equally easy.</p>",
        "id": 194604374,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587311830
    },
    {
        "content": "<p>Donald, the transport lemmas already exist in mathlib. Except you created a difficulty by putting a strict inequality in a non-standard place in the definition of limit.</p>",
        "id": 194605167,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1587312725
    },
    {
        "content": "<p>In analysis, the convention is to put strict inequality only where necessary.</p>",
        "id": 194605184,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1587312747
    },
    {
        "content": "<p>For instance:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">metric_space</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">instance</span><span class=\"o\">]</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">prop_decidable</span>\n\n<span class=\"n\">def</span> <span class=\"n\">lim_to_inf</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">filter</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"n\">l</span><span class=\"o\">,</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n  <span class=\"n\">lim_to_inf</span> <span class=\"n\">y</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span>\n  <span class=\"n\">lim_to_inf</span> <span class=\"n\">x</span> <span class=\"n\">l</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">l</span> <span class=\"n\">h</span> <span class=\"n\">hy</span><span class=\"o\">,</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">lim_to_inf</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">dist_eq</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">metric</span><span class=\"bp\">.</span><span class=\"n\">tendsto_at_top</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">tendsto_iff_dist_tendsto_zero</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">tendsto_of_tendsto_of_tendsto_of_le_of_le</span> <span class=\"n\">tendsto_const_nhds</span> <span class=\"n\">hy</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">dist_nonneg</span> <span class=\"o\">:</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 194605320,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1587312896
    },
    {
        "content": "<p>Shouldn't it be <code>abs (x n - l) ≤ ε</code>? <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 194605411,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587312968
    },
    {
        "content": "<p>Good point</p>",
        "id": 194605440,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1587312999
    },
    {
        "content": "<p>what on earth is \"Suppose x n ≤ l ≤ y n and lim n → ∞ ( x n − y n ) = 0 . Prove that lim n → ∞ x n = lim n → ∞ y n = l .\"?</p>",
        "id": 194610045,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587318933
    },
    {
        "content": "<p>Plasmodium: <a href=\"https://www.codewars.com/kata/5e998b42dcf07b0001581def\" title=\"https://www.codewars.com/kata/5e998b42dcf07b0001581def\">Odd + Even = Odd? Even * Anything = Even? Prove it!</a></p>",
        "id": 194628310,
        "sender_full_name": "Donald Sebastian Leung",
        "timestamp": 1587349294
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110064\">Kenny Lau</span> <a href=\"#narrow/stream/113488-general/topic/Invitation.20to.20join.20the.20Codewars.20Lean.20community.2C.20Round.202/near/194610045\" title=\"#narrow/stream/113488-general/topic/Invitation.20to.20join.20the.20Codewars.20Lean.20community.2C.20Round.202/near/194610045\">said</a>:</p>\n<blockquote>\n<p>what on earth is \"Suppose x n ≤ l ≤ y n and lim n → ∞ ( x n − y n ) = 0 . Prove that lim n → ∞ x n = lim n → ∞ y n = l .\"?</p>\n</blockquote>\n<p>I'm not sure what you're getting at, would you care to elaborate?</p>",
        "id": 194628351,
        "sender_full_name": "Donald Sebastian Leung",
        "timestamp": 1587349335
    },
    {
        "content": "<p><a href=\"https://www.codewars.com/kata/5e997f77ea84170016600045\" title=\"https://www.codewars.com/kata/5e997f77ea84170016600045\">https://www.codewars.com/kata/5e997f77ea84170016600045</a></p>",
        "id": 194628363,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587349434
    },
    {
        "content": "<p>I find it funny that in <a href=\"https://www.codewars.com/kata/599d973255342a0ce400009b\" title=\"https://www.codewars.com/kata/599d973255342a0ce400009b\">Odd + Even = Odd? Prove it!</a> they are rejecting translations of that (Haskell) kata to Coq/Lean/Agda as it is too easy. Is there a rule that katas can't be too easy?</p>",
        "id": 194628421,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587349500
    },
    {
        "content": "<p>We already have squeeze thm in <code>mathlib</code>. Is there any reason to use a different definition of the limit?</p>",
        "id": 194628431,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1587349552
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> You need to use words</p>",
        "id": 194628432,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587349553
    },
    {
        "content": "<p>the plain text version of the maths seems to be worse than the picture rendering versions</p>",
        "id": 194628473,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587349578
    },
    {
        "content": "<p>My guess is kenny is pointing out the bad formatting, but I see mathjax</p>",
        "id": 194628476,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587349586
    },
    {
        "content": "<p>oh what</p>",
        "id": 194628477,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587349593
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/Invitation.20to.20join.20the.20Codewars.20Lean.20community.2C.20Round.202/near/194628421\" title=\"#narrow/stream/113488-general/topic/Invitation.20to.20join.20the.20Codewars.20Lean.20community.2C.20Round.202/near/194628421\">said</a>:</p>\n<blockquote>\n<p>I find it funny that in <a href=\"https://www.codewars.com/kata/599d973255342a0ce400009b\" title=\"https://www.codewars.com/kata/599d973255342a0ce400009b\">Odd + Even = Odd? Prove it!</a> they are rejecting translations of that (Haskell) kata to Coq/Lean/Agda as it is too easy. Is there a rule that katas can't be too easy?</p>\n</blockquote>\n<p>It's often considered a bad idea to accept translations to languages when the difference in the difficulty between translations is significant.</p>\n<p>For example, sorting a list of numbers in ascending order would be <code>8 kyu</code> in most languages but around <code>4 kyu</code> in <a href=\"https://esolangs.org/wiki/Brainfuck\" title=\"https://esolangs.org/wiki/Brainfuck\">BF</a> so the recommended approach is to keep them two separate kata instead of making a BF translation to the existing <code>8 kyu</code></p>",
        "id": 194628491,
        "sender_full_name": "Donald Sebastian Leung",
        "timestamp": 1587349634
    },
    {
        "content": "<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/kYludeEVJ4yMh3eQqrAOulUh/2020-04-20-2.png\" title=\"/user_uploads/3121/kYludeEVJ4yMh3eQqrAOulUh/2020-04-20-2.png\"><img src=\"/user_uploads/3121/kYludeEVJ4yMh3eQqrAOulUh/2020-04-20-2.png\"></a></div>",
        "id": 194628495,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587349643
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> Looks better in my Firefox</p>",
        "id": 194628544,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1587349699
    },
    {
        "content": "<p>If I use the inspector on that piece of math, I see MathML</p>",
        "id": 194628545,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587349704
    },
    {
        "content": "<p>do you?</p>",
        "id": 194628546,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587349710
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110064\">Kenny Lau</span> <a href=\"#narrow/stream/113488-general/topic/Invitation.20to.20join.20the.20Codewars.20Lean.20community.2C.20Round.202/near/194628495\" title=\"#narrow/stream/113488-general/topic/Invitation.20to.20join.20the.20Codewars.20Lean.20community.2C.20Round.202/near/194628495\">said</a>:</p>\n<blockquote>\n<p><a href=\"/user_uploads/3121/kYludeEVJ4yMh3eQqrAOulUh/2020-04-20-2.png\" title=\"2020-04-20-2.png\">/user_uploads/3121/kYludeEVJ4yMh3eQqrAOulUh/2020-04-20-2.png</a></p>\n</blockquote>\n<p>It looks much nicer on Safari on my Mac:</p>\n<p><a href=\"/user_uploads/3121/gtIk8-w1TrYhGcPJzWhB0X21/螢幕截圖-2020-04-20-10.28.16.png\" title=\"螢幕截圖-2020-04-20-10.28.16.png\">螢幕截圖-2020-04-20-10.28.16.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/gtIk8-w1TrYhGcPJzWhB0X21/螢幕截圖-2020-04-20-10.28.16.png\" title=\"螢幕截圖-2020-04-20-10.28.16.png\"><img src=\"/user_uploads/3121/gtIk8-w1TrYhGcPJzWhB0X21/螢幕截圖-2020-04-20-10.28.16.png\"></a></div>",
        "id": 194628548,
        "sender_full_name": "Donald Sebastian Leung",
        "timestamp": 1587349722
    },
    {
        "content": "<p>it's possible that your browser doesn't support mathml</p>",
        "id": 194628549,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587349729
    },
    {
        "content": "<p>I'm using Chrome btw</p>",
        "id": 194628555,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587349753
    },
    {
        "content": "<p>(I'm on FF)</p>",
        "id": 194628556,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587349755
    },
    {
        "content": "<p>I get plain text on chromium</p>",
        "id": 194628571,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587349801
    },
    {
        "content": "<p>AFAIR google removed mathml support from chrome</p>",
        "id": 194628605,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1587349805
    },
    {
        "content": "<p>interesting</p>",
        "id": 194628608,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587349817
    },
    {
        "content": "<p>After they forked from webkit</p>",
        "id": 194628609,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1587349817
    },
    {
        "content": "<p>The reasoning sounded like \"it's half-working and we have mathjax\"</p>",
        "id": 194628617,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1587349852
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/Invitation.20to.20join.20the.20Codewars.20Lean.20community.2C.20Round.202/near/194605184\" title=\"#narrow/stream/113488-general/topic/Invitation.20to.20join.20the.20Codewars.20Lean.20community.2C.20Round.202/near/194605184\">said</a>:</p>\n<blockquote>\n<p>In analysis, the convention is to put strict inequality only where necessary.</p>\n</blockquote>\n<p>I just checked the <a href=\"https://en.wikipedia.org/wiki/Limit_of_a_sequence#Formal_definition\" title=\"https://en.wikipedia.org/wiki/Limit_of_a_sequence#Formal_definition\">formal definition of a limit according to Wikipedia</a> and it does have <code>n ≥ N</code>. I will fix my kata again shortly.</p>\n<p>As for <code>|x n - l| &lt; ε</code> vs. <code>|x n - l| ≤ ε</code>, I'll keep the former since that is what Wikipedia says (and what I have been taught in my analysis course).</p>",
        "id": 194628628,
        "sender_full_name": "Donald Sebastian Leung",
        "timestamp": 1587349891
    },
    {
        "content": "<p>And it agrees with the standard <code>nhds</code> filter</p>",
        "id": 194628669,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1587349928
    },
    {
        "content": "<p>Rather than requiring katas to state the definition of a limit a certain way or use a mathlib API that may advantage users with more library knowledge, we should have theorems proving the equivalence of mathlib's limit to a number of basic versions of it. That way you can convert your hypothesis to mathlib form in one line</p>",
        "id": 194628812,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587350254
    },
    {
        "content": "<p><a href=\"https://github.com/codewars/codewars.com/issues/1527#issuecomment-616308037\" title=\"https://github.com/codewars/codewars.com/issues/1527#issuecomment-616308037\">KaTeX support</a> has just been enabled for kata descriptions on Codewars <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 194634441,
        "sender_full_name": "Donald Sebastian Leung",
        "timestamp": 1587360523
    },
    {
        "content": "<p>Plasmodium: <a href=\"https://www.codewars.com/kata/5e10444e4225f3000123b9db\" title=\"https://www.codewars.com/kata/5e10444e4225f3000123b9db\">Duality in Boolean logic</a></p>",
        "id": 194661633,
        "sender_full_name": "Donald Sebastian Leung",
        "timestamp": 1587381883
    },
    {
        "content": "<p>Translated beta: <a href=\"https://www.codewars.com/kata/5e3c1eb312676f001eb41f1c/lean\" title=\"https://www.codewars.com/kata/5e3c1eb312676f001eb41f1c/lean\">But WHY is LEM unprovable?</a></p>",
        "id": 194727504,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587414056
    },
    {
        "content": "<p>I think you left in a bit from Coq: \"A word of advice<br>\nDon't bother going through every axiom. Use Ltac instead.\"</p>",
        "id": 194735748,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1587418011
    },
    {
        "content": "<p>You also left in an inane comment: \"You can learn more about Heyting algebra and intuitionistic logic with the help of search engines.\". Can you give me an X such that you cannot learn more about X with the help of search engines? Nobody needs to be told this nowadays, surely.</p>",
        "id": 194738656,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587419778
    },
    {
        "content": "<p>X = search engines?</p>",
        "id": 194739577,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587420426
    },
    {
        "content": "<p>Nice Goedelesque try but I'm not so sure. Anyway, in the mean time you should try my <a href=\"https://www.codewars.com/kata/5e9e1eb0a2b32800019a648a\" title=\"https://www.codewars.com/kata/5e9e1eb0a2b32800019a648a\">generalised Pell equation</a> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>x</mi><mn>2</mn></msup><mo>−</mo><mn>37</mn><msup><mi>y</mi><mn>2</mn></msup><mo>=</mo><mn>3</mn></mrow><annotation encoding=\"application/x-tex\">x^2-37y^2=3</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.897438em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.008548em;vertical-align:-0.19444em;\"></span><span class=\"mord\">3</span><span class=\"mord\">7</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">3</span></span></span></span>. </p>\n<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> you mentioned my choice of Kata questions. Elementary number theory is a great source of questions which are easy to state but can be very hard to prove. I am just trying to come up with kata for which you have to know some number theory techniques in order to do the maths, and then there's still a challenge of formalising it in Lean within the time limit (16 seconds sounds like a lot but I am not convinced that their test servers have got too many cores...).</p>",
        "id": 194740379,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587421037
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113488-general/topic/Invitation.20to.20join.20the.20Codewars.20Lean.20community.2C.20Round.202/near/194739577\" title=\"#narrow/stream/113488-general/topic/Invitation.20to.20join.20the.20Codewars.20Lean.20community.2C.20Round.202/near/194739577\">said</a>:</p>\n<blockquote>\n<p>X = search engines?</p>\n</blockquote>\n<p>To be fair, you can learn more about search engines using search engines</p>",
        "id": 194746563,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587426341
    },
    {
        "content": "<p>If I learned anything from the IT Crowd it's that you'd don't want to type Google in Google</p>",
        "id": 194747269,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1587426995
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> To be honest I feel a bit trolled by your katas. It's probably a difference in mentality, but I almost never do formal maths problems where I don't already more or less know the answer in regular maths. For me the interesting challenge is in figuring out how to structure that understanding into something that the computer will like. In programming katas I would think it is the same way; you are given a task, and you the programmer don't have any trouble understanding the task but your job is making the computer understand it too.</p>\n<p>With your maths puzzles, it's more like solving a Putnam problem, followed by a formalization problem. Which is fine as far as it goes, but somehow doesn't feel like \"what I signed up for\". My ability to come up with a good formal proof now depends on also coming up with the right mathematics, and here I don't think I can beat the many hundreds of years of effort already spent in this direction by others. Now I'm sure that most of this is your intent, I know you like maths puzzles like this, but I wonder whether it would be better to offer a solution or at least a pointer to where someone can learn the necessary tricks to solve the maths part of the problem to return the focus to the coding part (on a site like Codewars).</p>",
        "id": 194749199,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587428715
    },
    {
        "content": "<p>Here's an <a href=\"https://www.codewars.com/kata/5e9e9f39c58d260016b53116\" title=\"https://www.codewars.com/kata/5e9e9f39c58d260016b53116\">easy kata on continuous functions</a></p>",
        "id": 194768494,
        "sender_full_name": "Donald Sebastian Leung",
        "timestamp": 1587454038
    },
    {
        "content": "<p>Mario I completely agree with what you're saying, it is not at all clear how to do these hard number theory questions in maths. The reason I'm setting them is simply because as someone with a background in number theory and in Olympiad training as well as some Lean knowledge I am in a good position to be able to write Kata of this form. I can quite imagine that people like you will find them extremely hard for non-lean reasons but fortunately there are 40 Lean Kata out there not set by me and you can stick to them. I'm just offering something completely different because I know there are professional mathematicians out there who look at Putnam and IMO problems when they come out, and might be tempted to look at these too. You can often find the maths solutions by googling, and for the ones you can't perhaps a stackexchange question will appear or whatever. I'm intentionally offering something different, intended to appeal to different people to the usual.</p>",
        "id": 194770499,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587455704
    },
    {
        "content": "<p>By the way, I didn't want to suggest that I can't do them, I have some math competition background too ;) But I would not be surprised if your kata have extremely low solve rates, because you are probably targeting the wrong audience (which is to say, a different audience than the one that frequents the Codewars site).</p>",
        "id": 194771375,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587456296
    },
    {
        "content": "<p>I was specifically aiming for low solve rates</p>",
        "id": 194771577,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587456456
    },
    {
        "content": "<p>I have already been moaning on Twitter that someone other than me solved the 5^5^5^5^5 question</p>",
        "id": 194771667,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587456514
    },
    {
        "content": "<p>indeed, you might even be targeting a demographic that almost doesn't exist, namely people who are good at both maths and theorem provers</p>",
        "id": 194771684,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587456534
    },
    {
        "content": "<p>That's exactly what I'm doing</p>",
        "id": 194771707,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587456549
    },
    {
        "content": "<p>I totally agree that if I were the only person setting Lean Kata then this would be a terrible idea</p>",
        "id": 194771747,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587456580
    },
    {
        "content": "<p>is this a job application in disguise? :D</p>",
        "id": 194771802,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587456610
    },
    {
        "content": "<p>But to be honest the kind of Kata that annoy me are the ones which have no maths in at all beyond elementary school but which you can't solve with dec_trivial because it takes too long. There are far far more of these</p>",
        "id": 194771876,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587456692
    },
    {
        "content": "<p>I have no interest in algorithms</p>",
        "id": 194771899,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587456715
    },
    {
        "content": "<p>I think you and I Mario understand each other's interests quite well and we also are both very clear about where we diverge.</p>",
        "id": 194771977,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587456762
    },
    {
        "content": "<p>I'm not a big fan of problems that boil down to a large search. I think people gravitate to these because they think that's what computers are good for</p>",
        "id": 194771982,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587456768
    },
    {
        "content": "<p>I am happy to solve those in a CAS and worry about proving correctness of the CAS later</p>",
        "id": 194772040,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587456823
    },
    {
        "content": "<p>I guess as a side comment, my kata statements would be trivial to translate into e.g. Coq, but to get them onto Codewars you'll have to offer a Coq solution so you'll have to find a Coq version of me, and encouraging a Coq version of me to exist would be something else that I'd consider a step in the right direction.</p>",
        "id": 194772628,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587457257
    },
    {
        "content": "<p>As well as aiming for low solve rates I'm aiming to make a broader class of Kata than I'm seeing in the other languages</p>",
        "id": 194773383,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587457787
    },
    {
        "content": "<p>I see that we now have 51 Lean Kata in total.</p>\n<p>I saw someone moaning (on the codewars gitter chat maybe?) a week or two ago that it was silly to support all these obscure beta languages which had &lt; 100 kata, and at the time it occurred to me that perhaps Lean would end up as one of those languages. But 50 is a respectable number and it would be great to get it up to 100. If anyone has any quirky little maths questions which they have solved themselves in Lean and would like to see as a kata, they should feel free to get in touch with me and I can stick it up on the site and give them attribution. I am typically solving one kata a day at the minute, in the evenings after my day job is done; yesterday I proved that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi><msub><mi>L</mi><mn>2</mn></msub><mo stretchy=\"false\">(</mo><mi mathvariant=\"double-struck\">N</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">SL_2(\\mathbb{N})</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord\"><span class=\"mord mathdefault\">L</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathbb\">N</span></span><span class=\"mclose\">)</span></span></span></span> was a free monoid on 2 generators in Lean (modulo an application of Euclid's algorithm which is left implicit in the question).</p>",
        "id": 195030254,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587629992
    },
    {
        "content": "<p>I just saw on Twitter that (a) Coq just moved from beta to stable in codewars, (b) Coq has been on Codewars for nearly a year and (c) they have 74 Coq kata in total.</p>",
        "id": 195068403,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587651990
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243312\">@Jason KY.</span> I published your kata on limits of sequences in a metric space <a href=\"https://www.codewars.com/kata/5ea1f341014f0c0001ec7c5e\" title=\"https://www.codewars.com/kata/5ea1f341014f0c0001ec7c5e\">here</a>. It was more of a hassle than I had expected: I needed to do a <code>letI</code> dance in <code>Preloaded</code>, and an <code>@</code> dance in the test case, because the question involved a typeclass.</p>",
        "id": 195112346,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587672142
    },
    {
        "content": "<p>Thank you for publishing it! :D</p>",
        "id": 195112467,
        "sender_full_name": "Jason KY.",
        "timestamp": 1587672222
    },
    {
        "content": "<p>Wow so we just had a flood of Lean kata getting approved - the total number of approved Lean kata skyrocketed from about 25 to 36 (and still increasing) <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 195264921,
        "sender_full_name": "Donald Sebastian Leung",
        "timestamp": 1587784272
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"264734\">@Donald Sebastian Leung</span> what do we need to get out of beta?</p>",
        "id": 195274380,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587802845
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"264734\">Donald Sebastian Leung</span> <a href=\"#narrow/stream/113488-general/topic/Invitation.20to.20join.20the.20Codewars.20Lean.20community.2C.20Round.202/near/193868443\" title=\"#narrow/stream/113488-general/topic/Invitation.20to.20join.20the.20Codewars.20Lean.20community.2C.20Round.202/near/193868443\">said</a>:</p>\n<blockquote>\n<p>Generally, the number of satisfaction votes, rank assessments as well as the satisfaction rating required for a Beta kata to leave Beta decreases as 1) the average assessed rank of the kata is higher and 2) you get more and more kata approved. For example, if you currently have &lt; 10 approved kata and the average assessed rank of your Beta kata is in the <code>7-8 kyu</code> range then it will require 12 (satisfaction + ranking) votes with a satisfaction rating of &gt;= 80% in order to be eligible to leave Beta, but if its average assessed rank is <code>1-2 kyu</code> then it only requires 5 votes and &gt;= 70% satisfaction to leave Beta.</p>\n<p>You may learn more about the <a href=\"https://github.com/codewars/codewars.com/wiki/Kata-Beta-Process\" title=\"https://github.com/codewars/codewars.com/wiki/Kata-Beta-Process\">Beta Process</a> on our Wiki; specifically, the <a href=\"https://github.com/codewars/codewars.com/wiki/Kata-Beta-Process#kata-approval\" title=\"https://github.com/codewars/codewars.com/wiki/Kata-Beta-Process#kata-approval\">kata approval requirements</a>.</p>\n</blockquote>",
        "id": 195274439,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587802924
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> also Donald and I's votes count 4 times</p>",
        "id": 195274446,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587802973
    },
    {
        "content": "<p>(I still haven't figured out whether it's \"Donald and I's\" or \"Donald's and my\"</p>",
        "id": 195274457,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587802992
    },
    {
        "content": "<p>That's the beta for a Kata, not a Language?</p>",
        "id": 195274458,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1587802993
    },
    {
        "content": "<p>oh, I misunderstood</p>",
        "id": 195274459,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587803000
    },
    {
        "content": "<p>Coq just got out of beta with 76 Kata, it took them a year</p>",
        "id": 195274581,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587803187
    },
    {
        "content": "<p>I was wondering whether the year was because it takes a year to get out of beta or because it took them a year to get 76 kata</p>",
        "id": 195274588,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587803223
    },
    {
        "content": "<p>Given a (rather long) kata solution that takes more than 16s to compile, how might I go about optimizing it? Is there a tool that would show me how much time is spent compiling each step?</p>",
        "id": 195275126,
        "sender_full_name": "David Wärn",
        "timestamp": 1587804209
    },
    {
        "content": "<p><code>set_option profiler true</code></p>",
        "id": 195275251,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1587804440
    },
    {
        "content": "<p>My solution to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∣</mi><msup><mi>R</mi><mo>×</mo></msup><mi mathvariant=\"normal\">∣</mi><mo>=</mo><mn>5</mn></mrow><annotation encoding=\"application/x-tex\">|R^\\times|=5</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.021331em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.771331em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">×</span></span></span></span></span></span></span></span><span class=\"mord\">∣</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">5</span></span></span></span> took more than 16 seconds to compile so I just gave up and decided to wait to see if there was a rule change :-) Kenny is the master of speeding solutions up.</p>",
        "id": 195275252,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587804441
    },
    {
        "content": "<p>in short: don't use <code>simp</code>, don't use <code>ring</code>, etc</p>",
        "id": 195275300,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587804510
    },
    {
        "content": "<p>and optimize the \"proof tree\"</p>",
        "id": 195275334,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587804571
    },
    {
        "content": "<p>you can send me the code in DM and i can optimize it when i am free and willing</p>",
        "id": 195275342,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587804593
    },
    {
        "content": "<p>It's a dismal process. I have a kata proof in another window which is taking a long time, and the only way I will be able to speed it up is to replace 10 applications of <code>linarith</code> with <code>rw sub_lt_iff_lt_add</code> or whatever; I usually cannot be bothered to do this because for me this is anti-(the whole point of linarith).</p>",
        "id": 195275456,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587804759
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/Invitation.20to.20join.20the.20Codewars.20Lean.20community.2C.20Round.202/near/195275252\" title=\"#narrow/stream/113488-general/topic/Invitation.20to.20join.20the.20Codewars.20Lean.20community.2C.20Round.202/near/195275252\">said</a>:</p>\n<blockquote>\n<p>My solution to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∣</mi><msup><mi>R</mi><mo>×</mo></msup><mi mathvariant=\"normal\">∣</mi><mo>=</mo><mn>5</mn></mrow><annotation encoding=\"application/x-tex\">|R^\\times|=5</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.021331em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.771331em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">×</span></span></span></span></span></span></span></span><span class=\"mord\">∣</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">5</span></span></span></span> took more than 16 seconds to compile so I just gave up and decided to wait to see if there was a rule change :-) Kenny is the master of speeding solutions up.</p>\n</blockquote>\n<p>I'm good at it because I have to</p>",
        "id": 195275481,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587804837
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/Invitation.20to.20join.20the.20Codewars.20Lean.20community.2C.20Round.202/near/195274588\" title=\"#narrow/stream/113488-general/topic/Invitation.20to.20join.20the.20Codewars.20Lean.20community.2C.20Round.202/near/195274588\">said</a>:</p>\n<blockquote>\n<p>I was wondering whether the year was because it takes a year to get out of beta or because it took them a year to get 76 kata</p>\n</blockquote>\n<p>Unlike the kata approval process, there's no hard rule on when a language leaves Beta on Codewars. In fact, just not too long ago, <a href=\"https://github.com/codewars/codewars.com/issues/2001#issuecomment-585037330\" title=\"https://github.com/codewars/codewars.com/issues/2001#issuecomment-585037330\">kazk admitted that many languages were stuck in Beta for way too long since there wasn't much space left on the landing page</a>.</p>\n<p>Anyway, considering the rate at which Lean content is being added to Codewars (which is much faster than Coq by the way due to the active participation by the Lean community here, well done!), I think it shouldn't take a year before I can convince kazk that Lean is ready to move out of Beta - a few months (at most) should suffice.</p>",
        "id": 195277410,
        "sender_full_name": "Donald Sebastian Leung",
        "timestamp": 1587808117
    },
    {
        "content": "<p>beta: <a href=\"https://www.codewars.com/kata/5ea443f79decd50033ace790/lean\" title=\"https://www.codewars.com/kata/5ea443f79decd50033ace790/lean\">Index 2 subgroup is normal</a></p>",
        "id": 195286428,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587823675
    },
    {
        "content": "<p><a href=\"https://www.codewars.com/kata/5ea4167a676dc90033f0b5f3\" title=\"https://www.codewars.com/kata/5ea4167a676dc90033f0b5f3\">0.999... = 1? Prove it!</a> was supposed to be <em>the</em> introductory kata to my mathematical analysis kata collection, but somehow ended up being the last one to be published <span aria-label=\"stuck out tongue\" class=\"emoji emoji-1f61d\" role=\"img\" title=\"stuck out tongue\">:stuck_out_tongue:</span> </p>\n<p>Anyway, I think I've authored enough Lean kata for now</p>",
        "id": 195287988,
        "sender_full_name": "Donald Sebastian Leung",
        "timestamp": 1587826274
    },
    {
        "content": "<p>/me switches from kata authoring mode to kata solving mode</p>",
        "id": 195287991,
        "sender_full_name": "Donald Sebastian Leung",
        "timestamp": 1587826291
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110064\">Kenny Lau</span> <a href=\"#narrow/stream/113488-general/topic/Invitation.20to.20join.20the.20Codewars.20Lean.20community.2C.20Round.202/near/195286428\" title=\"#narrow/stream/113488-general/topic/Invitation.20to.20join.20the.20Codewars.20Lean.20community.2C.20Round.202/near/195286428\">said</a>:</p>\n<blockquote>\n<p>beta: <a href=\"https://www.codewars.com/kata/5ea443f79decd50033ace790/lean\" title=\"https://www.codewars.com/kata/5ea443f79decd50033ace790/lean\">Index 2 subgroup is normal</a></p>\n</blockquote>\n<p>Could we have this in mathlib? :)</p>",
        "id": 195288254,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1587826690
    },
    {
        "content": "<p>Nope... that would be a spoiler.</p>",
        "id": 195288351,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587826893
    },
    {
        "content": "<p>PSA: <a href=\"https://github.com/codewars/codewars-runner-cli/issues/803#event-3278247137\" title=\"https://github.com/codewars/codewars-runner-cli/issues/803#event-3278247137\">The time limit for Lean on Codewars has been extended to 20s</a></p>",
        "id": 195495868,
        "sender_full_name": "Donald Sebastian Leung",
        "timestamp": 1588040425
    },
    {
        "content": "<p>Time to try my collection of solutions which time out :-)</p>",
        "id": 195523394,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588055611
    },
    {
        "content": "<p>beta: <a href=\"https://www.codewars.com/kata/5ea8056e449f540001a2dab2/lean\" title=\"https://www.codewars.com/kata/5ea8056e449f540001a2dab2/lean\">Group Is Not Union Of Two Proper Subgroups</a></p>",
        "id": 195544530,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588069944
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/Invitation.20to.20join.20the.20Codewars.20Lean.20community.2C.20Round.202/near/195274380\" title=\"#narrow/stream/113488-general/topic/Invitation.20to.20join.20the.20Codewars.20Lean.20community.2C.20Round.202/near/195274380\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"264734\">Donald Sebastian Leung</span> what do we need to get out of beta?</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> I've just got <a href=\"https://gitter.im/Codewars/codewars.com?at=5ea8667c7a24ff01b0ebb012\" title=\"https://gitter.im/Codewars/codewars.com?at=5ea8667c7a24ff01b0ebb012\">a definitive reply from kazk</a>: (s)he is willing to consider moving Lean out of Beta early if we manage to get 50 approved kata (currently 38).</p>",
        "id": 195651736,
        "sender_full_name": "Donald Sebastian Leung",
        "timestamp": 1588125591
    },
    {
        "content": "<blockquote>\n<p>I still feel it's too early. But if you (and the Lean community) believe it's ready, maybe after 50 approved kata.</p>\n</blockquote>",
        "id": 195652018,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588125813
    },
    {
        "content": "<p>that sounds anything but definitive.</p>",
        "id": 195652033,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588125823
    },
    {
        "content": "<p>also what about all other languages with 50 approved kata</p>",
        "id": 195652189,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588125983
    },
    {
        "content": "<p>What does beta status mean on Codewars? What's going to happen when Lean 4 comes out to these kata?</p>",
        "id": 195653894,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1588128362
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110025\">@Andrew Ashworth</span> It's basically a state of a language where it may still have bugs and is not yet a primary language on CW.</p>",
        "id": 195656000,
        "sender_full_name": "Steffan",
        "timestamp": 1588130878
    },
    {
        "content": "<blockquote>\n<p>beta: Index 2 subgroup is normal</p>\n</blockquote>\n<p>beta: <a href=\"https://www.codewars.com/kata/5eaa05ce96ed2500292a6d29/lean\" title=\"https://www.codewars.com/kata/5eaa05ce96ed2500292a6d29/lean\">n(n+1)(4n-1)/6</a></p>",
        "id": 195837160,
        "sender_full_name": "Steffan",
        "timestamp": 1588252823
    },
    {
        "content": "<p>Now not beta, thanks to Voile :)</p>",
        "id": 195841548,
        "sender_full_name": "Steffan",
        "timestamp": 1588254806
    },
    {
        "content": "<p>wow that's the fastest any kata has gone from beta</p>",
        "id": 195841749,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588254886
    },
    {
        "content": "<p>I published it last night tho</p>",
        "id": 195841789,
        "sender_full_name": "Steffan",
        "timestamp": 1588254912
    },
    {
        "content": "<p>still, that was fast</p>",
        "id": 195841960,
        "sender_full_name": "Steffan",
        "timestamp": 1588254980
    },
    {
        "content": "<p>now there's 40 approved lean kata</p>",
        "id": 195842881,
        "sender_full_name": "Steffan",
        "timestamp": 1588255348
    },
    {
        "content": "<p>uh oh, you reacted in the wrong order, it's 0 4 instead of 40. ;)</p>",
        "id": 195845035,
        "sender_full_name": "Steffan",
        "timestamp": 1588256213
    },
    {
        "content": "<p>10 more to go</p>",
        "id": 195845140,
        "sender_full_name": "Steffan",
        "timestamp": 1588256258
    },
    {
        "content": "<p>I should make some easier ones. I'll have a go this weekend</p>",
        "id": 195845312,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588256330
    },
    {
        "content": "<p>but you haven't solved mine yet :o</p>",
        "id": 195845372,
        "sender_full_name": "Steffan",
        "timestamp": 1588256355
    },
    {
        "content": "<p>I wanted to make some stupidly hard ones but if the aim is to get to 50 then perhaps now is the time for some mathematically simpler ones. Which one is yours? The 4n-1 one? I am cautiously optimistic I can do it</p>",
        "id": 195845604,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588256437
    },
    {
        "content": "<p>Yes, the 4n-1 ones is mine</p>",
        "id": 195845945,
        "sender_full_name": "Steffan",
        "timestamp": 1588256575
    },
    {
        "content": "<p>Are very hard katas allowed, like</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">collatz</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"err\">%</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"n\">n</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"k\">else</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">not_so_easy</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">collatz</span><span class=\"bp\">^</span><span class=\"o\">[</span><span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>",
        "id": 195846252,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1588256683
    },
    {
        "content": "<p>how is my subgroup union not out of beta</p>",
        "id": 195846276,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588256692
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> you need to be able to solve it yourself</p>",
        "id": 195846308,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588256704
    },
    {
        "content": "<p>It doesn't have enough solves, so it's not approvable</p>",
        "id": 195846346,
        "sender_full_name": "Steffan",
        "timestamp": 1588256728
    },
    {
        "content": "<p>I can solve it, but it doesn't fit in this tiny 16s margin.</p>",
        "id": 195846357,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1588256735
    },
    {
        "content": "<p>20s</p>",
        "id": 195846379,
        "sender_full_name": "Steffan",
        "timestamp": 1588256746
    },
    {
        "content": "<p>Even 20s would not be enough for my solution :)</p>",
        "id": 195846452,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1588256762
    },
    {
        "content": "<p>I can resolve it in aleph_null seconds, maybe we should ask for a time extension</p>",
        "id": 195849570,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588258049
    },
    {
        "content": "<p><code>def collatz' (n : ℕ) : ℕ := if (n % 2) = 1 then n/2 else (3 * n + 1)</code> Maybe this one is easier?</p>",
        "id": 195849742,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588258119
    },
    {
        "content": "<p>It already was extended to 20s</p>",
        "id": 195850736,
        "sender_full_name": "Steffan",
        "timestamp": 1588258542
    },
    {
        "content": "<p>unfortunately I'm not sure they'll let us go as far as aleph_null</p>",
        "id": 195850988,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588258622
    },
    {
        "content": "<p>what's that?</p>",
        "id": 195851121,
        "sender_full_name": "Steffan",
        "timestamp": 1588258673
    },
    {
        "content": "<p>is it infinite time I guess? <code>ℵ0</code></p>",
        "id": 195852016,
        "sender_full_name": "Steffan",
        "timestamp": 1588258968
    },
    {
        "content": "<p><a href=\"https://en.wikipedia.org/wiki/Aleph_number#Aleph-naught\" title=\"https://en.wikipedia.org/wiki/Aleph_number#Aleph-naught\">https://en.wikipedia.org/wiki/Aleph_number#Aleph-naught</a></p>",
        "id": 195852074,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588258993
    },
    {
        "content": "<p>\"infinity\" is such an imprecise term</p>",
        "id": 195852166,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588259026
    },
    {
        "content": "<p>You should really be using ordinals for the runtime of your transfinite computations.</p>",
        "id": 195852437,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588259117
    },
    {
        "content": "<p>is it possible to make \"prove <code> example {p : Prop} : ¬¬¬p → ¬p </code> without classical reasoning\" a kata? maybe by disallowing certain imports?</p>",
        "id": 195857617,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588261057
    },
    {
        "content": "<p>If codewars can do <code>#print axioms SOLUTION</code> and inspect the result...</p>",
        "id": 195857812,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588261139
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/Invitation.20to.20join.20the.20Codewars.20Lean.20community.2C.20Round.202/near/195857812\" title=\"#narrow/stream/113488-general/topic/Invitation.20to.20join.20the.20Codewars.20Lean.20community.2C.20Round.202/near/195857812\">said</a>:</p>\n<blockquote>\n<p>If codewars can do <code>#print axioms SOLUTION</code> and inspect the result...</p>\n</blockquote>\n<p>okay, I think the answer to that is yes, and if so <span class=\"user-mention\" data-user-id=\"264734\">@Donald Sebastian Leung</span>  would know how to do it</p>",
        "id": 195857947,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588261197
    },
    {
        "content": "<p>or... we can build a proposition logic system</p>",
        "id": 195859185,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588261690
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"252300\">Jalex Stark</span> <a href=\"#narrow/stream/113488-general/topic/Invitation.20to.20join.20the.20Codewars.20Lean.20community.2C.20Round.202/near/195857617\" title=\"#narrow/stream/113488-general/topic/Invitation.20to.20join.20the.20Codewars.20Lean.20community.2C.20Round.202/near/195857617\">said</a>:</p>\n<blockquote>\n<p>is it possible to make \"prove <code> example {p : Prop} : ¬¬¬p → ¬p </code> without classical reasoning\" a kata? maybe by disallowing certain imports?</p>\n</blockquote>\n<p>We deliberately made the Lean setup very simple and allow the usual mathematical axioms without restriction since we were told that mathematicians do not even consider the use of non-constructive axioms something worth mentioning about. If you want to author a Lean kata where these axioms matter then someone will have to implement a proper testing framework for Lean like what monadius did for Coq. This (adding a dedicated testing framework now) would also mean that the Beta phase for Lean itself on CW will most definitely have to be extended in order to allow sufficient time for us to detect and fix any errors in the testing framework so just having 50 approved kata will no longer cut it.</p>",
        "id": 195864283,
        "sender_full_name": "Donald Sebastian Leung",
        "timestamp": 1588263787
    },
    {
        "content": "<p>An alternative would simply be to author this kata in Coq instead, where we do already have a proper testing framework for specifying allowed axioms on a per-kata basis. But, no offense, I doubt the Coq community on CW would welcome such an exercise given that it can be solved using a simple <code>tauto</code>.</p>",
        "id": 195864526,
        "sender_full_name": "Donald Sebastian Leung",
        "timestamp": 1588263898
    },
    {
        "content": "<p>Aren't you already testing that proofs don't include bad axioms?</p>",
        "id": 195864571,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588263925
    },
    {
        "content": "<p>Yes, but for our current Lean setup, the set of allowed axioms is hardcoded so it cannot be customized on a per-kata basis.</p>",
        "id": 195864779,
        "sender_full_name": "Donald Sebastian Leung",
        "timestamp": 1588264001
    },
    {
        "content": "<p>You can't have infinite time, because if you did, then if you had an infinite loop, it would never stop running. It is inside a Docker image so it shouldn't be too hard to terminate, but it makes extra work. Who knows, you might crash Docker or something.</p>",
        "id": 195868032,
        "sender_full_name": "Steffan",
        "timestamp": 1588265284
    },
    {
        "content": "<p>Steffan, there really mean infinite here. Arbitrarily long is not enough.</p>",
        "id": 195868226,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588265365
    },
    {
        "content": "<p>No, I mean that on CW, it wouldn't really work to have infinite time for the reason I explained.</p>",
        "id": 195868495,
        "sender_full_name": "Steffan",
        "timestamp": 1588265464
    },
    {
        "content": "<p>I think that my proposed proof of Collatz (\"check all cases\") has several other issues as well as the limitations of CW.</p>",
        "id": 195874451,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588268123
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"297433\">Steffan</span> <a href=\"#narrow/stream/113488-general/topic/Invitation.20to.20join.20the.20Codewars.20Lean.20community.2C.20Round.202/near/195868495\" title=\"#narrow/stream/113488-general/topic/Invitation.20to.20join.20the.20Codewars.20Lean.20community.2C.20Round.202/near/195868495\">said</a>:</p>\n<blockquote>\n<p>No, I mean that on CW, it wouldn't really work to have infinite time for the reason I explained.</p>\n</blockquote>\n<p>Yes, I think everyone in this discussion understood that codewars can't support infinite time solutions, and this was proposed as a joke.</p>",
        "id": 195880647,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588270914
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"264734\">Donald Sebastian Leung</span> <a href=\"#narrow/stream/113488-general/topic/Invitation.20to.20join.20the.20Codewars.20Lean.20community.2C.20Round.202/near/195864526\" title=\"#narrow/stream/113488-general/topic/Invitation.20to.20join.20the.20Codewars.20Lean.20community.2C.20Round.202/near/195864526\">said</a>:</p>\n<blockquote>\n<p>An alternative would simply be to author this kata in Coq instead, where we do already have a proper testing framework for specifying allowed axioms on a per-kata basis. But, no offense, I doubt the Coq community on CW would welcome such an exercise given that it can be solved using a simple <code>tauto</code>.</p>\n</blockquote>\n<p>Sad! I will give up on making this a kata. I will still tell students to do this exercise. I think it's a good example of how \"follow your nose with the tactics you know\" can result in Lean teaching you something new.</p>",
        "id": 195881396,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588271214
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110064\">Kenny Lau</span> <a href=\"#narrow/stream/113488-general/topic/Invitation.20to.20join.20the.20Codewars.20Lean.20community.2C.20Round.202/near/195859185\" title=\"#narrow/stream/113488-general/topic/Invitation.20to.20join.20the.20Codewars.20Lean.20community.2C.20Round.202/near/195859185\">said</a>:</p>\n<blockquote>\n<p>or... we can build a proposition logic system</p>\n</blockquote>\n<p>Hmm. So the solution I have in mind for a beginner who follows their nose is like this</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"bp\">¬</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n<span class=\"c1\">-- your goal is an implication, so intro stuff</span>\n<span class=\"n\">intros</span> <span class=\"n\">h</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n<span class=\"c1\">-- you&#39;ve only got one lemma, so apply it</span>\n<span class=\"n\">apply</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"c1\">-- again, your goal is an implication, so intro stuff</span>\n<span class=\"n\">intro</span> <span class=\"n\">hnp</span><span class=\"o\">,</span>\n<span class=\"c1\">-- now we&#39;ve got a contradiction in our hypotheses!</span>\n<span class=\"n\">exact</span> <span class=\"n\">hnp</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 195882513,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588271664
    },
    {
        "content": "<p>I'm having a hard time imagining making my own propositional logic such that the proof can be found through essentially the same \"follow your nose\" algorithm</p>",
        "id": 195882609,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588271718
    },
    {
        "content": "<p>Why can't it be a kata anyway? Just make it a low difficulty kata</p>",
        "id": 195882635,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588271738
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/Invitation.20to.20join.20the.20Codewars.20Lean.20community.2C.20Round.202/near/195882635\" title=\"#narrow/stream/113488-general/topic/Invitation.20to.20join.20the.20Codewars.20Lean.20community.2C.20Round.202/near/195882635\">said</a>:</p>\n<blockquote>\n<p>Why can't it be a kata anyway? Just make it a low difficulty kata</p>\n</blockquote>\n<p>I guess as a beginner you could have the experience of submitting a classical proof and then being surprised that others did it without <code>by_cases</code> or <code>not_not</code> or whatever you used. (and I guess also learning that tauto exists)</p>",
        "id": 195882859,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588271825
    },
    {
        "content": "<p>Just say in the rules for the kata that it should be intuitionistic, and optionally say that you won't be marked off for using a classical proof</p>",
        "id": 195882966,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588271875
    },
    {
        "content": "<p>Is this table accurate? It says that one needs 300 honor to propose kata <a href=\"https://airtable.com/embed/shrDt7USqZ7GStRb0/tblk0mEQbDl3JWQrT/viwdZcVcThJKTXyuB?blocks=hide\" title=\"https://airtable.com/embed/shrDt7USqZ7GStRb0/tblk0mEQbDl3JWQrT/viwdZcVcThJKTXyuB?blocks=hide\">https://airtable.com/embed/shrDt7USqZ7GStRb0/tblk0mEQbDl3JWQrT/viwdZcVcThJKTXyuB?blocks=hide</a></p>",
        "id": 195902363,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588281255
    },
    {
        "content": "<p>Yes, that's correctr.</p>",
        "id": 195905261,
        "sender_full_name": "Steffan",
        "timestamp": 1588282715
    },
    {
        "content": "<p>I recommend the CW wiki tho: <a href=\"https://github.com/codewars/codewars.com/wiki/Privileges\" title=\"https://github.com/codewars/codewars.com/wiki/Privileges\">https://github.com/codewars/codewars.com/wiki/Privileges</a></p>",
        "id": 195905555,
        "sender_full_name": "Steffan",
        "timestamp": 1588282908
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"297433\">Steffan</span> <a href=\"#narrow/stream/113488-general/topic/Invitation.20to.20join.20the.20Codewars.20Lean.20community.2C.20Round.202/near/195905555\" title=\"#narrow/stream/113488-general/topic/Invitation.20to.20join.20the.20Codewars.20Lean.20community.2C.20Round.202/near/195905555\">said</a>:</p>\n<blockquote>\n<p>I recommend the CW wiki tho: <a href=\"https://github.com/codewars/codewars.com/wiki/Privileges\" title=\"https://github.com/codewars/codewars.com/wiki/Privileges\">https://github.com/codewars/codewars.com/wiki/Privileges</a></p>\n</blockquote>\n<p>Thanks! It's anybody's guess why : 1. the thing I linked is public 2. google brought me there instead of here</p>",
        "id": 195906671,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588283479
    },
    {
        "content": "<p>I blitzed a bunch of Lean kata to get to 300 -- Kenny blitzed a bunch of python kata. It didn't take long. Don't bother with 8 kyu stuff, the smaller kyu problems give you far more honor</p>",
        "id": 195912676,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588287493
    },
    {
        "content": "<p>yeah I think I will do the python route. The harder kata are hard for me :P</p>",
        "id": 195915132,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588289321
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/Invitation.20to.20join.20the.20Codewars.20Lean.20community.2C.20Round.202/near/194740379\" title=\"#narrow/stream/113488-general/topic/Invitation.20to.20join.20the.20Codewars.20Lean.20community.2C.20Round.202/near/194740379\">said</a>:</p>\n<blockquote>\n<p>Nice Goedelesque try but I'm not so sure. Anyway, in the mean time you should try my <a href=\"https://www.codewars.com/kata/5e9e1eb0a2b32800019a648a\" title=\"https://www.codewars.com/kata/5e9e1eb0a2b32800019a648a\">generalised Pell equation</a> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>x</mi><mn>2</mn></msup><mo>−</mo><mn>37</mn><msup><mi>y</mi><mn>2</mn></msup><mo>=</mo><mn>3</mn></mrow><annotation encoding=\"application/x-tex\">x^2-37y^2=3</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.897438em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.008548em;vertical-align:-0.19444em;\"></span><span class=\"mord\">3</span><span class=\"mord\">7</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">3</span></span></span></span>. </p>\n</blockquote>\n<p>Do you expect the traditional way of solving Pell equations (I mean, bringing it back to a bounded domain by multiplication by a fundamental unit, and then case bashing there), or is there a trick for this one?</p>",
        "id": 195941405,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1588322371
    },
    {
        "content": "<p>I did it the way you are suggesting. I know of no other way. 3 splits into two non-principal primes.</p>",
        "id": 195945859,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588326650
    },
    {
        "content": "<p>for the 0.999... = 1 kata I am stuck on this confusing error (omitting some potential spoiler state). I tried turning off <code>pp.notation</code> to check the terms but they really are syntactically equal</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"mi\">33</span><span class=\"o\">:</span><span class=\"mi\">3</span><span class=\"o\">:</span> <span class=\"n\">rewrite</span> <span class=\"n\">tactic</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">did</span> <span class=\"n\">not</span> <span class=\"n\">find</span> <span class=\"kn\">instance</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">pattern</span> <span class=\"k\">in</span> <span class=\"n\">the</span> <span class=\"n\">target</span> <span class=\"n\">expression</span>\n  <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"mi\">9</span> <span class=\"bp\">/</span> <span class=\"mi\">10</span> <span class=\"bp\">*</span> <span class=\"n\">geom_series</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">10</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span>\n<span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span>\n<span class=\"err\">⊢</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"mi\">9</span> <span class=\"bp\">/</span> <span class=\"mi\">10</span> <span class=\"bp\">*</span> <span class=\"n\">geom_series</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">10</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span>\n</code></pre></div>",
        "id": 195953965,
        "sender_full_name": "Matt Earnshaw",
        "timestamp": 1588334178
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"247064\">Matt Earnshaw</span> <a href=\"#narrow/stream/113488-general/topic/Invitation.20to.20join.20the.20Codewars.20Lean.20community.2C.20Round.202/near/195953965\" title=\"#narrow/stream/113488-general/topic/Invitation.20to.20join.20the.20Codewars.20Lean.20community.2C.20Round.202/near/195953965\">said</a>:</p>\n<blockquote>\n<p>for the 0.999... = 1 kata I am stuck on this confusing error (omitting some potential spoiler state). I tried turning off <code>pp.notation</code> to check the terms but they really are syntactically equal</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"mi\">33</span><span class=\"o\">:</span><span class=\"mi\">3</span><span class=\"o\">:</span> <span class=\"n\">rewrite</span> <span class=\"n\">tactic</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">did</span> <span class=\"n\">not</span> <span class=\"n\">find</span> <span class=\"kn\">instance</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">pattern</span> <span class=\"k\">in</span> <span class=\"n\">the</span> <span class=\"n\">target</span> <span class=\"n\">expression</span>\n  <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"mi\">9</span> <span class=\"bp\">/</span> <span class=\"mi\">10</span> <span class=\"bp\">*</span> <span class=\"n\">geom_series</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">10</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span>\n<span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span>\n<span class=\"err\">⊢</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"mi\">9</span> <span class=\"bp\">/</span> <span class=\"mi\">10</span> <span class=\"bp\">*</span> <span class=\"n\">geom_series</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">10</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span>\n</code></pre></div>\n\n\n</blockquote>\n<p>probably some of those literals are getting interpreted in the integers when you wanted them in the reals or similar. If you post a <a href=\"https://github.com/leanprover-community/mathlib/wiki/Minimum-Working-Example-&#40;MWE&#41;\" title=\"https://github.com/leanprover-community/mathlib/wiki/Minimum-Working-Example-&#40;MWE&#41;\">#mwe</a> then maybe someone can help you.</p>",
        "id": 195954558,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588334839
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"252300\">@Jalex Stark</span> aha, now I see <code>set_option pp.numerals false</code> which indeed reveals a mismatch of the form you suggest. I should be able to fix it now, thanks</p>",
        "id": 195955767,
        "sender_full_name": "Matt Earnshaw",
        "timestamp": 1588335909
    },
    {
        "content": "<p>Ooh nice! I'll try that next time I get an error like this</p>",
        "id": 195955804,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588335953
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> For a kata, what about something like <code>a ^ 4 - b ^ 4 = (a - b) * (a + b) * (a ^ 2 + b ^ 2)</code>? I couldn't prove it lol</p>",
        "id": 196000637,
        "sender_full_name": "Steffan",
        "timestamp": 1588361854
    },
    {
        "content": "<p><code>by ring</code></p>",
        "id": 196000734,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588361905
    },
    {
        "content": "<p>nope</p>",
        "id": 196000841,
        "sender_full_name": "Steffan",
        "timestamp": 1588361967
    },
    {
        "content": "<p>Stupid <code>ring</code></p>",
        "id": 196000869,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588361982
    },
    {
        "content": "<p>doesn't do it</p>",
        "id": 196000879,
        "sender_full_name": "Steffan",
        "timestamp": 1588361986
    },
    {
        "content": "<p>Where do <code>a</code> and <code>b</code> live?</p>",
        "id": 196000917,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588362002
    },
    {
        "content": "<p>ring_exp?</p>",
        "id": 196000961,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1588362014
    },
    {
        "content": "<p>If <code>a</code> and <code>b</code> are natural numbers, then this is <span aria-label=\"head bandage\" class=\"emoji emoji-1f915\" role=\"img\" title=\"head bandage\">:head_bandage:</span></p>",
        "id": 196001022,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588362051
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> Not sure what you mean<br>\n<span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span> doesn't work :/</p>",
        "id": 196001047,
        "sender_full_name": "Steffan",
        "timestamp": 1588362063
    },
    {
        "content": "<p>a and b are nats</p>",
        "id": 196001060,
        "sender_full_name": "Steffan",
        "timestamp": 1588362073
    },
    {
        "content": "<p>Aha...</p>",
        "id": 196001068,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588362080
    },
    {
        "content": "<p><code>ring</code> changes the goal to <code>a ^ 4 - b ^ 4 = (((a + b) * a + b ^ 2) * a + b ^ 3) * (a - b)</code></p>",
        "id": 196001236,
        "sender_full_name": "Steffan",
        "timestamp": 1588362149
    },
    {
        "content": "<p>If you're foolish enough to use nat subtraction then don't blame me ;-) Is it even true for nats?</p>",
        "id": 196001260,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588362165
    },
    {
        "content": "<p>I'm quite sure it's true</p>",
        "id": 196001312,
        "sender_full_name": "Steffan",
        "timestamp": 1588362197
    },
    {
        "content": "<p>I found it online</p>",
        "id": 196001338,
        "sender_full_name": "Steffan",
        "timestamp": 1588362213
    },
    {
        "content": "<p>If <code>a &lt; b</code> then both sides are <code>0</code></p>",
        "id": 196001358,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588362229
    },
    {
        "content": "<p>Yeah it's true, and I guess I wouldn't find it hard to prove, but I know lots of tricks with these things now</p>",
        "id": 196001365,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588362231
    },
    {
        "content": "<p>WolframAlpha says it's true too</p>",
        "id": 196001428,
        "sender_full_name": "Steffan",
        "timestamp": 1588362249
    },
    {
        "content": "<p>rofl</p>",
        "id": 196001439,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588362257
    },
    {
        "content": "<p>No it doesn't</p>",
        "id": 196001442,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588362258
    },
    {
        "content": "<p>ask WA if it says a-b+b=a for nats</p>",
        "id": 196001464,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588362268
    },
    {
        "content": "<p>and if it does then file a bug report because 0-1+1 isn't 0 as any fule kno</p>",
        "id": 196001473,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588362281
    },
    {
        "content": "<p>How does WolframAlpha know about <code>nat.sub</code></p>",
        "id": 196001475,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588362282
    },
    {
        "content": "<p>more like, how does it know <code>n &gt;= 0</code></p>",
        "id": 196001518,
        "sender_full_name": "Steffan",
        "timestamp": 1588362308
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> what do you mean it says false</p>",
        "id": 196001534,
        "sender_full_name": "Steffan",
        "timestamp": 1588362318
    },
    {
        "content": "<p>WA surely does not know about Lean's stupid nat.sub function</p>",
        "id": 196001574,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588362338
    },
    {
        "content": "<p>If you type <code>-</code> into WA then it does not interpret it as <code>nat.sub</code> but your question is about <code>nat.sub</code></p>",
        "id": 196001673,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588362370
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"297433\">@Steffan</span> How do you tell WA to use natural numbers instead of integers or reals?</p>",
        "id": 196001675,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588362372
    },
    {
        "content": "<p>If you say a&gt;=0 and b&gt;=0 then it will still not use nat.sub</p>",
        "id": 196001709,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588362396
    },
    {
        "content": "<p>It needs to know that the result must be <code>&gt;= 0</code>, and you cant do that afaik</p>",
        "id": 196001772,
        "sender_full_name": "Steffan",
        "timestamp": 1588362435
    },
    {
        "content": "<p>exactly</p>",
        "id": 196001789,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588362444
    },
    {
        "content": "<p>and that's why we are saying that WA can't check the result. It's certainly true for any commutative ring, but nat isn't a ring</p>",
        "id": 196001811,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588362461
    },
    {
        "content": "<p>so I need to prove <code>a ^ 4 - b ^ 4 = (a - b) * (a + b) * (a ^ 2 + b ^ 2)</code> with ints?</p>",
        "id": 196001901,
        "sender_full_name": "Steffan",
        "timestamp": 1588362498
    },
    {
        "content": "<p>yep, <code>ring</code> does it</p>",
        "id": 196001925,
        "sender_full_name": "Steffan",
        "timestamp": 1588362521
    },
    {
        "content": "<p>too easy</p>",
        "id": 196001929,
        "sender_full_name": "Steffan",
        "timestamp": 1588362525
    },
    {
        "content": "<p>Exactly</p>",
        "id": 196002046,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588362592
    },
    {
        "content": "<p>Of course ring does it, it's true in all commutative rings</p>",
        "id": 196002095,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588362604
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"297433\">@Steffan</span> Ask Lean <code>#eval 1 - 2</code></p>",
        "id": 196002100,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588362608
    },
    {
        "content": "<p>The difficulty with your question is that the <code>-</code> is <code>nat.sub</code> which is a pathological function</p>",
        "id": 196002132,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588362624
    },
    {
        "content": "<p>And see whether WA agrees with Lean <span aria-label=\"stuck out tongue wink\" class=\"emoji emoji-1f61c\" role=\"img\" title=\"stuck out tongue wink\">:stuck_out_tongue_wink:</span></p>",
        "id": 196002137,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588362628
    },
    {
        "content": "<p>Yup, it's a trap...</p>",
        "id": 196002151,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588362640
    },
    {
        "content": "<p>I know that <code>1 - 2 = 0</code> for nats.</p>\n<p>That sure was a trap.</p>",
        "id": 196002185,
        "sender_full_name": "Steffan",
        "timestamp": 1588362669
    },
    {
        "content": "<p>That's why the question is hard. <code>ring</code> works under assumptions like a-b+b=a which are not true for nats</p>",
        "id": 196002224,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588362698
    },
    {
        "content": "<p>So... you can actually make it a kata, if you want. But it would be pathological.</p>",
        "id": 196002229,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588362706
    },
    {
        "content": "<p>Hint, first prove <code>a^2 - b^2 = (a - b) * (a + b)</code> as a helper lemma.</p>",
        "id": 196002317,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588362742
    },
    {
        "content": "<p>After that, it shouldn't be too hard.</p>",
        "id": 196002336,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588362750
    },
    {
        "content": "<p>so it is actually true with nats? I didn't bother to bother my brain</p>",
        "id": 196002387,
        "sender_full_name": "Steffan",
        "timestamp": 1588362794
    },
    {
        "content": "<p>Yes!</p>",
        "id": 196002397,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588362802
    },
    {
        "content": "<p>Because by luck, both sides are zero if b&gt;a</p>",
        "id": 196002416,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588362814
    },
    {
        "content": "<p>ok, I'll try, thanks</p>",
        "id": 196002421,
        "sender_full_name": "Steffan",
        "timestamp": 1588362815
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">-</span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">+</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">le_iff_exists_add</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">c</span> <span class=\"n\">hc</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">hc</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- multiply out and sort things out</span>\n    <span class=\"n\">sorry</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"c1\">-- show both sides are 0</span>\n      <span class=\"n\">sorry</span>\n  <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 196002515,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588362862
    },
    {
        "content": "<p>thanks, but I don't think I'm good enough at lean to do that, that's why I tagged you about the proof</p>",
        "id": 196003005,
        "sender_full_name": "Steffan",
        "timestamp": 1588363135
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">-</span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">+</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">le_iff_exists_add</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">c</span> <span class=\"n\">hc</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">hc</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"bp\">+</span><span class=\"n\">c</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">c</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">c</span><span class=\"bp\">+</span><span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">ring</span><span class=\"o\">),</span>\n    <span class=\"n\">rw</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">add_sub_cancel</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">add_comm</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">add_sub_cancel</span><span class=\"o\">,</span>\n    <span class=\"n\">ring</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"c1\">-- show both sides are 0</span>\n    <span class=\"n\">push_neg</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">replace</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">le_of_lt</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">,</span>\n      <span class=\"n\">apply</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">pow_le_pow_of_le_left</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">sub_eq_zero_iff_le</span> <span class=\"n\">at</span> <span class=\"n\">h</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">h2</span><span class=\"o\">,</span> <span class=\"n\">zero_mul</span><span class=\"o\">],</span>\n  <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 196003630,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588363504
    },
    {
        "content": "<p>now see if you can do a^4-b^4 from there :-)</p>",
        "id": 196003667,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588363526
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"k\">obtain</span> <span class=\"bp\">⟨</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">rwa</span> <span class=\"n\">le_iff_exists_add</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">pow_two</span><span class=\"o\">,</span> <span class=\"n\">add_mul</span><span class=\"o\">,</span> <span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">mul_sub_right_distrib</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">add_comm</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">push_neg</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">sub_eq_zero_of_le</span> <span class=\"o\">(</span><span class=\"n\">le_of_lt</span> <span class=\"n\">h</span><span class=\"o\">),</span> <span class=\"n\">zero_mul</span><span class=\"o\">],</span>\n    <span class=\"n\">apply</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">sub_eq_zero_of_le</span> <span class=\"o\">(</span><span class=\"n\">le_of_lt</span> <span class=\"bp\">_</span><span class=\"o\">),</span>\n    <span class=\"n\">rwa</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">pow_lt_iff_lt_left</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">dec_trivial</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"mi\">4</span> <span class=\"bp\">-</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"mi\">4</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">foo</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">foo</span><span class=\"o\">],</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">pow_succ</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">],</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 196003954,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588363710
    },
    {
        "content": "<p>wow, but I don't want to steal all that code, you guys can make a kata!</p>",
        "id": 196006548,
        "sender_full_name": "Steffan",
        "timestamp": 1588365234
    },
    {
        "content": "<p>Go ahead... I'm not (yet) on CW.</p>",
        "id": 196006664,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588365279
    },
    {
        "content": "<p>This code is in the public domain.</p>",
        "id": 196006676,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588365293
    },
    {
        "content": "<p>now you can't because of spoilers</p>",
        "id": 196006826,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588365368
    },
    {
        "content": "<p>I don't have any particular desire to show off how hard it is to work with a pathological function such as nat.sub</p>",
        "id": 196006919,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588365443
    },
    {
        "content": "<p>I can do it if you guys delete your messages, then the spoiler will be gone. I've copied everything into my \"scratchpad\"</p>\n<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> your <code>foo</code> is so awesome that I cannot understand it :D</p>",
        "id": 196007316,
        "sender_full_name": "Steffan",
        "timestamp": 1588365661
    },
    {
        "content": "<p><code>foo</code> says that either stuff works as you expect, or both sides are zero. If things work as you expect, you make life easier by replacing <code>b</code> with <code>a + c</code>, for some natural number <code>c</code>. After that, you just follow your nose. If things are zero, then you show this by searching the library for the fact that <code>a &lt; b</code> implies <code>a^2 &lt; b^2</code>.</p>",
        "id": 196007701,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588365864
    },
    {
        "content": "<p>Anyway, would you mind editing out the code you posted so I can publish the kata?</p>",
        "id": 196009053,
        "sender_full_name": "Steffan",
        "timestamp": 1588366573
    },
    {
        "content": "<p>Editing out the code does not remove it, you can always look at the edit history.</p>",
        "id": 196013268,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588369177
    },
    {
        "content": "<p>So do you suggest I just publish it?</p>",
        "id": 196017573,
        "sender_full_name": "Steffan",
        "timestamp": 1588372545
    },
    {
        "content": "<p>Or if you delete the comment, that might work</p>",
        "id": 196017630,
        "sender_full_name": "Steffan",
        "timestamp": 1588372576
    },
    {
        "content": "<p>Johan posted the proof, I just posted a hint. Why don't do you a^6-b^6 instead if you're worried?</p>",
        "id": 196021313,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588375991
    },
    {
        "content": "<p>Here's a strategy that works for most ring-like problems on nat.sub:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">ring</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"mi\">4</span> <span class=\"bp\">-</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"mi\">4</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">le_total</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"k\">with</span> <span class=\"n\">h</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">sub_eq_zero_iff_le</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">zero_mul</span><span class=\"o\">,</span> <span class=\"n\">zero_mul</span><span class=\"o\">,</span>\n        <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">sub_eq_zero_iff_le</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">pow_le_pow_of_le_left</span> <span class=\"n\">h</span> <span class=\"bp\">_</span><span class=\"o\">)]</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">coe_nat_inj</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">coe_nat_sub</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">pow_le_pow_of_le_left</span> <span class=\"n\">h</span> <span class=\"bp\">_</span><span class=\"o\">],</span>\n    <span class=\"n\">ring</span> <span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 196025410,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588381397
    },
    {
        "content": "<p>I really don't think we should censor code or conversations on Zulip for the sake of CW.</p>",
        "id": 196133715,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1588557368
    },
    {
        "content": "<p>I think math.stackexchange is a good reference point, they have a lot of posts which are good content but also can be used to cheat on undergrad homework</p>",
        "id": 196138271,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588565105
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113488-general/topic/Invitation.20to.20join.20the.20Codewars.20Lean.20community.2C.20Round.202/near/196133715\" title=\"#narrow/stream/113488-general/topic/Invitation.20to.20join.20the.20Codewars.20Lean.20community.2C.20Round.202/near/196133715\">said</a>:</p>\n<blockquote>\n<p>I really don't think we should censor code or conversations on Zulip for the sake of CW.</p>\n</blockquote>\n<p>I realize I may have gone a bit overboard initially with this \"no spoilers\" thing, sorry about that <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> To clarify, we do try to minimize spoilers whenever possible but it's not meant as a hard rule, so, e.g. hints and general directions are often acceptable. As for full solutions, IMO posting them here on Zulip is also fine since messages come and go and a cheater would have to deliberately scour through the chat to find these spoilers, but just don't, e.g. create a public GitHub repository specifically containing solutions to Codewars kata and draw attention to it by, e.g. naming it \"Codewars-Solutions\" and/or asking others to actively contribute to the repo.</p>\n<p>The general policy for spoilers and cheating on Codewars is: making solutions publicly available is technically allowed but discouraged; plagiarizing solutions to gain free points is disallowed and could get you banned.</p>",
        "id": 196139262,
        "sender_full_name": "Donald Sebastian Leung",
        "timestamp": 1588566852
    },
    {
        "content": "<p>I finally have enough honor to post kata! I'm confused about what I'm supposed to put in the \"preloaded\" and \"test\" sections. Can anyone advise?</p>",
        "id": 196259224,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588641702
    },
    {
        "content": "<p>Preloaded is where you put code where you don't want the user to modify, so definitions, structures etc.</p>\n<p>Test is where you make sure the people solving the kata didn't use <code>sorry</code>. Take a look at an existing Kata.</p>",
        "id": 196260915,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1588643999
    },
    {
        "content": "<p>hmm... Is there a way to extract the testing code from a kata page? I imagine not, since in most languages that would let you solve it by hardcoding the tests</p>",
        "id": 196260990,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588644102
    },
    {
        "content": "<p>(and in particular, i visited a few kata to try to extract this information and couldn't find it)</p>",
        "id": 196261032,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588644126
    },
    {
        "content": "<p>That's why there are Example Tests, which are visible to the user, and the actual tests, which are not.</p>",
        "id": 196261039,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1588644153
    },
    {
        "content": "<p>are there Lean kata with visible example tests? the random first two i tried didn't have them</p>",
        "id": 196261051,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588644183
    },
    {
        "content": "<p>Mhm... I think for a lot of Lean kata, the actual tests and the example tests are the same.</p>",
        "id": 196261063,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1588644216
    },
    {
        "content": "<p>okay, I'll try harder and then come back when I have a more interesting failure mode</p>",
        "id": 196261069,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588644240
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/Sm9KWrTjg1rNzxbuoLyjm1_U/image.png\" title=\"image.png\">image.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/Sm9KWrTjg1rNzxbuoLyjm1_U/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/Sm9KWrTjg1rNzxbuoLyjm1_U/image.png\"></a></div><p>The bottom right corner is the example tests.</p>",
        "id": 196261124,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1588644252
    },
    {
        "content": "<p>and you can see on the left that most Lean kata have the preloaded file copied into the description, as there is no way to access <code>Preloaded.lean</code> when solving the kata.</p>",
        "id": 196261169,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1588644318
    },
    {
        "content": "<p>Okay, I think I managed to post a working kata (it is very much 8 kyu)<br>\n<a href=\"https://www.codewars.com/kata/5eb0ce255179590016d613ce/train/lean\" title=\"https://www.codewars.com/kata/5eb0ce255179590016d613ce/train/lean\">https://www.codewars.com/kata/5eb0ce255179590016d613ce/train/lean</a></p>",
        "id": 196261965,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588645488
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113488-general/topic/Invitation.20to.20join.20the.20Codewars.20Lean.20community.2C.20Round.202/near/196133715\" title=\"#narrow/stream/113488-general/topic/Invitation.20to.20join.20the.20Codewars.20Lean.20community.2C.20Round.202/near/196133715\">said</a>:</p>\n<blockquote>\n<p>I really don't think we should censor code or conversations on Zulip for the sake of CW.</p>\n</blockquote>\n<p>Okay, so I decided to publish this: <a href=\"https://www.codewars.com/kata/5eac8d8845655d003300f5b5\" title=\"https://www.codewars.com/kata/5eac8d8845655d003300f5b5\">https://www.codewars.com/kata/5eac8d8845655d003300f5b5</a></p>",
        "id": 196265566,
        "sender_full_name": "Steffan",
        "timestamp": 1588651173
    },
    {
        "content": "<p>We now have 45 approved Lean kata, way to go! We only need 5 more before bugging kazk again to get Lean support out of Beta once and for all <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 196393236,
        "sender_full_name": "Donald Sebastian Leung",
        "timestamp": 1588735393
    },
    {
        "content": "<p>beta: <a href=\"https://www.codewars.com/kata/5eb2c73ff08e28002471b09e\" title=\"https://www.codewars.com/kata/5eb2c73ff08e28002471b09e\">New induction scheme on integers</a></p>",
        "id": 196641186,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588774841
    },
    {
        "content": "<p>Two fresh beta kata: <a href=\"https://www.codewars.com/kata/5eb3c5999ee8630001e9e616\" title=\"https://www.codewars.com/kata/5eb3c5999ee8630001e9e616\">Linear projection</a> and <a href=\"https://www.codewars.com/kata/5eb4186d508d49000145c793\" title=\"https://www.codewars.com/kata/5eb4186d508d49000145c793\">Squareful segments</a></p>",
        "id": 196777157,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1588861216
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260921\">@Markus Himmel</span> my solution is shorter than your solution for the second one</p>",
        "id": 196779314,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588862136
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110064\">Kenny Lau</span> <a href=\"#narrow/stream/113488-general/topic/Invitation.20to.20join.20the.20Codewars.20Lean.20community.2C.20Round.202/near/196779314\" title=\"#narrow/stream/113488-general/topic/Invitation.20to.20join.20the.20Codewars.20Lean.20community.2C.20Round.202/near/196779314\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"260921\">Markus Himmel</span> my solution is shorter than your solution for the second one</p>\n</blockquote>\n<p>Argh, I refactored the problem until the statement made no sense any more.</p>",
        "id": 196779540,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1588862239
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110064\">Kenny Lau</span> <a href=\"#narrow/stream/113488-general/topic/Invitation.20to.20join.20the.20Codewars.20Lean.20community.2C.20Round.202/near/196779314\" title=\"#narrow/stream/113488-general/topic/Invitation.20to.20join.20the.20Codewars.20Lean.20community.2C.20Round.202/near/196779314\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"260921\">Markus Himmel</span> my solution is shorter than your solution for the second one</p>\n</blockquote>\n<p>Alright, I hope it's fixed now.</p>",
        "id": 196780162,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1588862518
    },
    {
        "content": "<p>oh no my solution became invalid</p>",
        "id": 196781987,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588863248
    },
    {
        "content": "<p>That'll teach you :-)</p>",
        "id": 196786876,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588865057
    },
    {
        "content": "<p>Has anyone thought about writing kata that expect you to write a tactic? It could work like kata in non-theorem language, where there's a suite of test lemmas that your tactic has to solve, and the kata might not show you all of the tests.</p>",
        "id": 196963242,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588982513
    },
    {
        "content": "<p>Can I view my current goals when using tactics on codewars?</p>",
        "id": 196963958,
        "sender_full_name": "Aniruddh Agarwal",
        "timestamp": 1588983305
    },
    {
        "content": "<p>No, you should program everything locally and then submit it once it compiles on your machine</p>",
        "id": 196963982,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588983359
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"252300\">Jalex Stark</span> <a href=\"#narrow/stream/113488-general/topic/Invitation.20to.20join.20the.20Codewars.20Lean.20community.2C.20Round.202/near/196963242\" title=\"#narrow/stream/113488-general/topic/Invitation.20to.20join.20the.20Codewars.20Lean.20community.2C.20Round.202/near/196963242\">said</a>:</p>\n<blockquote>\n<p>Has anyone thought about writing kata that expect you to write a tactic? It could work like kata in non-theorem language, where there's a suite of test lemmas that your tactic has to solve, and the kata might not show you all of the tests.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"252300\">@Jalex Stark</span> That would most definitely be possible. In Coq we have <a href=\"https://www.codewars.com/kata/5cdce6056d6a44002999a062\" title=\"https://www.codewars.com/kata/5cdce6056d6a44002999a062\">Rewriting on any binary equivalence relation</a> which requires the solver to tap into a Coq-specific language feature in order to make the <code>rewrite</code> tactic work on modular equality as opposed to the usual equality. We also have <a href=\"https://www.codewars.com/kata/5d0fc2427006cd00013b73d6\" title=\"https://www.codewars.com/kata/5d0fc2427006cd00013b73d6\">Ltac practice: The tarai function</a> which doesn't <em>require</em> you to write your own automation, but is much easier if you do so (which is the point of the kata).</p>\n<p>The good thing about both of these kata is that their tests do not rely on any fancy features from the testing framework so they should be doable in Lean as well.</p>",
        "id": 196970879,
        "sender_full_name": "Donald Sebastian Leung",
        "timestamp": 1588994535
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"294709\">Aniruddh Agarwal</span> <a href=\"#narrow/stream/113488-general/topic/Invitation.20to.20join.20the.20Codewars.20Lean.20community.2C.20Round.202/near/196963958\" title=\"#narrow/stream/113488-general/topic/Invitation.20to.20join.20the.20Codewars.20Lean.20community.2C.20Round.202/near/196963958\">said</a>:</p>\n<blockquote>\n<p>Can I view my current goals when using tactics on codewars?</p>\n</blockquote>\n<p>To add to what Jalex said, you may learn more about the Lean setup on Codewars on our <a href=\"https://github.com/Codewars/codewars.com/wiki/Language-Lean\" title=\"https://github.com/Codewars/codewars.com/wiki/Language-Lean\">Wiki</a>.</p>",
        "id": 196970899,
        "sender_full_name": "Donald Sebastian Leung",
        "timestamp": 1588994610
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"252300\">@Jalex Stark</span> that's a really interesting idea! There's a way of just being able to make a tactic by chaining other tactics so one could think about doing that, and of course you'll have to avoid tactics which are already there eg the canonical exercise \"write an <code>assumption</code> tactic\" probably can't be done because you can just use <code>assumption</code>, but there's an example in Programming in Lean of some sort of first order logic tactic which might work. </p>\n<p>How will you check the user only used their tactic though? Can this be made part of the framework?</p>",
        "id": 196977656,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589007948
    },
    {
        "content": "<blockquote>\n<p>How will you check the user only used their tactic though? Can this be made part of the framework?</p>\n</blockquote>\n<p>I think Jalex's idea is that the solver will not be proving theorems at all, only implementing the required tactics, and then the test cases themselves will contain theorem statements and proofs using the tactic(s) defined by the solver, which, if implemented correctly, should compile with no errors (and not insert <code>sorry</code>s / forbidden axioms). So in that case, the solver will have no (direct) control over which tactics are being used in the proofs.</p>\n<p>But if you mean whether one can ensure that the solver-defined tactic does not invoke a particular built-in tactic, then no, this is not possible with the current setup.</p>",
        "id": 196985457,
        "sender_full_name": "Donald Sebastian Leung",
        "timestamp": 1589021359
    },
    {
        "content": "<p>Yeah I agree with Donald. To be a tiny bit more explicit, the initial solution would look like</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">submission_tactic</span> <span class=\"o\">:=</span>\n</code></pre></div>\n\n\n<p>and the test cases would look like</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">test_prop1</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">submission_tactic</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">test_prop2</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">submission_tactic</span>\n</code></pre></div>",
        "id": 196988607,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589025916
    },
    {
        "content": "<p>So an 8 kyu \"tactic-writing hello world\" might have an answer that's morally equivalent to </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">submission_tactic</span> <span class=\"o\">:=</span> <span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">apply</span> <span class=\"n\">lemma1</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">apply</span> <span class=\"n\">lemma2</span><span class=\"o\">}</span>\n</code></pre></div>\n\n\n<p>and the test cases are things that fall to (possibly long) repeated applications of lemma1 and lemma2. That probably means that </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">submission_tactic</span> <span class=\"o\">:=</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">lemma1</span><span class=\"o\">,</span> <span class=\"n\">lemma2</span><span class=\"o\">]</span>\n</code></pre></div>\n\n\n<p>works too, but I'd be fine with that.</p>",
        "id": 196988728,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589026160
    },
    {
        "content": "<p>I see! That sounds like a great idea! I have no interest in tactic-writing myself but I certainly know mathematicians who are interested</p>",
        "id": 197002174,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589044913
    },
    {
        "content": "<p>I agree with Donald and Jalex that this is a good idea</p>",
        "id": 197003688,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1589047018
    },
    {
        "content": "<p>well if i manage to teach myself enough about writing tactics, I'll go on to create some kata about it<br>\n(but mostly I am learning automation at exactly the rate that it makes the math I want to do easier)</p>",
        "id": 197003875,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589047305
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/Invitation.20to.20join.20the.20Codewars.20Lean.20community.2C.20Round.202/near/195850988\" title=\"#narrow/stream/113488-general/topic/Invitation.20to.20join.20the.20Codewars.20Lean.20community.2C.20Round.202/near/195850988\">said</a>:</p>\n<blockquote>\n<p>unfortunately I'm not sure they'll let us go as far as aleph_null</p>\n</blockquote>\n<p>I managed to get this to work! It's only for even integers, but still! A Kata for the Goldbach conjecture <a href=\"https://www.codewars.com/kata/5eb718d0e7c54e001a6e03b8\" title=\"https://www.codewars.com/kata/5eb718d0e7c54e001a6e03b8\">Part 1</a>, <a href=\"https://www.codewars.com/kata/5eb71c5981e686000105ad61\" title=\"https://www.codewars.com/kata/5eb71c5981e686000105ad61\">Part 2, contains a spoiler for Part 1</a>.</p>",
        "id": 197013200,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1589058846
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span> I have left a comment on Part 1</p>",
        "id": 197013574,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589059244
    },
    {
        "content": "<p>Thanks for that, amended</p>",
        "id": 197013611,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1589059320
    },
    {
        "content": "<p>Of course your solution to part 2 is cleaner than mine!</p>",
        "id": 197013812,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1589059444
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span> aha, I have a cleaner solution yet</p>",
        "id": 197013846,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589059514
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span> posted</p>",
        "id": 197013913,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589059594
    },
    {
        "content": "<p>Haha I just thought of that after you said you had a better one!</p>",
        "id": 197013931,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1589059616
    },
    {
        "content": "<p>also all the <code>2*n</code> should be <code>n</code></p>",
        "id": 197013973,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589059656
    },
    {
        "content": "<p>oops. You can tell what the earlier versions were like</p>",
        "id": 197014012,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1589059681
    },
    {
        "content": "<p>Um, I've disproved Part 2</p>",
        "id": 197015051,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589060559
    },
    {
        "content": "<p>so if you've managed to prove it then lean is inconsistent</p>",
        "id": 197015060,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589060583
    },
    {
        "content": "<p>:) :)</p>",
        "id": 197015386,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1589060776
    },
    {
        "content": "<p>oh I see, you are teaching bad habits</p>",
        "id": 197015396,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589060818
    },
    {
        "content": "<p>Let's frame it as: what happens when we follow bad habits</p>",
        "id": 197015409,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1589060882
    },
    {
        "content": "<p>I was inspired by katas like <a href=\"https://www.codewars.com/kata/55a4de202949dca9bd000088\" title=\"https://www.codewars.com/kata/55a4de202949dca9bd000088\">this</a> where a solution involves doing the sort of thing which you shouldn't really be doing</p>",
        "id": 197015545,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1589061079
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110064\">Kenny Lau</span> <a href=\"#narrow/stream/113488-general/topic/Invitation.20to.20join.20the.20Codewars.20Lean.20community.2C.20Round.202/near/197013973\" title=\"#narrow/stream/113488-general/topic/Invitation.20to.20join.20the.20Codewars.20Lean.20community.2C.20Round.202/near/197013973\">said</a>:</p>\n<blockquote>\n<p>also all the <code>2*n</code> should be <code>n</code></p>\n</blockquote>\n<p>I thought this was the deliberate mistake and I was googling for a proof in the case n is a multiple of 4.</p>",
        "id": 197017111,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1589063061
    },
    {
        "content": "<p>Why not just work one out for yourself? <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 197017115,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589063084
    },
    {
        "content": "<ol>\n<li>We now have 46 approved kata!</li>\n<li>Should we have a CW stream?</li>\n</ol>",
        "id": 197078478,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589144570
    },
    {
        "content": "<p>I'd be in favor of a CW stream. I'm very happy to have many different ways to happily use Lean, but I have zero interest in discussion involving katas and CW beta whatever</p>",
        "id": 197078842,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589145070
    },
    {
        "content": "<p><a href=\"#narrow/stream/238266-Codewars/topic/stream.20events/near/197087959\" title=\"#narrow/stream/238266-Codewars/topic/stream.20events/near/197087959\">https://leanprover.zulipchat.com/#narrow/stream/238266-Codewars/topic/stream.20events/near/197087959</a></p>",
        "id": 197088165,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589156904
    }
]