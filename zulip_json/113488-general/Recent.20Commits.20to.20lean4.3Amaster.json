[
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112165\">rss-bot</span> <a href=\"#narrow/stream/116290-rss/topic/Recent.20Commits.20to.20lean4.3Amaster/near/216028686\">said</a>:</p>\n<blockquote>\n<p><strong><a href=\"https://github.com/leanprover/lean4/commit/cf7779936419085093ab0ea20f4738dd08030f90\">doc: add <code>lean3changes.md</code></a></strong><br>\ndoc: add <code>lean3changes.md</code><br>\n<a href=\"https://github.com/leanprover/lean4/commit/cf7779936419085093ab0ea20f4738dd08030f90\">https://github.com/leanprover/lean4/commit/cf7779936419085093ab0ea20f4738dd08030f90</a></p>\n</blockquote>\n<p>For people not following the rss stream: this is nice to read (follow the link to <a href=\"https://github.com/leanprover/lean4/blob/master/doc/lean3changes.md\">this file</a>).</p>",
        "id": 216057703,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1604912630
    },
    {
        "content": "<p>I see that Lean 4 uses <code>·</code> for lambdas, so we'll have to find another symbol for <code>smul</code>.</p>",
        "id": 216076512,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1604924450
    },
    {
        "content": "<p>At one point I suggested stealing the symbol used by the \"stupid triangle\", and using its mirror image for right actions.</p>",
        "id": 216076884,
        "sender_full_name": "Reid Barton",
        "timestamp": 1604924661
    },
    {
        "content": "<p><a href=\"https://en.wikipedia.org/wiki/Interpunct#Similar_symbols\">https://en.wikipedia.org/wiki/Interpunct#Similar_symbols</a></p>",
        "id": 216077271,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604924909
    },
    {
        "content": "<p><code>·</code> (lean4)  is not the same as <code>•</code>(smul)  though? Do you mean matrix multiplication needs a new symbol?</p>",
        "id": 216077702,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1604925199
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/Recent.20Commits.20to.20lean4.3Amaster/near/216077702\">said</a>:</p>\n<blockquote>\n<p><code>·</code> (lean4)  is not the same as <code>•</code>(smul)  though? Do you mean matrix multiplication needs a new symbol?</p>\n</blockquote>\n<p>I mean that I should read more carefully.</p>",
        "id": 216084223,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1604929121
    },
    {
        "content": "<p>More got added to <a href=\"https://github.com/leanprover/lean4/blob/master/doc/lean3changes.md\">the file</a> today (About dependent functions and <code>meta</code>).</p>",
        "id": 216161756,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1604969641
    },
    {
        "content": "<p>I'm happy to see the notation<code>(x : α) → β x</code> for the dependent function type.</p>",
        "id": 216161796,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1604969646
    },
    {
        "content": "<blockquote>\n<p>We can still write forall (x : α), β x and ∀ (x : α), β x, but the parentheses are not optional when the type is provided explicitly.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> Why is this?</p>",
        "id": 216162190,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604970021
    },
    {
        "content": "<p>the keyword <code>meta</code> is removed from lean 4 eh. so how should a <code>meta</code> function get migrated from lean 3 to lean 4, do you just directly replace it with <code>unsafe</code> ?</p>",
        "id": 216176890,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1604990636
    },
    {
        "content": "<p>i am also curious if anyone working on lean 4 has done profiling to estimate the speed differences between 3 -&gt; 4</p>",
        "id": 216177094,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1604990851
    },
    {
        "content": "<p>Speed of what? We would like to benchmark a large library because that's what we want, but there is a whole lot of infrastructure missing before we can even mock something up that is reasonably close to mathlib</p>",
        "id": 216178854,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604993415
    },
    {
        "content": "<p>Obviously tactics are going to be orders of magnitude faster, as they are compiled now, but the way that they interact with the elaborator and such in proofs is as yet untested because there aren't any nontrivial proofs in lean 4</p>",
        "id": 216178923,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604993523
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"238605\">Kevin Lacker</span> <a href=\"#narrow/stream/113488-general/topic/Recent.20Commits.20to.20lean4.3Amaster/near/216177094\">said</a>:</p>\n<blockquote>\n<p>i am also curious if anyone working on lean 4 has done profiling to estimate the speed differences between 3 -&gt; 4</p>\n</blockquote>\n<p>There are some benchmarks comparing Lean 4 to other programming languages (but not Lean 3) in this paper: <a href=\"https://arxiv.org/abs/1908.05647\">https://arxiv.org/abs/1908.05647</a></p>",
        "id": 216179605,
        "sender_full_name": "Chris B",
        "timestamp": 1604994451
    },
    {
        "content": "<blockquote>\n<p>I'm happy to see the notation<code>(x : α) → β x</code> for the dependent function type.</p>\n</blockquote>\n<p>I can see two annoying ways this will impact mathlib now:</p>\n<ul>\n<li><code>pi</code> as a file name will be much less obvious, since the pi symbol is no longer used</li>\n<li>There won't be a symbol available for <code>dfinsupp</code> to distinguish it from <code>finsupp</code> while still looking like a regular function</li>\n</ul>",
        "id": 216181098,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1604995910
    },
    {
        "content": "<p>\"Easy\" fixes: rename <code>pi</code> to <code>function</code> and use <code>dfinsupp</code> instead of <code>finsupp</code> everywhere. <span aria-label=\"stuck out tongue wink\" class=\"emoji emoji-1f61c\" role=\"img\" title=\"stuck out tongue wink\">:stuck_out_tongue_wink:</span></p>",
        "id": 216181325,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1604996111
    },
    {
        "content": "<p>The second half is unfortunately likely to cause elaboration issues</p>",
        "id": 216181343,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1604996136
    },
    {
        "content": "<p>I think they are called pi types in agda too despite the arrow notation</p>",
        "id": 216181531,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604996284
    },
    {
        "content": "<p>Does this mean that sigma types are <code>(x : α) × β x</code> now?</p>",
        "id": 216181596,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604996363
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/Recent.20Commits.20to.20lean4.3Amaster/near/216162190\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>We can still write forall (x : α), β x and ∀ (x : α), β x, but the parentheses are not optional when the type is provided explicitly.</p>\n</blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> Why is this?</p>\n</blockquote>\n<p>I don't know what you're talking about <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span> <a href=\"https://github.com/leanprover/lean4/commit/7e8a7e6660292cb9d93e79df64cabecb4e14aa27\">https://github.com/leanprover/lean4/commit/7e8a7e6660292cb9d93e79df64cabecb4e14aa27</a></p>",
        "id": 216185982,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1604999196
    }
]