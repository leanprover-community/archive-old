[
    {
        "content": "<p>The Lean 4 parser only understands <code>prelude</code>, <code>import</code>, and <code>theory</code> so far, but I've already learned something surprising: <code>noncomputable theory</code> can be used anywhere in a file (also, multiple times)</p>",
        "id": 128299157,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1529406637
    },
    {
        "content": "<p>Can you elucidate on what is surprising about that?</p>",
        "id": 128299364,
        "sender_full_name": "Sean Leather",
        "timestamp": 1529407003
    },
    {
        "content": "<p>I assumed it only worked on the top of a file, since we usually use \"theory\" synonymously to \"file\".</p>",
        "id": 128299761,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1529407719
    },
    {
        "content": "<p>Ah, <code>theory</code>, not <code>theorem</code>: I missed that. I also didn't know <code>theory</code> was a keyword.</p>",
        "id": 128300248,
        "sender_full_name": "Sean Leather",
        "timestamp": 1529408592
    },
    {
        "content": "<p>I've only worked on computable theorems. Looking in the Lean 3 core library and mathlib, I see only <code>noncomputable theory</code> used. I don't see <code>theory</code> mentioned in the reference manual or TPIL. What purpose does <code>theory</code> serve?</p>",
        "id": 128300366,
        "sender_full_name": "Sean Leather",
        "timestamp": 1529408786
    },
    {
        "content": "<p><code>theory</code> is a command, like <code>theorem</code>. <code>noncomputable</code> is a modifier you can apply to either of them. The distinction doesn't really matter in Lean 3 since <code>theory</code> can only be used together with<code>noncomputable</code>, which marks the remainder of the file as noncomputable.</p>",
        "id": 128300531,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1529409051
    },
    {
        "content": "<p>which marks the <em>appropriate</em> remainder of the file as noncomputable</p>",
        "id": 128300541,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529409078
    },
    {
        "content": "<p>yes</p>",
        "id": 128300547,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1529409095
    },
    {
        "content": "<p>computable functions remain computable</p>",
        "id": 128300549,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529409099
    },
    {
        "content": "<p>Perhaps we'll want to generalize <code>theory</code> in Lean 4, though I'm not sure whether there are many sensible combinations. Say, using <code>private theory</code>, then negating it using a new keyword <code>public</code> on a few declarations.</p>",
        "id": 128300685,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1529409316
    },
    {
        "content": "<p>lean -- java remade</p>",
        "id": 128300690,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529409328
    },
    {
        "content": "<p>Oh funny, I've used <code>noncomputable theory</code> inside a section before and sort of expected it to be scoped, though there's no way I'd ever notice if it wasn't.</p>",
        "id": 128304668,
        "sender_full_name": "Reid Barton",
        "timestamp": 1529415179
    },
    {
        "content": "<p>wasn't there a Github issue the idea of introducing also <code>meta theory</code>?</p>",
        "id": 128308056,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1529419220
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> what about changing <code>theory</code> to be only allowed at the file header, but extend <code>section</code> and <code>namespace</code> to take <code>meta</code>, <code>noncomputable</code>, <code>private</code>, <code>protected</code>, <code>public</code> modifiers?</p>",
        "id": 128308151,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1529419353
    },
    {
        "content": "<p>how do you define file header?</p>",
        "id": 128308168,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529419389
    },
    {
        "content": "<p>currently <code>import</code> must be at the beginning</p>",
        "id": 128308172,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529419398
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110294\">@Johannes Hölzl</span>  Yes, that's my plan right now :)</p>",
        "id": 128308179,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1529419408
    },
    {
        "content": "<p>Also, attributes on sections</p>",
        "id": 128308183,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1529419423
    },
    {
        "content": "<p>Nice!</p>",
        "id": 128308187,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1529419429
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> Right now I've defined it as <code>prelude? (import ...)* (noncomputable theory)?</code></p>",
        "id": 128308276,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1529419524
    },
    {
        "content": "<p>are you going to regex the whole file</p>",
        "id": 128308342,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529419566
    },
    {
        "content": "<p>Of course, everyone knows you solve all problems with regexes</p>",
        "id": 128308362,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1529419618
    },
    {
        "content": "<p>now you have 2...</p>",
        "id": 128308375,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1529419633
    },
    {
        "content": "<p>modulo whitespace / comments</p>",
        "id": 128308434,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1529419691
    },
    {
        "content": "<p><code>repeat { all_goals { apply_regex } }</code></p>",
        "id": 128308458,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1529419728
    },
    {
        "content": "<p>another purpose of theory could be to set parameters, or execute an imported command, like <code>mathlib theory</code>. This would setup certain notation, options, namespaces, version checks etc. I guess this could be also solved using <code>run_cmd</code>, but <code>theory</code> is a nice syntax. Also, what about moving <code>prelude</code> to <code>prelude theory</code>?</p>",
        "id": 128308841,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1529420155
    },
    {
        "content": "<p><code>prelude</code> should logically come before <code>import</code> since it suppreses the default imports. We could move <code>theory</code> to the front instead, I'm not sure.</p>",
        "id": 128309035,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1529420384
    },
    {
        "content": "<p>Okay, this makes sense.</p>",
        "id": 128309284,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1529420560
    },
    {
        "content": "<p>There shouldn't be any reason to restrict the modifiers applicable to <code>theory</code> in Lean 4, no. Though, in the examples so far, it sounded like applying something to <code>theory</code> or <code>section</code> simply distributes it to all contained declarations (even if, as Kenny pointed out, it will behave differently from e.g. an explicit <code>noncomputable</code>). Your <code>mathlib</code> example doesn't quite fit in that scheme.</p>",
        "id": 128309423,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1529420666
    },
    {
        "content": "<p>Will lean 4 allow for gathering the global file structure? For example: find the open section and namespace names; currently declared variables and parameters, notations and other <code>local</code> declarations; finding the \"outline\" of a given file, i.e. the tree of namespace and section blocks and the definitions in them</p>",
        "id": 128311123,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1529422635
    },
    {
        "content": "<p>You'll definitely get access to a concrete syntax tree of the entire file. You should also get access to more \"dynamic\" information like open namespaces (which could be influenced by a <code>run_cmd</code>), though it's less clear what that could look like</p>",
        "id": 128311421,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1529422997
    }
]