[
    {
        "content": "<p>Hi guys, how would you express the natural numbers as a subtype of the reals?</p>",
        "id": 133730371,
        "sender_full_name": "Guillermo Barajas Ayuso",
        "timestamp": 1536671111
    },
    {
        "content": "<p>I guess you could just do</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"n\">def</span> <span class=\"n\">N</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">//</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">}</span>\n</pre></div>\n\n\n<p>but then the term of type <code>equiv N nat</code> would be noncomputable. Is there a computable way?</p>",
        "id": 133731041,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536671725
    },
    {
        "content": "<p>it's computable</p>",
        "id": 133731224,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536671899
    },
    {
        "content": "<p>(but Lean doesn't know it yet)</p>",
        "id": 133731235,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536671915
    },
    {
        "content": "<p>How do you do that computably?</p>",
        "id": 133734407,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1536674579
    },
    {
        "content": "<p>It's not computable. It would be if cauchy sequences defining real numbers had a modulus of convergence</p>",
        "id": 133752152,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536691891
    },
    {
        "content": "<p>this is why I've taken to calling our definition of the reals \"computable but not really\"</p>",
        "id": 133752221,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536691925
    },
    {
        "content": "<p>Suppose you have a real number that is known to equal some natural number, and you want to guess which. The convergence criterion says that at some point all the rational numbers will be closer to one natural than any other, and then you can round to get the number, but you don't know when that point is. A more constructive approach would be a sequence of rationals that converges at a specific rate (usually exponential), so you can ask \"give me an n-digit approximation of this number\", or at least a sequence of rationals together with a function that tells you how long the sequence takes to reach a certain level of approximation</p>",
        "id": 133752463,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536692165
    },
    {
        "content": "<p>fair enough. I thought wrongly.</p>",
        "id": 133752494,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536692211
    },
    {
        "content": "<p>Is our definition of <code>rat</code> \"computable but not rationally\"?</p>",
        "id": 133752892,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536692541
    },
    {
        "content": "<p>To answer the original question, the standard way to talk about natural numbers inside the reals is to use the coercion. If you want to talk about the whole set of reals-that-are-natural, you can use <code>set.range (coe : ℕ → ℝ)</code> which is basically the same as Kevin's suggestion.</p>",
        "id": 133753216,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536692834
    },
    {
        "content": "<p>I see, thaks a lot! Also how would you prove the following?</p>\n<div class=\"codehilite\"><pre><span></span>example (h : n &lt; m) : (n : ℝ) &lt; (m : ℝ) := sorry\n</pre></div>",
        "id": 133797345,
        "sender_full_name": "Guillermo Barajas Ayuso",
        "timestamp": 1536757683
    },
    {
        "content": "<p>Sorry I forgot to define n and m</p>\n<div class=\"codehilite\"><pre><span></span>example {n m : ℕ} (h : n &lt; m) : (n : ℝ) &lt; (m : ℝ) := sorry\n</pre></div>",
        "id": 133797368,
        "sender_full_name": "Guillermo Barajas Ayuso",
        "timestamp": 1536757724
    },
    {
        "content": "<p>nat.cast_lt or something</p>",
        "id": 133797477,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536757837
    },
    {
        "content": "<p>(alternatively, induct on <code>h</code>)</p>",
        "id": 133797482,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536757846
    },
    {
        "content": "<p>Ok, thanks!</p>",
        "id": 133797598,
        "sender_full_name": "Guillermo Barajas Ayuso",
        "timestamp": 1536757978
    }
]