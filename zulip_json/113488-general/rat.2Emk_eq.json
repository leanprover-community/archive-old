[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">mk_eq</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hd</span> <span class=\"o\">:</span> <span class=\"n\">d</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">),</span>\n  <span class=\"n\">a</span> <span class=\"bp\">/.</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">/.</span> <span class=\"n\">d</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"n\">suffices</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">hb</span> <span class=\"n\">hd</span><span class=\"o\">,</span> <span class=\"n\">mk_pnat</span> <span class=\"n\">a</span> <span class=\"bp\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">hb</span><span class=\"bp\">⟩</span> <span class=\"bp\">=</span> <span class=\"n\">mk_pnat</span> <span class=\"n\">c</span> <span class=\"bp\">⟨</span><span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">hd</span><span class=\"bp\">⟩</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n<span class=\"o\">[</span><span class=\"bp\">...</span><span class=\"o\">]</span>\n</pre></div>",
        "id": 125675114,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524668156
    },
    {
        "content": "<p>the one in <code>suffices</code> is what I need T_T</p>",
        "id": 125675152,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524668164
    },
    {
        "content": "<p>Just rewrite <code>mk_pnat</code> into <code>/.</code>, they are equal</p>",
        "id": 125680601,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524675820
    },
    {
        "content": "<p>this is what I did at the end:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">mk_pnat_eq_iff</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">mk_pnat</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">mk_pnat</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">b</span> <span class=\"k\">with</span> <span class=\"n\">b</span> <span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">d</span> <span class=\"k\">with</span> <span class=\"n\">d</span> <span class=\"n\">hd</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">mk_pnat_eq</span><span class=\"o\">],</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">mk_eq</span><span class=\"o\">],</span>\n  <span class=\"n\">exact</span> <span class=\"n\">ne_of_gt</span> <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">coe_nat_pos</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">hb</span><span class=\"o\">),</span>\n  <span class=\"n\">exact</span> <span class=\"n\">ne_of_gt</span> <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">coe_nat_pos</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">hd</span><span class=\"o\">),</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 125680649,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524675847
    },
    {
        "content": "<p>this part of the code is not going to be PR'd so the neatness of the proof doesn't really matter ot me</p>",
        "id": 125680667,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524675876
    },
    {
        "content": "<p>but I did write a whole bunch of lemmas in the meantime</p>",
        "id": 125680671,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524675894
    },
    {
        "content": "<p>The real question is why are you dealing with <code>mk_pnat</code>? The interface should let you just use field operations and avoid <code>mk</code> entirely</p>",
        "id": 125680795,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524676055
    },
    {
        "content": "<p>oh, <code>mk_pnat</code> is not intended to be used?</p>",
        "id": 125680800,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524676080
    },
    {
        "content": "<p>I used it because I am using <code>pnat</code></p>",
        "id": 125680838,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524676085
    },
    {
        "content": "<p>or are you going to tell me that <code>pnat</code> is not to be used either</p>",
        "id": 125680843,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524676092
    },
    {
        "content": "<p>Just use <code>n / d</code> where <code>d : N+</code></p>",
        "id": 125680914,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524676201
    },
    {
        "content": "<p>The only reason you might want <code>mk_pnat</code> is if you care about the efficiency of computing this value (this will translate <code>d</code> to rat by adding ones)</p>",
        "id": 125680991,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524676275
    }
]