[
    {
        "content": "<p>For teaching purposes, I wonder whether we should slightly modify <code>use</code> to try <code>rw exsists_prop</code> at the end. It shouldn't break too many proofs since you can still use <code>use</code> when the goal is a conjunction</p>",
        "id": 158113833,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1549975110
    },
    {
        "content": "<p>I'm thinking of goal that look like <code>∃ δ &gt; 0, ...</code> where the goal becomes <code>∃ (H : δ &gt; 0), ...</code> after giving the required δ</p>",
        "id": 158113892,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1549975188
    },
    {
        "content": "<p>I think this is a very good idea if we want this tactic to be <code>use</code>r-friendly.</p>",
        "id": 158419509,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1550042925
    },
    {
        "content": "<p>You have my vote.</p>",
        "id": 158419512,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1550042932
    },
    {
        "content": "<p>/me <del>wrote</del> edited his first tactic...</p>",
        "id": 158440032,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1550064951
    },
    {
        "content": "<p>Voila:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">namespace</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">interactive</span>\n<span class=\"kn\">open</span> <span class=\"n\">interactive</span> <span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">types</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">use_this</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">pexpr_list_or_texpr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">use</span> <span class=\"n\">l</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"o\">(</span><span class=\"n\">triv</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">try</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">rw</span> <span class=\"n\">exists_prop</span><span class=\"o\">]))</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">interactive</span>\n<span class=\"kn\">end</span> <span class=\"n\">tactic</span>\n</pre></div>",
        "id": 158440096,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1550064978
    },
    {
        "content": "<p>In fact, I would rather see that <code>∃ p ≥ n, prime p</code> is expanded to the sane thing as soon as I enter the <code>begin end</code>-block.<br>\nNow I see <code>∃ (p : ℕ) (H : p ≥ n), prime p</code>, which is of course quite ugly. Can't some magic in <code>begin</code> turn this into<br>\n<code>∃ (p : ℕ), p ≥ n ∧ prime p</code> immediately?</p>",
        "id": 158440339,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1550065179
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110111\">@Keeley Hoek</span> you seem to be able to make <code>begin</code> do magic tricks. Is this something that could be done?</p>",
        "id": 158440419,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1550065222
    },
    {
        "content": "<p>Well, in general, we don't want <code>begin</code> to replace things by non-defeq things</p>",
        "id": 158444149,
        "sender_full_name": "Reid Barton",
        "timestamp": 1550068226
    },
    {
        "content": "<p>I wish <code>∃ p ≥ n, prime p</code> was syntactic sugar for <code>∃ (p : ℕ), p ≥ n ∧ prime p</code>.</p>",
        "id": 158444201,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1550068278
    },
    {
        "content": "<p>I would like <code>set_option newbie_mode true</code> that would fix some of these things.<br>\nEven if we don't want that option in mathlib.</p>",
        "id": 158444245,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1550068320
    },
    {
        "content": "<p>Maybe better than <code>rw exists_prop</code> would be whatever the version with <code>apply</code> would be, so that it only applies at the outermost position</p>",
        "id": 158444292,
        "sender_full_name": "Reid Barton",
        "timestamp": 1550068326
    },
    {
        "content": "<p>Hmm, that makes sense.</p>",
        "id": 158444616,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1550068550
    },
    {
        "content": "<p>I'm revisiting an old thread since it's Lean-teaching time again. Should we replace <a href=\"https://github.com/leanprover-community/mathlib/blob/3053a16942cf8bc388eb4758cf9f9f5c0ff02ccb/src/tactic/interactive.lean#L615-L616\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/3053a16942cf8bc388eb4758cf9f9f5c0ff02ccb/src/tactic/interactive.lean#L615-L616\">https://github.com/leanprover-community/mathlib/blob/3053a16942cf8bc388eb4758cf9f9f5c0ff02ccb/src/tactic/interactive.lean#L615-L616</a> by:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">use</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">pexpr_list_or_texpr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">use</span> <span class=\"n\">l</span><span class=\"o\">,</span>\n   <span class=\"n\">try</span> <span class=\"n\">triv</span><span class=\"o\">,</span>\n   <span class=\"n\">try</span> <span class=\"o\">(</span><span class=\"n\">do</span>\n           <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Exists</span> <span class=\"err\">%%</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"err\">←</span> <span class=\"n\">target</span><span class=\"o\">,</span>\n           <span class=\"n\">to_expr</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">exists_prop</span><span class=\"bp\">.</span><span class=\"n\">mpr</span><span class=\"o\">)</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">apply</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">skip</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>I tried and it doesn't break mathlib. I guess one could use a more primitive approach without using <code>apply</code> but I have no idea whether it would be faster.</p>",
        "id": 185738764,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1579119002
    },
    {
        "content": "<p>Recall the goal is to avoid <code>∃ δ &gt; 0</code> becoming <code>∃ (H : δ &gt; 0)</code> after calling <code>use</code>.</p>",
        "id": 185738841,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1579119053
    },
    {
        "content": "<p>Probably best to wrap it in a <code>focus1 $ </code>, so the <code>try</code>s can't randomly affect other goals (not sure this is possible with the current version of <code>use</code>)</p>",
        "id": 185739055,
        "sender_full_name": "Reid Barton",
        "timestamp": 1579119225
    },
    {
        "content": "<p>Thanks Reid. See <a href=\"https://github.com/leanprover-community/mathlib/pull/1882\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/pull/1882\">https://github.com/leanprover-community/mathlib/pull/1882</a>.</p>",
        "id": 185745868,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1579123510
    },
    {
        "content": "<p>BTW, how hard would be making <code>use a</code> as good in reporting errors as <code>refine ⟨a, _⟩</code>. Currently if I make a typo in <code>a</code>, it fails with very uninformative message, and I have to write <code>let a := ...</code> or <code>have a := ...</code> first to find out what's wrong.</p>",
        "id": 185753839,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1579129285
    },
    {
        "content": "<p>This is added to my list of things to think about when I have spare cycles, but it sounds generally fine to me.</p>",
        "id": 185754091,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1579129485
    },
    {
        "content": "<blockquote>\n<p>BTW, how hard would be making <code>use a</code> as good in reporting errors as <code>refine ⟨a, _⟩</code>. Currently if I make a typo in <code>a</code>, it fails with very uninformative message, and I have to write <code>let a := ...</code> or <code>have a := ...</code> first to find out what's wrong.</p>\n</blockquote>\n<p><code>use</code> is more general, since <code>use a</code> doesn't know the pattern <code>⟨a, _⟩</code>. It will work for something like <code>⟨⟨a, _⟩, _⟩</code> as well. Perhaps the error messages can be improved.</p>",
        "id": 185754128,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1579129531
    },
    {
        "content": "<p>Yeah, I never use <code>use</code>, because <code>refine</code> is already ingrained and there's a ~25% chance I have a type error in which case I will need to change it to <code>refine</code> to get a useful error message.</p>",
        "id": 185755562,
        "sender_full_name": "Reid Barton",
        "timestamp": 1579130780
    },
    {
        "content": "<p>I always use <code>use</code>, because I am often writing Lean code in front of people who have very little clue about Lean, and the word <code>use</code> explains really well what is going on. When it works, it works great.</p>",
        "id": 185758051,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1579133116
    },
    {
        "content": "<p>I suspect Patrick will be in a similar position this term.</p>",
        "id": 185758065,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1579133150
    }
]