[
    {
        "content": "<p>I’d really like to do something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">a</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">b</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">c</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≃*</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">calc</span> <span class=\"n\">a</span> <span class=\"bp\">≃*</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"gr\">sorry</span>\n     <span class=\"bp\">...</span> <span class=\"bp\">≃*</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>but I get</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">mul_equiv.trans</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">a</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Type</span> <span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"bp\">?+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">has_mul</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"o\">,</span>\n<span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"o\">,</span>\n<span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">group</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_2</span> <span class=\"o\">:</span> <span class=\"n\">group</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_3</span> <span class=\"o\">:</span> <span class=\"n\">group</span> <span class=\"n\">c</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">a</span> <span class=\"bp\">≃*</span> <span class=\"n\">c</span>\n</code></pre></div>\n<p>Is there a way to have calculations with <code>≃*</code>?</p>",
        "id": 276030920,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1647858907
    },
    {
        "content": "<p>Have a look through the <a href=\"https://leanprover-community.github.io/mathlib_docs/find/mul_equiv\">docs#mul_equiv</a> API to see whether the relevant definitions have been marked <code>@[trans]</code>, although it looks like the error is elsewhere</p>",
        "id": 276031250,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1647859090
    },
    {
        "content": "<p>Indeed, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/mul_equiv.trans\">docs#mul_equiv.trans</a> is marked <code>@[trans]</code> (although it's not written in the docs, cc <span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span>), so I suspect it's a bug in <code>calc</code> or in <code>trans</code> that turn instance arguments into explicit ones, or something of this vein.</p>",
        "id": 276031480,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1647859217
    },
    {
        "content": "<p>There is a known issue with <code>calc</code> not working when the \"relation\" (here <code>≃*</code>) has more arguments than <code>=</code> would have--here those pesky <code>has_mul</code> arguments.</p>",
        "id": 276031622,
        "sender_full_name": "Reid Barton",
        "timestamp": 1647859301
    },
    {
        "content": "<p>e.g. <a href=\"#narrow/stream/113488-general/topic/calc.20for.20linear.20equivs/near/240337990\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/calc.20for.20linear.20equivs/near/240337990</a></p>",
        "id": 276031779,
        "sender_full_name": "Reid Barton",
        "timestamp": 1647859375
    },
    {
        "content": "<p><a href=\"#narrow/stream/113488-general/topic/homeomorph.2Etrans.20and.20calc/near/199225731\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/homeomorph.2Etrans.20and.20calc/near/199225731</a></p>",
        "id": 276031862,
        "sender_full_name": "Reid Barton",
        "timestamp": 1647859428
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113488-general/topic/calc.20with.20.60.E2.89.83*.60/near/276031480\">said</a>:</p>\n<blockquote>\n<p>Indeed, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/mul_equiv.trans\">docs#mul_equiv.trans</a> is marked <code>@[trans]</code> (although it's not written in the docs, cc <span class=\"user-mention silent\" data-user-id=\"123965\">Bryan Gin-ge Chen</span>), ...</p>\n</blockquote>\n<p>Regarding <code>trans</code> not showing up in the docs, <code>doc-gen</code> only includes attributes from <a href=\"https://github.com/leanprover-community/doc-gen/blob/318f3c66ccd571ebe0712a5ac6e918ee4b5fc9a0/src/export_json.lean#L239\">a hard-coded list</a>. I'm not sure what the criteria are for inclusion, but maybe a PR adding more would be accepted? cc: <span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span></p>",
        "id": 276050279,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1647869398
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113488-general/topic/calc.20with.20.60.E2.89.83*.60/near/276031622\">said</a>:</p>\n<blockquote>\n<p>There is a known issue with <code>calc</code> not working when the \"relation\" (here <code>≃*</code>) has more arguments than <code>=</code> would have--here those pesky <code>has_mul</code> arguments.</p>\n</blockquote>\n<p>That's interesting, because I've definitely got <code>calc</code> to work with the relation <a href=\"https://leanprover-community.github.io/mathlib_docs/find/int.modeq\">docs#int.modeq</a>.  Eg <a href=\"https://github.com/leanprover-community/mathlib/blob/135c57421dd1423d5044e4e467f09489e3062759/archive/imo/imo2005_q4.lean#L44\">here</a></p>",
        "id": 276051470,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1647869982
    },
    {
        "content": "<p>It's not so much the number of arguments, but what the last <em>five</em> arguments are.  For <code>calc</code>, these need to be <code>a</code>, <code>b</code>, <code>c</code>, <code>h₁ : a ≃ b</code>, <code>h₂ : b ≼ c</code>, in that order.</p>",
        "id": 276051664,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1647870077
    },
    {
        "content": "<p>Ah... but that's not very workable when there are type class constraints on <code>a</code> <code>b</code> <code>c</code></p>",
        "id": 276051971,
        "sender_full_name": "Reid Barton",
        "timestamp": 1647870220
    },
    {
        "content": "<p>is that the behaviour in Lean4?</p>",
        "id": 276052673,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1647870494
    },
    {
        "content": "<p>Oooh, so that's why <code>trans</code> sometimes outputs \"not enough arguments\".</p>",
        "id": 276053565,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1647870881
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> is this similarly the case for <code>@[symm]</code> and <code>@[refl]</code>? I'm currently preparing a PR to make the most of what's possible, and I'm wondering if I should fix those at the same time anyways</p>",
        "id": 276057248,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1647872495
    },
    {
        "content": "<p>calc only uses trans, so this specific problem won't happen with symm or refl.</p>",
        "id": 276057420,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1647872578
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/12860\">#12860</a></p>",
        "id": 276064951,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1647875364
    },
    {
        "content": "<p>Could we make <code>calc</code> more robust instead?</p>",
        "id": 276065261,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1647875485
    },
    {
        "content": "<p>for sure, that's the ideal solution, but this is a nice stop-gap</p>",
        "id": 276065398,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1647875531
    },
    {
        "content": "<p>What would be ways to fix that? An (optional) attribute to <code>trans</code> that indicates which argument positions correspond to the expected 5 arguments maybe? (Blunt, I agree)</p>\n<p>Or make the command ignore type class arguments?</p>\n<p>Or is <code>calc</code> too low level to cater for such specific whims?</p>",
        "id": 276067073,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1647876100
    },
    {
        "content": "<p>I would hope that ignoring type-class arguments would work, but who knows...</p>",
        "id": 276069154,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1647876815
    },
    {
        "content": "<p>Why can't <code>calc</code> infer <code>a</code>, <code>b</code>, <code>c</code> from <code>a ≃ b</code>, <code>b ≼ c</code>?</p>",
        "id": 276069288,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1647876873
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/113488-general/topic/calc.20with.20.60.E2.89.83*.60/near/276052673\">said</a>:</p>\n<blockquote>\n<p>is that the behaviour in Lean4?</p>\n</blockquote>\n<p>Lean 4 uses a typeclass <code>Trans</code> instead of an attribute, so this issue should not apply</p>",
        "id": 276071277,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1647877664
    },
    {
        "content": "<p>Elaborating on @Yael's comment, I'd hope calc could work it out from lemmas of the shape<code>... (hab : type_one ... a b) (hbc : type_two ... b c) : type_three ... a c</code>, and unify  to work out <code>a</code>, <code>b</code>, and <code>c</code>.</p>",
        "id": 276084926,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1647882840
    },
    {
        "content": "<p>I suspect the answer is that some <code>trans</code> lemmas are rather <code>... (hab : type_one ... a b ...) (hbc : type_two ... b c ...) : type_three ... a c ...</code></p>",
        "id": 276085126,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1647882923
    },
    {
        "content": "<p>Do we actually have any of those that can't be reordered, and are currently supported by calc today?</p>",
        "id": 276085192,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1647882957
    },
    {
        "content": "<p>My guess would be that there are far fewer of those than the type that we're asking for in this thread.</p>",
        "id": 276085293,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1647882993
    },
    {
        "content": "<p>there's a lottt of different forms, some of the ones I rememeber were <code>≪ᵥ</code>, some of the model ones, and equality_mod_filters</p>",
        "id": 276085421,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1647883064
    },
    {
        "content": "<p>ok, now I'm confused: why doesn't this work on the branch above?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.asymptotics.asymptotic_equivalent</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"n\">δ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">is_equivalent</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">asymptotics</span>\n\n<span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">asymptotics.is_equivalent.trans</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">normed_group</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">huv</span> <span class=\"o\">:</span> <span class=\"n\">u</span> <span class=\"bp\">~</span><span class=\"o\">[</span><span class=\"n\">l</span><span class=\"o\">]</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hvw</span> <span class=\"o\">:</span> <span class=\"n\">v</span> <span class=\"bp\">~</span><span class=\"o\">[</span><span class=\"n\">l</span><span class=\"o\">]</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">u</span> <span class=\"bp\">~</span><span class=\"o\">[</span><span class=\"n\">l</span><span class=\"o\">]</span> <span class=\"n\">w</span> <span class=\"o\">:=</span>\n<span class=\"k\">calc</span> <span class=\"n\">u</span> <span class=\"bp\">~</span><span class=\"o\">[</span><span class=\"n\">l</span><span class=\"o\">]</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">huv</span>\n   <span class=\"bp\">...</span> <span class=\"bp\">~</span><span class=\"o\">[</span><span class=\"n\">l</span><span class=\"o\">]</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">hvw</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">is_equivalent</span>\n</code></pre></div>",
        "id": 276087863,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1647884170
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"470149\">Joachim Breitner</span> <a href=\"#narrow/stream/113488-general/topic/calc.20with.20.60.E2.89.83*.60/near/276067073\">said</a>:</p>\n<blockquote>\n<p>An (optional) attribute to <code>trans</code> that indicates which argument positions correspond to the expected 5 arguments maybe?</p>\n</blockquote>\n<p>I wonder if we can get away with giving <code>trans</code> a single optional numeric argument corresponding to the position of  \"<code>b</code>\". Example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">mul_equiv.trans</span>\n<span class=\"c1\">-- Π {M : Type u_2} {N : Type u_3} {P : Type u_4}</span>\n<span class=\"c1\">--   [_inst_1 : has_mul M] [_inst_2 : has_mul N] [_inst_3 : has_mul P],</span>\n<span class=\"c1\">--   M ≃* N → N ≃* P → M ≃* P</span>\n\n<span class=\"n\">set_attribute</span> <span class=\"o\">[</span><span class=\"n\">trans</span> <span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"n\">mul_equiv.trans</span>\n</code></pre></div>\n<p>I haven't looked at the actual underlying code to see if this would work though.</p>",
        "id": 276087872,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1647884174
    },
    {
        "content": "<p>I'm curious: why would just <code>b</code> be needed?</p>",
        "id": 276185070,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1647954345
    },
    {
        "content": "<p>That's because <code>a</code> appears in the first hypothesis where <code>b</code> appears in the second,  and <code>c</code> appears in the second hypothesis where <code>b</code> appears in the first.</p>",
        "id": 276185288,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1647954440
    },
    {
        "content": "<p>Oh wait, I am completely off.</p>",
        "id": 276185371,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1647954479
    },
    {
        "content": "<p>Why does calc when have to instantiate these arguments (a, b, c) explicitly? Doesn't it always have the type of <code>h1</code> and <code>h2</code> explicitly given in the <code>calc</code> syntax, and can pass that as a type annotation?</p>",
        "id": 276187305,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1647955400
    },
    {
        "content": "<p>But how do you figure out <code>a</code>, <code>b</code>, <code>c</code> from the hypotheses? In simple cases, it's straightforward. In others, I don't really know.</p>",
        "id": 276187453,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1647955468
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"470149\">Joachim Breitner</span> <a href=\"#narrow/stream/113488-general/topic/calc.20with.20.60.E2.89.83*.60/near/276187305\">said</a>:</p>\n<blockquote>\n<p>Why does calc when have to instantiate these arguments (a, b, c) explicitly? Doesn't it always have the type of <code>h1</code> and <code>h2</code> explicitly given in the <code>calc</code> syntax, and can pass that as a type annotation?</p>\n</blockquote>\n<p>This was my thought, too; the current pproach doesn't even work for some interesting types /cf my mwe)</p>",
        "id": 276187585,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1647955539
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113488-general/topic/calc.20with.20.60.E2.89.83*.60/near/276187453\">said</a>:</p>\n<blockquote>\n<p>But how do you figure out <code>a</code>, <code>b</code>, <code>c</code> from the hypotheses? In simple cases, it's straightforward. In others, I don't really know.</p>\n</blockquote>\n<p>Can't we require that the type of <code>hab : a ~ b</code> end in the arguments <code>a b</code> (eg be <code>some_rel _ _ _  a b</code>)? Are there any examples where this isn't possible?</p>",
        "id": 276189133,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1647956181
    },
    {
        "content": "<p>I agree that this sounds like a reasonable restriction but I'm sure people can come up with counterexamples.</p>",
        "id": 276189248,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1647956225
    },
    {
        "content": "<p>ring_equivs</p>",
        "id": 276189293,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1647956242
    },
    {
        "content": "<p>Oh, whoops</p>",
        "id": 276189476,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1647956309
    },
    {
        "content": "<p>I haven't read through this thread in detail, but if the problem is that <code>calc</code> can't reliably figure out the relation, perhaps users could just give it explicitly: <code>calc[R] x R y : p ...</code>.</p>",
        "id": 276195161,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1647958792
    },
    {
        "content": "<p>but the whole point of calc is that you can mix relations, for example if you wanted x ∈ A ∪ B you can currently write:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">field_theory.abel_ruffini</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span> <span class=\"bp\">∪</span> <span class=\"n\">B</span> <span class=\"o\">:=</span>\n<span class=\"k\">calc</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">h</span>\n   <span class=\"bp\">...</span> <span class=\"bp\">⊆</span> <span class=\"n\">A</span> <span class=\"bp\">∪</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 276196249,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1647959215
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"470149\">Joachim Breitner</span> <a href=\"#narrow/stream/113488-general/topic/calc.20with.20.60.E2.89.83*.60/near/276185070\">said</a>:</p>\n<blockquote>\n<p>I'm curious: why would just <code>b</code> be needed?</p>\n</blockquote>\n<p>I'd made a wrong guess about how it worked based on the existence of <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#transitivity\">tactic#transitivity</a></p>\n<p>Here's actually how the <code>transitivity foo</code> tactic works:</p>\n<ol>\n<li>Look at the target, get the head of the application (e.g., for <code>eq a b</code> that'd be <code>eq</code>), require that it be a constant.</li>\n<li>Look for a <code>trans</code> lemma in the environment for that constant.</li>\n<li>Basically <code>apply</code> that lemma using the <code>new_goals.non_dep_only</code> strategy.</li>\n<li>Use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/environment.relation_info\">docs#environment.relation_info</a> to get the arity of the relation and the indices into the arguments list for the \"lhs\" and \"rhs\" of the relation.</li>\n<li>For the first goal produced by applying the <code>trans</code> lemma, unify the \"rhs\" of it with <code>foo</code>.</li>\n</ol>\n<p>The docstring for <code>relation_info</code> says something about things being \"marked as relations.\" Haven't dug into that yet.</p>",
        "id": 276221574,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1647968620
    },
    {
        "content": "<p>It looks like the \"lhs\" and \"rhs\" of a relation are always the last two explicit arguments, and the last two arguments to a <code>trans</code> lemma must be relation-like (they don't seem to be involved in the relation registration system -- not sure if that's a bug). <a href=\"https://github.com/leanprover-community/lean/blob/65ad4ffdb3abac75be748554e3cbe990fb1c6500/src/library/relation_manager.cpp#L132\">relation_manager.cpp</a></p>\n<p>Side question: what is a <code>subst</code> lemma? It doesn't seem like it has any use -- was this meant to be a way to implement relation-based rewriting?</p>",
        "id": 276223800,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1647969495
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean/blob/65ad4ffdb3abac75be748554e3cbe990fb1c6500/src/frontends/lean/calc.cpp#L96\">Here's</a> where how <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> said <code>calc</code> works actually happens.</p>\n<p>It takes the two relations being chained together and looks in the <code>trans</code> database for that pair to find a relevant <code>trans </code> lemma (note: there are two ways this database is queried: <code>transitivity</code> uses the relation constructed by the <code>trans</code> lemma, but <code>calc</code> uses the last two arguments to the <code>trans</code> lemma). If there is such a lemma, then <code>trans_it</code> in the linked code is truthy. Then the last five arguments to the <code>trans</code> lemma are filled in exactly as <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> said: <code>a</code>, <code>b</code>, <code>c</code>, proof of first relation involving <code>a</code> and <code>b</code>, proof of second relation involving <code>b</code> and <code>c</code>.</p>",
        "id": 276225255,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1647970094
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"470149\">Joachim Breitner</span> <a href=\"#narrow/stream/113488-general/topic/calc.20with.20.60.E2.89.83*.60/near/276187305\">said</a>:</p>\n<blockquote>\n<p>Why does calc when have to instantiate these arguments (a, b, c) explicitly? Doesn't it always have the type of <code>h1</code> and <code>h2</code> explicitly given in the <code>calc</code> syntax, and can pass that as a type annotation?</p>\n</blockquote>\n<p>Given that the relation manager knows what the \"lhs\" and \"rhs\" of each relation involved is, it seems plausible to me that <code>a</code>, <code>b</code>, and <code>c</code> can be set indirectly through the types of <code>h1</code> and <code>h2</code>.</p>\n<p>(I haven't looked at <span class=\"user-mention\" data-user-id=\"284160\">@Eric Rodriguez</span>'s MWE yet, or what it's an MWE of -- is it that you'd expect <code>calc</code> to work given that it seemingly meets the constraints?)</p>",
        "id": 276226753,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1647970688
    },
    {
        "content": "<p>yeah, pretty much, but it errops out. I assume because it's a relation of the sort <code>a =[f] b</code></p>",
        "id": 276226900,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1647970756
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/113488-general/topic/calc.20with.20.60.E2.89.83*.60/near/276196249\">said</a>:</p>\n<blockquote>\n<p>but the whole point of calc is that you can mix relations</p>\n</blockquote>\n<p>Then the annotation could be used as a hint:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">calc</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">x</span> <span class=\"n\">R</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"bp\">...</span>\n      <span class=\"bp\">...</span> <span class=\"n\">S</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>Lean could look at the <code>R</code> in square brackets to figure out which arguments are considered the left and right element, while using the current heuristic for <code>S</code>. Not sure whether this is a good idea, but it seems possible to me.</p>",
        "id": 276227834,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1647971202
    },
    {
        "content": "<p>Btw, how does <code>calc</code> handle <code>≥</code>? Does it literally use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ge_trans\">docs#ge_trans</a> or is there special support?</p>",
        "id": 276228172,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1647971370
    },
    {
        "content": "<p>I would imagine it uses that, yes</p>",
        "id": 276229550,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1647971863
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/113488-general/topic/calc.20with.20.60.E2.89.83*.60/near/276051470\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113488-general/topic/calc.20with.20.60.E2.89.83*.60/near/276031622\">said</a>:</p>\n<blockquote>\n<p>There is a known issue with <code>calc</code> not working when the \"relation\" (here <code>≃*</code>) has more arguments than <code>=</code> would have--here those pesky <code>has_mul</code> arguments.</p>\n</blockquote>\n<p>That's interesting, because I've definitely got <code>calc</code> to work with the relation <a href=\"https://leanprover-community.github.io/mathlib_docs/find/int.modeq\">docs#int.modeq</a>.  Eg <a href=\"https://github.com/leanprover-community/mathlib/blob/135c57421dd1423d5044e4e467f09489e3062759/archive/imo/imo2005_q4.lean#L44\">here</a></p>\n</blockquote>\n<p>but but but... <a href=\"#narrow/stream/113488-general/topic/calc.20ZMOD.20bug/near/272408274\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/calc.20ZMOD.20bug/near/272408274</a> I think you got lucky because you never used consecutive ZMODs ?</p>",
        "id": 276237234,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1647974875
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113488-general/topic/calc.20with.20.60.E2.89.83*.60/near/276228172\">said</a>:</p>\n<blockquote>\n<p>Btw, how does <code>calc</code> handle <code>≥</code>? Does it literally use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ge_trans\">docs#ge_trans</a> or is there special support?</p>\n</blockquote>\n<p>The only special support for anything that <code>calc</code> seems to have is for <code>eq</code> (saving us from having to write a bunch of silly <code>trans</code> lemmas).</p>\n<p>The way <code>calc</code> appears to work is that it takes pairs of consecutive relations in the <code>calc</code> (say <code>≥</code> and <code>≥</code>, or <code>≥ </code> and <code>&gt;</code>, or what have you) then looks for a <code>trans</code> lemma that takes that pair of relations. Whichever <code>trans</code> lemma matches then determines what the resulting composite relation is -- for example <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ge_trans\">docs#ge_trans</a> results in the <code>≥</code> relation.</p>",
        "id": 276245719,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1647978960
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"284160\">@Eric Rodriguez</span> It looks like the problem with your example is that the relation isn't following the correct specification. The related terms have to be the last two explicit arguments, but the filter is coming last: <a href=\"https://github.com/leanprover-community/mathlib/blob/d586195418d55d8d56c2d412c35bffd9a516a3c5/src/analysis/asymptotics/asymptotic_equivalent.lean#L63\">https://github.com/leanprover-community/mathlib/blob/d586195418d55d8d56c2d412c35bffd9a516a3c5/src/analysis/asymptotics/asymptotic_equivalent.lean#L63</a></p>",
        "id": 276246126,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1647979154
    },
    {
        "content": "<p><code>ZMOD</code> seems to work fine because the underlying relation is <code>modeq n a b</code>, that is, <code>a</code> and <code>b</code> come last.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≡</span> <span class=\"n\">b</span> <span class=\"o\">[</span><span class=\"n\">ZMOD</span> <span class=\"n\">n</span><span class=\"o\">])</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≡</span> <span class=\"n\">c</span> <span class=\"o\">[</span><span class=\"n\">ZMOD</span> <span class=\"n\">n</span><span class=\"o\">])</span> <span class=\"o\">(</span><span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">≡</span> <span class=\"n\">d</span> <span class=\"o\">[</span><span class=\"n\">ZMOD</span> <span class=\"n\">n</span><span class=\"o\">])</span> <span class=\"o\">:</span>\n  <span class=\"n\">a</span> <span class=\"bp\">≡</span> <span class=\"n\">d</span> <span class=\"o\">[</span><span class=\"n\">ZMOD</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"k\">calc</span> <span class=\"n\">a</span> <span class=\"bp\">≡</span> <span class=\"n\">b</span> <span class=\"o\">[</span><span class=\"n\">ZMOD</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">h1</span>\n   <span class=\"bp\">...</span> <span class=\"bp\">≡</span> <span class=\"n\">c</span> <span class=\"o\">[</span><span class=\"n\">ZMOD</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">h2</span>\n   <span class=\"bp\">...</span> <span class=\"bp\">≡</span> <span class=\"n\">d</span> <span class=\"o\">[</span><span class=\"n\">ZMOD</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">h3</span>\n</code></pre></div>\n<p>(Not sure what's going on with the metavariable problem in <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>'s examples.)</p>",
        "id": 276246925,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1647979466
    },
    {
        "content": "<p>I'm going to hazard a guess that <code>calc</code> just isn't unifying anything but the last two arguments of the relation.</p>",
        "id": 276247179,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1647979592
    },
    {
        "content": "<p>Oh, yep, that's it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≡</span> <span class=\"n\">b</span> <span class=\"o\">[</span><span class=\"n\">ZMOD</span> <span class=\"n\">n</span><span class=\"o\">])</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≡</span> <span class=\"n\">c</span> <span class=\"o\">[</span><span class=\"n\">ZMOD</span> <span class=\"n\">n</span><span class=\"o\">])</span> <span class=\"o\">(</span><span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">≡</span> <span class=\"n\">d</span> <span class=\"o\">[</span><span class=\"n\">ZMOD</span> <span class=\"n\">n</span><span class=\"o\">])</span> <span class=\"o\">:</span>\n  <span class=\"n\">a</span> <span class=\"bp\">≡</span> <span class=\"n\">d</span> <span class=\"o\">[</span><span class=\"n\">ZMOD</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"k\">calc</span> <span class=\"n\">a</span> <span class=\"bp\">≡</span> <span class=\"n\">b</span> <span class=\"o\">[</span><span class=\"n\">ZMOD</span> <span class=\"mi\">37</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">h1</span>\n   <span class=\"bp\">...</span> <span class=\"bp\">≡</span> <span class=\"n\">c</span> <span class=\"o\">[</span><span class=\"n\">ZMOD</span> <span class=\"mi\">22</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">h2</span>\n   <span class=\"bp\">...</span> <span class=\"bp\">≡</span> <span class=\"n\">d</span> <span class=\"o\">[</span><span class=\"n\">ZMOD</span> <span class=\"mi\">482</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">h3</span>\n</code></pre></div>",
        "id": 276247233,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1647979618
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113488-general/topic/calc.20with.20.60.E2.89.83*.60/near/276246126\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> It looks like the problem with your example is that the relation isn't following the correct specification. The related terms have to be the last two explicit arguments, but the filter is coming last: <a href=\"https://github.com/leanprover-community/mathlib/blob/d586195418d55d8d56c2d412c35bffd9a516a3c5/src/analysis/asymptotics/asymptotic_equivalent.lean#L63\">https://github.com/leanprover-community/mathlib/blob/d586195418d55d8d56c2d412c35bffd9a516a3c5/src/analysis/asymptotics/asymptotic_equivalent.lean#L63</a></p>\n</blockquote>\n<p>On my branch it does</p>",
        "id": 276247352,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1647979678
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"284160\">@Eric Rodriguez</span> I don't have a very good Lean environment on the computer I have with me -- what's the specific error you're seeing?</p>",
        "id": 276249173,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1647980573
    },
    {
        "content": "<p>(My guess is \"failed to synthesize type class instance for normed_group ?m_1\")</p>",
        "id": 276250071,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1647981060
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113488-general/topic/calc.20with.20.60.E2.89.83*.60/near/276250071\">said</a>:</p>\n<blockquote>\n<p>(My guess is \"failed to synthesize type class instance for normed_group ?m_1\")</p>\n</blockquote>\n<p>nope:</p>\n<p><a href=\"/user_uploads/3121/6L62lZuRza_wvvYnHA55Y2q6/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/6L62lZuRza_wvvYnHA55Y2q6/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/6L62lZuRza_wvvYnHA55Y2q6/image.png\"></a></div>",
        "id": 276263373,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1647988133
    },
    {
        "content": "<p>i'll push that to the branch so everyone can see</p>",
        "id": 276263397,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1647988154
    },
    {
        "content": "<p>OK, so I changed things to fully work properly. There are some <code>@[trans]</code> tagged relations that don't follow the rules and I didn't want to change for argument order - if anyone has strong opinions on these, let me know:</p>\n<ul>\n<li><a href=\"https://leanprover-community.github.io/mathlib_docs/find/turing.evals_to_in_time\">docs#turing.evals_to_in_time</a> - the spelling is really nice, but I don't know the TM side of mathlib at all. I left a note to those who do do it there.</li>\n<li><a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.eq_on\">docs#set.eq_on</a> (this one I kind of wanted to change, as <code>s.eq_on</code> seems like a reasonable spelling to me! but I feel like the nicest spelling would be <code>f.eq g on s</code>, and that's not possible (I don't think?)</li>\n<li><a href=\"https://leanprover-community.github.io/mathlib_docs/find/continuous_map.homotopic_with\">docs#continuous_map.homotopic_with</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/continuous_map.homotopic_rel\">docs#continuous_map.homotopic_rel</a>: I'm torn on these.</li>\n</ul>",
        "id": 276313484,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1648031778
    },
    {
        "content": "<p>To avoid confusion: what works fully now? calc with <code>≃*</code>?</p>",
        "id": 276314805,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1648032471
    },
    {
        "content": "<p>nope, that's still prevented by the issue with needing <code>[]</code>s. there's currently two requirements on calc:</p>\n<ul>\n<li>the relation type's two last _explicit_ arguments must be the two things being related (that's what I'm talking about above): for example, the issue I had above is that <code>a =[f] b</code> used to be a type of the form <code>@filter_eq a b f</code> or whatever.</li>\n<li>the last 5 arguments (<strong>not</strong> only explicit) of the <code>@[trans]</code> method must be equal to <code>a, b, c, R a b, R b c</code>. This is what's holding up <code>≃*</code>, and requires a change to core.</li>\n</ul>",
        "id": 276315179,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1648032641
    },
    {
        "content": "<p>That \"last two explicit argument\" rule for relations seems to be shared by everything that uses the relation manager, so <code>refl</code>, <code>symm</code>, <code>trans</code>, the corresponding tactics, and <code>calc</code>. So, Eric's work on hammering out argument order for relations at least improves all these tactics.</p>\n<p><code>calc</code> needs to be fixed (as <a href=\"#narrow/stream/113488-general/topic/calc.20with.20.60.E2.89.83*.60/near/276247233\">this example</a> shows). There's a subtle issue that, for applications such as <code>mul_equiv</code>, we want to make sure <code>a</code>, <code>b</code>, and <code>c</code> get unified soon enough that typeclass inference involving them is able to succeed. Maybe all it needs to do is fill in the last three <em>explicit</em> arguments before the last two arguments, rather than the last three such.</p>",
        "id": 276367824,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1648055204
    },
    {
        "content": "<p>is this true? this example compiles, and it's one of the examples above that explicitly haven't had their arg order changed:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">computability.tm_computable</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">turing.evals_to_in_time</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">some</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"bp\">↑</span><span class=\"mi\">0</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refl</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 276374032,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1648057757
    },
    {
        "content": "<p><code>symmetry</code> does fail, though</p>",
        "id": 276374069,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1648057771
    },
    {
        "content": "<p>oh wait, that's not a symmetric relation <span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span></p>",
        "id": 276374094,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1648057783
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.homotopy.basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f₀</span> <span class=\"n\">f₁</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">Y</span><span class=\"o\">))</span>\n        <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f₀.homotopic_with</span> <span class=\"n\">f₁</span> <span class=\"n\">P</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">symmetry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 276374355,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1648057877
    },
    {
        "content": "<p>this one does work, though</p>",
        "id": 276374367,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1648057882
    }
]