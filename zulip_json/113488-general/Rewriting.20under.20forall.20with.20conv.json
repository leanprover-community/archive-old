[
    {
        "content": "<p>How I can I rewrite<code>(∀ a, ∀ b, b = f a → p b) ↔ (∀ a, p (f a))</code> to <code>(∀ a, ∀ b, f a = b → p b) ↔ (∀ a, p (f a))</code>? I want to apply <code>eq_comm</code> to the expression under the binder, but I can't see how to do it, and <code>conv</code> doesn't seem to give me any tool to remove the binder.</p>",
        "id": 209831064,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1599856071
    },
    {
        "content": "<p><code>simp only [@eq_comm _ _ (f _)]</code> is the easiest way.</p>",
        "id": 209831182,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1599856142
    },
    {
        "content": "<p><code> conv in (_ = f _) { rw eq_comm }</code> is another way</p>",
        "id": 209831466,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1599856301
    },
    {
        "content": "<p>If I'm in conv mode, is there an equivalent to <code>intro</code> to step inside the binder?</p>",
        "id": 209831654,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1599856427
    },
    {
        "content": "<p>I believe it's <code>congr</code></p>",
        "id": 209831743,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1599856462
    },
    {
        "content": "<p><code>congr</code> by itself throws away the entire expression</p>",
        "id": 209831772,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1599856487
    },
    {
        "content": "<p>I thought it was <code>funext</code>? <a href=\"https://leanprover-community.github.io/extras/conv.html\">https://leanprover-community.github.io/extras/conv.html</a></p>",
        "id": 209831800,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1599856502
    },
    {
        "content": "<p>mwe:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">forall_eq_apply_imp_iff</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"o\">{</span>\n  <span class=\"n\">conv</span> <span class=\"o\">{</span>\n    <span class=\"n\">to_lhs</span><span class=\"o\">,</span>\n    <span class=\"n\">congr</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"n\">sorry</span>\n<span class=\"o\">}</span>\n</code></pre></div>",
        "id": 209831826,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1599856514
    },
    {
        "content": "<p>I think <span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> gave me what I actually needed, but the manual <code>conv</code> steps would be helpful anyawy</p>",
        "id": 209831855,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1599856537
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span> , <code>funext</code> does nothing at all</p>",
        "id": 209832234,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1599856755
    },
    {
        "content": "<p><code>conv in (_ = _) { rw eq_comm },</code></p>",
        "id": 209832479,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1599856897
    },
    {
        "content": "<p><code>funext</code> is for lambdas, this would be <code>piext</code></p>",
        "id": 209832624,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1599856983
    },
    {
        "content": "<p>Which doesn't exist</p>",
        "id": 209832650,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1599857002
    },
    {
        "content": "<p>Just doesn't, or also can't?</p>",
        "id": 209832861,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1599857103
    },
    {
        "content": "<p>I wonder if this is why I get stuck using <code>conv</code> so often</p>",
        "id": 209832902,
        "sender_full_name": "Reid Barton",
        "timestamp": 1599857120
    },
    {
        "content": "<p>the <code>conv in (_ = _)</code> feels like it should be redundant--where else could you <code>rw eq_comm</code>?</p>",
        "id": 209832958,
        "sender_full_name": "Reid Barton",
        "timestamp": 1599857148
    },
    {
        "content": "<p>yeah <code>conv</code> is highly incomplete and buggy</p>",
        "id": 209832979,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1599857160
    },
    {
        "content": "<p>Also <code>conv in (_ = _) { sorry }</code> doesn't work, I have to already know what I want to do inside the {} it seems</p>",
        "id": 209833146,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1599857238
    },
    {
        "content": "<p>I see. I always assumed the documentation just didn't have the information I needed</p>",
        "id": 209833181,
        "sender_full_name": "Reid Barton",
        "timestamp": 1599857261
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/Rewriting.20under.20forall.20with.20conv/near/209833146\">said</a>:</p>\n<blockquote>\n<p>Also <code>conv in (_ = _) { sorry }</code> doesn't work, I have to already know what I want to do inside the {} it seems</p>\n</blockquote>\n<p>I think this is probably bad error reporting--most likely there is no <code>conv</code> tactic <code>sorry</code></p>",
        "id": 209833277,
        "sender_full_name": "Reid Barton",
        "timestamp": 1599857294
    },
    {
        "content": "<p>It's not, because if I type  <code>really_sorry</code> I get a different error</p>",
        "id": 209833333,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1599857336
    },
    {
        "content": "<p>oh weird</p>",
        "id": 209833512,
        "sender_full_name": "Reid Barton",
        "timestamp": 1599857411
    },
    {
        "content": "<p>Well, the documentation claims that any error in a <code>conv in</code> will be reported as the pattern not being found</p>",
        "id": 209833553,
        "sender_full_name": "Reid Barton",
        "timestamp": 1599857435
    },
    {
        "content": "<p>I guess <code>conv in (_ = _) { skip }</code> gives the behavior I was after with sorry</p>",
        "id": 209833703,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1599857521
    }
]