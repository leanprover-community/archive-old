[
    {
        "content": "<p>What's the sensible proof of</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hX</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hY</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">×</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">unfreeze_local_instances</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">hX</span> <span class=\"k\">with</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">hY</span> <span class=\"k\">with</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"n\">constructor</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">y</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 180934588,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573950070
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">nonempty</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"n\">nonempty</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">×</span> <span class=\"n\">Y</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"bp\">⟩</span> <span class=\"bp\">⟨</span><span class=\"n\">y</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">⟩</span>\n</pre></div>",
        "id": 180934664,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573950233
    },
    {
        "content": "<p>Should this be an instance?</p>",
        "id": 180934723,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573950294
    },
    {
        "content": "<p>yes, this looks like a good instance</p>",
        "id": 180934738,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573950310
    },
    {
        "content": "<p>Should this be a class:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">class</span> <span class=\"n\">bounded_above</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">is_bounded_above</span> <span class=\"o\">:</span> <span class=\"n\">bounded</span> <span class=\"o\">(</span><span class=\"bp\">≤</span><span class=\"o\">)</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 180934816,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573950465
    },
    {
        "content": "<p>I'm trying to understand the fact that a non-empty bounded-above set has a unique least upper bound.</p>",
        "id": 180934858,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573950487
    },
    {
        "content": "<p>If <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>Y</mi></mrow><annotation encoding=\"application/x-tex\">Y</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.22222em;\">Y</span></span></span></span> are non-empty bounded-above sets of reals then so is <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>X</mi><mo>+</mo><mi>Y</mi></mrow><annotation encoding=\"application/x-tex\">X+Y</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.22222em;\">Y</span></span></span></span>. I'm wondering if typeclass inference has any business knowing this.</p>",
        "id": 180934874,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573950554
    },
    {
        "content": "<p>it's debatable, but to me it seems like much ado about one theorem</p>",
        "id": 180934946,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573950693
    },
    {
        "content": "<p>sometimes I wish we could just let theorems be theorems</p>",
        "id": 180934991,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573950726
    },
    {
        "content": "<p>and just use them by name like normal people instead of going to incredible lengths to make everything appear wordless</p>",
        "id": 180935010,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573950803
    },
    {
        "content": "<p>Names are annoying, but using type classes for theorems is worse</p>",
        "id": 180936493,
        "sender_full_name": "Reid Barton",
        "timestamp": 1573953742
    },
    {
        "content": "<p>But the name of each of these theorems is <code>NaN</code></p>",
        "id": 180937781,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573956503
    },
    {
        "content": "<p>I guess I do see your point.</p>",
        "id": 180937792,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573956559
    }
]