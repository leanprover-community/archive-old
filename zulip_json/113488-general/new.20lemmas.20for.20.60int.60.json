[
    {
        "content": "<p>I'd like to have the following lemmas:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">int.add_minus_one</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">i</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">int.neg_succ_not_nonneg</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"bp\">-</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"bp\">↔</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">not_le</span><span class=\"o\">,</span> <span class=\"n\">iff_false</span><span class=\"o\">],</span> <span class=\"n\">exact</span> <span class=\"n\">int.neg_succ_lt_zero</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">int.neg_succ_sub_one</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">-</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)]</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">int.pred_to_nat</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_nat</span> <span class=\"bp\">=</span> <span class=\"n\">i.to_nat</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"o\">},</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">int.neg_succ_sub_one</span><span class=\"o\">,</span> <span class=\"n\">int.to_nat</span><span class=\"o\">],</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Any suggestions for alternatives / better names / better proofs / objections?</p>",
        "id": 226275246,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1613259378
    },
    {
        "content": "<p>Do we really need to ever talk about the hideous <code>-[1+ n]</code>?</p>",
        "id": 226275336,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613259526
    },
    {
        "content": "<p>Wasn't it winner of the least popular constructor 2020?</p>",
        "id": 226275348,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613259568
    },
    {
        "content": "<p>Of course I'm not objecting, but I always <code>nat_abs</code> when I want to get from int to nat.</p>",
        "id": 226275410,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613259628
    },
    {
        "content": "<p>Presumably the point in <code>int.add_minus_one</code> (which should be add_neg_one) is that it's simp, unlike <a href=\"https://leanprover-community.github.io/mathlib_docs/find/sub_eq_add_neg\">docs#sub_eq_add_neg</a> .symm?</p>",
        "id": 226276605,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613261536
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113488-general/topic/new.20lemmas.20for.20.60int.60/near/226276605\">said</a>:</p>\n<blockquote>\n<p>Presumably the point in <code>int.add_minus_one</code> (which should be add_neg_one) is that it's simp, unlike <a href=\"https://leanprover-community.github.io/mathlib_docs/find/sub_eq_add_neg\">docs#sub_eq_add_neg</a> .symm?</p>\n</blockquote>\n<p>Yes. (I'll change the name.)</p>",
        "id": 226276833,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1613261936
    },
    {
        "content": "<p>Johan also told me he uses <code>nat_abs</code> in preference to <code>to_nat</code>. Is there a reason for this beyond the paucity of lemmas for <code>to_nat</code>? I feel like in the long run we should just make sure both are usable.</p>",
        "id": 226276892,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1613262020
    },
    {
        "content": "<p>I think that it is just a API surface area mismatch. Feel free to use either one</p>",
        "id": 226277525,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613263252
    },
    {
        "content": "<p>I assume <code>int.pred_to_nat</code> can be golfed simply because it's a theorem for int.basic that is 7 lines long <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 226277587,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613263338
    },
    {
        "content": "<p>Is there a reason for <code>add_minus_one</code> to not be about general add groups?</p>",
        "id": 226277604,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613263406
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/new.20lemmas.20for.20.60int.60/near/226277604\">said</a>:</p>\n<blockquote>\n<p>Is there a reason for <code>add_minus_one</code> to not be about general add groups?</p>\n</blockquote>\n<p>Perhaps only to be conservative about new simp lemmas? This one seemed fine, but I can check if it hurts anything when available generally.</p>",
        "id": 226278280,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1613264462
    },
    {
        "content": "<p>we had the reverse as a simp lemma for a long time but I think we can just make up the difference with enough lemmas about <code>(a - b) + c = a + (-b + c)</code> and so on</p>",
        "id": 226278365,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613264568
    },
    {
        "content": "<p>I would prefer to simp <code>-[1+ n]</code> away in favour of <code>-(n+1)</code>...</p>",
        "id": 226285386,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613277447
    }
]