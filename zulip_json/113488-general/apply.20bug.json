[
    {
        "content": "<p>So I finally understand the exact reason for the apply bug, and it's trickier than I'd guessed. Here is an illustrative example:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">instances</span><span class=\"bp\">.</span><span class=\"n\">real</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"n\">def</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">l1</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">continuous</span><span class=\"bp\">.</span><span class=\"n\">add</span><span class=\"o\">,</span>\n  <span class=\"n\">sorry</span><span class=\"o\">,</span> <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">l2</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">continuous</span><span class=\"bp\">.</span><span class=\"n\">add</span><span class=\"o\">,</span>         <span class=\"c1\">-- invalid apply tactic, failed to unify ...</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p><code>apply</code> unfolds the types of the target and the given expression and uses the number of →s to work out how many <code>_</code>s to insert. So here, <code>apply</code> also unfolds <code>continuous f</code> to its definition <code>∀s, is_open s → is_open (f ⁻¹' s)</code>. However, in the target of <code>l2</code>, <code>is_open (f ⁻¹' s)</code> unfolds even further (to something of the form <code>∀ x ∈ f ⁻¹' s, ...</code>), while in the target of <code>l1</code> and in the type of <code>continuous.add</code>, <code>is_open (f ⁻¹' s)</code> is stuck (it's a field extractor from the topology instance, which is <code>α</code> or a metavariable). Therefore, <code>apply</code> inserts two fewer <code>_</code>s in <code>l2</code> and this causes the familiar \"apply bug\".</p>",
        "id": 195345344,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587923836
    },
    {
        "content": "<p>Does it tell you how to fix this in Lean 3.10? (and tell Sebastian how to make sure this will work in Lean 4)</p>",
        "id": 195345507,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1587924040
    },
    {
        "content": "<p>Unfortunately it is not at all clear to me so far how to fix this</p>",
        "id": 195345525,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587924101
    },
    {
        "content": "<p>apparently Lean 4 already has an <code>apply</code> tactic, though, so conceivably I could try to reproduce the issue there</p>",
        "id": 195345607,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587924230
    },
    {
        "content": "<p>there is already a hacky fix <code>apply'</code> in mathlib which apparently just implements \"try every number of <code>_</code>s\"</p>",
        "id": 195345794,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587924493
    },
    {
        "content": "<p>Maybe it's acceptable if it can be made to produce the same error messages as the current <code>apply</code> (after all, 99% of the errors when using <code>apply</code> interactively will not be due to the apply bug)</p>",
        "id": 195345811,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587924554
    },
    {
        "content": "<p>The bug is easy to fix, we just have to make <code>continuous</code> irreducible :) Joke aside, I think this would be a good idea. What do you think?</p>",
        "id": 195346305,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1587925337
    },
    {
        "content": "<p>I thought the fix was <code>refine</code>?</p>",
        "id": 195346316,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587925379
    },
    {
        "content": "<p>the workaround is <code>refine</code></p>",
        "id": 195346381,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587925464
    },
    {
        "content": "<p>I agree making <code>continuous</code> irreducible would be good, or probably better yet a structure.</p>",
        "id": 195346383,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587925474
    },
    {
        "content": "<p>However, I thought I'd first try to solve the problem at its source</p>",
        "id": 195346386,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587925488
    },
    {
        "content": "<p>Can we make <code>topological_space real</code> instance irreducible?</p>",
        "id": 195349974,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1587931161
    },
    {
        "content": "<p>I don't really like making things irreducible, it makes the library more complex and harder to understand.</p>",
        "id": 195350118,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587931308
    },
    {
        "content": "<p>There actually isn't a <code>topological_space real</code> instance, it gets created in a rather complicated way</p>",
        "id": 195350161,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587931326
    },
    {
        "content": "<p>(By \"making things irreducible\", I mean specifically using <code>attribute [irreducible]</code>.)</p>",
        "id": 195350352,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587931655
    },
    {
        "content": "<p>I think that making <code>real</code> irreducible was a good idea though, because there are two definitions at least, and the user should not be allowed to care about which one we used (I think...)</p>",
        "id": 195353199,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587936085
    },
    {
        "content": "<p>What I mean is, since <code>real</code> is a <code>Type</code>, we could just make it a structure (with one field), and then it could never be unfolded by anything, without any need for fiddling about with <code>[irreducible]</code>.</p>",
        "id": 195353552,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587936718
    },
    {
        "content": "<p>Unfortunately we can't use the same method for things like <code>real.add</code> which we also want to be irreducible</p>",
        "id": 195354074,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587937645
    },
    {
        "content": "<p>Wouldn't it be sufficient to define it as:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">read</span><span class=\"bp\">.</span><span class=\"n\">add</span> <span class=\"o\">:</span> <span class=\"n\">real</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">real</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">real</span>\n<span class=\"bp\">|</span> <span class=\"err\">\\</span><span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"err\">\\</span><span class=\"bp\">&gt;</span> <span class=\"err\">\\</span><span class=\"bp\">&lt;</span> <span class=\"n\">y</span> <span class=\"err\">\\</span><span class=\"bp\">&gt;</span> <span class=\"o\">:=</span> <span class=\"err\">\\</span><span class=\"bp\">&lt;</span> <span class=\"bp\">...</span> <span class=\"err\">\\</span><span class=\"bp\">&gt;</span>\n</pre></div>\n\n\n<p>It would only reduce if you already had <code>\\&lt; x \\&gt;</code></p>",
        "id": 195360421,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1587946804
    },
    {
        "content": "<p>That would often help, but you would still be able to prove, for example, <code>2 + 2 = 4</code> by rfl</p>",
        "id": 195361344,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587948002
    },
    {
        "content": "<p>Which I think is quite slow</p>",
        "id": 195361379,
        "sender_full_name": "Reid Barton",
        "timestamp": 1587948011
    },
    {
        "content": "<p>Once upon a time I thought that was a good thing</p>",
        "id": 195363737,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587951576
    },
    {
        "content": "<p>Also, I recall when playing with the apply bug that <code>@[irreducible]</code> made no difference, it would unfold <em>everything</em></p>",
        "id": 195363787,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587951633
    }
]