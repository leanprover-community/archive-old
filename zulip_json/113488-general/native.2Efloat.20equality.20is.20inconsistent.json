[
    {
        "content": "<p>I just noticed that float equality is exposed as an implementation of <code>decidable_eq</code>. This is not correct:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">test_eq</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">to_bool</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">test_eq_tt</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">test_eq</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">tt</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">to_bool_iff</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">rfl</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">test_eq</span> <span class=\"n\">native.float.qNaN</span> <span class=\"c1\">-- ff</span>\n</code></pre></div>",
        "id": 220979523,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609017578
    },
    {
        "content": "<p>We could just implement <code>has_equiv</code> or some other notation instead of <code>=</code> (which means something specific in lean and does not permit funny things like IEEE float equality)</p>",
        "id": 220979700,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609017861
    },
    {
        "content": "<p>Since there is no to_bits function on native.float, it would also be possible to implement a decidable_eq instance that makes any two NaNs equal, i.e. <code>x = y &lt;-&gt; x.eq y \\/ (is_nan x /\\ is_nan y)</code></p>",
        "id": 220979784,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609018003
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/commit/705530b62bc23b47c0ba9baa8e199ab376b8fd7b\">https://github.com/leanprover/lean4/commit/705530b62bc23b47c0ba9baa8e199ab376b8fd7b</a> <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 220979794,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1609018035
    },
    {
        "content": "<p>Note that you also run into trouble with +-infinity -- if they both invert to unsigned 0, things get weird again. But +-0 are supposed to be equal (in IEEE's highly non-mathematical notion of equal).</p>",
        "id": 220979905,
        "sender_full_name": "Jacques Carette",
        "timestamp": 1609018207
    },
    {
        "content": "<p>ah, that's true, my proposed alternative would have to check for signed zero</p>",
        "id": 220979914,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609018251
    },
    {
        "content": "<p>probably the easiest implementation of a conforming = is just <code>x.to_bits = y.to_bits</code></p>",
        "id": 220979920,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609018282
    },
    {
        "content": "<p>yup, +0 = -0 but 1/+0 = +inf != -inf = 1/-0</p>",
        "id": 220979921,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1609018297
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">test_congr</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">to_bool</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">test_congr_tt</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">test_congr</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">tt</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">to_bool_iff</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">test_congr</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">native.float</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"c1\">-- ff</span>\n</code></pre></div>",
        "id": 220980005,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609018442
    },
    {
        "content": "<p>I'm guessing not even a <code>quot</code> can represent the irreflexivity of nan equality?</p>",
        "id": 220980039,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1609018452
    },
    {
        "content": "<p>no, that would help with the congr example just given but not irreflexivity</p>",
        "id": 220980052,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609018485
    },
    {
        "content": "<p>But I think any quotient that identifies 0 and -0 and is closed under congr would have to identify +inf and -inf; is it possible to prove this also identifies all finite numbers?</p>",
        "id": 220980132,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609018623
    },
    {
        "content": "<p>oh lol there is <code>-nan</code> too</p>",
        "id": 220980142,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609018672
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/native.2Efloat.20equality.20is.20inconsistent/near/220980132\">said</a>:</p>\n<blockquote>\n<p>is it possible to prove this also identifies all finite numbers?</p>\n</blockquote>\n<p>-inf &lt;= x &lt;= +inf?</p>",
        "id": 220980242,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1609018837
    },
    {
        "content": "<p>uh oh: <code>tanh inf = 1</code>, <code>tanh -inf = -1</code></p>",
        "id": 220980243,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609018840
    },
    {
        "content": "<p>Are you assuming le_antisymm there <span class=\"user-mention\" data-user-id=\"221921\">@Marc Huisinga</span> ?</p>",
        "id": 220980251,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609018872
    },
    {
        "content": "<p>I'm just assuming that the equality is closed under congruence</p>",
        "id": 220980253,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609018890
    },
    {
        "content": "<p>i haven't actually looked up how stuff is specified in lean 3, just guessing</p>",
        "id": 220980305,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1609018960
    },
    {
        "content": "<p>There is no specification, they are mostly uninterpreted functions</p>",
        "id": 220980314,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609018990
    },
    {
        "content": "<p>which is mostly fine, except that this still assumes they are \"functions\", i.e. respect equality</p>",
        "id": 220980321,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609019010
    },
    {
        "content": "<p>and so implementing decidable_eq is a strong statement since two things that are equal can't be distinguished by later function application</p>",
        "id": 220980367,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609019048
    },
    {
        "content": "<p>I'm not even sure it's totally safe to assume they are functions in this sense in lean 4 since the compilation works by generating C code and gcc can do funny things like increasing the precision on intermediate computations</p>",
        "id": 220980384,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609019134
    },
    {
        "content": "<p>so determinism goes out the window</p>",
        "id": 220980391,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609019162
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"221921\">@Marc Huisinga</span> There is no <code>float</code> type in Lean 3. It seems someone added them to the Lean 3 community branch.</p>",
        "id": 220987221,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1609032171
    },
    {
        "content": "<p><code>float</code> was added to community Lean 3 by <span class=\"user-mention\" data-user-id=\"121918\">@Edward Ayers</span> in <a href=\"https://github.com/leanprover-community/lean/issues/2\">lean#2</a>.</p>",
        "id": 220987762,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1609033150
    },
    {
        "content": "<p>When you say \"inconsistent\", do you mean you can prove <code>false</code> or just that it is weird behavior in the meta world?  I tried to turn your example into a proof of <code>tt = ff</code>, but even though <code>#eval test_eq native.float.qNaN</code> comes out as<code>ff</code>, I can't find a way to prove <code>test_eq native.float.qNaN = ff</code>.  Does  the fact that <code>float</code> is <code>meta</code> protect the consistency of Lean (3 community version)?</p>",
        "id": 221009826,
        "sender_full_name": "Jason Rute",
        "timestamp": 1609077753
    },
    {
        "content": "<p>This won't even check:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">decidable_eq</span> <span class=\"n\">native.float</span> <span class=\"o\">:=</span> <span class=\"n\">native.float.dec_eq</span>\n</code></pre></div>\n<p>So even though <code>native.float.dec_eq</code> looks like an inconsistent axiom, is not usable in proofs it seems.  (Maybe this is all obvious, but I got confused with the \"inconsistent\" terminology.)</p>",
        "id": 221010479,
        "sender_full_name": "Jason Rute",
        "timestamp": 1609079147
    },
    {
        "content": "<p>Again this is probably obvious to everyone else, but I convinced myself by \"inconsistent\" here we just mean that if we prove something about <code>=</code> we should try to make make our <code>meta</code> definitions behave as if they are functions which respect Lean's equality rule, which <code>float</code> currently does not.</p>",
        "id": 221059874,
        "sender_full_name": "Jason Rute",
        "timestamp": 1609161424
    },
    {
        "content": "<p>Other than that there is nothing logically inconsistent since <code>meta</code> definitions don't have to obey Lean theorems about functions and equality.  Here is an example I coded up reproducing the problems with <code>float</code> but just using a meta type I coded in Lean:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">paradox</span> <span class=\"o\">:</span> <span class=\"n\">unit</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span> <span class=\"n\">u</span> <span class=\"o\">:=</span> <span class=\"n\">paradox</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">cheat</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">false.elim</span> <span class=\"o\">(</span><span class=\"n\">paradox</span> <span class=\"o\">())</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">inductive</span> <span class=\"n\">bad_int</span>\n<span class=\"bp\">|</span> <span class=\"n\">nan</span> <span class=\"o\">:</span> <span class=\"n\">bad_int</span>\n<span class=\"bp\">|</span> <span class=\"n\">pos</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">bad_int</span>  <span class=\"c1\">-- has +0</span>\n<span class=\"bp\">|</span> <span class=\"n\">neg</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">bad_int</span>  <span class=\"c1\">-- has -0</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">bad_int</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">bad_eq</span> <span class=\"o\">:</span> <span class=\"n\">bad_int</span> <span class=\"bp\">→</span> <span class=\"n\">bad_int</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">pos</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">neg</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">tt</span>\n<span class=\"bp\">|</span> <span class=\"n\">nan</span> <span class=\"n\">nan</span> <span class=\"o\">:=</span> <span class=\"n\">ff</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">pos</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">pos</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">j</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">neg</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">neg</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">j</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">ff</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">bad_sign</span> <span class=\"o\">:</span> <span class=\"n\">bad_int</span> <span class=\"bp\">→</span> <span class=\"n\">bad_int</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">pos</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">pos</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">neg</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">neg</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"n\">nan</span> <span class=\"o\">:=</span> <span class=\"n\">nan</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">dec_eq_rel</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">bad_int</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">if</span> <span class=\"n\">bad_eq</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"k\">then</span>\n  <span class=\"n\">decidable.is_true</span> <span class=\"o\">(</span><span class=\"n\">cheat</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">j</span><span class=\"o\">))</span>\n<span class=\"k\">else</span>\n <span class=\"n\">decidable.is_false</span> <span class=\"o\">(</span><span class=\"n\">cheat</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">≠</span> <span class=\"n\">j</span><span class=\"o\">))</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">dec_eq</span> <span class=\"o\">:</span> <span class=\"n\">decidable_eq</span> <span class=\"n\">bad_int</span> <span class=\"o\">:=</span> <span class=\"n\">dec_eq_rel</span>\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kd\">instance</span><span class=\"o\">]</span> <span class=\"n\">dec_eq</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">test_eq</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">to_bool</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">test_eq_tt</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">test_eq</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">tt</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">to_bool_iff</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">rfl</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">test_eq</span> <span class=\"n\">nan</span> <span class=\"c1\">-- ff</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">test_congr</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">to_bool</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">test_congr_tt</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">test_congr</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">tt</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">to_bool_iff</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">test_congr</span> <span class=\"o\">(</span><span class=\"n\">pos</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">neg</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"n\">bad_sign</span> <span class=\"c1\">-- ff</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">bad_int</span>\n</code></pre></div>",
        "id": 221059900,
        "sender_full_name": "Jason Rute",
        "timestamp": 1609161469
    },
    {
        "content": "<p>Yes, you can argue in this way. However, keep in mind that bad meta definitions also compromise the correctness of lean's compiler, which matters even for meta code because this is what gives them meaning. That is, to the extent that <code>meta</code> code is like code you would find in C or Haskell, this kind of thing can cause miscompilation because lean makes some assumptions about pure code being pure</p>",
        "id": 221074936,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609175286
    },
    {
        "content": "<p>We're doing a similar thing right now to cover up another inconsistency in <code>level</code> I found a long time ago:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">level</span>\n<span class=\"kd\">meta</span> <span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">max</span> <span class=\"n\">zero</span> <span class=\"n\">zero</span> <span class=\"bp\">≠</span> <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">level.no_confusion</span> <span class=\"n\">h</span>\n<span class=\"k\">#eval</span> <span class=\"n\">to_bool</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">zero</span> <span class=\"n\">zero</span> <span class=\"bp\">=</span> <span class=\"n\">zero</span><span class=\"o\">)</span> <span class=\"c1\">-- tt</span>\n</code></pre></div>",
        "id": 221075223,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609175535
    },
    {
        "content": "<p>If it's not a proof of false, it's not an inconsistency, surely</p>",
        "id": 221075685,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1609175938
    },
    {
        "content": "<p>It's still a problem if it means your unsafe code is even less safe than you expected.</p>",
        "id": 221075809,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1609176034
    },
    {
        "content": "<p>I will note that a proof of false was in fact used in Jason's example</p>",
        "id": 221080265,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609179553
    },
    {
        "content": "<p><code>meta</code> code allows you to bypass restrictions, it's not \"safe\". But that doesn't mean we shouldn't make every effort to not be wrong</p>",
        "id": 221080417,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609179701
    },
    {
        "content": "<p>i think the right thing to do for floating point equality is to check <code>x.to_bits = y.to_bits</code> and if you need the abomination that is ieee equality to call it <code>ieee_eq</code> or something</p>",
        "id": 221080572,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1609179830
    },
    {
        "content": "<p>in general you rarely want to be checking ieee equality for floating point numbers anyway, only if you're doing something like verifying that a serialization-&gt;deserialization worked where you'd want bitwise equality</p>",
        "id": 221080625,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1609179873
    },
    {
        "content": "<p>This will be even more important in Lean 4 where we'll have more power to create custom commands. For instance it should be pretty easy to create a <code>major_theorem</code> command which acts like <code>theorem</code> excepts it replaces whatever statement you type with <code>0 = 0</code> before asking for a proof. Of course the Lean kernel will see a statement and proof of <code>0 = 0</code> but a human reading the Lean file will see any statement you want.</p>",
        "id": 221080648,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1609179909
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"238605\">Kevin Lacker</span> <a href=\"#narrow/stream/113488-general/topic/native.2Efloat.20equality.20is.20inconsistent/near/221080572\">said</a>:</p>\n<blockquote>\n<p>i think the right thing to do for floating point equality is to check <code>x.to_bits = y.to_bits</code> and if you need the abomination that is ieee equality to call it <code>ieee_eq</code> or something</p>\n</blockquote>\n<p>I agree with this. Using <code>=</code> or <code>==</code> is a bad habit inherited from other programming languages that don't have such a strong stance on formal correctness. Rust uses <code>PartialEq</code> instead of <code>Eq</code> essentially only because floats exist, but I would much rather compromise on notational convenience of float ops because it's important to recognize the float weirdness happening in each operation.</p>",
        "id": 221081182,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609180387
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/native.2Efloat.20equality.20is.20inconsistent/near/221080648\">said</a>:</p>\n<blockquote>\n<p>This will be even more important in Lean 4 where we'll have more power to create custom commands. For instance it should be pretty easy to create a <code>major_theorem</code> command which acts like <code>theorem</code> excepts it replaces whatever statement you type with <code>0 = 0</code> before asking for a proof. Of course the Lean kernel will see a statement and proof of <code>0 = 0</code> but a human reading the Lean file will see any statement you want.</p>\n</blockquote>\n<p>I think it's possible to override <code>theorem</code> to do that, actually</p>",
        "id": 221081335,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609180496
    },
    {
        "content": "<p>wait, and you are telling us now...</p>",
        "id": 221081362,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1609180527
    },
    {
        "content": "<p>It may be possible in Lean 3 already, but I wanted to point out it will probably be <em>easy</em> in Lean 4.</p>",
        "id": 221081365,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1609180531
    },
    {
        "content": "<p>all these months we've been sweating to prove our theorems... and we were just one override and a <code>rfl</code> away from proving them</p>",
        "id": 221081389,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1609180554
    },
    {
        "content": "<p>Yes, this is a major concern of mine regarding the tremendous syntax flexibility of lean 4. You basically can't trust anything you see</p>",
        "id": 221081456,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609180582
    },
    {
        "content": "<div class=\"message_inline_image\"><a href=\"https://jrlburke.files.wordpress.com/2015/10/could-should.jpg\"><img src=\"https://jrlburke.files.wordpress.com/2015/10/could-should.jpg\"></a></div>",
        "id": 221081463,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1609180590
    },
    {
        "content": "<p>\"trusted syntax is an editor feature\" -- anonymous</p>",
        "id": 221081573,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1609180682
    },
    {
        "content": "<p>I think it is important to clarify a few points and avoid misinformation being spread.</p>\n<p>1- Most users assume \"inconsistent\" means \"being able to prove false\". This is <strong>not</strong> the case here.</p>\n<p>2- The bug is in the native implementation (in C++) of float equality. The bug is in the Lean 3 community branch only.</p>\n<p>3- The bug only affects people using the Lean 3 community branch as a programming language. <br>\nOne may claim it also affects users writing tactics. As far as I know, nobody uses float for writing tactics.<br>\nHowever, even if someone wrote a tactic using them, it would be just another buggy tactic. Incorrect proofs produced by buggy tactics are caught by the kernel.</p>\n<p>4- A less alarmist way to describe the bug is: \"The native implementation of float equality is incorrect. It doesn't correctly implement the type it claims to implement. This bug affects people using the Lean 3 community branch, float, and Lean as a programming language\". </p>\n<p>5- No \"proof of false\" has ever been reported to a Lean developer. If a \"proof of false\" is one day found, we would tag it as a high priority and would fix it.</p>\n<p>6- In Lean, users can inspect, and export objects constructed using the system. This allows users to scrutinize any result proved using Lean. In Lean 4, users have access to not only the Kernel terms but all built-in data structures representing parsers, elaborators, instances, classes, etc. </p>\n<p>7- One doesn't need \"tremendous syntax flexibility\" to tricky naive users to believe they proved something they didn't. Example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">notation</span> <span class=\"bp\">`</span><span class=\"n\">false</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">unsound</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n  <span class=\"n\">trivial</span>\n</code></pre></div>\n<p>One can easily obfuscate the example above and make the exploit less obvious. However, the previous point remains, we provide tools for users to scrutinize and export their results.</p>\n<p>8- Users can write their own independent type checkers and visualizers for Lean developments. A few independent type checkers have already been implemented. I know that 2 of them are efficient enough for checking real/big Lean developments.</p>\n<p>To be honest, some of the comments on this thread read like FUD <a href=\"https://en.wikipedia.org/wiki/Fear,_uncertainty,_and_doubt\">https://en.wikipedia.org/wiki/Fear,_uncertainty,_and_doubt</a></p>",
        "id": 221085430,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1609183831
    },
    {
        "content": "<p>I'm not laying any blame at lean 4 here. My original post was about lean 3 community edition. Some of the follow on comments apply to lean 4, but this particular issue has already been fixed</p>",
        "id": 221085836,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609184183
    },
    {
        "content": "<p>Re: 7, I agree that it's easy to write things that don't mean what they say in lean 3 (and even easier in lean 4). This doesn't make me any less concerned. Ideally we would have something like the export format with trusted syntax, but where you can actually read it. This does not currently exist.</p>",
        "id": 221085997,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609184377
    },
    {
        "content": "<p>Re: 1, I don't have a good term for this. Is \"miscompilation\" better? \"Inconsistent with reality\"? The code doesn't do what it says. Regarding \"can't prove false\", of course in meta code you very much can, but that's obviously not what people are talking about. <code>native.float</code> is a meta feature, it lacks whatever sense of correctness you can meaningfully apply to meta things.</p>",
        "id": 221086188,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609184580
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/native.2Efloat.20equality.20is.20inconsistent/near/221081456\">said</a>:</p>\n<blockquote>\n<p>Yes, this is a major concern of mine regarding the tremendous syntax flexibility of lean 4. You basically can't trust anything you see</p>\n</blockquote>\n<p>I admit this is hyperbolic. Of course in practice this isn't likely to be a major issue. But from a formal perspective, I really don't know if I can tighten this claim up very much; you more or less have to read the entirety of the lean code and parser infrastructure before you can make any sure claims about the lack of tricky parser mechanisms in use. Maybe we need a \"Lean Zero\" for verified syntax? :)</p>",
        "id": 221086701,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609185116
    },
    {
        "content": "<p>Leo, I don't know how much of your message is directed towards my two messages in this thread, but I'd like to clarify that I'm not worried at all, and I'm super excited to get access to Lean 4 flexibility in the future. My message was a comment on Mario's \"meta code allows you to bypass restrictions, it's not \"safe\". But that doesn't mean we shouldn't make every effort to not be wrong\". As you point out yourself, there are ways to write deceiving Lean code, but this wasn't meant as a critique, only reinforcing the claim that we should make every effort to write good meta code.</p>",
        "id": 221087056,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1609185474
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"115715\">Jason Rute</span> <a href=\"#narrow/stream/113488-general/topic/native.2Efloat.20equality.20is.20inconsistent/near/221009826\">said</a>:</p>\n<blockquote>\n<p>When you say \"inconsistent\", do you mean you can prove <code>false</code> or just that it is weird behavior in the meta world?  I tried to turn your example into a proof of <code>tt = ff</code>, but even though <code>#eval test_eq native.float.qNaN</code> comes out as<code>ff</code>, I can't find a way to prove <code>test_eq native.float.qNaN = ff</code>.  Does  the fact that <code>float</code> is <code>meta</code> protect the consistency of Lean (3 community version)?</p>\n</blockquote>\n<p>Leo already said this, but just to be clear: This is just weird behavior in <code>meta</code> world. The kernel doesn't see any declarations marked <code>meta</code>, so logical soundness of the lean kernel is not compromised.</p>",
        "id": 221087544,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609185898
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>  This is not the first message I see from you that has a very \"alarmist tone\". <br>\nThe main point is the bug does not affect the soundness of results proved using Lean. <br>\nThe key issue here for me is: Should we trust results proved using Lean?</p>\n<blockquote>\n<p>Regarding \"can't prove false\", of course in meta code you very much can, but that's obviously not what people are talking about. </p>\n</blockquote>\n<p>I disagree. It was not obvious to Jason Rute. He wrote</p>\n<blockquote>\n<p>When you say \"inconsistent\", do you mean you can prove false or just that it is weird behavior in the meta world?</p>\n</blockquote>\n<p>He is clearly concerned about the soundness of the system.</p>\n<blockquote>\n<p>Re: 1, I don't have a good term for this. Is \"miscompilation\" better? </p>\n</blockquote>\n<p>You could have simply said: \"this bug does not affect the soundness of results proved using Lean\"<br>\nYou could have just answered \"no, you cannot prove false\" to Jason. He was clearly asking whether the bug affects the soundness of the system or not.</p>\n<blockquote>\n<p>Ideally we would have something like the export format with trusted syntax, but where you can actually read it. This does not currently exist.</p>\n</blockquote>\n<p>We don't need an export format in Lean 4 anymore. Users can traverse all data structures and export whatever they want using the format they want.<br>\nAs far as I know, Gabriel's external type checker can pretty-print the results it checked.</p>\n<blockquote>\n<p>Maybe we need a \"Lean Zero\" for verified syntax? <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>\n</blockquote>\n<p>If you are concerned so much about this problem, you should do it.<br>\nI am not. There are many more important problems that need to be addressed. <br>\nI acknowledge that Lean has many problems, but soundness is not one of them. As I said, no \"proof of false\" has ever been reported to me.<br>\nI am clearly referring to \"non-meta\" here.</p>",
        "id": 221087872,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1609186168
    }
]