[
    {
        "content": "<p>When reading about something proved in Coq, I've seen often the term \"proofs by reflectivity\". I don't <em>really</em> understand what they are, and I was wondering what the Lean analogue was?</p>",
        "id": 281798899,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1652174928
    },
    {
        "content": "<p>It sounds like a confusion between \"proof by reflexivity\" and \"proof by reflection\", although often proofs by reflection arrange for the core hard step to be an application of <code>rfl</code> so in that sense it's also a \"proof by reflexivity\"</p>",
        "id": 281800367,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1652175854
    },
    {
        "content": "<p>The basic idea is to write whatever you want to check as a <code>bool</code> function and prove that it is equal to <code>tt</code> by <code>rfl</code>, which forces the kernel to unfold the definition and progress the computation to completion in order to show that it is (or isn't) definitionally equal to <code>tt</code></p>",
        "id": 281800452,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1652175938
    },
    {
        "content": "<p>Sorry, I mean proofs by reflection I think.</p>",
        "id": 281800454,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1652175940
    },
    {
        "content": "<p>Oh, I see, that's interesting. And hence produce a proof of the underlying <code>Prop</code>?</p>",
        "id": 281800571,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1652176001
    },
    {
        "content": "<p>I don't think I've seen that kind of thing in Lean directly, though maybe just not in the stuff I look at.</p>",
        "id": 281800749,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1652176137
    },
    {
        "content": "<p>Coq's kernel is much better at computation than Lean( 3)'s, so for Lean it's much more practical to compute a proof in the elaborator.</p>",
        "id": 281801324,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1652176484
    },
    {
        "content": "<p>However, in Mathlib we do have an experimental <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#ring2\">tactic#ring2</a> which works by reflection.</p>",
        "id": 281801345,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1652176510
    },
    {
        "content": "<p>Here's a simple example of the technique:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">is_nonempty</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"n\">ff</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">tt</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">all</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"n\">tt</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">all</span> <span class=\"n\">l</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">all_of_all</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">p</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">l</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">all</span> <span class=\"n\">α</span> <span class=\"n\">p</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"n\">tt</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">tt</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"n\">h</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">or.inl</span> <span class=\"n\">rfl</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">all</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"n\">h</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">or.inr</span> <span class=\"n\">h'</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">all</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">all_of_all</span> <span class=\"n\">h.2</span> <span class=\"n\">_</span> <span class=\"n\">h'</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">nonempty_of_nonempty</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">l</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">is_nonempty</span> <span class=\"n\">α</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"n\">tt</span><span class=\"o\">),</span> <span class=\"n\">l</span> <span class=\"bp\">≠</span> <span class=\"o\">[]</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"n\">h</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">cases</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">all_nonempty'</span> <span class=\"o\">:</span> <span class=\"n\">all</span> <span class=\"n\">is_nonempty</span> <span class=\"o\">[[</span><span class=\"mi\">1</span><span class=\"o\">],</span> <span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">],</span> <span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">]]</span> <span class=\"bp\">=</span> <span class=\"n\">tt</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">all_nonempty</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"o\">[[</span><span class=\"mi\">1</span><span class=\"o\">],</span> <span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">],</span> <span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">]],</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">nonempty_of_nonempty</span> <span class=\"o\">(</span><span class=\"n\">all_of_all</span> <span class=\"n\">all_nonempty'</span> <span class=\"n\">x</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 281801378,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1652176532
    },
    {
        "content": "<p>In mathlib we use a slightly different variation on the technique, where we associate to propositions a proof that the proposition is equivalent to a boolean, and then we can force that boolean to true using <code>dec_trivial</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">all_nonempty</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"o\">[[</span><span class=\"mi\">1</span><span class=\"o\">],</span> <span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">],</span> <span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">]],</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"n\">dec_trivial</span>\n</code></pre></div>",
        "id": 281801502,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1652176615
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"238446\">Anne Baanen</span> <a href=\"#narrow/stream/113488-general/topic/.22Proofs.20by.20reflectivity.22.20in.20Lean/near/281801324\">said</a>:</p>\n<blockquote>\n<p>Coq's kernel is much better at computation than Lean( 3)'s, so for Lean it's much more practical to compute a proof in the elaborator.</p>\n</blockquote>\n<p>By the way this is still true of lean 4, the kernel evaluator is still not very optimized. There are talks of a more efficient reduction engine (a Krivine machine) but this has not been done and probably isn't a near term goal</p>",
        "id": 281801720,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1652176787
    },
    {
        "content": "<p>Thanks Mario - great examples.</p>\n<p>The fact that Coq's kernel does computation better is I guess why most (all?) cryptography stuff I look at is done in it. Which is a shame because I wish I could have the features and ease-of-use of mathlib with computation too...</p>",
        "id": 281804564,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1652178529
    },
    {
        "content": "<p>I don't know how hard \"code generation\" stuff like Fiat Crypto would be to do in Lean, if it's even possible.</p>",
        "id": 281804718,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1652178618
    },
    {
        "content": "<p>There are several things to tease apart here. Heavy computation <em>in the kernel</em> is not good, but on the other hand regular type checking is fine and that's what is used in tactics like <code>norm_num</code>. Also <code>#eval</code> has gotten a lot faster, and in lean 4 you can compile things natively, so \"code generation\" is certainly possible</p>",
        "id": 281805501,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1652179160
    },
    {
        "content": "<p>I think it would be a mistake to draw the conclusion that \"lean is not good at computation\" from this</p>",
        "id": 281805543,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1652179199
    },
    {
        "content": "<p>If I had my way kernels wouldn't ever do any computation at all, it is a misuse of the system IMO</p>",
        "id": 281805662,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1652179265
    },
    {
        "content": "<p>(More specifically, kernels should not do anything that is worse than linear time complexity in one step. The complexity of one step in DTT can have an astronomical complexity beyond anything I have words to describe)</p>",
        "id": 281805895,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1652179413
    },
    {
        "content": "<p>Aha - thanks.</p>",
        "id": 281806065,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1652179499
    },
    {
        "content": "<p>Sorry - lots of concepts here and not all of which I'm familiar with :)</p>",
        "id": 281806084,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1652179514
    },
    {
        "content": "<p>What does Lean 4 compile to?</p>",
        "id": 281806127,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1652179545
    },
    {
        "content": "<p>You could say it compiles to C, but I think it is more accurate to just think of it as compiling straight to machine code like other compiled languages</p>",
        "id": 281806217,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1652179593
    },
    {
        "content": "<p>this is a bit different from \"code generation\" a la Coq where we have a reasonably clean source-to-source translation into some other functional programming language</p>",
        "id": 281806407,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1652179734
    },
    {
        "content": "<p>the generated C code is not particularly easy to follow</p>",
        "id": 281806425,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1652179751
    },
    {
        "content": "<p>Fiat Crypto is Coq that generates verified C, which is wacky. Especially because you then have to, uh, compile it, and who knows what that compiler does.</p>",
        "id": 281806441,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1652179766
    },
    {
        "content": "<p>A big concern is cryptography code of course is avoiding branching/keeping code constant time when it depends on secrets. Is that something that's enforceable in Lean4 compilation?</p>",
        "id": 281806530,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1652179822
    },
    {
        "content": "<p>yeah I'm not a fan of that kind of architecture, but compiling to verified x86 / other ISA means that you probably lose out on decades of optimization work</p>",
        "id": 281806559,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1652179854
    },
    {
        "content": "<p>Lean4 uses an off the shelf compiler after generating C code so you can levy those same complaints at it</p>",
        "id": 281806614,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1652179890
    },
    {
        "content": "<p>no, lean4 has no concept of runtime complexity in the language, much less constant time compilation</p>",
        "id": 281806657,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1652179923
    },
    {
        "content": "<p>you could write your own compiler for a custom DSL though</p>",
        "id": 281806721,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1652179959
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/.22Proofs.20by.20reflectivity.22.20in.20Lean/near/281806614\">said</a>:</p>\n<blockquote>\n<p>Lean4 uses an off the shelf compiler after generating C code so you can levy those same complaints at it</p>\n</blockquote>\n<p>Sure, but that at least is known. The concern with FC stuff is that someone takes the C it generates and misuses it.</p>",
        "id": 281806735,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1652179973
    },
    {
        "content": "<p>misuses in what way?</p>",
        "id": 281806757,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1652179989
    },
    {
        "content": "<p>who knows. people find so many ways to write cryptography badly.</p>",
        "id": 281806785,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1652180011
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/.22Proofs.20by.20reflectivity.22.20in.20Lean/near/281806657\">said</a>:</p>\n<blockquote>\n<p>no, lean4 has no concept of runtime complexity in the language, much less constant time compilation</p>\n</blockquote>\n<p>Well, avoiding branching at least I guess is what I meant.</p>",
        "id": 281806813,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1652180037
    },
    {
        "content": "<p>well that's one of the hard parts in crypto, you have to anticipate everything that can go wrong and this is hard</p>",
        "id": 281806869,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1652180050
    },
    {
        "content": "<p>Right - I guess I'm talking about the related-but-different thing of \"if you provide a thing, people will use it - how much should you worry about people using it wrongly\". This goes double if you claims something is \"verified\".</p>",
        "id": 281806930,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1652180099
    },
    {
        "content": "<p>I don't think it is possible to promise no branching from a C compiler, it is free to compile anything satisfying the as-if rule wrt the C semantics</p>",
        "id": 281806941,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1652180104
    },
    {
        "content": "<p>the only feasible way I see to avoid branching is to generate the assembly directly and restrict your grammar to things you know compile a certain way</p>",
        "id": 281807068,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1652180185
    },
    {
        "content": "<p>I think this is what the Project Everest/Vale/EverCrypt people might do.</p>",
        "id": 281807148,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1652180262
    },
    {
        "content": "<p>At some point I might have to learn F* but - crucially - I don't want to ;) (it's fine, it's just not as pleasing to me as, say, Lean code generally is)</p>",
        "id": 281807271,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1652180329
    }
]