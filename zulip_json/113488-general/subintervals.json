[
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/mathlib/issues/4913\">#4913</a> I introduce a type called <a href=\"https://github.com/leanprover-community/mathlib/blob/ee354e62f8114298f7446ea7db6dc9b9be2df03b/src/data/set/intervals/subinterval.lean#L43\"><code>set.subinterval</code></a> defined as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- A nonempty closed subinterval of set `α`. -/</span>\n<span class=\"kd\">@[ext]</span> <span class=\"kd\">structure</span> <span class=\"n\">subinterval</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">left</span> <span class=\"n\">right</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">nontrivial</span> <span class=\"o\">:</span> <span class=\"n\">left</span> <span class=\"bp\">≤</span> <span class=\"n\">right</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">Icc_subset</span> <span class=\"o\">:</span> <span class=\"n\">set.Icc</span> <span class=\"n\">left</span> <span class=\"n\">right</span> <span class=\"bp\">⊆</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I'm not sure if bundling <code>Icc_subset</code> is a good idea. While it is convenient for the proofs in <a href=\"https://github.com/leanprover-community/mathlib/issues/4913\">#4913</a> (I construct a decreasing sequence of subintervals, and it's convenient to automatically know that <code>s</code> includes all of them), this type is less reusable than, e.g.,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">binterval</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">left</span> <span class=\"n\">right</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">nontrivial</span> <span class=\"o\">:</span> <span class=\"n\">left</span> <span class=\"bp\">≤</span> <span class=\"n\">right</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>with <code>binterval.Ixx</code> methods to access the underlying <code>set</code>s. What do you think?</p>\n<p>Another option is to completely drop this type and deal with <code>f : α → α → M</code> instead of <code>f : subinterval s → M</code>.</p>",
        "id": 219237580,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1607449259
    }
]