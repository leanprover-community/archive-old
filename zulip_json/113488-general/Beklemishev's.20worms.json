[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">next_aux</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">nat</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">hd</span> <span class=\"bp\">::</span> <span class=\"n\">tl</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">hd</span> <span class=\"bp\">&lt;</span> <span class=\"n\">N</span> <span class=\"k\">then</span> <span class=\"mi\">0</span> <span class=\"k\">else</span> <span class=\"n\">next_aux</span> <span class=\"n\">tl</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n\n<span class=\"n\">def</span> <span class=\"n\">next</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">list</span> <span class=\"n\">nat</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"o\">[]</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">::</span> <span class=\"n\">tl</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">tl</span>\n<span class=\"bp\">|</span> <span class=\"o\">((</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">::</span> <span class=\"n\">tl</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">let</span> <span class=\"n\">index</span> <span class=\"o\">:=</span> <span class=\"n\">next_aux</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">tl</span><span class=\"o\">,</span>\n    <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"n\">n</span> <span class=\"bp\">::</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"k\">take</span> <span class=\"n\">index</span> <span class=\"n\">tl</span><span class=\"o\">,</span>\n    <span class=\"n\">G</span> <span class=\"o\">:=</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">drop</span> <span class=\"n\">index</span> <span class=\"n\">tl</span> <span class=\"k\">in</span>\n    <span class=\"o\">((</span><span class=\"bp\">++</span> <span class=\"n\">B</span><span class=\"o\">)</span><span class=\"err\">^</span><span class=\"o\">[</span><span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">++</span> <span class=\"n\">G</span>\n\n<span class=\"c1\">-- Beklemishev&#39;s worms</span>\n<span class=\"n\">def</span> <span class=\"n\">worm_step</span> <span class=\"o\">(</span><span class=\"n\">initial</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">step</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">,</span> <span class=\"n\">list</span> <span class=\"n\">nat</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"n\">initial</span><span class=\"o\">]</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">next</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">worm_step</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"o\">(</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"mi\">52</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">worm_step</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- It will terminate</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">worm_principle</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">worm_step</span> <span class=\"n\">n</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>",
        "id": 154084805,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1546260245
    },
    {
        "content": "<p>Try to fill the sorry :P</p>",
        "id": 154084808,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1546260253
    },
    {
        "content": "<p>It's like Goodstein's theorem. I'd never seen it before. Nice! Is there some proof using ordinals like Goodstein?</p>",
        "id": 154087365,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1546265399
    },
    {
        "content": "<p>Could you make it so that the proof is <code>dec_trivial</code>?</p>",
        "id": 154087416,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1546265454
    },
    {
        "content": "<p>add some clever decidability instance</p>",
        "id": 154087424,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1546265467
    },
    {
        "content": "<p>Not really. (See <a href=\"https://www.researchgate.net/publication/27709556_The_Worm_principle\" target=\"_blank\" title=\"https://www.researchgate.net/publication/27709556_The_Worm_principle\">https://www.researchgate.net/publication/27709556_The_Worm_principle</a> for the original proof that this function terminates.) You can make any theorem provable by <code>dec_trivial</code> because if it's provable then it's decidable, but the really important part of this argument is the well-foundedness of a particular order. I would suggest mapping to <code>onote</code></p>",
        "id": 154098834,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1546285217
    },
    {
        "content": "<p>Here's the ordinal function:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">build_aux</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">nat</span> <span class=\"bp\">×</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">nat</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">((</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">::</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">l&#39;</span><span class=\"o\">,</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">build_aux</span> <span class=\"n\">l</span> <span class=\"k\">in</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">::</span><span class=\"n\">l&#39;</span><span class=\"o\">,</span> <span class=\"n\">L</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">::</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">l&#39;</span><span class=\"o\">,</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">build_aux</span> <span class=\"n\">l</span> <span class=\"k\">in</span> <span class=\"o\">([],</span> <span class=\"n\">l&#39;</span> <span class=\"bp\">::</span> <span class=\"n\">L</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"o\">([],</span> <span class=\"o\">[])</span>\n\n<span class=\"n\">def</span> <span class=\"n\">build</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">l&#39;</span><span class=\"o\">,</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">build_aux</span> <span class=\"n\">l</span> <span class=\"k\">in</span> <span class=\"n\">l&#39;</span> <span class=\"bp\">::</span> <span class=\"n\">L</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">build_lt</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">build</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">sizeof</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">sizeof</span> <span class=\"n\">l</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span>\n\n<span class=\"n\">local</span> <span class=\"kn\">notation</span> <span class=\"bp\">`</span><span class=\"n\">ω</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">ordinal</span><span class=\"bp\">.</span><span class=\"n\">omega</span>\n<span class=\"n\">noncomputable</span> <span class=\"n\">def</span> <span class=\"n\">map</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"n\">ordinal</span> <span class=\"bp\">|</span> <span class=\"n\">l</span> <span class=\"o\">:=</span>\n<span class=\"k\">if</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"n\">l</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"k\">else</span>\n<span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">pmap</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">ω</span> <span class=\"err\">^</span> <span class=\"n\">map</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">build</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">build_lt</span> <span class=\"n\">l</span><span class=\"o\">))</span>\n</pre></div>",
        "id": 154106468,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1546299203
    }
]