[
    {
        "content": "<p>We're trying to come up with nice notation for the ascending ((n + k)!/n!) and descending (n!/(n - k)!) factorials. I'm pretty partial to <code>nꜝk</code> for the ascending one, but there isn't an index version. Here's what searching for \"exclamation\" on <a href=\"https://unicode-search.net/unicode-namesearch.pl\">the Unicode website</a> yields:</p>\n<ul>\n<li><code>n!k</code></li>\n<li><code>n¡k</code></li>\n<li><code>nǃk</code></li>\n<li><code>n‼k</code> I swear this symbol is great for double factorial</li>\n<li><code>n⁈k</code></li>\n<li><code>n⁉k</code></li>\n<li><code>n❕k</code></li>\n<li><code>n❗k</code></li>\n<li><code>n❢k</code></li>\n<li><code>n❣k</code></li>\n<li><code>nꜝk</code> This one could be nice for the ascending factorial</li>\n<li><code>nꜞk</code> Maybe this one for the descending factorial?</li>\n<li><code>nꜟk</code> Or this one?</li>\n<li><code>n︕k</code></li>\n<li><code>n﹗k</code></li>\n<li><code>n！k</code><br>\nWhich do you prefer? Also, do you like the layout <code>n &lt;operator&gt; k</code>?</li>\n</ul>",
        "id": 242307283,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1623394449
    },
    {
        "content": "<p>Its not pretty but you could also try and approximate the Pochammer symbol notation with<code>n⁽k⁾</code> (untested if this can work in lean)</p>",
        "id": 242307852,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1623394997
    },
    {
        "content": "<p>I was thinking about <code>n^(k)</code> and <code>n_(k)</code> but it doesn't look that great and it always bugged me that ascending adn descending factorials weren't using exclamation marks.</p>",
        "id": 242307941,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1623395080
    },
    {
        "content": "<p>I do like the symmetry of pairs like <code>n¡k</code> <code>nǃk</code> and <code>nꜝk</code> <code>nꜞk</code>. Did you look at <a href=\"https://en.wikipedia.org/wiki/Falling_and_rising_factorials#Alternate_notations\">https://en.wikipedia.org/wiki/Falling_and_rising_factorials#Alternate_notations</a> the superscript + and minus versions there could work? Or of course just <code>P(n,k)</code>...</p>",
        "id": 242308236,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1623395318
    },
    {
        "content": "<p>I will be very sad if there are big computations involving <code>nꜝk / nꜞk</code>. At reasonable distances they are not distinguishable</p>",
        "id": 242308914,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623395959
    },
    {
        "content": "<p>honestly I think <code>n^(k)</code> and <code>n_(k)</code> are better, although there are probably other issues with that</p>",
        "id": 242308990,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623396016
    },
    {
        "content": "<p>how about <code>n !+ k</code> and <code>n !- k</code></p>",
        "id": 242309070,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623396096
    },
    {
        "content": "<p>I'm now defining the notation: <code>infix </code> !⁺ <code>:50 := asc_factorial</code>.<br>\nWhat's the correct priority?</p>",
        "id": 242521341,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1623605298
    },
    {
        "content": "<p>probably somewhere around +, *, ^ : what do you want to be higher priority?</p>",
        "id": 242521365,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623605358
    },
    {
        "content": "<p>I think we want <code>!⁺</code> to have priority.</p>",
        "id": 242521373,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1623605393
    },
    {
        "content": "<p>so <code>a ^ b !+ c</code> means <code>a ^ (b !+ c)</code>?</p>",
        "id": 242521442,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623605415
    },
    {
        "content": "<p>Or rather I think it fits between <code>+</code> and <code>^</code></p>",
        "id": 242521446,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1623605431
    },
    {
        "content": "<p><code>*</code> is also between those</p>",
        "id": 242521455,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623605452
    },
    {
        "content": "<p>It should probably be below <code>*</code></p>",
        "id": 242521463,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1623605466
    },
    {
        "content": "<p>I think we more often want to multiply an ascending factorial than to ascend factor(?) a product.</p>",
        "id": 242521492,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1623605522
    },
    {
        "content": "<p>You can use <code>#print notation *</code> to see the priority of everything. There is no right answer here. You have to decide what you want <code>a * b !+ c</code> to mean.</p>",
        "id": 242521522,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1623605533
    },
    {
        "content": "<p>so between 65 and 70 then. Should it be equal to either one?</p>",
        "id": 242521523,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623605536
    },
    {
        "content": "<p>You could see how other notations are used in the literature.</p>",
        "id": 242521565,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1623605573
    },
    {
        "content": "<p>a lot of other things have prec 65 or 70 since that means they get ordered in the same left associative class</p>",
        "id": 242521567,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623605579
    },
    {
        "content": "<p>like + and - are both 65</p>",
        "id": 242521573,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623605586
    },
    {
        "content": "<p>so that <code>a + b - c</code> means <code>(a + b) - c</code> and <code>a - b + c</code> means <code>(a - b) + c</code></p>",
        "id": 242521580,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623605604
    },
    {
        "content": "<p>Ah sorry, I meant that <code>!⁺</code> should have priority over <code>*</code></p>",
        "id": 242521592,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1623605621
    },
    {
        "content": "<p>When we were defining things like external direct sums and products <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mo>⨁</mo><mi>i</mi></msub><msub><mi>A</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\bigoplus_i A_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0497100000000001em;vertical-align:-0.29971000000000003em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">⨁</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.16195399999999993em;\"><span style=\"top:-2.40029em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.29971000000000003em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> etc we looked in the literature to see how these things were used. We had to decide what mathematicians meant by <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mo>∏</mo><mi>i</mi></msub><msub><mi>a</mi><mi>i</mi></msub><mo>+</mo><mi>c</mi></mrow><annotation encoding=\"application/x-tex\">\\prod_i a_i + c</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0497100000000001em;vertical-align:-0.29971000000000003em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∏</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.16195399999999993em;\"><span style=\"top:-2.40029em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.29971000000000003em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">c</span></span></span></span></p>",
        "id": 242521637,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1623605643
    },
    {
        "content": "<p>If people are using notation like <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mrow></mrow><mi>n</mi></msub><msub><mi>P</mi><mi>k</mi></msub></mrow><annotation encoding=\"application/x-tex\">{}_nP_k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> or whatever then it should have a very high priority.</p>",
        "id": 242521661,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1623605710
    },
    {
        "content": "<p><code>#print notation</code> is even better since it shows all notations (although it would be nice to sort it by priority)</p>",
        "id": 242521714,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623605764
    },
    {
        "content": "<p>Yeah, exactly.</p>",
        "id": 242521726,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1623605787
    },
    {
        "content": "<p>scalar smul has priority 73</p>",
        "id": 242521744,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623605822
    },
    {
        "content": "<p>But I don't think we ever use <code>a ^ b !⁺ c</code> as <code>a ^ (b !⁺ c)</code></p>",
        "id": 242521748,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1623605829
    },
    {
        "content": "<p>However  <code>a !⁺b ^ c</code> could be <code>(a !⁺b) ^ c</code></p>",
        "id": 242521765,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1623605873
    },
    {
        "content": "<p>oh, you want them to be equal prec?</p>",
        "id": 242521815,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623605897
    },
    {
        "content": "<p>Parsing it as  <code>a !⁺ (b ^ c)</code> is fine, though</p>",
        "id": 242521823,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1623605915
    },
    {
        "content": "<p>also, FWIW I still think it's better without unicode</p>",
        "id": 242521839,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623605946
    },
    {
        "content": "<p>it's literally \"+ k\"</p>",
        "id": 242521844,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623605958
    },
    {
        "content": "<p>Yeah but isn't like conflicting notation with <code>+</code>?</p>",
        "id": 242521850,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1623605986
    },
    {
        "content": "<p>no, <code>!+</code> is a token</p>",
        "id": 242521853,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623605996
    },
    {
        "content": "<p>or will be</p>",
        "id": 242521855,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623606000
    },
    {
        "content": "<p>Okay then :)</p>",
        "id": 242521915,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1623606050
    },
    {
        "content": "<p>it will cause a problem if someone wants to write <code>a!+b</code> to mean <code>a! + b</code> but we put spaces in that kind of thing anyway by style guide</p>",
        "id": 242521916,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623606054
    },
    {
        "content": "<p>So <code>infix </code> !+ <code>:74 := asc_factorial</code> is fine?</p>",
        "id": 242522022,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1623606215
    },
    {
        "content": "<p>(a zulip tip - use double backticks for code containing <code> ` </code>, triple backticks for code containing <code> `` </code>, etc)</p>",
        "id": 242522854,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1623607302
    },
    {
        "content": "<p>you should put spaces around it like <code>infix ` !+ `:74 := asc_factorial</code>, which makes it appear with spaces around it when pretty printed</p>",
        "id": 242525626,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623611099
    },
    {
        "content": "<p>I already have <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 242526009,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1623611564
    },
    {
        "content": "<p>How about just no notation? I think unfamiliar notation is generally worse than nothing.</p>",
        "id": 242840848,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1623829306
    },
    {
        "content": "<p>Have you had a look at the PR? (<a href=\"https://github.com/leanprover-community/mathlib/issues/7759\">#7759</a>) It looks nice in my opinion.</p>",
        "id": 242847698,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1623833077
    },
    {
        "content": "<p>I think it would be best not to introduce new notation in the same PR as one that swaps around definition names - it would be much easier to review whether the notation is a good idea if it were a PR that did nothing other than switch existing lemmas to the new notation</p>",
        "id": 242914281,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1623864437
    },
    {
        "content": "<p>Okay sure. Will split</p>",
        "id": 242914519,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1623864576
    }
]