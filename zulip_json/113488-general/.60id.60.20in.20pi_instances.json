[
    {
        "content": "<p>I think I know why <code>simp</code> sometimes fails to use <code>one_apply</code> etc.  Here is an <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">pi_instances</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"n\">def</span> <span class=\"n\">eval_default</span> <span class=\"o\">[</span><span class=\"n\">inhabited</span> <span class=\"n\">I</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">default</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">default</span> <span class=\"n\">I</span><span class=\"o\">)</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">eval_default_one</span> <span class=\"o\">[</span><span class=\"n\">inhabited</span> <span class=\"n\">I</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">has_one</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n  <span class=\"n\">eval_default</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">[</span><span class=\"n\">inhabited</span> <span class=\"n\">I</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">group</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">eval_default</span> <span class=\"o\">(</span><span class=\"n\">F</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span>\n</code></pre></div>\n\n\n<p>The last <code>by simp</code> successfully rewrites <code>F⁻¹*F=1</code>, then fails to apply <code>eval_default_one</code>.</p>\n<p>If I manually redefine <code>pi.group</code>, then this example works. But <code>by pi_instance</code> adds <code>id</code> to <code>mul</code> and <code>one</code> fields. We removed <code>eq.mpr</code>s coming from <code>refine_struct</code> some time ago. Any idea which like adds <code>id</code>?</p>",
        "id": 201149027,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1592404275
    },
    {
        "content": "<p>Previous thread: <a href=\"#narrow/stream/113488-general/topic/Need.20help.20with.20class.20instance.20resolution\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Need.20help.20with.20class.20instance.20resolution</a></p>",
        "id": 201150072,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1592404703
    },
    {
        "content": "<p>The offending line is <code>applyc</code>. <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Is there a better tactic that we can use here without adding an <code>id</code>?</p>",
        "id": 201156784,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1592407309
    },
    {
        "content": "<p>A work-around is to wrap results in <code>dsimp_result</code>, which may remove the <code>id</code> again. But it's better to fix it.</p>",
        "id": 201157890,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1592407745
    },
    {
        "content": "<p>There's also <code>clean</code>, right?</p>",
        "id": 201165305,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592410955
    },
    {
        "content": "<p>It seems that a proper fix will involve changing core. Currently we have lots of workarounds (e.g., using <code>λ x, f x + g x</code> instead of <code>f + g</code>) in different parts of the library. I think that <code>dsimp_result</code> + a TODO in a comment and/or a <code>github</code> issue is better than the current situation.</p>",
        "id": 201173468,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1592414766
    },
    {
        "content": "<p>How do I emulate <code>refine_struct { .. pi.has_one, .. pi.has_mul, .. }</code> in a <code>meta</code> function?</p>",
        "id": 201343686,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1592529150
    },
    {
        "content": "<p>I want to use <code>ancestor</code> attribute to get data from already defined instances.</p>",
        "id": 201343711,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1592529194
    },
    {
        "content": "<p>Another question: how do I use <code>clean</code>?</p>",
        "id": 201343923,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1592529490
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>  <span aria-label=\"up\" class=\"emoji emoji-2b06\" role=\"img\" title=\"up\">:up:</span></p>",
        "id": 201348485,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1592536627
    },
    {
        "content": "<p>for the first question: there is no interface for this. You have to go find the fields yourself, and I don't even think you can do it without <code>ancestor</code></p>",
        "id": 201348533,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592536692
    },
    {
        "content": "<p>For the second: <code>by clean by dirty_tactic</code> produces a clean version of the expression produced by <code>by dirty_tactic</code></p>",
        "id": 201348545,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592536724
    },
    {
        "content": "<p>that is, the interface for <code>clean</code> is similar to <code>exact</code></p>",
        "id": 201348557,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592536762
    },
    {
        "content": "<p>For the second: thanks!</p>",
        "id": 201348560,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1592536780
    },
    {
        "content": "<p>For the first: what if I've got names from <code>ancestor</code>?</p>",
        "id": 201348567,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1592536793
    },
    {
        "content": "<p>You need <code>refine_struct</code> first to tag all the subgoals, and then you can use the case tag on the goal to know which field to look for in declared superclasses</p>",
        "id": 201348617,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592536844
    },
    {
        "content": "<p>Ah, so I just call <code>refine_struct { .. }</code> then try to get fields from ancestors?</p>",
        "id": 201348637,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1592536916
    },
    {
        "content": "<p>If you don't want to use <code>refine_struct</code> or subgoal management at all, you can also look at the binder names for the <code>T.mk</code> function, which is where the field names come from</p>",
        "id": 201348678,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592536926
    },
    {
        "content": "<p>I'll look into this.</p>",
        "id": 201348687,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1592536956
    },
    {
        "content": "<p>Can I plug <code>clean</code> into </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">pi_instance</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">refine_struct</span> <span class=\"bp\">``</span><span class=\"o\">(</span> <span class=\"o\">{</span>  <span class=\"bp\">..</span><span class=\"n\">pi</span><span class=\"bp\">.</span><span class=\"n\">partial_order</span><span class=\"o\">,</span> <span class=\"bp\">..</span> <span class=\"o\">}</span> <span class=\"o\">)</span><span class=\"bp\">;</span>\n  <span class=\"n\">propagate_tags</span> <span class=\"o\">(</span><span class=\"n\">try</span> <span class=\"err\">$</span> <span class=\"n\">pi_instance_derive_field</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">done</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>or should I call <code>by clean $ by pi_instance</code>?</p>",
        "id": 201349292,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1592538011
    },
    {
        "content": "<p>you can capture the goal and pass it to <code>clean</code></p>",
        "id": 201350643,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592539979
    },
    {
        "content": "<p>We should fix <code>pi_instance</code>.</p>",
        "id": 201352128,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1592542212
    },
    {
        "content": "<p>(Even if just with <code>clean</code>.)</p>",
        "id": 201352132,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1592542219
    },
    {
        "content": "<p>that's what I meant. There is a tactic for this, I think, but you basically call <code>g &lt;- target</code> before <code>refine_struct</code> et al and then <code>instantiate_mvars g &gt;&gt;= clean</code> after</p>",
        "id": 201352482,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592542710
    },
    {
        "content": "<p><code>clean</code> takes <code>parse texpr</code>, not <code>expr</code></p>",
        "id": 201354885,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1592545833
    },
    {
        "content": "<p>Trying to move parts of <code>clean</code> to <code>clean'</code> that takes <code>expr</code>.</p>",
        "id": 201355062,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1592546045
    },
    {
        "content": "<p>With this in <code>tactic/interactive</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">clean&#39;</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">exact</span> <span class=\"err\">$</span> <span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">replace</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">e</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n     <span class=\"k\">match</span> <span class=\"n\">e</span> <span class=\"k\">with</span>\n     <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"n\">const</span> <span class=\"n\">n</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"n\">e&#39;</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n       <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"err\">∈</span> <span class=\"n\">clean_ids</span> <span class=\"k\">then</span> <span class=\"n\">some</span> <span class=\"n\">e&#39;</span> <span class=\"k\">else</span> <span class=\"n\">none</span>\n     <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"n\">lam</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">var</span> <span class=\"mi\">0</span><span class=\"o\">))</span> <span class=\"n\">e&#39;</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">some</span> <span class=\"n\">e&#39;</span>\n     <span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"n\">none</span>\n     <span class=\"kn\">end</span><span class=\"o\">)</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">-</span>\n<span class=\"cm\">Remove identity functions from a term. These are normally</span>\n<span class=\"cm\">automatically generated with terms like `show t, from p` or</span>\n<span class=\"cm\">`(p : t)` which translate to some variant on `@id t p` in</span>\n<span class=\"cm\">order to retain the type. -/</span>\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">clean</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">texpr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"n\">tgt</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"err\">←</span> <span class=\"n\">target</span><span class=\"o\">,</span>\n   <span class=\"n\">e</span> <span class=\"err\">←</span> <span class=\"n\">i_to_expr_strict</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"err\">%%</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"err\">%%</span><span class=\"n\">tgt</span><span class=\"o\">),</span>\n   <span class=\"n\">clean&#39;</span> <span class=\"n\">e</span>\n</code></pre></div>\n\n\n<p>and this in <code>tactic/pi_instances</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">pi_instance</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"n\">g</span> <span class=\"err\">←</span> <span class=\"n\">target</span><span class=\"o\">,</span>\n   <span class=\"n\">refine_struct</span> <span class=\"bp\">``</span><span class=\"o\">(</span> <span class=\"o\">{</span>  <span class=\"bp\">..</span><span class=\"n\">pi</span><span class=\"bp\">.</span><span class=\"n\">partial_order</span><span class=\"o\">,</span> <span class=\"bp\">..</span> <span class=\"o\">}</span> <span class=\"o\">)</span><span class=\"bp\">;</span>\n     <span class=\"n\">propagate_tags</span> <span class=\"o\">(</span><span class=\"n\">pi_instance_derive_field</span><span class=\"o\">),</span>\n   <span class=\"n\">instantiate_mvars</span> <span class=\"n\">g</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">clean&#39;</span>\n</code></pre></div>\n\n\n<p>I get an error</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">tactic</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">there</span> <span class=\"n\">are</span> <span class=\"n\">no</span> <span class=\"n\">goals</span> <span class=\"n\">to</span> <span class=\"n\">be</span> <span class=\"n\">solved</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">no</span> <span class=\"n\">goals</span>\n</code></pre></div>",
        "id": 201355288,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1592546385
    },
    {
        "content": "<p>aha, you have to create a new goal with the same type as <code>g</code> and run <code>refine_struct</code> on that</p>",
        "id": 201355730,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592546914
    },
    {
        "content": "<p>also <code>g &lt;- target</code> isn't quite right, that returns the type of the goal rather than the goal metavar itself, which I think can be reached using <code>main_goal</code></p>",
        "id": 201355757,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592546962
    },
    {
        "content": "<p>BTW, why does <code>apply</code> add <code>id</code>?</p>",
        "id": 201356825,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1592548400
    },
    {
        "content": "<p>Most tactics that do definitional reduction of some kind insert an <code>id</code> in case the defeq path was long and complicated and the kernel may not have an easy time finding it (for example if you use <code>dsimp</code>)</p>",
        "id": 201356933,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592548527
    },
    {
        "content": "<p>but it's not particularly optimized and inserts quite a few unnecessary identity functions. In fact I don't know if I've ever seen a legitimate use, although I would bet that if you removed this from core mathlib compile time would jump up</p>",
        "id": 201356995,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592548589
    },
    {
        "content": "<p>How do I create a new goal? I tried</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">do</span> <span class=\"n\">gt</span> <span class=\"err\">←</span> <span class=\"n\">target</span><span class=\"o\">,</span>\n   <span class=\"n\">n</span> <span class=\"err\">←</span> <span class=\"n\">get_unused_name</span><span class=\"o\">,</span>\n   <span class=\"k\">let</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"n\">expr</span><span class=\"bp\">.</span><span class=\"n\">mvar</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">gt</span><span class=\"o\">,</span>\n   <span class=\"n\">gs</span> <span class=\"err\">←</span> <span class=\"n\">get_goals</span><span class=\"o\">,</span>\n   <span class=\"n\">set_goals</span> <span class=\"o\">(</span><span class=\"n\">g</span><span class=\"bp\">::</span><span class=\"n\">gs</span><span class=\"o\">),</span>\n</code></pre></div>\n\n\n<p>but it fails with \"error: invalid set_goals tactic, expressions must be meta-variables that have been declared in the current tactic_state\".</p>",
        "id": 201357294,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1592549042
    },
    {
        "content": "<p><code>mk_mvar</code> I think?</p>",
        "id": 201358684,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592550651
    },
    {
        "content": "<p><code>mk_meta_var</code>.</p>",
        "id": 201359257,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1592551323
    },
    {
        "content": "<p>I managed to remove <code>id</code>s but it doesn't make <code>simp</code> work, probably because <code>simp</code> fails to unify <code>λ i, group.one</code> with <code>λ i, has_one.one</code>.</p>",
        "id": 201361073,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1592553038
    },
    {
        "content": "<p>You might find that <code>dsimp_result only [...] { pi_instance }</code> would be helpful. You could arrange applying whatever set of definitional simplifications you wanted.</p>",
        "id": 201365717,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1592556638
    },
    {
        "content": "<p>A workaround is in <a href=\"https://github.com/leanprover-community/mathlib/issues/3116\">#3116</a>. I would prefer to have it merged. Once we have a proper fix, it will be easy to replace the whole section by <code>add_pi_instances [has_one, has_mul, semigroup, ...]</code>.</p>",
        "id": 201492081,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1592679922
    },
    {
        "content": "<p>I'm trying to write a proper <code>add_pi_instance</code> command but I wouldn't expect it to be done quickly (unless someone with much more experience will do it in one evening).</p>",
        "id": 201492228,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1592680066
    }
]