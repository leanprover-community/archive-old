[
    {
        "content": "<p>Quick question: how do I comfortably input unicode in Zulip? So far I have used copy-paste to write alphas and betas. In VS code these are magically replaced with unicode... in the rest of my life TeX does this for me. How do I get them here?</p>",
        "id": 124944729,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1523472486
    },
    {
        "content": "<p>You can use tex here, although it gets math font: $\\alpha$</p>",
        "id": 124944838,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523472666
    },
    {
        "content": "<p>Ok, thanks.</p>",
        "id": 124945053,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1523473002
    },
    {
        "content": "<p>Test: <code>$\\alpha$</code> $\\alpha$</p>",
        "id": 124945057,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1523473020
    },
    {
        "content": "<p>Hmm, neither do what I want...</p>",
        "id": 124945064,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1523473037
    },
    {
        "content": "<p>How do you input an alpha in code? So between back-ticks?</p>",
        "id": 124945076,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1523473070
    },
    {
        "content": "<p>Test: <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>α</mi></mrow><annotation encoding=\"application/x-tex\">\\alpha</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.43056em;\"></span><span class=\"strut bottom\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.0037em;\">α</span></span></span></span></p>",
        "id": 124945123,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1523473089
    },
    {
        "content": "<p>I use <a href=\"https://github.com/docwhat/itsalltext/tree/release-1.9.3#readme\" target=\"_blank\" title=\"https://github.com/docwhat/itsalltext/tree/release-1.9.3#readme\">https://github.com/docwhat/itsalltext/tree/release-1.9.3#readme</a> It gives me a small \"edit\" button near textareas in firefox. Clicking this button fires vim and you can type whatever you want</p>",
        "id": 124945238,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523473292
    },
    {
        "content": "<p>Of course you can also configure it to fire emacs if that's your religion</p>",
        "id": 124945245,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523473316
    },
    {
        "content": "<p>No, I'm a vimmer. But I never input alphas directly into vim...</p>",
        "id": 124945289,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1523473339
    },
    {
        "content": "<p>I was an ascii-only guy, until I met Lean</p>",
        "id": 124945292,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1523473358
    },
    {
        "content": "<p>At some point, someone will formalise Fermat's last theorem in Lean</p>",
        "id": 124945364,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1523473457
    },
    {
        "content": "<p>Then you should go and configure your vim to make you a unicode guy</p>",
        "id": 124945365,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523473478
    },
    {
        "content": "<p>And it will take us 5 years to figure out that they spoofed us with an punycode attack: <a href=\"https://en.wikipedia.org/wiki/IDN_homograph_attack\" target=\"_blank\" title=\"https://en.wikipedia.org/wiki/IDN_homograph_attack\">https://en.wikipedia.org/wiki/IDN_homograph_attack</a></p>",
        "id": 124945366,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1523473484
    },
    {
        "content": "<p>Importing some library whose name looks completely familiar, but inside the library they do just assume false...</p>",
        "id": 124945386,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1523473520
    },
    {
        "content": "<p>I think Kevin decided we weren't formalizing FLT in the end</p>",
        "id": 124945909,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523474280
    },
    {
        "content": "<p>This is too old</p>",
        "id": 124945950,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523474300
    },
    {
        "content": "<p>He works on perfectoid spaces</p>",
        "id": 124945952,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523474311
    },
    {
        "content": "<p>The problem remains... whether you are formalising the latest hotness in the Langlands program, or some hardcore <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi mathvariant=\"normal\">∞</mi></mrow><annotation encoding=\"application/x-tex\">\\infty</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.43056em;\"></span><span class=\"strut bottom\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathrm\">∞</span></span></span></span>-stuff, or something from quantisation-blabla... unicode is ambiguous and susceptible to social attacks...</p>",
        "id": 124946277,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1523474723
    },
    {
        "content": "<p>Anyway, I will stuff away my tinfoil hat... enough other problems to focus on right now (^;</p>",
        "id": 124946280,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1523474749
    },
    {
        "content": "<p>I don't think it's too difficult to formalise. The proof might be harder though.</p>",
        "id": 124946716,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523475466
    },
    {
        "content": "<p>The thing about the proof is that there is a huge amount of analysis that goes into the trace formula</p>",
        "id": 124946769,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523475519
    },
    {
        "content": "<p>and I know of no proof which ultimately avoids the trace formula</p>",
        "id": 124946776,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523475533
    },
    {
        "content": "<p>in the non-compact case I should add -- SL(2).</p>",
        "id": 124946781,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523475549
    },
    {
        "content": "<p><a href=\"https://github.com/formalabstracts/formalabstracts/blob/master/fabstract/Wiles_A_and_Taylor_R_FermatLast/fabstract.lean\" target=\"_blank\" title=\"https://github.com/formalabstracts/formalabstracts/blob/master/fabstract/Wiles_A_and_Taylor_R_FermatLast/fabstract.lean\">https://github.com/formalabstracts/formalabstracts/blob/master/fabstract/Wiles_A_and_Taylor_R_FermatLast/fabstract.lean</a></p>",
        "id": 124946789,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523475565
    },
    {
        "content": "<p>It's the one part of the proof I've not read and it would not surprise me if I went to my grave not having read it.</p>",
        "id": 124946791,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523475573
    },
    {
        "content": "<p>Unless EPSRC give me several million quid to formalise it.</p>",
        "id": 124946794,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523475583
    },
    {
        "content": "<p>Statement is already done <span class=\"emoji emoji-1f604\" title=\"smile\">:smile:</span></p>",
        "id": 124946796,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523475586
    },
    {
        "content": "<p>Oh OK that's great, we're half way there.</p>",
        "id": 124946798,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523475596
    },
    {
        "content": "<p>Indeed</p>",
        "id": 124946836,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523475604
    },
    {
        "content": "<p>Lol, they have a type called <code>document</code></p>",
        "id": 124946850,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1523475646
    },
    {
        "content": "<p>That's fantastic (^;</p>",
        "id": 124946855,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1523475652
    }
]