[
    {
        "content": "<p>def rev {α : Type*}:<br>\nΠ {n m}, vector α n → vector α m → vector α (m+n)<br>\n| 0  _   _  w           := w<br>\n| (n+1) m (a :: v) w    := rev v (a::w)</p>\n<p>i get<br>\nequation type mismatch, term   rev v (a :: w)<br>\nhas type<br>\n  vector α (m + 1 + n)<br>\nbut is expected to have type<br>\n  vector α (m + (n + 1))</p>",
        "id": 219583124,
        "sender_full_name": "Michael Werman",
        "timestamp": 1607680188
    },
    {
        "content": "<p>yeah, this is annoying, because <code>m + 1 + n = m + (n + 1)</code>, but not by definition.</p>",
        "id": 219583467,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1607680415
    },
    {
        "content": "<p>So you will need to use a trick to move between <code>vector \\a x</code> and <code>vector \\a y</code> for <code>x = y</code>.</p>",
        "id": 219583542,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1607680445
    },
    {
        "content": "<p>I've never used <code>vector</code>. Is there something called <code>vector.cast</code> or <code>vector.congr</code>?</p>",
        "id": 219583812,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1607680664
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/vector\">docs#vector</a></p>",
        "id": 219583875,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1607680687
    },
    {
        "content": "<p>you can use <code>eq.rec</code> or <code>rw</code> of course</p>",
        "id": 219583887,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607680694
    },
    {
        "content": "<p>which is enough to get over this hurdle</p>",
        "id": 219583912,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607680717
    },
    {
        "content": "<p>where do i do this, eq.rec?</p>",
        "id": 219588654,
        "sender_full_name": "Michael Werman",
        "timestamp": 1607683524
    },
    {
        "content": "<p>do you have a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>? That code you wrote doesn't typecheck for me</p>",
        "id": 219590317,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607684444
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">vector</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">:</span> <span class=\"n\">vector</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">vector</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">vector</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"kn\">local</span> <span class=\"kd\">infixl</span> <span class=\"bp\">`</span><span class=\"o\">::</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">vector.cons</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">rev</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">},</span> <span class=\"n\">vector</span> <span class=\"n\">α</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">vector</span> <span class=\"n\">α</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">vector</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">w</span> <span class=\"o\">:=</span> <span class=\"n\">w</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">w</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">nat.succ_add_eq_succ_add</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">rev</span> <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">w</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 219591010,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607684646
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a></p>",
        "id": 219591023,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1607684655
    },
    {
        "content": "<p>is there any way to do something like this<br>\nnot going through normal induction?</p>\n<p>def f: ℕ → ℕ <br>\n  |5 := 1<br>\n  |_ := 1</p>\n<p>example: ∀ (n: ℕ), f n =1<br>\n  | 5 := rfl<br>\n  | _ := rfl</p>",
        "id": 220239777,
        "sender_full_name": "Michael Werman",
        "timestamp": 1608210065
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a></p>",
        "id": 220239822,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1608210089
    },
    {
        "content": "<p>is there any way to do something like this<br>\nnot going through normal induction?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span><span class=\"mi\">5</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span><span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">example</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">=</span><span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"mi\">5</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 220240567,
        "sender_full_name": "Michael Werman",
        "timestamp": 1608210534
    },
    {
        "content": "<p>A formal answer to your question is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>Perhaps you might want to say more clearly what you mean.</p>",
        "id": 220240623,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608210587
    },
    {
        "content": "<p>maybe this is a better example,<br>\ni want the proof to follow the  way the function was built</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n  <span class=\"bp\">|</span><span class=\"mi\">5</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">|</span><span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n\n  <span class=\"kd\">example</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">)</span>\n  <span class=\"bp\">|</span><span class=\"mi\">5</span><span class=\"o\">:=</span><span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"bp\">*</span>\n  <span class=\"bp\">|</span><span class=\"n\">n</span><span class=\"o\">:=</span><span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"bp\">*</span>\n</code></pre></div>",
        "id": 220242713,
        "sender_full_name": "Michael Werman",
        "timestamp": 1608211741
    },
    {
        "content": "<p>And in what sense does the example you posted not follow the way the function was built?</p>",
        "id": 220242762,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608211775
    },
    {
        "content": "<p>Oh! It doesn't compile!</p>",
        "id": 220242787,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608211797
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n  <span class=\"bp\">|</span><span class=\"mi\">5</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">|</span><span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">hf</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">5</span> <span class=\"k\">then</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">delta</span> <span class=\"n\">f</span><span class=\"bp\">;</span> <span class=\"n\">refl</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">hf</span><span class=\"o\">,</span>\n  <span class=\"n\">split_ifs</span><span class=\"bp\">;</span>\n  <span class=\"n\">simp</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>This is probably not at all what you want.</p>",
        "id": 220243361,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608212109
    },
    {
        "content": "<p>But it does show that internally <code>f</code> is defined using an if/then statement.</p>",
        "id": 220243410,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608212141
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"285071\">@Michael Werman</span> Is it an option for you to use</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">5</span> <span class=\"k\">then</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">5</span> <span class=\"k\">then</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">f</span><span class=\"o\">,</span><span class=\"bp\">*</span><span class=\"o\">]</span> <span class=\"k\">else</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">f</span><span class=\"o\">,</span><span class=\"bp\">*</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 220243562,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1608212208
    },
    {
        "content": "<p>I was hoping the <code>match _, rfl</code> trick could help here, but it doesn't:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">match</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">rfl</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n'</span><span class=\"o\">,</span> <span class=\"n\">n'</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">_</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"n\">h5</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">h_useless</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 220243645,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1608212270
    },
    {
        "content": "<p>This works but I don't think it's a great solution:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">match</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">decidable.em</span> <span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n'</span><span class=\"o\">,</span> <span class=\"n\">n'</span> <span class=\"bp\">=</span> <span class=\"mi\">5</span> <span class=\"bp\">∨</span> <span class=\"n\">n'</span> <span class=\"bp\">≠</span> <span class=\"mi\">5</span> <span class=\"bp\">→</span> <span class=\"n\">_</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">f</span><span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">or.inr</span> <span class=\"n\">h_not_5</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">h_not_5</span><span class=\"o\">]</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 220244410,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1608212685
    },
    {
        "content": "<p>so the pattern matching doesnt know that it is an \"if then else\" by itself?</p>",
        "id": 220244660,
        "sender_full_name": "Michael Werman",
        "timestamp": 1608212825
    },
    {
        "content": "<p>The pattern matching doesn't make <code>h</code> available that <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> uses in his proof</p>",
        "id": 220245094,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1608213061
    },
    {
        "content": "<p>This does seem like an artificial example though, with the 5. You can do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n<span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>and in this case the equation compiler (the thing doing the pattern matching) knows everything (as n+2&gt;=2).</p>",
        "id": 220245903,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608213570
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"mi\">5</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n\n<span class=\"k\">#print</span> <span class=\"kd\">prefix</span> <span class=\"n\">f</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- ⊢ ¬n = 5</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 220247347,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1608214255
    },
    {
        "content": "<p>^ a sneak peek into Lean's mechanics</p>",
        "id": 220247370,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1608214268
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"mi\">5</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">5</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">  ⊢ 1 = 0</span>\n<span class=\"cm\">  ⊢ ¬5 = 5</span>\n<span class=\"cm\">  -/</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>lol</p>",
        "id": 220248724,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608214993
    }
]