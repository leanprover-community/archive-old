[
    {
        "content": "<p>One of the reviews of the <code>induction'</code> paper pointed out that <code>simp</code> apparently does some first-order unification when simplifying equations, even without any <code>simp</code> lemmas:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">nat.succ</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">nat.succ</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">guard_hyp</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">P</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Does anyone know what exactly is going on here? Does <code>simp</code> just use Lean's unification procedure whenever it encounters an equation?</p>",
        "id": 219770278,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1607879529
    },
    {
        "content": "<p>I don't know how it works, but <code>simp</code> does seem to have some built-in knowledge of disjointness and injectivity of constructors</p>",
        "id": 219770310,
        "sender_full_name": "Reid Barton",
        "timestamp": 1607879612
    },
    {
        "content": "<p>A little experimenting shows it's the <code>constructor_eq</code> option to <code>simp</code> that allows this.</p>",
        "id": 219770632,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1607880141
    },
    {
        "content": "<p>Thanks! That led me to the right place in the C++: <code>library/tactic/simplify.cpp</code>, <code>simplify_core_fn::simplify_constructor_eq_constructor</code>.</p>\n<p>With <code>constructor_eq</code>, the simplifier indeed uses a partial implementation of the usual unification algorithm. (This is the third such implementation in Core that I'm aware of. :P) It recognises equations whose LHS and RHS are constructor applications and uses injectivity or no-confusion as appropriate. However, it doesn't do any normalisation, doesn't use the cycle rule (<code>cases</code> also doesn't) and doesn't work with tuples for some reason.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">myprod</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- Nested constructor applications work.</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">n'</span> <span class=\"n\">m</span> <span class=\"n\">m'</span> <span class=\"n\">k</span> <span class=\"n\">k'</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">myprod.mk</span> <span class=\"o\">(</span><span class=\"n\">myprod.mk</span> <span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">myprod.mk</span> <span class=\"o\">(</span><span class=\"n\">myprod.mk</span> <span class=\"n\">n'</span> <span class=\"n\">m'</span><span class=\"o\">)</span> <span class=\"n\">k'</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n'</span> <span class=\"bp\">∧</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">m'</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">k'</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span>\n<span class=\"kd\">end</span>\n\n<span class=\"c1\">-- Also with different data types.</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">myprod.mk</span> <span class=\"n\">nat.zero</span> <span class=\"n\">nat.zero</span> <span class=\"bp\">=</span> <span class=\"n\">myprod.mk</span> <span class=\"o\">(</span><span class=\"n\">nat.succ</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nat.succ</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">guard_hyp</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"bp\">∧</span> <span class=\"n\">false</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">and.elim_left</span> <span class=\"n\">h</span>\n<span class=\"kd\">end</span>\n\n<span class=\"c1\">-- Tuples (`prod`) doesn't work for some reason.</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">n'</span> <span class=\"n\">m</span> <span class=\"n\">m'</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">n'</span><span class=\"o\">,</span> <span class=\"n\">m'</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n'</span> <span class=\"bp\">∧</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">m'</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">success_if_fail</span> <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[]</span> <span class=\"n\">at</span> <span class=\"n\">h</span> <span class=\"o\">},</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kd\">end</span>\n\n<span class=\"c1\">-- Constructors are matched syntactically; no normalisation is performed.</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">success_if_fail</span> <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[]</span> <span class=\"n\">at</span> <span class=\"n\">h</span> <span class=\"o\">},</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kd\">end</span>\n\n<span class=\"c1\">-- The cycle rule is not implemented.</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">nat.succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">success_if_fail</span> <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[]</span> <span class=\"n\">at</span> <span class=\"n\">h</span> <span class=\"o\">{}</span> <span class=\"o\">},</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 219775276,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1607886883
    }
]