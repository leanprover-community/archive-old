[
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/mathlib/pull/15652\">#15652</a> it was discussed how it's unfortunate that various lemmas about the interaction of order properties with <code>neg</code> and <code>inv</code> end up needing separate <code>left</code> and <code>right</code> versions because they're deduced from order properties for addition and multiplication that have separate <code>left</code> and <code>right</code> versions, and how it might make sense to have typeclasses for the <code>neg</code> and <code>inv</code> properties to avoid that duplication.</p>\n<p>What should such typeclasses look like? For example, would it be appropriate to add variants of <code>covariant_class</code> and <code>contravariant_class</code> that (a) are for a unary rather than a binary operation and (b) are for operations that reverse the order of the relation? If so, can someone suggest better (shorter) names than e.g. <code>covariant_unary_antitone_class</code>?</p>\n<p>Some of the lemmas also need <code>neg_zero</code> or <code>inv_one</code>. Should we have typeclasses for those as well, so that the lemmas can be applied more generally than <code>subtraction_monoid</code> / <code>division_monoid</code> (the current context in which <code>neg_zero</code> and <code>inv_one</code> are proved)?</p>\n<p>Examples of types for which such order properties, and <code>neg_zero</code> or <code>inv_one</code>, are relevant, but that aren't covered by the typeclasses for existing lemmas (and thus sometimes have their own duplicate lemmas), include <code>ereal</code>, <code>ennreal</code> and <code>sign_type</code>. (We have a separate <code>neg_zero'</code> lemma in the <code>mul_zero_class</code> <code>has_distrib_neg</code> case to cover that property for <code>sign_type</code>.)</p>",
        "id": 294182075,
        "sender_full_name": "Joseph Myers",
        "timestamp": 1660863329
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span></p>",
        "id": 295013101,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1661334960
    },
    {
        "content": "<p>I stand by my message on this PR: <a href=\"https://github.com/leanprover-community/mathlib/pull/15652#issuecomment-1193904087\">https://github.com/leanprover-community/mathlib/pull/15652#issuecomment-1193904087</a></p>",
        "id": 295013221,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1661334999
    },
    {
        "content": "<p>I will think of the details shortly.</p>",
        "id": 295013256,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1661335017
    },
    {
        "content": "<p>Related PR</p>\n<blockquote>\n<p><a href=\"https://github.com/leanprover-community/mathlib/pull/16187\">#16187</a>  refactor(algebra/group/defs): inv_one_class, neg_zero_class</p>\n</blockquote>",
        "id": 295013298,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1661335040
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"266253\">@Joseph Myers</span>  I'm somewhat worried about</p>\n<blockquote>\n<p>These are <code>Prop</code>-valued classes, taking <code>has_one</code> and<br>\n<code>has_inv</code> or <code>has_zero</code> and <code>has_neg</code> arguments rather than extending<br>\nthose classes, to allow them to be used together with other classes<br>\nsuch as <code>div_inv_monoid</code> in the typeclass requirements of lemmas<br>\nwithout needing to define extra classes for the combination of such a<br>\nclass with these new classes.</p>\n</blockquote>\n<p>I'm not an expert, but if I understand correctly then this might lead to performance problems. See also <a href=\"https://www.ralfj.de/blog/2019/05/15/typeclasses-exponential-blowup.html\">https://www.ralfj.de/blog/2019/05/15/typeclasses-exponential-blowup.html</a></p>\n<p>Do we have data about how this PR affects mathlib compile time?</p>",
        "id": 295013622,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1661335190
    },
    {
        "content": "<p>The current setup is <em>probably</em> OK since the inheritance depth is not so much. When you start writing <code>division_monoid [monoid α] [has_inv α] [inv_one_class α]</code> is when the blowup really starts...</p>",
        "id": 295018736,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1661337461
    },
    {
        "content": "<p>Still I think bundled inheritance is the best way to go here.</p>",
        "id": 295018789,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1661337477
    },
    {
        "content": "<p>With the way CI has been behaving lately with completely random timeouts and long delays lately unrelated to the content of PRs, getting meaningful compile time figures is hard.</p>",
        "id": 295022031,
        "sender_full_name": "Joseph Myers",
        "timestamp": 1661338804
    },
    {
        "content": "<p>Note that <code>neg_zero_class</code> is definitely relevant in cases such as <code>sign_type</code> that do not have addition or subtraction at all; I don't think a solution for the inequality lemmas that removes <code>left</code>/<code>right</code> duplication but keeps dependence on having <code>add</code>/<code>sub</code>/<code>mul</code>/<code>div</code> for lemmas that don't actually involve those operations would be a particularly good solution.</p>",
        "id": 295022562,
        "sender_full_name": "Joseph Myers",
        "timestamp": 1661339053
    },
    {
        "content": "<p>An argument for not bundling is that this matches the style of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/covariant_class\">docs#covariant_class</a></p>",
        "id": 295033473,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1661343624
    },
    {
        "content": "<p>Actually I've always seen this as an argument against <code>covariant_class</code>!</p>",
        "id": 295037581,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1661344628
    },
    {
        "content": "<p>My two cents on this:</p>\n<ul>\n<li>Definitions should be bundled as far as it remains reasonable, to avoid exponential blowup when building products, for instance.</li>\n<li>But the bundled stuff should have instances to the most basic classes. For instance, <code>ordered_comm_semiring</code> or whatever should imply <code>covariant_class ...</code></li>\n<li>Lemmas, on the other hand, are better stated with the most basic classes. Because in this way they will apply in the most possible general situations and still this will not create any blowup.</li>\n</ul>",
        "id": 295064440,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1661353302
    },
    {
        "content": "<p>Since we are talking about <code>covariant_class</code>, I feel called in the discussion.  I also agree that creating big bundles,while at the same time also proving stuff for \"atomic\" typeclasses is helpful.  In particular, bundling a few of the <code>covariant_class</code> assumptions together in more comprehensive classes is certainly human friendly.</p>\n<p>For instance, Yaël's recent PR with</p>\n<ul>\n<li><code>ordered_semiring</code> renamed to <code>ordered_cancel_semiring</code>;</li>\n<li><code>ordered_semiring</code> used for something more meaningful;</li>\n</ul>\n<p>produces two typeclasses that bundle together a few <code>covariant_class</code>es into something that is way more meaningful.</p>",
        "id": 295065836,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1661353733
    },
    {
        "content": "<p>The silly <code>mul_left_of_le_of_lt_one_of_nonneg</code> are then useful because they would apply smoothly to <code>real, nat, ennreal</code> and who knows what other \"real-world\" type you want!</p>",
        "id": 295066299,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1661353887
    }
]