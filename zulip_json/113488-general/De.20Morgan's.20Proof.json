[
    {
        "content": "<p>I'm new to Lean, can someone help me out with this proof of this version of De Morgan's Law? I'm having trouble coming up with the forward proof</p>\n<div class=\"codehilite\"><pre><span></span>theorem demorgans_law : ¬(p ∨ q) ↔ ¬p ∧ ¬q :=\n  iff.intro(\n  --\n  )\n  (\n  assume h : ¬p ∧ ¬q,\n  not_or h.left h.right\n  )\n</pre></div>",
        "id": 151734970,
        "sender_full_name": "Stephanie Wang",
        "timestamp": 1544736959
    },
    {
        "content": "<p>I'd start like this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">demorgans_law</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">q</span> <span class=\"o\">:=</span>\n  <span class=\"n\">iff</span><span class=\"bp\">.</span><span class=\"n\">intro</span><span class=\"o\">(</span>\n    <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span><span class=\"bp\">⟨_</span><span class=\"o\">,</span><span class=\"bp\">_⟩</span>\n  <span class=\"o\">)</span>\n  <span class=\"o\">(</span>\n  <span class=\"k\">assume</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">q</span><span class=\"o\">,</span>\n  <span class=\"n\">not_or</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">left</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">right</span>\n  <span class=\"o\">)</span>\n</pre></div>",
        "id": 151735268,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1544737191
    },
    {
        "content": "<p>and there is a red error on each of the _'s. I'd then try and figure out how to solve them. Actually, I'm a mathematician, so really I'd go straight into tactic mode...</p>",
        "id": 151735351,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1544737233
    },
    {
        "content": "<p>Ok so I can do it but it might look incomprehensible. Do you just want a solution or a hint?</p>",
        "id": 151735412,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1544737300
    },
    {
        "content": "<p>a comprehensible solution would be nice!</p>",
        "id": 151735550,
        "sender_full_name": "Stephanie Wang",
        "timestamp": 1544737428
    },
    {
        "content": "<p>Then you want to use tactic mode!</p>",
        "id": 151735667,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1544737541
    },
    {
        "content": "<p><code>assume h, and intro (assume hp, h (or.inl hp)) (assume hq, h (or.inr hq))</code></p>",
        "id": 151735761,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1544737626
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">demorgans_law&#39;</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">q</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">hnpq</span><span class=\"o\">,</span>\n    <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n      <span class=\"n\">apply</span> <span class=\"n\">hnpq</span><span class=\"o\">,</span>\n      <span class=\"n\">left</span><span class=\"o\">,</span>\n      <span class=\"n\">assumption</span>\n    <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">hq</span><span class=\"o\">,</span>\n      <span class=\"n\">apply</span> <span class=\"n\">hnpq</span><span class=\"o\">,</span>\n      <span class=\"n\">right</span><span class=\"o\">,</span>\n      <span class=\"n\">assumption</span>\n    <span class=\"o\">}</span>\n  <span class=\"o\">},</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>half way there</p>",
        "id": 151735780,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1544737651
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">demorgans_law&#39;</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">q</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">hnpq</span><span class=\"o\">,</span>\n    <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n      <span class=\"n\">apply</span> <span class=\"n\">hnpq</span><span class=\"o\">,</span>\n      <span class=\"n\">left</span><span class=\"o\">,</span>\n      <span class=\"n\">assumption</span>\n    <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">hq</span><span class=\"o\">,</span>\n      <span class=\"n\">apply</span> <span class=\"n\">hnpq</span><span class=\"o\">,</span>\n      <span class=\"n\">right</span><span class=\"o\">,</span>\n      <span class=\"n\">assumption</span>\n    <span class=\"o\">}</span>\n  <span class=\"o\">},</span>\n  <span class=\"n\">intro</span> <span class=\"n\">hnpnq</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">hpq</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">hnpnq</span> <span class=\"k\">with</span> <span class=\"n\">hnp</span> <span class=\"n\">hnq</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">hpq</span><span class=\"o\">,</span>\n    <span class=\"n\">contradiction</span><span class=\"o\">,</span>\n    <span class=\"n\">contradiction</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>My impression is that computer scientists prefer these term mode things that you were writing, but I've been teaching mathematicians this stuff and tactic mode seems to be far easier for them.</p>",
        "id": 151735899,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1544737742
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">demorgans_law</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">q</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"bp\">⟨λ</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"err\">$</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">hq</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"err\">$</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">hq</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">hnp</span><span class=\"o\">,</span> <span class=\"n\">hnq</span><span class=\"bp\">⟩</span> <span class=\"n\">hn</span><span class=\"o\">,</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"n\">hn</span> <span class=\"n\">hnp</span> <span class=\"n\">hnq</span><span class=\"bp\">⟩</span>\n</pre></div>\n\n\n<p>Computer science proof, incomprehensibled to the max. Chris posted the perhaps happy medium you were looking for.</p>",
        "id": 151735933,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1544737787
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">demorgans_law&#39;&#39;</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">):</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">q</span> <span class=\"o\">:=</span>\n  <span class=\"n\">iff</span><span class=\"bp\">.</span><span class=\"n\">intro</span><span class=\"o\">(</span>\n    <span class=\"k\">assume</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">hp</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">hq</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">hq</span><span class=\"o\">))</span>\n  <span class=\"o\">)</span>\n  <span class=\"o\">(</span>\n  <span class=\"k\">assume</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">q</span><span class=\"o\">,</span>\n  <span class=\"n\">not_or</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">left</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">right</span>\n  <span class=\"o\">)</span>\n</pre></div>",
        "id": 151736068,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1544737911
    },
    {
        "content": "<p>Ok this makes a lot of sense to me, thanks so much.</p>",
        "id": 151736196,
        "sender_full_name": "Stephanie Wang",
        "timestamp": 1544738028
    }
]