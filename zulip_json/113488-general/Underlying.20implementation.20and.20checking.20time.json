[
    {
        "content": "<p>This is more of a curiosity than a practical concern.</p>\n<p>Real numbers in Lean are constructed in some way to satisfy some axioms we desire about real numbers. I imagine the reals could be a quotient on sequences of rational numbers, which is a quotient on un-reduced fractions, which is constructed from two natural numbers.</p>\n<p>I'm wondering if this complexity affects proof checking times, with the potential to blow up if we add a few more layers to it.</p>\n<p>As an experiment, I wrote the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Aut</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n<span class=\"kd\">def</span> <span class=\"n\">Aut10</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Aut</span><span class=\"o\">(</span><span class=\"n\">Aut</span><span class=\"o\">(</span><span class=\"n\">Aut</span><span class=\"o\">(</span><span class=\"n\">Aut</span><span class=\"o\">(</span><span class=\"n\">Aut</span><span class=\"o\">(</span><span class=\"n\">Aut</span><span class=\"o\">(</span><span class=\"n\">Aut</span><span class=\"o\">(</span><span class=\"n\">Aut</span><span class=\"o\">(</span><span class=\"n\">Aut</span><span class=\"o\">(</span><span class=\"n\">Aut</span><span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">))))))))))</span>\n<span class=\"kd\">def</span> <span class=\"n\">constfn</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">a</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">irreducible</span><span class=\"o\">]</span> <span class=\"kd\">def</span> <span class=\"n\">Aut20N</span> <span class=\"o\">:=</span> <span class=\"n\">Aut10</span><span class=\"o\">(</span><span class=\"n\">Aut10</span><span class=\"o\">(</span><span class=\"n\">ℕ</span><span class=\"o\">))</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Aut20N_constfn</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">constfn</span> <span class=\"n\">Aut20N</span> <span class=\"n\">a</span> <span class=\"c1\">-- deterministic timeout</span>\n</code></pre></div>\n\n<p>It looks like Lean times out because it needs to expand the type of Aut20N. Would this potentially be a practical issue with more complex mathematics?</p>",
        "id": 213524294,
        "sender_full_name": "Li Yao'an",
        "timestamp": 1602831526
    },
    {
        "content": "<p>Yes, this can happen sometimes. Basically, we treat unfolding itself as an operation, and a proof should avoid doing too much of it</p>",
        "id": 213524467,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602831696
    },
    {
        "content": "<p>by that logic <code>Aut20N_constfn</code> is a \"large\" proof, because it requires a lot of unfolding to typecheck</p>",
        "id": 213524528,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602831732
    },
    {
        "content": "<p>That said, once you have put in the type ascriptions (or even before), there should not be a problem with your proof. But <code>Aut20N</code> is a \"time bomb\" in a sense because calling <code>whnf</code> on it causes a blowup, and many parts of lean are not as careful as they should be about this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Aut</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n<span class=\"kd\">def</span> <span class=\"n\">constfn</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">a</span>\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">irreducible</span><span class=\"o\">]</span> <span class=\"kd\">def</span> <span class=\"n\">Aut20N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">Aut</span><span class=\"bp\">^</span><span class=\"o\">[</span><span class=\"mi\">20</span><span class=\"o\">]</span> <span class=\"n\">ℕ</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Aut20N_constfn</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Aut20N</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Aut20N</span> <span class=\"bp\">→</span> <span class=\"n\">Aut20N</span> <span class=\"o\">:=</span>\n<span class=\"n\">constfn</span> <span class=\"n\">a</span> <span class=\"c1\">-- deterministic timeout</span>\n</code></pre></div>",
        "id": 213524925,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602832078
    },
    {
        "content": "<p>I'm confused. I thought that the <code>attribute [irreducible]</code> would prevent this...</p>",
        "id": 213525049,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1602832195
    },
    {
        "content": "<p>It's possible that the kernel is doing the check</p>",
        "id": 213525133,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602832269
    },
    {
        "content": "<p>This actually comes up less than you would think, because usually when you introduce a new definition you replace the top level connective. The bad case is when it is a lot of work just to find out what the top level connective is</p>",
        "id": 213525217,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602832332
    },
    {
        "content": "<p>Is the fact that Lean sometimes fails to apply a lemma about <code>λ _, a</code> to <code>(0 : α → β)</code> somehow related to this?</p>",
        "id": 213525591,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1602832674
    },
    {
        "content": "<p>You mean even if you explicitly apply the lemma with <code>refine</code>?</p>",
        "id": 213526152,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602833087
    },
    {
        "content": "<p>I mean if I do a term mode proof, and use, e.g., <code>measurable_const</code> to prove <code>measurable 0</code>.</p>",
        "id": 213526318,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1602833183
    },
    {
        "content": "<p>Unfortunately, I have no MWE at hand.</p>",
        "id": 213526362,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1602833208
    },
    {
        "content": "<p>See, e.g., <a href=\"https://github.com/leanprover-community/mathlib/pull/4643/files#diff-3e93941696f53cbca3728465d6b662e14e319a417136cd8cae531e775998f927\">this</a> for a non-minimal example.</p>",
        "id": 213526440,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1602833264
    },
    {
        "content": "<p>Here it's about unifying <code>continuous_const</code> with coercion of <code>0 : linear_map _ _ _</code>.</p>",
        "id": 213526539,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1602833303
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> I'm not sure if it's the same issue, but in your linked example <code>@continuous_const _ _ _ _ (0 : F)</code> works without <code>convert</code>.</p>",
        "id": 213604077,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1602876604
    }
]