[
    {
        "content": "<p>Right now this fails:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.invertible</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">r₁</span> <span class=\"n\">r₂</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">invertible</span> <span class=\"n\">r₁</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">invertible</span> <span class=\"n\">r₂</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">r₁</span> <span class=\"bp\">=</span> <span class=\"n\">r₂</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">⅟</span><span class=\"n\">r₁</span> <span class=\"bp\">=</span> <span class=\"bp\">⅟</span><span class=\"n\">r₂</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>\n<p>Is there a way to provide a <code>congr</code> lemma so that this works?</p>",
        "id": 271422308,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1644495089
    },
    {
        "content": "<p>My naive attempt was:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">invertible_congr</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">r₁</span> <span class=\"n\">r₂</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">i₁</span> <span class=\"o\">:</span> <span class=\"n\">invertible</span> <span class=\"n\">r₁</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">i₂</span> <span class=\"o\">:</span> <span class=\"n\">invertible</span> <span class=\"n\">r₂</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">r₁</span> <span class=\"bp\">=</span> <span class=\"n\">r₂</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">⅟</span><span class=\"n\">r₁</span> <span class=\"bp\">=</span> <span class=\"bp\">⅟</span><span class=\"n\">r₂</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">substI</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">convert</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>but this doesn't accept a <code>@[congr]</code> attribute</p>",
        "id": 271422430,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1644495166
    },
    {
        "content": "<p>If I introduce a stupid alias for <code>invertible.inv_of</code> that takes a <code>monoid</code> argument, then <code>@[congr]</code> is happy:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.invertible</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">r₁</span> <span class=\"n\">r₂</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">invertible</span> <span class=\"n\">r₁</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">invertible</span> <span class=\"n\">r₂</span><span class=\"o\">]</span>\n\n<span class=\"sd\">/-- A duplicate of `⅟` that makes `congr` happy -/</span>\n<span class=\"kd\">abbreviation</span> <span class=\"n\">invertible.inv_of'</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">invertible</span> <span class=\"n\">r</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"bp\">⅟</span><span class=\"n\">r</span>\n<span class=\"kd\">notation</span> <span class=\"bp\">`⅟'`</span> <span class=\"o\">:=</span> <span class=\"n\">invertible.inv_of'</span>\n\n<span class=\"sd\">/-- `congr` is happy as long as we use `⅟'`-/</span>\n<span class=\"kd\">@[congr]</span> <span class=\"kd\">lemma</span> <span class=\"n\">invertible_congr'</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">r₁</span> <span class=\"bp\">=</span> <span class=\"n\">r₂</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">⅟'</span><span class=\"n\">r₁</span> <span class=\"bp\">=</span> <span class=\"bp\">⅟'</span><span class=\"n\">r₂</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">substI</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">congr</span> <span class=\"o\">}</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> `simp` is happy as long as we use `⅟'` on the LHS-/</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">r₁</span> <span class=\"bp\">=</span> <span class=\"n\">r₂</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">⅟'</span><span class=\"n\">r₁</span> <span class=\"bp\">=</span> <span class=\"bp\">⅟'</span><span class=\"n\">r₂</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"c1\">-- ok</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">r₁</span> <span class=\"bp\">=</span> <span class=\"n\">r₂</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">⅟'</span><span class=\"n\">r₁</span> <span class=\"bp\">=</span> <span class=\"bp\">⅟</span><span class=\"n\">r₂</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"c1\">-- ok</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">r₁</span> <span class=\"bp\">=</span> <span class=\"n\">r₂</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">⅟</span><span class=\"n\">r₁</span> <span class=\"bp\">=</span> <span class=\"bp\">⅟'</span><span class=\"n\">r₂</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"c1\">-- fails</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">r₁</span> <span class=\"bp\">=</span> <span class=\"n\">r₂</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">⅟</span><span class=\"n\">r₁</span> <span class=\"bp\">=</span> <span class=\"bp\">⅟</span><span class=\"n\">r₂</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>",
        "id": 271423091,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1644495575
    },
    {
        "content": "<p>Yes, this is a known limitation in Lean 3.  It is already gone in Lean 4.</p>",
        "id": 271423762,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1644496012
    },
    {
        "content": "<p>Are there any known workarounds?</p>",
        "id": 271423839,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1644496077
    },
    {
        "content": "<p>I guess you could state the lemma like this (untested):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">is_monoid</span> <span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_one</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">is_monoid</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n\n<span class=\"kd\">@[congr]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">invertible_congr</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_one</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_monoid</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">r₁</span> <span class=\"n\">r₂</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">i₁</span> <span class=\"o\">:</span> <span class=\"n\">invertible</span> <span class=\"n\">r₁</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">i₂</span> <span class=\"o\">:</span> <span class=\"n\">invertible</span> <span class=\"n\">r₂</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">r₁</span> <span class=\"bp\">=</span> <span class=\"n\">r₂</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">⅟</span><span class=\"n\">r₁</span> <span class=\"bp\">=</span> <span class=\"bp\">⅟</span><span class=\"n\">r₂</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 271424021,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1644496176
    },
    {
        "content": "<p>Nice, that does the trick:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.invertible</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">r₁</span> <span class=\"n\">r₂</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">invertible</span> <span class=\"n\">r₁</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">invertible</span> <span class=\"n\">r₂</span><span class=\"o\">]</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">is_monoid</span> <span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_one</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">out</span> <span class=\"o\">[]</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">monoid</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">mul_one_class.to_has_one</span> <span class=\"n\">R</span> <span class=\"bp\">=</span> <span class=\"o\">‹</span><span class=\"n\">_</span><span class=\"o\">›</span> <span class=\"bp\">∧</span> <span class=\"n\">mul_one_class.to_has_mul</span> <span class=\"n\">R</span> <span class=\"bp\">=</span> <span class=\"o\">‹</span><span class=\"n\">_</span><span class=\"o\">›)</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">monoid.is_monoid</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">is_monoid</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨⟨‹</span><span class=\"n\">_</span><span class=\"o\">›,</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩⟩</span>\n\n<span class=\"kd\">@[congr]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">invertible_congr</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_one</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_monoid</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">r₁</span> <span class=\"n\">r₂</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">i₁</span> <span class=\"o\">:</span> <span class=\"n\">invertible</span> <span class=\"n\">r₁</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">i₂</span> <span class=\"o\">:</span> <span class=\"n\">invertible</span> <span class=\"n\">r₂</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">r₁</span> <span class=\"bp\">=</span> <span class=\"n\">r₂</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">⅟</span><span class=\"n\">r₁</span> <span class=\"bp\">=</span> <span class=\"bp\">⅟</span><span class=\"n\">r₂</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span>\n  <span class=\"n\">unfreezingI</span> <span class=\"o\">{</span> <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">monoid</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">is_monoid.out</span> <span class=\"n\">R</span> <span class=\"o\">},</span>\n  <span class=\"n\">substI</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">congr</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">r₁</span> <span class=\"bp\">=</span> <span class=\"n\">r₂</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">⅟</span><span class=\"n\">r₁</span> <span class=\"bp\">=</span> <span class=\"bp\">⅟</span><span class=\"n\">r₂</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"c1\">-- ok</span>\n</code></pre></div>",
        "id": 271424758,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1644496648
    },
    {
        "content": "<p>Is that something that is ok in mathlib? Perhaps renaming <code>is_monoid</code> to <code>invertible_congr_aux</code> or something to discourage widespread use?</p>",
        "id": 271424796,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1644496676
    },
    {
        "content": "<p>Don't know what's going on here but (a) <code>is_monoid</code> should be called <code>is_monoid</code> and not <code>invertible_congr_aux</code> (b) <code>is_monoid</code> shouldn't be a class, if you want a class, just use <code>monoid</code></p>",
        "id": 271424943,
        "sender_full_name": "Reid Barton",
        "timestamp": 1644496771
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span>, if I use <code>[monoid R]</code> then <code>@[congr]</code> complains. By using the <code>is_monoid R</code> hack above, it doesn't</p>",
        "id": 271424971,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1644496793
    },
    {
        "content": "<p>Is this really worth fixing?</p>",
        "id": 271426038,
        "sender_full_name": "Reid Barton",
        "timestamp": 1644497470
    },
    {
        "content": "<p>or at least, in this way? it seems like a quite generic sort of issue?</p>",
        "id": 271426078,
        "sender_full_name": "Reid Barton",
        "timestamp": 1644497515
    },
    {
        "content": "<p>Right, but this is also a generic recipe for solving it - here's the version with it called <code>aux</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.invertible</span>\n\n<span class=\"sd\">/-- typeclass to hide arguments for `invertible_congr` that `congr` rejects.</span>\n<span class=\"sd\">The equalities are used to substitute arguments in `invertible_congr` with expressions built from</span>\n<span class=\"sd\">the data fields. -/</span>\n<span class=\"kd\">class</span> <span class=\"kd\">inductive</span> <span class=\"n\">invertible_congr.aux</span> <span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_one</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">intro</span>\n    <span class=\"o\">(</span><span class=\"n\">monoid</span> <span class=\"o\">:</span> <span class=\"n\">monoid</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h_one_eq</span> <span class=\"o\">:</span> <span class=\"n\">mul_one_class.to_has_one</span> <span class=\"n\">R</span> <span class=\"bp\">=</span> <span class=\"o\">‹</span><span class=\"n\">_</span><span class=\"o\">›)</span>\n    <span class=\"o\">(</span><span class=\"n\">h_mul_eq</span> <span class=\"o\">:</span> <span class=\"n\">mul_one_class.to_has_mul</span> <span class=\"n\">R</span> <span class=\"bp\">=</span> <span class=\"o\">‹</span><span class=\"n\">_</span><span class=\"o\">›)</span> <span class=\"o\">:</span> <span class=\"n\">invertible_congr.aux</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">invertible_congr.aux.inst</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">invertible_congr.aux</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨‹</span><span class=\"n\">_</span><span class=\"o\">›,</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">r₁</span> <span class=\"n\">r₂</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">invertible</span> <span class=\"n\">r₁</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">invertible</span> <span class=\"n\">r₂</span><span class=\"o\">]</span>\n\n<span class=\"sd\">/--</span>\n<span class=\"sd\">This can't take a `[monoid]` argument as `@[congr]` does not allow the `mul_one_class.to_has_one`</span>\n<span class=\"sd\">term that appears in the goal. Instead we take a typeclass that allows us to replace the `has_one R`</span>\n<span class=\"sd\">term with such an expression within the proof. -/</span>\n<span class=\"kd\">@[congr]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">invertible_congr</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_one</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">invertible_congr.aux</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">r₁</span> <span class=\"n\">r₂</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">i₁</span> <span class=\"o\">:</span> <span class=\"n\">invertible</span> <span class=\"n\">r₁</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">i₂</span> <span class=\"o\">:</span> <span class=\"n\">invertible</span> <span class=\"n\">r₂</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">r₁</span> <span class=\"bp\">=</span> <span class=\"n\">r₂</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">⅟</span><span class=\"n\">r₁</span> <span class=\"bp\">=</span> <span class=\"bp\">⅟</span><span class=\"n\">r₂</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">unfreezingI</span> <span class=\"o\">{</span> <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"o\">‹</span><span class=\"n\">invertible_congr.aux</span> <span class=\"n\">R</span><span class=\"o\">›</span> <span class=\"o\">},</span>\n  <span class=\"n\">substI</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">congr</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">r₁</span> <span class=\"bp\">=</span> <span class=\"n\">r₂</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">⅟</span><span class=\"n\">r₁</span> <span class=\"bp\">=</span> <span class=\"bp\">⅟</span><span class=\"n\">r₂</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 271426158,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1644497546
    },
    {
        "content": "<p>I don't really think we should be adding a bunch of workarounds to mathlib like this</p>",
        "id": 271426219,
        "sender_full_name": "Reid Barton",
        "timestamp": 1644497588
    },
    {
        "content": "<p>The alternative is facing annoying situations where <code>simp</code> makes no progress</p>",
        "id": 271426261,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1644497619
    },
    {
        "content": "<p>seems okay!</p>",
        "id": 271426286,
        "sender_full_name": "Reid Barton",
        "timestamp": 1644497635
    },
    {
        "content": "<p>There are other tactics</p>",
        "id": 271426340,
        "sender_full_name": "Reid Barton",
        "timestamp": 1644497647
    },
    {
        "content": "<p>Sure, but the tradeoff is either:</p>\n<ul>\n<li>have a bizarre workaround like the one above, that no one ever looks at again, which gets silently removed in  mathlib4</li>\n<li>have multiple users run into the same problem every time, and produce weird proofs as workarounds that stick around in mathlib4</li>\n</ul>",
        "id": 271426647,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1644497839
    },
    {
        "content": "<p>How would you solve this goal?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span>  <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">invertible</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"mi\">1</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">invertible</span> <span class=\"o\">(</span><span class=\"n\">bar</span> <span class=\"mi\">2</span><span class=\"o\">)]</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">bar</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"mi\">37</span> <span class=\"bp\">+</span> <span class=\"bp\">⅟</span><span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">37</span> <span class=\"bp\">+</span> <span class=\"bp\">⅟</span><span class=\"o\">(</span><span class=\"n\">bar</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 271426666,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1644497852
    },
    {
        "content": "<p>The natural sequence of thing to try is <code>rw h</code>, <code>simp_rw h</code>, and <code>simp [h]</code> in some order, and all of those fail.</p>",
        "id": 271426781,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1644497904
    },
    {
        "content": "<p>With the code above hidden away in mathlib, <code>simp_rw h</code> works fine</p>",
        "id": 271426803,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1644497919
    },
    {
        "content": "<p>It just looks worse to me to add 20 lines of obscurities per instance of this issue. That's all</p>",
        "id": 271426987,
        "sender_full_name": "Reid Barton",
        "timestamp": 1644498012
    },
    {
        "content": "<p>I suppose there are two more options, which are:</p>\n<ul>\n<li>Fix the problem in Lean 3 core</li>\n<li>Write a metaprogram to generate the above boilerplate</li>\n</ul>\n<p>I think having Lean 4 on the horizon makes these look less desirable than accumulating the 20 lines each time.</p>",
        "id": 271427177,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1644498101
    },
    {
        "content": "<p>I agree with Reid, you should just use <code>congr_arg</code> or something if this comes up, adding typeclasses seems like it will cause lots of downstream problems for a proof-local issue</p>",
        "id": 271459880,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644512038
    },
    {
        "content": "<p>What proof would you suggest for the above <code>sorry</code>, Mario?</p>",
        "id": 271463898,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1644513702
    },
    {
        "content": "<p>I might be biased because I suggested the hack, but I don't think it will cause any technical issues (as long as it is only used for this congruence lemma).  It's a type class with a single instance, that is only required by a single lemma.  And this congruence lemma is only triggered when the simplifier sees an <code>inv_of</code> constant.  Any potential negative impact is extremely limited.</p>\n<p>The simplifier <em>should</em> be able to rewrite under <code>inv_of</code>; we have similar congruence lemmas for <code>fintype.card</code> etc.  Adding this congruence lemma would only be consistent.</p>\n<p>Finally, the hack is short-lived.  We can remove it immediately after switching to Lean 4.  (The congruence lemma will work when written with <code>[Monoid R]</code> instead of <code>[Mul R] [One R] [IsMonoid R]</code>.)</p>",
        "id": 271465660,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1644514454
    },
    {
        "content": "<p>I see, if it's a specialized typeclass then I agree it's more contained. The docs should make it clear that it's not intended for use beyond that though</p>",
        "id": 271466668,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644514896
    },
    {
        "content": "<p>the <code>is_monoid</code> name sounds like it will get used elsewhere</p>",
        "id": 271466782,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644514933
    },
    {
        "content": "<p>What about <code>monoid_congr_class_warning_do_not_use</code>?</p>",
        "id": 271466929,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1644515016
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> Is that a MWE? <code>37 + ⅟(foo 1)</code> doesn't typecheck</p>",
        "id": 271467058,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644515061
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113488-general/topic/congr.20lemma.20for.20invertible/near/271466929\">said</a>:</p>\n<blockquote>\n<p>What about <code>monoid_congr_class_warning_do_not_use</code>?</p>\n</blockquote>\n<p>At that point, <code>invertible_congr.aux</code> as I use above is better</p>",
        "id": 271467188,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1644515126
    },
    {
        "content": "<p>Fixed to be a MWE</p>",
        "id": 271467345,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1644515192
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.invertible</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">invertible_congr</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">r₁</span> <span class=\"n\">r₂</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">i₁</span> <span class=\"o\">:</span> <span class=\"n\">invertible</span> <span class=\"n\">r₁</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">i₂</span> <span class=\"o\">:</span> <span class=\"n\">invertible</span> <span class=\"n\">r₂</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">r₁</span> <span class=\"bp\">=</span> <span class=\"n\">r₂</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">⅟</span><span class=\"n\">r₁</span> <span class=\"bp\">=</span> <span class=\"bp\">⅟</span><span class=\"n\">r₂</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">substI</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">convert</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">invertible</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"mi\">1</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">invertible</span> <span class=\"o\">(</span><span class=\"n\">bar</span> <span class=\"mi\">2</span><span class=\"o\">)]</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">bar</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"mi\">37</span> <span class=\"bp\">+</span> <span class=\"bp\">⅟</span><span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">37</span> <span class=\"bp\">+</span> <span class=\"bp\">⅟</span><span class=\"o\">(</span><span class=\"n\">bar</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">congr'</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">invertible_congr</span> <span class=\"n\">h</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 271467798,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644515388
    },
    {
        "content": "<p>Probably the argument goes that we should have <code>invertible_congr</code> in that form for human use anyway, and then provide <code>invertible_congr'</code> for Lean 3's sake with the weird typeclass</p>",
        "id": 271476843,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1644519206
    }
]