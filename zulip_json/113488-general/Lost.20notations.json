[
    {
        "content": "<p>For expository purposes, I'm trying to rewrite part of filter theory. But Lean loses its notations. In the following code (ran with Lean 3.5.1, not yet 3.6.0), do you see set membership and set inclusion notations disappearing from tactic state? Do you understand why? </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">base_de_filtre</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">ι</span>        <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">s</span>        <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">defaut</span>   <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">inter</span>    <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"n\">k</span> <span class=\"err\">⊆</span> <span class=\"n\">s</span> <span class=\"n\">i</span> <span class=\"err\">∩</span> <span class=\"n\">s</span> <span class=\"n\">j</span><span class=\"o\">)</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">filtre</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">sets</span>             <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">univ_sets</span>        <span class=\"o\">:</span> <span class=\"n\">univ</span> <span class=\"err\">∈</span> <span class=\"n\">sets</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">sets_of_superset</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">U</span> <span class=\"n\">V</span><span class=\"o\">},</span> <span class=\"n\">U</span> <span class=\"err\">∈</span> <span class=\"n\">sets</span> <span class=\"bp\">→</span> <span class=\"n\">U</span> <span class=\"err\">⊆</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"n\">V</span> <span class=\"err\">∈</span> <span class=\"n\">sets</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">inter_sets</span>       <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">U</span> <span class=\"n\">V</span><span class=\"o\">},</span> <span class=\"n\">U</span> <span class=\"err\">∈</span> <span class=\"n\">sets</span> <span class=\"bp\">→</span> <span class=\"n\">V</span> <span class=\"err\">∈</span> <span class=\"n\">sets</span> <span class=\"bp\">→</span> <span class=\"n\">U</span> <span class=\"err\">∩</span> <span class=\"n\">V</span> <span class=\"err\">∈</span> <span class=\"n\">sets</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">filtre_de_base</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">base_de_filtre</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">filtre</span> <span class=\"n\">X</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">sets</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">U</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"bp\">.</span><span class=\"n\">ι</span><span class=\"o\">,</span> <span class=\"n\">B</span><span class=\"bp\">.</span><span class=\"n\">s</span> <span class=\"n\">i</span> <span class=\"err\">⊆</span> <span class=\"n\">U</span><span class=\"o\">},</span>\n  <span class=\"n\">univ_sets</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n    <span class=\"n\">use</span> <span class=\"n\">B</span><span class=\"bp\">.</span><span class=\"n\">defaut</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n    <span class=\"n\">trivial</span><span class=\"o\">,</span>\n  <span class=\"kn\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">sets_of_superset</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n    <span class=\"n\">rintros</span> <span class=\"n\">U</span> <span class=\"n\">V</span> <span class=\"bp\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">hi</span><span class=\"bp\">⟩</span> <span class=\"n\">hUV</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n    <span class=\"n\">change</span> <span class=\"n\">B</span><span class=\"bp\">.</span><span class=\"n\">s</span> <span class=\"n\">i</span> <span class=\"err\">⊆</span> <span class=\"n\">V</span><span class=\"o\">,</span>\n    <span class=\"n\">transitivity</span> <span class=\"n\">U</span> <span class=\"bp\">;</span> <span class=\"n\">assumption</span><span class=\"o\">,</span>\n  <span class=\"kn\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">inter_sets</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n    <span class=\"n\">rintros</span> <span class=\"n\">U</span> <span class=\"n\">V</span> <span class=\"bp\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">hi</span><span class=\"bp\">⟩</span> <span class=\"bp\">⟨</span><span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">hj</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">B</span><span class=\"bp\">.</span><span class=\"n\">inter</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"k\">with</span> <span class=\"n\">k</span> <span class=\"n\">hk</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"bp\">⟨</span><span class=\"n\">hi</span> <span class=\"o\">(</span><span class=\"n\">hk</span> <span class=\"n\">hx</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">hj</span> <span class=\"o\">(</span><span class=\"n\">hk</span> <span class=\"n\">hx</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"kn\">end</span> <span class=\"o\">}</span>\n</pre></div>\n\n\n<p>This is driving me crazy.</p>\n<div class=\"codehilite\"><pre><span></span>\n</pre></div>",
        "id": 189843668,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583446918
    },
    {
        "content": "<p>I see tactic states like:</p>\n<div class=\"codehilite\"><pre><span></span>1 goal\nX : Type ?,\nB : base_de_filtre X\n⊢ set.mem univ {U : set X | ∃ (i : B.ι), set.subset (B.s i) U}\n</pre></div>",
        "id": 189843777,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583446981
    },
    {
        "content": "<p>I just noticed the strange <code>Type ?</code> in the pasted state. Removing all <code>Type*</code> makes Lean use notations again!</p>",
        "id": 189843932,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583447086
    },
    {
        "content": "<p>Thanks to everybody (from every universe) who helped me fixing this.</p>",
        "id": 189844056,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583447165
    },
    {
        "content": "<p>I'm still interested in reading more explanation about why Lean is losing notations here.</p>",
        "id": 189845095,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583447984
    },
    {
        "content": "<p>I could reproduce it, and it looks really weird. No idea why this happens.</p>",
        "id": 189845227,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1583448115
    },
    {
        "content": "<p>I recall <span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> filed a bug about this a while back</p>",
        "id": 189851782,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583453868
    },
    {
        "content": "<p>The use of universe metavariables causes structure literals to unfold notations like <code>has_mem.mem</code> for some reason</p>",
        "id": 189851850,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583453926
    },
    {
        "content": "<p>(This isn't actually a notation issue in the sense of printing; <code>set.mem</code> has no notation, only <code>has_mem.mem</code>. The question is why <code>has_mem.mem</code> was unfolded)</p>",
        "id": 189851874,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583453961
    },
    {
        "content": "<p>Is it the issue which is fixed by writing <code>Type u</code> instead of <code>Type *</code>?</p>",
        "id": 189867481,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583478165
    },
    {
        "content": "<p>weird coincidence -- this just happened to me when bundling subgroups. For me the <code>universe u</code> trick fixes it.</p>",
        "id": 189882269,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583493368
    }
]