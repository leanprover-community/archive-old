[
    {
        "content": "<p>I found out today that</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">namespace</span> <span class=\"n\">A</span><span class=\"bp\">.</span><span class=\"n\">B</span>\n<span class=\"bp\">...</span>\n<span class=\"kn\">end</span> <span class=\"n\">A</span><span class=\"bp\">.</span><span class=\"n\">B</span>\n</pre></div>\n\n\n<p>is not entirely equivalent to</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">namespace</span> <span class=\"n\">A</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">B</span>\n<span class=\"bp\">...</span>\n<span class=\"kn\">end</span> <span class=\"n\">B</span>\n<span class=\"kn\">end</span> <span class=\"n\">A</span>\n</pre></div>",
        "id": 179892433,
        "sender_full_name": "Reid Barton",
        "timestamp": 1572914856
    },
    {
        "content": "<p>If you're in a namespace <code>C</code> and you refer to a name <code>x</code> and <code>C.x</code> exists, then Lean will assume you mean <code>C.x</code> and not consider any other potential <code>x</code>. For this purpose, the latter sequence above is \"in\" both namespaces <code>A</code> and <code>A.B</code> (I assume <code>A.B</code> gets checked first, though I didn't test), while the former sequence is only \"in\" namespace <code>A.B</code>, not namespace <code>A</code>.</p>",
        "id": 179892575,
        "sender_full_name": "Reid Barton",
        "timestamp": 1572915040
    },
    {
        "content": "<p>If you're writing category theory modules, I recommend not writing <code>namespace category_theory.foo</code> (as I used to).</p>",
        "id": 179892595,
        "sender_full_name": "Reid Barton",
        "timestamp": 1572915085
    },
    {
        "content": "<p><code>namespace A.B</code> can be seen as having two effects: Making all new definitions <code>x</code> land as <code>A.B.x</code>, and <code>open</code>ing the namespace <code>A.B</code> so that <code>A.B.foo</code> is accessible. If you use nested namespace, the former effect (the target namespace) is the same, but you have two <code>open</code>s instead of one. (A <code>namespace</code> is also something like a high-priority <code>open</code>; it will always trump any other <code>open</code> when there is a conflict, while a conflict between two <code>open</code>s results in an ambiguity error.)</p>",
        "id": 179894090,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572917036
    },
    {
        "content": "<p>I find it really weird. You're in some particular namespace at any given point, it shouldn't matter how you got there.</p>",
        "id": 179895011,
        "sender_full_name": "Reid Barton",
        "timestamp": 1572918357
    }
]