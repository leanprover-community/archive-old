[
    {
        "content": "<p>Would it be possible to configure a hotkey in VScode that grabs the first output from <code>suggest</code> and prepends/replaces the <code>suggest</code> that generated it?</p>",
        "id": 181194920,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1574245431
    },
    {
        "content": "<p>Bonus points if the replace/prepending is automatically chosen depending on whether the suggestion is an <code>exact</code>/<code>refine</code></p>",
        "id": 181194990,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1574245474
    },
    {
        "content": "<p>This should be possible with some ugly tactic state parsing hacks, but I wonder if there might be a better way to do this using a hole command.</p>",
        "id": 181205428,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1574255459
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span> I had also hoped that hole commands would help. But see the other <a href=\"#narrow/stream/113488-general/topic/hole.20command.20in.20tactic.20mode\" title=\"#narrow/stream/113488-general/topic/hole.20command.20in.20tactic.20mode\">thread</a> about hole commands in tactic mode. It doesn't really seem to work, as far as I can see.</p>",
        "id": 181280376,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1574318839
    },
    {
        "content": "<p>I think these sort of UI improvements would break down another entry barrier for new users. But I lack the skills of implementing this.</p>",
        "id": 181280421,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1574318891
    },
    {
        "content": "<p>Globally there is a big need for more structured tactic state information. Currently the Lean server returns tactic state as a single string that you see in the Lean message panel in VScode. Even syntax highlighting there is based on a hack. It would be really nice to see this changing in Lean 4, but I don't know what are the plans here.</p>",
        "id": 181281938,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1574321250
    },
    {
        "content": "<p>It would be amazing if hovering and clicking on definitions worked in the tactic state...</p>",
        "id": 181283872,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1574323861
    },
    {
        "content": "<p>Even hovering on <em>notation</em> in the tactic state to see the keyboard shortcut would be useful! But it would be much better for definitions because sometimes they're much harder to cut and paste into something syntactically valid in a .lean file (especially if you're in the middle of something else)</p>",
        "id": 181283954,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1574323950
    },
    {
        "content": "<blockquote>\n<p>It would be amazing if hovering and clicking on definitions worked in the tactic state...</p>\n</blockquote>\n<p>It will.</p>",
        "id": 181284429,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1574324606
    },
    {
        "content": "<blockquote>\n<p>Even hovering on <em>notation</em> in the tactic state to see the keyboard shortcut would be useful!</p>\n</blockquote>\n<p>That part is on the editor. Works out of the box in Emacs for example (<code>describe-char</code>).</p>",
        "id": 181284568,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1574324757
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>Even hovering on <em>notation</em> in the tactic state to see the keyboard shortcut would be useful!</p>\n</blockquote>\n<p>That part is on the editor. Works out of the box in Emacs for example (<code>describe-char</code>).</p>\n</blockquote>\n<p>I think I can see how to implement this for the VS Code extension (but no ETA promise). It will require implementing some custom tooltip functionality for the info view; we can't reuse VS Code's built-in \"hover provider\". </p>\n<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> Is it too early to ask how much the Lean server interface will change from Lean 3 to Lean 4?</p>",
        "id": 181310122,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1574347252
    },
    {
        "content": "<blockquote>\n<p>Is it too early to ask how much the Lean server interface will change from Lean 3 to Lean 4?</p>\n</blockquote>\n<p>We'll implement LSP, so... completely</p>",
        "id": 181310242,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1574347327
    },
    {
        "content": "<blockquote>\n<p>I think these sort of UI improvements would break down another entry barrier for new users. </p>\n</blockquote>\n<p>+1 from me. I for one would be happy to see more ideas and discussion of UI here.</p>",
        "id": 181310783,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1574347646
    },
    {
        "content": "<p>I heard that LSP lacked some features generally required by proof assistants. Have you written a plan/design somewhere?</p>",
        "id": 181315273,
        "sender_full_name": "Simon Cruanes",
        "timestamp": 1574350177
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132878\">@Simon Cruanes</span> Can you be more specific? What kind of features are you thinking of? (I don't know anything about LSP...)</p>",
        "id": 181316136,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1574350678
    },
    {
        "content": "<p>Anything interactive, I'd say, since it's designed for \"normal\" programming languages in mind. But then the world is moving away from Coq-style display of tactics, so it might be doable, idk.</p>",
        "id": 181316270,
        "sender_full_name": "Simon Cruanes",
        "timestamp": 1574350737
    },
    {
        "content": "<p>I wrote an LSP server for MM0, and there isn't really anything like the goal view, but the format is extensible so you can always just add a custom extension</p>",
        "id": 181316274,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1574350740
    },
    {
        "content": "<p>You should put screenshots on the github page <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 181316301,
        "sender_full_name": "Simon Cruanes",
        "timestamp": 1574350763
    },
    {
        "content": "<p>I really should</p>",
        "id": 181316314,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1574350773
    },
    {
        "content": "<blockquote>\n<p>But then the world is moving away from Coq-style display of tactics, so it might be doable, idk.</p>\n</blockquote>\n<p>What is the world moving towards instead?</p>",
        "id": 181316334,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1574350789
    },
    {
        "content": "<p>I mostly rely on diagnostics and hovers</p>",
        "id": 181316342,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1574350797
    },
    {
        "content": "<p>but getting the goal state via diagnostics is a bit exasperating</p>",
        "id": 181316408,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1574350815
    },
    {
        "content": "<p>I think taking away the tactic state display would be a pretty hard sell here.</p>",
        "id": 181316413,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1574350823
    },
    {
        "content": "<p>it's not clear to me how to improve LSP to support our use case better though</p>",
        "id": 181316519,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1574350909
    },
    {
        "content": "<p>once upon a time, the goal state was displayed via \"output\" (maybe it still does in emacs)</p>",
        "id": 181316616,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1574350959
    },
    {
        "content": "<blockquote>\n<p>What is the world moving towards instead?</p>\n</blockquote>\n<p>I meant with the \"checked\" area on top. You still need a way of displaying the proof state, using an extension I guess yeah.</p>",
        "id": 181316665,
        "sender_full_name": "Simon Cruanes",
        "timestamp": 1574350987
    },
    {
        "content": "<p>Hmm, I'm not familiar with Coq. What is the \"checked\" area?</p>",
        "id": 181316871,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1574351112
    },
    {
        "content": "<p>There is a big colored highlight covering the top half of the file, above the cursor, and you \"step\" the checker through lines</p>",
        "id": 181316981,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1574351168
    },
    {
        "content": "<p>In Coq the proof state doesn't reflect the state of where your cursor is, but the point up to some \"checkpoint\".</p>",
        "id": 181316993,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1574351180
    },
    {
        "content": "<p><a href=\"https://en.wikipedia.org/wiki/Proof_assistant#/media/File:CoqProofOfDecidablityOfEqualityOnNaturalNumbers.png\" target=\"_blank\" title=\"https://en.wikipedia.org/wiki/Proof_assistant#/media/File:CoqProofOfDecidablityOfEqualityOnNaturalNumbers.png\">https://en.wikipedia.org/wiki/Proof_assistant#/media/File:CoqProofOfDecidablityOfEqualityOnNaturalNumbers.png</a></p>",
        "id": 181316994,
        "sender_full_name": "Simon Cruanes",
        "timestamp": 1574351180
    },
    {
        "content": "<p>I guess you could view this \"checkpoint\" as a 2nd cursor that you can move around whenever you want.</p>",
        "id": 181317022,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1574351206
    },
    {
        "content": "<p>when tactics are very expensive, this approach scales better</p>",
        "id": 181317024,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1574351207
    },
    {
        "content": "<p>because you aren't rechecking the whole file all the time</p>",
        "id": 181317064,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1574351229
    },
    {
        "content": "<p>Another possibility is to use hashing to avoid recomputing things that haven't changed.</p>",
        "id": 181317105,
        "sender_full_name": "Simon Cruanes",
        "timestamp": 1574351255
    },
    {
        "content": "<p>but it is definitely less ergonomic than the lean / isabelle \"dynamic document\" style, which puts more strain on the system to keep things in sync but has an easy mental model</p>",
        "id": 181317374,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1574351406
    },
    {
        "content": "<p>In Lean4, the state at the end of each line in a tactic block will be stored, right, so that you get the best of both worlds (no need to recompile the beginning of a proof if you just change the last line)?</p>",
        "id": 181317755,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1574351623
    },
    {
        "content": "<blockquote>\n<p>In Lean4, the state at the end of each line in a tactic block will be stored, right, so that you get the best of both worlds (no need to recompile the beginning of a proof if you just change the last line)?</p>\n</blockquote>\n<p>that's fine if you detect that nothing was changed, yes!</p>",
        "id": 181321034,
        "sender_full_name": "Simon Cruanes",
        "timestamp": 1574353379
    },
    {
        "content": "<blockquote>\n<p>it's not clear to me how to improve LSP to support our use case better though</p>\n</blockquote>\n<p>You can easily add custom commands to LSP.  I would expect that an LSP server for Lean offers a command to get the goal state at any position in the file.  Then we can roll the info view as usual.  I'm not sure if our (comparatively) niche use case is worth standardizing.  It might even be desirable to roll it ourselves to facilitate experimentation.</p>",
        "id": 181330708,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1574359663
    },
    {
        "content": "<p>It might be nice to standardize the LSP extension across theorem provers though, so that the LSP client can stay relatively generic; otherwise it's not buying much over the original situation</p>",
        "id": 181331022,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1574359895
    },
    {
        "content": "<p>just dub the extensions \"LLSP\", for \"logic language server protocol\" <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 181577252,
        "sender_full_name": "Simon Cruanes",
        "timestamp": 1574365602
    },
    {
        "content": "<p>\"Proof Generaler\"</p>",
        "id": 181583548,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1574369969
    },
    {
        "content": "<blockquote>\n<p>In Coq the proof state doesn't reflect the state of where your cursor is, but the point up to some \"checkpoint\".</p>\n</blockquote>\n<p>The absence of Coq's iron curtain going up and down in your file is one of the first things I noticed when I used Lean for the first time. Maybe it was even before I noticed unicode. It really feels like absolute freedom to use a proof assistant that way, even after using Coq only for a couple of weeks.</p>",
        "id": 181587184,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1574372418
    }
]