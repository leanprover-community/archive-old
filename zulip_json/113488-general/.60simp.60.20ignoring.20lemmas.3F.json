[
    {
        "content": "<p>in <a href=\"https://github.com/leanprover-community/mathlib/issues/7759\">#7759</a>, we're running into a weird issue where <code>simp</code> just refuses to use a <code>simp</code>-lemma, unless we put it in specifically. see <a href=\"https://github.com/leanprover-community/mathlib/pull/7759/commits/fe4384a332661d35f51cf3ed54428dcb3cdbb8e0\">here</a>, but putting <code>card_embedding_eq</code> in the given lemmata instantly solves everything. is this a known issue?</p>",
        "id": 241654864,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1622924778
    },
    {
        "content": "<p>(also, is there any way to debug <code>simp</code> when it times out? i tried turning on all the trace options but they didnt output anything)</p>",
        "id": 241654872,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1622924798
    },
    {
        "content": "<p>If it's timing out then there could be a loop</p>",
        "id": 241655029,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622925059
    },
    {
        "content": "<p>that was my first thought, but can't trace it at all</p>",
        "id": 241655096,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1622925159
    },
    {
        "content": "<p>PS the link seems to be to a commit which doesn't mention <code>card_embedding_eq</code>. Is this intentional?</p>",
        "id": 241655113,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622925208
    },
    {
        "content": "<p>yes, it's a <code>simp</code> lemma; the current fix is <a href=\"https://github.com/leanprover-community/mathlib/pull/7759/commits/cddd0fe1e6b1293187ccf62bd6d2325c78e16b17\">here</a></p>",
        "id": 241655176,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1622925300
    },
    {
        "content": "<p>Oh there are big numbers involved here -- perhaps things are being unfolded</p>",
        "id": 241655236,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622925372
    },
    {
        "content": "<p>The thing is, it already worked fine in the past (aka two days ago), and then I changed <code>desc_fac</code>(the ascending factorial) to <code>desc_fact</code>(the actual descending factorial), Eric adapted some stuffn and BEM it broke.</p>",
        "id": 241655306,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1622925499
    },
    {
        "content": "<p>it's surprisingly a pretty fast <code>norm_num</code> (when it works!)</p>",
        "id": 241655315,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1622925526
    },
    {
        "content": "<p>Doesn't it <em>only</em> have to multiply 23 terms?</p>",
        "id": 241655338,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1622925574
    },
    {
        "content": "<p>~2 sec, and yes but it also has to unfold them and make the atrocious-looking proof</p>",
        "id": 241655346,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1622925601
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/113488-general/topic/.60simp.60.20ignoring.20lemmas.3F/near/241654872\">said</a>:</p>\n<blockquote>\n<p>(also, is there any way to debug <code>simp</code> when it times out? i tried turning on all the trace options but they didnt output anything)</p>\n</blockquote>\n<p>Did you try the suggestions in this library note (point 3)?<br>\n<a href=\"https://leanprover-community.github.io/mathlib_docs/notes.html#simp-normal%20form\">https://leanprover-community.github.io/mathlib_docs/notes.html#simp-normal%20form</a></p>",
        "id": 241702614,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1623002247
    },
    {
        "content": "<p>Floris, when I try this, without specifiying my <code>simp</code> lemmata, both <code>norm_num</code> and <code>simp</code> just output a short error message consisting of something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">0</span><span class=\"bp\">.</span> <span class=\"o\">[</span><span class=\"n\">simplify.rewrite_failure</span><span class=\"o\">]</span> <span class=\"n\">fail</span> <span class=\"n\">to</span> <span class=\"k\">match</span> <span class=\"bp\">'</span><span class=\"n\">bit0_zero'</span><span class=\"o\">:</span>\n<span class=\"mi\">2</span>\n<span class=\"bp\">=?=</span>\n<span class=\"n\">bit0</span> <span class=\"mi\">0</span>\n<span class=\"c1\">--------------</span>\n<span class=\"mi\">0</span><span class=\"bp\">.</span> <span class=\"o\">[</span><span class=\"n\">simplify.rewrite_failure</span><span class=\"o\">]</span> <span class=\"n\">fail</span> <span class=\"n\">to</span> <span class=\"k\">match</span> <span class=\"bp\">'</span><span class=\"n\">bit1_zero'</span><span class=\"o\">:</span>\n<span class=\"mi\">5</span>\n<span class=\"bp\">=?=</span>\n<span class=\"n\">bit1</span> <span class=\"mi\">0</span>\n<span class=\"c1\">--------------</span>\n<span class=\"mi\">0</span><span class=\"bp\">.</span> <span class=\"o\">[</span><span class=\"n\">simplify.rewrite_failure</span><span class=\"o\">]</span> <span class=\"n\">fail</span> <span class=\"n\">to</span> <span class=\"k\">match</span> <span class=\"bp\">'</span><span class=\"n\">bit1_zero'</span><span class=\"o\">:</span>\n<span class=\"mi\">11</span>\n<span class=\"bp\">=?=</span>\n<span class=\"n\">bit1</span> <span class=\"mi\">0</span>\n<span class=\"c1\">--------------</span>\n<span class=\"mi\">0</span><span class=\"bp\">.</span> <span class=\"o\">[</span><span class=\"n\">simplify.rewrite_failure</span><span class=\"o\">]</span> <span class=\"n\">fail</span> <span class=\"n\">to</span> <span class=\"k\">match</span> <span class=\"bp\">'</span><span class=\"n\">bit0_zero'</span><span class=\"o\">:</span>\n<span class=\"mi\">22</span>\n<span class=\"bp\">=?=</span>\n<span class=\"n\">bit0</span> <span class=\"mi\">0</span>\n<span class=\"c1\">--------------</span>\n<span class=\"mi\">0</span><span class=\"bp\">.</span> <span class=\"o\">[</span><span class=\"n\">simplify.rewrite_failure</span><span class=\"o\">]</span> <span class=\"n\">fail</span> <span class=\"n\">to</span> <span class=\"k\">match</span> <span class=\"bp\">'</span><span class=\"n\">bit1_zero'</span><span class=\"o\">:</span>\n<span class=\"mi\">45</span>\n<span class=\"bp\">=?=</span>\n<span class=\"n\">bit1</span> <span class=\"mi\">0</span>\n<span class=\"c1\">--------------</span>\n<span class=\"mi\">0</span><span class=\"bp\">.</span> <span class=\"o\">[</span><span class=\"n\">simplify.rewrite_failure</span><span class=\"o\">]</span> <span class=\"n\">fail</span> <span class=\"n\">to</span> <span class=\"k\">match</span> <span class=\"bp\">'</span><span class=\"n\">bit1_zero'</span><span class=\"o\">:</span>\n<span class=\"mi\">91</span>\n<span class=\"bp\">=?=</span>\n<span class=\"n\">bit1</span> <span class=\"mi\">0</span>\n<span class=\"c1\">--------------</span>\n<span class=\"mi\">0</span><span class=\"bp\">.</span> <span class=\"o\">[</span><span class=\"n\">simplify.rewrite_failure</span><span class=\"o\">]</span> <span class=\"n\">fail</span> <span class=\"n\">to</span> <span class=\"k\">match</span> <span class=\"bp\">'</span><span class=\"n\">bit0_zero'</span><span class=\"o\">:</span>\n<span class=\"mi\">182</span>\n<span class=\"bp\">=?=</span>\n<span class=\"n\">bit0</span> <span class=\"mi\">0</span>\n<span class=\"c1\">--------------</span>\n<span class=\"mi\">0</span><span class=\"bp\">.</span> <span class=\"o\">[</span><span class=\"n\">simplify.rewrite_failure</span><span class=\"o\">]</span> <span class=\"n\">fail</span> <span class=\"n\">to</span> <span class=\"k\">match</span> <span class=\"bp\">'</span><span class=\"n\">bit1_zero'</span><span class=\"o\">:</span>\n<span class=\"mi\">365</span>\n<span class=\"bp\">=?=</span>\n<span class=\"n\">bit1</span> <span class=\"mi\">0</span>\n<span class=\"c1\">-----------</span>\n</code></pre></div>\n<p>(this was all the output with <code>try_for 100000</code>!)</p>\n<p>If I add the lemmata, I start getting a standard-looking <code>simp</code> output: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">0</span><span class=\"bp\">.</span> <span class=\"o\">[</span><span class=\"n\">simplify.rewrite</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype.card_embedding_eq</span><span class=\"o\">]:</span> <span class=\"bp\">‖</span><span class=\"n\">fin</span> <span class=\"mi\">22</span> <span class=\"bp\">↪</span> <span class=\"n\">fin</span> <span class=\"mi\">365</span><span class=\"bp\">‖</span> <span class=\"bp\">==&gt;</span> <span class=\"bp\">‖</span><span class=\"n\">fin</span> <span class=\"mi\">365</span><span class=\"bp\">‖.</span><span class=\"n\">desc_fact</span> <span class=\"bp\">‖</span><span class=\"n\">fin</span> <span class=\"mi\">22</span><span class=\"bp\">‖</span>\n<span class=\"mi\">0</span><span class=\"bp\">.</span> <span class=\"o\">[</span><span class=\"n\">simplify.rewrite_failure</span><span class=\"o\">]</span> <span class=\"n\">fail</span> <span class=\"n\">to</span> <span class=\"k\">match</span> <span class=\"bp\">'</span><span class=\"n\">fintype.card_embedding_eq'</span><span class=\"o\">:</span>\n<span class=\"bp\">‖</span><span class=\"n\">fin</span> <span class=\"mi\">365</span><span class=\"bp\">‖</span>\n<span class=\"bp\">=?=</span>\n<span class=\"bp\">‖?</span><span class=\"n\">x_0</span> <span class=\"bp\">↪</span> <span class=\"bp\">?</span><span class=\"n\">x_1</span><span class=\"bp\">‖</span>\n<span class=\"c1\">--------------</span>\n<span class=\"mi\">0</span><span class=\"bp\">.</span> <span class=\"o\">[</span><span class=\"n\">simplify.rewrite_failure</span><span class=\"o\">]</span> <span class=\"n\">fail</span> <span class=\"n\">to</span> <span class=\"k\">match</span> <span class=\"bp\">'</span><span class=\"n\">fintype.card_embedding_eq_of_infinite'</span><span class=\"o\">:</span>\n<span class=\"bp\">‖</span><span class=\"n\">fin</span> <span class=\"mi\">365</span><span class=\"bp\">‖</span>\n<span class=\"bp\">=?=</span>\n<span class=\"bp\">‖?</span><span class=\"n\">x_0</span> <span class=\"bp\">↪</span> <span class=\"bp\">?</span><span class=\"n\">x_1</span><span class=\"bp\">‖</span>\n<span class=\"c1\">--------------</span>\n<span class=\"mi\">0</span><span class=\"bp\">.</span> <span class=\"o\">[</span><span class=\"n\">simplify.rewrite_failure</span><span class=\"o\">]</span> <span class=\"n\">fail</span> <span class=\"n\">to</span> <span class=\"k\">match</span> <span class=\"bp\">'</span><span class=\"n\">card_vector'</span><span class=\"o\">:</span>\n<span class=\"bp\">‖</span><span class=\"n\">fin</span> <span class=\"mi\">365</span><span class=\"bp\">‖</span>\n<span class=\"bp\">=?=</span>\n</code></pre></div>\n<p>and so on, stretching all the way down to the bottom of the page. It seems <code>simp</code> gets stuck, maybe on some type-class inference?</p>",
        "id": 241765252,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1623067387
    },
    {
        "content": "<p>Aha! When I look at the type-classes, there seems to be some sort of <code>subsingleton</code> weirdness; details are <a href=\"https://gist.github.com/ericrbg/7a5f104273802a34f27ae4773ece6e1d\">here</a> but it seems like there's something to do with  <code>subsingleton</code> ↔ <code>unique</code> ↔ <code>is_empty</code></p>",
        "id": 241765697,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1623067616
    },
    {
        "content": "<p>I tried <code>local attribute [-instance] unique.subsingleton pi.subsingleton is_empty.subsingleton</code> but that still doesn't help sadly :(</p>",
        "id": 241766273,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1623067920
    },
    {
        "content": "<p>The output of  the following code is 87k lines. <code>simp</code> does hundreds of rewrites, and since you don't use <code>simp only</code>, in every step it will consider dozens of other simp lemmas that don't apply. I think this is just asking too much of <code>simp</code>. Mentioning <code>fintype.card_embedding_eq</code> likely moved the time from just above deterministic timeout to just under it, because it tries lemmas in different orders.</p>\n<p>The real solution is to squeeze the simp and use <code>simp only</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">trace.simplify.rewrite</span> <span class=\"n\">true</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.simplify.rewrite_failure</span> <span class=\"n\">true</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.class_instances</span> <span class=\"n\">true</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">birthday</span> <span class=\"o\">:</span>\n  <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"bp\">‖</span><span class=\"n\">fin</span> <span class=\"mi\">23</span> <span class=\"bp\">↪</span> <span class=\"n\">fin</span> <span class=\"mi\">365</span><span class=\"bp\">‖</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">‖</span><span class=\"n\">fin</span> <span class=\"mi\">23</span> <span class=\"bp\">→</span> <span class=\"n\">fin</span> <span class=\"mi\">365</span><span class=\"bp\">‖</span> <span class=\"bp\">∧</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"bp\">‖</span><span class=\"n\">fin</span> <span class=\"mi\">22</span> <span class=\"bp\">↪</span> <span class=\"n\">fin</span> <span class=\"mi\">365</span><span class=\"bp\">‖</span> <span class=\"bp\">&gt;</span> <span class=\"bp\">‖</span><span class=\"n\">fin</span> <span class=\"mi\">22</span> <span class=\"bp\">→</span> <span class=\"n\">fin</span> <span class=\"mi\">365</span><span class=\"bp\">‖</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span>  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">fintype.card_embedding_eq</span><span class=\"o\">,</span> <span class=\"n\">nat.desc_fact</span><span class=\"o\">]</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 241821089,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1623090944
    },
    {
        "content": "<p>Investigating further, the culprit is definitely <code>fintype.card_embedding_eq_of_infinite</code> (<a href=\"https://leanprover-community.github.io/mathlib_docs/find/fintype.card_embedding_eq_infinite\">docs#fintype.card_embedding_eq_infinite</a>). I don't know why, but <code>simp only [fintype.card_embedding_eq_of_infinite]</code> takes ages.</p>",
        "id": 241822448,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1623091617
    },
    {
        "content": "<p>Ok, the culprit is that when unifying with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fintype.card_embedding_eq_infinite\">docs#fintype.card_embedding_eq_infinite</a>, the simplifier tries to unify the instance <a href=\"https://leanprover-community.github.io/mathlib_docs/find/function.embedding.fintype'\">docs#function.embedding.fintype'</a> with the instance <a href=\"https://leanprover-community.github.io/mathlib_docs/find/function.embedding.fintype\">docs#function.embedding.fintype</a>. The time this takes grows with <code>n</code> in <code>fin n</code>.<br>\nThe problem is also solved by writing <code>local attribute [irreducible] function.embedding.fintype' function.embedding.fintype</code>.</p>\n<p>Can someone make these two instances irreducible globally?</p>",
        "id": 241824115,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1623092414
    },
    {
        "content": "<p>What does it mean for a fintype instance to be irreducible? That <code>dec_trivial</code> can't iterate over the fintype?</p>",
        "id": 241830543,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1623095269
    },
    {
        "content": "<p>I'm not exactly sure. We could have simp-lemmas that reduce <code>fintype.elems</code> to their correct definition.</p>",
        "id": 241832025,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1623095950
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 241847860,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1623103631
    },
    {
        "content": "<p>I think this is the fact it can introspect in the elements, which is definitely insanely intensive</p>",
        "id": 241848382,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1623103989
    },
    {
        "content": "<p>Like without my code, I can actually <code>#reduce fintype (fin 5 ↪ fin 3)</code> or something small</p>",
        "id": 241848417,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1623104018
    },
    {
        "content": "<p>but it's possibly one of the slowest things ever</p>",
        "id": 241848436,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1623104030
    },
    {
        "content": "<p>so it's trying to look at elems and see if they're equal</p>",
        "id": 241848446,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1623104037
    },
    {
        "content": "<p>Wow! Thanks for digging in! I think we'll go for the <code>simp only</code> solution for now. I'm not really akin of the irreducibility issues.</p>",
        "id": 241848608,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1623104130
    },
    {
        "content": "<p>I already pushed <code>irreducible</code> to see how it goes Yaël :) I locally got rid of <code>irreducible</code> in <code>card_embedding</code>, otherwise it should (fingers crossed) compile</p>",
        "id": 241848711,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1623104175
    }
]