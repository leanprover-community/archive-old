[
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean/commit/c0d1eac0843efb0ba5ab6cd10f74db497d74416d\">I wrote a modification to the pretty-printer</a>, which adds the expected type to the pretty-printing of coercions. For example,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">i</span> <span class=\"c1\">-- x + (↑i : ℝ)</span>\n</code></pre></div>\n<p>I think this is a good idea because coercions are a major issue in the roundtripping of pretty-printed output: if I copy a goal usually I have to go through and manually add type ascriptions to each coercion. Since this expected type is an argument to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/coe\">docs#coe</a> anyway, it doesn't cost us much to add the type to the pretty-printer output.</p>\n<p>The commit includes this change for both <a href=\"https://leanprover-community.github.io/mathlib_docs/find/coe\">docs#coe</a> (<code>↑</code>) and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/coe_fn\">docs#coe_fn</a> (<code>⇑</code>). It can also be turned off using <code>set_option pp.ascript_coercions false</code>.</p>\n<p>Before I add tests and everything else to make this a real PR to Lean, I'd like some feedback: is enabling the ascriptions by default a good idea?</p>\n<p>I also feel that there's a better way to actually construct the output string (currently I just concatenate every token together), does a Lean expert have suggestions?</p>",
        "id": 292830496,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1660164511
    },
    {
        "content": "<p>cc the people at ITP I've discussed this with: <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> <span class=\"user-mention\" data-user-id=\"311453\">@Frédéric Dupuis</span> <span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span> <span class=\"user-mention\" data-user-id=\"256311\">@Jannis Limperg</span> <span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span></p>",
        "id": 292830936,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1660164693
    },
    {
        "content": "<p>Some ascriptions in the wild are by pretty long types, so I would feel uncomfortable making that the default.</p>",
        "id": 292830951,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1660164701
    },
    {
        "content": "<p>This is I think something sorely needed, but I think every file has different opinions whether this is needed or not. This would be lifesaving in flt-regular and such, but I think in places where you're just casting <code>n : nat</code> to some ring <code>R</code> it could be cluttery. We're not currently allowed <code>set_option</code> in files, I don't think, but I think this should be allowed</p>",
        "id": 292830986,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1660164715
    },
    {
        "content": "<p>Surely we are:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">old_structure_cmd</span> <span class=\"n\">true</span>\n</code></pre></div>",
        "id": 292832148,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1660165171
    },
    {
        "content": "<p>ahh, we're only banned <code>pp</code>, <code>profiler</code>, and <code>trace</code>. I guess this would go under <code>pp</code>, but maybe this could be excepted</p>",
        "id": 292832551,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1660165304
    },
    {
        "content": "<p>this may be a good idea anyways for cardinal related files, allowing <code>pp.universes</code> to be on in those files would be good</p>",
        "id": 292832968,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1660165446
    },
    {
        "content": "<p>I believe this should be disabled by default. The whole point of coercions is that they're supposed to be (for the most part) invisible. But having the option to enable this is great.</p>",
        "id": 292843522,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1660171029
    },
    {
        "content": "<p>I agree it feels weird for this to be the default, but I definitely think this will be useful!</p>",
        "id": 292847970,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1660174117
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/113488-general/topic/RFC.3A.20printing.20coercions.20with.20type.20ascriptions/near/292832551\">said</a>:</p>\n<blockquote>\n<p>ahh, we're only banned <code>pp</code>, <code>profiler</code>, and <code>trace</code>. I guess this would go under <code>pp</code>, but maybe this could be excepted</p>\n</blockquote>\n<p>Why would <code>pp</code> options be in mathlib? It doesn't affect the compilation of anything. If it's your project you can do what you like but I don't see a reason that <code>pp.ascript_coercions</code> would be different here</p>",
        "id": 292872068,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1660198170
    },
    {
        "content": "<p>But if it doesn't affect the compilation of anything, yet is a sensible setting for a certain file, why shouldn't it be in mathlib?</p>",
        "id": 292876306,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1660201138
    },
    {
        "content": "<p>Things like <code>set_option pp.universes true</code> at the top of a file about cardinals or categorical limits makes a lot of sense to me.</p>",
        "id": 292876356,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1660201173
    },
    {
        "content": "<p>The <code>lean</code> executable isn't the only thing out there trying to work with <code>.lean</code> files in mathlib.</p>",
        "id": 292876445,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1660201207
    },
    {
        "content": "<p>At least, any such option would need to come with a comment explaining that it is meant to be a permanent addition and why</p>",
        "id": 292878712,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1660202609
    },
    {
        "content": "<p>In my opinion, instead of adding <code>set_option</code> calls to files, we should be adding more attributes like <code>pp_nodot</code> so that we can attach the choices to declarations</p>",
        "id": 292880802,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1660203822
    },
    {
        "content": "<p>It would be nice to have an option to show explicit universes in e.g. <a href=\"https://leanprover-community.github.io/mathlib_docs/find/cardinal.lift\">docs#cardinal.lift</a>, for instance</p>",
        "id": 293021160,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1660257948
    },
    {
        "content": "<p>Yes, that type of thing with universes is the main thing I had in mind</p>",
        "id": 293023425,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1660259002
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"238446\">Anne Baanen</span> <a href=\"#narrow/stream/113488-general/topic/RFC.3A.20printing.20coercions.20with.20type.20ascriptions/near/292830496\">said</a>:</p>\n<blockquote>\n<p>if I copy a goal usually I have to go through and manually add type ascriptions to each coercion. </p>\n</blockquote>\n<p>I have a very different experience: if I copy a goal, I usually have to manually delete all coercion arrows for it to elaborate correctly again (note to self: use <code>set_option pp.coercions false</code> more frequently).<br>\nMaybe this has to do with the fact that most coercions in the goals I'm dealing with are <code>coe_fn</code>/<code>⇑</code>, where you almost always have a unique coercion, and there is usually no ambiguity if you leave out the coercion arrow (both for Lean and for human readers). I would be unhappy if <code>⇑</code> becomes an explicit type ascription by default, but of course I would welcome the option.<br>\nI'm unsure what I think about replacing the usual coercion <code>↑</code> with a type ascription by default.</p>",
        "id": 293079258,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1660299344
    },
    {
        "content": "<p>That to me means that we should have a round-tripping mode that will try its best to make the expression round-trip. This has a small scalar product with the current discussion (it's almost orthogonal!).</p>",
        "id": 293079657,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1660299519
    },
    {
        "content": "<p>That is a discussion we should only have in the context of Lean 4.</p>",
        "id": 293079905,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1660299634
    },
    {
        "content": "<p>It strikes me as an elaboration bug that inserting ⇑ almost always makes things fail to elaborate, despite successful elaboration inserting it for us</p>",
        "id": 293088748,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1660303610
    },
    {
        "content": "<p>An option to print without coe_fn arrows at all feels like it would eliminate that pain</p>",
        "id": 293088970,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1660303711
    }
]