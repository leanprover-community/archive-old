[
    {
        "content": "<p>Dear All,</p>\n<p>I have a tricky <code>notation</code>question.  I am working on the \"positive/non-negative\" elements of a Type <code>X</code> (of course, <code>X</code> has zero and lt/le).  Everything works smoothly and my question is about the notation.  Ideally, I would like</p>\n<ul>\n<li>the type of non-negative elements of <code>X</code> to be <code>X≥0</code> (in analogy with <code>nnreal</code>);</li>\n<li>the type of positive elements of <code>X</code> to be <code>X&gt;0</code> (naturally).</li>\n</ul>\n<p>The closest I could get is to have <code>|X≥0</code> and <code>|X&gt;0</code> to work (see below).</p>\n<p>Is it possible to drop the <code>|</code> entirely?</p>\n<p>Thanks!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.nnreal</span>\n\n<span class=\"sd\">/--  The elements of a type that are in relation with a fixed element.  The main examples are</span>\n<span class=\"sd\">the positive/non-negative elements of a Type with an order. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">rel_with</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">o</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"n\">r</span> <span class=\"n\">o</span> <span class=\"n\">a</span> <span class=\"o\">}</span>\n\n<span class=\"c1\">-- Ideally, I would like to drop the vertical bar `|` from the notation.</span>\n<span class=\"kd\">notation</span> <span class=\"bp\">`|`</span><span class=\"o\">:</span><span class=\"mi\">1024</span> <span class=\"n\">α</span><span class=\"o\">:</span><span class=\"mi\">1</span> <span class=\"bp\">`≥</span><span class=\"mi\">0</span><span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">rel_with</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">≤</span><span class=\"o\">)</span>\n<span class=\"kd\">notation</span> <span class=\"bp\">`|`</span><span class=\"o\">:</span><span class=\"mi\">1024</span> <span class=\"n\">α</span><span class=\"o\">:</span><span class=\"mi\">1</span> <span class=\"bp\">`&gt;</span><span class=\"mi\">0</span><span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">rel_with</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">&lt;</span><span class=\"o\">)</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> Check: works with `pnat`. -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">pnat_eq_new</span> <span class=\"o\">:</span> <span class=\"n\">pnat</span> <span class=\"bp\">=</span> <span class=\"bp\">|</span><span class=\"n\">ℕ</span><span class=\"bp\">&gt;</span><span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">natp_eq_new</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span> <span class=\"bp\">=</span> <span class=\"bp\">|</span><span class=\"n\">ℕ</span><span class=\"bp\">&gt;</span><span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> Check: works with random Types with `0` and `&lt;`. -/</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_lt</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"bp\">|</span><span class=\"n\">X</span><span class=\"bp\">&gt;</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>  <span class=\"c1\">--works</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">linear_order</span> <span class=\"n\">Y</span><span class=\"o\">]</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"bp\">|</span><span class=\"n\">Y</span><span class=\"bp\">&gt;</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>  <span class=\"c1\">--works</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"bp\">|</span><span class=\"n\">Y</span><span class=\"bp\">≥</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>  <span class=\"c1\">--works</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ordered_add_comm_monoid</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"bp\">|</span><span class=\"n\">R</span><span class=\"bp\">&gt;</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>  <span class=\"c1\">--works</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"bp\">|</span><span class=\"n\">R</span><span class=\"bp\">≥</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>  <span class=\"c1\">--works</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> Check: works with `ℝ≥0`. -/</span>\n<span class=\"c\">/-</span><span class=\"cm\">  A new name, since otherwise `ℝ≥0` could ambiguously refer to the actual nnreals or the</span>\n<span class=\"cm\">ones defined using `rel_with`. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">myr</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">ℝ</span>\n<span class=\"kd\">instance</span> <span class=\"n\">myr.has_zero</span> <span class=\"o\">:</span> <span class=\"n\">has_zero</span> <span class=\"n\">myr</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n<span class=\"kd\">instance</span> <span class=\"n\">myr.has_le</span> <span class=\"o\">:</span> <span class=\"n\">has_le</span> <span class=\"n\">myr</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">le</span> <span class=\"o\">:=</span> <span class=\"o\">((</span><span class=\"bp\">≤</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">nnreal</span>\n<span class=\"c\">/-</span><span class=\"cm\"> Check: works with `ℝ≥0`. -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">nnreal_eq_myn</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"bp\">|</span><span class=\"n\">myr</span><span class=\"bp\">≥</span><span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 243885818,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1624607836
    },
    {
        "content": "<p>My guess would be that it's not possible, since it's not really possible to distinguish <code>X≥0</code> from <code>ge</code> on <code>Type*</code>.</p>\n<p>There is another problem with this notation (even with <code>|</code>), and that is that <code>≥0</code> and <code>&gt;0</code> become tokens, which means that if we write <code>≥0</code> and <code>&gt;0</code> anywhere in a file that imports this, it will not be interpreted as two tokens:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">rel_with</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">o</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"n\">r</span> <span class=\"n\">o</span> <span class=\"n\">a</span> <span class=\"o\">}</span>\n<span class=\"kd\">notation</span> <span class=\"bp\">`|`</span><span class=\"o\">:</span><span class=\"mi\">1024</span> <span class=\"n\">α</span><span class=\"o\">:</span><span class=\"mi\">1</span> <span class=\"bp\">`≥</span><span class=\"mi\">0</span><span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">rel_with</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">≤</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"bp\">≥</span><span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- syntax error</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">x</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- syntax error</span>\n</code></pre></div>",
        "id": 243896429,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1624615596
    },
    {
        "content": "<p>Floris,</p>\n<p>thank you for your comments!  I might have learned what a token is!</p>\n<p>If this makes sense, I think that what I had in mind then was a \"dependent\" notation where <code>_&gt;0</code> is the token and <code>_</code> is filled in by the symbol for the Type in question.  Once I say it like this, I realize that this is probably too much to ask for...</p>",
        "id": 243896938,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1624615962
    },
    {
        "content": "<p>On the other hand, this is a good way to enforce that the order relations are separated by spaces...</p>",
        "id": 243896988,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1624616014
    },
    {
        "content": "<p>Actually I guess that's pretty fine because we supposedly always use <code>≤</code> and <code>&lt;</code>. If the Unicode index modifier proposition goes through, then you will be able to write subscripts <code>≥</code> and <code>&gt;</code>.</p>",
        "id": 243897006,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1624616032
    },
    {
        "content": "<p>ah, subscript <code>≥0</code> would look even better!</p>",
        "id": 243897082,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1624616070
    },
    {
        "content": "<p>Another idea is to use <code>≥₀</code> and <code>&gt;₀</code>.</p>",
        "id": 243897088,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1624616075
    },
    {
        "content": "<p>Looks a bit weird, but I think it's fine!</p>",
        "id": 243897125,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1624616102
    },
    {
        "content": "<p>Is that already a notation somewhere?</p>",
        "id": 243897153,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1624616126
    },
    {
        "content": "<p>Yaël, I like your suggestion a lot (until <code>&gt;</code> and <code>≥</code> can be subscripts as well)!  Now the remaining issue is the prefix <code>|</code> that I would like to avoid.</p>",
        "id": 243897162,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1624616141
    },
    {
        "content": "<p>Here is the updated notation:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">rel_with</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">o</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"n\">r</span> <span class=\"n\">o</span> <span class=\"n\">a</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">notation</span> <span class=\"bp\">`|`</span><span class=\"o\">:</span><span class=\"mi\">1024</span> <span class=\"n\">α</span><span class=\"o\">:</span><span class=\"mi\">1</span> <span class=\"bp\">`≥₀`</span><span class=\"o\">:</span><span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">rel_with</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">≤</span><span class=\"o\">)</span>\n<span class=\"kd\">notation</span> <span class=\"bp\">`|`</span><span class=\"o\">:</span><span class=\"mi\">1024</span> <span class=\"n\">α</span><span class=\"o\">:</span><span class=\"mi\">1</span> <span class=\"bp\">`&gt;₀`</span><span class=\"o\">:</span><span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">rel_with</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">&lt;</span><span class=\"o\">)</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> Check: works with `pnat`. -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">pnat_eq_new</span> <span class=\"o\">:</span> <span class=\"n\">pnat</span> <span class=\"bp\">=</span> <span class=\"bp\">|</span><span class=\"n\">ℕ</span><span class=\"bp\">&gt;₀</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">natp_eq_new</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span> <span class=\"bp\">=</span> <span class=\"bp\">|</span><span class=\"n\">ℕ</span><span class=\"bp\">&gt;₀</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> Check: works with a random Types with `0` and `&lt;`. -/</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_lt</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"bp\">|</span><span class=\"n\">X</span><span class=\"bp\">&gt;₀</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>  <span class=\"c1\">--works</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">linear_order</span> <span class=\"n\">Y</span><span class=\"o\">]</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"bp\">|</span><span class=\"n\">Y</span><span class=\"bp\">&gt;₀</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>  <span class=\"c1\">--works</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"bp\">|</span><span class=\"n\">Y</span><span class=\"bp\">≥₀</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>  <span class=\"c1\">--works</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ordered_add_comm_monoid</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"bp\">|</span><span class=\"n\">R</span><span class=\"bp\">&gt;₀</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>  <span class=\"c1\">--works</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"bp\">|</span><span class=\"n\">R</span><span class=\"bp\">≥₀</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>  <span class=\"c1\">--works</span>\n</code></pre></div>\n<p>How do people feel about this?</p>",
        "id": 243897445,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1624616349
    },
    {
        "content": "<p>Does it not pick up the correct thing by itself when you remove the <code>|</code>?</p>",
        "id": 243897556,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1624616421
    },
    {
        "content": "<p>This seems to mess up the already defined notation for pnat and nnreal:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">rel_with</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">o</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"n\">r</span> <span class=\"n\">o</span> <span class=\"n\">a</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">notation</span> <span class=\"n\">α</span><span class=\"bp\">`≥₀`</span> <span class=\"o\">:=</span> <span class=\"n\">rel_with</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">≤</span><span class=\"o\">)</span>\n<span class=\"kd\">notation</span> <span class=\"n\">α</span><span class=\"bp\">`&gt;₀`</span> <span class=\"o\">:=</span> <span class=\"n\">rel_with</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">&lt;</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">ℕ</span><span class=\"bp\">&gt;₀</span>  <span class=\"c1\">--works</span>\n<span class=\"k\">#check</span> <span class=\"n\">ℕ</span><span class=\"bp\">≥₀</span>  <span class=\"c1\">--works</span>\n\n<span class=\"c1\">-- however this does not</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">pnat_eq_new</span> <span class=\"o\">:</span> <span class=\"n\">pnat</span> <span class=\"bp\">=</span> <span class=\"n\">ℕ</span><span class=\"bp\">&gt;₀</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"c1\">-- not a rfl-lemma, even though marked as rfl</span>\n<span class=\"c1\">-- and</span>\n<span class=\"c1\">-- invalid pre-numeral, universe level must be &gt; 0</span>\n</code></pre></div>\n<p>(I get the same error when I try the nnreal \"<code>rfl</code>\".)</p>",
        "id": 243898150,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1624616856
    },
    {
        "content": "<p>Okay I just don't know how notations work <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 243898826,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1624617347
    },
    {
        "content": "<p>Me neither, but thank you very much for your suggestions!</p>",
        "id": 243898939,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1624617416
    },
    {
        "content": "<p>Looking for trouble: this does not work for the same reason as the one above</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">notation</span> <span class=\"n\">α</span><span class=\"bp\">`🐙`</span> <span class=\"o\">:=</span> <span class=\"n\">rel_with</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">&lt;</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">ℕ</span><span class=\"bp\">🐙</span>  <span class=\"c1\">--works</span>\n\n<span class=\"c1\">-- however this does not</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">pnat_eq_new</span> <span class=\"o\">:</span> <span class=\"n\">pnat</span> <span class=\"bp\">=</span> <span class=\"n\">ℕ</span><span class=\"bp\">🐙</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>so the <code>&gt;</code> symbol was not actually relevant.</p>",
        "id": 243899188,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1624617598
    },
    {
        "content": "<p>It doesn't work because of priority, <br>\ncheck this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">notation</span> <span class=\"n\">α</span><span class=\"bp\">`🐙`</span> <span class=\"o\">:=</span> <span class=\"n\">α</span> <span class=\"bp\">∧</span> <span class=\"n\">α</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">pp.notation</span>\n<span class=\"k\">#check</span> <span class=\"n\">ℕ</span> <span class=\"bp\">=</span> <span class=\"n\">ℕ</span><span class=\"bp\">🐙</span>\n<span class=\"c1\">-- ℕ = ℕ ∧ ℕ = ℕ : Prop</span>\n</code></pre></div>\n<p>Just add more priority</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">notation</span> <span class=\"n\">α</span><span class=\"bp\">`🐙`</span><span class=\"o\">:</span><span class=\"mi\">1024</span> <span class=\"o\">:=</span> <span class=\"n\">α</span> <span class=\"bp\">∧</span> <span class=\"n\">α</span>\n</code></pre></div>",
        "id": 243899667,
        "sender_full_name": "kana",
        "timestamp": 1624617932
    },
    {
        "content": "<p>kana, thank you so much!  This does indeed work!!  </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">notation</span> <span class=\"n\">α</span><span class=\"bp\">`&gt;₀`</span><span class=\"o\">:</span><span class=\"mi\">1024</span> <span class=\"o\">:=</span> <span class=\"n\">rel_with</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">&lt;</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">ℕ</span> <span class=\"bp\">=</span> <span class=\"n\">ℕ</span><span class=\"bp\">&gt;₀</span>  <span class=\"c1\">--works</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">pnat_eq_new</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">//</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"n\">ℕ</span><span class=\"bp\">&gt;₀</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>  <span class=\"c1\">--also works!</span>\n</code></pre></div>",
        "id": 243900533,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1624618601
    },
    {
        "content": "<p>I suggest using <code>1025</code> or higher as number, so that <code>option ℕ&gt;₀</code> is <code>option (ℕ&gt;₀)</code> and not <code>(option ℕ)&gt;₀</code></p>",
        "id": 243900663,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1624618706
    },
    {
        "content": "<p>So, as long as subscripts for <code>≥</code> and <code>&gt;</code> are available, I think that my current favourites are <code>≥₀</code> and <code>&gt;₀</code>.  Any further thoughts?</p>",
        "id": 243900668,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1624618714
    },
    {
        "content": "<p>The <code>0</code> really looks like it's modifying the inequality though, but maybe that's the best we can do for now...</p>",
        "id": 243900692,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1624618736
    },
    {
        "content": "<p>On paper, I would write <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"double-struck\">N</mi><mrow><mo>≥</mo><mn>0</mn></mrow></msub></mrow><annotation encoding=\"application/x-tex\">\\mathbb{N}_{\\ge 0}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.934069em;vertical-align:-0.24517899999999998em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">N</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.301108em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mrel mtight\">≥</span><span class=\"mord mtight\">0</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.24517899999999998em;\"><span></span></span></span></span></span></span></span></span></span>, for sure...</p>",
        "id": 243900722,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1624618774
    },
    {
        "content": "<p>yeah, that would be nice</p>",
        "id": 243900729,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1624618784
    },
    {
        "content": "<p>Another way you can play this game:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">notation</span> <span class=\"n\">α</span> <span class=\"bp\">`ː`</span><span class=\"o\">:</span><span class=\"mi\">1025</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">subtype</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">ℕ</span> <span class=\"bp\">=</span> <span class=\"n\">ℕ</span><span class=\"bp\">ː</span><span class=\"o\">(</span><span class=\"bp\">&gt;</span><span class=\"mi\">0</span><span class=\"o\">)</span>  <span class=\"c1\">--works</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">pnat_eq_new</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">//</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"n\">ℕ</span><span class=\"bp\">ː</span><span class=\"o\">(</span><span class=\"bp\">&gt;</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>  <span class=\"c1\">--also works!</span>\n</code></pre></div>",
        "id": 243902004,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1624619770
    },
    {
        "content": "<p>Or even</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- I doubt this is a good idea</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_to_fun</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">),</span> <span class=\"n\">subtype</span> <span class=\"n\">p</span><span class=\"o\">⟩</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">pnat_eq_new'</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">//</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"n\">ℕ</span><span class=\"o\">(</span><span class=\"bp\">&gt;</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 243902429,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1624620072
    },
    {
        "content": "<p>Eric, those are good suggestions as well!  I think that I still prefer the other options, mostly since it involves fewer characters when writing the type.</p>",
        "id": 243905510,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1624622159
    },
    {
        "content": "<p>Do you ultimately want to yet the notation <code>ℕ+</code> out of existence?</p>",
        "id": 243905872,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1624622385
    },
    {
        "content": "<p>The advantage of the subtype approach is the notation works for <code>(&lt;0)</code>, <code>(&gt;1)</code>, and even <code>even</code>!</p>",
        "id": 243905997,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1624622449
    },
    {
        "content": "<p>I do not have in mind of replacing old notation, I simply wanted to have a convenient way of talking about positive/non-negative elements for the <code>order</code> refactor.  I want to be able to say easily that multiplying by the non-negative elements is monotone, by the positive one is strictly monotone and so on.  Of course, I can say it without the notation, but accompanying this by a clear symbol seems useful!</p>",
        "id": 243907453,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1624623466
    },
    {
        "content": "<p>Eric, I actually like your suggestion, though I think that maybe both should be available: I see myself using more often the <code>&gt;0</code> case than the general one and it would be nice if that one had a short, informative notation, in my opinion.</p>",
        "id": 243907559,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1624623525
    },
    {
        "content": "<p>For instance, this works (which is great!):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">open_locale</span> <span class=\"n\">nnreal</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">nnreal_eq_new</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">ℝ</span><span class=\"bp\">ː</span><span class=\"o\">(</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>  <span class=\"c1\">--also works!</span>\n</code></pre></div>\n<p>Maybe, it makes sense to replace the notation for <code>nnreal</code> so that it picks this one up?</p>\n<p>Floris'  objection was that you could not then use <code>1&gt;0</code>, though, really this is bad form for two reasons:</p>\n<ul>\n<li>it uses <code>&gt;</code>;</li>\n<li>it does not leave spaces around <code>&gt;</code>.</li>\n</ul>\n<p>What do you think?</p>",
        "id": 243908500,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1624624125
    },
    {
        "content": "<p>Concretely, how about making these definitions:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">notation</span> <span class=\"n\">α</span> <span class=\"bp\">`ː`</span><span class=\"o\">:</span><span class=\"mi\">1025</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">subtype</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"kd\">notation</span> <span class=\"n\">α</span> <span class=\"bp\">`≥</span><span class=\"mi\">0</span><span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">1025</span> <span class=\"o\">:=</span> <span class=\"n\">subtype</span> <span class=\"o\">((</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"kd\">notation</span> <span class=\"n\">α</span> <span class=\"bp\">`&gt;</span><span class=\"mi\">0</span><span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">1025</span> <span class=\"o\">:=</span> <span class=\"n\">subtype</span> <span class=\"o\">((</span><span class=\"bp\">&gt;</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>and then there is no need to define <code>nnreal</code> as a special entity: it already means the right thing.</p>",
        "id": 243908712,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1624624220
    },
    {
        "content": "<p>I really think we should be able to keep writing <code>∀ ε &gt; 0</code>. I don't mind being forced to use spaces around <code>&gt;</code> but I'm afraid this will create inconsistencies and confusing error messages.</p>",
        "id": 243908865,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1624624316
    },
    {
        "content": "<p>Actually, Patrick, at the moment the spaces seem to be ignored, so also using them causes problems.  Back to looking for a solution!</p>",
        "id": 243909146,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1624624445
    },
    {
        "content": "<p>Hmm, maybe I take it back.  This works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"kd\">notation</span> <span class=\"n\">α</span> <span class=\"bp\">`ː`</span><span class=\"o\">:</span><span class=\"mi\">1025</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">subtype</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"kd\">notation</span> <span class=\"n\">α</span> <span class=\"bp\">`≥</span><span class=\"mi\">0</span><span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">1025</span> <span class=\"o\">:=</span> <span class=\"n\">subtype</span> <span class=\"o\">((</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"kd\">notation</span> <span class=\"n\">α</span> <span class=\"bp\">`&gt;</span><span class=\"mi\">0</span><span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">1025</span> <span class=\"o\">:=</span> <span class=\"n\">subtype</span> <span class=\"o\">((</span><span class=\"bp\">&gt;</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_zero</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"o\">⟨⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">rfl.le</span><span class=\"o\">⟩⟩</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">eps</span> <span class=\"o\">{</span><span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span> <span class=\"o\">:=</span> <span class=\"n\">h</span>\n</code></pre></div>\n<p>Note that these are all the imports and there is no <code>open_locale nnreal</code>.</p>",
        "id": 243909651,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1624624777
    },
    {
        "content": "<p>The error here</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">ε</span><span class=\"bp\">&gt;</span><span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>is </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">expected</span> <span class=\"n\">at</span>\n  <span class=\"n\">ε</span>\n<span class=\"n\">term</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">ℝ</span>\n</code></pre></div>",
        "id": 243909880,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1624624900
    },
    {
        "content": "<p>notation tokens ignore spaces iirc, like if you write <code>notation  α` ≥0 `:1025 := &lt;blah&gt;</code> it just basically tells the pretty-printer to use the spaces around it when displaying it, but lets you type it in without them</p>",
        "id": 243909999,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1624624955
    },
    {
        "content": "<p>Indeed, these two give errors:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">ε</span><span class=\"bp\">&gt;</span><span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- error</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span><span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- error</span>\n</code></pre></div>\n<p>while</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- ok</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">ε</span><span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- ok</span>\n</code></pre></div>\n<p>do not</p>",
        "id": 243910070,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1624625004
    },
    {
        "content": "<p>The conclusion is that if you maintain <code>&gt;</code> and <code>0</code> separate by a space, you split the token and you do not pick up the <code>subtype</code> notation.</p>\n<p>I personally find this acceptable, though I maybe not everyone does...</p>",
        "id": 243910389,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1624625177
    },
    {
        "content": "<p>Unless I am mistaken, there seem to be 45 uses of <code>&gt;0</code> in the current master (many of which in doc-strings) and, the only uses of <code>≥0</code> are in <code>ℝ≥0</code> (possibly continuing to <code>ℝ≥0∞</code>).</p>",
        "id": 243911404,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1624625752
    },
    {
        "content": "<p>Here is a proposal (and note that I do not feel strongly in favour, although it does seem nice notation and somewhat useful).</p>\n<p>Define</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">notation</span> <span class=\"n\">α</span> <span class=\"bp\">`ː`</span><span class=\"o\">:</span><span class=\"mi\">1025</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">subtype</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"kd\">notation</span> <span class=\"n\">α</span> <span class=\"bp\">`≥</span><span class=\"mi\">0</span><span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">1025</span> <span class=\"o\">:=</span> <span class=\"n\">subtype</span> <span class=\"o\">((</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"kd\">notation</span> <span class=\"n\">α</span> <span class=\"bp\">`&gt;</span><span class=\"mi\">0</span><span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">1025</span> <span class=\"o\">:=</span> <span class=\"n\">subtype</span> <span class=\"o\">((</span><span class=\"bp\">&gt;</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>and get rid of the special notation for <code>nnreal</code>, since now it is a special case of this one.</p>\n<p>Also, this will enforce using <code>&gt; 0</code> and <code>≥ 0</code>, rather than <code>&gt;0</code> and <code>≥0</code> (emphasis on the space), when you really mean the inequality, as the alternative would give an obscure error.</p>\n<p>Feel free to thumbs up if you like, thumbs down if you do not!</p>",
        "id": 243912190,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1624626169
    },
    {
        "content": "<p>I attempted this change and the main issue that I found was that it got tricky to use the <code>nnreal</code> namespace, since Lean would often want it to be <code>subtype</code> instead.  This (and especially Mario's thumb down), makes me skeptical of this approach.</p>\n<p>I still might give a try to Eric's</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">notation</span> <span class=\"n\">α</span> <span class=\"bp\">`ː`</span><span class=\"o\">:</span><span class=\"mi\">1025</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">subtype</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>for types of non-negative/positive elements.</p>\n<p>Mario, what do you think about this?</p>",
        "id": 243994679,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1624682828
    },
    {
        "content": "<p>This idea to have new notation for <code>subtype</code> is fascinating, especially since it can pair well with slices of relations and other predicates.  For what it's worth, it seems that <code>&amp;</code> is free to use, and it's somewhat mnemonic:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">notation</span> <span class=\"n\">α</span> <span class=\"bp\">`&amp;`</span><span class=\"o\">:</span><span class=\"mi\">1025</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">subtype</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">posnat</span> <span class=\"o\">:=</span> <span class=\"n\">ℕ</span><span class=\"bp\">&amp;</span><span class=\"o\">(</span><span class=\"bp\">≥</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"c1\">-- \"natural and greater than or equal to 1\"</span>\n<span class=\"kd\">def</span> <span class=\"n\">evennat</span> <span class=\"o\">:=</span> <span class=\"n\">ℕ</span><span class=\"bp\">&amp;</span><span class=\"n\">even</span>\n<span class=\"c1\">-- \"natural and even\"</span>\n</code></pre></div>",
        "id": 244026229,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1624729900
    },
    {
        "content": "<p>Or, dual to <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span>'s suspect idea, I'll throw in my own:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_to_sort</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">subtype</span> <span class=\"n\">f</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">posreal</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">≥</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>(please don't do this <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span>)</p>",
        "id": 244026496,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1624730212
    },
    {
        "content": "<p>I think that using <code>≥0</code> alone to mean subtype is way too implicit. Everyone knows that it means \"greater than or equal to zero\" so this overloading is going to cause confusion. <code>:</code> is problematic because it is used to mean typing in binders and in type ascription. <code>&amp;</code> is sufficiently strange that I would only want it to be a local notation so that the reader is constantly reminded what it means</p>",
        "id": 244027586,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1624731547
    },
    {
        "content": "<p>I think the best notation is <code>{x // x≥0}</code></p>",
        "id": 244027643,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1624731596
    },
    {
        "content": "<p>for particular subtypes that have names like <code>ennreal</code> it makes sense to have a dedicated notation, but <code>subtype</code> already has a notation</p>",
        "id": 244027706,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1624731651
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113488-general/topic/notation.20challenge/near/244027586\">said</a>:</p>\n<blockquote>\n<p><code>:</code> is problematic because it is used to mean typing in binders and in type ascription</p>\n</blockquote>\n<p>I'd thought so, too, but you have to zoom in to <code>ː</code> or get your text editor to tell you it's MODIFIER LETTER TRIANGULAR COLON</p>",
        "id": 244028036,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1624732167
    },
    {
        "content": "<p>I am happy to use the <code>&amp;</code> in a special locale.  Eventually, my hope would be to use this under the hood, for proving the basic stuff about inequalities, but that it would be seen as an explicit positivity assumption in \"externally applied\" lemmas.</p>",
        "id": 244028789,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1624733314
    }
]