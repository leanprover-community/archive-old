[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">WOptions</span>\n<span class=\"bp\">|</span> <span class=\"n\">A</span>\n<span class=\"bp\">|</span> <span class=\"n\">B</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">derive</span> <span class=\"n\">decidable_eq</span><span class=\"o\">]</span> <span class=\"n\">WOptions</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Wrapper</span><span class=\"o\">:</span> <span class=\"n\">WOptions</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">W</span> <span class=\"o\">{</span><span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Wrapper</span> <span class=\"n\">w</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Wrapper</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">derive</span> <span class=\"n\">decidable_eq</span><span class=\"o\">]</span> <span class=\"n\">Wrapper</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">{</span><span class=\"n\">T</span> <span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">WOptions</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">Wrapper</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"o\">:</span><span class=\"n\">Wrapper</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Wrapper</span> <span class=\"n\">T</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">h</span><span class=\"o\">:</span><span class=\"n\">T</span><span class=\"bp\">=</span><span class=\"n\">U</span> <span class=\"k\">then</span> <span class=\"n\">u</span> <span class=\"k\">else</span> <span class=\"n\">t</span>\n</code></pre></div>\n<p>I wrote this MVE that does not work in the dite. I derived decidable_eq to remove the issue of deciding whether T could be U. My goal (in a bigger project) is to do type-safe substitution on a strongly-typed AST. Is this simply not possible?</p>",
        "id": 229815725,
        "sender_full_name": "Alcides Fonseca",
        "timestamp": 1615453146
    },
    {
        "content": "<p>Do you have a sketch for your bigger example? For the general pattern of this if-then, where you check if the indices match and then use a subst, it's usually easiest to work with <code>function.update</code>, but I suspect an <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a> problem here</p>",
        "id": 229820625,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615455627
    },
    {
        "content": "<p>In this case</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">{</span><span class=\"n\">T</span> <span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">WOptions</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">Wrapper</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"o\">:</span><span class=\"n\">Wrapper</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Wrapper</span> <span class=\"n\">T</span> <span class=\"o\">:=</span>\n<span class=\"k\">if</span> <span class=\"n\">h</span><span class=\"o\">:</span><span class=\"n\">T</span><span class=\"bp\">=</span><span class=\"n\">U</span> <span class=\"k\">then</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">u</span> <span class=\"k\">else</span> <span class=\"n\">t</span>\n</code></pre></div>\n<p>works</p>",
        "id": 229820951,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615455816
    },
    {
        "content": "<p>It's also not clear to me in what way this is supposed to represent \"type reflection\" as in your title</p>",
        "id": 229821180,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615455923
    },
    {
        "content": "<p>the <code>Wrapper</code> types are all singletons so they don't carry any information</p>",
        "id": 229821206,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615455941
    },
    {
        "content": "<p>the function <code>f</code> is thus provably equal to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">{</span><span class=\"n\">T</span> <span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">WOptions</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">Wrapper</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"o\">:</span><span class=\"n\">Wrapper</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Wrapper</span> <span class=\"n\">T</span> <span class=\"o\">:=</span> <span class=\"o\">⟨⟩</span>\n</code></pre></div>",
        "id": 229821313,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615455973
    },
    {
        "content": "<p>although that's probably a side effect of minimization</p>",
        "id": 229821384,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615456002
    },
    {
        "content": "<p>Thanks, it worked. Somehow I was missing the exact tactic (thinking after the ; I was back in term mode).</p>",
        "id": 229827540,
        "sender_full_name": "Alcides Fonseca",
        "timestamp": 1615458987
    },
    {
        "content": "<p>This is the full (relevant) code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[derive decidable_eq]</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">TType</span>\n<span class=\"bp\">|</span> <span class=\"n\">TBool</span> <span class=\"o\">:</span> <span class=\"n\">TType</span>\n<span class=\"bp\">|</span> <span class=\"n\">TNat</span> <span class=\"o\">:</span> <span class=\"n\">TType</span>\n<span class=\"bp\">|</span> <span class=\"n\">Fun</span> <span class=\"o\">:</span> <span class=\"n\">TType</span> <span class=\"bp\">→</span> <span class=\"n\">TType</span> <span class=\"bp\">→</span> <span class=\"n\">TType</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">TType</span>\n\n<span class=\"kd\">@[reducible]</span>\n<span class=\"kd\">def</span> <span class=\"n\">context</span> <span class=\"o\">:=</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">string</span> <span class=\"bp\">×</span> <span class=\"n\">TType</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">keys</span> <span class=\"o\">(</span><span class=\"bp\">Γ</span><span class=\"o\">:</span> <span class=\"n\">context</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">string</span> <span class=\"o\">:=</span> <span class=\"n\">list.map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">prod.fst</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">Γ</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Term</span> <span class=\"o\">:</span> <span class=\"n\">TType</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">LiteralNat</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">Term</span> <span class=\"n\">TNat</span>\n<span class=\"bp\">|</span> <span class=\"n\">LiteralBool</span> <span class=\"o\">:</span> <span class=\"n\">bool</span> <span class=\"bp\">→</span> <span class=\"n\">Term</span> <span class=\"n\">TBool</span>\n<span class=\"bp\">|</span> <span class=\"n\">Var</span> <span class=\"o\">{</span><span class=\"bp\">Γ</span><span class=\"o\">:</span> <span class=\"n\">context</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">T</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">string</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"bp\">Γ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Term</span> <span class=\"n\">T</span>\n<span class=\"bp\">|</span> <span class=\"n\">Abs</span> <span class=\"o\">{</span><span class=\"bp\">Γ</span><span class=\"o\">:</span> <span class=\"n\">context</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">U</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">string</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">T</span><span class=\"o\">:</span> <span class=\"n\">TType</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">:</span><span class=\"n\">Term</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">keys</span><span class=\"o\">(</span><span class=\"bp\">Γ</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">Term</span> <span class=\"o\">(</span><span class=\"n\">Fun</span> <span class=\"n\">T</span> <span class=\"n\">U</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">App</span> <span class=\"o\">{</span><span class=\"n\">T</span> <span class=\"n\">U</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">t1</span><span class=\"o\">:</span> <span class=\"n\">Term</span> <span class=\"o\">(</span><span class=\"n\">Fun</span> <span class=\"n\">T</span> <span class=\"n\">U</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">t2</span><span class=\"o\">:</span> <span class=\"n\">Term</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Term</span> <span class=\"n\">U</span>\n<span class=\"bp\">|</span> <span class=\"n\">Ite</span> <span class=\"o\">{</span><span class=\"n\">T</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">t1</span><span class=\"o\">:</span><span class=\"n\">Term</span> <span class=\"n\">TBool</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t2</span> <span class=\"n\">t3</span> <span class=\"o\">:</span> <span class=\"n\">Term</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Term</span> <span class=\"n\">T</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Term</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">substitution</span> <span class=\"o\">{</span><span class=\"n\">T</span> <span class=\"n\">U</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">:</span> <span class=\"n\">Term</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">Term</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">string</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Term</span> <span class=\"n\">T</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">Term</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"k\">with</span>\n   <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">Var</span> <span class=\"n\">name</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">h</span><span class=\"o\">:</span><span class=\"n\">T</span> <span class=\"bp\">=</span> <span class=\"n\">U</span> <span class=\"k\">then</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">n</span> <span class=\"k\">else</span> <span class=\"n\">t</span>\n   <span class=\"c1\">-- | (LiteralBool b) := LiteralBool b</span>\n   <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">t</span>\n  <span class=\"kd\">end</span>\n</code></pre></div>\n<p>I am troubling getting the interaction between the T and the pattern matching. I knew that using dite, I could apply some tactic to solve it (although the syntax was a mystery to me). But using match, the second (comment) pattern does not work, because it cannot understand that it should only cover when T = TBool.<br>\nAnd even though I have a catch-all wildcard, it complains that I do not cover all the cases.</p>",
        "id": 229831590,
        "sender_full_name": "Alcides Fonseca",
        "timestamp": 1615461121
    },
    {
        "content": "<p>There appears to be an issue in getting the wildcard case to typecheck, that prevents the wildcard from working correctly without some kind of untypechecked macro expansion. Here's a version that works, which is what the wildcard compiles to anyway:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">substitution</span> <span class=\"o\">{</span><span class=\"n\">T</span> <span class=\"n\">U</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">:</span> <span class=\"n\">Term</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">Term</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">string</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Term</span> <span class=\"n\">T</span> <span class=\"o\">:=</span>\n<span class=\"k\">match</span> <span class=\"n\">T</span><span class=\"o\">,</span> <span class=\"n\">t</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"n\">T</span><span class=\"o\">,</span> <span class=\"n\">t</span><span class=\"bp\">@</span><span class=\"o\">(</span><span class=\"n\">Var</span> <span class=\"n\">name</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">h</span><span class=\"o\">:</span><span class=\"n\">T</span> <span class=\"bp\">=</span> <span class=\"n\">U</span> <span class=\"k\">then</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">n</span> <span class=\"k\">else</span> <span class=\"n\">t</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">t</span><span class=\"bp\">@</span><span class=\"o\">(</span><span class=\"n\">LiteralNat</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">t</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">t</span><span class=\"bp\">@</span><span class=\"o\">(</span><span class=\"n\">LiteralBool</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">t</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">t</span><span class=\"bp\">@</span><span class=\"o\">(</span><span class=\"n\">Abs</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">t</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">t</span><span class=\"bp\">@</span><span class=\"o\">(</span><span class=\"n\">App</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">t</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">t</span><span class=\"bp\">@</span><span class=\"o\">(</span><span class=\"n\">Ite</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">t</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 229870979,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615477761
    },
    {
        "content": "<p>Note that it is necessary to simultaneously match on <code>T</code> and <code>t</code>, because <code>Term</code> is an inductive type with the <code>TType</code> as an index (it's an inductive family), so it has to be able to vary in recursions</p>",
        "id": 229871250,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615477832
    },
    {
        "content": "<p>By the way, the definition of <code>Term</code> is incorrect, since the contexts used in the <code>Var</code> and <code>Abs</code> constructors are not constrained to relate to anything else. The context should be another index to the inductive type</p>",
        "id": 229871442,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615477915
    },
    {
        "content": "<p>like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Term</span> <span class=\"o\">:</span> <span class=\"n\">context</span> <span class=\"bp\">→</span> <span class=\"n\">TType</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">LiteralNat</span> <span class=\"o\">{</span><span class=\"bp\">Γ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">Term</span> <span class=\"bp\">Γ</span> <span class=\"n\">TNat</span>\n<span class=\"bp\">|</span> <span class=\"n\">LiteralBool</span> <span class=\"o\">{</span><span class=\"bp\">Γ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">bool</span> <span class=\"bp\">→</span> <span class=\"n\">Term</span> <span class=\"bp\">Γ</span> <span class=\"n\">TBool</span>\n<span class=\"bp\">|</span> <span class=\"n\">Var</span> <span class=\"o\">{</span><span class=\"bp\">Γ</span> <span class=\"n\">T</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">string</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"bp\">Γ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Term</span> <span class=\"bp\">Γ</span> <span class=\"n\">T</span>\n<span class=\"bp\">|</span> <span class=\"n\">Abs</span> <span class=\"o\">{</span><span class=\"bp\">Γ</span> <span class=\"n\">U</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">string</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">T</span><span class=\"o\">:</span> <span class=\"n\">TType</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">:</span><span class=\"n\">Term</span> <span class=\"o\">((</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">T</span><span class=\"o\">)::</span><span class=\"bp\">Γ</span><span class=\"o\">)</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">keys</span><span class=\"o\">(</span><span class=\"bp\">Γ</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">Term</span> <span class=\"bp\">Γ</span> <span class=\"o\">(</span><span class=\"n\">Fun</span> <span class=\"n\">T</span> <span class=\"n\">U</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">App</span> <span class=\"o\">{</span><span class=\"bp\">Γ</span> <span class=\"n\">T</span> <span class=\"n\">U</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">t1</span><span class=\"o\">:</span> <span class=\"n\">Term</span> <span class=\"bp\">Γ</span> <span class=\"o\">(</span><span class=\"n\">Fun</span> <span class=\"n\">T</span> <span class=\"n\">U</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">t2</span><span class=\"o\">:</span> <span class=\"n\">Term</span> <span class=\"bp\">Γ</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Term</span> <span class=\"bp\">Γ</span> <span class=\"n\">U</span>\n<span class=\"bp\">|</span> <span class=\"n\">Ite</span> <span class=\"o\">{</span><span class=\"bp\">Γ</span> <span class=\"n\">T</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">t1</span><span class=\"o\">:</span><span class=\"n\">Term</span> <span class=\"bp\">Γ</span> <span class=\"n\">TBool</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t2</span> <span class=\"n\">t3</span> <span class=\"o\">:</span> <span class=\"n\">Term</span> <span class=\"bp\">Γ</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Term</span> <span class=\"bp\">Γ</span> <span class=\"n\">T</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Term</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">substitution</span> <span class=\"o\">{</span><span class=\"bp\">Γ</span> <span class=\"n\">T</span> <span class=\"n\">U</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">string</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">:</span> <span class=\"n\">Term</span> <span class=\"o\">((</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">U</span><span class=\"o\">)::</span><span class=\"bp\">Γ</span><span class=\"o\">)</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">Term</span> <span class=\"bp\">Γ</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Term</span> <span class=\"bp\">Γ</span> <span class=\"n\">T</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 229871915,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615478063
    },
    {
        "content": "<p>Yes, you are correct in the Term definition. I was actually simplifying it to try and spot the issue on the match.<br>\nI was missing the simultaneous matching. That seems to be the key.<br>\nThank you so much again!</p>",
        "id": 229874835,
        "sender_full_name": "Alcides Fonseca",
        "timestamp": 1615478762
    },
    {
        "content": "<p>Here's a setup that I believe to be provable:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">context</span> <span class=\"o\">:=</span> <span class=\"n\">alist</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">:</span> <span class=\"n\">string</span><span class=\"o\">,</span> <span class=\"n\">TType</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">keys</span> <span class=\"o\">:</span> <span class=\"n\">context</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">string</span> <span class=\"o\">:=</span> <span class=\"n\">alist.keys</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_mem</span> <span class=\"o\">(</span><span class=\"n\">string</span> <span class=\"bp\">×</span> <span class=\"n\">TType</span><span class=\"o\">)</span> <span class=\"n\">context</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">T</span><span class=\"o\">⟩</span> <span class=\"bp\">Γ</span><span class=\"o\">,</span> <span class=\"n\">T</span> <span class=\"bp\">∈</span> <span class=\"bp\">Γ.</span><span class=\"n\">lookup</span> <span class=\"n\">x</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">cons</span> <span class=\"o\">(</span><span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">context</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">string</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">T</span><span class=\"o\">:</span><span class=\"n\">TType</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"bp\">Γ.</span><span class=\"n\">keys</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">context</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨⟨</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">T</span><span class=\"o\">⟩::</span><span class=\"bp\">Γ.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">list.nodupkeys_cons.2</span> <span class=\"o\">⟨</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"bp\">Γ.</span><span class=\"mi\">2</span><span class=\"o\">⟩⟩</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Term</span> <span class=\"o\">:</span> <span class=\"n\">context</span> <span class=\"bp\">→</span> <span class=\"n\">TType</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">LiteralNat</span> <span class=\"o\">{</span><span class=\"bp\">Γ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">Term</span> <span class=\"bp\">Γ</span> <span class=\"n\">TNat</span>\n<span class=\"bp\">|</span> <span class=\"n\">LiteralBool</span> <span class=\"o\">{</span><span class=\"bp\">Γ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">bool</span> <span class=\"bp\">→</span> <span class=\"n\">Term</span> <span class=\"bp\">Γ</span> <span class=\"n\">TBool</span>\n<span class=\"bp\">|</span> <span class=\"n\">Var</span> <span class=\"o\">{</span><span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">context</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">T</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">string</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"bp\">Γ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Term</span> <span class=\"bp\">Γ</span> <span class=\"n\">T</span>\n<span class=\"bp\">|</span> <span class=\"n\">Abs</span> <span class=\"o\">{</span><span class=\"bp\">Γ</span> <span class=\"n\">U</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">string</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">T</span><span class=\"o\">:</span> <span class=\"n\">TType</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">keys</span> <span class=\"bp\">Γ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">:</span><span class=\"n\">Term</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"bp\">Γ</span> <span class=\"n\">x</span> <span class=\"n\">T</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Term</span> <span class=\"bp\">Γ</span> <span class=\"o\">(</span><span class=\"n\">Fun</span> <span class=\"n\">T</span> <span class=\"n\">U</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">App</span> <span class=\"o\">{</span><span class=\"bp\">Γ</span> <span class=\"n\">T</span> <span class=\"n\">U</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">t1</span><span class=\"o\">:</span> <span class=\"n\">Term</span> <span class=\"bp\">Γ</span> <span class=\"o\">(</span><span class=\"n\">Fun</span> <span class=\"n\">T</span> <span class=\"n\">U</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">t2</span><span class=\"o\">:</span> <span class=\"n\">Term</span> <span class=\"bp\">Γ</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Term</span> <span class=\"bp\">Γ</span> <span class=\"n\">U</span>\n<span class=\"bp\">|</span> <span class=\"n\">Ite</span> <span class=\"o\">{</span><span class=\"bp\">Γ</span> <span class=\"n\">T</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">t1</span><span class=\"o\">:</span><span class=\"n\">Term</span> <span class=\"bp\">Γ</span> <span class=\"n\">TBool</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t2</span> <span class=\"n\">t3</span> <span class=\"o\">:</span> <span class=\"n\">Term</span> <span class=\"bp\">Γ</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Term</span> <span class=\"bp\">Γ</span> <span class=\"n\">T</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Term</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">substitution_aux</span> <span class=\"o\">{</span><span class=\"bp\">Γ</span> <span class=\"n\">U</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">string</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Term</span> <span class=\"bp\">Γ</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"bp\">Γ'</span> <span class=\"n\">T</span><span class=\"o\">},</span> <span class=\"n\">Term</span> <span class=\"bp\">Γ'</span> <span class=\"n\">T</span> <span class=\"bp\">→</span> <span class=\"bp\">Γ'.</span><span class=\"mi\">1</span> <span class=\"bp\">~</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">U</span><span class=\"o\">⟩::</span><span class=\"bp\">Γ.</span><span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"n\">Term</span> <span class=\"bp\">Γ</span> <span class=\"n\">T</span>\n<span class=\"bp\">|</span> <span class=\"bp\">Γ'</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">LiteralNat</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">hp</span> <span class=\"o\">:=</span> <span class=\"n\">LiteralNat</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"bp\">Γ'</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">LiteralBool</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">hp</span> <span class=\"o\">:=</span> <span class=\"n\">LiteralBool</span> <span class=\"n\">b</span>\n<span class=\"bp\">|</span> <span class=\"bp\">Γ'</span> <span class=\"n\">U'</span> <span class=\"o\">(</span><span class=\"n\">Var</span> <span class=\"n\">name</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"n\">hp</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"k\">have</span> <span class=\"n\">other</span> <span class=\"o\">:</span> <span class=\"n\">Term</span> <span class=\"bp\">Γ</span> <span class=\"n\">U'</span> <span class=\"o\">:=</span> <span class=\"n\">Var</span> <span class=\"n\">name</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"k\">if</span> <span class=\"n\">name</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"k\">then</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">U'</span> <span class=\"bp\">=</span> <span class=\"n\">U</span> <span class=\"k\">then</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">n</span> <span class=\"k\">else</span> <span class=\"n\">other</span> <span class=\"k\">else</span> <span class=\"n\">other</span> <span class=\"o\">},</span>\n    <span class=\"gr\">sorry</span>\n  <span class=\"kd\">end</span>\n<span class=\"bp\">|</span> <span class=\"bp\">Γ'</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Abs</span> <span class=\"n\">_</span> <span class=\"n\">U'</span> <span class=\"n\">y</span> <span class=\"n\">T'</span> <span class=\"n\">p</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"n\">hp</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"bp\">|</span> <span class=\"bp\">Γ'</span> <span class=\"n\">U'</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">App</span> <span class=\"n\">_</span> <span class=\"n\">T'</span> <span class=\"n\">_</span> <span class=\"n\">t1</span> <span class=\"n\">t2</span><span class=\"o\">)</span> <span class=\"n\">hp</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"bp\">|</span> <span class=\"bp\">Γ'</span> <span class=\"n\">T'</span> <span class=\"o\">(</span><span class=\"n\">Ite</span> <span class=\"n\">t1</span> <span class=\"n\">t2</span> <span class=\"n\">t3</span><span class=\"o\">)</span> <span class=\"n\">hp</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">substitution</span> <span class=\"o\">{</span><span class=\"bp\">Γ</span> <span class=\"n\">T</span> <span class=\"n\">U</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">string</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">:</span> <span class=\"n\">Term</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"bp\">Γ</span> <span class=\"n\">x</span> <span class=\"n\">U</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">Term</span> <span class=\"bp\">Γ</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Term</span> <span class=\"bp\">Γ</span> <span class=\"n\">T</span> <span class=\"o\">:=</span>\n<span class=\"n\">substitution_aux</span> <span class=\"n\">x</span> <span class=\"n\">n</span> <span class=\"n\">t</span> <span class=\"o\">(</span><span class=\"n\">list.perm.refl</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 229879188,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615479986
    },
    {
        "content": "<p>The point of using <code>alist</code> instead of <code>list</code> here is so that the use of list permutation in the statement of <code>substitution_aux</code> doesn't change the types of existing variables. This is needed in order to commute the <code>cons</code> application in the type of <code>substitution</code> with the one in the type of <code>Abs</code></p>",
        "id": 229879746,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615480188
    },
    {
        "content": "<p>You can also avoid the use of permutation entirely if you use <code>finmap</code> instead of <code>alist</code>, since that bakes the permutations into the type</p>",
        "id": 229879843,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615480216
    },
    {
        "content": "<p>Alternatively, you can stick with list and use the more precise context <code>Γ ++ (x,U) :: Δ</code> in the type of <code>substitution</code></p>",
        "id": 229880072,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615480306
    },
    {
        "content": "<p>(Sorry for the late reply, had a couple of deadlines)<br>\nThank you very much for the reply! It helped much more than just answering the question. I'll have to buy you a drink next time I'll visit CMU (if you are still there)</p>",
        "id": 231366939,
        "sender_full_name": "Alcides Fonseca",
        "timestamp": 1616440103
    },
    {
        "content": "<p>A follow-up issue: I want to show that a set of term synthesis rules (like the opposite of type-checking). However, using a strongly-typed AST breaks the way I was stating the synthesis rules. I have simplified the problem to this exame, where the language has OptionA and OptionB, with the type indexed by a number (in the larger example it is the context and type). I want to state that I can generate one of each, and then show completeness of the generation (which will not work in this case, unless I add that n &lt; 2)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">optionA</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">optionB</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"mi\">1</span>\n\n\n<span class=\"kd\">inductive</span> <span class=\"n\">synth</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">generateOptionA</span> <span class=\"o\">:</span> <span class=\"n\">synth</span> <span class=\"o\">(</span><span class=\"n\">term.optionA</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">generateOptionB</span> <span class=\"o\">:</span> <span class=\"n\">synth</span> <span class=\"o\">(</span><span class=\"n\">term.optionB</span><span class=\"o\">)</span>\n\n\n<span class=\"kd\">theorem</span> <span class=\"n\">completeness</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">synth</span> <span class=\"n\">n</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Lines generateOptionA and B do not compile:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">synth</span> <span class=\"n\">term.optionA</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">term.optionA</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">term</span> <span class=\"mi\">0</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">term</span> <span class=\"n\">n</span>\n</code></pre></div>\n<p>How can I refined the type to use index 0? I have tried to make n:\\Nat explicit, but it did not work.</p>",
        "id": 231371318,
        "sender_full_name": "Alcides Fonseca",
        "timestamp": 1616441541
    },
    {
        "content": "<p>Actually you don't need <code>n &lt; 2</code> for this proof</p>",
        "id": 231390142,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616449768
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">optionA</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">optionB</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">synth</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">},</span> <span class=\"n\">term</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">generateOptionA</span> <span class=\"o\">:</span> <span class=\"n\">synth</span> <span class=\"n\">term.optionA</span>\n<span class=\"bp\">|</span> <span class=\"n\">generateOptionB</span> <span class=\"o\">:</span> <span class=\"n\">synth</span> <span class=\"n\">term.optionB</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">completeness</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">synth</span> <span class=\"n\">t</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"n\">term.optionA</span> <span class=\"o\">:=</span> <span class=\"n\">synth.generateOptionA</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"n\">term.optionB</span> <span class=\"o\">:=</span> <span class=\"n\">synth.generateOptionB</span>\n</code></pre></div>",
        "id": 231390330,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616449845
    }
]