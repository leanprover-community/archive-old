[
    {
        "content": "<p>Should we multiplicativize <code>is_scalar_tower</code> to <code>is_pow_tower</code>? And thing like <code>smul_comm_class</code> into <code>pow_comm_class</code>?</p>",
        "id": 291019236,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658920430
    },
    {
        "content": "<p>I don't see any objection if you think it's worth your time, do you have a mathematical example in mind where this is useful?</p>",
        "id": 291019354,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1658920501
    },
    {
        "content": "<p>I think we're going to need <code>to_additive</code> to be more clever before we embark on that</p>",
        "id": 291019393,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658920527
    },
    {
        "content": "<p>Presumably we want to be able to write <code>is_pow_tower F nat int</code>, which is backwards compared to <code>is_scalar_tower int nat F</code></p>",
        "id": 291019436,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658920561
    },
    {
        "content": "<p>Doesn't it handle <code>pow</code> and <code>smul</code> pretty well nowadays?</p>",
        "id": 291019484,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1658920574
    },
    {
        "content": "<p>Right now <code>to_additive_reorder</code> only supports adjacent argument swaps, and doesn't actually check that your invocation does what you want</p>",
        "id": 291019518,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658920602
    },
    {
        "content": "<p>I've been having a hard time with in in <a href=\"https://github.com/leanprover-community/mathlib/pull/15478\">#15478</a></p>",
        "id": 291019575,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658920648
    },
    {
        "content": "<p>In particular, there's no way to additivize <code>prod.mk_pow</code> to <code>prod.smul_mk</code> without having the argument order be unnatural for one of the lemmas</p>",
        "id": 291019625,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658920682
    },
    {
        "content": "<p>Have <code>to_additive</code> support would of course be extremely useful. Maybe even a prerequisite.</p>",
        "id": 291019891,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658920840
    },
    {
        "content": "<p>Is it worth trying to tackle this before a port to Lean 4?</p>",
        "id": 291019911,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658920860
    },
    {
        "content": "<p>By \"do what you want\" above, I mean that if you do something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">foo_smul</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">@[to_additive foo_smul]</span> <span class=\"kd\">lemma</span> <span class=\"n\">pow_foo</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>with or without <code>to_additive_reorder</code>, you get no diagonistic for getting it wrong until you actually use the lemma:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- fails, generating an invalid additive proof</span>\n<span class=\"kd\">@[to_additive]</span> <span class=\"kd\">lemma</span> <span class=\"n\">pow_foo'</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"n\">pow_foo</span>\n</code></pre></div>",
        "id": 291020040,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658920961
    },
    {
        "content": "<p>Also note that this is the one case I know where it would make sense to additivize twice in a room. Namely, we will want the <code>vadd</code> versions as well eventually.</p>",
        "id": 291076230,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1658940755
    },
    {
        "content": "<p>We already have the vadd versions of many of these</p>",
        "id": 291080490,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658942561
    }
]