[
    {
        "content": "<p>I find myself wishing that <code>enat</code> and <code>with_top</code>, and <code>with_zero</code> and <code>with_bot</code>, had definition equality.<br>\nInstead, in each case, one is an <code>option</code> and the other is a <code>roption</code>.</p>",
        "id": 228502448,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1614725920
    },
    {
        "content": "<p>I might find myself motivated to try making one of these changes, say, to make <code>enat</code> an abbreviation for <code>with_top nat</code>. Is there a good reason not to do that?  I'm not terribly well-versed in the philosophy of decidability here, but I think it doesn't matter much for <code>enat</code> at least. After all, there is already an <code>equiv</code> there.</p>",
        "id": 228502821,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1614726072
    },
    {
        "content": "<p>I find it frustrating that some of these things are definitionally equal because it can lead to leaks where <code>r : with_zero G</code> suddenly magically becomes <code>r : option G</code> and then stuff can break. I also had this vague idea that in Lean 4 we were going to be encouraged to make new structures for all of these? Or am I talking nonsense?</p>",
        "id": 228503450,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614726377
    },
    {
        "content": "<p>Well, I've already found one answer to my question, which is that somehow <code>roption</code>s get around the decidability of <code>∃ n, P n</code> in the definition of <code>enat.find</code>.</p>",
        "id": 228503815,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1614726553
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/with_top.2C.20enat.2C.20and.20with_zero/near/228503450\">said</a>:</p>\n<blockquote>\n<p>I find it frustrating that some of these things are definitionally equal because it can lead to leaks where <code>r : with_zero G</code> suddenly magically becomes <code>r : option G</code> and then stuff can break. I also had this vague idea that in Lean 4 we were going to be encouraged to make new structures for all of these? Or am I talking nonsense?</p>\n</blockquote>\n<p>Perhaps with <code>with_zero</code> and <code>with_bot</code> I'm overreaching with definitional hubris (not that they feel like they <em>should</em> be implemented differently)</p>",
        "id": 228503933,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1614726619
    },
    {
        "content": "<p>but the fact that there are times we want <code>with_top nat</code> and times we want <code>enat</code> is really disturbing...</p>",
        "id": 228504083,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1614726691
    },
    {
        "content": "<p>I don't think I ever want <code>enat</code>...</p>",
        "id": 228504208,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614726740
    },
    {
        "content": "<p>Isn't it just some constructivist nonsense?</p>",
        "id": 228504231,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614726758
    },
    {
        "content": "<p>I'm pretty sure the reason is literally so that you can define <code>enat.find P</code> whenever <code>P</code> is decidable, without needing <code>∃ n, P n</code> to be decidable.</p>",
        "id": 228504329,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1614726809
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"302826\">Aaron Anderson</span> <a href=\"#narrow/stream/113488-general/topic/with_top.2C.20enat.2C.20and.20with_zero/near/228504083\">said</a>:</p>\n<blockquote>\n<p>but the fact that there are times we want <code>with_top nat</code> and times we want <code>enat</code> is really disturbing...</p>\n</blockquote>\n<p>What's the killer feature of <code>with_top</code>, if the killer feature of <code>enat</code> is avoiding decidability for <a href=\"https://leanprover-community.github.io/mathlib_docs/find/enat.find\">docs#enat.find</a>?</p>",
        "id": 228505230,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614727265
    },
    {
        "content": "<p>Is the problem just that one has less API than the other?</p>",
        "id": 228505287,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614727280
    },
    {
        "content": "<p>The problem to me is that I’d like to use the APIs interchangeably (also, I’d like to be able to define additive valuations using <code>with_top</code>, but maybe that’s not critical)</p>",
        "id": 228506034,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1614727701
    },
    {
        "content": "<p>I would then just say to change <code>with_top</code> and <code>with_bot</code> to <code>roption</code>s, but maybe soon I will find out a reason that that’s a bad idea</p>",
        "id": 228507159,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1614728320
    },
    {
        "content": "<p>The killer feature of with_top is that <code>option</code> is so easy to use, you just do proofs by cases or with the equation compiler</p>",
        "id": 228507180,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614728337
    },
    {
        "content": "<p>However, <code>with_zero</code> seems to have worked fine as a <code>roption</code>...</p>",
        "id": 228507221,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1614728359
    },
    {
        "content": "<p>I don't think the earlier statement about <a href=\"https://leanprover-community.github.io/mathlib_docs/find/enat.find\">docs#enat.find</a> was correct, it has exactly the same decidable assumptions as <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.find\">docs#nat.find</a></p>",
        "id": 228509057,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614729317
    },
    {
        "content": "<p>That’s correct, but I can’t seem to replicate it with <code>with_top nat</code></p>",
        "id": 228512065,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1614730901
    },
    {
        "content": "<p>At least, not computably</p>",
        "id": 228512132,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1614730927
    },
    {
        "content": "<p>The killer feature of <code>with_top</code> is probably that you can use the equation compiler to split between <code>nat</code> and <code>infty</code>.</p>",
        "id": 228541109,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614750816
    },
    {
        "content": "<p>In my eyes, the biggest API problem with enat (and also related to not being able to use the equation compiler) is that it encourages the use of <code>roption.get</code>.  That function is pretty unergonomic since you always need to provide a proof that the enat is finite as a second argument.<br>\nThe <code>roption</code> definition of <code>enat</code> is a tradeoff: <code>enat.find</code> becomes computable, but other operations such as <code>≤</code> become noncomputable.  I don't think this tradeoff is worth it, and I believe that <code>def enat := with_top nat</code> would be the better choice.</p>",
        "id": 228561092,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1614763785
    },
    {
        "content": "<p>If everybody agrees, I'll prepare a PR for that to change.</p>",
        "id": 248327194,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1628068842
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"302826\">Aaron Anderson</span> <a href=\"#narrow/stream/113488-general/topic/with_top.2C.20enat.2C.20and.20with_zero/near/228507221\">said</a>:</p>\n<blockquote>\n<p>However, <code>with_zero</code> seems to have worked fine as a <code>roption</code>...</p>\n</blockquote>\n<p>Not sure what you mean by that, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/with_zero/src\">src#with_zero</a> is an <code>option</code>, and has been for at least two years.</p>",
        "id": 248328308,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1628069637
    },
    {
        "content": "<p>Yes it's enat which is the roption, and this fact basically renders it unusable for me (I don't know the API and don't see any reason why it shouldn't just be an option but no doubt others do!).</p>",
        "id": 248329237,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1628070275
    },
    {
        "content": "<p>Yeah sorry I meant that I will change the def of <code>enat</code> to <code>with_top ℕ</code>. And Aaron probably tried to make <code>with_zero</code> a <code>roption</code>.</p>",
        "id": 248330688,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1628071320
    },
    {
        "content": "<p>Is it worth keeping <code>enat</code> around as <code>renat</code>?</p>",
        "id": 248330801,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1628071395
    },
    {
        "content": "<p>Otherwise, is anything else using <code>roption</code>?</p>",
        "id": 248330824,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1628071425
    },
    {
        "content": "<p>Yeah, all of Mario's computability stuff.</p>",
        "id": 248330862,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1628071444
    },
    {
        "content": "<p>What's weird is to define concrete types with it. That's <code>option</code>'s job.</p>",
        "id": 248330911,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1628071476
    },
    {
        "content": "<p>I think it would probably be good to get <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>  to sign off on removal as opposed to renaming</p>",
        "id": 248330949,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1628071510
    },
    {
        "content": "<p>Certainly <code>enat</code> via <code>roption</code> is annoying to mathematicians, but perhaps it's still useful and just needs to be more hidden.</p>",
        "id": 248330982,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1628071548
    },
    {
        "content": "<p>From the above discussion, the argument in favor of <code>roption</code> is mostly to have <code>enat.find</code> computable.</p>",
        "id": 248331062,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1628071591
    },
    {
        "content": "<p>I think that this would be a rather painful refactor and it's not clear to me what we're gaining. </p>\n<p>There are tons of places in mathlib where the constructivists have done something and I would have done something different. For example <code>finset</code> is constructive, <code>finsupp</code> and <code>dfinsupp</code> are constructive, <code>enat</code> is constructive etc; I find all of these things hard to work with for various reasons. But just because we now have <code>set.finite</code> and <code>finsum</code> and <code>nat.card</code> doesn't mean that I'm pressing for the removal of <code>finset</code> -- indeed people like Bhavik swear by it for the kind of mathematics they're doing.</p>",
        "id": 248334280,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1628074044
    },
    {
        "content": "<blockquote>\n<p>I think that this would be a rather painful refactor and it's not clear to me what we're gaining.</p>\n</blockquote>\n<p>A big one that was already mentioned in this thread is support for the equation compiler.  We can also reuse all lemmas about <code>with_top</code>.  The refactor should be relatively quick (there's only 268 lines mentioning the word enat in mathlib and half of them in data/nat/enat.lean).</p>",
        "id": 248335004,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1628074588
    },
    {
        "content": "<p>I think a big argument for a constructive <code>finset</code> is that you can actually compute with it.  You can prove equalities between finsets using <code>dec_trivial</code>, you can print them in the VM, etc.</p>\n<p>It is much harder to compute with (the roption version of) enat.  Almost no property of enats is decidable: equality is not decidable, order is not decidable.  So no <code>dec_trivial</code>.  Printing an enat to a string is of course not computable either.</p>",
        "id": 248335506,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1628074932
    },
    {
        "content": "<p>I still think <code>roption</code> is the more mathematically natural choice given its topology, but I understand the arguments in favor of option, and the equation compiler in particular is something that API lemmas can't paper over. And the duplication with <code>with_top nat</code> is undesirable. So there is probably no point in me blocking this on purist grounds when it isn't actually helping anyone.</p>\n<p>To the extent that the <code>option</code> / <code>roption</code> distinction has been hidden behind an API, it should not be that bad to refactor, although some care (a typeclass?) will be needed to ensure that multiplicity on int comes out computable (which is useful for <code>dec_trivial</code>).</p>",
        "id": 248340037,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1628078246
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 248341567,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1628079317
    }
]