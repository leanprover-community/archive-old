[
    {
        "content": "<p>Say I have a goal like <code>p.fst * p.snd = 10</code> and I have variables <code>x := p.fst</code> and <code>y := p.snd</code>. How do I rewrite the goal so that it reads <code>x * y = 10</code>.</p>",
        "id": 266006870,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1640357494
    },
    {
        "content": "<p>are those created from <code>let</code>? You can just use <code>change x * y = 10</code> if so, but if you want to rewrite (which I'd recommend) then the <code>set</code> tactic may be better.</p>",
        "id": 266007076,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1640357724
    },
    {
        "content": "<p><code>dsimp only [x, y]</code> might work</p>",
        "id": 266007148,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1640357792
    },
    {
        "content": "<p>Yes, they are <code>let</code> variables.</p>",
        "id": 266007149,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1640357795
    },
    {
        "content": "<p><code>dsimp</code> didn't work.</p>",
        "id": 266007170,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1640357841
    },
    {
        "content": "<p><code>change</code> works. Great.</p>",
        "id": 266007245,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1640357924
    },
    {
        "content": "<p>they want to go the other way, Eric :)</p>",
        "id": 266007254,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1640357939
    },
    {
        "content": "<p>Hmm... can't I do a <code>let ⟨x, y⟩ := p</code> instead of doing two lets?</p>",
        "id": 266007475,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1640358138
    },
    {
        "content": "<p>try <code>obtain \\&lt;x, y&gt; := p</code>; but i'd not recommend this unless you never want to see <code>p</code> again</p>",
        "id": 266007504,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1640358204
    },
    {
        "content": "<p>Using normal parenthesis doesn't work either.</p>",
        "id": 266007509,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1640358213
    },
    {
        "content": "<p><code>obtain</code> works. Is that a tactic?</p>",
        "id": 266007583,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1640358269
    },
    {
        "content": "<p>yeah, it's a different syntax for <code>rcases</code></p>",
        "id": 266007592,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1640358292
    },
    {
        "content": "<p>Haha. It shows <code>(x, y).fst</code> and <code>(x, y).snd</code></p>",
        "id": 266007630,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1640358348
    },
    {
        "content": "<p>welcome to lean :p <code>dsimp</code> will then clear that (or maybe <code>simp only</code>) but that's type theory for you</p>",
        "id": 266007686,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1640358388
    },
    {
        "content": "<p>Ah, nice. Thanks a lot.</p>",
        "id": 266007765,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1640358485
    },
    {
        "content": "<p>Working with relations on products is going to get annoying.</p>",
        "id": 266007787,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1640358524
    },
    {
        "content": "<p>Is there a version of <code>assume</code> that can destruct using ⟨x, y⟩?</p>",
        "id": 266007821,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1640358572
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#rintro\">tactic#rintro</a></p>",
        "id": 266007936,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1640358649
    },
    {
        "content": "<p>Bernd, when you are in tactic mode, on every new step (that is, what comes right after a comma, for example), the first word you write always refers to a tactic. Like exact, refine, intro, cases, change, convert, congr, induction, norm_num... Some of those tactics take identifiers, some take expressions, some have a very precise syntax that take locations (at h, at *, at |-). Hopefully that helps your differentiate tactic tokens from term tokens</p>",
        "id": 266008212,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1640358979
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"238446\">Anne Baanen</span> <a href=\"#narrow/stream/113488-general/topic/Rewriting.20with.20variables/near/266007936\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#rintro\">tactic#rintro</a></p>\n</blockquote>\n<p>Fantastic.</p>",
        "id": 266008251,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1640359051
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> <a href=\"#narrow/stream/113488-general/topic/Rewriting.20with.20variables/near/266008212\">said</a>:</p>\n<blockquote>\n<p>Bernd, when you are in tactic mode, on every new step (that is, what comes right after a comma, for example), the first word you write always refers to a tactic. Like exact, refine, intro, cases, change, convert, congr, induction, norm_num... Some of those tactics take identifiers, some take expressions, some have a very precise syntax that take locations (at h, at *, at |-). Hopefully that helps your differentiate tactic tokens from term tokens</p>\n</blockquote>\n<p>So <code>let</code> is also a tactic? Interesting.</p>",
        "id": 266008318,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1640359101
    },
    {
        "content": "<p>The thing that may be confusing you is that let is also a thing in term mode:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"k\">in</span> <span class=\"n\">a</span>\n</code></pre></div>\n<p>but it's just a coincidence. <code>assume</code> is also synonymous with <code>\\lam</code>, and there was one more that just flew out of my head, but other than that there is no real overlap (afair)</p>",
        "id": 266008453,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1640359206
    },
    {
        "content": "<p>Yes, that does confuse me. I also have a hard time making sense of tactic definitions.</p>",
        "id": 266008653,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1640359404
    },
    {
        "content": "<p>dec_trivial is another token that is the same in both term mode and tactic mode</p>",
        "id": 266011741,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1640363044
    },
    {
        "content": "<p>Some tokens that act approximately the same in term and tactic mode: <code>assume</code>, <code>have</code>, <code>let</code>, <code>suffices</code>, <code>show</code>, <code>calc</code>, <code>by</code>, <code>from</code></p>",
        "id": 266026650,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1640383707
    }
]