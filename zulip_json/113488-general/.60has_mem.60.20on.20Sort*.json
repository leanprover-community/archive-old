[
    {
        "content": "<p>Hey all, is there any specific reason that we don't define <code>has_mem</code> on <code>Sort u</code> instead of <code>Type u</code>?</p>",
        "id": 242193554,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1623325909
    },
    {
        "content": "<p>It's not just <code>has_mem</code> -- <code>set</code> itself is only defined on <code>Type u</code>. This was in core, which we couldn't change for years, but maybe nobody needs subsets of Props in practice?</p>",
        "id": 242196707,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1623327639
    },
    {
        "content": "<p>Yeah, it seems to be most of the notation classes :( it'd be nice for graphs, as <code>Prop</code>-valued quivers are pretty much digraphs (while in general they are multigraphs)</p>",
        "id": 242197067,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1623327818
    },
    {
        "content": "<p>I think <code>set</code> / <code>list</code> etc require Type to avoid weird universe unification issues elsewhere</p>",
        "id": 242201690,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1623330070
    },
    {
        "content": "<p>But that argument doesn't hold for typeclasses</p>",
        "id": 242201712,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1623330077
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n<span class=\"kd\">class</span> <span class=\"n\">has_mem'</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">out_param</span> <span class=\"bp\">$</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">mem</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"n\">has_mem'</span>\n<span class=\"c1\">-- has_mem' : out_param (Sort u_1) → Sort u_2 → Sort (max 1 u_1 u_2)</span>\n</code></pre></div>",
        "id": 242205857,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1623331914
    },
    {
        "content": "<p>The ugly <code>max 1 ...</code> is right there ^^^</p>",
        "id": 242205923,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1623331926
    },
    {
        "content": "<p>(It's possible that it's not a huge issue because you rarely quantify over has_mem or put it in a structure, but it does add an ugly universe level.)</p>",
        "id": 242206059,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1623331984
    },
    {
        "content": "<p>argh, that's annoying :( the things we have to do for Russell's paradox...</p>",
        "id": 242218200,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1623336266
    },
    {
        "content": "<p>Why can't that live in <code>Sort (max u v)</code>?</p>",
        "id": 242245419,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1623347629
    },
    {
        "content": "<p>If you take u=v=0, then has_mem would live in Prop and hence be a subsingleton.  This means that you can't define the <code>has_mem.mem</code> projection because there are (in general) two possible values for the mem field.</p>",
        "id": 242247604,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1623348643
    }
]