[
    {
        "content": "<p>This surprised me:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.ennreal</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">ennreal</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">preorder</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"bp\">∞</span> <span class=\"o\">:=</span> <span class=\"n\">infer_instance</span> <span class=\"c1\">-- works fine</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"bp\">∞</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">exact</span> <span class=\"n\">le_refl</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"c1\">-- works fine</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"bp\">∞</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"c1\">-- fails</span>\n  <span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">  invalid apply tactic, failed to unify</span>\n<span class=\"cm\">    a ≤ a</span>\n<span class=\"cm\">  with</span>\n<span class=\"cm\">    ∀ [_inst_1 : preorder ?m_1] (a : ?m_1), a ≤ a</span>\n<span class=\"cm\">  -/</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I don't think I've seen <code>refl</code> failing to prove x &lt;= x on a preorder before.</p>",
        "id": 281662943,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1652091187
    },
    {
        "content": "<p>Is it the <code>apply</code> bug?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"bp\">∞</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">le_refl</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"c1\">-- works</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"bp\">∞</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">le_refl</span><span class=\"o\">,</span> <span class=\"c1\">-- fails</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 281663095,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1652091284
    },
    {
        "content": "<p>I guess this is why we have <code>refl'</code> <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.interactive.reflexivity'\">docs#tactic.interactive.reflexivity'</a></p>",
        "id": 281664688,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1652092410
    },
    {
        "content": "<p>Yes, this is the apply bug.</p>",
        "id": 281684367,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1652103043
    },
    {
        "content": "<p>Thanks both. Indeed <code>refl'</code> works.</p>",
        "id": 281685233,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1652103470
    },
    {
        "content": "<p>Should we redefine order on <code>with_top</code>?</p>",
        "id": 281757386,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1652137358
    },
    {
        "content": "<p>With eqn compiler</p>",
        "id": 281757438,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1652137398
    },
    {
        "content": "<p>Yeah, I don't really understand the point of the current definition.</p>",
        "id": 281757737,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652137621
    },
    {
        "content": "<p>Are you describing <a href=\"https://leanprover-community.github.io/mathlib_docs/find/with_top.has_le\">docs#with_top.has_le</a>?</p>",
        "id": 281758292,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652138049
    },
    {
        "content": "<p>I could believe the current definition is vaguely useful to at least have as a lemma statement somewhere, but the defeqs feel far more useful in the equation compiler version</p>",
        "id": 281758550,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652138246
    },
    {
        "content": "<p>Yes, exactly.</p>",
        "id": 281758573,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652138263
    },
    {
        "content": "<p>Who is going to make a PR?</p>",
        "id": 281760860,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1652140385
    },
    {
        "content": "<p>Nobody volunteered, so I'm going to do it.</p>",
        "id": 282412388,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1652625688
    },
    {
        "content": "<p>BTW, why <a href=\"https://leanprover-community.github.io/mathlib_docs/find/with_bot.has_le\">docs#with_bot.has_le</a> has priority 10?</p>",
        "id": 282412433,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1652625743
    },
    {
        "content": "<p>Something to do with <code>with_bot</code>/<code>with_top</code> leakage?</p>",
        "id": 282412458,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652625805
    }
]