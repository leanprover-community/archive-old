[
    {
        "content": "<p>I vaguely remember that an inductive type with a parameter, for example <code>A : Type -&gt; Type</code>, is not injective i.e. in general <code>A X = A Y</code> does not imply <code>X = Y</code>. </p>\n<p>What about this particular type of sigma type?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">Σ'</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">Σ'</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Can this be proven? If not, can I assume it as an axiom or it can cause inconsistency?</p>",
        "id": 280985522,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1651569194
    },
    {
        "content": "<p>I think that it is not provable, in Lean if two types have the same cardinality you cannot prove they are not equal. I think it is consistent though.</p>",
        "id": 280985883,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1651569422
    },
    {
        "content": "<p>I would be nice to know if it is really consistent. On the other hand, what I really want is to prove is the following and it might be weaker/provable:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">Σ'</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">Σ'</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">Σ'</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">))</span>\n  <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"bp\">▸</span> <span class=\"n\">A</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">A.1</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 280987778,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1651570640
    },
    {
        "content": "<p>Ohh, I think these two are equivalent.</p>",
        "id": 280988451,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1651571047
    },
    {
        "content": "<p>It feels really wrong that this is not be provable, especially the second formulation <span aria-label=\"confused\" class=\"emoji emoji-1f615\" role=\"img\" title=\"confused\">:confused:</span></p>",
        "id": 280988941,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1651571376
    },
    {
        "content": "<p>How did you reach that point? Where does this equality of types come from?</p>",
        "id": 280989188,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651571544
    },
    {
        "content": "<p>Equality between types is underdetermined in type theory. There are variants of type theory that extensively uses axioms/rules that imply <code>A ≃ B → A = B</code>, which contradicts your examples.<br>\nIn Lean, you should avoid writing the equality of two types, unless you know what you're doing.</p>",
        "id": 280989269,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1651571606
    },
    {
        "content": "<p>I'm using tactic mode to construct programs. It usually goes like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">Σ'</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n   <span class=\"bp\">&lt;</span><span class=\"n\">rewrite</span> <span class=\"n\">b</span> <span class=\"n\">into</span> <span class=\"n\">a</span><span class=\"bp\">&gt;</span>\n   <span class=\"n\">apply</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">Eq.refl</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>In my use case <code>b</code> is specification, usually noncomputable function, and you transform into something propositionaly equal to <code>b</code> but <code>a</code> is computable.  </p>\n<p>Later on when I work with <code>foo.1</code> I want to either convert it back to <code>a</code> or <code>b</code>, depending on the scenario.</p>",
        "id": 280990240,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1651572141
    },
    {
        "content": "<p>Aren't you happy to have an equivalence of type rather than an equality?</p>",
        "id": 280990301,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651572189
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113488-general/topic/Equality.20of.20psigma.20implies.20equality/near/280990301\">said</a>:</p>\n<blockquote>\n<p>Aren't you happy to have an equivalence of type rather than an equality?</p>\n</blockquote>\n<p>How would type equivalence be applied in my use case?</p>",
        "id": 280990514,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1651572314
    },
    {
        "content": "<p>Instead of rewriting with <code>h : a = b</code>, you will <code>apply e</code>, where <code>e : Σ' x, x = a ≃ Σ' x, x = b</code>.</p>",
        "id": 280990637,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651572374
    },
    {
        "content": "<p>\"using tactic mode to construct programs\" is explicitly discouraged precisely because you might be tempted to rewrite the goal rather than applying functions.</p>",
        "id": 280990697,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651572428
    },
    {
        "content": "<p>It might be discouraged, but I'm exploring the space of doing exactly so and I think I can do some cool stuff with it.</p>",
        "id": 280990958,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1651572586
    },
    {
        "content": "<p>Well, if you can cope with the foundational problems that this approach entails <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 280991097,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651572669
    },
    {
        "content": "<p>I'm definitely interested what foundational problems this brings. If assuming <code>(Σ' x, x = a) = (Σ' x, x = b) → (a = b)</code> as an axiom is inconsistent then I will seriously rethink what I'm doing, if not I will probably keep on doing what I'm doing if no reasonable and similarly convenient way of doing things show up.</p>",
        "id": 280991812,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1651573116
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113488-general/topic/Equality.20of.20psigma.20implies.20equality/near/280990637\">said</a>:</p>\n<blockquote>\n<p>Instead of rewriting with <code>h : a = b</code>, you will <code>apply e</code>, where <code>e : Σ' x, x = a ≃ Σ' x, x = b</code>.</p>\n</blockquote>\n<p>This is definitely option, but I'm afraid I would have to  re-implement my own tactic mode similar to <code>conv</code> based on this.</p>",
        "id": 280991962,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1651573214
    },
    {
        "content": "<p>To add to Floris' comment, the reason type equality is so badly behaved is that there's no axiom that can help you determine it</p>",
        "id": 281088846,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1651618223
    },
    {
        "content": "<p>You don't have anything like <code>funext</code> or <code>propext</code> for types</p>",
        "id": 281088860,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1651618232
    },
    {
        "content": "<p>So the only ways to prove <code>α = β</code> for two types is via <code>rfl</code> and other equalities between the arguments that make up each type</p>",
        "id": 281089022,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1651618318
    }
]