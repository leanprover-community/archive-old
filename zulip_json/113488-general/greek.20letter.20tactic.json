[
    {
        "content": "<p>Is there a tactic doing only that greek letter which transforms <code>(λ  a, f a) x</code> to <code>f x</code>?</p>",
        "id": 127201952,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527507506
    },
    {
        "content": "<p>I think <code>dsimp</code> with one of its special options does it, but I don't remember exactly what it is</p>",
        "id": 127202121,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1527507734
    },
    {
        "content": "<p>that's eta reduction</p>",
        "id": 127202123,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527507754
    },
    {
        "content": "<p>no</p>",
        "id": 127202126,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527507762
    },
    {
        "content": "<p>beta</p>",
        "id": 127202127,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1527507765
    },
    {
        "content": "<p>that's delta reduction</p>",
        "id": 127202128,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527507766
    },
    {
        "content": "<p>oh</p>",
        "id": 127202129,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527507768
    },
    {
        "content": "<p>beta it is then</p>",
        "id": 127202131,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527507780
    },
    {
        "content": "<p>I say alpha!</p>",
        "id": 127202136,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527507784
    },
    {
        "content": "<p>no, that's also eta reduction</p>",
        "id": 127202143,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527507796
    },
    {
        "content": "<p>We need printable DTT cheat sheets</p>",
        "id": 127202148,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527507813
    },
    {
        "content": "<p>it's not even DTT</p>",
        "id": 127202151,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527507825
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"c1\">-- (λ (a : X), f a) x = f x</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">dsimp</span> <span class=\"o\">{</span> <span class=\"n\">eta</span> <span class=\"o\">:=</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"n\">beta</span> <span class=\"o\">:=</span> <span class=\"n\">false</span> <span class=\"o\">}</span>\n\n<span class=\"c1\">-- (λ (a : X), f a) x = f x</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">dsimp</span> <span class=\"o\">{</span> <span class=\"n\">eta</span> <span class=\"o\">:=</span> <span class=\"n\">true</span><span class=\"o\">,</span> <span class=\"n\">beta</span> <span class=\"o\">:=</span> <span class=\"n\">false</span> <span class=\"o\">}</span>\n\n<span class=\"c1\">-- f x = f x</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">dsimp</span> <span class=\"o\">{</span> <span class=\"n\">eta</span> <span class=\"o\">:=</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"n\">beta</span> <span class=\"o\">:=</span> <span class=\"n\">true</span> <span class=\"o\">}</span>\n</pre></div>",
        "id": 127202391,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527508214
    },
    {
        "content": "<p>why isn't it eta?</p>",
        "id": 127202394,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527508217
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110025\">@Andrew Ashworth</span></p>",
        "id": 127202400,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527508228
    },
    {
        "content": "<p>i don't know how dsimp does it, but I remember it as eta is the sorta useless thing that turns <code>lam x, f x --&gt; f</code>, while beta is <code>(lam x, f x) y --&gt; f y</code></p>",
        "id": 127202649,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1527508677
    },
    {
        "content": "<p>basically eta only cleans up useless lambdas</p>",
        "id": 127202697,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1527508690
    },
    {
        "content": "<p>An amazing feature I only discovered recently: <code>set_option pp.beta true</code> will hide those useless <code>(λ a, f a) x</code> in displayed types</p>",
        "id": 127213902,
        "sender_full_name": "Reid Barton",
        "timestamp": 1527527397
    },
    {
        "content": "<p>The slightly annoying thing about that is sometimes it won't rewrite because it's not reduced, and you get frustrated trying to work out why.</p>",
        "id": 127214374,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1527528328
    },
    {
        "content": "<p>You need to set pp.beta true in rw as well :-)</p>",
        "id": 127222466,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527543932
    }
]