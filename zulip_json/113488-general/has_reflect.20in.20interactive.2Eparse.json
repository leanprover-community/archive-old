[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> (and anyone else who might know!), why does the definition</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"kn\">reducible</span><span class=\"o\">]</span> <span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">parse</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_reflect</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">parser</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">α</span>\n</pre></div>\n\n\n<p>need the <code>[has_reflect α]</code>?</p>",
        "id": 163788289,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1555739333
    },
    {
        "content": "<p>Because the parser needs to know what type to produce</p>",
        "id": 163790714,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1555743796
    },
    {
        "content": "<p>oh, ok, I understand</p>",
        "id": 163791655,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1555745463
    },
    {
        "content": "<p>So if I have a user-defined <code>parser</code>of a type <code>\\alpha</code> I <em>must</em> have an instance of <code>has_reflect \\alpha</code> in order to <code>interactive.parse</code> that parser.</p>\n<p>On the other hand, a parser implemented in core lean doesn't need a <code>has_reflect</code> instance, so in terms of parsing a <code>tactic unit</code> I suppose we have some wiggle-room here.</p>",
        "id": 163791790,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1555745654
    },
    {
        "content": "<p>So I suppose <code>[has_reflect \\alpha]</code> is unnecessarily strong---really we just need a way to reflect the result of <code>p</code> whenever it runs. I'll build an instance of <code>reflectable_parser</code> which encodes this and weaken the typeclass argument of <code>parse</code>.</p>",
        "id": 163791971,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1555745988
    },
    {
        "content": "<p>Oh, I looked into the code and now I see why it has to reflect stuff:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">open</span> <span class=\"n\">interactive</span> <span class=\"n\">lean</span> <span class=\"n\">lean</span><span class=\"bp\">.</span><span class=\"n\">parser</span>\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">foo</span>\n  <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"o\">(</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">reverse</span> <span class=\"bp\">&lt;</span><span class=\"err\">$</span><span class=\"bp\">&gt;</span> <span class=\"n\">many</span> <span class=\"n\">ident</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">return</span> <span class=\"o\">()</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">foo</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">]</span>\n<span class=\"c1\">-- has_bind.seq (tactic.save_info {line := 6, column := 9})</span>\n<span class=\"c1\">--   (tactic.step (tactic.interactive.foo [name.mk_string &quot;b&quot; name.anonymous, name.mk_string &quot;a&quot; name.anonymous])) :</span>\n<span class=\"c1\">--   tactic unit</span>\n</pre></div>",
        "id": 163792263,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1555746400
    },
    {
        "content": "<p>it has to build the expression corresponding to the tactic to be run <em>before</em> actually running it. The parser gets run long before the tactic starts execution</p>",
        "id": 163792280,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1555746454
    },
    {
        "content": "<p>Actually, looking at your comment again I don't see where the problem is... regardless of whether a parser is implemented in core lean or user defined, what matters is the type of the parser passed to <code>parse</code>. The core parsers don't need reflect instances, just the final result going to <code>parse</code></p>",
        "id": 163792417,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1555746641
    },
    {
        "content": "<p>for example:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">open</span> <span class=\"n\">interactive</span> <span class=\"n\">lean</span> <span class=\"n\">lean</span><span class=\"bp\">.</span><span class=\"n\">parser</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">xyzzy</span> <span class=\"o\">:</span> <span class=\"n\">parser</span> <span class=\"o\">(</span><span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">return</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">foo</span>\n  <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"o\">((</span><span class=\"bp\">λ</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"n\">nat</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span><span class=\"err\">$</span><span class=\"bp\">&gt;</span> <span class=\"n\">xyzzy</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">return</span> <span class=\"o\">()</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">foo</span><span class=\"o\">]</span>\n</pre></div>\n\n\n<p>the <code>xyzzy</code> parser doesn't need to provide a has_reflect instance for <code>nat -&gt; nat</code> because the end result passed to parse is a <code>nat</code></p>",
        "id": 163792489,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1555746777
    },
    {
        "content": "<p>I believe I understand your last comment, but I think there still is a distinction. Because the parser works as you describe, it should be impossible for a user defined parser to parse a <code>tactic unit</code>, since once constructed it is too late for a <code>tactic unit</code> to be turned back into an <code>expr</code>, required for emitting by the parser. On the other hand, a \"parser\" written in core lean could happily parse a tactic unit but keep it in expr form (as essentially happens when a nested tactic block parsed in the current parser), and then emit the <code>expr</code> form directly so that we really can just read a <code>tactic unit</code> block from interactive mode.</p>\n<p>Do you think what I'm say makes sense, or am I still confused?</p>",
        "id": 163792851,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1555747395
    },
    {
        "content": "<p>What we can do is rather than parse a <code>tactic unit</code> we have a <code>parser expr</code> that produces an expr representing a tactic</p>",
        "id": 163793037,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1555747590
    },
    {
        "content": "<p>Obviously <code>expr</code> has a reflect instance</p>",
        "id": 163793040,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1555747614
    },
    {
        "content": "<p>Sure, that absolutely makes sense. There is also some scope for a generalisation</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">meta</span> <span class=\"kn\">structure</span> <span class=\"n\">reflected_value</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"n\">reflect</span> <span class=\"o\">:</span> <span class=\"n\">reflected</span> <span class=\"n\">val</span><span class=\"o\">]</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">class</span> <span class=\"n\">reflectable_parser</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">parser</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">full</span> <span class=\"o\">:</span> <span class=\"n\">parser</span> <span class=\"o\">(</span><span class=\"n\">reflected_value</span> <span class=\"n\">α</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">valid</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">reflected_value</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">&lt;</span><span class=\"err\">$</span><span class=\"bp\">&gt;</span> <span class=\"n\">full</span><span class=\"o\">)</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"kn\">reducible</span><span class=\"o\">]</span> <span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">parse</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">parser</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">reflectable_parser</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">α</span>\n</pre></div>\n\n\n<p>What do you think about that? I guess one interpretation is that I'm type-safing your plain <code>parser expr</code> construction.</p>",
        "id": 163793205,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1555747865
    },
    {
        "content": "<p>Of course there is an instance</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">meta</span> <span class=\"kn\">instance</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">parser</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">has_reflect</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">reflectable_parser</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨</span><span class=\"o\">(</span><span class=\"n\">do</span> <span class=\"n\">v</span> <span class=\"err\">←</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">return</span> <span class=\"bp\">⟨</span><span class=\"n\">v</span><span class=\"bp\">⟩</span><span class=\"o\">),</span> <span class=\"bp\">_⟩</span>\n</pre></div>",
        "id": 163793210,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1555747876
    },
    {
        "content": "<p>(I'm trying to write this in a way which wouldn't break code which compiles against vanilla lean.)</p>",
        "id": 163793212,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1555747907
    },
    {
        "content": "<p>so what's the new power with this? Are you going to add <code>itactic</code> as a parser and give it a <code>reflectable_parser</code> instance?</p>",
        "id": 163793465,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1555748397
    },
    {
        "content": "<p>That's what I was thinking. I could just do the <code>parser expr</code> thing if you want. :)</p>",
        "id": 163793512,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1555748419
    },
    {
        "content": "<p>Here's the parser expr approach with <code>itactic</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">meta</span> <span class=\"kn\">constant</span> <span class=\"n\">itactic&#39;</span> <span class=\"o\">:</span> <span class=\"n\">parser</span> <span class=\"n\">expr</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">run_itactic</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">monad</span><span class=\"bp\">.</span><span class=\"n\">join</span> <span class=\"err\">$</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">eval_expr</span> <span class=\"o\">(</span><span class=\"n\">tactic</span> <span class=\"n\">unit</span><span class=\"o\">)</span> <span class=\"n\">e</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">repeat&#39;</span>\n  <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">itactic&#39;</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">repeat</span> <span class=\"o\">(</span><span class=\"n\">run_itactic</span> <span class=\"n\">e</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>there is an obvious ergonomic loss with this, but I'm not a fan of lean magic</p>",
        "id": 163793522,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1555748464
    },
    {
        "content": "<p>(I would really implement <code>itactic</code> as a <code>parser (reflected_value (tactic unit))</code>, and then make the normal <code>parser (tactic unit)</code> and instance in lean from it.)</p>\n<p>Sure.</p>",
        "id": 163793527,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1555748497
    },
    {
        "content": "<p>One thing with this approach actually is that we still have to leave <code>tactic.interative.itactic</code> implemented the same way in lean, instead of being able to define <code>def tactic.interative.itactic := interactive.parse lean.parser.itactic</code>, and eliminate the need for how it was hard-implemented the old way.</p>",
        "id": 163793658,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1555748737
    },
    {
        "content": "<p>well you can still replace uses of <code>itactic</code> with the parser, but the interface is different</p>",
        "id": 163793703,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1555748793
    },
    {
        "content": "<p>also you can't define things to be <code>parse bla</code> because <code>parse</code> is lean magic</p>",
        "id": 163793706,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1555748817
    },
    {
        "content": "<p>If <code>itactic</code> stops being magic then it will have to be changed in uses anyway</p>",
        "id": 163793717,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1555748856
    },
    {
        "content": "<p>Actually I think I like <code>reflectable_parser</code> better than my idea</p>",
        "id": 163793881,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1555749178
    },
    {
        "content": "<p>It will cause some unnecessary expr quoting and interpretation inside tactic scripts</p>",
        "id": 163793899,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1555749211
    },
    {
        "content": "<p>I would drop the <code>valid</code> field of <code>reflectable parser</code> though</p>",
        "id": 163793948,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1555749270
    },
    {
        "content": "<p>Ok, and ok cool</p>",
        "id": 163794012,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1555749389
    }
]