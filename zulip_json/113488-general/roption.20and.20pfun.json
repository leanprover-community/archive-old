[
    {
        "content": "<p>Does anyone mind if I split <code>data.pfun</code> in <code>data.option.roption</code> (or <code>data.roption)</code>and <code>data.pfun</code>?</p>",
        "id": 248227744,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1628000616
    },
    {
        "content": "<p>That sounds like a good idea to me</p>",
        "id": 248262721,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1628016598
    },
    {
        "content": "<p>I suggest using <code>data.roption</code> as the name. Even better, if you are up to it I would really like <code>roption</code> to be renamed to <code>part</code>; my paper on computability theory 3 years ago does this rename and promises that it will eventually be upstreamed but that never happened</p>",
        "id": 248277797,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1628023408
    },
    {
        "content": "<p>Okay, will do :)</p>",
        "id": 248325048,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1628067214
    },
    {
        "content": "<p>What's the reasoning behind calling it part? Because of \"partial values\"? I'm also planning on writing the docstrings.</p>",
        "id": 248325053,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1628067218
    },
    {
        "content": "<p>There's a clash between your proposed <code>part</code> and <code>computable.part</code>. (See <a href=\"https://github.com/leanprover-community/mathlib/pull/8544/checks?check_run_id=3239932261\">this CI error</a>). What should I do? <code>part</code> is quite a common name, so maybe <code>pvalues</code> or <code>pelems</code> would be better?</p>",
        "id": 248339055,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1628077601
    },
    {
        "content": "<p>It probably makes sense to do the file split before (i.e. as a separate PR) doing any renaming anyway, otherwise the git diff will be lousy</p>",
        "id": 248340500,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1628078561
    },
    {
        "content": "<p>Sure (I mean you've seen the horrendous diff <span aria-label=\"stuck out tongue wink\" class=\"emoji emoji-1f61c\" role=\"img\" title=\"stuck out tongue wink\">:stuck_out_tongue_wink:</span>), but the file split is really simple.</p>",
        "id": 248340574,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1628078615
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113488-general/topic/roption.20and.20pfun/near/248339055\">said</a>:</p>\n<blockquote>\n<p>There's a clash between your proposed <code>part</code> and <code>computable.part</code>. (See <a href=\"https://github.com/leanprover-community/mathlib/pull/8544/checks?check_run_id=3239932261\">this CI error</a>). What should I do? <code>part</code> is quite a common name, so maybe <code>pvalues</code> or <code>pelems</code> would be better?</p>\n</blockquote>\n<p>I'm not sure which one you want to rename.  I don't think <code>pvalues</code> or <code>pelems</code> is an upgrade over <code>roption</code>.  If you want to rename <code>computable.part</code>, then I'd suggest <code>computable.partrec</code> or <code>computable.to_partrec</code>.</p>",
        "id": 248341168,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1628079018
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/113488-general/topic/roption.20and.20pfun/near/248341168\">said</a>:</p>\n<blockquote>\n<p>If you want to rename <code>computable.part</code>, then I'd suggest <code>computable.partrec</code> or <code>computable.to_partrec</code>.</p>\n</blockquote>\n<p>Oh yeah, I hadn't paid attention to that but <code>computable.part</code> and <code>computable₂.part</code> really could be called <code>computable.partrec</code> and <code>computable₂.partrec₂</code>, maybe as <code>private</code> lemmas.</p>",
        "id": 248341823,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1628079523
    },
    {
        "content": "<p>Why should they be private?</p>",
        "id": 248342003,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1628079634
    },
    {
        "content": "<p>I agree with renaming <code>part</code> to <code>partrec</code> in  those lemmas</p>",
        "id": 248342079,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1628079703
    },
    {
        "content": "<p>that's just me being too terse for my own good</p>",
        "id": 248342152,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1628079730
    },
    {
        "content": "<p>not private, they are perfectly normal public lemmas</p>",
        "id": 248342198,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1628079779
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/113488-general/topic/roption.20and.20pfun/near/248342003\">said</a>:</p>\n<blockquote>\n<p>Why should they be private?</p>\n</blockquote>\n<p>becausre they will collide with <code>partrec</code> and <code>partrec₂</code>? Or is Lean smart enough to disambiguate?</p>",
        "id": 248343215,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1628080384
    },
    {
        "content": "<p>Yep, it conflicts.</p>",
        "id": 248344564,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1628081203
    },
    {
        "content": "<p>If <code>computable.partrec</code> (ex <code>computable.part</code>) is not <code>private</code>, then</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">of_option</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">computable</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">partrec</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">part</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>yields</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">partrec</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">))</span>\n<span class=\"n\">term</span>\n  <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">part</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u_1</span> <span class=\"n\">u_2</span><span class=\"o\">)</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">computable</span> <span class=\"bp\">?</span><span class=\"n\">m_5</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n</code></pre></div>",
        "id": 248344691,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1628081273
    },
    {
        "content": "<p>oh, you want <code>protected</code> then</p>",
        "id": 248344815,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1628081337
    },
    {
        "content": "<p>Oh, yeah I meant <code>protected</code></p>",
        "id": 248344840,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1628081353
    },
    {
        "content": "<p>that should be fine since it's intended for use with dot notation anyway</p>",
        "id": 248344889,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1628081401
    },
    {
        "content": "<p>Great! That's what I thought.</p>",
        "id": 248344954,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1628081418
    },
    {
        "content": "<p>Note that I had to add a few docstrings in <code>data.part</code> because the renaming makes them undocumented in <code>nolints.txt</code>.</p>",
        "id": 248349595,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1628083795
    },
    {
        "content": "<p>well I'm not going to complain <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 248349852,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1628083921
    },
    {
        "content": "<p>Yeah I know, docstrings! Terrible</p>",
        "id": 248349929,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1628083943
    }
]