[
    {
        "content": "<p>I need <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pi.single\">docs#pi.single</a> before its definition in <code>algebra.group.pi</code>. Where can I move it to? <code>data.pi</code>?</p>",
        "id": 214433978,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1603554144
    },
    {
        "content": "<p>BTW, why is it not defined in terms of <code>function.update</code>?</p>",
        "id": 214435186,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603555750
    },
    {
        "content": "<p>No idea. You could also ask why all of the other <code>singles</code> aren't defined that way either</p>",
        "id": 214435206,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1603555798
    },
    {
        "content": "<p>I understand the answer in the case of a non-dependent function: don't deal with rewriting in the domain.</p>",
        "id": 214435390,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603556002
    },
    {
        "content": "<p>In which file do you need <code>pi.single</code>?</p>",
        "id": 214435398,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603556028
    },
    {
        "content": "<p><code>function.update</code> was introduced after many of the <code>single</code>s already existed, I think</p>",
        "id": 214435496,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603556141
    },
    {
        "content": "<p>I need <code>pi.single</code> for a pi instance of <code>nontrivial</code></p>",
        "id": 214435560,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1603556191
    },
    {
        "content": "<p>Which I need for a pi instance of <code>group_with_zero</code></p>",
        "id": 214435562,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1603556198
    },
    {
        "content": "<blockquote>\n<p>a pi instance of <code>group_with_zero</code></p>\n</blockquote>\n<p>But <code>bool → G₀</code> is not a <code>group_with_zero</code></p>",
        "id": 214437404,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603558443
    },
    {
        "content": "<p>You don't need <code>pi.single</code> for a pi instance of <code>nontrivial</code> because the pi instance of <code>nontrivial</code> shouldn't use any algebra.</p>",
        "id": 214437481,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603558495
    },
    {
        "content": "<p>BTW, we have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/function.nontrivial\">docs#function.nontrivial</a></p>",
        "id": 214437579,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603558567
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/4766\">#4766</a></p>",
        "id": 214438205,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1603559241
    },
    {
        "content": "<p>I'm not really sure what you by \"algebra\" there do you mean presence of a zero? I suppose <code>inhabited</code> would suffice instead of <code>has_zero</code></p>",
        "id": 214438392,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1603559455
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/113488-general/topic/Rehoming.20contest/near/214437404\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>a pi instance of <code>group_with_zero</code></p>\n</blockquote>\n<p>But <code>bool → G₀</code> is not a <code>group_with_zero</code></p>\n</blockquote>\n<p>It might be a monoid with zero though.</p>",
        "id": 214438846,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1603560070
    },
    {
        "content": "<p>Yeah, that was what I concluded in the PR - I can build the <code>monoid_with_zero</code> typeclases, but I can't satisfy the <code>inv 0 = 0</code> requirements of <code>group_with_zero</code></p>",
        "id": 214438941,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1603560227
    },
    {
        "content": "<p>I'm also unsure whether <code>[∃ i, nontrivial (f i)]</code> is a sane typeclass argument</p>",
        "id": 214439072,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1603560384
    },
    {
        "content": "<p>In the nondependent case <code>nontrivial (A -&gt; B)</code> the right hypothesis is <code>inhabited A</code> (or <code>nonempty A</code>) and <code>nontrivial B</code>.</p>",
        "id": 214439096,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603560432
    },
    {
        "content": "<p>In the dependent case I guess the most sensible option is to use <code>inhabited A</code> and <code>nontrivial (B default)</code></p>",
        "id": 214439112,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603560470
    },
    {
        "content": "<p>Even if you could tell Lean \"go try to find some <code>i : A</code> and <code>[nontrivial (B i)]</code>, which sounds like a wild goose chase waiting to happen, I can't think of a realistic scenario where that would actually be useful.</p>",
        "id": 214439644,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603561163
    },
    {
        "content": "<p>If you really need to use some specific <code>i</code> then that's what <code>haveI</code> is for.</p>",
        "id": 214439739,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603561292
    },
    {
        "content": "<p>Oh right, in the dependent case you also need everything to be nonempty too.</p>",
        "id": 214440163,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603561835
    },
    {
        "content": "<p>Yes, I meant <code>[has_zero]</code></p>",
        "id": 214440261,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603561941
    },
    {
        "content": "<p>On a related note, is there a shorthand for <code>(classical.some p, classical.some_spec p)</code> so that I can get both in a single let statement with unpacking?</p>",
        "id": 214440595,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1603562318
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/classical.indefinite_description\">docs#classical.indefinite_description</a></p>",
        "id": 214440645,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1603562397
    },
    {
        "content": "<p>Indeed, in core Lean we have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">some</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">indefinite_description</span> <span class=\"n\">p</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">some_spec</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">indefinite_description</span> <span class=\"n\">p</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">property</span>\n</code></pre></div>\n\n<p>:D</p>",
        "id": 214440749,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1603562510
    },
    {
        "content": "<p>Shouldn't indefinite_description be a def not a lemma?</p>",
        "id": 214440857,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1603562631
    },
    {
        "content": "<p>I guess it should. PR?</p>",
        "id": 214441006,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603562774
    },
    {
        "content": "<p>I know there's some super obscure reason for something like this but I don't remember if it's this specifically.</p>",
        "id": 214441145,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603562964
    },
    {
        "content": "<p>But of course it would be good to PR <em>either</em> a change to make it use <code>def</code> or a comment explaining why it cannot.</p>",
        "id": 214441213,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603563016
    },
    {
        "content": "<p>Yes I have it in my head that this has come up before. In fact I am a bit confused -- I'm surprised that the definition of <code>some</code> doesn't make Lean complain that it has forgotten what the choice is.</p>",
        "id": 214441247,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1603563088
    },
    {
        "content": "<p>My understanding is the distinction between <code>def</code> and <code>lemma</code> is totally meaningless, and it just comes down to convention</p>",
        "id": 214441251,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1603563096
    },
    {
        "content": "<p>That's definitely not true.</p>",
        "id": 214441317,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603563148
    },
    {
        "content": "<p>Theorems and definitions are a bit different, I thought? Theorems don't create code in the VM or something? No idea what I'm talking about...</p>",
        "id": 214441320,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1603563155
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"mi\">4</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"mi\">4</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>",
        "id": 214441348,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1603563208
    },
    {
        "content": "<p>One difference is that the type of a <code>lemma</code> is elaborated without looking at the body (so that the body can be type checked on a separate thread).</p>",
        "id": 214441353,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603563219
    },
    {
        "content": "<p><a href=\"#narrow/stream/113488-general/topic/noncomputable.20theorem/near/136143755\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/noncomputable.20theorem/near/136143755</a></p>",
        "id": 214441435,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603563326
    },
    {
        "content": "<p><a href=\"https://gist.github.com/bryangingechen/6c2f397b14d756c3c7f72440cd9b4816#file-lint_all-lean-L11\">Here's an old gist</a> showing that the linter agrees that <code>classical.indefinite_description</code> should be a <code>def</code>. See also this issue on linting the core library: <a href=\"https://github.com/leanprover-community/lean/issues/200\">lean#200</a></p>",
        "id": 214441507,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1603563431
    },
    {
        "content": "<p>So in this case, the linter is wrong; but I assume we can't put <code>nolint</code>s in the core library?</p>",
        "id": 214441583,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603563542
    },
    {
        "content": "<p>Presumably, the linter will be wrong more often for stuff in core...</p>",
        "id": 214441591,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603563554
    },
    {
        "content": "<p>The link above explains Kevin's example--I had forgotten about this \"definition irrelevance\".</p>",
        "id": 214441659,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603563622
    },
    {
        "content": "<p>I don't see what's wrong with unfolding <code>classical.some</code> to <code>classical.choice</code>.</p>",
        "id": 214441782,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603563775
    },
    {
        "content": "<p>actually, this is a pretty interesting feature--couldn't you use it to provide opaque ML-style modules?</p>",
        "id": 214441864,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603563858
    },
    {
        "content": "<p>e.g. <code>theorem reals_as_complete_ordered_field := ...</code></p>",
        "id": 214441877,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603563889
    },
    {
        "content": "<p>Sorry if I'm missing something - why is the linter wrong in this case?</p>",
        "id": 214441917,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1603563960
    },
    {
        "content": "<p>Because Mario said it's intentional</p>",
        "id": 214441958,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603563969
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/113488-general/topic/Rehoming.20contest/near/214441782\">said</a>:</p>\n<blockquote>\n<p>I don't see what's wrong with unfolding <code>classical.some</code> to <code>classical.choice</code>.</p>\n</blockquote>\n<p>My understanding is that there's nothing particularly wrong with doing it except that it will never be useful, so we might as well not</p>",
        "id": 214442055,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603564128
    },
    {
        "content": "<p>If it's about unfolding, would it be the same if <code>indefinite_description</code> were an <code>@[irreducible] noncomputable def</code>?</p>",
        "id": 214443180,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1603565495
    },
    {
        "content": "<p>I don't know for sure, or how to test, but my impression from the earlier discussion is that <code>theorem</code>s don't even have a definitional delta rule in the kernel</p>",
        "id": 214443252,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603565573
    },
    {
        "content": "<p>You can use <code>delta</code> on <code>theorem</code>s, although it requires joining on that thread's task</p>",
        "id": 214469302,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603602399
    },
    {
        "content": "<p>I see, so... the elaborator just pretends there is no delta rule unless you ask it specifically?</p>",
        "id": 214498806,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603644277
    },
    {
        "content": "<p>yeah, same as irreducible</p>",
        "id": 214503653,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603649483
    }
]