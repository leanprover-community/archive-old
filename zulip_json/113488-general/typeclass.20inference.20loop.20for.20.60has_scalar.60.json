[
    {
        "content": "<p>I think this MWE exhibits a problem in the design of <code>algebra/module.lean</code>, but I'm not quite sure what's going on yet:</p>\n<div class=\"codehilite\"><pre><span></span>import algebra.module\nimport data.real.basic\n\ndef X : Type := sorry\ninstance ring_X : ring X := sorry\n\nset_option trace.class_instances true\nexample : has_scalar ℝ X := infer_instance -- times out\n</pre></div>",
        "id": 161732151,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1553576673
    },
    {
        "content": "<p>(oops, initial example over-minimised... fixed now)</p>",
        "id": 161732896,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1553577767
    },
    {
        "content": "<p>I've been staring at the <code>trace</code> output, but having trouble identifying where the problem could be.</p>",
        "id": 161734019,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1553579417
    },
    {
        "content": "<p>Oh \"dear\". This is the same problem <span class=\"user-mention\" data-user-id=\"110294\">@Johannes Hölzl</span> identified at <a href=\"https://github.com/johoelzl/tc-log-parser/blob/master/problem.md\" target=\"_blank\" title=\"https://github.com/johoelzl/tc-log-parser/blob/master/problem.md\">https://github.com/johoelzl/tc-log-parser/blob/master/problem.md</a></p>",
        "id": 161734476,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1553580131
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>semimodule.to_has_scalar : Π (α : Type u) (β : Type v) [_inst_1 : semiring α] [_inst_2 : add_comm_monoid β] [c : semimodule α β],\n  has_scalar α β\n</pre></div>\n\n\n<p>is maybe the problem. <code>semimodule ℝ X</code> is going to fail, but it's going to try solving for it over and over again with different values of <code>_inst_1</code> and <code>_inst_2</code>?</p>",
        "id": 161734500,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1553580201
    },
    {
        "content": "<p>Do we have a work-around?</p>",
        "id": 161734502,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1553580212
    },
    {
        "content": "<p>This seems bad. :-(</p>",
        "id": 161734505,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1553580218
    },
    {
        "content": "<p>wait, so is the search supposed to succeed?</p>",
        "id": 161736352,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1553582911
    },
    {
        "content": "<p>Not this specific setting. But it may happen that in a similar instance search such a problem occurs. Then it doesn't terminate, or takes a long time.</p>",
        "id": 161736380,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1553583002
    },
    {
        "content": "<p>Let's say we want to prove <code>C t s</code>, and one of the instances is <code>I : semiring R x -&gt; ... -&gt; C x y</code> and another one is <code>J : C t x</code>. If the semiring instance is looked up first we fail. If we are lucky then <code>J</code> is tried first.</p>",
        "id": 161736442,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1553583075
    },
    {
        "content": "<p>I agree that this seems very bad. I think we need a smarter type class search. I agree that it should be deterministic. But it should be possible to still have something \"smart\" and also faster.</p>",
        "id": 161737268,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553584308
    },
    {
        "content": "<p>We will only become more dependent on type class search the deeper down we get in higher maths</p>",
        "id": 161737269,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553584308
    },
    {
        "content": "<p>Is this a current workaround: in complicated situations, the user can just supply the instances they want lean to find in some cases? This is what I have been doing to avoid having to change the default instance depth search. I know that the Lean 3 instance search needs some guidance sometimes, but because in practice I know what the answer is, it's not hard to guide Lean the right direction. </p>\n<p>Or is there a fundamental problem which this approach will not deal with?</p>\n<p>In my experience, timeouts are almost always because of \"user error\" in the sense that I ask Lean to fill in an instance which it cannot be reasonably expected to do (eg because it's not there)</p>",
        "id": 161741097,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553589184
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean-perfectoid-spaces/blob/71b680fec8dfd4a47e06b7b686e9c3839b4937f9/src/Huber_ring/localization.lean#L328\" target=\"_blank\" title=\"https://github.com/leanprover-community/lean-perfectoid-spaces/blob/71b680fec8dfd4a47e06b7b686e9c3839b4937f9/src/Huber_ring/localization.lean#L328\">https://github.com/leanprover-community/lean-perfectoid-spaces/blob/71b680fec8dfd4a47e06b7b686e9c3839b4937f9/src/Huber_ring/localization.lean#L328</a></p>",
        "id": 161741280,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553589390
    },
    {
        "content": "<p>That bound isn't tight, but I think <code>120</code> is an under bound.</p>",
        "id": 161741314,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553589429
    },
    {
        "content": "<p>the search depth is a very limited parameter. If you have something like <code>module A i1 i2 _</code>, now the instance search already found <code>i1</code> and <code>i2</code>, and is now looking at the <code>_</code>. Let's assume the <code>i1</code> and <code>i2</code> are already large terms. Now we have a lot of choice points in <code>i1</code> and <code>i2</code>. Remember that choice points are possible further choice, even if there is no further successful choice. With this the \"instance depth search\" (which is not about term depth, but backtracking depth) needs to be already quiet high, even if we didn't start the search for <code>_</code> yet.</p>",
        "id": 161741465,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1553589629
    }
]