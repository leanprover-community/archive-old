[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:=</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- h h1: ¬∀ (x : X), f x = 0</span>\n  <span class=\"n\">push_neg</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">push_neg</span> <span class=\"n\">at</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n  <span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">  h  : ∃ (x : X), f x ≠ 0</span>\n<span class=\"cm\">  h1 : ∃ (x : X), ¬f x = 0</span>\n<span class=\"cm\">  -/</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p><span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 226860507,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613674315
    },
    {
        "content": "<p>What is the <code>h</code> on this line? <a href=\"https://github.com/leanprover-community/mathlib/blob/5b579a2c3c3706e518dae73630c9397a5f7d900f/src/tactic/push_neg.lean#L148\">https://github.com/leanprover-community/mathlib/blob/5b579a2c3c3706e518dae73630c9397a5f7d900f/src/tactic/push_neg.lean#L148</a></p>",
        "id": 226860937,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1613674484
    },
    {
        "content": "<p>Yeah, that's very wrong...</p>",
        "id": 226861136,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1613674565
    },
    {
        "content": "<p>I think this was Patrick's first tactic, he wrote it two years ago! And it's more tactics than I've written :-)</p>",
        "id": 226867690,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613677093
    },
    {
        "content": "<p>It's an easy mistake to make and a very hard one to notice! Never causes a failure, and if you don't know it's supposed to change <code>¬f x = 0</code> to <code>f x ≠ 0</code> you'd never pick up on it.</p>",
        "id": 226869792,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1613677938
    },
    {
        "content": "<p>how unhygienic</p>",
        "id": 226872740,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1613679147
    }
]