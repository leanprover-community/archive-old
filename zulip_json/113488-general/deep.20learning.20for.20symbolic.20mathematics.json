[
    {
        "content": "<p>Lample Guillaume and Charton, Francois \"Deep Learning for Symbolic Mathematics\"  (<a href=\"https://arxiv.org/pdf/1912.01412.pdf\" target=\"_blank\" title=\"https://arxiv.org/pdf/1912.01412.pdf\">https://arxiv.org/pdf/1912.01412.pdf</a></p>",
        "id": 185657086,
        "sender_full_name": "Tim Daly",
        "timestamp": 1579048752
    },
    {
        "content": "<p>I didn't think this was possible and I was wrong. Now the question is, can similar techniques apply to Lean? They did have the advantage that they could generate large datasets because they could generate a random equation, differentiate it, and then know that the integral exists. I'm not sure how to generate \"random\" proofs.</p>",
        "id": 185657756,
        "sender_full_name": "Tim Daly",
        "timestamp": 1579049531
    },
    {
        "content": "<p>Their technique of Integerate(Diff(f(x),x)) also generates a lot of random test cases (fuzzing) useful for debugging. So if there was a similar hack for Lean then one could build a fuzz tester for Lean.</p>\n<p>The only thing I can think of is there is the idea of \"generate all proofs of length N\" (usually used for the idea of exhaustive search). I don't know how to generate proofs of length N though.</p>",
        "id": 185658084,
        "sender_full_name": "Tim Daly",
        "timestamp": 1579049994
    },
    {
        "content": "<p>If you consider the set of rules of some sequent calculus (like HOL's kernel), you can use them bottom-to-top as generators as if they were prolog rules, I think.<br>\nFrom</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mfrac><mrow><mi mathvariant=\"normal\">Γ</mi><mo separator=\"true\">,</mo><mi>A</mi><mo>⊢</mo><mi>B</mi></mrow><mrow><mi mathvariant=\"normal\">Γ</mi><mo>⊢</mo><mi>A</mi><mo>⇒</mo><mi>B</mi></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">\\cfrac{\\Gamma, A \\vdash B}{\\Gamma \\vdash A \\Rightarrow B}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:2.276em;vertical-align:-0.686em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.5899999999999999em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">Γ</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⊢</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord mathdefault\">A</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⇒</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05017em;\">B</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.74em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">Γ</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\">A</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⊢</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05017em;\">B</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span></span></span></span></span></span></span></p>\n<p>you can start with a formula <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>φ</mi></mrow><annotation encoding=\"application/x-tex\">\\varphi</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\">φ</span></span></span></span> and unify it with</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo>⇒</mo><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">A \\Rightarrow B</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">A</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⇒</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05017em;\">B</span></span></span></span></span></p>\n<p>and recursively unify <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">A</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">B</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05017em;\">B</span></span></span></span> with the conclusions of other rules?<br>\nI know it's doable at least for generating terms with ML-style polymorphic types, I've used that in the past for quickcheck stuff.</p>\n<p>For Lean you'd run the refiner \"in reverse\", in a similar way.</p>",
        "id": 185658500,
        "sender_full_name": "Simon Cruanes",
        "timestamp": 1579050451
    },
    {
        "content": "<p>In the paper they create a tree structure by moving the \"operator\" to the prefix position (e.g. 2 + 3 becomes (+ 2 3). So A \\Rightarrow B becomes (\\Rightarrow A B) in their generator. It should be possible to create a generator using that tree-method.</p>",
        "id": 185658846,
        "sender_full_name": "Tim Daly",
        "timestamp": 1579050862
    },
    {
        "content": "<p>The next hack would be to have a set of tactics that were exactly the rules in Lean. Then, when you generate a theorem (in the forward direction by creating a proof tree) you can look at the theorem and apply the tactics to reconstruct the proof.  Since you know the theorem is true, and you know the tactics cover the set of rules used to generate the proof, Lean should be able to (automatically?) prove the theorem.<br>\nMaybe. Possibly.</p>",
        "id": 185659173,
        "sender_full_name": "Tim Daly",
        "timestamp": 1579051257
    },
    {
        "content": "<p>Once you have a large enough training set then perhaps Lample and Charton can run their ML program on it and \"learn\" to prove.</p>",
        "id": 185659289,
        "sender_full_name": "Tim Daly",
        "timestamp": 1579051381
    },
    {
        "content": "<p>There's an interesting discussion on the paper of Lample and Charton in this sage-devel thread: <a href=\"https://groups.google.com/forum/#!topic/sage-devel/eXMbHpG3_oY\" target=\"_blank\" title=\"https://groups.google.com/forum/#!topic/sage-devel/eXMbHpG3_oY\">https://groups.google.com/forum/#!topic/sage-devel/eXMbHpG3_oY</a></p>\n<p>It links to a \"review\" by Ernest Davis on the arxiv: <a href=\"https://arxiv.org/abs/1912.05752\" target=\"_blank\" title=\"https://arxiv.org/abs/1912.05752\">https://arxiv.org/abs/1912.05752</a> and this blog post by Brent Baccala (featuring Axiom!): <a href=\"https://www.freesoft.org/blogs/soapbox/the-facebook-integral/\" target=\"_blank\" title=\"https://www.freesoft.org/blogs/soapbox/the-facebook-integral/\">https://www.freesoft.org/blogs/soapbox/the-facebook-integral/</a></p>",
        "id": 185723762,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1579110651
    },
    {
        "content": "<p>As for the integration paper, I think it is fascinating, but as others have pointed out, one needs to take the results with a some skepticism.  However, competing with highly engineered and optimized CAS systems will be a hard challenge.  I think the results are encouraging and they could have applications in speeding up and extending CAS systems.</p>\n<p>I think a more interesting application to this technique would be to find a mathematical domain (less studied than integration) where one direction of the problem is easy and the reverse direction is hard (but still someone with a lot of experience could often figure out the reverse answer from intuition, memory, and light reasoning), and verifying that the answer in the reverse direction is correct is fairly easy in practice.  It is possible that techniques like this could have a huge benefit.  However, I'm struggling to find good examples.</p>\n<p>As for using this on theorem proving, that would fit my description above (maybe), but it also seems like a particular challenging problem to expect an end-to-end sequence-to-sequence model to just work on anything but trivial cases.  (However, it might still be worth giving it a try!)  On a more techincal level, tactic proofs are not unique.  For example, <code>by simp</code> is the proof of a number of different goals.  Even <code>by refl</code> is not unique (but is quite common).  I haven't thought about it too much, but maybe some subset of the term language would suffice.  Of course, one could also try this out in other proof languages besides Lean where proofs uniquely specify their theorems (or where synthetic proofs can at least be easily generated from rules/axioms).  (Metamath, cut-free sequent calculi, hilbert-style deduction, tableau  calculus)</p>\n<p>Setting aside this exact method of Lample and Charton, I could also imagine generating synthetic proofs could be an important part of a synthetic method to train machine learning provers, especially combined with reinforcement learning.  Already the <a href=\"https://sites.google.com/view/holist/home\" target=\"_blank\" title=\"https://sites.google.com/view/holist/home\">DeepHOL/HOList work</a> and this <a href=\"https://openreview.net/forum?id=BJxiqxSYPB\" target=\"_blank\" title=\"https://openreview.net/forum?id=BJxiqxSYPB\">Metamath AI</a> augment their training data with synthetically generated theorems/proofs.  I could imagine an advanced system which has one agent whose goal is to generate realistic looking synthetic theorems/proofs which are then fed to another agent for training on them.</p>",
        "id": 185915040,
        "sender_full_name": "Jason Rute",
        "timestamp": 1579267422
    },
    {
        "content": "<blockquote>\n<p>I think a more interesting application to this technique would be to find a mathematical domain (less studied than integration) where one direction of the problem is easy and the reverse direction is hard (but still someone with a lot of experience could often figure out the reverse answer from intuition, memory, and light reasoning), and verifying that the answer in the reverse direction is correct is fairly easy in practice.  It is possible that techniques like this could have a huge benefit.  However, I'm struggling to find good examples.</p>\n</blockquote>\n<p>Factoring numbers or polynomials?</p>",
        "id": 185915821,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1579267996
    },
    {
        "content": "<p>Wow. I go away for a week and somebody finds Axiom in the wild. Sweet. I have been reviewing that paper and using their ideas for fuzz testing.</p>",
        "id": 186351249,
        "sender_full_name": "Tim Daly",
        "timestamp": 1579744833
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"115715\">@Jason Rute</span> You might find Axiom's Computer Algebra Test Suite (<a href=\"http://axiom-developer.org/axiom-website/CATS/index.html\" target=\"_blank\" title=\"http://axiom-developer.org/axiom-website/CATS/index.html\">http://axiom-developer.org/axiom-website/CATS/index.html</a>) which I've been constructing from publications.</p>",
        "id": 186351554,
        "sender_full_name": "Tim Daly",
        "timestamp": 1579745293
    },
    {
        "content": "<p>Wow. I watched those videos showing Facebook vs Axiom vs Sage. What a masterful presentation!</p>\n<p>Axiom's Risch algorithm is (I believe) the most complete implementation although there is still much to do. The algorithm was the work of Barry Trager and Manuel Bronstein.</p>\n<p>The take-away for Lean is that there are 2 branches of computational mathematics, proof systems and computer algebra. The computer algebra branch is fairly deep in several areas. Axiom uses group theory as scaffold to build algorithms like Risch. Lean also uses group theory as an underlying structure. I hope it will be possible to unify these two branches of computational mathematics so one can compute with trusted algorithms.</p>",
        "id": 186354170,
        "sender_full_name": "Tim Daly",
        "timestamp": 1579749438
    },
    {
        "content": "<p>The second video on the Risch Algorithm is deeply related to Algebraic Geometry.</p>",
        "id": 186355461,
        "sender_full_name": "Tim Daly",
        "timestamp": 1579751719
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"223495\">@Tim Daly</span> I have no clue what you mean with \"Lean also uses group theory as an underlying structure\".</p>",
        "id": 186367131,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1579767897
    }
]