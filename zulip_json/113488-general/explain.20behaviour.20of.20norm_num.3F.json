[
    {
        "content": "<p>In</p>\n<div class=\"codehilite\"><pre><span></span>import tactic.norm_num\n\nexample (n : ℕ) (h : n = max (max ⊥ 2) 3 + 1) : true :=\nbegin\n conv at h { norm_num, },\n trivial,\nend\n</pre></div>\n\n\n<p>The invocation of <code>norm_num</code> converts <code>max (max ⊥ 2) 3 + 1</code> to <code>1 + max 2 3</code>. Why? I really wish it would do a little more, and give me just <code>n = 4</code>.</p>",
        "id": 188846186,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1582427582
    },
    {
        "content": "<p><code>norm_num</code> doesn't know about <code>max</code>. Unfortunately it doesn't interact optimally with simp when it comes to applying conditional rewrite rules and proving the side conditions (like <code>a &lt;= b -&gt; max a b = b</code> in this case).</p>",
        "id": 188847222,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582429449
    },
    {
        "content": "<p>You should be able to explicitly rewrite with this and then use <code>norm_num</code> to prove the rest</p>",
        "id": 188847224,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582429490
    },
    {
        "content": "<p>Ah! I was confused how <code>norm_num</code> was doing anything, but of course it was just the internal call to <code>simp</code> that made progress.</p>",
        "id": 188850737,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1582435082
    },
    {
        "content": "<p>Hmm... so if I'm expecting to expressions which look like <code>max (max (max a b) c) d</code> to some arbitrary depth, and all arguments explicit <code>nat</code>s (or <code>int</code>s or something), what's the least effort simplifier?</p>",
        "id": 188850915,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1582435284
    },
    {
        "content": "<p>I think if you rewrite with <code>max</code>, it will unfold to the if definition, then norm_num will be able to simplify the target to true or false, then simp will make progress. So <code>norm_num [max]</code> should do the trick</p>",
        "id": 188851306,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582435849
    },
    {
        "content": "<p>oh... oops. I thought this was working, but it's not.</p>\n<div class=\"codehilite\"><pre><span></span>import tactic.norm_num\n\nexample (n : ℕ) (h : n = max (max ⊥ 2) 3 + 1) : true :=\nbegin\n conv at h { norm_num [max], },\n trivial,\nend\n</pre></div>\n\n\n<p>just gives <code>h : n = 1 + ite (2 ≤ 3) 3 2</code>.</p>",
        "id": 188853911,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1582440461
    },
    {
        "content": "<p>does <code>norm_num [max] at h</code> not work?</p>",
        "id": 188854315,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582441231
    },
    {
        "content": "<p>This works for me:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"err\">⊥</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n <span class=\"n\">norm_num</span> <span class=\"o\">[</span><span class=\"n\">max</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 188854381,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582441288
    },
    {
        "content": "<p>with <code>true</code> as the goal <code>simp</code> accidentally solves the goal</p>",
        "id": 188854417,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582441305
    },
    {
        "content": "<p>okay, using <code>norm_num [max] at h</code> does indeed work.</p>",
        "id": 188855949,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1582442093
    },
    {
        "content": "<p>I can work around <code>conv at h { norm_num [max] }</code> not working, but I do worry that that is a bug</p>",
        "id": 188855957,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1582442116
    },
    {
        "content": "<p>Using <code>conv at h {norm_num [max]}</code> repeatedly makes progress, so there must be something wrong with the repeat ending early</p>",
        "id": 188855959,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582442128
    }
]