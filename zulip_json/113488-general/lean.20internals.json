[
    {
        "content": "<p>Is there any good reference to learn how to elaborate implicit arguments to a coc like core? Like how lean does? I am trying to build a coc like language<br>\n<a href=\"http://godel.yellowflash.in/\" target=\"_blank\" title=\"http://godel.yellowflash.in/\">http://godel.yellowflash.in/</a><br>\nI want to introduce implicit arguments, I have some idea in my head but I couldn't put it down clearly, Its mostly based on resolution in simple basic types. But I have a feeling that it won't work</p>",
        "id": 123659092,
        "sender_full_name": "VinothKumar Raman",
        "timestamp": 1520955099
    },
    {
        "content": "<p>The idea is more like completely apply the explicit arguments and run unification of simple basic types to infer the missing arguments.</p>",
        "id": 123659153,
        "sender_full_name": "VinothKumar Raman",
        "timestamp": 1520955171
    },
    {
        "content": "<p>is godel your effort?</p>",
        "id": 123660760,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1520957810
    },
    {
        "content": "<blockquote>\n<p>The idea is more like completely apply the explicit arguments and run unification of simple basic types to infer the missing arguments.</p>\n</blockquote>\n<p>This is almost exactly how Lean's elaborator works.  Essentially you keep around a unification state (\"metavar_context\", basically a partial assignment of metavariables to expressions).  Now you go recursively through the pre-expression (abstract syntax tree, without implicit arguments) and convert it to an expression.  For every application you fill in the implicit arguments as metavariables, and solve the appropriate unfication constraints so that the application type-checks.  At the end, hopefully all metavariables are filled in and you can instantiate all metavariables in the produced expression.</p>",
        "id": 123661404,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1520958995
    },
    {
        "content": "<p>Except that <code>unification of simple basic types</code> is more like first-order unification + several pages of heuristics.</p>",
        "id": 123661424,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1520959034
    },
    {
        "content": "<blockquote>\n<p>is godel your effort?</p>\n</blockquote>\n<p>Yea it is my effort. I read a bit about COC and built it</p>",
        "id": 123693401,
        "sender_full_name": "VinothKumar Raman",
        "timestamp": 1521016776
    },
    {
        "content": "<p>I was reading a bit about the unification on COC. Some claim it <code>might</code> be undecidable. But it seem really possible to have implicit arguments and really decide on it right? I don't understand how it could be undecidable.</p>",
        "id": 123693506,
        "sender_full_name": "VinothKumar Raman",
        "timestamp": 1521017030
    },
    {
        "content": "<p>Higher order unification is undecidable</p>",
        "id": 123693552,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1521017077
    },
    {
        "content": "<p>What kind of heuristics does lean use? Is it in general not decidable? Is there any reference to read about tha?</p>",
        "id": 123693553,
        "sender_full_name": "VinothKumar Raman",
        "timestamp": 1521017080
    },
    {
        "content": "<p>Lean doesn't do full higher order unification, it uses a few simpler strategies and mostly sticks to first order unification</p>",
        "id": 123693572,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1521017119
    },
    {
        "content": "<p>So lean's type checking is guaranteed to terminate? I have a noob question, does making the type checking semi-decidable, affects the soundness in any way?</p>",
        "id": 123693872,
        "sender_full_name": "VinothKumar Raman",
        "timestamp": 1521017659
    },
    {
        "content": "<p>Lean's typechecker is guaranteed to halt, but is not complete - some definitional equalities will not be discovered by the typechecker, and it is impossible for it to do so without becoming undecidable.</p>",
        "id": 123694088,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1521018036
    },
    {
        "content": "<p>The guarantee is of soundness only - if lean verifies a type derivation, then it is correct, but it may error on a correct type derivation</p>",
        "id": 123694112,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1521018090
    },
    {
        "content": "<p>So its also possible to take the alternate route to have soundness intact by doing a higher order unification, which might not halt but if it did its correct type derivation.</p>",
        "id": 123694184,
        "sender_full_name": "VinothKumar Raman",
        "timestamp": 1521018179
    },
    {
        "content": "<p>Thanks, I would read about higher order unification, Is <code>Huet</code> algorithm the only one?</p>",
        "id": 123694194,
        "sender_full_name": "VinothKumar Raman",
        "timestamp": 1521018223
    },
    {
        "content": "<p>Note that unification is irrelevant to type checking; there is no unifier in the kernel</p>",
        "id": 123694261,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1521018342
    },
    {
        "content": "<p>it is definitional equality itself that is undecidable, due to some complications with subsingleton elimination and proof irrelevance</p>",
        "id": 123694309,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1521018382
    },
    {
        "content": "<p>If the core language doesnt have the notion of <code>implicit</code> how do you know that certain arguments are marked implicit?</p>",
        "id": 123694328,
        "sender_full_name": "VinothKumar Raman",
        "timestamp": 1521018457
    },
    {
        "content": "<p>The actual type of expressions <code>expr</code> has an annotation field on lambda and pi that marks implicitness, but the kernel ignores it</p>",
        "id": 123694381,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1521018501
    },
    {
        "content": "<p>unification and implicit parameters are all the domain of the elaborator, which is a giant untrusted piece of code</p>",
        "id": 123694411,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1521018577
    },
    {
        "content": "<p>Ah it makes sense. I have one more trivial question which I faced <br>\nHow do you rewrite <code>definition x = y</code> where <code>x</code> is not annotated with type to some <code>(\\x:A,Z)y</code>?</p>",
        "id": 123694416,
        "sender_full_name": "VinothKumar Raman",
        "timestamp": 1521018596
    },
    {
        "content": "<p>I don't quite follow your notation</p>",
        "id": 123694467,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1521018636
    },
    {
        "content": "<p>are you asking how to infer the type of an expression <code>y</code>?</p>",
        "id": 123694478,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1521018667
    },
    {
        "content": "<p>so any <code>let x = y in z</code> can be rewritten to <code>(\\lambda x, z) y</code> so definition is very similar to let right?</p>",
        "id": 123694488,
        "sender_full_name": "VinothKumar Raman",
        "timestamp": 1521018696
    },
    {
        "content": "<p>a definition doesn't have a scope</p>",
        "id": 123694534,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1521018725
    },
    {
        "content": "<p>also <code>let</code> is not the same as a lambda application</p>",
        "id": 123694536,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1521018736
    },
    {
        "content": "<p>But how do you rewrite your definitions to core calculus with just lambda abstraction, when you dont have type annotation</p>",
        "id": 123694538,
        "sender_full_name": "VinothKumar Raman",
        "timestamp": 1521018740
    },
    {
        "content": "<p>there is a type annotation</p>",
        "id": 123694546,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1521018766
    },
    {
        "content": "<p>the syntax is <code>let x : t := p in e</code></p>",
        "id": 123694555,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1521018788
    },
    {
        "content": "<p><code>definition x = y</code> is allowed right? Not just <code>definition x: z = y</code> right?</p>",
        "id": 123694561,
        "sender_full_name": "VinothKumar Raman",
        "timestamp": 1521018800
    },
    {
        "content": "<p>That type annotation is not optional?</p>",
        "id": 123694572,
        "sender_full_name": "VinothKumar Raman",
        "timestamp": 1521018836
    },
    {
        "content": "<p>no, it's only <code>def x : t := e</code>. If you leave out the <code>t</code> it is inferred and filled in</p>",
        "id": 123694573,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1521018837
    },
    {
        "content": "<p>So elaborator runs type checking before it turns to core calculus?</p>",
        "id": 123694617,
        "sender_full_name": "VinothKumar Raman",
        "timestamp": 1521018862
    },
    {
        "content": "<p>Many type annotations are \"optional\" in the sense that you don't have to write them, but they are inserted by the elaborator</p>",
        "id": 123694623,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1521018868
    },
    {
        "content": "<p>I was thinking elaborator writes out a new lambda term in the core calculus and type checking is completely different step.</p>",
        "id": 123694640,
        "sender_full_name": "VinothKumar Raman",
        "timestamp": 1521018916
    },
    {
        "content": "<p>the parser produces a <code>pexpr</code>, this is a representation that roughly follows the AST of the user's input, all missing type information is absent, and the elaborator inserts metavariables in the holes, performs unification, and results an <code>expr</code> that has all type information filled in</p>",
        "id": 123694646,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1521018952
    },
    {
        "content": "<p>After this is done, the expr is sent to the kernel where it is typechecked (again, since the elaborator also has a typechecker that does other stuff on the side)</p>",
        "id": 123694699,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1521018998
    },
    {
        "content": "<p>Its not very linear as I imagined it to be.</p>",
        "id": 123694710,
        "sender_full_name": "VinothKumar Raman",
        "timestamp": 1521019029
    },
    {
        "content": "<p>I think I understand the complexity very well now after trying to implement one :)</p>",
        "id": 123694719,
        "sender_full_name": "VinothKumar Raman",
        "timestamp": 1521019070
    },
    {
        "content": "<p>Writing an elaborator is no joke</p>",
        "id": 123694756,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1521019083
    },
    {
        "content": "<p>There is no concrete theory to it? Like lambda calculus substitution.</p>",
        "id": 123694770,
        "sender_full_name": "VinothKumar Raman",
        "timestamp": 1521019139
    },
    {
        "content": "<p>That's what the kernel does</p>",
        "id": 123694777,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1521019157
    },
    {
        "content": "<p>Its very messy in lot of ways.</p>",
        "id": 123694780,
        "sender_full_name": "VinothKumar Raman",
        "timestamp": 1521019165
    },
    {
        "content": "<p>I mean the elaborator doesnt have concrete theory?</p>",
        "id": 123694789,
        "sender_full_name": "VinothKumar Raman",
        "timestamp": 1521019189
    },
    {
        "content": "<p>Parts of it do, I'm sure</p>",
        "id": 123694835,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1521019203
    },
    {
        "content": "<p>like the first order unification algorithm is pretty well understood at this point</p>",
        "id": 123694851,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1521019223
    },
    {
        "content": "<p>Yea, I tried implementing first order unification on simple basic types with <code>let</code> polymorphism once<br>\n<a href=\"https://github.com/yellowflash/hindley\" target=\"_blank\" title=\"https://github.com/yellowflash/hindley\">https://github.com/yellowflash/hindley</a></p>",
        "id": 123694863,
        "sender_full_name": "VinothKumar Raman",
        "timestamp": 1521019266
    },
    {
        "content": "<p>Most of the complication has to do with when to unfold definitions, I think</p>",
        "id": 123694864,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1521019268
    },
    {
        "content": "<p>Its was super clear</p>",
        "id": 123694865,
        "sender_full_name": "VinothKumar Raman",
        "timestamp": 1521019274
    },
    {
        "content": "<p>But definitions are normalizing right? Which mean you could find normal form and unify them</p>",
        "id": 123694915,
        "sender_full_name": "VinothKumar Raman",
        "timestamp": 1521019333
    },
    {
        "content": "<p>lol sure if you want to wait until the end of the universe</p>",
        "id": 123694916,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1521019351
    },
    {
        "content": "<p>Ah wait, I understand. It could go both directions on beta reduction</p>",
        "id": 123694917,
        "sender_full_name": "VinothKumar Raman",
        "timestamp": 1521019354
    },
    {
        "content": "<p>DTT \"terminates\", but it's not remotely practical</p>",
        "id": 123694920,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1521019370
    },
    {
        "content": "<p>so there are lots of heuristics for when to unfold something</p>",
        "id": 123694929,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1521019403
    },
    {
        "content": "<p>Oh ok</p>",
        "id": 123695033,
        "sender_full_name": "VinothKumar Raman",
        "timestamp": 1521019572
    }
]