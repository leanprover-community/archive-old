[
    {
        "content": "<p>Where can I find documentation on <code>@[congr]</code> attribute? (a) what lemmas can/should be marked as <code>@[congr]</code>? (b) what tactics use <code>@[congr]</code>?</p>",
        "id": 186857292,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1580275385
    },
    {
        "content": "<p>E.g., I found out that the first theorem below can't be <code>@[congr]</code> while the second one can.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">maps_to_congr</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hfg</span> <span class=\"o\">:</span> <span class=\"n\">eq_on</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">maps_to</span> <span class=\"n\">f</span> <span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"bp\">↔</span> <span class=\"n\">maps_to</span> <span class=\"n\">g</span> <span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">congr</span><span class=\"o\">]</span> <span class=\"kn\">theorem</span> <span class=\"n\">maps_to_congr&#39;</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hfg</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">maps_to</span> <span class=\"n\">f</span> <span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"bp\">↔</span> <span class=\"n\">maps_to</span> <span class=\"n\">g</span> <span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span>\n</pre></div>",
        "id": 186857366,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1580275505
    },
    {
        "content": "<p>(c, related to b) should I care about this attribute?</p>",
        "id": 186857433,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1580275570
    },
    {
        "content": "<p>The <code>congr</code> attribute is used by the simplifier.  If you call <code>simp</code> on <code>maps_to some_function s t</code> after you have declared <code>maps_to_congr'</code>, then <code>simp</code> will recursively call itself on <code>some_function x</code>,  instead of <code>some_function</code> without the congruence lemma.  If <code>some_function</code> is a lambda, then it doesn't make a difference since the simplifier will automatically apply funext to recurse under lambdas.</p>",
        "id": 186867119,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1580289021
    }
]