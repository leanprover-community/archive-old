[
    {
        "content": "<p>Do we have a better way to do</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"err\">∩</span> <span class=\"n\">b</span> <span class=\"err\">∩</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"err\">∩</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"err\">∩</span> <span class=\"n\">b</span> <span class=\"err\">∩</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">ext</span> <span class=\"n\">x</span> <span class=\"bp\">;</span> <span class=\"n\">split</span> <span class=\"bp\">;</span> <span class=\"n\">finish</span>\n</pre></div>",
        "id": 129031496,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1530633376
    },
    {
        "content": "<p>Of course I'm not asking for the magic sequence of rewrite, I want Lean to figure it out.</p>",
        "id": 129031518,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1530633416
    },
    {
        "content": "<p>It would be nice if there was. I run into something similar with conjunction  (e.g. <code>a ∧ b ∧ (a ∧ c) = a ∧ b ∧ c</code>) all the time.</p>",
        "id": 129068018,
        "sender_full_name": "Sean Leather",
        "timestamp": 1530686630
    },
    {
        "content": "<p>does <code>cc</code> help?</p>",
        "id": 129068883,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1530687652
    },
    {
        "content": "<p>no</p>",
        "id": 129073167,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1530694235
    },
    {
        "content": "<p>A related question is: can anyone bring <a href=\"https://leanprover.github.io/programming_in_lean/#09_Writing_Automation.html\" target=\"_blank\" title=\"https://leanprover.github.io/programming_in_lean/#09_Writing_Automation.html\">https://leanprover.github.io/programming_in_lean/#09_Writing_Automation.html</a> up to date with current Lean?</p>",
        "id": 129083986,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1530709546
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110045\">@Sean Leather</span> for <code>a ∧ b ∧ (a ∧ c) ↔ a ∧ b ∧ c</code>, <code>tauto</code> works.</p>",
        "id": 129086682,
        "sender_full_name": "Reid Barton",
        "timestamp": 1530712877
    },
    {
        "content": "<p>Yeah, that may be true for that example. But I've run into others where <code>tauto</code> didn't work.</p>",
        "id": 129086756,
        "sender_full_name": "Sean Leather",
        "timestamp": 1530712985
    },
    {
        "content": "<p>Yes, <code>tauto</code> is good at failing frustratingly close to the goal</p>",
        "id": 129086829,
        "sender_full_name": "Reid Barton",
        "timestamp": 1530713049
    },
    {
        "content": "<p><code>true</code><span class=\"emoji emoji-2757\" title=\"exclamation\">:exclamation:</span></p>",
        "id": 129086836,
        "sender_full_name": "Sean Leather",
        "timestamp": 1530713070
    },
    {
        "content": "<blockquote>\n<p>Yes, <code>tauto</code> is good at failing frustratingly close to the goal</p>\n</blockquote>\n<p>Excellent, that's what I wrote it for</p>",
        "id": 129090032,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1530716691
    },
    {
        "content": "<p>But seriously, any examples of what it can't handle?</p>",
        "id": 129090080,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1530716755
    },
    {
        "content": "<p>as alluded to above, <code>example (p : Prop) : p ∧ true ↔ p := by tauto</code></p>",
        "id": 129090724,
        "sender_full_name": "Reid Barton",
        "timestamp": 1530717420
    },
    {
        "content": "<p>Somewhat less trivially, I often find it gets stuck needing to prove <code>a = b</code> when <code>b = a</code> is available as a hypothesis</p>",
        "id": 129090747,
        "sender_full_name": "Reid Barton",
        "timestamp": 1530717472
    },
    {
        "content": "<p>The latter should be getting better. <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> recently submitted a patch to consider the symmetry of relations in <code>solve_by_elim</code> which <code>tauto</code> uses.</p>",
        "id": 129090994,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1530717816
    },
    {
        "content": "<p>As for the first, <code>true</code> is probably the culprit. That's an easy fix, I can submit a PR right away</p>",
        "id": 129091055,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1530717890
    },
    {
        "content": "<p>While I'm at it, I'll also take care of <code>false</code> in the assumptions.</p>",
        "id": 129091070,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1530717918
    },
    {
        "content": "<p>Done: <a href=\"https://github.com/leanprover/mathlib/pull/175\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/pull/175\">https://github.com/leanprover/mathlib/pull/175</a></p>",
        "id": 129091736,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1530718770
    },
    {
        "content": "<p>Simon, what is the relation between this <code>tauto</code> and <a href=\"https://leanprover.github.io/programming_in_lean/#09_Writing_Automation.html\" target=\"_blank\" title=\"https://leanprover.github.io/programming_in_lean/#09_Writing_Automation.html\">https://leanprover.github.io/programming_in_lean/#09_Writing_Automation.html</a> Would you be able to update the later?</p>",
        "id": 129091823,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1530718877
    },
    {
        "content": "<p>I haven't looked closely but that should be doable.</p>",
        "id": 129092168,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1530719341
    },
    {
        "content": "<p>I'll take a look</p>",
        "id": 129092252,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1530719407
    },
    {
        "content": "<p>By the way, don't despair, I haven't forgotten your request for tutorials</p>",
        "id": 129092447,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1530719684
    },
    {
        "content": "<p>I'm preparing a talk about Lean tactics that I'll give at the DeepSpec summer school. That should be the seed for a useful tutorial</p>",
        "id": 129092479,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1530719720
    },
    {
        "content": "<p>Nice!</p>",
        "id": 129092537,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1530719768
    },
    {
        "content": "<p>I think I'll present the <code>transportable</code> problem that <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> brought in a few months ago</p>",
        "id": 129092543,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1530719778
    },
    {
        "content": "<p>+1 from me -- as I've probably said 100 times, this is something which mathematicians do subconsciously.</p>",
        "id": 129093692,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1530721344
    },
    {
        "content": "<p>(And that is <em>subconsciously</em>, with big fat capital letters <span class=\"emoji emoji-1f609\" title=\"wink\">:wink:</span>)</p>",
        "id": 129094956,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1530723264
    },
    {
        "content": "<p>Reid:</p>\n<blockquote>\n<p>Somewhat less trivially, I often find it gets stuck needing to prove <code>a = b</code> when <code>b = a</code> is available as a hypothesis</p>\n</blockquote>\n<p>Same here! That's the main reason I gave up on using <code>tauto</code>.</p>\n<p>Simon:</p>\n<blockquote>\n<p>The latter should be getting better. Scott Morrison recently submitted a patch to consider the symmetry of relations in <code>solve_by_elim</code> which <code>tauto</code> uses.</p>\n</blockquote>\n<p>Cool. I'll have to try it out again.</p>",
        "id": 129120435,
        "sender_full_name": "Sean Leather",
        "timestamp": 1530770978
    },
    {
        "content": "<p>Also, Mario merged my PR today. The one thing <code>tauto</code> doesn't do well still is proving disjunction. I didn't want to do back tracking out of fear that it would get slow but maybe I should do it anyway</p>",
        "id": 129121112,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1530772208
    },
    {
        "content": "<p>Here is what I can currently do on this topic:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"err\">∩</span> <span class=\"n\">b</span> <span class=\"err\">∩</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"err\">∩</span> <span class=\"n\">b</span> <span class=\"err\">∩</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">simp_inter</span>\n\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"err\">∩</span> <span class=\"n\">b</span> <span class=\"err\">∩</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"err\">∩</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">simp_inter</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"err\">∩</span> <span class=\"n\">b</span> <span class=\"err\">∩</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"err\">∩</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"err\">∩</span> <span class=\"n\">b</span> <span class=\"err\">∩</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">simp_inter</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">a</span> <span class=\"err\">∩</span> <span class=\"n\">b</span> <span class=\"err\">∩</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">simp_inter</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">a</span> <span class=\"err\">∩</span> <span class=\"n\">b</span> <span class=\"err\">∩</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">b</span> <span class=\"err\">∩</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">simp_inter</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h&#39;</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h&#39;&#39;</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">b</span> <span class=\"err\">∩</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">simp_inter</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">a</span> <span class=\"bp\">→</span>  <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">b</span> <span class=\"bp\">→</span>  <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">b</span> <span class=\"err\">∩</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">simp_inter</span>\n</pre></div>",
        "id": 129145707,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1530805036
    },
    {
        "content": "<p>This is based on the <code>destruct_conjunctions</code> tactic from PIL and then poor's man tactic writing</p>",
        "id": 129145771,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1530805095
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">open</span> <span class=\"n\">tactic</span> <span class=\"n\">monad</span> <span class=\"n\">expr</span>\n<span class=\"c\">/-</span><span class=\"cm\">- Recursively destructs all hypotheses that are conjunctions. From programming in Lean. -/</span>\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">destruct_conjunctions</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">repeat</span> <span class=\"o\">(</span><span class=\"n\">do</span>\n  <span class=\"n\">l</span> <span class=\"err\">←</span> <span class=\"n\">local_context</span><span class=\"o\">,</span>\n  <span class=\"n\">first</span> <span class=\"err\">$</span> <span class=\"n\">l</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">do</span>\n    <span class=\"n\">ht</span> <span class=\"err\">←</span> <span class=\"n\">infer_type</span> <span class=\"n\">h</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">whnf</span><span class=\"o\">,</span>\n    <span class=\"k\">match</span> <span class=\"n\">ht</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">and</span> <span class=\"err\">%%</span><span class=\"n\">a</span> <span class=\"err\">%%</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">do</span>\n      <span class=\"n\">n</span> <span class=\"err\">←</span> <span class=\"n\">get_unused_name</span> <span class=\"bp\">`</span><span class=\"n\">h</span> <span class=\"n\">none</span><span class=\"o\">,</span>\n      <span class=\"n\">mk_mapp</span> <span class=\"bp\">``</span><span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">left</span> <span class=\"o\">[</span><span class=\"n\">none</span><span class=\"o\">,</span> <span class=\"n\">none</span><span class=\"o\">,</span> <span class=\"n\">some</span> <span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">assertv</span> <span class=\"n\">n</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n      <span class=\"n\">n</span> <span class=\"err\">←</span> <span class=\"n\">get_unused_name</span> <span class=\"bp\">`</span><span class=\"n\">h</span> <span class=\"n\">none</span><span class=\"o\">,</span>\n      <span class=\"n\">mk_mapp</span> <span class=\"bp\">``</span><span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">right</span> <span class=\"o\">[</span><span class=\"n\">none</span><span class=\"o\">,</span> <span class=\"n\">none</span><span class=\"o\">,</span> <span class=\"n\">some</span> <span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">assertv</span> <span class=\"n\">n</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n      <span class=\"n\">clear</span> <span class=\"n\">h</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"n\">failed</span>\n    <span class=\"kn\">end</span><span class=\"o\">))</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">- Simplify proving intersection and conjunctions goals -/</span>\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">simp_inter</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"bp\">`</span><span class=\"o\">[</span>  <span class=\"n\">destruct_conjunctions</span><span class=\"o\">,</span>\n    <span class=\"n\">try</span> <span class=\"o\">{</span> <span class=\"n\">ext</span> <span class=\"o\">}</span> <span class=\"bp\">;</span> <span class=\"n\">try</span> <span class=\"o\">{</span> <span class=\"n\">split</span> <span class=\"o\">}</span> <span class=\"bp\">;</span> <span class=\"n\">try</span> <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"o\">}</span><span class=\"bp\">;</span> <span class=\"n\">destruct_conjunctions</span><span class=\"o\">,</span>\n    <span class=\"n\">all_goals</span> <span class=\"o\">{</span> <span class=\"n\">repeat</span> <span class=\"o\">{</span> <span class=\"n\">split</span> <span class=\"o\">}</span> <span class=\"bp\">;</span> <span class=\"n\">assumption</span> <span class=\"o\">}]</span>\n</pre></div>",
        "id": 129145780,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1530805109
    },
    {
        "content": "<p>Any cleaner and more general way to do this is welcome <span class=\"emoji emoji-1f609\" title=\"wink\">:wink:</span></p>",
        "id": 129145791,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1530805129
    },
    {
        "content": "<p>Note that all examples below should really be solved by the general purpose <code>come_on</code> tactic.</p>",
        "id": 129145823,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1530805185
    },
    {
        "content": "<p>Haha! Have you tried <code>tauto</code> since Mario merged my PR yesterday?</p>",
        "id": 129145893,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1530805246
    },
    {
        "content": "<p>No. I thought you only changed stuff is <code>true</code> or <code>false</code> appears explicitly.</p>",
        "id": 129146378,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1530805783
    },
    {
        "content": "<p>I'm upgrading</p>",
        "id": 129146385,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1530805792
    },
    {
        "content": "<p>In your case, it should already work, you're right</p>",
        "id": 129146505,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1530805882
    },
    {
        "content": "<p>but recently, there's been added support for symmetric relations and <code>true</code> and <code>false</code> appearing in formulas</p>",
        "id": 129146519,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1530805910
    },
    {
        "content": "<p><code>tauto</code> solves none of my examples</p>",
        "id": 129146827,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1530806244
    },
    {
        "content": "<p>even with updated mathlib</p>",
        "id": 129146833,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1530806253
    },
    {
        "content": "<p>and with <code>ext; tauto</code>?</p>",
        "id": 129146933,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1530806398
    },
    {
        "content": "<p>no luck</p>",
        "id": 129147034,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1530806468
    },
    {
        "content": "<p>you can try my examples, they depend on nothing else but mathlib</p>",
        "id": 129147044,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1530806483
    },
    {
        "content": "<p>Ok got it</p>",
        "id": 129147374,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1530806790
    },
    {
        "content": "<p>first <code>import data.set.basic</code>. That's where set extensionality is declared</p>",
        "id": 129147387,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1530806811
    },
    {
        "content": "<p>Next:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"err\">∩</span> <span class=\"n\">b</span> <span class=\"err\">∩</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"err\">∩</span> <span class=\"n\">b</span> <span class=\"err\">∩</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">ext</span><span class=\"bp\">;</span> <span class=\"n\">dsimp</span><span class=\"bp\">;</span> <span class=\"n\">tauto</span>\n\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"err\">∩</span> <span class=\"n\">b</span> <span class=\"err\">∩</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"err\">∩</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">ext</span><span class=\"bp\">;</span> <span class=\"n\">dsimp</span><span class=\"bp\">;</span> <span class=\"n\">tauto</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"err\">∩</span> <span class=\"n\">b</span> <span class=\"err\">∩</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"err\">∩</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"err\">∩</span> <span class=\"n\">b</span> <span class=\"err\">∩</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">ext</span><span class=\"bp\">;</span> <span class=\"n\">dsimp</span><span class=\"bp\">;</span> <span class=\"n\">tauto</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">a</span> <span class=\"err\">∩</span> <span class=\"n\">b</span> <span class=\"err\">∩</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">dsimp</span> <span class=\"n\">at</span> <span class=\"bp\">*;</span> <span class=\"n\">tauto</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">a</span> <span class=\"err\">∩</span> <span class=\"n\">b</span> <span class=\"err\">∩</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">b</span> <span class=\"err\">∩</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">dsimp</span> <span class=\"n\">at</span> <span class=\"bp\">*;</span> <span class=\"n\">tauto</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h&#39;</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h&#39;&#39;</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">b</span> <span class=\"err\">∩</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">dsimp</span> <span class=\"n\">at</span> <span class=\"bp\">*;</span> <span class=\"n\">tauto</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">a</span> <span class=\"bp\">→</span>  <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">b</span> <span class=\"bp\">→</span>  <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">b</span> <span class=\"err\">∩</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">dsimp</span> <span class=\"n\">at</span> <span class=\"bp\">*;</span> <span class=\"n\">tauto</span>\n</pre></div>",
        "id": 129147402,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1530806826
    },
    {
        "content": "<p>Unfortunately, you need to unfold set notation for <code>tauto</code> to work</p>",
        "id": 129147417,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1530806847
    },
    {
        "content": "<p>And I'm not sure that adding <code>dsimp</code> to <code>tauto</code> would be a good idea.</p>",
        "id": 129147498,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1530806951
    },
    {
        "content": "<p>What I could do is match on hypotheses and goal using definitional equality instead of pattern matching</p>",
        "id": 129147588,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1530807067
    },
    {
        "content": "<p>Then the first proof would become:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">by</span> <span class=\"n\">ext</span><span class=\"bp\">;</span> <span class=\"n\">tauto</span>\n</pre></div>\n\n\n<p>I'm wondering if that would make <code>auto</code> slower. Maybe we could enable this feature with <code>tauto!</code></p>",
        "id": 129147667,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1530807161
    },
    {
        "content": "<p>(In French, that would sound like you're insulting someone, with the exclamation mark)</p>",
        "id": 129147699,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1530807234
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I managed to add support for disjunction but it requires <code>tactic.interactive</code> to import <code>logic.basic</code>. I think the creation of <code>tactic.cache</code> would fix that situation. Should I submit that change in a separate PR? (separate from the traversable PR) If you need more time to review the traversable PR, I think that would be a good way to move forward</p>",
        "id": 129148500,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1530808078
    },
    {
        "content": "<p>It does look like one could define </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">come_one</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">try</span> <span class=\"o\">{</span> <span class=\"n\">ext</span> <span class=\"bp\">;</span> <span class=\"n\">dsimp</span> <span class=\"n\">at</span> <span class=\"bp\">*;</span> <span class=\"n\">tauto</span><span class=\"o\">},</span> <span class=\"n\">try</span> <span class=\"o\">{</span> <span class=\"n\">dsimp</span> <span class=\"n\">at</span> <span class=\"bp\">*;</span> <span class=\"n\">tauto</span><span class=\"o\">}]</span>\n</pre></div>\n\n\n<p>or something like this. It looks much better, thanks!</p>",
        "id": 129150374,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1530810274
    },
    {
        "content": "<p>:) At your service</p>",
        "id": 129150498,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1530810453
    },
    {
        "content": "<p>I would advise you to call it <code>COME_ON</code>. And you may want to add three exclamation marks, to communicate impatience ;-)</p>",
        "id": 129150550,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1530810501
    },
    {
        "content": "<p>Consider:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">COME_ON</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"o\">(</span><span class=\"n\">tk</span> <span class=\"s2\">&quot;!&quot;</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</pre></div>",
        "id": 129150584,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1530810556
    },
    {
        "content": "<p>The version is used currently is at <a href=\"https://github.com/PatrickMassot/lean-differential-topology/blob/master/src/tactic/easy.lean\" target=\"_blank\" title=\"https://github.com/PatrickMassot/lean-differential-topology/blob/master/src/tactic/easy.lean\">https://github.com/PatrickMassot/lean-differential-topology/blob/master/src/tactic/easy.lean</a> It passes both the tests I had for <code>simp_inter</code> and the <code>tauto</code> tests from mathlib.</p>",
        "id": 129161526,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1530821632
    },
    {
        "content": "<p>Oh, it doesn't work in my real use case :(</p>",
        "id": 129161810,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1530821907
    },
    {
        "content": "<p><code>failed to prove recursive application is decreasing, well founded relation</code></p>",
        "id": 129161817,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1530821919
    },
    {
        "content": "<p>Do you have a <code>_let_match</code> or similar in the tactic state?</p>",
        "id": 129162109,
        "sender_full_name": "Reid Barton",
        "timestamp": 1530822183
    },
    {
        "content": "<p>I don't know what is similar to <code>_let_match</code> since I have no idea what it means</p>",
        "id": 129162191,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1530822272
    },
    {
        "content": "<p>The full error is:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">prove</span> <span class=\"n\">recursive</span> <span class=\"n\">application</span> <span class=\"n\">is</span> <span class=\"n\">decreasing</span><span class=\"o\">,</span> <span class=\"n\">well</span> <span class=\"n\">founded</span> <span class=\"n\">relation</span>\n  <span class=\"bp\">@</span><span class=\"n\">has_well_founded</span><span class=\"bp\">.</span><span class=\"n\">r</span>\n    <span class=\"o\">(</span><span class=\"err\">Σ&#39;</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">smooth_compatible</span> <span class=\"n\">X</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"n\">φ</span> <span class=\"n\">ψ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">smooth_compatible</span> <span class=\"n\">X</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"n\">ψ</span> <span class=\"n\">φ</span><span class=\"o\">),</span>\n       <span class=\"bp\">@</span><span class=\"n\">smooth_compatible</span> <span class=\"n\">X</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"n\">ψ</span> <span class=\"n\">χ</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_well_founded_of_has_sizeof</span>\n       <span class=\"o\">(</span><span class=\"err\">Σ&#39;</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">smooth_compatible</span> <span class=\"n\">X</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"n\">φ</span> <span class=\"n\">ψ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">smooth_compatible</span> <span class=\"n\">X</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"n\">ψ</span> <span class=\"n\">φ</span><span class=\"o\">),</span>\n          <span class=\"bp\">@</span><span class=\"n\">smooth_compatible</span> <span class=\"n\">X</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"n\">ψ</span> <span class=\"n\">χ</span><span class=\"o\">)</span>\n       <span class=\"o\">(</span><span class=\"n\">default_has_sizeof</span>\n          <span class=\"o\">(</span><span class=\"err\">Σ&#39;</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">smooth_compatible</span> <span class=\"n\">X</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"n\">φ</span> <span class=\"n\">ψ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">smooth_compatible</span> <span class=\"n\">X</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"n\">ψ</span> <span class=\"n\">φ</span><span class=\"o\">),</span>\n             <span class=\"bp\">@</span><span class=\"n\">smooth_compatible</span> <span class=\"n\">X</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"n\">ψ</span> <span class=\"n\">χ</span><span class=\"o\">)))</span>\n<span class=\"n\">Possible</span> <span class=\"n\">solutions</span><span class=\"o\">:</span>\n  <span class=\"bp\">-</span> <span class=\"n\">Use</span> <span class=\"err\">&#39;</span><span class=\"n\">using_well_founded&#39;</span> <span class=\"n\">keyword</span> <span class=\"k\">in</span> <span class=\"n\">the</span> <span class=\"kn\">end</span> <span class=\"n\">of</span> <span class=\"n\">your</span> <span class=\"kn\">definition</span> <span class=\"n\">to</span> <span class=\"n\">specify</span> <span class=\"n\">tactics</span> <span class=\"n\">for</span> <span class=\"n\">synthesizing</span> <span class=\"n\">well</span> <span class=\"n\">founded</span> <span class=\"n\">relations</span> <span class=\"n\">and</span> <span class=\"n\">decreasing</span> <span class=\"n\">proofs</span><span class=\"bp\">.</span>\n  <span class=\"bp\">-</span> <span class=\"n\">The</span> <span class=\"n\">default</span> <span class=\"n\">decreasing</span> <span class=\"n\">tactic</span> <span class=\"n\">uses</span> <span class=\"n\">the</span> <span class=\"err\">&#39;</span><span class=\"n\">assumption&#39;</span> <span class=\"n\">tactic</span><span class=\"o\">,</span> <span class=\"n\">thus</span> <span class=\"n\">hints</span> <span class=\"o\">(</span><span class=\"n\">aka</span> <span class=\"n\">local</span> <span class=\"n\">proofs</span><span class=\"o\">)</span> <span class=\"n\">can</span> <span class=\"n\">be</span> <span class=\"n\">provided</span> <span class=\"kn\">using</span> <span class=\"err\">&#39;</span><span class=\"k\">have</span><span class=\"err\">&#39;</span><span class=\"bp\">-</span><span class=\"n\">expressions</span><span class=\"bp\">.</span>\n<span class=\"n\">The</span> <span class=\"n\">nested</span> <span class=\"n\">exception</span> <span class=\"n\">contains</span> <span class=\"n\">the</span> <span class=\"n\">failure</span> <span class=\"n\">state</span> <span class=\"n\">for</span> <span class=\"n\">the</span> <span class=\"n\">decreasing</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span>\n<span class=\"n\">nested</span> <span class=\"n\">exception</span> <span class=\"n\">message</span><span class=\"o\">:</span>\n<span class=\"n\">invalid</span> <span class=\"n\">apply</span> <span class=\"n\">tactic</span><span class=\"o\">,</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">unify</span>\n  <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span>\n<span class=\"k\">with</span>\n  <span class=\"err\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">&lt;</span> <span class=\"err\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">+</span> <span class=\"err\">?</span><span class=\"n\">m_2</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">inhabited</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n<span class=\"n\">φ</span> <span class=\"n\">ψ</span> <span class=\"n\">χ</span> <span class=\"o\">:</span> <span class=\"n\">chart</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n<span class=\"n\">open_triple_intersection</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"err\">Σ&#39;</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">smooth_compatible</span> <span class=\"n\">φ</span> <span class=\"n\">ψ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">smooth_compatible</span> <span class=\"n\">ψ</span> <span class=\"n\">φ</span><span class=\"o\">),</span> <span class=\"n\">smooth_compatible</span> <span class=\"n\">ψ</span> <span class=\"n\">χ</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n  <span class=\"n\">is_open</span> <span class=\"o\">(</span><span class=\"err\">⇑</span><span class=\"n\">φ</span> <span class=\"err\">&#39;&#39;</span> <span class=\"o\">(</span><span class=\"n\">φ</span><span class=\"bp\">.</span><span class=\"n\">domain</span> <span class=\"err\">∩</span> <span class=\"n\">ψ</span><span class=\"bp\">.</span><span class=\"n\">domain</span> <span class=\"err\">∩</span> <span class=\"n\">χ</span><span class=\"bp\">.</span><span class=\"n\">domain</span><span class=\"o\">)),</span>\n<span class=\"n\">op_φ_ψ</span> <span class=\"o\">:</span> <span class=\"n\">is_open_intersection</span> <span class=\"n\">φ</span> <span class=\"n\">ψ</span><span class=\"o\">,</span>\n<span class=\"n\">smooth_φ_ψ</span> <span class=\"o\">:</span> <span class=\"n\">is_smooth_transition</span> <span class=\"n\">φ</span> <span class=\"n\">ψ</span><span class=\"o\">,</span>\n<span class=\"n\">op_ψ_φ</span> <span class=\"o\">:</span> <span class=\"n\">is_open_intersection</span> <span class=\"n\">ψ</span> <span class=\"n\">φ</span><span class=\"o\">,</span>\n<span class=\"n\">smooth_ψ_φ</span> <span class=\"o\">:</span> <span class=\"n\">is_smooth_transition</span> <span class=\"n\">ψ</span> <span class=\"n\">φ</span><span class=\"o\">,</span>\n<span class=\"n\">op_ψ_χ</span> <span class=\"o\">:</span> <span class=\"n\">is_open_intersection</span> <span class=\"n\">ψ</span> <span class=\"n\">χ</span><span class=\"o\">,</span>\n<span class=\"n\">smooth_ψ_χ</span> <span class=\"o\">:</span> <span class=\"n\">is_smooth_transition</span> <span class=\"n\">ψ</span> <span class=\"n\">χ</span><span class=\"o\">,</span>\n<span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n<span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">smooth_compatible</span> <span class=\"n\">φ</span> <span class=\"n\">ψ</span><span class=\"o\">,</span>\n<span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">smooth_compatible</span> <span class=\"n\">ψ</span> <span class=\"n\">φ</span><span class=\"o\">,</span>\n<span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">smooth_compatible</span> <span class=\"n\">ψ</span> <span class=\"n\">χ</span>\n<span class=\"err\">⊢</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span>\n</pre></div>",
        "id": 129162291,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1530822389
    },
    {
        "content": "<p>Replacing <code>meta def easy : tactic unit := `[try { ext } , try { dsimp at * }, all_goals { tauto }]</code> by <code>meta def easy : tactic unit := `[try { ext } , try { dsimp }, all_goals { tauto }]</code> make it work in this case but fail in others. Somehow the <code>try</code> is not enough to prevent the error.</p>",
        "id": 129162377,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1530822495
    },
    {
        "content": "<p>Well-foundedness is only checked at the end of the proof I believe which means that it won't make individual tactics fail.</p>",
        "id": 129162807,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1530822992
    },
    {
        "content": "<p>You may just need to add a <code>have : _ &lt; _, from _</code> expression to state and prove that some quantity decreases in your recursive function</p>",
        "id": 129162845,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1530823052
    },
    {
        "content": "<p>I don't have any recursive function</p>",
        "id": 129162858,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1530823077
    },
    {
        "content": "<p>I have no idea what Lean is talking about</p>",
        "id": 129162902,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1530823092
    },
    {
        "content": "<p>Can you show the goal prior to calling the tactic? There might be a way of saying \"I'm not trying to bring in the curse of recursion\"</p>",
        "id": 129162947,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1530823139
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">inhabited</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n<span class=\"n\">φ</span> <span class=\"n\">ψ</span> <span class=\"n\">χ</span> <span class=\"o\">:</span> <span class=\"n\">chart</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n<span class=\"n\">open_triple_intersection</span> <span class=\"o\">:</span>\n  <span class=\"n\">smooth_compatible</span> <span class=\"n\">φ</span> <span class=\"n\">ψ</span> <span class=\"bp\">→</span>\n  <span class=\"n\">smooth_compatible</span> <span class=\"n\">ψ</span> <span class=\"n\">φ</span> <span class=\"bp\">→</span> <span class=\"n\">smooth_compatible</span> <span class=\"n\">ψ</span> <span class=\"n\">χ</span> <span class=\"bp\">→</span> <span class=\"n\">is_open</span> <span class=\"o\">(</span><span class=\"err\">⇑</span><span class=\"n\">φ</span> <span class=\"err\">&#39;&#39;</span> <span class=\"o\">(</span><span class=\"n\">φ</span><span class=\"bp\">.</span><span class=\"n\">domain</span> <span class=\"err\">∩</span> <span class=\"n\">ψ</span><span class=\"bp\">.</span><span class=\"n\">domain</span> <span class=\"err\">∩</span> <span class=\"n\">χ</span><span class=\"bp\">.</span><span class=\"n\">domain</span><span class=\"o\">)),</span>\n<span class=\"n\">op_φ_ψ</span> <span class=\"o\">:</span> <span class=\"n\">is_open_intersection</span> <span class=\"n\">φ</span> <span class=\"n\">ψ</span><span class=\"o\">,</span>\n<span class=\"n\">smooth_φ_ψ</span> <span class=\"o\">:</span> <span class=\"n\">is_smooth_transition</span> <span class=\"n\">φ</span> <span class=\"n\">ψ</span><span class=\"o\">,</span>\n<span class=\"n\">op_ψ_φ</span> <span class=\"o\">:</span> <span class=\"n\">is_open_intersection</span> <span class=\"n\">ψ</span> <span class=\"n\">φ</span><span class=\"o\">,</span>\n<span class=\"n\">smooth_ψ_φ</span> <span class=\"o\">:</span> <span class=\"n\">is_smooth_transition</span> <span class=\"n\">ψ</span> <span class=\"n\">φ</span><span class=\"o\">,</span>\n<span class=\"n\">op_ψ_χ</span> <span class=\"o\">:</span> <span class=\"n\">is_open_intersection</span> <span class=\"n\">ψ</span> <span class=\"n\">χ</span><span class=\"o\">,</span>\n<span class=\"n\">smooth_ψ_χ</span> <span class=\"o\">:</span> <span class=\"n\">is_smooth_transition</span> <span class=\"n\">ψ</span> <span class=\"n\">χ</span><span class=\"o\">,</span>\n<span class=\"n\">op</span> <span class=\"o\">:</span> <span class=\"n\">is_open</span> <span class=\"o\">(</span><span class=\"err\">⇑</span><span class=\"n\">ψ</span> <span class=\"err\">&#39;&#39;</span> <span class=\"o\">(</span><span class=\"n\">ψ</span><span class=\"bp\">.</span><span class=\"n\">domain</span> <span class=\"err\">∩</span> <span class=\"n\">φ</span><span class=\"bp\">.</span><span class=\"n\">domain</span> <span class=\"err\">∩</span> <span class=\"n\">χ</span><span class=\"bp\">.</span><span class=\"n\">domain</span><span class=\"o\">)),</span>\n<span class=\"n\">this</span> <span class=\"o\">:</span> <span class=\"err\">⇑</span><span class=\"n\">ψ</span> <span class=\"err\">&#39;&#39;</span> <span class=\"o\">(</span><span class=\"n\">ψ</span><span class=\"bp\">.</span><span class=\"n\">domain</span> <span class=\"err\">∩</span> <span class=\"n\">φ</span><span class=\"bp\">.</span><span class=\"n\">domain</span> <span class=\"err\">∩</span> <span class=\"n\">χ</span><span class=\"bp\">.</span><span class=\"n\">domain</span><span class=\"o\">)</span> <span class=\"err\">⊆</span> <span class=\"err\">⇑</span><span class=\"n\">ψ</span> <span class=\"err\">&#39;&#39;</span> <span class=\"o\">(</span><span class=\"n\">ψ</span><span class=\"bp\">.</span><span class=\"n\">domain</span> <span class=\"err\">∩</span> <span class=\"n\">φ</span><span class=\"bp\">.</span><span class=\"n\">domain</span><span class=\"o\">),</span>\n<span class=\"n\">op</span> <span class=\"o\">:</span> <span class=\"n\">is_open</span> <span class=\"o\">(</span><span class=\"n\">transition</span> <span class=\"n\">ψ</span> <span class=\"n\">φ</span> <span class=\"err\">&#39;&#39;</span> <span class=\"o\">(</span><span class=\"err\">⇑</span><span class=\"n\">ψ</span> <span class=\"err\">&#39;&#39;</span> <span class=\"o\">(</span><span class=\"n\">ψ</span><span class=\"bp\">.</span><span class=\"n\">domain</span> <span class=\"err\">∩</span> <span class=\"n\">φ</span><span class=\"bp\">.</span><span class=\"n\">domain</span> <span class=\"err\">∩</span> <span class=\"n\">χ</span><span class=\"bp\">.</span><span class=\"n\">domain</span><span class=\"o\">))),</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span>\n  <span class=\"n\">transition</span> <span class=\"n\">ψ</span> <span class=\"n\">φ</span> <span class=\"err\">&#39;&#39;</span> <span class=\"o\">(</span><span class=\"err\">⇑</span><span class=\"n\">ψ</span> <span class=\"err\">&#39;&#39;</span> <span class=\"o\">(</span><span class=\"n\">ψ</span><span class=\"bp\">.</span><span class=\"n\">domain</span> <span class=\"err\">∩</span> <span class=\"n\">φ</span><span class=\"bp\">.</span><span class=\"n\">domain</span> <span class=\"err\">∩</span> <span class=\"n\">χ</span><span class=\"bp\">.</span><span class=\"n\">domain</span><span class=\"o\">))</span> <span class=\"bp\">=</span>\n    <span class=\"err\">⇑</span><span class=\"n\">φ</span> <span class=\"err\">&#39;&#39;</span> <span class=\"o\">(</span><span class=\"n\">ψ</span><span class=\"bp\">.</span><span class=\"n\">domain</span> <span class=\"err\">∩</span> <span class=\"n\">φ</span><span class=\"bp\">.</span><span class=\"n\">domain</span> <span class=\"err\">∩</span> <span class=\"n\">χ</span><span class=\"bp\">.</span><span class=\"n\">domain</span><span class=\"o\">)</span>\n<span class=\"err\">⊢</span> <span class=\"n\">ψ</span><span class=\"bp\">.</span><span class=\"n\">domain</span> <span class=\"err\">∩</span> <span class=\"n\">φ</span><span class=\"bp\">.</span><span class=\"n\">domain</span> <span class=\"err\">∩</span> <span class=\"n\">χ</span><span class=\"bp\">.</span><span class=\"n\">domain</span> <span class=\"bp\">=</span> <span class=\"n\">φ</span><span class=\"bp\">.</span><span class=\"n\">domain</span> <span class=\"err\">∩</span> <span class=\"n\">ψ</span><span class=\"bp\">.</span><span class=\"n\">domain</span> <span class=\"err\">∩</span> <span class=\"n\">χ</span><span class=\"bp\">.</span><span class=\"n\">domain</span>\n</pre></div>",
        "id": 129162972,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1530823173
    },
    {
        "content": "<p>Is the lemma that you're trying to prove  <code>open_triple_intersection</code>? If so, try <code>clear open_triple_intersection</code> before calling the tactic.</p>",
        "id": 129163052,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1530823239
    },
    {
        "content": "<p>Note that <code>ext, dsimp, tauto</code> works here, but I want a tactic which also works when you need to <code>dsimp</code> something from context</p>",
        "id": 129163058,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1530823244
    },
    {
        "content": "<p>Indeed, this is what I'm proving</p>",
        "id": 129163081,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1530823308
    },
    {
        "content": "<p>and clearing this works</p>",
        "id": 129163083,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1530823313
    },
    {
        "content": "<p>WTF?</p>",
        "id": 129163084,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1530823318
    },
    {
        "content": "<p>Is it because I have pattern matching?</p>",
        "id": 129163128,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1530823339
    },
    {
        "content": "<p><a href=\"https://github.com/PatrickMassot/lean-differential-topology/blob/master/src/manifold.lean#L185\" target=\"_blank\" title=\"https://github.com/PatrickMassot/lean-differential-topology/blob/master/src/manifold.lean#L185\">https://github.com/PatrickMassot/lean-differential-topology/blob/master/src/manifold.lean#L185</a></p>",
        "id": 129163133,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1530823352
    },
    {
        "content": "<p>Indeed</p>",
        "id": 129163174,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1530823407
    },
    {
        "content": "<p>If I remove the matching  and start with </p>\n<div class=\"codehilite\"><pre><span></span>  <span class=\"n\">intros</span> <span class=\"n\">h</span> <span class=\"n\">h&#39;</span> <span class=\"n\">h&#39;&#39;</span><span class=\"o\">,</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span><span class=\"n\">op_φ_ψ</span><span class=\"o\">,</span> <span class=\"n\">smooth_φ_ψ</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">h&#39;</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span><span class=\"n\">op_ψ_φ</span><span class=\"o\">,</span> <span class=\"n\">smooth_ψ_φ</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">h&#39;&#39;</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span><span class=\"n\">op_ψ_χ</span><span class=\"o\">,</span> <span class=\"n\">smooth_ψ_χ</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n</pre></div>\n\n\n<p>Then <code>easy</code> works</p>",
        "id": 129163191,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1530823435
    },
    {
        "content": "<p>Do you understand what happens?</p>",
        "id": 129163245,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1530823462
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>  We really need a hybrid of <code>intros</code> and <code>rcases</code> that would allow writing <code>intros ⟨op_φ_ψ, smooth_φ_ψ⟩ ⟨op_ψ_φ, smooth_ψ_φ⟩ ⟨op_ψ_χ, smooth_ψ_χ⟩</code></p>",
        "id": 129163297,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1530823533
    },
    {
        "content": "<p>instead of the four lines of the previous code block</p>",
        "id": 129163310,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1530823552
    },
    {
        "content": "<p>The situation is that pattern matching and recursion are rooted in the same machinery</p>",
        "id": 129163364,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1530823566
    },
    {
        "content": "<p>When you pattern match, Lean gives you the opportunity to make a recursive call. It gives you more than you need and once you're done with the proof, it checks whether you introduced recursion / induction and makes sure that it's well-founded</p>",
        "id": 129163423,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1530823634
    },
    {
        "content": "<p>Tactics don't see the difference between assumptions that are in fact a recursive call and the rest</p>",
        "id": 129163442,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1530823656
    },
    {
        "content": "<p>Thanks</p>",
        "id": 129163950,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1530824167
    },
    {
        "content": "<p>I'll forget about matching and patiently wait for <code>rintros</code> to land in mathlib.</p>",
        "id": 129163980,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1530824210
    },
    {
        "content": "<p>And I'll go sleeping.</p>",
        "id": 129164000,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1530824240
    },
    {
        "content": "<p>You could do something like <code>clear_rec</code> that you call after pattern matching</p>",
        "id": 129164449,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1530824774
    },
    {
        "content": "<blockquote>\n<p>I managed to add support for disjunction but it requires tactic.interactive to import logic.basic. I think the creation of tactic.cache would fix that situation. Should I submit that change in a separate PR? (separate from the traversable PR) If you need more time to review the traversable PR, I think that would be a good way to move forward</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> I think this is a good idea. Splitting up the different unrelated parts will make it easier to merge things</p>",
        "id": 129183277,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1530855411
    },
    {
        "content": "<p>Nice, I hadn't thought of it that way but we'll kill two birds with one stone. I can pull a few more PRs from <code>traversable</code></p>",
        "id": 129183346,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1530855585
    },
    {
        "content": "<p>What's your opinion about using lemmas in tactics that require predicates to be decidable? Would you just let it fail if some predicate is not decidable or would you silently use <code>prop_decidable</code>?</p>",
        "id": 129183658,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1530856093
    },
    {
        "content": "<p>Depends on the use case. I think <code>by_cases</code> will fail, but adding <code>prop_decidable</code> as a local instance fixes this, so this seems sufficiently flexible</p>",
        "id": 129183777,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1530856328
    },
    {
        "content": "<p>That's straightforward. With <code>tauto</code>, <code>decidable</code> constraints can come from a lot of different sources and become relevant without obvious reasons</p>",
        "id": 129183969,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1530856767
    },
    {
        "content": "<p>It would be nice if the tactic reports the decidability problem in the error, that way the user can decide what to do about it</p>",
        "id": 129184379,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1530857427
    },
    {
        "content": "<p>That's true. Unfortunately, <code>tauto</code> can keep going for a while once it has failed to find a <code>decidable</code> instance</p>",
        "id": 129184508,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1530857656
    },
    {
        "content": "<p>I'm thinking that <code>tauto!</code> could add <code>prop_decidable</code> as a local instance right from the start. Then when you're not sure why <code>tauto</code> failed, you can try that and move on.</p>",
        "id": 129184704,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1530858066
    },
    {
        "content": "<blockquote>\n<p>I'll forget about matching and patiently wait for <code>rintros</code> to land in mathlib.</p>\n</blockquote>\n<p>Your wish is my command...</p>",
        "id": 129187322,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1530862705
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Tag, you're it! <a href=\"https://github.com/leanprover/mathlib/pull/178\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/pull/178\">https://github.com/leanprover/mathlib/pull/178</a></p>",
        "id": 129187353,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1530862801
    },
    {
        "content": "<p>I love that! My next wish is you answer my Wednesday email <span class=\"emoji emoji-1f609\" title=\"wink\">:wink:</span></p>",
        "id": 129187470,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1530862931
    },
    {
        "content": "<p>And I'm sure this <code>rintro</code> tactic will soon be all over the place.</p>",
        "id": 129187481,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1530862970
    },
    {
        "content": "<p>What is this <code>rintro</code> thing?</p>",
        "id": 129187492,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1530862997
    }
]