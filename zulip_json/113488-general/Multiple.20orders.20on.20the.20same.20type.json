[
    {
        "content": "<p>Say, I have a type like <code>fin n → ℕ</code> and want to work with two different partial orders (say, the product order and the lexicographic order) on this type at the same time (e.g., to prove that <code>a ≤prod b</code> implies <code>a ≤lex b</code> [fixed this]). Is there a recommended way of doing this?</p>",
        "id": 298609581,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1663082567
    },
    {
        "content": "<p>Probably it is best to use a type synonym.</p>",
        "id": 298610002,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1663082682
    },
    {
        "content": "<p>I guess the default one is the product order?</p>",
        "id": 298610009,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1663082684
    },
    {
        "content": "<p>Does <a href=\"https://leanprover-community.github.io/mathlib_docs/find/lex\">docs#lex</a> lead to a useful type synonym?</p>",
        "id": 298610077,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1663082702
    },
    {
        "content": "<p>And maybe <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pi.to_lex_monotone\">docs#pi.to_lex_monotone</a>?</p>",
        "id": 298612395,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1663083343
    },
    {
        "content": "<p>If <code>n</code> is non-zero, then there is also <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finsupp.lex\">docs#finsupp.lex</a> which may or may not be better to use!  <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 298612559,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1663083396
    },
    {
        "content": "<p>Oh wait, Damiano, did you introduce a new type synonym rather than using <code>lex (α →₀ β)</code>?</p>",
        "id": 298613372,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1663083643
    },
    {
        "content": "<p>I did.  I thought that the one you had for <code>pi</code> used some <code>wf</code> stuff that was not needed for the one on <code>finsupp</code>.  Maybe this is a wrong reason?</p>",
        "id": 298613570,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1663083717
    },
    {
        "content": "<blockquote>\n<p>a ≤lex b implies a ≤prod b</p>\n</blockquote>\n<p>Backwards?</p>\n<p>In case you really want relations on the same type: in e.g. <a href=\"https://leanprover-community.github.io/mathlib_docs/find/prod.rprod_sub_lex\">docs#prod.rprod_sub_lex</a> the relations are referred to explicitly; you may declare local notation for them for convenience. Instead of using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_le.le_trans\">docs#has_le.le_trans</a> etc. you may have to use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_trans.trans\">docs#is_trans.trans</a> from a <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_partial_order\">docs#is_partial_order</a> instance.</p>",
        "id": 298613947,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1663083811
    },
    {
        "content": "<blockquote>\n<p><code>lex (α →₀ β)</code></p>\n</blockquote>\n<p>What does this even mean? Which <code>lex</code> makes this type check?</p>",
        "id": 298614170,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1663083868
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/lex\">docs#lex</a> is a general type synonym. <code>lex (Π i, α i)</code> is the lexicographic pi type, and I meant <code>lex (ι →₀ α)</code> to mean the lexicographic finite supported functions.</p>",
        "id": 298614235,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1663083889
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/113488-general/topic/Multiple.20orders.20on.20the.20same.20type/near/298612559\">said</a>:</p>\n<blockquote>\n<p>If <code>n</code> is non-zero, then there is also <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finsupp.lex\">docs#finsupp.lex</a> which may or may not be better to use!  <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>\n</blockquote>\n<p>Why <code>n</code> nonzero makes a difference for whether to use <code>pi</code> or <code>finsupp</code>? I think if n=0 both <code>pi.lex</code> and <code>finsupp.lex</code> are not reflexive.</p>",
        "id": 298614367,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1663083930
    },
    {
        "content": "<p>The point of a single type synonym is that you can carry over everything you don't care about. You don't want to write <a href=\"https://github.com/leanprover-community/mathlib/pull/16122\">#16122</a> for each lexicographic type synonym <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 298614545,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1663083973
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224323\">@Junyan Xu</span>  I just wanted to point out that <code>fin n -&gt; anything</code> is automatically a finsupp only when <code>n = 0</code>.</p>\n<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span>  maybe I can remove the <code>finsupp.lex</code> definition.  Is this what you are saying?</p>",
        "id": 298614616,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1663083997
    },
    {
        "content": "<p>Hmm, it's automatically a <code>finsupp</code> for all <code>n</code> because <code>fin n</code> is always a <code>fintype</code>, right?</p>",
        "id": 298614870,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1663084077
    },
    {
        "content": "<p>Also <code>fin 0</code>?</p>",
        "id": 298615106,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1663084154
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/finsupp.equiv_fun_on_fintype\">docs#finsupp.equiv_fun_on_fintype</a> (a bit hard to find!)</p>",
        "id": 298615193,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1663084182
    },
    {
        "content": "<p>I know that I am always confused about this... <code>fin 0</code> is empty, while <code>zmod 0</code> is <code>int</code>?</p>",
        "id": 298615245,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1663084196
    },
    {
        "content": "<p>Ok, my last comment makes sense.  Yes, <code>fin n</code> should always be a fintype!</p>",
        "id": 298615381,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1663084233
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/113488-general/topic/Multiple.20orders.20on.20the.20same.20type/near/298614616\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span>  maybe I can remove the <code>finsupp.lex</code> definition.  Is this what you are saying?</p>\n</blockquote>\n<p>Should we use <code>lex</code> for <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pi.lex\">docs#pi.lex</a> as well?</p>",
        "id": 298615455,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1663084257
    },
    {
        "content": "<p>Ok, so <code>lex</code> is a \"blanket\" synonym, that will have all the whatever-<code>lex</code>-order-you-can-think-of instances, right?</p>",
        "id": 298615719,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1663084338
    },
    {
        "content": "<p>What I actually have is a preorder on <code>fin n → ℕ</code> obtained by pulling back a partial order under a map and the product order. I just want to be able to talk about both of them. Right now, I define</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">weight</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">fin</span> <span class=\"n\">n.succ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">weight</span> <span class=\"n\">n</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">blah</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n<span class=\"kd\">instance</span> <span class=\"n\">preorder</span> <span class=\"o\">:</span> <span class=\"n\">preorder</span> <span class=\"o\">(</span><span class=\"n\">weight</span> <span class=\"n\">n</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">preorder.lift</span> <span class=\"n\">f</span>\n<span class=\"kd\">infix</span> <span class=\"bp\">`</span> <span class=\"bp\">≤</span><span class=\"n\">d</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">has_le.le</span> <span class=\"o\">(</span><span class=\"n\">weight</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">_</span>\n<span class=\"kd\">infix</span> <span class=\"bp\">`</span> <span class=\"bp\">≤</span><span class=\"n\">c</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">has_le.le</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">_</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"n\">_</span>\n</code></pre></div>\n<p>This allows me to use notation for the two different (pre)orders. But in the infoview, both are just printed as <code>≤</code>, which can be confusing.</p>",
        "id": 298616130,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1663084476
    },
    {
        "content": "<p>Oh wait, it turns out we are already using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/lex\">docs#lex</a> for the type carrying pi.lex and finsupp.lex. pi.lex and finsupp.lex operate on the relations instead. Sorry for the confusion!</p>",
        "id": 298616788,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1663084689
    },
    {
        "content": "<p>Yes, I got confused as well.  I did not introduce a new type synonym, I introduced the <em>relation</em> <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finsupp.lex\">docs#finsupp.lex</a>, analogous to the <em>relation</em> <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pi.lex\">docs#pi.lex</a> as an instance on the same type synonym <a href=\"https://leanprover-community.github.io/mathlib_docs/find/lex\">docs#lex</a>.</p>\n<p>This and <code>fin 0</code> caused a short circuit in my brain!</p>",
        "id": 298625008,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1663087335
    },
    {
        "content": "<p>Ah great! That's what I was hoping for.</p>",
        "id": 298638811,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1663092194
    },
    {
        "content": "<p>After having derailed Michael's question, let me go back to it.</p>\n<p>I think that it will be clearer, in the long run, to have the two instances defined on <em>different-but-synonymous</em> types.  In your case, the two types are <code>fin n.succ → ℕ</code> and <code>weight n</code>.</p>\n<p>You have one Type <code>X</code> with its order and a copy of <code>X</code> like your <code>weight n</code> with the other order.  You give names to the identity maps to <code>weight n</code> and from <code>weight n</code> and you pretend that they are different.  You then prove lemmas about monotonicity of these maps (like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pi.to_lex.monotone\">docs#pi.to_lex.monotone</a>) or whatever you want to prove.  It is a little laborious, but having two orders on the same type is ultimately very confusing.</p>\n<p>It is possible that the notation can help to avoid this, especially if you only need very limited interaction between the types.  But anything more substantial will likely be easier with type synonyms with different order instances.</p>",
        "id": 298650048,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1663096237
    }
]