[
    {
        "content": "<p>Is there some way to prevent the <code>rw</code>, <code>simp</code>, <code>unfload</code>, <code>conv</code> mode, and other tactics like this from closing the goal automatically? E.g. here it is closed by <code>rw</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">5</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">h₁</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I know that I can use <code>change</code>, or <code>dsimp</code> like below if x is a constant. But that does not work in the above example.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"mi\">5</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">5</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">change</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">5</span> <span class=\"k\">with</span> <span class=\"mi\">5</span> <span class=\"bp\">=</span> <span class=\"mi\">5</span><span class=\"o\">,</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Sometimes I just want to look at the effectively solved statement that is trivially true, to better understand why it actually is now true (in these examples it is of course completely obvious but if the statement is more complex it might not be that easy).</p>",
        "id": 262318779,
        "sender_full_name": "Johannes C. Mayer",
        "timestamp": 1637588109
    },
    {
        "content": "<p>You could write your own <code>rw'</code> tactic which does <code>rw</code> but doesn't try <code>refl</code> at the end! This is what I did in the natural number game. But basically yours is a very minority use case -- most people just want to close goals quickly.</p>",
        "id": 262327715,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1637592271
    },
    {
        "content": "<p>Ah, ok thanks. I might look into that. I was wondering why it works differently in the natural number game.</p>",
        "id": 262336993,
        "sender_full_name": "Johannes C. Mayer",
        "timestamp": 1637596246
    },
    {
        "content": "<p>NNG is Lean for beginners. mathlib is Lean in expert mode :-)</p>",
        "id": 262345693,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1637599689
    }
]