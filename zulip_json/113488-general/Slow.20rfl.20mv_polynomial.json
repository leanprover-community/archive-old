[
    {
        "content": "<p>This <code>rfl</code> lemma is extremely slow, but commenting out <code>import data.mv_polynomial.comm_ring</code> or changing <code>R</code> to a <code>comm_semiring</code> really speeds it up. Is there a bad instance somewhere or something? I think <code>mv_polynomial.comm_ring</code> might be a bad instance.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">H</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">mv_polynomial</span> <span class=\"o\">(</span><span class=\"n\">option</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"n\">R</span> <span class=\"bp\">≃ₐ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">polynomial</span> <span class=\"o\">(</span><span class=\"n\">mv_polynomial</span> <span class=\"n\">ι</span> <span class=\"n\">R</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">mv_polynomial</span> <span class=\"o\">(</span><span class=\"n\">option</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">option_equiv_left</span> <span class=\"n\">R</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"n\">option_equiv_left</span> <span class=\"n\">R</span> <span class=\"n\">ι</span> <span class=\"o\">:</span>\n    <span class=\"n\">mv_polynomial</span> <span class=\"o\">(</span><span class=\"n\">option</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"n\">R</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">polynomial</span> <span class=\"o\">(</span><span class=\"n\">mv_polynomial</span> <span class=\"n\">ι</span> <span class=\"n\">R</span><span class=\"o\">))</span>\n    <span class=\"o\">:</span> <span class=\"n\">mv_polynomial</span> <span class=\"o\">(</span><span class=\"n\">option</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"n\">R</span> <span class=\"bp\">→+*</span> <span class=\"n\">polynomial</span> <span class=\"o\">(</span><span class=\"n\">mv_polynomial</span> <span class=\"n\">ι</span> <span class=\"n\">R</span><span class=\"o\">))</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"n\">rfl</span>\n</code></pre></div>\n<p>Changing the definition of <code>mv_polynomial.comm_ring</code> to </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">comm_ring</span> <span class=\"o\">(</span><span class=\"n\">mv_polynomial</span> <span class=\"n\">σ</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"bp\">..</span><span class=\"n\">mv_polynomial.comm_semiring</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span><span class=\"n\">add_monoid_algebra.comm_ring</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>from </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">comm_ring</span> <span class=\"o\">(</span><span class=\"n\">mv_polynomial</span> <span class=\"n\">σ</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">add_monoid_algebra.comm_ring</span>\n</code></pre></div>\n<p>seems to fix it. Is this a change we should make, and is there anywhere else this sort of change could be made.</p>",
        "id": 253287840,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1631639743
    },
    {
        "content": "<p>I guess your version speeds up unification of the ring and comm_ring by preventing the unfolding taking the wrong path</p>",
        "id": 253291344,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631641009
    },
    {
        "content": "<p>We should probably repeat the changes made by <a href=\"https://github.com/leanprover-community/mathlib/issues/7421\">#7421</a> for <code>mv_polynomial</code>.</p>",
        "id": 253340232,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1631662520
    },
    {
        "content": "<p>Or for the reals by <a href=\"https://github.com/leanprover-community/mathlib/issues/6024\">#6024</a></p>",
        "id": 253341594,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1631663420
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> What do you think about making <code>mv_polynomial</code> a wrapper around finsupp with irreducible ring operations? Did it solve these sorts of problems for <code>polynomial</code> or <code>real</code>?</p>",
        "id": 253439018,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1631721615
    },
    {
        "content": "<p>I think that ship is already sailing and that refactor is probably inevitable (eventually), it's just a lot of work</p>",
        "id": 253439821,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631721845
    },
    {
        "content": "<p>From a selfish point of view I'd probably like to get <a href=\"https://github.com/leanprover-community/mathlib/issues/8913\">#8913</a> in before such a refactor happens</p>",
        "id": 253440640,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631722132
    },
    {
        "content": "<p>With this refactor you won't be able to apply lemmas about <code>finsupp</code>/<code>add_monoid_algebra</code> anymore.</p>",
        "id": 253658159,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1631829909
    },
    {
        "content": "<p>Or rather, you'll have to \"copy them across\" to <code>mv_polynomial</code> before it gets marked irreducible.</p>",
        "id": 253678817,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1631844516
    },
    {
        "content": "<p>AFAIR, \"define, prove, make irreducible\" is not available in Lean 4, so we try not to use it in mathlib. I may be wrong.</p>",
        "id": 253678869,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1631844582
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> See this comment <a href=\"https://github.com/leanprover-community/mathlib/pull/6024#discussion_r569734573\">https://github.com/leanprover-community/mathlib/pull/6024#discussion_r569734573</a> You can effectively make it irreducible by wrapping it inside an inductive type. This is how the reals and polynomials are now implmented.</p>",
        "id": 253745246,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1631886790
    }
]