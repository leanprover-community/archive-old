[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Do you mean something like this?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">meta</span> <span class=\"kn\">structure</span> <span class=\"n\">well_founded_tactics</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">rel_tac</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">apply_instance</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">dec_tac</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">assumption</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 197140378,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589201579
    },
    {
        "content": "<p>For some reason that breaks <code>gcd</code>, so I had to add the last line to</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">gcd</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"n\">nat</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span>        <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">y</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"k\">have</span> <span class=\"n\">y</span> <span class=\"err\">%</span> <span class=\"n\">succ</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">succ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">mod_lt</span> <span class=\"bp\">_</span> <span class=\"err\">$</span> <span class=\"n\">succ_pos</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n                <span class=\"n\">gcd</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"err\">%</span> <span class=\"n\">succ</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"n\">using_well_founded</span> <span class=\"o\">{</span> <span class=\"n\">dec_tac</span> <span class=\"o\">:=</span> <span class=\"n\">well_founded_tactics</span><span class=\"bp\">.</span><span class=\"n\">default_dec_tac</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 197140444,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589201614
    },
    {
        "content": "<p>Which I find confusing, because the <code>have</code> clause is there. What more does the system want?</p>",
        "id": 197140489,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589201636
    },
    {
        "content": "<p>I have no idea what is going on but can I just object on principle to having something called <code>default_dec_tac</code> which is not in fact the default value for <code>dec_tac</code></p>",
        "id": 197140644,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589201715
    },
    {
        "content": "<p>I guess you would rename <code>default_dec_tac</code></p>",
        "id": 197140693,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589201746
    },
    {
        "content": "<p>Sure... this is WIP</p>",
        "id": 197140794,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589201789
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I think the <code>def_replacer</code> approach is better. But can that be done in <code>core</code>?</p>",
        "id": 197140849,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589201820
    },
    {
        "content": "<p>The relation being used is lex well order on <code>Sigma' (x : nat), nat</code></p>",
        "id": 197235166,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589261152
    },
    {
        "content": "<p><code>default_dec_tac</code> was simplifying it to the simple lt on nat</p>",
        "id": 197235214,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589261175
    },
    {
        "content": "<p>the easy way to fix it is to take <code>y</code> out of the recursion, by writing</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">gcd</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"n\">nat</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span>        <span class=\"o\">:=</span> <span class=\"err\">\\</span><span class=\"n\">lam</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">y</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"err\">\\</span><span class=\"n\">lam</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"k\">have</span> <span class=\"n\">y</span> <span class=\"err\">%</span> <span class=\"n\">succ</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">succ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">mod_lt</span> <span class=\"bp\">_</span> <span class=\"err\">$</span> <span class=\"n\">succ_pos</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n                <span class=\"n\">gcd</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"err\">%</span> <span class=\"n\">succ</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 197235237,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589261228
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/well_founded_tactics/near/197140849\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> I think the <code>def_replacer</code> approach is better. But can that be done in <code>core</code>?</p>\n</blockquote>\n<p>Sure, the core of <code>def_replacer</code> is really simple, and most of the time I talk about using <code>def_replacer</code> I don't actually mean using the user command but rather the idea behind it, which is to use <code>get_attributes</code> to get an updated list of things from the future and <code>eval_expr</code> to call one of them</p>",
        "id": 197237597,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589264788
    },
    {
        "content": "<p>Hmmm, I'm not sure if I would know how to implement this. Also, it's probably better to wait a bit till the dust has settled down of all the other changes that are going on.</p>",
        "id": 197237964,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589265258
    },
    {
        "content": "<p>this can be implemented later without any mathlib breakage. I anticipate that mathlib will not change the default from <code>assumption</code>, and instead will explicitly call the tactic in individual definitions when needed. Changing the global default is only something that is likely to happen in third party projects</p>",
        "id": 197239398,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589266924
    },
    {
        "content": "<p>I had a go at removing <code>default_dec_tac</code> in <a href=\"https://github.com/leanprover-community/lean/compare/remove_dec_tac?expand=1\">a branch</a>. Is this something we still want as a precursor to removing the order structures? The core library and leanpkg now build, but I haven't tried triaging the 20 broken tests yet.</p>",
        "id": 198720933,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1590469442
    },
    {
        "content": "<p>Is this a dep for moving the order structures to mathlib? Whatever, I think it's good to do this anyway.</p>",
        "id": 198721122,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590469683
    },
    {
        "content": "<p>I haven't done any more work on this, but I opened a draft PR <a href=\"https://github.com/leanprover-community/lean/issues/288\">lean#288</a>.</p>",
        "id": 199268787,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1590862107
    }
]