[
    {
        "content": "<p>Whatever is going on here (this is preparation for some blog post, so if I could tweak things to avoid it, it would be great):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">eq2</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">refl</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">eq2</span> <span class=\"n\">a</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">infix</span> <span class=\"bp\">`</span> <span class=\"bp\">∼</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"o\">:=</span> <span class=\"n\">eq2</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">eq2</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">}</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">ind</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">C</span> <span class=\"n\">x</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hab</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∼</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"n\">eq2.rec</span> <span class=\"n\">h</span> <span class=\"n\">hab</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">symm</span> <span class=\"o\">(</span><span class=\"n\">hab</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∼</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">∼</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n<span class=\"c1\">--  exact ind (λ x y, y ∼ x) refl hab, -- fails??</span>\n  <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">ind</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"bp\">∼</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">refl</span> <span class=\"n\">hab</span> <span class=\"o\">:</span> <span class=\"n\">_</span><span class=\"o\">),</span> <span class=\"c1\">-- works</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 234758409,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1618522637
    },
    {
        "content": "<p>You want to tag <code>ind</code> as <code>@[elab_as_eliminator]</code>.</p>",
        "id": 234758698,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1618522801
    },
    {
        "content": "<p>If you do that you can also leave the <code>C</code> argument implicit.</p>",
        "id": 234758909,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1618522895
    },
    {
        "content": "<p>This breaks my proof of <code>subst</code> :-)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">subst</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hab</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∼</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hPa</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">revert</span> <span class=\"n\">hPa</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">ind</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"n\">hab</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">hxP</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hxP</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 234758912,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1618522897
    },
    {
        "content": "<p>But I can definitely work around it. Thanks!</p>",
        "id": 234758926,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1618522907
    },
    {
        "content": "<p>I think I want to have C explicit for teaching purposes.</p>",
        "id": 234758996,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1618522931
    },
    {
        "content": "<p>Use <code>refine</code> instead of <code>apply</code> in <code>subst</code>.</p>",
        "id": 234759029,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1618522949
    },
    {
        "content": "<p>I'm still completely bewildered about why the thing in my first post doesn't work.</p>",
        "id": 234759117,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1618523002
    },
    {
        "content": "<p>This is because of the heuristics in the elaborator. You are trying to prove <code>eq2 b a</code> and the type of <code>ind _ _ _</code> is <code>?C ?a ?b</code>. So Lean thinks: \"I can solve that, just put <code>?C := eq2</code>, <code>?a := b</code> and <code>?b := a</code>\". Then it looks at the first argument of <code>ind</code>, which it now knows to be <code>eq2</code>, and sees that you provided the wrong argument.<br>\nTo disable this heuristic, you have to use <code>@[elab_as_eliminator]</code></p>",
        "id": 234759510,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1618523223
    },
    {
        "content": "<p>What is the default elab behavior? <code>@[elab_simple]</code>?</p>",
        "id": 234759953,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1618523437
    },
    {
        "content": "<p><code>@[elab_as_eliminator]</code> has a different heuristic that looks at the type of <code>hab</code> to figure out <code>a</code> and <code>b</code>, and then finds <code>C</code> by abstracting away all the <code>a</code>s and the <code>b</code>s in the expected type. For this it needs to know the expected type and the type of <code>hab</code>. This means you cannot use <code>apply</code> because that elaborates the term before it looks at the expected type, which is why you had to use <code>refine</code> instead.</p>",
        "id": 234760044,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1618523503
    },
    {
        "content": "<p>Note, in your original example <code>apply ind (λ x y, y ∼ x) refl hab</code> does work (without <code>elab_as_eliminator</code>), since that is similar to <code>exact (ind ... : _)</code></p>",
        "id": 234760192,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1618523570
    },
    {
        "content": "<p>I think <code>@[elab_with_expected_type]</code> is default. You can see the descriptions of these attributes when autocompleting <code>@[elab</code></p>",
        "id": 234760431,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1618523690
    },
    {
        "content": "<p>Probably if I used <code>apply @ind...</code> I could get the behaviour I wanted too, I think that also changes the elaboration strategy. Thanks a lot for this! I'm surprised I don't run into this issue more often!</p>",
        "id": 234760683,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1618523801
    },
    {
        "content": "<p>I had seen this phenomenon before but only in the context where C was implicit, and had not realised that the elaborator would attempt to guess inputs which I was about to explicitly give!</p>",
        "id": 234760794,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1618523876
    },
    {
        "content": "<p>This issue only happen with lemmas that have a variable applied to some arguments as their conclusion. These are induction-like principles, and I think should always be tagged <code>@[elab_as_eliminator]</code> (honestly that maybe should happen automatically - though that is now not very useful, since this attribute is removed in Lean 4). It doesn't occur often, since these lemmas are pretty rare, and if they exist, they are probably already tagged with <code>@[elab_as_eliminator]</code>.</p>",
        "id": 234760944,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1618523955
    },
    {
        "content": "<p>The main other example of this is <code>congr_arg</code>, which isn't marked <code>elab_as_eliminator</code> because it doesn't have the type <code>?C ?x</code> but instead <code>?f ?x = ?f ?y</code>. But the same higher order matching issue comes up there and that's why you need the <code>: _</code> often in that case</p>",
        "id": 234800709,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618554418
    },
    {
        "content": "<p>By the way <code>@ind</code> uses <code>@[elab_simple]</code></p>",
        "id": 234800818,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618554492
    }
]