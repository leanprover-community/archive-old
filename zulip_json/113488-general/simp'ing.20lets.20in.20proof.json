[
    {
        "content": "<p>MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.prod</span>\n<span class=\"kn\">import</span> <span class=\"n\">order.filter.basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">filter</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">filter</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">baz</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">qux</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">act</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">⟩,</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n  <span class=\"k\">let</span> <span class=\"n\">mul</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">function.uncurry</span> <span class=\"o\">(</span><span class=\"bp\">*</span><span class=\"o\">),</span>\n  <span class=\"k\">let</span> <span class=\"n\">rlassoc</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">equiv.prod_assoc</span> <span class=\"n\">α</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">inv_fun</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">act</span> <span class=\"bp\">=</span> <span class=\"n\">prod.map</span> <span class=\"n\">mul</span> <span class=\"n\">id</span> <span class=\"bp\">∘</span> <span class=\"n\">rlassoc</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">funext</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>This is clearly not working out since <code>simp</code> doesn't know about the <code>let</code> bound variables. I can use <code>dsimp</code>before <code>simp</code>, but that doesn't get me anywhere. Is there a way to make this work, or will I have to extract everything out into <code>def</code>s?</p>",
        "id": 271359012,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1644446770
    },
    {
        "content": "<p>try <code>tidy</code></p>",
        "id": 271359350,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1644446990
    },
    {
        "content": "<p>And then <code>tidy?</code> to see what it did, so you can golf it away.</p>",
        "id": 271359432,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1644447014
    },
    {
        "content": "<p>Let me try...</p>",
        "id": 271359547,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1644447095
    },
    {
        "content": "<p>hint: <code>ext ⟨_,_,_⟩; refl</code> closes the goal</p>",
        "id": 271359564,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1644447103
    },
    {
        "content": "<p><code>tidy</code> works marvelously.</p>",
        "id": 271359661,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1644447149
    },
    {
        "content": "<p>If you really want to unfold your <code>let</code>s, you can use <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#unfold\">tactic#unfold</a> or, e.g., <code>dsimp [mul]</code>.</p>",
        "id": 271359871,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1644447263
    },
    {
        "content": "<p>I was using <code>dsimp</code> to unfold the <code>let</code> bound variables, but calling <code>simp</code> afterwards did not have an effect. Is <code>tidy</code> a more powerful <code>simp</code>?</p>",
        "id": 271359988,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1644447335
    },
    {
        "content": "<p>You can also replace let with <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#set\">tactic#set</a> using <code>set ... with ...</code></p>",
        "id": 271359993,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1644447338
    },
    {
        "content": "<p>Use <code>tidy?</code> to see what tidy does</p>",
        "id": 271360032,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1644447359
    },
    {
        "content": "<p>You were missing an <code>ext</code> and some case splits. It had nothing to do with the <code>let</code>s.</p>",
        "id": 271360154,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1644447409
    },
    {
        "content": "<p><code>Try this: cases a, cases hk, cases hk_right, cases a_snd, refl</code> &lt;-- that's what it says it does. No clue what's going on.</p>",
        "id": 271360203,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1644447445
    },
    {
        "content": "<p>You can use <code>set ... with h</code> rather than <code>let ...</code> and then throw in <code>h</code> into the simp set (oops, missed that Adam said this already)</p>",
        "id": 271360226,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1644447455
    },
    {
        "content": "<p>I'm not sure how <code>set with</code> would work here. Never used it before.</p>",
        "id": 271360381,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1644447539
    },
    {
        "content": "<p>Type <code>set</code> in tactic mode and then hover over it to see the documentation, or send a message to yourself on Zulip saying <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#set\">tactic#set</a> and click on the link</p>",
        "id": 271360672,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1644447674
    },
    {
        "content": "<p><code>set act : α × (α × β) → α × β := λ ⟨a, b, x⟩, (a * b, x) with &lt;what do I put here?&gt;</code></p>",
        "id": 271360674,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1644447675
    },
    {
        "content": "<p><code>act_def</code></p>",
        "id": 271360726,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1644447708
    },
    {
        "content": "<p>Ah, so it's the name of the equality hypothesis.</p>",
        "id": 271360794,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1644447731
    },
    {
        "content": "<p>Nice.</p>",
        "id": 271360844,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1644447756
    },
    {
        "content": "<p>Thanks guys.</p>",
        "id": 271360854,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1644447761
    }
]