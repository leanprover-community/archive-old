[
    {
        "content": "<p>What's going on here? What prevents <code>#reduce</code> from touching the equation compiler definitions?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">term_mul</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"n\">nat.rec_on</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">x</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">match_mul</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"n\">b</span>     <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">match_mul</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">b</span>\n\n<span class=\"k\">#reduce</span> <span class=\"n\">term_mul</span> <span class=\"mi\">5</span>  <span class=\"c1\">-- λ (b : ℕ), ((((0.add b).add b).add b).add b).add b</span>\n<span class=\"k\">#reduce</span> <span class=\"n\">match_mul</span> <span class=\"mi\">5</span>  <span class=\"c1\">-- match_mul 5</span>\n<span class=\"k\">#reduce</span> <span class=\"n\">nat.mul</span> <span class=\"mi\">5</span>  <span class=\"c1\">-- 5.mul</span>\n</code></pre></div>",
        "id": 229767509,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615419702
    },
    {
        "content": "<p>Like, why is <code>5.mul</code> (and <code>5.match_mul</code>) not reducing?</p>",
        "id": 229767766,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1615419866
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">init.data.nat.basic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">mul_left</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span>       <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"n\">mul_left</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">m</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">mul_left'</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span>       <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">mul_left'</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">m</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">mul_leftr</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">nat.rec_on</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">f</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">mul_right</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"mi\">0</span>       <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">mul_right</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">mul_right'</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span>       <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">mul_right'</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">mul_rightr</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">nat.rec_on</span> <span class=\"n\">m</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"k\">#reduce</span> <span class=\"n\">mul_left</span> <span class=\"mi\">5</span> <span class=\"c1\">-- mul_left 5</span>\n<span class=\"k\">#reduce</span> <span class=\"n\">mul_left'</span> <span class=\"mi\">5</span> <span class=\"c1\">-- λ (m : ℕ), ((((0.add m).add m).add m).add m).add m</span>\n<span class=\"k\">#reduce</span> <span class=\"n\">mul_leftr</span> <span class=\"mi\">5</span> <span class=\"c1\">-- λ (m : ℕ), ((((0.add m).add m).add m).add m).add m</span>\n<span class=\"k\">#reduce</span> <span class=\"n\">mul_right</span> <span class=\"mi\">5</span> <span class=\"c1\">-- mul_right 5</span>\n<span class=\"k\">#reduce</span> <span class=\"n\">mul_right'</span> <span class=\"mi\">5</span> <span class=\"c1\">-- mul_right' 5</span>\n<span class=\"k\">#reduce</span> <span class=\"n\">mul_rightr</span> <span class=\"mi\">5</span> <span class=\"c1\">-- λ (m : ℕ), nat.rec 0 (λ (_x k : ℕ), k.succ.succ.succ.succ.succ) m</span>\n</code></pre></div>",
        "id": 229768146,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1615420099
    },
    {
        "content": "<p>(that's on dev lean where mul is left-recursive though. I don't know if that changes #reduce output)</p>",
        "id": 229768255,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1615420172
    },
    {
        "content": "<p>I guess <code>#reduce</code> can't unfold partially applied match expressions?</p>",
        "id": 229769767,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615421029
    },
    {
        "content": "<p>In particular, <code>mul_left._main 5</code> does reduce, yet <code>mul_left 5</code> does not</p>",
        "id": 229770012,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615421147
    },
    {
        "content": "<p>So there's maybe something special about <code>_main</code>?</p>",
        "id": 229770029,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615421154
    },
    {
        "content": "<p>By the way, it does work in <code>rfl</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">match_mul</span> <span class=\"mi\">5</span> <span class=\"bp\">=</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"o\">(((((</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">add</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">add</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">add</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">add</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">add</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 229797389,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615440932
    },
    {
        "content": "<p>I remember this issue coming up when I was working on the lean type theory paper - in order for reduction to go to completion you sometimes have to do eta expansion in order to expose fully applied recursors so it will reduce, but eta expansion is not a reduction step so you have to adjust the reduction a bit to make it work</p>",
        "id": 229797545,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615441066
    },
    {
        "content": "<p>Here's the example I found, demonstrating axiom K and how it fails to reduce when you eta-contract the term:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">pp.implicit</span> <span class=\"n\">true</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"k\">#reduce</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">eq.rec</span> <span class=\"n\">ℕ</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"n\">a</span> <span class=\"n\">h</span> <span class=\"c1\">-- λ (h : a = a), a</span>\n<span class=\"k\">#reduce</span> <span class=\"bp\">@</span><span class=\"n\">eq.rec</span> <span class=\"n\">ℕ</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"n\">a</span> <span class=\"c1\">-- @eq.rec ℕ a (λ (_x : ℕ), ℕ) a a</span>\n</code></pre></div>",
        "id": 229797788,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615441270
    },
    {
        "content": "<p>In this case, I think there is a special attribute on <code>match_mul</code> which tells the kernel not to unfold it unless it is fully applied. Consider:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">match_mul</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"n\">b</span>     <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">match_mul</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">b</span>\n\n<span class=\"k\">#print</span> <span class=\"n\">match_mul</span>\n<span class=\"c1\">-- def match_mul : ℕ → ℕ → ℕ :=</span>\n<span class=\"c1\">-- match_mul._main</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">match_mul2</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"n\">match_mul._main</span>\n\n<span class=\"k\">#reduce</span> <span class=\"n\">match_mul</span> <span class=\"mi\">5</span>  <span class=\"c1\">-- match_mul 5</span>\n<span class=\"k\">#reduce</span> <span class=\"n\">match_mul2</span> <span class=\"mi\">5</span>  <span class=\"c1\">-- λ (ᾰ : ℕ), ((((0.add ᾰ).add ᾰ).add ᾰ).add ᾰ).add ᾰ</span>\n</code></pre></div>",
        "id": 229798234,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615441608
    },
    {
        "content": "<p>That said, the information exposed to lean is insufficient to distinguish them:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">tactic</span>\n<span class=\"k\">#eval</span> <span class=\"k\">do</span>\n  <span class=\"n\">declaration.defn</span> <span class=\"bp\">`</span><span class=\"n\">match_mul</span> <span class=\"o\">[]</span> <span class=\"n\">ty</span> <span class=\"n\">val</span> <span class=\"o\">(</span><span class=\"n\">reducibility_hints.regular</span> <span class=\"mi\">5</span> <span class=\"n\">tt</span><span class=\"o\">)</span> <span class=\"n\">tt</span> <span class=\"bp\">←</span> <span class=\"n\">get_decl</span> <span class=\"bp\">`</span><span class=\"n\">match_mul</span><span class=\"o\">,</span>\n  <span class=\"n\">guard</span> <span class=\"o\">(</span><span class=\"n\">ty</span> <span class=\"bp\">=ₐ</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">val</span> <span class=\"bp\">=ₐ</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">match_mul._main</span><span class=\"o\">)),</span>\n  <span class=\"n\">declaration.defn</span> <span class=\"bp\">`</span><span class=\"n\">match_mul2</span> <span class=\"o\">[]</span> <span class=\"n\">ty</span> <span class=\"n\">val</span> <span class=\"o\">(</span><span class=\"n\">reducibility_hints.regular</span> <span class=\"mi\">5</span> <span class=\"n\">tt</span><span class=\"o\">)</span> <span class=\"n\">tt</span> <span class=\"bp\">←</span> <span class=\"n\">get_decl</span> <span class=\"bp\">`</span><span class=\"n\">match_mul2</span><span class=\"o\">,</span>\n  <span class=\"n\">guard</span> <span class=\"o\">(</span><span class=\"n\">ty</span> <span class=\"bp\">=ₐ</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">val</span> <span class=\"bp\">=ₐ</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">match_mul._main</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 229798645,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615441943
    }
]