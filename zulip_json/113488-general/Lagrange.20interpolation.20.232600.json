[
    {
        "content": "<p>What should the type signature be? Should I take <code>f : F \\to\\0 F</code> with a prescribed domain <code>dom : finset F</code>, or should I take a function <code>f : (\\u dom : set F) \\to F</code>?</p>",
        "id": 198182768,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589972834
    },
    {
        "content": "<p>first approach: I did not use <code>F \\to F</code> because <code>F \\to\\0 F</code> has more API (e.g. <code>finsupp.single</code>)</p>",
        "id": 198182859,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589972883
    },
    {
        "content": "<p>second approach: this allows us to define an equivalence with the polynomials of degree <code>\\le</code> n</p>",
        "id": 198182890,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589972896
    },
    {
        "content": "<p>I vote for the second approach</p>",
        "id": 198182960,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589972963
    },
    {
        "content": "<p>Like this for the first approach.</p>",
        "id": 198182980,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589972979
    },
    {
        "content": "<p>Like this for the second approach.</p>",
        "id": 198182983,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589972982
    },
    {
        "content": "<p>Wait, I don't think the first approach even works, does it? How would you require the interpolated polynomial to be zero at some points?</p>",
        "id": 198183089,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589973047
    },
    {
        "content": "<p>Do I not understand what you are proposing?</p>",
        "id": 198183097,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589973052
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\">- Lagrange interpolation. -/</span>\n<span class=\"n\">def</span> <span class=\"n\">interpolate</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">→</span><span class=\"err\">₀</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">dom</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">F</span> <span class=\"o\">:=</span>\n<span class=\"n\">dom</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">basis</span> <span class=\"n\">dom</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 198183138,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589973082
    },
    {
        "content": "<p>maybe we can define a new type altogether</p>",
        "id": 198183155,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589973101
    },
    {
        "content": "<p>where a function includes the domain</p>",
        "id": 198183163,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589973106
    },
    {
        "content": "<p>Oh I see.</p>",
        "id": 198183250,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589973145
    },
    {
        "content": "<p>It seems that your question is basically: if I know <code>\\a</code> is finite, should I use <code>\\a -&gt;0 \\b</code> or <code>\\a -&gt; \\b</code>.</p>",
        "id": 198183284,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589973162
    },
    {
        "content": "<p>but <code>F</code> isn't finite</p>",
        "id": 198183296,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589973175
    },
    {
        "content": "<p>and we hate partial functions</p>",
        "id": 198183305,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589973180
    },
    {
        "content": "<p>But the dom is finite</p>",
        "id": 198183310,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589973182
    },
    {
        "content": "<p>This is stupid, please stop the partial function hate.</p>",
        "id": 198183329,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589973202
    },
    {
        "content": "<p>Seriously they are fine.</p>",
        "id": 198183371,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589973233
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> what did you have in mind when you made the issue?</p>",
        "id": 198184872,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589974304
    },
    {
        "content": "<p>What I had in mind was that someone who didn't have much experience with lean could try to come up with a statement and PR things (-;</p>",
        "id": 198189264,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589977084
    },
    {
        "content": "<p>I don't have a preference, and feel free to just do something</p>",
        "id": 198189285,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589977096
    },
    {
        "content": "<p>Clearly, the topic wasn't claimed for a while... so I don't mind that someone<em>with</em> experience takes it up.</p>",
        "id": 198189819,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589977386
    },
    {
        "content": "<p>I don't have more experience than you</p>",
        "id": 198193508,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589979338
    },
    {
        "content": "<p>You do have more experience than a beginner (-;</p>",
        "id": 198193526,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589979355
    },
    {
        "content": "<p>oh I misread, I thought you wanted someone with experience to do it</p>",
        "id": 198193656,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589979418
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113488-general/topic/Lagrange.20interpolation.20.232600/near/198183329\">said</a>:</p>\n<blockquote>\n<p>This is stupid, please stop the partial function hate.</p>\n</blockquote>\n<p>the problem is that you run into <code>f x</code> and <code>f \\&lt;x.1, x.2\\&gt;</code> not being defeq</p>",
        "id": 198193890,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589979515
    },
    {
        "content": "<p>the third option is that we make something like finsupp but with a specified domain</p>",
        "id": 198194176,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589979631
    },
    {
        "content": "<p>so essentially a new data structure</p>",
        "id": 198194215,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589979649
    },
    {
        "content": "<p>Why the finsupp?</p>",
        "id": 198194556,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589979811
    },
    {
        "content": "<p>Why not just a function + a finset</p>",
        "id": 198194590,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589979822
    },
    {
        "content": "<p>you can only interpolate finitely many points</p>",
        "id": 198194591,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589979822
    },
    {
        "content": "<p>oh that's because finsupp has better API</p>",
        "id": 198194607,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589979831
    },
    {
        "content": "<p><code>finset.sum</code> also take a function</p>",
        "id": 198194613,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589979837
    },
    {
        "content": "<p>not a finsupp</p>",
        "id": 198194657,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589979845
    },
    {
        "content": "<p>and you can decompose a finsupp into singles</p>",
        "id": 198194684,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589979861
    },
    {
        "content": "<p>it just feels nicer to me</p>",
        "id": 198194694,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589979868
    },
    {
        "content": "<p>I don't really care, like I said. (-;</p>",
        "id": 198194721,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589979882
    },
    {
        "content": "<p>but maybe I'll just use partial functions</p>",
        "id": 198194726,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589979886
    },
    {
        "content": "<p>Partial functions are especially bad when you start intersecting the domains, like you do all the time in manifolds, as <code>(A ∩ B) ∩ C</code> is not defeq to <code>A ∩ (B ∩ C)</code> nor to <code>B ∩ (A ∩ C)</code> and so on, so you spend all your time casting from one of them to the other.</p>",
        "id": 198195615,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1589980302
    },
    {
        "content": "<p>oh no, lagrange interpolation is a sheaf now?</p>",
        "id": 198195723,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589980339
    },
    {
        "content": "<p>yeah I might run into this problem if I do the Newton interpolations</p>",
        "id": 198195777,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589980362
    },
    {
        "content": "<p>It seems to me the statement is: for every finite subset <code>s</code> of cardinality <code>n</code>, there's an <code>F</code>-linear map from {polynomials of degree less than <code>n</code>} to {functions <code>s -&gt; F</code>}, given by evaluation; this map is a bijection/isomorphism/(linear) equivalence.</p>",
        "id": 198213095,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589987694
    },
    {
        "content": "<p>how about something even more explicitly computable, e.g. <code>finmap</code>?</p>",
        "id": 198214406,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589988205
    },
    {
        "content": "<p>the input is just a list of pairs here</p>",
        "id": 198214437,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589988220
    },
    {
        "content": "<p>The set <code>s</code> needs to be fixed anyways though, for this statement</p>",
        "id": 198214580,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589988257
    },
    {
        "content": "<p>why?</p>",
        "id": 198214623,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589988273
    },
    {
        "content": "<p>given a map, produce a polynomial</p>",
        "id": 198214653,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589988284
    },
    {
        "content": "<p>you can build all the more noncomputable representations on top of this</p>",
        "id": 198214741,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589988325
    },
    {
        "content": "<p>Yes, you can also phrase it in this low-level way but in the end you will want to have the k-linear isomorphism.</p>",
        "id": 198215315,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589988522
    },
    {
        "content": "<p>Another useful way to say it is that for a fixed <code>s</code> of size <code>n</code>, there's a basis of {polynomials of degree less than <code>n</code>} indexed on <code>s</code> whose values on <code>s</code> are the characteristic functions of the various elements of <code>s</code>.</p>",
        "id": 198216810,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589989139
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113488-general/topic/Lagrange.20interpolation.20.232600/near/198213095\">said</a>:</p>\n<blockquote>\n<p>It seems to me the statement is: for every finite subset <code>s</code> of cardinality <code>n</code>, there's an <code>F</code>-linear map from {polynomials of degree less than <code>n</code>} to {functions <code>s -&gt; F</code>}, given by evaluation; this map is a bijection/isomorphism/(linear) equivalence.</p>\n</blockquote>\n<p>This formulation also makes the proof trivial: the original map has kernel zero, and both sides have an obvious basis of size <code>n</code>.</p>",
        "id": 198307149,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590057722
    }
]