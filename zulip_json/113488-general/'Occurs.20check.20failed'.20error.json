[
    {
        "content": "<p>Hello! I'm getting an error message I don't understand. Can anyone help me?</p>\n<p>I have, in the local context, a hypothesis  <code>h₁ : en = M :: (ys ++ ↑\"U\"),</code> and would like to close the goal <code>⊢ en = M :: ?m_1</code>. I try <code>rw h₁</code> and get the error message <code>exact tactic failed, failed to assign \n  eq.mpr (id (eq.rec (eq.refl (en = M :: ?m_1)) h₁)) htarget\nto metavariable ?m_2 (possible cause: occurs check failed)</code>.</p>",
        "id": 204081490,
        "sender_full_name": "Gihan Marasingha",
        "timestamp": 1594905457
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"233737\">@Gihan Marasingha</span>  Does <code>exact h₁</code> work?</p>",
        "id": 204081661,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594905515
    },
    {
        "content": "<p>If not, do you have other open goals, or is this the only one?</p>",
        "id": 204081697,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594905537
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> . Thanks! <code> exact h₁</code> gives an 'invalid type ascription error'. This is not the only goal. My tactic state, before trying the rw is:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"mi\">2</span> <span class=\"n\">goals</span>\n<span class=\"n\">st</span> <span class=\"n\">en</span> <span class=\"o\">:</span> <span class=\"n\">miustr</span><span class=\"o\">,</span>\n<span class=\"n\">ys</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">miu_atom</span><span class=\"o\">,</span>\n<span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">st</span> <span class=\"bp\">=</span> <span class=\"n\">M</span> <span class=\"bp\">::</span> <span class=\"n\">ys</span><span class=\"o\">,</span>\n<span class=\"n\">h₃</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">::</span> <span class=\"n\">ys</span> <span class=\"bp\">++</span> <span class=\"err\">↑</span><span class=\"s2\">&quot;U&quot;</span> <span class=\"bp\">=</span> <span class=\"n\">M</span> <span class=\"bp\">::</span> <span class=\"o\">(</span><span class=\"n\">ys</span> <span class=\"bp\">++</span> <span class=\"err\">↑</span><span class=\"s2\">&quot;U&quot;</span><span class=\"o\">),</span>\n<span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">en</span> <span class=\"bp\">=</span> <span class=\"n\">M</span> <span class=\"bp\">::</span> <span class=\"o\">(</span><span class=\"n\">ys</span> <span class=\"bp\">++</span> <span class=\"err\">↑</span><span class=\"s2\">&quot;U&quot;</span><span class=\"o\">)</span>\n<span class=\"err\">⊢</span> <span class=\"n\">en</span> <span class=\"bp\">=</span> <span class=\"n\">M</span> <span class=\"bp\">::</span> <span class=\"err\">?</span><span class=\"n\">m_1</span>\n\n<span class=\"n\">st</span> <span class=\"n\">en</span> <span class=\"o\">:</span> <span class=\"n\">miustr</span><span class=\"o\">,</span>\n<span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">rule1</span> <span class=\"n\">st</span> <span class=\"n\">en</span><span class=\"o\">,</span>\n<span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">goodstart</span> <span class=\"n\">st</span>\n<span class=\"err\">⊢</span> <span class=\"n\">list</span> <span class=\"n\">miu_atom</span>\n</code></pre></div>",
        "id": 204082042,
        "sender_full_name": "Gihan Marasingha",
        "timestamp": 1594905704
    },
    {
        "content": "<p>Hmm... confusing. Maybe <code>convert</code> instead of <code>exact</code> can make Lean behave?</p>",
        "id": 204082251,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594905800
    },
    {
        "content": "<p>Otherwise, <code>exact (ys ++ ↑\"U\")</code> in the other goal might give more info</p>",
        "id": 204082297,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594905824
    },
    {
        "content": "<p>Thanks. I was mistaken in my previous comment regarding the tactic state. It was different. I've also just changed my code to avoid the coercion. Now the tactic state before the rw is:</p>\n<p>---snip---</p>\n<p>I haven't used <code>convert</code> before. I'll look into it.</p>",
        "id": 204084373,
        "sender_full_name": "Gihan Marasingha",
        "timestamp": 1594906718
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"233737\">@Gihan Marasingha</span> Actually, I don't know how the parens are in <code>h\\1</code> !</p>",
        "id": 204084478,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594906772
    },
    {
        "content": "<p>Maybe that's the issue why <code>exact</code> is not working</p>",
        "id": 204084497,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594906778
    },
    {
        "content": "<p>Ooh, <code>h\\3</code> is telling me the answer</p>",
        "id": 204084610,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594906821
    },
    {
        "content": "<p>Ahh, I'm being an idiot and deleted an extra line in my last message (thus changing the goal). My original tactic state (modulo coercion) was what I have now.  In case it helps, when I try <code>exact h₁</code>, I get:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"n\">type</span> <span class=\"n\">ascription</span><span class=\"o\">,</span> <span class=\"n\">term</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">en</span> <span class=\"bp\">=</span> <span class=\"n\">M</span> <span class=\"bp\">::</span> <span class=\"o\">(</span><span class=\"n\">ys</span> <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"n\">U</span><span class=\"o\">])</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">en</span> <span class=\"bp\">=</span> <span class=\"n\">M</span> <span class=\"bp\">::</span> <span class=\"err\">?</span><span class=\"n\">m_1</span>\n</code></pre></div>",
        "id": 204088718,
        "sender_full_name": "Gihan Marasingha",
        "timestamp": 1594908789
    },
    {
        "content": "<p>OK, it's all fixed now. I had an extra <code>split</code> at the start of my code that caused everything to foul up! Thanks for the help.</p>",
        "id": 204101290,
        "sender_full_name": "Gihan Marasingha",
        "timestamp": 1594913904
    }
]