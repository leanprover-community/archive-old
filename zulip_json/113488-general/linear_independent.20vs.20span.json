[
    {
        "content": "<p>Am I allowed to be upset that <code>linear_independent</code> takes an indexed family, while <code>span</code> takes a <code>set</code>?</p>",
        "id": 199147445,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1590755658
    },
    {
        "content": "<p>Is there a better way to state</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">linear_independent</span><span class=\"bp\">.</span><span class=\"n\">fin_succ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hι</span> <span class=\"o\">:</span> <span class=\"n\">linear_independent</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"err\">∘</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">cast_succ</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"o\">(</span><span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">last</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"err\">∉</span> <span class=\"n\">span</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"err\">∘</span> <span class=\"bp\">@</span><span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">cast_succ</span> <span class=\"n\">n</span><span class=\"o\">)))</span> <span class=\"o\">:</span>\n  <span class=\"n\">linear_independent</span> <span class=\"n\">K</span> <span class=\"n\">ι</span> <span class=\"o\">:=</span>\n</code></pre></div>\n\n\n<p>and does anyone have a proof that doesn't involved mucking about with sets too much? I would like this to be an easy consequence of the existing <code>linear_independent.insert</code>.</p>",
        "id": 199147524,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1590755716
    },
    {
        "content": "<p>Or, to <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a> this, if I'm planning on proving some vectors <code>i : fin n \\to V</code> are linearly independent by inductively showing each initial segment of them are linearly independent, which lemmas am I meant to use to say this?</p>",
        "id": 199147646,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1590755781
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113488-general/topic/linear_independent.20vs.20span/near/199147445\">said</a>:</p>\n<blockquote>\n<p>Am I allowed to be upset that <code>linear_independent</code> takes an indexed family, while <code>span</code> takes a <code>set</code>?</p>\n</blockquote>\n<p>I think you are</p>",
        "id": 199149488,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590756788
    },
    {
        "content": "<p><code>linear_independent</code> has to be a family, while for <code>span</code> it doesn't matter so much.</p>",
        "id": 199149526,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590756805
    },
    {
        "content": "<p><code>linear_independent</code> used to be a set, I think</p>",
        "id": 199150398,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590757284
    },
    {
        "content": "<p>Before the monster-refactor of linear algebra and finsupp, about a year ago</p>",
        "id": 199150447,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590757319
    }
]