[
    {
        "content": "<p>My mind was just blown by how useful <code>has_coe_to_fun</code> is. I constructed a morphism between applicative functors:</p>\n<div class=\"codehilite\"><pre><span></span>variables (f : Type u → Type v) [applicative f]\nvariables (g : Type u → Type w) [applicative g]\n\nstructure applicative_morphism : Type (max (u+1) v w) :=\n  (F : ∀ {α : Type u}, f α → g α)\n  (preserves_pure&#39; : ∀ {α : Type u} (x : α), F (pure x) = pure x)\n  (preserves_seq&#39; : ∀ {α β : Type u} (x : f (α → β)) (y : f α), F (x &lt;*&gt; y) = F x &lt;*&gt; F y)\n</pre></div>\n\n\n<p>and defined the following instance:</p>\n<div class=\"codehilite\"><pre><span></span>instance : has_coe_to_fun (applicative_morphism f g) :=\n{ F := λ _, ∀ {α}, f α → g α,\n  coe := λ m, m.F }\n</pre></div>\n\n\n<p>It's already pretty cool that, given <code>x : f int</code> and <code>m : applicative_morphism f g</code> I can write <code>f x</code> to just apply it. What really blew my mind is that I can write <code>@f int x</code> to make the <code>{α : Type u}</code> of <code>F</code> explicit.</p>",
        "id": 123464026,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1520545621
    }
]