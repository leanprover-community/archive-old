[
    {
        "content": "<p>It's really nice to get back into doing some Lean. As my confidence grows I now know more about what should work, and am hence more confident about asking questions when I see discrepencies. What is going on here?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">finset</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"c1\">-- no ↑ needed</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"err\">↑</span><span class=\"n\">s</span> <span class=\"c1\">-- ↑ needed</span>\n</code></pre></div>\n\n\n<p>I usually don't need the <code>↑</code> when coercing. I think Chris once told me that this is something to do with <code>has_coe_t</code> or <code>has_lift</code> or perhaps another one of these other inscrutible typeclasses whose names I don't know. Is this actually a problem? If so, can it be fixed? Or is it there by design?</p>",
        "id": 202788552,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593771664
    },
    {
        "content": "<p>Let me quote <code>init/coe.lean</code>: <a href=\"https://github.com/leanprover-community/lean/blob/master/library/init/coe.lean\">https://github.com/leanprover-community/lean/blob/master/library/init/coe.lean</a></p>\n<blockquote>\n<p>The elaborator tries to insert coercions automatically.<br>\nOnly instances of has_coe type class are considered in the process.<br>\nLean also provides a \"lifting\" operator: ↑a.<br>\nIt uses all instances of has_lift type class.<br>\nEvery has_coe instance is also a has_lift instance.<br>\nWe recommend users only use has_coe for coercions that do not produce a lot<br>\nof ambiguity.<br>\nAll coercions and lifts can be identified with the constant coe.<br>\nWe use the has_coe_to_fun type class for encoding coercions from<br>\na type to a function space.<br>\nWe use the has_coe_to_sort type class for encoding coercions from<br>\na type to a sort.</p>\n</blockquote>",
        "id": 202789245,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1593772265
    },
    {
        "content": "<p>I guess Kevin's question is: why is this particular coercion a <code>has_lift</code> but not a <code>has_coe</code>.</p>",
        "id": 202789505,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593772492
    },
    {
        "content": "<p>This is probably worth at least a comment in <code>finset.lean</code>, probably in the module docstring.</p>",
        "id": 202789563,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593772542
    },
    {
        "content": "<p>My question is whether it is by accident or by design.</p>",
        "id": 202795436,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593777141
    },
    {
        "content": "<p>git tells me we should blame <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> for this design choice, who added this line almost exactly two years ago.</p>",
        "id": 202795665,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1593777296
    },
    {
        "content": "<p>I think we could just get rid of <code>has_lift</code>, it is used exceedingly rarely</p>",
        "id": 202796607,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593777966
    },
    {
        "content": "<p>I don't have any good reasons to share about why <code>finset A -&gt; set A</code> is a <code>has_lift</code></p>",
        "id": 202796709,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593778061
    },
    {
        "content": "<p>I wonder whether it would cause issues with <code>has_mem</code></p>",
        "id": 202815771,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593790579
    },
    {
        "content": "<p>I still think it's weird that <code>has_mem</code> is not instead handled by coercions, but when I tried to fix it things got more complicated than I expected.</p>",
        "id": 202815822,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593790616
    },
    {
        "content": "<p>You mean coercing anything that you want to talk about membership to a set?</p>",
        "id": 202855491,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593836533
    },
    {
        "content": "<p>Is this something we can do incrementally without ripping out has_mem?</p>",
        "id": 202855497,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593836558
    },
    {
        "content": "<p>By currying, any <code>has_mem</code> instance is equivalent to a map to sets. Is there any example where there is a coersion to set and a <code>has_mem</code> instance which are not equivalent in this way?</p>",
        "id": 202877752,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1593875407
    }
]