[
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/mathlib/issues/9891\">#9891</a>, I am refactoring bounds out of the lattice hierarchy. Everything builds, but I am hitting the fails_quickly linter on:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">nat.subtype.order_bot</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable_pred</span> <span class=\"o\">(</span><span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">order_bot</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">bot</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">nat.find</span> <span class=\"o\">(</span><span class=\"n\">nonempty_subtype.1</span> <span class=\"n\">h</span><span class=\"o\">),</span> <span class=\"n\">nat.find_spec</span> <span class=\"o\">(</span><span class=\"n\">nonempty_subtype.1</span> <span class=\"n\">h</span><span class=\"o\">)⟩,</span>\n  <span class=\"n\">bot_le</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">nat.find_min'</span> <span class=\"n\">_</span> <span class=\"n\">x.2</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>I haven't been able to root-cause analyze this -- adding all sorts of shortcut instances for nat didn't seem to help. Can a TC expert help here please?</p>",
        "id": 261792566,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1637159876
    },
    {
        "content": "<p>I see in <code>nolints</code> that we have <code>apply_nolint nat.subtype.semilattice_sup_bot fails_quickly</code>. Should I also nolint my new instance?</p>",
        "id": 261837009,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1637178117
    },
    {
        "content": "<p>Did you read the error message that the linter gave? Were the instructions unclear on how to debug the issue?</p>\n<p>This linter won't be happy by adding shortcut instances, it is a linter to find loops. In this case, the loop is caused by these three instances:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">order_bot.to_has_bot</span>\n<span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">has_bot_nonempty</span>\n<span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">nat.subtype.order_bot</span>\n</code></pre></div>\n<p><code>nat.subtype.order_bot</code> seems like a bad candidate for a global instance.<br>\nThat said, it makes sense to not fix the issue in your PR, as you're not creating the problem, just slightly changing it.</p>",
        "id": 261912602,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1637233275
    },
    {
        "content": "<p>(<a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.subtype.semilattice_sup_bot\">docs#nat.subtype.semilattice_sup_bot</a>)</p>",
        "id": 261918684,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637237535
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"111080\">Floris van Doorn</span> <a href=\"#narrow/stream/113488-general/topic/instance.20fails_quickly/near/261912602\">said</a>:</p>\n<blockquote>\n<p>Did you read the error message that the linter gave? Were the instructions unclear on how to debug the issue?</p>\n</blockquote>\n<p><a href=\"https://github.com/leanprover-community/mathlib/issues/9123\">#9123</a> and <a href=\"https://github.com/leanprover-community/mathlib/issues/10011\">#10011</a> are both stuck because of <code>fails_quickly</code>. The instructions are clear (although I spent a day finding how to run <code>mk_all</code>) but I just don't know how to interpret the TC inference trace. I couldn't see anything visibly wrong.</p>",
        "id": 261926845,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1637242254
    },
    {
        "content": "<p>I can write a library note (or blog post?) with instructions how to debug type class problems.</p>",
        "id": 261928942,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1637243334
    },
    {
        "content": "<p>Yes please! I would love to have that.</p>",
        "id": 261929184,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1637243454
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/9123\">#9123</a> seems to be stuck on building mathlib?</p>",
        "id": 261929604,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1637243672
    },
    {
        "content": "<p>I can fix quickly. It rotted a bit.</p>",
        "id": 261929931,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1637243827
    },
    {
        "content": "<p>In LTE we have the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[nolint unused_arguments]</span>\n<span class=\"kd\">def</span> <span class=\"n\">rescale</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">V</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">rescale</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_monoid</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_monoid</span> <span class=\"o\">(</span><span class=\"n\">rescale</span> <span class=\"n\">N</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">i</span>\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_group</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_group</span> <span class=\"o\">(</span><span class=\"n\">rescale</span> <span class=\"n\">N</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">i</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">rescale</span>\n</code></pre></div>\n<p>The <code>fails_quickly</code> linter complains. Why is this bad? This shouldn't create a loop, right?</p>",
        "id": 272399021,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1645189631
    },
    {
        "content": "<p>can you give an mwe? this doesn't seem to fail for me:</p>\n<p><a href=\"/user_uploads/3121/sXH-Srn5FLIbKn8GGVUFvYRS/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/sXH-Srn5FLIbKn8GGVUFvYRS/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/sXH-Srn5FLIbKn8GGVUFvYRS/image.png\"></a></div>",
        "id": 272399834,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1645190099
    },
    {
        "content": "<p>For context, I'm trying to clean up</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>rg -B1 quickly scripts/nolints.txt\n<span class=\"m\">103</span>--- for_mathlib/simplicial/iso.lean\n<span class=\"m\">104</span>:apply_nolint category_theory.simplicial_object.is_iso_of fails_quickly\n--\n<span class=\"m\">129</span>--- locally_constant/Vhat.lean\n<span class=\"m\">130</span>:apply_nolint SemiNormedGroup.normed_with_aut_LCC fails_quickly\n<span class=\"m\">131</span>:apply_nolint SemiNormedGroup.normed_with_aut_LocallyConstant fails_quickly\n--\n<span class=\"m\">171</span>-apply_nolint LC.T_inv unused_arguments\n<span class=\"m\">172</span>:apply_nolint LC.obj.normed_with_aut fails_quickly\n--\n<span class=\"m\">174</span>-apply_nolint LCFP.Tinv unused_arguments\n<span class=\"m\">175</span>:apply_nolint LCFP.obj.normed_with_aut fails_quickly\n--\n<span class=\"m\">202</span>--- rescale/basic.lean\n<span class=\"m\">203</span>:apply_nolint rescale.add_comm_group fails_quickly\n<span class=\"m\">204</span>:apply_nolint rescale.add_comm_monoid fails_quickly\n--\n<span class=\"m\">209</span>--- rescale/pseudo_normed_group.lean\n<span class=\"m\">210</span>:apply_nolint rescale.comphaus_filtered_pseudo_normed_group fails_quickly\n<span class=\"m\">211</span>:apply_nolint rescale.profinitely_filtered_pseudo_normed_group fails_quickly\n<span class=\"m\">212</span>:apply_nolint rescale.profinitely_filtered_pseudo_normed_group_with_Tinv fails_quickly\n<span class=\"m\">213</span>:apply_nolint rescale.pseudo_normed_group fails_quickly\n</code></pre></div>",
        "id": 272399870,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1645190116
    },
    {
        "content": "<p>In the hope that it will have a positive effect on the speed of the project</p>",
        "id": 272399906,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1645190142
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"284160\">@Eric Rodriguez</span> I don't have an mwe, just a complaining linter</p>",
        "id": 272399984,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1645190169
    },
    {
        "content": "<p>and I'm trying to say that the linter doesn't fail for me</p>",
        "id": 272400082,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1645190233
    },
    {
        "content": "<p>or does <code>fails_quickly</code> not run with <code>#lint</code>?</p>",
        "id": 272400109,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1645190253
    },
    {
        "content": "<p>Je ne sais pas</p>",
        "id": 272400188,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1645190282
    },
    {
        "content": "<p>it does seem to run as I can run <code>#lint fails_quickly</code>. what's the imports in the LTE file?</p>",
        "id": 272400362,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1645190388
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">polyhedral_lattice.basic</span>\n</code></pre></div>\n<p>which is part of LTE.</p>",
        "id": 272400476,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1645190440
    },
    {
        "content": "<p>even running it on LTE it seems to work fine: <a href=\"/user_uploads/3121/vdXJSKXYwqw8yr72APOdtFRI/image.png\">image.png</a> maybe just try remove the <code>nolint</code> and see if it shouts? seems to be fixed as far as I can tell..</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/vdXJSKXYwqw8yr72APOdtFRI/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/vdXJSKXYwqw8yr72APOdtFRI/image.png\"></a></div>",
        "id": 272400718,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1645190557
    },
    {
        "content": "<p>But it doesn't make sense to me that this <code>no_lint</code> would influence the <code>fails_quickly</code> linter</p>",
        "id": 272400830,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1645190637
    },
    {
        "content": "<p>urgh, I'm trying to look into this but <code>./scripts/get-cache.sh</code> seems to say that the LTE cache isn't up, even though Github seems to be done</p>",
        "id": 272401526,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1645191060
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> Do you have some time to debug this in LTE? I really don't know what is wrong with the instances that are currently being flagged.</p>",
        "id": 272504242,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1645260444
    },
    {
        "content": "<p>I managed to build it by hand, and try to lint it by hand, and I think the nolints are spurious, I think you can remove them and there won't be linting errors</p>",
        "id": 272521491,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1645280918
    },
    {
        "content": "<p>I forgot to respond here. Can I still be useful here? What failure do you want me to look at?<br>\nThe <code>fails_quickly</code> linter is a global linter, so it's possible that it succeeds on a declaration, but then fails if you import more files. Those files could have instances that loop or take a very long time to fail.</p>",
        "id": 273079978,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1645704194
    },
    {
        "content": "<p>For <code>rescale</code>: the instances you posted are no problem, but there is likely another instance (possibly having nothing to do with <code>rescale</code>) that is an issue.</p>",
        "id": 273080265,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1645704392
    },
    {
        "content": "<p>I'm unable to download the <code>lean-liquid</code> oleans with <code>scripts/get-cache.sh</code>, so it's hard for me to reproduce locally.</p>",
        "id": 273080929,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1645704896
    }
]