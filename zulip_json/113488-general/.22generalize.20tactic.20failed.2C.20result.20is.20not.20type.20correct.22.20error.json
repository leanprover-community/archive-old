[
    {
        "content": "<p>The following code results in <code>generalize tactic failed, result is not type correct</code> from <code>induction</code> tactic.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">trace.check</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">t</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">t</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"c1\">-- error here</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>And the extra printed information is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">check</span><span class=\"o\">]</span> <span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span>\n  <span class=\"n\">f</span> <span class=\"n\">t</span>\n<span class=\"n\">argument</span> <span class=\"n\">type</span>\n  <span class=\"n\">foo</span> <span class=\"n\">_x</span>\n<span class=\"n\">expected</span> <span class=\"n\">type</span>\n  <span class=\"n\">foo</span> <span class=\"mi\">1</span>\n</code></pre></div>\n<p>Do I miss anything? I thought that it should work. Do I need to create a custom induction principle?</p>\n<p>Interestingly, both</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"n\">t</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>and</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">foo</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">foo</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"n\">t</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">foo</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">t</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>work just fine.</p>",
        "id": 215977414,
        "sender_full_name": "Sorawee Porncharoenwase",
        "timestamp": 1604789572
    },
    {
        "content": "<p>A related question:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"n\">baz</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"n\">boo</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"mi\">2</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"n\">t</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>has a case for <code>foo.boo</code>. I thought that it should get ruled out since <code>t</code> is <code>foo 1</code>? Note that <code>cases t</code> correctly rules <code>foo.boo</code> out.</p>",
        "id": 215977658,
        "sender_full_name": "Sorawee Porncharoenwase",
        "timestamp": 1604790035
    },
    {
        "content": "<p>Also, let me know if there's a better place to ask newbie questions like this. I feel bad spamming the channel with questions.</p>",
        "id": 215977810,
        "sender_full_name": "Sorawee Porncharoenwase",
        "timestamp": 1604790314
    },
    {
        "content": "<p><code>induction t</code> is basically just <code>apply foo.rec_on t</code>. If you try to write a term directly using <code>foo.rec</code> I think you'll see where the problem is--the motive <code>C</code> that you'd want to write down isn't well-typed.</p>",
        "id": 215977935,
        "sender_full_name": "Reid Barton",
        "timestamp": 1604790531
    },
    {
        "content": "<p>Similarly, for the second question, <code>induction</code> just applies the recursor and one of the arguments of the recursor is the case for <code>boo</code>, so you get it as a new goal.</p>",
        "id": 215977945,
        "sender_full_name": "Reid Barton",
        "timestamp": 1604790578
    },
    {
        "content": "<p><code>cases</code> does more work to eliminate impossible cases and also knows how to handle your first case--if you want to see what it did you can replace <code>example</code> by <code>def x</code> and then <code>#print x</code> afterwards.</p>",
        "id": 215978015,
        "sender_full_name": "Reid Barton",
        "timestamp": 1604790670
    },
    {
        "content": "<p>In a little more detail, the problem in the first example is the result type of <code>foo.rec</code> is of the shape <code>Π {a : ℕ} (n : foo a), C a n</code>, but your <code>C a n</code> should be <code>f n = f n</code>--but this is only well-typed when <code>a</code> is <code>1</code> and not in general. (Once you understand this, the original error message should also make more sense--it's saying the argument to <code>f</code> could be <code>foo</code> of anything.)</p>",
        "id": 215978190,
        "sender_full_name": "Reid Barton",
        "timestamp": 1604790911
    },
    {
        "content": "<p>I see, thanks!</p>",
        "id": 215978358,
        "sender_full_name": "Sorawee Porncharoenwase",
        "timestamp": 1604791204
    },
    {
        "content": "<p>For the sake of completion, custom induction principle can be used to solve the problem:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"n\">baz</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"n\">foo</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"n\">boo</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"mi\">2</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">rec</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">foo.bar</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">baz</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">foo.baz</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">P</span> <span class=\"n\">x</span>\n<span class=\"bp\">|</span> <span class=\"n\">foo.bar</span> <span class=\"o\">:=</span> <span class=\"n\">bar</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">foo.baz</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">baz</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">rec</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">t</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">t</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">t</span> <span class=\"n\">using</span> <span class=\"n\">rec</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 215993774,
        "sender_full_name": "Sorawee Porncharoenwase",
        "timestamp": 1604819923
    }
]