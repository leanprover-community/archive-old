[
    {
        "content": "<p>I would like to define a mutually inductive type and function out of it. Is this possible? My example which I'd hoped might be accepted is:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">mutual</span> <span class=\"kn\">inductive</span> <span class=\"n\">edge_sequence</span><span class=\"o\">,</span> <span class=\"n\">add_edge_sequence</span>\n<span class=\"k\">with</span> <span class=\"n\">edge_sequence</span> <span class=\"o\">:</span> <span class=\"n\">layout</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">single</span> <span class=\"o\">{</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">layout</span> <span class=\"n\">G</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">edges</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">e</span> <span class=\"err\">∈</span> <span class=\"n\">L</span><span class=\"bp\">.</span><span class=\"n\">remaining_edges</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">edge_sequence</span> <span class=\"n\">L</span>\n<span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">{</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">layout</span> <span class=\"n\">G</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">edge_sequence</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">edges</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">e</span> <span class=\"err\">∈</span> <span class=\"o\">(</span><span class=\"n\">add_edge_sequence</span> <span class=\"n\">S</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"n\">remaining_edges</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">edge_sequence</span> <span class=\"n\">L</span>\n<span class=\"k\">with</span> <span class=\"n\">add_edge_sequence</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">layout</span> <span class=\"n\">G</span><span class=\"o\">},</span> <span class=\"n\">edge_sequence</span> <span class=\"n\">L</span> <span class=\"bp\">→</span> <span class=\"n\">layout</span> <span class=\"n\">G</span> <span class=\"bp\">×</span> <span class=\"n\">finset</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">boxes</span>\n<span class=\"bp\">|</span> <span class=\"n\">L</span> <span class=\"o\">(</span><span class=\"n\">single</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">L</span><span class=\"bp\">.</span><span class=\"n\">add_edge</span> <span class=\"n\">h</span>\n<span class=\"bp\">|</span> <span class=\"n\">L</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"n\">S</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">let</span> <span class=\"bp\">⟨</span><span class=\"n\">L&#39;</span><span class=\"o\">,</span> <span class=\"n\">B</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">L</span><span class=\"bp\">.</span><span class=\"n\">add_edge_sequence</span> <span class=\"n\">S</span> <span class=\"k\">in</span> <span class=\"k\">let</span> <span class=\"bp\">⟨</span><span class=\"n\">L&#39;&#39;</span><span class=\"o\">,</span> <span class=\"n\">B&#39;</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">L</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"n\">add_edge</span> <span class=\"n\">h</span> <span class=\"k\">in</span> <span class=\"bp\">⟨</span><span class=\"n\">L&#39;&#39;</span><span class=\"o\">,</span> <span class=\"n\">B</span> <span class=\"err\">∪</span> <span class=\"n\">B&#39;</span><span class=\"bp\">⟩</span>\n</pre></div>\n\n\n<p>(I can try to come up with a MWE if it's completely unclear what I'm going for here!)</p>",
        "id": 193696612,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1586671257
    },
    {
        "content": "<p>From this I only get the helpful: <code>unknown declaration '4._.0'</code></p>",
        "id": 193696621,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1586671274
    },
    {
        "content": "<p>Presuming Lean doesn't support this, does anyone who is good at induction know how to \"roll it by hand\"?</p>",
        "id": 193696627,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1586671312
    },
    {
        "content": "<p>(<span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>, points if you can guess what I'm doing)</p>",
        "id": 193696680,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1586671355
    },
    {
        "content": "<p>Oh, now I think I know. <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 193696689,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1586671402
    },
    {
        "content": "<p>The general scheme is called \"induction-recursion\" and it's stronger than lean's axiomatics, so this isn't always possible</p>",
        "id": 193697423,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586672914
    },
    {
        "content": "<p>do you have a MWE?</p>",
        "id": 193697434,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586672952
    },
    {
        "content": "<p>Is there a typo on the last line, where <code>L.1.add_edge</code> should be <code>L'.1.add_edge</code>?</p>",
        "id": 193697638,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586673369
    },
    {
        "content": "<p>I can't type check this because of the lack of MWE, but something like this should work</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">with_edge_sequence</span> <span class=\"o\">:</span> <span class=\"n\">layout</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">layout</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">single</span> <span class=\"o\">{</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">layout</span> <span class=\"n\">G</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">edges</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">e</span> <span class=\"err\">∈</span> <span class=\"n\">L</span><span class=\"bp\">.</span><span class=\"n\">remaining_edges</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">with_edge_sequence</span> <span class=\"n\">L</span> <span class=\"o\">(</span><span class=\"n\">L</span><span class=\"bp\">.</span><span class=\"n\">add_edge</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">{</span><span class=\"n\">L</span> <span class=\"n\">L&#39;</span> <span class=\"o\">:</span> <span class=\"n\">layout</span> <span class=\"n\">G</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">with_edge_sequence</span> <span class=\"n\">L</span> <span class=\"n\">L&#39;</span><span class=\"o\">)</span>\n  <span class=\"o\">{</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">edges</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">e</span> <span class=\"err\">∈</span> <span class=\"n\">L&#39;</span><span class=\"bp\">.</span><span class=\"n\">remaining_edges</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">with_edge_sequence</span> <span class=\"n\">L</span> <span class=\"o\">(</span><span class=\"n\">L&#39;</span><span class=\"bp\">.</span><span class=\"n\">add_edge</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n\n<span class=\"n\">def</span> <span class=\"n\">edge_sequence</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">layout</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"err\">Σ</span> <span class=\"n\">L&#39;</span><span class=\"o\">,</span> <span class=\"n\">with_edge_sequence</span> <span class=\"n\">L</span> <span class=\"n\">L&#39;</span>\n\n<span class=\"n\">def</span> <span class=\"n\">add_edge_sequence_boxes</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">L</span> <span class=\"n\">L&#39;</span> <span class=\"o\">:</span> <span class=\"n\">layout</span> <span class=\"n\">G</span><span class=\"o\">},</span> <span class=\"n\">with_edge_sequence</span> <span class=\"n\">L</span> <span class=\"n\">L&#39;</span> <span class=\"bp\">→</span> <span class=\"n\">finset</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">boxes</span>\n<span class=\"bp\">|</span> <span class=\"n\">L</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">with_edge_sequence</span><span class=\"bp\">.</span><span class=\"n\">single</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">L</span><span class=\"bp\">.</span><span class=\"n\">add_edge</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">with_edge_sequence</span><span class=\"bp\">.</span><span class=\"n\">cons</span> <span class=\"n\">L</span> <span class=\"n\">L&#39;</span> <span class=\"n\">S</span> <span class=\"n\">e</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">add_edge_sequence_boxes</span> <span class=\"n\">S</span> <span class=\"err\">∪</span> <span class=\"o\">(</span><span class=\"n\">L&#39;</span><span class=\"bp\">.</span><span class=\"n\">add_edge</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span>\n\n<span class=\"n\">def</span> <span class=\"n\">add_edge_sequence</span> <span class=\"o\">{</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">layout</span> <span class=\"n\">G</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">edge_sequence</span> <span class=\"n\">L</span> <span class=\"bp\">→</span> <span class=\"n\">layout</span> <span class=\"n\">G</span> <span class=\"bp\">×</span> <span class=\"n\">finset</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">boxes</span>\n<span class=\"bp\">|</span> <span class=\"bp\">⟨</span><span class=\"n\">L&#39;</span><span class=\"o\">,</span> <span class=\"n\">S</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">L&#39;</span><span class=\"o\">,</span> <span class=\"n\">add_edge_sequence_boxes</span> <span class=\"n\">S</span><span class=\"bp\">⟩</span>\n</pre></div>",
        "id": 193697864,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586673877
    },
    {
        "content": "<p>Lovely. Needed one minor tweak: in the <code>cons</code> constructor, I needed to move the <code>S</code> argument last or I get</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">invalid</span> <span class=\"n\">occurrence</span> <span class=\"n\">of</span> <span class=\"n\">recursive</span> <span class=\"n\">arg</span><span class=\"bp\">#</span><span class=\"mi\">5</span> <span class=\"n\">of</span> <span class=\"err\">&#39;</span><span class=\"n\">layout</span><span class=\"bp\">.</span><span class=\"n\">with_edge_sequence</span><span class=\"bp\">.</span><span class=\"n\">cons&#39;</span><span class=\"o\">,</span> <span class=\"n\">the</span> <span class=\"n\">body</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">functional</span> <span class=\"n\">type</span> <span class=\"n\">depends</span> <span class=\"n\">on</span> <span class=\"n\">it</span><span class=\"bp\">.</span>\n</pre></div>\n\n\n<p>which we've seen many times before (and is possibly a Lean bug?)</p>",
        "id": 193700832,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1586679341
    },
    {
        "content": "<p>lean doesn't like dependent args after recursive args</p>",
        "id": 193700882,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586679420
    },
    {
        "content": "<p>in the formal presentation we assume the two are partitioned but it doesn't make a practical difference</p>",
        "id": 193700891,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586679440
    },
    {
        "content": "<p>Is it something to do with dots and boxes?</p>",
        "id": 193700892,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586679449
    },
    {
        "content": "<p>except it's a bit annoying to reorder arguments</p>",
        "id": 193700894,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586679451
    },
    {
        "content": "<p>I recall this coming up during cyril's work on parametricity since the natural inductive type produced by the algorithm has this kind of out of order problem</p>",
        "id": 193700938,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586679524
    },
    {
        "content": "<p>It's actually going surprisingly well... Down to a few sorries (some easy, some less so :-)</p>",
        "id": 193703956,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1586684829
    },
    {
        "content": "<p>I think more or less this is one of the examples in one paper on induction-recursion, even.</p>",
        "id": 193712076,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586696160
    },
    {
        "content": "<p>Probably not useful any more but: <a href=\"https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.6.4575&amp;rep=rep1&amp;type=pdf\" title=\"https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.6.4575&amp;rep=rep1&amp;type=pdf\">https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.6.4575&amp;rep=rep1&amp;type=pdf</a> <code>Fresh</code>, bottom of page 4</p>",
        "id": 193712130,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586696258
    }
]