[
    {
        "content": "<p>Can I prove that a recursive definition <code>T → Prop</code> is well-founded if a clause wraps the recursive call with an exists (i.e. <code>f &lt;pattern&gt; := ∃ .., f &lt;subpattern&gt;</code>)? If so, how would I begin to do this?</p>",
        "id": 133793419,
        "sender_full_name": "Sean Leather",
        "timestamp": 1536752658
    },
    {
        "content": "<p>Oh, actually, it's not a strict subpattern, it's a function that uses a subpattern. Maybe that's my issue, not the exists.</p>",
        "id": 133793458,
        "sender_full_name": "Sean Leather",
        "timestamp": 1536752724
    },
    {
        "content": "<p>So, should I have something like <code>have sizeof (function-calling-subpattern) &lt; sizeof pattern</code> here?</p>",
        "id": 133793554,
        "sender_full_name": "Sean Leather",
        "timestamp": 1536752870
    },
    {
        "content": "<p>Okay, never mind, I think I figured out what I need to solve.</p>",
        "id": 133793805,
        "sender_full_name": "Sean Leather",
        "timestamp": 1536753137
    },
    {
        "content": "<p>I always get confused with these well-founded proofs.</p>",
        "id": 133793811,
        "sender_full_name": "Sean Leather",
        "timestamp": 1536753153
    },
    {
        "content": "<p>So I finally figured out how to prove that my recursion is well-founded. But I think it could be better.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">lc&#39;</span> <span class=\"o\">:</span> <span class=\"n\">exp</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">var</span> <span class=\"n\">fb</span> <span class=\"bp\">_</span><span class=\"o\">)</span>     <span class=\"o\">:=</span> <span class=\"n\">fb</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">app</span> <span class=\"n\">ef</span> <span class=\"n\">ea</span><span class=\"o\">)</span>    <span class=\"o\">:=</span>\n    <span class=\"k\">have</span> <span class=\"n\">depth</span> <span class=\"n\">ef</span> <span class=\"bp\">&lt;</span> <span class=\"n\">depth</span> <span class=\"o\">(</span><span class=\"n\">app</span> <span class=\"n\">ef</span> <span class=\"n\">ea</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">depth</span> <span class=\"n\">ea</span> <span class=\"bp\">&lt;</span> <span class=\"n\">depth</span> <span class=\"o\">(</span><span class=\"n\">app</span> <span class=\"n\">ef</span> <span class=\"n\">ea</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n    <span class=\"n\">lc&#39;</span> <span class=\"n\">ef</span> <span class=\"bp\">∧</span> <span class=\"n\">lc&#39;</span> <span class=\"n\">ea</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">lam</span> <span class=\"n\">v</span> <span class=\"n\">eb</span><span class=\"o\">)</span>     <span class=\"o\">:=</span>\n    <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">tagged</span> <span class=\"n\">V</span><span class=\"o\">)),</span>\n    <span class=\"k\">have</span> <span class=\"n\">depth</span> <span class=\"o\">(</span><span class=\"n\">open_fresh</span> <span class=\"n\">v</span> <span class=\"n\">L</span> <span class=\"n\">eb</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">depth</span> <span class=\"o\">(</span><span class=\"n\">lam</span> <span class=\"n\">v</span> <span class=\"n\">eb</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">pos_iff_ne_zero&#39;</span><span class=\"o\">],</span>\n    <span class=\"n\">lc&#39;</span> <span class=\"o\">(</span><span class=\"n\">open_fresh</span> <span class=\"n\">v</span> <span class=\"n\">L</span> <span class=\"n\">eb</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">let_</span> <span class=\"n\">v</span> <span class=\"n\">ed</span> <span class=\"n\">eb</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"k\">have</span> <span class=\"n\">depth</span> <span class=\"n\">ed</span> <span class=\"bp\">&lt;</span> <span class=\"n\">depth</span> <span class=\"o\">(</span><span class=\"n\">let_</span> <span class=\"n\">v</span> <span class=\"n\">ed</span> <span class=\"n\">eb</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n    <span class=\"n\">lc&#39;</span> <span class=\"n\">ed</span> <span class=\"bp\">∧</span>\n    <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">tagged</span> <span class=\"n\">V</span><span class=\"o\">)),</span>\n    <span class=\"k\">have</span> <span class=\"n\">depth</span> <span class=\"o\">(</span><span class=\"n\">open_fresh</span> <span class=\"n\">v</span> <span class=\"n\">L</span> <span class=\"n\">eb</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">depth</span> <span class=\"o\">(</span><span class=\"n\">let_</span> <span class=\"n\">v</span> <span class=\"n\">ed</span> <span class=\"n\">eb</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n    <span class=\"n\">lc&#39;</span> <span class=\"o\">(</span><span class=\"n\">open_fresh</span> <span class=\"n\">v</span> <span class=\"n\">L</span> <span class=\"n\">eb</span><span class=\"o\">)</span>\n  <span class=\"n\">using_well_founded</span> <span class=\"o\">{</span>\n    <span class=\"n\">dec_tac</span> <span class=\"o\">:=</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">assumption</span><span class=\"o\">,</span>\n    <span class=\"n\">rel_tac</span> <span class=\"o\">:=</span> <span class=\"bp\">λ_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">exact</span> <span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"n\">measure_wf</span> <span class=\"n\">depth</span><span class=\"bp\">⟩</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n</pre></div>\n\n\n<p>It would be nice if I could, say, use <code>simp</code> for the well-founded condition instead of all of those <code>have ... := simp</code>s. Also, I tried <code>instance : has_sizeof (exp V) := ⟨depth⟩</code> so that I wouldn't need to specify <code>rel_tac := λ_ _, `[exact ⟨_, measure_wf depth⟩]</code>, but that didn't seem to work. Any suggestions?</p>",
        "id": 133803135,
        "sender_full_name": "Sean Leather",
        "timestamp": 1536763209
    },
    {
        "content": "<p>For the <code>have</code>, what if you had:</p>\n<div class=\"codehilite\"><pre><span></span> <span class=\"n\">dec_tac</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">assumption</span><span class=\"o\">,</span>\n</pre></div>\n\n\n<p>in your <code>  using_well_founded</code> clause?</p>",
        "id": 133803664,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1536763695
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> Good idea, but, unfortunately, that doesn't work.</p>",
        "id": 133812958,
        "sender_full_name": "Sean Leather",
        "timestamp": 1536772447
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Do you have any thoughts on the above in this thread? Basically, I want to write <code>lc'</code> without <code>have</code>ing to redeclare all of these theorems locally. Ideally, I would like to avoid <code>using_well_founded</code> at all, but that's secondary.</p>",
        "id": 133815702,
        "sender_full_name": "Sean Leather",
        "timestamp": 1536775272
    },
    {
        "content": "<p>did Simon's suggestion work?</p>",
        "id": 133815806,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536775385
    },
    {
        "content": "<p>No.</p>",
        "id": 133815820,
        "sender_full_name": "Sean Leather",
        "timestamp": 1536775395
    },
    {
        "content": "<p>what is <code>exp</code>?</p>",
        "id": 133815841,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536775436
    },
    {
        "content": "<p>Why not? If all your proofs are <code>by simp</code> then it should work as a discharger</p>",
        "id": 133815845,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536775440
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">assumption</span> <span class=\"n\">tactic</span> <span class=\"n\">failed</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">decidable_eq</span> <span class=\"n\">V</span><span class=\"o\">,</span>\n<span class=\"n\">lc&#39;</span> <span class=\"o\">:</span> <span class=\"n\">exp</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span>\n<span class=\"n\">lc&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"bp\">_</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">exp</span> <span class=\"n\">V</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"bp\">_</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">exp</span> <span class=\"n\">V</span><span class=\"o\">),</span> <span class=\"n\">has_well_founded</span><span class=\"bp\">.</span><span class=\"n\">r</span> <span class=\"bp\">_</span><span class=\"n\">y</span> <span class=\"bp\">_</span><span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span>\n<span class=\"n\">ef</span> <span class=\"n\">ea</span> <span class=\"o\">:</span> <span class=\"n\">exp</span> <span class=\"n\">V</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"bp\">_</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">exp</span> <span class=\"n\">V</span><span class=\"o\">),</span> <span class=\"n\">has_well_founded</span><span class=\"bp\">.</span><span class=\"n\">r</span> <span class=\"bp\">_</span><span class=\"n\">y</span> <span class=\"o\">(</span><span class=\"n\">app</span> <span class=\"n\">ef</span> <span class=\"n\">ea</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"err\">⊢</span> <span class=\"n\">measure</span> <span class=\"n\">depth</span> <span class=\"n\">ef</span> <span class=\"o\">(</span><span class=\"n\">app</span> <span class=\"n\">ef</span> <span class=\"n\">ea</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 133815909,
        "sender_full_name": "Sean Leather",
        "timestamp": 1536775477
    },
    {
        "content": "<p>actually you should just use <code> `[simp]</code> as the discharger</p>",
        "id": 133815914,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536775486
    },
    {
        "content": "<p>That was what I initially tried, too. No luck.</p>",
        "id": 133815924,
        "sender_full_name": "Sean Leather",
        "timestamp": 1536775503
    },
    {
        "content": "<p>make that <code>simp [measure, inv_image]</code></p>",
        "id": 133815936,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536775514
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">assumption</span> <span class=\"n\">tactic</span> <span class=\"n\">failed</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">decidable_eq</span> <span class=\"n\">V</span><span class=\"o\">,</span>\n<span class=\"n\">lc&#39;</span> <span class=\"o\">:</span> <span class=\"n\">exp</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span>\n<span class=\"n\">lc&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"bp\">_</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">exp</span> <span class=\"n\">V</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"bp\">_</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">exp</span> <span class=\"n\">V</span><span class=\"o\">),</span> <span class=\"n\">has_well_founded</span><span class=\"bp\">.</span><span class=\"n\">r</span> <span class=\"bp\">_</span><span class=\"n\">y</span> <span class=\"bp\">_</span><span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span>\n<span class=\"n\">ef</span> <span class=\"n\">ea</span> <span class=\"o\">:</span> <span class=\"n\">exp</span> <span class=\"n\">V</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"bp\">_</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">exp</span> <span class=\"n\">V</span><span class=\"o\">),</span> <span class=\"n\">has_well_founded</span><span class=\"bp\">.</span><span class=\"n\">r</span> <span class=\"bp\">_</span><span class=\"n\">y</span> <span class=\"o\">(</span><span class=\"n\">app</span> <span class=\"n\">ef</span> <span class=\"n\">ea</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"err\">⊢</span> <span class=\"n\">inv_image</span> <span class=\"n\">has_lt</span><span class=\"bp\">.</span><span class=\"n\">lt</span> <span class=\"n\">depth</span> <span class=\"n\">ef</span> <span class=\"o\">(</span><span class=\"n\">app</span> <span class=\"n\">ef</span> <span class=\"n\">ea</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 133815950,
        "sender_full_name": "Sean Leather",
        "timestamp": 1536775549
    },
    {
        "content": "<p>I searched <code>inductive.*exp</code> but nothing came up</p>",
        "id": 133816009,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536775581
    },
    {
        "content": "<p>it's in sean's repo</p>",
        "id": 133816016,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536775593
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">measure</span><span class=\"o\">,</span> <span class=\"n\">inv_image</span><span class=\"o\">]]</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">assumption</span><span class=\"o\">,</span>\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">assumption</span> <span class=\"n\">tactic</span> <span class=\"n\">failed</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">no</span> <span class=\"n\">goals</span>\n</pre></div>",
        "id": 133816032,
        "sender_full_name": "Sean Leather",
        "timestamp": 1536775609
    },
    {
        "content": "<p>and drop the <code>asssumption</code></p>",
        "id": 133816043,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536775625
    },
    {
        "content": "<p>Kenny, it's an inductive. But it's not relevant to the issue.</p>",
        "id": 133816047,
        "sender_full_name": "Sean Leather",
        "timestamp": 1536775627
    },
    {
        "content": "<p>Ah ha!</p>",
        "id": 133816056,
        "sender_full_name": "Sean Leather",
        "timestamp": 1536775646
    },
    {
        "content": "<p>That works. Thanks! Any way to simplify away the <code>using_well_founded</code>?</p>",
        "id": 133816138,
        "sender_full_name": "Sean Leather",
        "timestamp": 1536775742
    },
    {
        "content": "<p>Can I define my own instance of...?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">class</span> <span class=\"n\">has_well_founded</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">wf</span> <span class=\"o\">:</span> <span class=\"n\">well_founded</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 133816244,
        "sender_full_name": "Sean Leather",
        "timestamp": 1536775850
    },
    {
        "content": "<p>I mean, will defining an instance of <code>has_well_founded</code> allow me to remove <code>using_well_founded</code>?</p>",
        "id": 133816270,
        "sender_full_name": "Sean Leather",
        "timestamp": 1536775899
    },
    {
        "content": "<p>I think so. You may also have to set the priority of <code>has_well_founded_of_has_sizeof</code> to 0</p>",
        "id": 133886977,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1536847761
    },
    {
        "content": "<p>I did this for polynomials. I had to write <code>dec_tac := tactic.assumption </code> everywhere, but other than that it worked.</p>",
        "id": 133887243,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1536847958
    }
]