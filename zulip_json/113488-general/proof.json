[
    {
        "content": "<p>Does anyone know how to write the proof of  (∩ i, D i) ∪ (∩ i, E i) ⊆ ∩ i, (D i ∪ E i)  in lean??</p>",
        "id": 188962492,
        "sender_full_name": "Jane",
        "timestamp": 1582575975
    },
    {
        "content": "<p>can you write the theorem in lean and use <code>sorry</code> for the proof and then post the code here?</p>",
        "id": 188962700,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1582576138
    },
    {
        "content": "<p>I am in a math class of this lol</p>",
        "id": 188962741,
        "sender_full_name": "Jane",
        "timestamp": 1582576175
    },
    {
        "content": "<p>This is the first time I use this chat room, nice to meet you btw. How can I post it here?<br>\nlike this?<br>\nexample : (∩ i, D i) ∪ (∩ i, E i) ⊆ ∩ i, (D i ∪ E i) :=<br>\n    sorry</p>",
        "id": 188962847,
        "sender_full_name": "Jane",
        "timestamp": 1582576232
    },
    {
        "content": "<p>that would be closer, but it wouldn't compile because you have not specified the types of D and E</p>",
        "id": 188963058,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1582576380
    },
    {
        "content": "<p>You need to surround your code with <code> ```lean </code> and <code> ``` </code></p>",
        "id": 188963078,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1582576399
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">U</span> <span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n<span class=\"kn\">variables</span> <span class=\"n\">D</span> <span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">U</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"err\">∩</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">D</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"err\">∪</span> <span class=\"o\">(</span><span class=\"err\">∩</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">E</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"err\">⊆</span> <span class=\"err\">∩</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"n\">i</span> <span class=\"err\">∪</span> <span class=\"n\">E</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"k\">assume</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"k\">assume</span> <span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"o\">(</span><span class=\"err\">∩</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">D</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"err\">∪</span> <span class=\"o\">(</span><span class=\"err\">∩</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">E</span> <span class=\"n\">i</span><span class=\"o\">),</span>\n    <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">sorry</span><span class=\"o\">)(</span><span class=\"n\">sorry</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>This is what I got so far.</p>",
        "id": 188963237,
        "sender_full_name": "Jane",
        "timestamp": 1582576498
    },
    {
        "content": "<p>Is that accepted by Lean?</p>",
        "id": 188963366,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1582576572
    },
    {
        "content": "<p>The intersection symbols don't look right.</p>",
        "id": 188963380,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1582576583
    },
    {
        "content": "<p>Non-pedagogic answer:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">open</span> <span class=\"n\">set</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">zou</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"err\">⋂</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">C</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"err\">∪</span> <span class=\"o\">(</span><span class=\"err\">⋂</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">D</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"err\">⊆</span> <span class=\"o\">(</span><span class=\"err\">⋂</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">C</span> <span class=\"n\">i</span> <span class=\"err\">∪</span> <span class=\"n\">D</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">union_subset</span> <span class=\"o\">(</span><span class=\"n\">Inter_subset_Inter</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">subset_union_left</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">Inter_subset_Inter</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">subset_union_right</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">))</span>\n</pre></div>",
        "id": 188963393,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1582576593
    },
    {
        "content": "<p>Sébastien intersections look right.</p>",
        "id": 188963420,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1582576618
    },
    {
        "content": "<p>I have no clue. our teacher uses cocalc</p>",
        "id": 188963424,
        "sender_full_name": "Jane",
        "timestamp": 1582576622
    },
    {
        "content": "<p>use copy paste</p>",
        "id": 188963439,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582576637
    },
    {
        "content": "<p>Sébastien, do you mean this lemma is not in mathlib?</p>",
        "id": 188963510,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1582576686
    },
    {
        "content": "<p>are you using cocalc, or do you have a local installation? In either case, lean should give you an error if you use the wrong intersection symbol</p>",
        "id": 188963513,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582576689
    },
    {
        "content": "<p>This is shocking</p>",
        "id": 188963514,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1582576690
    },
    {
        "content": "<p>I'm not that shocked that this lemma is not available, but it wouldn't hurt to add it</p>",
        "id": 188963541,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582576718
    },
    {
        "content": "<p>probably <code>finish</code> can handle it</p>",
        "id": 188963557,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582576736
    },
    {
        "content": "<p>It says \"unexpected token\" what does that suppose to mean?</p>",
        "id": 188963583,
        "sender_full_name": "Jane",
        "timestamp": 1582576772
    },
    {
        "content": "<p>that means you used the wrong symbol</p>",
        "id": 188963593,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582576783
    },
    {
        "content": "<p>oh, but I copy the lemma you post here, I am so frustrated</p>",
        "id": 188963674,
        "sender_full_name": "Jane",
        "timestamp": 1582576810
    },
    {
        "content": "<p>The problem is that <code>∩</code> is the binary intersection symbol, and <code>⋂</code> is the \"big\" intersection</p>",
        "id": 188963680,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582576814
    },
    {
        "content": "<p>which is for doing indexed intersection</p>",
        "id": 188963685,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582576824
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n <span class=\"o\">(</span><span class=\"err\">⋂</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">D</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"err\">∪</span> <span class=\"o\">(</span><span class=\"err\">⋂</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">E</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"err\">⊆</span> <span class=\"err\">⋂</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"n\">i</span> <span class=\"err\">∪</span> <span class=\"n\">E</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">finish</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>does work</p>",
        "id": 188963687,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1582576825
    },
    {
        "content": "<p>non-pedagogical answer 2:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">lattice</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">U</span> <span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n<span class=\"kn\">variables</span> <span class=\"n\">D</span> <span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">U</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"err\">⋂</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">D</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"err\">∪</span> <span class=\"o\">(</span><span class=\"err\">⋂</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">E</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"err\">⊆</span> <span class=\"err\">⋂</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"n\">i</span> <span class=\"err\">∪</span> <span class=\"n\">E</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">rintros</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"bp\">|</span> <span class=\"n\">hx</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"bp\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩;</span> <span class=\"o\">[</span><span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"n\">right</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">hx</span> <span class=\"bp\">_</span> <span class=\"bp\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span>\n</pre></div>",
        "id": 188963703,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1582576845
    },
    {
        "content": "<p>It's a bit unfortunate that broken syntax highlighting flags that big intersection symbol</p>",
        "id": 188963723,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1582576863
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"266443\">@Jane</span> Aside: Who is the teacher?</p>",
        "id": 188963734,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1582576872
    },
    {
        "content": "<p><code>finish</code> does not kill it. Is is not in mathlib (at least, it is not found by <code>library_search</code>). And I am not really surprised it is not there, as it is not that common or useful -- I mean, if it is not in mathlib it means that noone has needed it until now.</p>",
        "id": 188963742,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1582576877
    },
    {
        "content": "<p>Paige N? I am in the Ohio State</p>",
        "id": 188963759,
        "sender_full_name": "Jane",
        "timestamp": 1582576890
    },
    {
        "content": "<p>oh hey, my alma mater</p>",
        "id": 188963769,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582576902
    },
    {
        "content": "<p>they are doing lean now?</p>",
        "id": 188963794,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582576915
    },
    {
        "content": "<p><code>finish</code> kills it after <code>intro x</code></p>",
        "id": 188963796,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1582576916
    },
    {
        "content": "<p>Yes indeed.</p>",
        "id": 188963858,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1582576941
    },
    {
        "content": "<p>whaaaaaat is going on now?? I am so lost.</p>",
        "id": 188963867,
        "sender_full_name": "Jane",
        "timestamp": 1582576951
    },
    {
        "content": "<p>Let me try a semi-pedagogical one:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span>\n\n<span class=\"kn\">set_option</span> <span class=\"n\">pp</span><span class=\"bp\">.</span><span class=\"n\">beta</span> <span class=\"n\">true</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n <span class=\"o\">(</span><span class=\"err\">⋂</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">D</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"err\">∪</span> <span class=\"o\">(</span><span class=\"err\">⋂</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">E</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"err\">⊆</span> <span class=\"err\">⋂</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"n\">i</span> <span class=\"err\">∪</span> <span class=\"n\">E</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">rintro</span> <span class=\"bp\">_</span> <span class=\"bp\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">hl</span> <span class=\"n\">hr</span><span class=\"o\">,</span>\n  <span class=\"n\">left</span><span class=\"o\">,</span>\n  <span class=\"n\">finish</span><span class=\"o\">,</span>\n  <span class=\"n\">right</span><span class=\"o\">,</span>\n  <span class=\"n\">finish</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 188963892,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1582576981
    },
    {
        "content": "<p>At least you can follow the main steps of the proof.</p>",
        "id": 188963936,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1582576996
    },
    {
        "content": "<p>but I guess the <code>rintro</code> line looks pretty mysterious</p>",
        "id": 188963978,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1582577036
    },
    {
        "content": "<p>maybe use <code>simp</code> there</p>",
        "id": 188964021,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582577043
    },
    {
        "content": "<p>non-pedagogical one 3:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">lattice</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">lattice</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">U</span> <span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n<span class=\"kn\">variables</span> <span class=\"n\">D</span> <span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">U</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"err\">⋂</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">D</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"err\">∪</span> <span class=\"o\">(</span><span class=\"err\">⋂</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">E</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"err\">⊆</span> <span class=\"err\">⋂</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"n\">i</span> <span class=\"err\">∪</span> <span class=\"n\">E</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"err\">⨅</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">D</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"err\">⊔</span> <span class=\"o\">(</span><span class=\"err\">⨅</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">E</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"err\">⨅</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"n\">i</span> <span class=\"err\">⊔</span> <span class=\"n\">E</span> <span class=\"n\">i</span><span class=\"o\">),</span>\n<span class=\"k\">from</span> <span class=\"n\">le_infi</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">sup_le_sup</span> <span class=\"o\">(</span><span class=\"n\">infi_le</span> <span class=\"n\">D</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">infi_le</span> <span class=\"n\">E</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 188964065,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1582577078
    },
    {
        "content": "<p>Yes, <code>simp, intro i</code> is better than <code>rintro</code> dark magic</p>",
        "id": 188964081,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1582577092
    },
    {
        "content": "<p>I don't see what's wrong with Sébastien's proof</p>",
        "id": 188964138,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1582577131
    },
    {
        "content": "<p>Where is that \"lattices for the win\" emoji again?</p>",
        "id": 188964144,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1582577138
    },
    {
        "content": "<p>it's perfectly reasonable and it flows from the theorem</p>",
        "id": 188964146,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1582577139
    },
    {
        "content": "<p>I think your proof 3 is the same as Sebastien's first proof</p>",
        "id": 188964154,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582577144
    },
    {
        "content": "<p>all proofs are equal</p>",
        "id": 188964166,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1582577155
    },
    {
        "content": "<p>It's the same after recasting in lattices terms</p>",
        "id": 188964219,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1582577167
    },
    {
        "content": "<p>do you actually need the show?</p>",
        "id": 188964239,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582577188
    },
    {
        "content": "<p>Probably not.</p>",
        "id": 188964278,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1582577234
    },
    {
        "content": "<p>OMG thank you guys very much although I am confused about it</p>",
        "id": 188964280,
        "sender_full_name": "Jane",
        "timestamp": 1582577237
    },
    {
        "content": "<p>lol there are too many non pedagogical proofs floating around now</p>",
        "id": 188964300,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582577257
    },
    {
        "content": "<p>Sorry it turned into an expert discussion pretty quickly</p>",
        "id": 188964313,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1582577272
    },
    {
        "content": "<p>Just being curious, where do people use lean??</p>",
        "id": 188964318,
        "sender_full_name": "Jane",
        "timestamp": 1582577274
    },
    {
        "content": "<p>on their computers?</p>",
        "id": 188964371,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582577296
    },
    {
        "content": "<p>like in which area??</p>",
        "id": 188964392,
        "sender_full_name": "Jane",
        "timestamp": 1582577325
    },
    {
        "content": "<p>pure math?</p>",
        "id": 188964404,
        "sender_full_name": "Jane",
        "timestamp": 1582577338
    },
    {
        "content": "<p>what area are you in?</p>",
        "id": 188964415,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582577348
    },
    {
        "content": "<p>Biology lol</p>",
        "id": 188964427,
        "sender_full_name": "Jane",
        "timestamp": 1582577360
    },
    {
        "content": "<p>finally, in the style of Jane's attempt:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">lattice</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">U</span> <span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n<span class=\"kn\">variables</span> <span class=\"n\">D</span> <span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">U</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"err\">⋂</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">D</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"err\">∪</span> <span class=\"o\">(</span><span class=\"err\">⋂</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">E</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"err\">⊆</span> <span class=\"err\">⋂</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"n\">i</span> <span class=\"err\">∪</span> <span class=\"n\">E</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">assume</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">U</span><span class=\"o\">,</span>\n<span class=\"k\">assume</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"o\">(</span><span class=\"err\">⋂</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">D</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"err\">∪</span> <span class=\"o\">(</span><span class=\"err\">⋂</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">E</span> <span class=\"n\">i</span><span class=\"o\">),</span>\n<span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"n\">h</span>\n  <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">hd</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"err\">⋂</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">D</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n    <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem_Inter_of_mem</span> <span class=\"err\">$</span> <span class=\"k\">assume</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem_Inter</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">hd</span> <span class=\"n\">i</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">he</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"err\">⋂</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">E</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n    <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem_Inter_of_mem</span> <span class=\"err\">$</span> <span class=\"k\">assume</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem_Inter</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">he</span> <span class=\"n\">i</span><span class=\"o\">))</span>\n</pre></div>",
        "id": 188964437,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1582577369
    },
    {
        "content": "<p>formal math sits somewhere between pure math, computer science and logic</p>",
        "id": 188964446,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582577378
    },
    {
        "content": "<p>and biology</p>",
        "id": 188964451,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1582577384
    },
    {
        "content": "<p>that's a nice pedagogical proof kenny</p>",
        "id": 188964575,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582577465
    },
    {
        "content": "<p>Thank you guys so much</p>",
        "id": 188964579,
        "sender_full_name": "Jane",
        "timestamp": 1582577474
    },
    {
        "content": "<p>although maybe the tactic folks won't like it</p>",
        "id": 188964599,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582577495
    },
    {
        "content": "<p>do any of you know Dr. Paige North??</p>",
        "id": 188964862,
        "sender_full_name": "Jane",
        "timestamp": 1582577680
    },
    {
        "content": "<p>I don't think she has appeared here, and I don't think I met her in undergrad either. Is she in biology?</p>",
        "id": 188964996,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582577791
    },
    {
        "content": "<p><a href=\"https://paigenorth.github.io/\" target=\"_blank\" title=\"https://paigenorth.github.io/\">https://paigenorth.github.io/</a></p>",
        "id": 188965034,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1582577817
    },
    {
        "content": "<p>Doesn't sounds like biology to me</p>",
        "id": 188965049,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1582577826
    },
    {
        "content": "<p>I am in math-bio track and ecology double major now.</p>",
        "id": 188965141,
        "sender_full_name": "Jane",
        "timestamp": 1582577889
    },
    {
        "content": "<p>Oh, she does HoTT</p>",
        "id": 188965191,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582577950
    },
    {
        "content": "<p>Hey sorry to bother you guys' Monday night, here comes another problem. I really don't know how to do this. </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variables</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">U</span>\n<span class=\"kn\">variables</span> <span class=\"n\">D</span> <span class=\"n\">E</span> <span class=\"n\">F</span><span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">U</span>\n<span class=\"kn\">variable</span> <span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">U</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"err\">⊆</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">powerset</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"err\">⊆</span> <span class=\"o\">(</span><span class=\"n\">powerset</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span>\n</pre></div>\n\n\n<p>this looks so obvious but none of my friends know how to do it....</p>",
        "id": 188988003,
        "sender_full_name": "Jane",
        "timestamp": 1582600458
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"266443\">@Jane</span> I would start with</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">h</span> <span class=\"n\">s</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n    <span class=\"n\">sorry</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">h</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n    <span class=\"n\">sorry</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 188997362,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1582616120
    },
    {
        "content": "<p>See if that helps...</p>",
        "id": 188997365,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1582616143
    }
]