[
    {
        "content": "<p>For some reason, maybe I'm doing something wrong but <code>leanproject update-mathlib</code> does not update the <code>mathlib</code>, when I try to do <code>new</code>, it does not pick up the files in <code>src/</code> and says the project does not depend on mathlib.</p>\n<p>Also, I don't know how feasible it is to say to <code>leanproject</code> to use my own <code>.git</code> (the root one) rather than doing the Git management for me.</p>\n<p>Here's the repository: <a href=\"https://github.com/RaitoBezarius/projet-maths-lean/tree/master/espaces-metriques\" title=\"https://github.com/RaitoBezarius/projet-maths-lean/tree/master/espaces-metriques\">https://github.com/RaitoBezarius/projet-maths-lean/tree/master/espaces-metriques</a> (there are a lot of things to say regarding the code… but that will be for another day! :D)</p>",
        "id": 192900311,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1585994828
    },
    {
        "content": "<p>FWIW, I'm using <code>mathlibtools-0.0.4</code></p>",
        "id": 192900325,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1585994849
    },
    {
        "content": "<p>What happens if you type leanproject up in the root directory? Note that leanproject does not support lean repositories that are not git repositories</p>",
        "id": 192900397,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585994972
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/leanproject.20issues.20with.20add-mathlib.2Fupdate-mathlib/near/192900397\" title=\"#narrow/stream/113488-general/topic/leanproject.20issues.20with.20add-mathlib.2Fupdate-mathlib/near/192900397\">said</a>:</p>\n<blockquote>\n<p>What happens if you type leanproject up in the root directory? Note that leanproject does not support lean repositories that are not git repositories</p>\n</blockquote>\n<p>It's a git repository technically, just I don't want the <code>.git</code> to be in the project folder, maybe it's a limitation of <code>leanproject</code> though.</p>",
        "id": 192900445,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1585995017
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/leanproject.20issues.20with.20add-mathlib.2Fupdate-mathlib/near/192900397\" title=\"#narrow/stream/113488-general/topic/leanproject.20issues.20with.20add-mathlib.2Fupdate-mathlib/near/192900397\">said</a>:</p>\n<blockquote>\n<p>What happens if you type leanproject up in the root directory? Note that leanproject does not support lean repositories that are not git repositories</p>\n</blockquote>\n<div class=\"codehilite\"><pre><span></span>mathlib: cloning https://github.com/leanprover-community/mathlib to _target/deps/mathlib\n&gt; git clone https://github.com/leanprover-community/mathlib _target/deps/mathlib\nCloning into &#39;_target/deps/mathlib&#39;...\nremote: Enumerating objects: 230, done.\nremote: Counting objects: 100% (230/230), done.\nremote: Compressing objects: 100% (151/151), done.\nremote: Total 40939 (delta 120), reused 127 (delta 76), pack-reused 40709\nReceiving objects: 100% (40939/40939), 19.85 MiB | 12.06 MiB/s, done.\nResolving deltas: 100% (31222/31222), done.\n&gt; git checkout --detach 906874e2f337e78235d81e27f01f25152846e392    # in directory _target/deps/mathlib\nHEAD is now at 906874e2 feat(category_theory): quotient categories (#2310)\nconfiguring _user_local_packages 1\nWARNING: leanpkg configurations not specifying `path = &quot;src&quot;` are deprecated.\nmathlib: trying to update _target/deps/mathlib to revision 906874e2f337e78235d81e27f01f25152846e392\n&gt; git checkout --detach 906874e2f337e78235d81e27f01f25152846e392    # in directory _target/deps/mathlib\nHEAD is now at 906874e2 feat(category_theory): quotient categories (#2310)\nLooking for local mathlib oleans\nFound local mathlib oleans\n</pre></div>",
        "id": 192900451,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1585995041
    },
    {
        "content": "<p>\"the project depends on mathlib\" := \"mathlib is listed as a dependency in leanpkg toml\"</p>",
        "id": 192900458,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585995054
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/leanproject.20issues.20with.20add-mathlib.2Fupdate-mathlib/near/192900458\" title=\"#narrow/stream/113488-general/topic/leanproject.20issues.20with.20add-mathlib.2Fupdate-mathlib/near/192900458\">said</a>:</p>\n<blockquote>\n<p>\"the project depends on mathlib\" := \"mathlib is listed as a dependency in leanpkg toml\"</p>\n</blockquote>\n<p>Ah! I thought it looked at the imports!</p>",
        "id": 192900493,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1585995117
    },
    {
        "content": "<p>You seem to have a very up to date mathlib judging by that output. What's the question?</p>",
        "id": 192900538,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585995142
    },
    {
        "content": "<p>Well, in <code>_target/deps/mathlib</code>, the real revision is much older than the one mentioned.<br>\nMoreover, <code>leanproject get-mathlib-cache</code> fails with <code>Missing leanpkg.toml</code>, though it's right there in the folder.</p>",
        "id": 192900555,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1585995184
    },
    {
        "content": "<p>I should say that my claim about the toml is a conjecture but I think that's the sensible way to do it</p>",
        "id": 192900558,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585995203
    },
    {
        "content": "<p>Can you post your leanpkg.toml?</p>",
        "id": 192900608,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585995253
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">[package]</span>\n<span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s\">&quot;espaces_metriques&quot;</span>\n<span class=\"n\">version</span> <span class=\"o\">=</span> <span class=\"s\">&quot;0.1&quot;</span>\n<span class=\"n\">lean_version</span> <span class=\"o\">=</span> <span class=\"s\">&quot;leanprover-community/lean:3.7.1&quot;</span>\n<span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"s\">&quot;src&quot;</span>\n\n<span class=\"k\">[dependencies]</span>\n<span class=\"n\">mathlib</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"n\">git</span> <span class=\"o\">=</span> <span class=\"s\">&quot;https://github.com/leanprover-community/mathlib&quot;</span><span class=\"p\">,</span> <span class=\"n\">rev</span> <span class=\"o\">=</span> <span class=\"s\">&quot;d12bbc009fe677e4608e6973b9dbdefa61f78577&quot;</span><span class=\"p\">}</span>\n</pre></div>",
        "id": 192900613,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1585995279
    },
    {
        "content": "<p>(I wonder if it would be interesting to go 3.7.2 for Lean…)</p>",
        "id": 192900622,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1585995293
    },
    {
        "content": "<p>Don't touch the toml</p>",
        "id": 192900627,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585995307
    },
    {
        "content": "<p>That's leanproject's job</p>",
        "id": 192900638,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585995322
    },
    {
        "content": "<p>Hmm, I think I set up initially those files using leanpkg, is it compatible with leanproject?</p>",
        "id": 192900645,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1585995352
    },
    {
        "content": "<p>Is the mathlib commit in the toml the same as the mathlib commit checked our in _target?</p>",
        "id": 192900647,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585995356
    },
    {
        "content": "<p>You can't use leanpkg any more</p>",
        "id": 192900691,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585995370
    },
    {
        "content": "<p>That's your problem</p>",
        "id": 192900693,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585995380
    },
    {
        "content": "<p>Leanpkg only works with 3.4.2</p>",
        "id": 192900695,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585995394
    },
    {
        "content": "<p>Ahhh, okay</p>",
        "id": 192900697,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1585995404
    },
    {
        "content": "<p>But if you're not using it this shouldn't be a problem</p>",
        "id": 192900708,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585995425
    },
    {
        "content": "<p>I mean it was fine to set things up but don't use it any more</p>",
        "id": 192900711,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585995438
    },
    {
        "content": "<p>Well I tried something simple, rm'd the leanpkg.toml, leanpkg.path and _target and tried <code>leanproject new</code>, that should work, right?</p>",
        "id": 192900714,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1585995453
    },
    {
        "content": "<p>What is the answer to my question about commits</p>",
        "id": 192900715,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585995455
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/leanproject.20issues.20with.20add-mathlib.2Fupdate-mathlib/near/192900647\" title=\"#narrow/stream/113488-general/topic/leanproject.20issues.20with.20add-mathlib.2Fupdate-mathlib/near/192900647\">said</a>:</p>\n<blockquote>\n<p>Is the mathlib commit in the toml the same as the mathlib commit checked our in _target?</p>\n</blockquote>\n<p>It is the same</p>",
        "id": 192900718,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1585995467
    },
    {
        "content": "<p>And what date was this commit made?</p>",
        "id": 192900755,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585995483
    },
    {
        "content": "<p>15 days ago</p>",
        "id": 192900763,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1585995530
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/commit/d12bbc009fe677e4608e6973b9dbdefa61f78577\" title=\"https://github.com/leanprover-community/mathlib/commit/d12bbc009fe677e4608e6973b9dbdefa61f78577\">https://github.com/leanprover-community/mathlib/commit/d12bbc009fe677e4608e6973b9dbdefa61f78577</a></p>",
        "id": 192900764,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1585995535
    },
    {
        "content": "<p>And leanproject up doesn't move the commit?</p>",
        "id": 192900774,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585995557
    },
    {
        "content": "<p>It does not move it, indeed</p>",
        "id": 192900777,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1585995564
    },
    {
        "content": "<p>Leanproject up should update lean and mathlib to the most recent version</p>",
        "id": 192900781,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585995595
    },
    {
        "content": "<p>It is downloading something but it's not checking out the right revision in the <code>_target</code>, but I think it's due to how I setup the git repo, I think leanproject wants his own git repository just for himself and will fail silently without <code>.git</code> in the current directory, even if the parent folder has one</p>",
        "id": 192900828,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1585995646
    },
    {
        "content": "<p>You said that your project isn't a git repo. This must be the problem?</p>",
        "id": 192900838,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585995668
    },
    {
        "content": "<p>Yeah, what you said</p>",
        "id": 192900859,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585995697
    },
    {
        "content": "<p>The structure is the following:</p>\n<div class=\"codehilite\"><pre><span></span>root/\n|\n—.git/\n—espace_metriques/leanpkg.toml\n—espace_metriques/the lean stuff\n</pre></div>\n\n\n<p>So <code>root/</code> is a git repo, but <code>espaces_metriques</code> does not contain a <code>.git</code>, it is though a git repository.</p>",
        "id": 192900902,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1585995726
    },
    {
        "content": "<p>Yes I underwent</p>",
        "id": 192900910,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585995740
    },
    {
        "content": "<p>Understand</p>",
        "id": 192900911,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585995743
    },
    {
        "content": "<p>And I also understand that this is not in theory supported right now</p>",
        "id": 192900916,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585995761
    },
    {
        "content": "<p>But I don't understand why not</p>",
        "id": 192900918,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585995770
    },
    {
        "content": "<p>I would open an issue at mathlibtools</p>",
        "id": 192900927,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585995792
    },
    {
        "content": "<p>I think it is just not implemented, <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> seems to be maintainer for the mathlibtools, could I check around and submit a PR to add this usecase if you're okay with this?</p>",
        "id": 192900939,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1585995809
    },
    {
        "content": "<p>Either Patrick will have a good reason not to support it or he'll find the time to support it</p>",
        "id": 192900942,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585995821
    },
    {
        "content": "<p>I'm sure a pr would be even more welcome!</p>",
        "id": 192900947,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585995842
    },
    {
        "content": "<p>This looks like the offending line: <a href=\"https://github.com/leanprover-community/mathlib-tools/blob/master/mathlibtools/lib.py#L259\" title=\"https://github.com/leanprover-community/mathlib-tools/blob/master/mathlibtools/lib.py#L259\">https://github.com/leanprover-community/mathlib-tools/blob/master/mathlibtools/lib.py#L259</a></p>",
        "id": 192900983,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1585995847
    },
    {
        "content": "<p>Will give it a try then :) — thank you <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> !</p>",
        "id": 192900989,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1585995888
    },
    {
        "content": "<p>I think the proper fix <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> let me know if you agree with this is to say:</p>\n<p>(1) Check the repo-wide <code>leanpkg.toml</code>, if it exists, fine.<br>\n(2) If it fails, start from the current working directory and search for the first <code>leanpkg.toml</code> we find by checking the parent folder.<br>\n(3) If it fails, then there must be no sane <code>leanpkg.toml</code> available.</p>\n<p>Right?</p>",
        "id": 192901307,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1585996404
    },
    {
        "content": "<p>So you are in a situation where all of your projects have to run the same version of mathlib? You know it's not backwards compatible right? What if one of your projects is a clone of mathlib? How will that be reflected in a global toml?</p>",
        "id": 192901549,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585996806
    },
    {
        "content": "<p>The proper fix is to follow the instructions. Basically you decided to cook up a setup orthogonal to the instructions so you're on your own.</p>",
        "id": 192901553,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585996824
    },
    {
        "content": "<p>Which is fine, but doesn't count as a mathlib-tools bug.</p>",
        "id": 192901561,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585996850
    },
    {
        "content": "<p>I don't understand any advantage of having a global toml</p>",
        "id": 192901571,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585996869
    },
    {
        "content": "<p>Note that I haven't read all messages in this thread. But I had a look at your GitHub repository, and that's not how it's meant to look like.</p>",
        "id": 192901598,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585996915
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/leanproject.20issues.20with.20add-mathlib.2Fupdate-mathlib/near/192901549\" title=\"#narrow/stream/113488-general/topic/leanproject.20issues.20with.20add-mathlib.2Fupdate-mathlib/near/192901549\">said</a>:</p>\n<blockquote>\n<p>So you are in a situation where all of your projects have to run the same version of mathlib? You know it's not backwards compatible right? What if one of your projects is a clone of mathlib? How will that be reflected in a global toml?</p>\n</blockquote>\n<p>I don't see why, let's say you have a repo with multiple Lean projects with different mathlib versions.<br>\nIf you want to have <code>a/leanpkg.toml</code> and <code>b/leanpkg.toml</code> and <code>c/leanpkg.toml</code>, with different mathlib versions, it should be possible?</p>",
        "id": 192901639,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1585996944
    },
    {
        "content": "<p>I agree that the global toml thing is taken care of in the (2) because it'll start from cwd and move up until the root repo and will find the global toml there if necessary.</p>",
        "id": 192901649,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1585996982
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/leanproject.20issues.20with.20add-mathlib.2Fupdate-mathlib/near/192901553\" title=\"#narrow/stream/113488-general/topic/leanproject.20issues.20with.20add-mathlib.2Fupdate-mathlib/near/192901553\">said</a>:</p>\n<blockquote>\n<p>The proper fix is to follow the instructions. Basically you decided to cook up a setup orthogonal to the instructions so you're on your own.</p>\n</blockquote>\n<p>Alright, but it makes impossible to have multiple Lean projects in the same repository, right? I don't know if there is a reason for this limitation.</p>",
        "id": 192901660,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1585997024
    },
    {
        "content": "<p>No, it makes nothing impossible, because those tools are entirely optional.</p>",
        "id": 192901702,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585997054
    },
    {
        "content": "<p>The only thing you need to use Lean is Lean itself.</p>",
        "id": 192901708,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585997068
    },
    {
        "content": "<p>You don't need elan, leanpkg or leanproject</p>",
        "id": 192901718,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585997083
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/leanproject.20issues.20with.20add-mathlib.2Fupdate-mathlib/near/192901718\" title=\"#narrow/stream/113488-general/topic/leanproject.20issues.20with.20add-mathlib.2Fupdate-mathlib/near/192901718\">said</a>:</p>\n<blockquote>\n<p>You don't need elan, leanpkg or leanproject</p>\n</blockquote>\n<p>Right, but adding the feature of having nested <code>leanpkg.toml</code> don't break backward-compat, it seems like straightfoward to implement, is there a reason to not do it?</p>\n<p>Otherwise, the solution could be just to do a fork of <code>leanproject</code> and support this workflow</p>",
        "id": 192901736,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1585997154
    },
    {
        "content": "<p>I mean, I just wrote the fix, this seems to be enough and it does not break previous behaviors: <a href=\"https://github.com/leanprover-community/mathlib-tools/commit/f4f0f49c8cb4090149c46fbcf136d0c25b0602c3\" title=\"https://github.com/leanprover-community/mathlib-tools/commit/f4f0f49c8cb4090149c46fbcf136d0c25b0602c3\">https://github.com/leanprover-community/mathlib-tools/commit/f4f0f49c8cb4090149c46fbcf136d0c25b0602c3</a> AFAIK</p>",
        "id": 192901789,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1585997240
    },
    {
        "content": "<p>Having multiple Lean projects in the same GitHub repository is a bad idea, just like trying to prove a theorem without proving the required lemmas first. That being said we could easily change how leanproject detects the project root. I wouldn't mind a PR changing that.</p>",
        "id": 192901790,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585997246
    },
    {
        "content": "<p>But again, what's the point? What are you hoping for with this crazy setup?</p>",
        "id": 192901887,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585997407
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/leanproject.20issues.20with.20add-mathlib.2Fupdate-mathlib/near/192901790\" title=\"#narrow/stream/113488-general/topic/leanproject.20issues.20with.20add-mathlib.2Fupdate-mathlib/near/192901790\">said</a>:</p>\n<blockquote>\n<p>Having multiple Lean projects in the same GitHub repository is a bad idea, just like trying to prove a theorem without proving the required lemmas first. That being said we could easily change how leanproject detects the project root. I wouldn't mind a PR changing that.</p>\n</blockquote>\n<p>I don't see why multiple Lean projects in the same repo might be a bad idea, if you, let's say have the perfectoid project and want to be able to test the perfectoid project on multiple Lean versions easily w/o maintaining multiple branches of the project.</p>\n<p>You could just have N folders which contain N versions of leanpkg.toml and have a source code folder, symlink those to the N folders, and then now, you can switch on each version instantly.<br>\nWhat would you do to emulate this behavior w/o such a feature?</p>",
        "id": 192901892,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1585997443
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113488-general/topic/leanproject.20issues.20with.20add-mathlib.2Fupdate-mathlib/near/192901887\" title=\"#narrow/stream/113488-general/topic/leanproject.20issues.20with.20add-mathlib.2Fupdate-mathlib/near/192901887\">said</a>:</p>\n<blockquote>\n<p>But again, what's the point? What are you hoping for with this crazy setup?</p>\n</blockquote>\n<p>The behavior of many \"package managers\"… I mean, i.e. the fact that those config files (cargo.toml, leanpkg.toml, requirements.txt, setup.py, *.nix, …) are not tied <em>only</em> to the git root folder but there are support for multiple projects in the same repo, etc. But I could be wrong, and maybe it does not make sense right now.</p>",
        "id": 192901972,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1585997554
    },
    {
        "content": "<p>There is no point in testing a project depending on mathlib against multiple Lean versions. mathlib moves much too fast for this.</p>",
        "id": 192901978,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585997573
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"262143\">@Ryan Lahfa</span> Would <code>git submodules</code> help you?</p>",
        "id": 192902066,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585997711
    },
    {
        "content": "<p>Alright, I could argue that mathlib is not the only Lean lib in this case</p>",
        "id": 192902068,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1585997716
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/leanproject.20issues.20with.20add-mathlib.2Fupdate-mathlib/near/192902066\" title=\"#narrow/stream/113488-general/topic/leanproject.20issues.20with.20add-mathlib.2Fupdate-mathlib/near/192902066\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"262143\">Ryan Lahfa</span> Would <code>git submodules</code> help you?</p>\n</blockquote>\n<p>I could make use of <code>submodules</code>, sure ; but that would still need to create a separate Git repository, I can work around with some git-fu all of this, but undergraduate CS students struggle with basic git commands, adding submodules in the mix would make it too hard for them IMHO</p>",
        "id": 192902122,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1585997777
    },
    {
        "content": "<p>I think if you want people who don't know git to work with this, your best bet is to follow the <code>leanproject</code> workflow as closely as possible. It doesn't allow you all the flexibility that is possible, but you don't want that anyway with inexperienced users.</p>",
        "id": 192902220,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585997971
    },
    {
        "content": "<p>All in all, I can understand that having multiple Lean projects in the same repository is a bad idea, sure; at the same time, I feel a bit bad about having to put <code>leanpkg.toml</code> in the root when the repository is about:</p>\n<p>(1) Writeup on the natural number games<br>\n(2) Work on metric spaces<br>\n(3) University report in LaTeX</p>\n<p>If I put the (2) as a root, it feels a bit strange for (3) which is not related to it.</p>\n<p>Sure, I could break the repo into 3 repos if necessary, but again, inexperienced users will now have 3x difficulty to collaborate because of having 3 repositories, etc.</p>\n<p>But maybe I should just accept to put the stuff at the root and call it a day.</p>\n<p>That does not change really the fact that it's a shame the <code>leanpkg.toml</code> folder is enforced and cannot be configured or passed as a argument.</p>",
        "id": 192902339,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1585998127
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113488-general/topic/leanproject.20issues.20with.20add-mathlib.2Fupdate-mathlib/near/192902220\" title=\"#narrow/stream/113488-general/topic/leanproject.20issues.20with.20add-mathlib.2Fupdate-mathlib/near/192902220\">said</a>:</p>\n<blockquote>\n<p>I think if you want people who don't know git to work with this, your best bet is to follow the <code>leanproject</code> workflow as closely as possible. It doesn't allow you all the flexibility that is possible, but you don't want that anyway with inexperienced users.</p>\n</blockquote>\n<p>Fair and definitely right.</p>",
        "id": 192902348,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1585998142
    },
    {
        "content": "<p>If you don't want to use mathlib then you might well not want to use leanproject, you can just make your own toml files on different branches and use elan</p>",
        "id": 192902351,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585998157
    },
    {
        "content": "<p>FYI, I'm muting this thread.</p>",
        "id": 192902366,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585998232
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>  Well, I use leanproject mostly because of the automatic olean cache fetching, but wouldn't that make sense if this would be generalized for all type of Lean project?</p>",
        "id": 192902410,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1585998260
    },
    {
        "content": "<p>\"if I put 2 as a root it feels a bit strange for 3 which is not related to it\". Are you _sure_ that 1,2,3 together are \"one project\" given that they contain things which are unrelated?</p>",
        "id": 192902418,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585998277
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/leanproject.20issues.20with.20add-mathlib.2Fupdate-mathlib/near/192902418\" title=\"#narrow/stream/113488-general/topic/leanproject.20issues.20with.20add-mathlib.2Fupdate-mathlib/near/192902418\">said</a>:</p>\n<blockquote>\n<p>\"if I put 2 as a root it feels a bit strange for 3 which is not related to it\". Are you _sure_ that 1,2,3 together are \"one project\" given that they contain things which are unrelated?</p>\n</blockquote>\n<p>Well I'm pretty sure I could split them if necessary, but it's always a problem of: simplicity vs perfection, especially for Git newcomers.</p>",
        "id": 192902488,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1585998388
    },
    {
        "content": "<p>Moreover, it sounds like a common pattern to have code &amp; LaTeX in the same repo in two folders, IMHO.</p>",
        "id": 192902497,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1585998428
    },
    {
        "content": "<p>What if one project gets some legs and you want to download the latest mathlib tactics but then the update completely breaks some code in some completely unrelated lean work? It sounds like an actively bad idea to try and have one mathlib controlling more than one piece of lean work</p>",
        "id": 192902501,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585998439
    },
    {
        "content": "<p>We usually just put Lean in the root and LaTeX in <code>docs/</code></p>",
        "id": 192902506,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585998454
    },
    {
        "content": "<p>Code and LaTeX in the same repo is <em>fine</em>!</p>",
        "id": 192902511,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585998476
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/leanproject.20issues.20with.20add-mathlib.2Fupdate-mathlib/near/192902501\" title=\"#narrow/stream/113488-general/topic/leanproject.20issues.20with.20add-mathlib.2Fupdate-mathlib/near/192902501\">said</a>:</p>\n<blockquote>\n<p>What if one project gets some legs and you want to download the latest mathlib tactics but then the update completely breaks some code in some completely unrelated lean work? It sounds like an actively bad idea to try and have one mathlib controlling more than one piece of lean work</p>\n</blockquote>\n<p>That's why a local leanpkg.toml \"solves\" the issue.</p>",
        "id": 192902512,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1585998480
    },
    {
        "content": "<p>But the LaTeX HAS TO BE RELATED TO THE CODE!</p>",
        "id": 192902554,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585998497
    },
    {
        "content": "<p>This is exactly what you do <em>not</em> have here</p>",
        "id": 192902560,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585998521
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/leanproject.20issues.20with.20add-mathlib.2Fupdate-mathlib/near/192902560\" title=\"#narrow/stream/113488-general/topic/leanproject.20issues.20with.20add-mathlib.2Fupdate-mathlib/near/192902560\">said</a>:</p>\n<blockquote>\n<p>This is exactly what you do <em>not</em> have here</p>\n</blockquote>\n<p>It is related to the code, the LaTeX is a writeup around the natural number games <em>and</em> the metric space work.</p>",
        "id": 192902567,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1585998546
    },
    {
        "content": "<p>If your report is on certain lean code then that lean code should be in the same project as the report</p>",
        "id": 192902570,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585998557
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/leanproject.20issues.20with.20add-mathlib.2Fupdate-mathlib/near/192902570\" title=\"#narrow/stream/113488-general/topic/leanproject.20issues.20with.20add-mathlib.2Fupdate-mathlib/near/192902570\">said</a>:</p>\n<blockquote>\n<p>If your report is on certain lean code then that lean code should be in the same project as the report</p>\n</blockquote>\n<p>So in this case, I should keep (1), (2) and (3), because (3) is about (1) and (2)</p>",
        "id": 192902575,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1585998579
    },
    {
        "content": "<p>Ok then in that case the natural number work and the metric space work should be in different subdirectories of src</p>",
        "id": 192902629,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585998616
    },
    {
        "content": "<p>In your one project</p>",
        "id": 192902635,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585998622
    },
    {
        "content": "<p>That's the correct solution</p>",
        "id": 192902640,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585998648
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/leanproject.20issues.20with.20add-mathlib.2Fupdate-mathlib/near/192902635\" title=\"#narrow/stream/113488-general/topic/leanproject.20issues.20with.20add-mathlib.2Fupdate-mathlib/near/192902635\">said</a>:</p>\n<blockquote>\n<p>In your one project</p>\n</blockquote>\n<p>Right, but that would work only if they could share the same version of mathlib, right? (in this case, I think it's possible and it does not really matter, but for the sake of completeness, what if I couldn't?)</p>",
        "id": 192902650,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1585998669
    },
    {
        "content": "<p>Then it wouldn't be one project</p>",
        "id": 192902655,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585998684
    },
    {
        "content": "<p>And then the report would be on a third repository necessarily I guess</p>",
        "id": 192902667,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1585998714
    },
    {
        "content": "<p>Because you don't want to write one LaTeX file about two repos which are so genuinely different that they<em>require</em> different mathlibs</p>",
        "id": 192902725,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585998744
    },
    {
        "content": "<p>If they require different mathlibs then they are incompatible</p>",
        "id": 192902735,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585998770
    },
    {
        "content": "<p>And hence it doesn't make sense to think of them as one project</p>",
        "id": 192902749,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585998788
    },
    {
        "content": "<p>Such a situation would only happen with some long or technical piece of work and if it happens then that's the sign that you're working on two projects</p>",
        "id": 192902811,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585998848
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/leanproject.20issues.20with.20add-mathlib.2Fupdate-mathlib/near/192902811\" title=\"#narrow/stream/113488-general/topic/leanproject.20issues.20with.20add-mathlib.2Fupdate-mathlib/near/192902811\">said</a>:</p>\n<blockquote>\n<p>Such a situation would only happen with some long or technical piece of work and if it happens then that's the sign that you're working on two projects</p>\n</blockquote>\n<p>Agreed</p>",
        "id": 192902814,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1585998863
    },
    {
        "content": "<p>So currently because your projects are simple and run with any lean or Mathlib, they are one project but two different directories in src</p>",
        "id": 192902833,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585998926
    },
    {
        "content": "<p>That's exactly how mathlib works. There are no lean files at all in the src directory. They're all in subdirectories</p>",
        "id": 192902879,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585998964
    },
    {
        "content": "<p>Makes sense</p>",
        "id": 192902888,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1585998989
    },
    {
        "content": "<p>I can see your point though.</p>",
        "id": 192904158,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586001185
    }
]