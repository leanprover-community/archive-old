[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span>, is there a way to ask <code>olean-rs</code> to show me the chain of imports that results in <code>Y</code> being a dependency of <code>X</code>?</p>",
        "id": 165675600,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1557880620
    },
    {
        "content": "<p>I have a few cases in mind where I think <code>X</code> really shouldn't depend on <code>Y</code>, but I'm having trouble manually locating the chain of imports.</p>",
        "id": 165675616,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1557880648
    },
    {
        "content": "<p>Relatedly, I wonder if we could propose a new linting rule: \"all imports go on separate lines\". This would really help with import analysis, because you can then search/grep for <code>import X</code> and be sure of finding all the locations <code>X</code> is imported.</p>",
        "id": 165675682,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1557880707
    },
    {
        "content": "<p>As an example, I'm interested in why <code>src/category_theory/instances/Top/presheaf.lean</code> depends on <code>src/data/finset.lean</code>.</p>",
        "id": 165675823,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1557880886
    },
    {
        "content": "<p>after a little bit of manual search: <code>data.finset &lt;- data.fintype &lt;- data.set.finite &lt;- data.set.countable &lt;- topology.bases &lt;- topology.opens &lt;- category.instances.Top.opens &lt;- category.instances.Top.presheaf</code></p>",
        "id": 165679927,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1557886178
    },
    {
        "content": "<p>but yeah, a tool for that would be useful :)</p>",
        "id": 165679977,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1557886224
    },
    {
        "content": "<p>About the separate lines--you could grep for <code>^import.* X</code> or something similar</p>",
        "id": 165680573,
        "sender_full_name": "Reid Barton",
        "timestamp": 1557887037
    },
    {
        "content": "<p>That doesn't work for the following, right?</p>\n<div class=\"codehilite\"><pre><span></span>import data.nat.basic\n       data.set.basic\n</pre></div>\n\n\n<p>I used to write that if my first line of imports was too long.</p>",
        "id": 165680715,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1557887211
    },
    {
        "content": "<p>I would suggest looking for indented later lines</p>",
        "id": 165680817,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557887313
    },
    {
        "content": "<p>I think <code>^import (\\w+(\\n )?.*)*?X</code> should work, but it seems to crash vscode</p>",
        "id": 165680999,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557887582
    },
    {
        "content": "<p>but actually, I think searching for <code>data.finset</code> should be sufficient, since it's very unlikely to show up in a lean file unless it's an import</p>",
        "id": 165681071,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557887666
    },
    {
        "content": "<p>I suppose there are a few names that do double duty like <code>tactic</code> but most file names are not also constants</p>",
        "id": 165681106,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557887745
    },
    {
        "content": "<p>About the linting rule: we could get <code>olean-rs</code> to find all the places where a specific module is imported.</p>",
        "id": 165724675,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1557934465
    }
]