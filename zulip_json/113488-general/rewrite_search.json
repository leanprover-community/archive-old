[
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"110111\">@Keeley Hoek</span>, I think I'm getting <code>\"XXX\" is not a valid rewrite lemma!</code> errors which I shouldn't be. I think in this case the problem is you need to unfold a step before the lemma looks right. Can we make <code>rewrite_search</code> more forgiving?</p>",
        "id": 147422501,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541833142
    },
    {
        "content": "<p>There are examples in my branch &lt;<a href=\"https://github.com/semorrison/monoidal-categories-reboot/tree/monoidal_functor.comp\" target=\"_blank\" title=\"https://github.com/semorrison/monoidal-categories-reboot/tree/monoidal_functor.comp\">https://github.com/semorrison/monoidal-categories-reboot/tree/monoidal_functor.comp</a>&gt; of <span class=\"user-mention\" data-user-id=\"128547\">@Michael Jendrusch</span>'s new monoidal categories development.</p>",
        "id": 147422576,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541833205
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> I can't see anything there which doesn't compile (on the monoidal_functor.comp branch), am I meant to try to remove the <code>sorry</code>s?</p>",
        "id": 147428564,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1541846194
    },
    {
        "content": "<p>Nonetheless, off a fuzzy memory of something like this happening to me with projections or local variables or something, I've made a total shot in the dark and hopefully <code>whnf</code>'d the problem away</p>",
        "id": 147431664,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1541852993
    },
    {
        "content": "<p>Hmm, doesn't seem to have helped. Here's the problem: &lt;<a href=\"https://github.com/semorrison/monoidal-categories-reboot/blob/monoidal_functor.comp/src/monoidal_categories_reboot/monoidal_category.lean#L52\" target=\"_blank\" title=\"https://github.com/semorrison/monoidal-categories-reboot/blob/monoidal_functor.comp/src/monoidal_categories_reboot/monoidal_category.lean#L52\">https://github.com/semorrison/monoidal-categories-reboot/blob/monoidal_functor.comp/src/monoidal_categories_reboot/monoidal_category.lean#L52</a>&gt;</p>",
        "id": 147448566,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541885136
    },
    {
        "content": "<p>Gotcha, I'll take a look</p>",
        "id": 147461212,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1541907340
    },
    {
        "content": "<p>ok I've just turned it the checks off for now. Does anyone know how to do something similar to <code>#reduce</code>, but to an <code>expr</code> in tactic-mode?</p>",
        "id": 147462126,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1541909422
    },
    {
        "content": "<p>I'd just like to unfold some definitions, to be able to tell certain things (e.g. of type <code>monoidal_category.associator_naturality'</code>) are secretly just equalities</p>",
        "id": 147462183,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1541909551
    },
    {
        "content": "<p>I thought <code>whnf</code> maybe did this? Is there a problem if the expression being passed is after binders?</p>",
        "id": 147462189,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1541909631
    },
    {
        "content": "<p>ah, I see I want <code>dsimp</code></p>",
        "id": 147462347,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1541909933
    },
    {
        "content": "<p>Hmm... it seems to unfold projections when I pass in arguments, but it doesn't deduce their type</p>",
        "id": 147462547,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1541910364
    },
    {
        "content": "<p>Per the discussion in the maintainers' meeting this morning, I've located the <a href=\"https://github.com/leanprover-community/mathlib/tree/rewrite-search\" title=\"https://github.com/leanprover-community/mathlib/tree/rewrite-search\"><code>rewrite_search</code></a> branch, merged <code>master</code>, and got it compiling again. General challenge: understand what's in there, and work out a route to PR it into mathlib. :-)</p>",
        "id": 192156843,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585458199
    },
    {
        "content": "<p>I guess we could start by PRing everything not under <code>tactic/rewrite_search</code> that hasn't already been PR'd? Assuming the <code>meta/expr</code> and <code>tactic/core</code> changes are already in PRs, it looks like that's just two new files under <code>data/array</code>.</p>",
        "id": 192157034,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1585458611
    }
]