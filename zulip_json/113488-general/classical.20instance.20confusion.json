[
    {
        "content": "<p>For some reason Lean is inferring two different orders on <code>nnreal</code> in some code that I'm working on.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"err\">‚ä¢</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">decidable_linear_order</span> <span class=\"bp\">=</span> <span class=\"n\">nnreal</span><span class=\"bp\">.</span><span class=\"n\">decidable_linear_order</span>\n</pre></div>\n\n\n<p>I have <code>open_locale classical</code> at the top of my file... I would hope that makes everything classical...</p>",
        "id": 177613333,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1570541263
    },
    {
        "content": "<p>Also... the order on <code>nnreal</code> must be defined using <code>classical</code>, so really Lean is just being pretty silly right now.</p>",
        "id": 177613443,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1570541311
    },
    {
        "content": "<p>Do you have a MWE? I'm surprised that <code>classical.decidable_linear_order</code> appears in your goal. It's not even an instance, and doesn't seem to be used often in the library.</p>",
        "id": 177614962,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1570542085
    },
    {
        "content": "<p>Are you stuck proving this goal or would you just prefer that it not arise in the first place?</p>",
        "id": 177624842,
        "sender_full_name": "Reid Barton",
        "timestamp": 1570547101
    },
    {
        "content": "<p>I'd rather not have it in the first place</p>",
        "id": 177625792,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1570547720
    },
    {
        "content": "<p>I can <code>delta</code> those instances, and then <code>congr</code> proves it</p>",
        "id": 177625814,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1570547732
    },
    {
        "content": "<p>But that's just ugly</p>",
        "id": 177625845,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1570547747
    },
    {
        "content": "<p>I was going to say you should prove/apply a lemma of the form \"two DLOs are equal if their orderings are equal\" and then use <code>refl</code></p>",
        "id": 177626275,
        "sender_full_name": "Reid Barton",
        "timestamp": 1570547956
    },
    {
        "content": "<p>At least, I assume that's what's going on here since I can't see how it could be otherwise</p>",
        "id": 177626302,
        "sender_full_name": "Reid Barton",
        "timestamp": 1570547976
    },
    {
        "content": "<p>I was trying to apply a lemma, but it failed. So I used <code>convert</code>, and it worked, but gave me the goal to prove that these orders were equal.</p>",
        "id": 177626537,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1570548097
    },
    {
        "content": "<p>It would be better if applying the lemma just worked.</p>",
        "id": 177626629,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1570548126
    },
    {
        "content": "<p>But I don't know how to make sure that the right order gets inferred</p>",
        "id": 177626646,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1570548140
    },
    {
        "content": "<p>I tried giving <code>classical.decidable_eq</code> priority <code>1</code> or <code>1001</code> but the problem remained.</p>",
        "id": 177626692,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1570548180
    },
    {
        "content": "<p>One of them probably uses <code>classical.prop_decidable</code> where the other uses <code>@decidable_eq_of_decidable_le _ _ classical.prop_decidable</code></p>",
        "id": 177628329,
        "sender_full_name": "Reid Barton",
        "timestamp": 1570549099
    },
    {
        "content": "<p><code>decidable_linear_order.lift</code>'s definition of <code>decidable_eq</code> might also be implicated</p>",
        "id": 177628403,
        "sender_full_name": "Reid Barton",
        "timestamp": 1570549151
    },
    {
        "content": "<p>(why is there both <code>classical.decidable_linear_order</code> and <code>classical.DLO</code>?)</p>",
        "id": 177628532,
        "sender_full_name": "Reid Barton",
        "timestamp": 1570549215
    },
    {
        "content": "<p>Do you know what declaration caused <code>classical.decidable_linear_order</code> to appear in your goal? That is likely the declaration we want to change.</p>",
        "id": 177628773,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1570549367
    },
    {
        "content": "<p>I think in any case we should also fix <code>decidable_linear_order.lift</code> and this may or may not avoid your issue</p>",
        "id": 177630027,
        "sender_full_name": "Reid Barton",
        "timestamp": 1570550211
    },
    {
        "content": "<p>You want to fix it by using <code>classical.prop_decidable</code>? That doesn't seem objectively better...</p>",
        "id": 177630226,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1570550327
    },
    {
        "content": "<p>No by making <code>decidable_eq</code> like the other fields</p>",
        "id": 177630454,
        "sender_full_name": "Reid Barton",
        "timestamp": 1570550440
    },
    {
        "content": "<p>(sorry for being cryptic, on phone)</p>",
        "id": 177630476,
        "sender_full_name": "Reid Barton",
        "timestamp": 1570550457
    },
    {
        "content": "<p>I'm not sure if you can have much improvement: <code>decidable_le</code> and <code>decidable_lt</code> reduces definitionally to <code>f x ? f y</code>, but <code>decidable_eq</code> doesn't, and you have to use injectivity of <code>f</code>.</p>",
        "id": 177631328,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1570550931
    },
    {
        "content": "<p>Oh I didn't look at this closely enough</p>",
        "id": 177632507,
        "sender_full_name": "Reid Barton",
        "timestamp": 1570551621
    },
    {
        "content": "<p>Right, so I guess there is no way to make <code>decidable_linear_order.lift</code> of <code>classical.decidable_linear_order</code> (or anything similar defined using <code>classical.prop_decidable</code>) agree definitionally with using <code>classical.decidable_linear_order</code> directly.</p>",
        "id": 177634065,
        "sender_full_name": "Reid Barton",
        "timestamp": 1570552740
    },
    {
        "content": "<p>The problematic code is here <a href=\"https://github.com/leanprover-community/lean-perfectoid-spaces/blob/master/src/valuation/perfection.lean#L96\" target=\"_blank\" title=\"https://github.com/leanprover-community/lean-perfectoid-spaces/blob/master/src/valuation/perfection.lean#L96\">https://github.com/leanprover-community/lean-perfectoid-spaces/blob/master/src/valuation/perfection.lean#L96</a></p>",
        "id": 177634738,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1570553243
    },
    {
        "content": "<p>I'm not very good at debugging this sort of thing.</p>",
        "id": 177634742,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1570553253
    },
    {
        "content": "<p>Well, probably it has to do with one of the several places where you have <code>local attribute [instance, priority 0] classical.decidable_linear_order</code></p>",
        "id": 177634836,
        "sender_full_name": "Reid Barton",
        "timestamp": 1570553317
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> argues that priority 10 is better for inclusion in mathlib</p>",
        "id": 177634869,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1570553353
    },
    {
        "content": "<p>Aha, we should fix our project</p>",
        "id": 177634899,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1570553387
    },
    {
        "content": "<p>Well I don't think the priority is the relevant bit</p>",
        "id": 177634991,
        "sender_full_name": "Reid Barton",
        "timestamp": 1570553426
    },
    {
        "content": "<p>Using <code>classical.decidable_linear_order</code> less might help, but I'm not sure you should really try very hard to avoid this situation</p>",
        "id": 177635375,
        "sender_full_name": "Reid Barton",
        "timestamp": 1570553671
    },
    {
        "content": "<p>what happens if you just delete all those <code>local instance</code>s? Do you really use <code>decidable_linear_order</code> in a way other than to give you <code>decidable (x &lt; y)</code>, which follows from <code>classical.prop_decidable</code> anyways?</p>",
        "id": 177636289,
        "sender_full_name": "Reid Barton",
        "timestamp": 1570554235
    },
    {
        "content": "<p>Probably not, we should just replace all of them with <code>open_locale classical</code></p>",
        "id": 177637055,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1570554704
    },
    {
        "content": "<p>The fact that <code>valuation/localization</code> has <code>local attribute [instance] classical.decidable_linear_order</code> <em>without</em> a lower priority is likely the culprit: now the instance that <code>nnreal</code> is a DLO is synthesized using that.</p>",
        "id": 177644866,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1570559590
    },
    {
        "content": "<p>Oh wait, I don't think your file imports that. In that case I agree with Reid.</p>",
        "id": 177645531,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1570559902
    },
    {
        "content": "<p>Hmm, even with <code>open_locale classical</code> in place, Lean still complains that it can find <code>decidable_linear_order Œì‚ÇÄ</code>.</p>",
        "id": 177703162,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1570619686
    },
    {
        "content": "<p>That's a bit sad.</p>",
        "id": 177703172,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1570619700
    },
    {
        "content": "<p>There's no instance for that. There is a def somewhere though.</p>",
        "id": 177703205,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1570619739
    },
    {
        "content": "<p>But that's precisely <code>classical.decidable_linear_order</code> right?</p>",
        "id": 177712819,
        "sender_full_name": "Reid Barton",
        "timestamp": 1570627420
    }
]