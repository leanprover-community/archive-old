[
    {
        "content": "<p><code>cc</code> resolved the following:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">x1</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"n\">b1</span> <span class=\"o\">:</span> <span class=\"n\">bool</span><span class=\"o\">,</span>\n<span class=\"n\">x2</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"n\">b2</span> <span class=\"o\">:</span> <span class=\"n\">bool</span><span class=\"o\">,</span>\n<span class=\"n\">H2</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x1</span><span class=\"o\">,</span> <span class=\"n\">b1</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"o\">(</span><span class=\"n\">x2</span><span class=\"o\">,</span> <span class=\"n\">b2</span><span class=\"o\">),</span>\n<span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">bool</span><span class=\"o\">),</span>\n<span class=\"n\">H3</span> <span class=\"o\">:</span> <span class=\"n\">L</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x1</span><span class=\"o\">,</span> <span class=\"n\">b1</span><span class=\"o\">)</span> <span class=\"bp\">::</span> <span class=\"n\">L₃</span><span class=\"o\">,</span>\n<span class=\"n\">H4</span> <span class=\"o\">:</span> <span class=\"n\">L</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x2</span><span class=\"o\">,</span> <span class=\"n\">b2</span><span class=\"o\">)</span> <span class=\"bp\">::</span> <span class=\"n\">L₄</span>\n<span class=\"err\">⊢</span> <span class=\"n\">red</span> <span class=\"n\">L₃</span> <span class=\"o\">((</span><span class=\"n\">x1</span><span class=\"o\">,</span> <span class=\"n\">bnot</span> <span class=\"n\">b1</span><span class=\"o\">)</span> <span class=\"bp\">::</span> <span class=\"n\">L</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>which makes me wonder how <code>cc</code> works</p>",
        "id": 125493933,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524318160
    },
    {
        "content": "<p>The docs say that it attempts to synthesize an empty inductive type</p>",
        "id": 125493934,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524318173
    },
    {
        "content": "<p>but it doesn't say how it achieves it</p>",
        "id": 125493939,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524318188
    },
    {
        "content": "<p>the printed theorem says:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">false</span><span class=\"bp\">.</span><span class=\"n\">elim</span>\n         <span class=\"o\">(</span><span class=\"n\">false_of_true_eq_false</span>\n            <span class=\"o\">(</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">trans</span>\n               <span class=\"o\">(</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n                  <span class=\"o\">(</span><span class=\"n\">eq_true_intro</span>\n                     <span class=\"o\">(</span><span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">elim_left</span>\n                        <span class=\"o\">(</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">no_confusion</span> <span class=\"o\">(</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"n\">H3</span><span class=\"o\">)</span> <span class=\"n\">H4</span><span class=\"o\">)</span>\n                           <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">hd_eq</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x1</span><span class=\"o\">,</span> <span class=\"n\">b1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x2</span><span class=\"o\">,</span> <span class=\"n\">b2</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">tl_eq</span> <span class=\"o\">:</span> <span class=\"n\">L₃</span> <span class=\"bp\">=</span> <span class=\"n\">L₄</span><span class=\"o\">),</span> <span class=\"bp\">⟨</span><span class=\"n\">hd_eq</span><span class=\"o\">,</span> <span class=\"n\">tl_eq</span><span class=\"bp\">⟩</span><span class=\"o\">)))))</span>\n               <span class=\"o\">(</span><span class=\"n\">eq_false_intro</span> <span class=\"n\">H2</span><span class=\"o\">))))</span>\n</pre></div>",
        "id": 125493940,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524318217
    },
    {
        "content": "<p>I think it does so by building an equality matching graph. It's a graph where the vertices are terms and they are linked by edges if they  are known to be equal. Once you've added all the equalities in your context, you take the transitive closure of the graph and, for each connected component (i.e. equivalence class) you can elect a term that will represent the whole class and replace every occurrence of every member of that class by that one representative.</p>",
        "id": 125494189,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524318792
    },
    {
        "content": "<p>It's a very algorithmic proof technique</p>",
        "id": 125494190,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524318822
    },
    {
        "content": "<p>very interesting</p>",
        "id": 125494191,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524318827
    },
    {
        "content": "<p>but the transitive closure isn't necessarily decidable?</p>",
        "id": 125494193,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524318838
    },
    {
        "content": "<p>It is because you're only considering the finite set of terms that are visible in your context (and some variation on each)</p>",
        "id": 125494235,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524318885
    },
    {
        "content": "<p>hmm</p>",
        "id": 125494236,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524318897
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> Congruence closure does one more thing: it closes these equivalences under congruence.  For example if you know <code>a=b</code> and have two subterms <code>f a</code> and <code>f b</code>, then it will deduce <code>f a = f b</code>.</p>",
        "id": 125494530,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1524319607
    },
    {
        "content": "<p>is there any paper regarding this?</p>",
        "id": 125494532,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524319621
    },
    {
        "content": "<p>Thanks for adding this detail! I could only think of it in algorithmic terms and that didn't seem enlightening. But your explanation is nice</p>",
        "id": 125494580,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524319713
    },
    {
        "content": "<p>I don't know a canonical citation off the top of my head, it's pretty standard stuff.  Give me a sec.</p>",
        "id": 125494581,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1524319730
    },
    {
        "content": "<p>thanks</p>",
        "id": 125494590,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524319787
    },
    {
        "content": "<p>Nelson, Oppen, Fast decision procedures based on congruence closure, Journal of the ACM (1980) <a href=\"http://www.cs.colorado.edu/~bec/courses/csci5535-s09/reading/nelson-oppen-congruence.pdf\" target=\"_blank\" title=\"http://www.cs.colorado.edu/~bec/courses/csci5535-s09/reading/nelson-oppen-congruence.pdf\">http://www.cs.colorado.edu/~bec/courses/csci5535-s09/reading/nelson-oppen-congruence.pdf</a></p>",
        "id": 125494591,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1524319791
    },
    {
        "content": "<p>The congruence lemmas for dependent type theory as used in Lean are described in this paper (de Moura, Selsam IJCAR 2016): <a href=\"https://leanprover.github.io/papers/congr.pdf\" target=\"_blank\" title=\"https://leanprover.github.io/papers/congr.pdf\">https://leanprover.github.io/papers/congr.pdf</a></p>",
        "id": 125494634,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1524319833
    },
    {
        "content": "<p>I'm always hesitant to try to read Lean papers because I always fear they will be outdated (say Lean 2 era or worse) and only confuse me</p>",
        "id": 125494642,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524319894
    },
    {
        "content": "<p>The <code>cc</code> implementation in Lean does a few more tricks: for example it derives <code>a=b</code> from <code>nat.succ a = nat.succ b</code>, and <code>nat.succ a != nat.zero</code> for any <code>a</code>.</p>",
        "id": 125494643,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1524319914
    },
    {
        "content": "<p>Do you have something like a list of still relevant Lean papers?</p>",
        "id": 125494644,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524319921
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">H1</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H2</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">))))</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">cc</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">test</span>\n<span class=\"c\">/-</span><span class=\"cm\">of_eq_true</span>\n<span class=\"cm\">    (eq_true_intro</span>\n<span class=\"cm\">       (eq.trans</span>\n<span class=\"cm\">          (eq_of_heq</span>\n<span class=\"cm\">             ((λ (a a&#39; : α) (e_0 : a = a&#39;), eq.rec (heq.refl (f a)) e_0) x (f (f x))</span>\n<span class=\"cm\">                (eq.trans (eq.symm H2)</span>\n<span class=\"cm\">                   (eq_of_heq</span>\n<span class=\"cm\">                      ((λ (a a&#39; : α) (e_0 : a = a&#39;), eq.rec (heq.refl (f a)) e_0) (f (f (f (f x)))) (f x)</span>\n<span class=\"cm\">                         (eq_of_heq</span>\n<span class=\"cm\">                            ((λ (a a&#39; : α) (e_0 : a = a&#39;), eq.rec (heq.refl (f a)) e_0) (f (f (f x))) x H1)))))))</span>\n<span class=\"cm\">          H1))-/</span>\n</pre></div>",
        "id": 125494684,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524319936
    },
    {
        "content": "<p>Wow</p>",
        "id": 125494713,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524320019
    },
    {
        "content": "<p>(taken from P.1 of the first linked paper)</p>",
        "id": 125494739,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524320031
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span>   Let me look through the publication list at <a href=\"https://leanprover.github.io/publications/\" target=\"_blank\" title=\"https://leanprover.github.io/publications/\">https://leanprover.github.io/publications/</a>.  The system description is pretty high-level and only obsolete in details.  The metaprogramming paper is new and describes Lean 3.2.  The machine learning paper doesn't seem to talk much about Lean. The congruence closure paper seems to be still relevant.  The elaboration paper is completely obsolete as it describes Lean 2.</p>",
        "id": 125494856,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1524320170
    },
    {
        "content": "<blockquote>\n<p>The congruence lemmas for dependent type theory as used in Lean are described in this paper (de Moura, Selsam IJCAR 2016): <a href=\"https://leanprover.github.io/papers/congr.pdf\" target=\"_blank\" title=\"https://leanprover.github.io/papers/congr.pdf\">https://leanprover.github.io/papers/congr.pdf</a></p>\n</blockquote>\n<p>of <em>course</em> it is de moura :P</p>",
        "id": 125494858,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524320185
    },
    {
        "content": "<p>Thanks</p>",
        "id": 125494992,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524320574
    },
    {
        "content": "<p>So actually the obsolete one is clearly flagged Lean 2 on  <a href=\"https://leanprover.github.io/publications/\" target=\"_blank\" title=\"https://leanprover.github.io/publications/\">https://leanprover.github.io/publications/</a></p>",
        "id": 125495002,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524320616
    },
    {
        "content": "<p>It reminds me a question: what is the status of <code>super</code> today?</p>",
        "id": 125495043,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524320663
    },
    {
        "content": "<p>And these <code>crush</code> things mentioned in the metaprogramming paper and some slides?</p>",
        "id": 125495101,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524320878
    },
    {
        "content": "<p><code>super</code> never progressed beyond a proof of concept.  From my point of view, the main thing holding it back is performance.  Some APIs that would be very nice to do e.g. resolution with unification (such as temporary metavariables) are simply not available from the metaprogramming side.  And I have enough other things to do.  Maybe I will revisit <code>super</code> when Lean 4 arrives.</p>",
        "id": 125495203,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1524321014
    },
    {
        "content": "<p><code>crush</code> is available as a package: <a href=\"https://github.com/leanprover/mini_crush\" target=\"_blank\" title=\"https://github.com/leanprover/mini_crush\">https://github.com/leanprover/mini_crush</a></p>",
        "id": 125495211,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1524321072
    },
    {
        "content": "<p><code>rsimp</code> is in the core library</p>",
        "id": 125495213,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1524321098
    },
    {
        "content": "<p>What does <code>rsimp</code> do?</p>",
        "id": 125495253,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524321144
    },
    {
        "content": "<p>Re: <code>super</code>.  This was the first thing I did with Lean, and at the time I did not know about typeclasses, simp lemmas, the equation compiler, etc.  It did not help that the Lean 3 library at the time did not even have more than a few theorems about natural numbers.</p>",
        "id": 125495262,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1524321231
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span>: <code>rsimp</code> is Leo's idea on how to do simplification with congruence closure.  As you've observed, <code>cc</code> stores the equivalence classes of subterms.  Roughly, <code>rsimp</code> then applies simp lemmas on the subterms, and traverses the equivalence classes to pick the smallest subterm as a result.</p>",
        "id": 125495316,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1524321350
    },
    {
        "content": "<p>The main advantage compared to <code>simp</code> is that it doesn't loop (so easily).  For example, <code>simp*</code> would loop on <code>a=b, b=a :- f a = f b</code> but <code>rsimp</code> would not.</p>",
        "id": 125495366,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1524321429
    },
    {
        "content": "<p>why would it not loop on a=b b=a?</p>",
        "id": 125495368,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524321465
    },
    {
        "content": "<p>That is so cool :) Is there a downside to using <code>rsimp</code> instead of <code>simp</code>?</p>",
        "id": 125495371,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524321481
    },
    {
        "content": "<p>Just looked back at the paper and apparently I remembered it incorrectly, <code>rsimp</code> uses E-matching to instantiate lemmas instead of <code>simp</code>.  So in the example above, <code>rsimp</code> is essentially <code>cc</code>.</p>",
        "id": 125495461,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1524321666
    },
    {
        "content": "<p>Thanks. Indeed it sounds like <code>super</code> needs to wait for Lean 4.</p>",
        "id": 125495466,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524321716
    },
    {
        "content": "<p>Maybe more interestingly: if you call rsimp on <code>a=b, a=f a :- p (f (f a))</code> then rsimp would simplify the goal to <code>p a</code> (or <code>p b</code>, randomly).</p>",
        "id": 125495501,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1524321722
    },
    {
        "content": "<p>I found that <code>cc</code> automatically does <code>intros</code></p>",
        "id": 125495512,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524321818
    },
    {
        "content": "<p>I was wondering if it rewrote the conditions like <code>simp</code> does</p>",
        "id": 125495513,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524321828
    },
    {
        "content": "<p>I think that's less efficient so I don't prefer it rewriting the conditions</p>",
        "id": 125495514,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524321840
    },
    {
        "content": "<p>so I like <code>cc</code> more :P</p>",
        "id": 125495553,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524321847
    },
    {
        "content": "<blockquote>\n<p>I was wondering if it rewrote the conditions like <code>simp</code> does</p>\n</blockquote>\n<p>What do mean by \"rewriting conditions\"?</p>",
        "id": 125495554,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1524321871
    },
    {
        "content": "<p>so the goal is <code>A -&gt; B</code></p>",
        "id": 125495555,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524321888
    },
    {
        "content": "<p>simp would rewrite <code>A</code> to <code>C</code> without intro right</p>",
        "id": 125495557,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524321897
    },
    {
        "content": "<p>I'm not sure if there is a meaningful difference in efficiency here.  The reason why <code>simp</code> does not do <code>intros</code> is because <code>simp</code> may not close the goal and you don't want <code>simp</code> to intro stuff randomly.  On the other hand, <code>cc</code> is an end-game tactic and can do whatever it wants.</p>",
        "id": 125495661,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1524322160
    },
    {
        "content": "<p>I see</p>",
        "id": 125495707,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524322217
    }
]