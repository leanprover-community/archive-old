[
    {
        "content": "<p>Does anyone have any suggestions for a tactic that will perform a \"cheap <code>rfl</code>\", but not an expensive one?</p>\n<p>I'm realising that often the reason the <code>tidy</code> is slow is that <code>refl</code> is at the top of its list of tactics. This is potentially very expensive.</p>\n<p>Removing this from <code>tidy</code> entirely, mathlib still compiles (one irrelevant exception), but is actually slower. However I have some non-in-mathlib examples where removing <code>refl</code> speeds up <code>tidy</code> a lot.</p>\n<p>So far my best idea is to replace it with <code>try_for 100 { refl }</code>...</p>",
        "id": 203669767,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1594602653
    },
    {
        "content": "<p>what if you write something like:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">do</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">,</span><span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">target</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">match_eq</span><span class=\"o\">,</span>\n   <span class=\"n\">guard</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"n\">r</span><span class=\"o\">),</span> <span class=\"c1\">-- or alpha equal</span>\n   <span class=\"n\">refl</span>\n</code></pre></div>",
        "id": 203669845,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1594602812
    },
    {
        "content": "<p>Oh ... I obviously should be trying <code>refl transparency.reducible</code>.</p>",
        "id": 203669846,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1594602813
    },
    {
        "content": "<p>I'll also try that, <span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span>, thanks.</p>",
        "id": 203669849,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1594602827
    },
    {
        "content": "<p>That will be a very pessimistic <code>refl</code> but it should be faster than checking def equality</p>",
        "id": 203669900,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1594602877
    },
    {
        "content": "<p>(also, you may want to use <code>instantiate_mvars</code> on the goal but if you can avoid it, it will be faster)</p>",
        "id": 203669920,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1594602937
    },
    {
        "content": "<p>most tactics like <code>rw</code> close with a <code>refl reducible</code></p>",
        "id": 203670756,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594604178
    },
    {
        "content": "<p>Unfortunately <code>refl reducible</code> didn't give me the speed-up I wanted. (Or rather, it gives me the speed-up on not-in-mathlib examples, but slows down <code>tidy</code> in mathlib by almost 60s.)</p>",
        "id": 203671241,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1594604951
    },
    {
        "content": "<p>It seems <code>try_for 50 { refl }</code> is actually pretty good. I get all the speed in mathlib, and it's a pretty tight bound.</p>",
        "id": 203671255,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1594604979
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/3380\">#3380</a></p>",
        "id": 203672730,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1594607505
    }
]