[
    {
        "content": "<p>Hey! I recently needed the fact that <code>state_t σ m a</code> is an <code>applicative</code> whenever <code>m</code> is. However, this instance is currently not available from <code>init.category.state</code> because the <code>applicative</code> instance there requires the stronger <code>monad m</code>, and many other instances in <code>init.category.*</code> have the same problem. Would y'all take a PR to fix this (which would make the code somewhat less elegant and may or may not lead to compatibility issues)?</p>",
        "id": 192259114,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1585576761
    },
    {
        "content": "<p>If it doesn't break mathlib then it's probably fine. However this change might be a bit questionable because I imagine the new <code>applicative</code> instance will not be definitionally equal to the current one (when <code>m</code> happens to be a <code>monad</code>)--or is that wrong?</p>",
        "id": 192261089,
        "sender_full_name": "Reid Barton",
        "timestamp": 1585577610
    },
    {
        "content": "<p>Hm, thinking about this more and actually looking at the definitions, I think defining the <code>applicative</code> structure on <code>state_t</code> in terms of the original <code>applicative</code> structure on <code>m</code> is probably better anyways.</p>",
        "id": 192261676,
        "sender_full_name": "Reid Barton",
        "timestamp": 1585577882
    },
    {
        "content": "<p>So, I stand by my first sentence. Ignore the second sentence <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 192262105,
        "sender_full_name": "Reid Barton",
        "timestamp": 1585578081
    },
    {
        "content": "<p>I doubt that the instance actually works. In order to define <code>seq</code> on <code>state_t</code>, you need to thread the final state of the first argument into the second argument, i.e. you need to use <code>bind</code>.</p>",
        "id": 192268754,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1585580684
    },
    {
        "content": "<p>Oh yes, you're right; Haskell also has the <code>monad m</code> constraint. I'll have to rethink my original application then.</p>\n<p>However, the general problem remains, e.g. <code>functor (state_t σ m)</code> currently requires <code>monad m</code> when it could be <code>functor m</code>.</p>",
        "id": 192274397,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1585582928
    },
    {
        "content": "<p>That's true, we could change that</p>",
        "id": 192280445,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1585585500
    },
    {
        "content": "<p>This turns out to be a bigger project than I thought: I'll have to redo the <code>lawful_monad</code> proofs as well (and add <code>lawful_applicative</code> instances etc.). But at least that seems to be the only thing that breaks in core, and I'd be surprised if mathlib relied on the exact definitions of <code>map</code> or <code>seq</code> much. PR still forthcoming, but it'll take a while.</p>",
        "id": 192784228,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1585909553
    }
]