[
    {
        "content": "<p>Hi everyone - I'm trying out theorem provers for the first time - starting with Lean4 - my focus is proof by induction for now - in particular I'd like to use a prover for results in Knuth's TAOCP - so I'm starting with the very first example in Vol 1, Chapter 1, 1.2.1 Mathematical Induction</p>",
        "id": 227437420,
        "sender_full_name": "Zartaj Majeed",
        "timestamp": 1614090267
    },
    {
        "content": "<p>P(n): n times (n+3) is an even number</p>",
        "id": 227437486,
        "sender_full_name": "Zartaj Majeed",
        "timestamp": 1614090296
    },
    {
        "content": "<p>I'm looking at the natural number game to get my bearings - is this a good place to start?</p>",
        "id": 227437619,
        "sender_full_name": "Zartaj Majeed",
        "timestamp": 1614090348
    },
    {
        "content": "<p>NNG is Lean3</p>",
        "id": 227437641,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614090358
    },
    {
        "content": "<p>It will be extremely difficult to formalize TAOCP in Lean</p>",
        "id": 227437700,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1614090367
    },
    {
        "content": "<p>sure - will that be a problem</p>",
        "id": 227437730,
        "sender_full_name": "Zartaj Majeed",
        "timestamp": 1614090376
    },
    {
        "content": "<p>Since you seem to have a CS background, I highly recommend Software Foundations</p>",
        "id": 227437733,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1614090377
    },
    {
        "content": "<p>Lean4 is very fresh, and there is very little in terms of formalised maths in Lean4 at the moment</p>",
        "id": 227437759,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614090386
    },
    {
        "content": "<p>I don't intend to formalize TAOCP</p>",
        "id": 227437783,
        "sender_full_name": "Zartaj Majeed",
        "timestamp": 1614090396
    },
    {
        "content": "<p>Knuth already did that</p>",
        "id": 227437861,
        "sender_full_name": "Zartaj Majeed",
        "timestamp": 1614090429
    },
    {
        "content": "<p>I'd like to duplicate the results in a prover</p>",
        "id": 227437911,
        "sender_full_name": "Zartaj Majeed",
        "timestamp": 1614090449
    },
    {
        "content": "<p>the subject being algorithms you can imagine or know the results are typically proved by induction</p>",
        "id": 227438043,
        "sender_full_name": "Zartaj Majeed",
        "timestamp": 1614090492
    },
    {
        "content": "<p>I assumed you were asking for advice on where to start</p>",
        "id": 227438131,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1614090533
    },
    {
        "content": "<p>will it be easy to build simple induction proofs in Lean4 right now - or too much work?</p>",
        "id": 227438173,
        "sender_full_name": "Zartaj Majeed",
        "timestamp": 1614090547
    },
    {
        "content": "<p>advice on anything is appreciated</p>",
        "id": 227438231,
        "sender_full_name": "Zartaj Majeed",
        "timestamp": 1614090567
    },
    {
        "content": "<p>where to start? how to proceed with my interest?</p>",
        "id": 227438278,
        "sender_full_name": "Zartaj Majeed",
        "timestamp": 1614090588
    },
    {
        "content": "<p>There is little documentation for Lean4</p>",
        "id": 227438377,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1614090608
    },
    {
        "content": "<p>I would use Lean3 for now</p>",
        "id": 227438394,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1614090612
    },
    {
        "content": "<p>ok</p>",
        "id": 227438410,
        "sender_full_name": "Zartaj Majeed",
        "timestamp": 1614090620
    },
    {
        "content": "<p>and since you are new to formal verification I would recommend <a href=\"https://softwarefoundations.cis.upenn.edu/lf-current/toc.html\">https://softwarefoundations.cis.upenn.edu/lf-current/toc.html</a></p>",
        "id": 227438426,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1614090629
    },
    {
        "content": "<p>there's nothing wrong with the natural number game</p>",
        "id": 227438435,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1614090636
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"391875\">@Zartaj Majeed</span> please don't use the <code>(no topic)</code> title, I've moved your posts to a topic <code>Knuth's TAOCP</code></p>",
        "id": 227438485,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1614090655
    },
    {
        "content": "<p>but neither is it a structured textbook</p>",
        "id": 227438488,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1614090658
    },
    {
        "content": "<p>once you complete that book, if you have interest in verifying algorithms you can move on to <em>Verified Functional Algorithms</em></p>",
        "id": 227438596,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1614090702
    },
    {
        "content": "<p>ok</p>",
        "id": 227438628,
        "sender_full_name": "Zartaj Majeed",
        "timestamp": 1614090717
    },
    {
        "content": "<p>so you're saying don't try using Lean until one has read through those books</p>",
        "id": 227438735,
        "sender_full_name": "Zartaj Majeed",
        "timestamp": 1614090756
    },
    {
        "content": "<p>Well, for me personally, I did those books and used Lean</p>",
        "id": 227438768,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1614090771
    },
    {
        "content": "<p>and now looking back?</p>",
        "id": 227438798,
        "sender_full_name": "Zartaj Majeed",
        "timestamp": 1614090783
    },
    {
        "content": "<p>is that what you recommend?</p>",
        "id": 227438832,
        "sender_full_name": "Zartaj Majeed",
        "timestamp": 1614090792
    },
    {
        "content": "<p>Yes, if you are interested in computer science</p>",
        "id": 227439012,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1614090851
    },
    {
        "content": "<p>the exercises can be done in Lean (Software Foundations), the concepts map 1:1</p>",
        "id": 227439096,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1614090894
    },
    {
        "content": "<p>you will have to translate the supporting libraries yourself when needed</p>",
        "id": 227439129,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1614090907
    },
    {
        "content": "<p>I don't think there's any harm in trying to formalise TAOCP -- don't expect to get to the end, but I think it's completely reasonable to start. I would definitely recommend Lean 3 right now, it's simply too hard to use Lean 4 at the minute, the tooling is not yet there and you'll have enough problems if you've not used a theorem prover before.</p>",
        "id": 227439175,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614090928
    },
    {
        "content": "<p>again - I'm not trying to formalize TAOCP - it contains the formal proofs or outlines of proofs - I'm trying to implement those proofs in a theorem prover - possibly I'm misunderstanding what you mean by formalizing</p>",
        "id": 227439399,
        "sender_full_name": "Zartaj Majeed",
        "timestamp": 1614091015
    },
    {
        "content": "<p>In this community, \"formalise\" MEANS \"implement the proofs in a theorem prover\".</p>",
        "id": 227439550,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614091083
    },
    {
        "content": "<p>ok</p>",
        "id": 227439601,
        "sender_full_name": "Zartaj Majeed",
        "timestamp": 1614091091
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/lean-web-editor/#code=def%20is_even%20%28n%20%3A%20%E2%84%95%29%20%3A%3D%20%E2%88%83%20m%2C%202%20*%20m%20%3D%20n%0A%0Atheorem%20knuth121%20%28n%20%3A%20%E2%84%95%29%20%3A%20is_even%20%28n%20*%20%28n%20%2B%203%29%29%20%3A%3D%0Abegin%0A%20%20sorry%0Aend%0A\">here</a> is a link to that first exercise.</p>",
        "id": 227439614,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614091095
    },
    {
        "content": "<p>If you've worked through the natural number game you might well be in a position to have a crack at that exercise.</p>",
        "id": 227439794,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614091183
    },
    {
        "content": "<p>thanks - so I get I need to replace sorry with a tactic</p>",
        "id": 227439809,
        "sender_full_name": "Zartaj Majeed",
        "timestamp": 1614091187
    },
    {
        "content": "<p>yes, or, more likely, with a comma-separated list of tactics, just like in the natural number game.</p>",
        "id": 227439916,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614091215
    },
    {
        "content": "<p>I'll go through the rest of the game to understand</p>",
        "id": 227439928,
        "sender_full_name": "Zartaj Majeed",
        "timestamp": 1614091222
    },
    {
        "content": "<p>I assume there is big library of tactics available that I'll become familiar with</p>",
        "id": 227439991,
        "sender_full_name": "Zartaj Majeed",
        "timestamp": 1614091251
    },
    {
        "content": "<p>The advantage of Andrew's suggest to formalise Software Foundations instead is that that book was _designed_ for formalising, whereas my experience with picking up random books / courses and trying to formalise them is that the material is not always appropriate for formalisation, or is perhaps in an awkward order or something.</p>",
        "id": 227440283,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614091288
    },
    {
        "content": "<p>sure - I'd seen the penn material before</p>",
        "id": 227440408,
        "sender_full_name": "Zartaj Majeed",
        "timestamp": 1614091322
    },
    {
        "content": "<p>I'll probably keep it in mind in parallel</p>",
        "id": 227440525,
        "sender_full_name": "Zartaj Majeed",
        "timestamp": 1614091344
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html\">here</a> is your big list of tactics; but if you're a beginner then it might make more sense to go to the last level of NNG and then just look at the tactics which are \"unlocked\" on the left, because that's most of the basic ones.</p>",
        "id": 227440551,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614091352
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113488-general/topic/Knuth's.20TAOCP/near/227439175\">said</a>:</p>\n<blockquote>\n<p>I don't think there's any harm in trying to formalise TAOCP -- don't expect to get to the end, but I think it's completely reasonable to start.</p>\n</blockquote>\n<p>Rumour has it that even Knuth didn't get to the end yet <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span></p>",
        "id": 227440922,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614091440
    },
    {
        "content": "<p>thanks Kevin - the list is very helpful - starting with induction...</p>",
        "id": 227441356,
        "sender_full_name": "Zartaj Majeed",
        "timestamp": 1614091553
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"391875\">Zartaj Majeed</span> <a href=\"#narrow/stream/113488-general/topic/Knuth's.20TAOCP/near/227439399\">said</a>:</p>\n<blockquote>\n<p>again - I'm not trying to formalize TAOCP - it contains the formal proofs or outlines of proofs - </p>\n</blockquote>\n<p>You will very soon discover how funny this sentence is. Nothing you can write on paper can ever be called formalized.</p>",
        "id": 227441402,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1614091563
    },
    {
        "content": "<p>yeah - people keep moving the goal posts on Knuth - whose fault is that</p>",
        "id": 227441586,
        "sender_full_name": "Zartaj Majeed",
        "timestamp": 1614091602
    },
    {
        "content": "<p>so far:<br>\n  induction n,<br>\n  case 0 { 0 * (0 + 3) = 0 },</p>",
        "id": 227442463,
        "sender_full_name": "Zartaj Majeed",
        "timestamp": 1614091902
    },
    {
        "content": "<p>invalid nested auto-quote tactic, '{' or 'begin' expected</p>",
        "id": 227442495,
        "sender_full_name": "Zartaj Majeed",
        "timestamp": 1614091914
    },
    {
        "content": "<p>how do I say LHS = RHS?</p>",
        "id": 227442612,
        "sender_full_name": "Zartaj Majeed",
        "timestamp": 1614091942
    },
    {
        "content": "<p>I would suggest starting with NNG</p>",
        "id": 227442785,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614092008
    },
    {
        "content": "<p>it teaches you all the basic syntax and tricks etc</p>",
        "id": 227442805,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614092019
    },
    {
        "content": "<p>If I remember right, TAOCP has lots of big sums early on and binomial numbers, etc. That shouldn't be too hard to formalize -- hm, mechanize -- in Lean 3.</p>",
        "id": 227507031,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1614115969
    },
    {
        "content": "<p>I'm almost done with NNG - going back to online lean I'm unable to use some of the tactics and get invalid import errors - e.g. invalid import: tactic.use</p>",
        "id": 227587716,
        "sender_full_name": "Zartaj Majeed",
        "timestamp": 1614168181
    },
    {
        "content": "<p>how do I make sure all tactics from NNG are available in online lean?</p>",
        "id": 227587821,
        "sender_full_name": "Zartaj Majeed",
        "timestamp": 1614168243
    },
    {
        "content": "<p>Which \"online lean\" are you using? There are two, and one is a very old version</p>",
        "id": 227588006,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614168360
    },
    {
        "content": "<p>I don't think that's easy. NNG uses its own special kind of tactics</p>",
        "id": 227588055,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614168368
    },
    {
        "content": "<p><code>import tactic</code> is an easy way to get lots of common tactics</p>",
        "id": 227588070,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614168377
    },
    {
        "content": "<p>thanks Eric - that works - don't know why I did not try that first</p>",
        "id": 227588140,
        "sender_full_name": "Zartaj Majeed",
        "timestamp": 1614168430
    },
    {
        "content": "<p>I simplified my first problem to this - <a href=\"https://leanprover-community.github.io/lean-web-editor/#code=import%20tactic%0A%0Adef%20is_even%20%28n%20%3A%20%E2%84%95%29%20%3A%3D%20%E2%88%83%20m%2C%202%20*%20m%20%3D%20n%0A%0Atheorem%20two_is_even%20%28n%20%3A%20%E2%84%95%29%20%3A%20is_even%20%282%29%20%3A%3D%0Abegin%0A%20%20%20%20use%201%2C%0A%20%20%20%20ring%2C%0Aend%0A\">https://leanprover-community.github.io/lean-web-editor/#code=import%20tactic%0A%0Adef%20is_even%20%28n%20%3A%20%E2%84%95%29%20%3A%3D%20%E2%88%83%20m%2C%202%20*%20m%20%3D%20n%0A%0Atheorem%20two_is_even%20%28n%20%3A%20%E2%84%95%29%20%3A%20is_even%20%282%29%20%3A%3D%0Abegin%0A%20%20%20%20use%201%2C%0A%20%20%20%20ring%2C%0Aend%0A</a></p>",
        "id": 227588507,
        "sender_full_name": "Zartaj Majeed",
        "timestamp": 1614168653
    },
    {
        "content": "<p>can the proof be improved?</p>",
        "id": 227588578,
        "sender_full_name": "Zartaj Majeed",
        "timestamp": 1614168696
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">is_even</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">two_is_even</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_even</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">begin</span>\n<span class=\"cm\">   use 1,</span>\n<span class=\"cm\">  -- rw mul_one,</span>\n<span class=\"cm\">  -- refl,</span>\n<span class=\"cm\">  -- simp,</span>\n<span class=\"cm\">  ring,</span>\n<span class=\"cm\">end</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 227588767,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614168840
    },
    {
        "content": "<p>I would say <code>ring</code> is a bit of a hammer in this case, but it's semantically a very good tactic for the job</p>",
        "id": 227588931,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614168939
    },
    {
        "content": "<p>thanks - I see any of these work</p>",
        "id": 227588939,
        "sender_full_name": "Zartaj Majeed",
        "timestamp": 1614168946
    },
    {
        "content": "<p>well - all I see are nails</p>",
        "id": 227589017,
        "sender_full_name": "Zartaj Majeed",
        "timestamp": 1614168968
    },
    {
        "content": "<p>maybe thorns</p>",
        "id": 227589032,
        "sender_full_name": "Zartaj Majeed",
        "timestamp": 1614168977
    },
    {
        "content": "<p>but I agree</p>",
        "id": 227589052,
        "sender_full_name": "Zartaj Majeed",
        "timestamp": 1614168995
    },
    {
        "content": "<p>In this particular case, the nail is already in the right place, so there's no need to grab the hammer</p>",
        "id": 227589066,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614169004
    },
    {
        "content": "<p>lesson is don't underestimate refl!</p>",
        "id": 227589134,
        "sender_full_name": "Zartaj Majeed",
        "timestamp": 1614169049
    },
    {
        "content": "<p>How do I expand d.succ to d + 1 so I can apply induction hypothesis hd in <a href=\"https://leanprover-community.github.io/lean-web-editor/#code=import%20tactic%0A%0Adef%20is_even%20%28n%20%3A%20%E2%84%95%29%20%3A%3D%20%E2%88%83%20m%2C%202%20*%20m%20%3D%20n%0A%0Atheorem%20knuth121%20%28n%20%3A%20%E2%84%95%29%20%3A%20is_even%20%28n%20*%20%28n%20%2B%203%29%29%20%3A%3D%0Abegin%0A%20%20induction%20n%20with%20d%20hd%2C%0A%20%20use%200%2C%0A%20%20ring%2C%0A%20%20rw%20is_even%2C%0A%20%20cases%20hd%20with%20c%20hdc%2C%0A%0Aend%0A\">https://leanprover-community.github.io/lean-web-editor/#code=import%20tactic%0A%0Adef%20is_even%20%28n%20%3A%20%E2%84%95%29%20%3A%3D%20%E2%88%83%20m%2C%202%20*%20m%20%3D%20n%0A%0Atheorem%20knuth121%20%28n%20%3A%20%E2%84%95%29%20%3A%20is_even%20%28n%20*%20%28n%20%2B%203%29%29%20%3A%3D%0Abegin%0A%20%20induction%20n%20with%20d%20hd%2C%0A%20%20use%200%2C%0A%20%20ring%2C%0A%20%20rw%20is_even%2C%0A%20%20cases%20hd%20with%20c%20hdc%2C%0A%0Aend%0A</a></p>",
        "id": 227590685,
        "sender_full_name": "Zartaj Majeed",
        "timestamp": 1614169982
    },
    {
        "content": "<p>That would be using <code>nat.add_one</code> or <code>nat.succ_eq_add_one</code></p>",
        "id": 227591074,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1614170182
    },
    {
        "content": "<p>that introduces another .succ - I'm trying to get rid of succ - induction step in NNG had succ d and I could replace d easily</p>",
        "id": 227591609,
        "sender_full_name": "Zartaj Majeed",
        "timestamp": 1614170491
    },
    {
        "content": "<p>I don't think I've seen the dot notation before though its meaning is clear - just don't know how to manipulate such terms</p>",
        "id": 227591882,
        "sender_full_name": "Zartaj Majeed",
        "timestamp": 1614170641
    },
    {
        "content": "<p><code>rw nat.succ_eq_add_one,</code> removes all the <code>succ</code>s for me in your link</p>",
        "id": 227592432,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1614170933
    },
    {
        "content": "<p>indeed - thanks!</p>",
        "id": 227592639,
        "sender_full_name": "Zartaj Majeed",
        "timestamp": 1614171041
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"391875\">Zartaj Majeed</span> <a href=\"#narrow/stream/113488-general/topic/Knuth's.20TAOCP/near/227589134\">said</a>:</p>\n<blockquote>\n<p>lesson is don't underestimate refl!</p>\n</blockquote>\n<p>In NNG I explicitly don't talk about the power of <code>refl</code>, indeed internally I hacked things around so that stuff which is definitionally true doesn't get magically proved by the system if the user does not know it's definitionally true. For example <code>x + 0 = x</code> can be proved by <code>refl</code> but <code>0 + x = x</code> cannot. For me this looked confusing (mathematicians can't tell the difference between x + 0 = x and 0 + x = x so a system which distinguishes between them is a bit weird), so I make the user prove <code>x + 0 = x</code> with <code>add_zero</code>, whose proof is <code>refl</code> (but I don't tell them that).</p>",
        "id": 227594989,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614172205
    },
    {
        "content": "<p>Since NNG the dot notation was introduced. <code>n.succ</code> is just the new way of writing <code>succ n</code> and they're equal by definition (they're even syntactically equal) so anything that worked for one should work for the other.</p>",
        "id": 227595065,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614172256
    },
    {
        "content": "<p>NNG predates dot notation!?</p>",
        "id": 227597738,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614173454
    },
    {
        "content": "<p>No, iirc NNG predates the use of dot notation by default in the infoview :)</p>",
        "id": 227597862,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1614173517
    },
    {
        "content": "<p>thanks for the explanation Kevin - I have just the d now so figuring out the right sequence of distributivity and associativity to apply</p>",
        "id": 227601628,
        "sender_full_name": "Zartaj Majeed",
        "timestamp": 1614175170
    },
    {
        "content": "<blockquote>\n<p>right sequence of distributivity and associativity to apply</p>\n</blockquote>\n<p>why don't you use <code>ring</code> lol</p>",
        "id": 227631899,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1614185596
    },
    {
        "content": "<p>i mean you used ring before right, why don't you want to use it now?</p>",
        "id": 227632013,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1614185642
    },
    {
        "content": "<p>I did but it seemed to take me further from the direction I want to go</p>",
        "id": 227641384,
        "sender_full_name": "Zartaj Majeed",
        "timestamp": 1614188741
    },
    {
        "content": "<p>I'd appreciate some feedback on how  to map pen and paper induction proofs to lean</p>",
        "id": 227653950,
        "sender_full_name": "Zartaj Majeed",
        "timestamp": 1614193556
    },
    {
        "content": "<p>Here's the problem:<br>\ngiven: E m, n * (n + 3) = 2 * m<br>\nshow: E k, (n + 1) * (n + 1 + 3) = 2 * k</p>",
        "id": 227654088,
        "sender_full_name": "Zartaj Majeed",
        "timestamp": 1614193601
    },
    {
        "content": "<p>Approach 1:<br>\nstart with equality in induction hypothesis and transform to equality in goal</p>\n<p>let n * (n + 3) = 2 * d<br>\n&lt;=&gt; n * (n + 3) + n + 3 + n + 1 = 2 * d + n + 3<br>\n&lt;=&gt; (n + 1) * (n + 3) + n + 1 = 2 * d + n + 3 + n + 1<br>\n&lt;=&gt; (n + 1) * (n + 3 + 1) = 2 * d + 2 * n + 4<br>\n&lt;=&gt; (n + 1) * (n + 1 + 3) = 2 * (d + n + 2)<br>\n&lt;=&gt; (n + 1) * (n + 1 + 3) = 2 * k, where k := d + n + 2</p>",
        "id": 227654158,
        "sender_full_name": "Zartaj Majeed",
        "timestamp": 1614193636
    },
    {
        "content": "<p>Approach 2:</p>",
        "id": 227654179,
        "sender_full_name": "Zartaj Majeed",
        "timestamp": 1614193643
    },
    {
        "content": "<p>Approach 2:<br>\nstart with LHS of goal and use induction hypothesis at some point to reach RHS of goal</p>\n<p>(n + 1) * (n + 1 + 3)<br>\n= (n + 1) * (n + 3 + 1)<br>\n= (n + 1) * (n + 3) + n + 1<br>\n= n * (n + 3) + n + 3 + n + 1<br>\n= 2 * d + n + 3 + n + 1, by induction hypothesis<br>\n= 2 * d + 2 * n + 4<br>\n= 2 * (d + n + 2)<br>\n= 2 * k, where k := d + n + 2</p>",
        "id": 227654225,
        "sender_full_name": "Zartaj Majeed",
        "timestamp": 1614193665
    },
    {
        "content": "<p>Have you done the NNG? Formalizing that is similar to what you would do in NNG</p>",
        "id": 227655067,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1614194003
    },
    {
        "content": "<p>For approach 1, I want efficient tactics that maintain the equality, some types of balancing operations</p>",
        "id": 227655108,
        "sender_full_name": "Zartaj Majeed",
        "timestamp": 1614194025
    },
    {
        "content": "<p>Approach 2 seems bit easier in the sense there's just one expression to work with, just applying various arithmetic properties and operations and transforming to RHS</p>",
        "id": 227655331,
        "sender_full_name": "Zartaj Majeed",
        "timestamp": 1614194113
    },
    {
        "content": "<p>I've done the NNG but now I'm trying to formulate a kind of general plan of attack, knowing which tools are better suited for which situation</p>",
        "id": 227655509,
        "sender_full_name": "Zartaj Majeed",
        "timestamp": 1614194172
    },
    {
        "content": "<p>has anything been written up to help with this kind of question?</p>",
        "id": 227655712,
        "sender_full_name": "Zartaj Majeed",
        "timestamp": 1614194262
    },
    {
        "content": "<p>Well, your proof is in the form of a <code>calc</code> proof, so you can just write it out like that</p>",
        "id": 227655871,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1614194326
    },
    {
        "content": "<p>don't know calc but I'll take your word for it - what I'm looking to come up with is a cheatsheet of sorts</p>",
        "id": 227656216,
        "sender_full_name": "Zartaj Majeed",
        "timestamp": 1614194470
    },
    {
        "content": "<p>if you take approach 1, try these tactics</p>",
        "id": 227656254,
        "sender_full_name": "Zartaj Majeed",
        "timestamp": 1614194485
    },
    {
        "content": "<p>if you take approach 2 try these tactics</p>",
        "id": 227656281,
        "sender_full_name": "Zartaj Majeed",
        "timestamp": 1614194499
    },
    {
        "content": "<p>specific tactics not general advice</p>",
        "id": 227656320,
        "sender_full_name": "Zartaj Majeed",
        "timestamp": 1614194517
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic.ring</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">is_even</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">knuth121</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_even</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">use</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">nat.zero_mul</span><span class=\"o\">,</span> <span class=\"n\">nat.mul_zero</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">hn</span> <span class=\"k\">with</span> <span class=\"n\">d</span> <span class=\"n\">hd</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">),</span>\n    <span class=\"k\">calc</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n        <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">4</span> <span class=\"o\">:</span> <span class=\"gr\">sorry</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"gr\">sorry</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"gr\">sorry</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"gr\">sorry</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"gr\">sorry</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"gr\">sorry</span>\n    <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 227656447,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1614194562
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/extras/calc.html\">Here's a page on calc mode</a>.</p>",
        "id": 227656457,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1614194566
    },
    {
        "content": "<p>Our tactic documentation can be improved, but it's <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html\">here</a>.</p>",
        "id": 227656514,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1614194587
    },
    {
        "content": "<p>nice - that's really useful</p>",
        "id": 227656603,
        "sender_full_name": "Zartaj Majeed",
        "timestamp": 1614194628
    },
    {
        "content": "<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>no calc solution</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic.ring</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">is_even</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">knuth121</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_even</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">use</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">nat.zero_mul</span><span class=\"o\">,</span> <span class=\"n\">nat.mul_zero</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">hn</span> <span class=\"k\">with</span> <span class=\"n\">d</span> <span class=\"n\">hd</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">),</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">nat.mul_succ</span><span class=\"o\">,</span> <span class=\"n\">nat.succ_mul</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">hd</span><span class=\"o\">,</span> <span class=\"n\">nat.succ_eq_add_one</span><span class=\"o\">],</span>\n    <span class=\"n\">ring</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n</div></div>",
        "id": 227656657,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1614194644
    },
    {
        "content": "<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>one line solution</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.parity</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">knuth121</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">even</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">em</span><span class=\"o\">]</span> <span class=\"k\">with</span> <span class=\"n\">parity_simps</span>\n</code></pre></div>\n</div></div>",
        "id": 227975423,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1614366101
    },
    {
        "content": "<p>I think you have to use induction to get the marks :-)</p>",
        "id": 227976419,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614366525
    }
]